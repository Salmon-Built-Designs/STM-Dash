
429IG_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002f284  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cd0  0802f434  0802f434  0003f434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00009178  08034104  08034104  00044104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000010  0803d27c  0803d27c  0004d27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 0006ff30  0803d28c  0803d28c  0004d28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000140  080ad1bc  080ad1bc  000bd1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080ad2fc  080ad2fc  000c0100  2**0
                  CONTENTS
  8 .ARM          00000008  080ad2fc  080ad2fc  000bd2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080ad304  080ad304  000c0100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080ad304  080ad304  000bd304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080ad318  080ad318  000bd318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000100  20000000  080ad320  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ccmram       00000000  10000000  10000000  000c0100  2**0
                  CONTENTS
 14 .bss          0000b5a4  20000100  20000100  000c0100  2**2
                  ALLOC
 15 ._user_heap_stack 00000c04  2000b6a4  2000b6a4  000c0100  2**0
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  000c0100  2**0
                  CONTENTS, READONLY
 17 .debug_info   000999ef  00000000  00000000  000c0130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00010ad2  00000000  00000000  00159b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003a30  00000000  00000000  0016a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003498  00000000  00000000  0016e028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000331e3  00000000  00000000  001714c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004200f  00000000  00000000  001a46a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00111656  00000000  00000000  001e66b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000d2  00000000  00000000  002f7d08  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000fc80  00000000  00000000  002f7ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802f41c 	.word	0x0802f41c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0802f41c 	.word	0x0802f41c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <BH1750_send_command>:

	return HAL_OK;
}

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	1cfa      	adds	r2, r7, #3
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	f005 f805 	bl	8005da0 <HAL_I2C_Master_Transmit>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <BH1750_send_command+0x2e>

	return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f8aa 	bl	8000f0c <BH1750_get_lumen>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 8000dce:	2114      	movs	r1, #20
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f02d fa43 	bl	802e25c <calloc>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <BH1750_init_dev_struct+0x24>
 8000de0:	2300      	movs	r3, #0
 8000de2:	e02d      	b.n	8000e40 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2247      	movs	r2, #71	; 0x47
 8000dee:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2246      	movs	r2, #70	; 0x46
 8000df4:	725a      	strb	r2, [r3, #9]
 8000df6:	e005      	b.n	8000e04 <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	22ba      	movs	r2, #186	; 0xba
 8000dfc:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	22b9      	movs	r2, #185	; 0xb9
 8000e02:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8000e04:	68b8      	ldr	r0, [r7, #8]
 8000e06:	f7ff f9f3 	bl	80001f0 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f02d fb71 	bl	802e4f4 <malloc>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <BH1750_init_dev_struct+0x66>
 8000e22:	2300      	movs	r3, #0
 8000e24:	e00c      	b.n	8000e40 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f02e f82d 	bl	802ee92 <strcpy>

	init->poll = &BH1750_poll_self;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <BH1750_init_dev_struct+0x88>)
 8000e3c:	611a      	str	r2, [r3, #16]

	return init;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	08000dab 	.word	0x08000dab

08000e4c <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8000e54:	2101      	movs	r1, #1
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ff8c 	bl	8000d74 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff88 	bl	8000d74 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8000e64:	2110      	movs	r1, #16
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff84 	bl	8000d74 <BH1750_send_command>

	return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af02      	add	r7, sp, #8
 8000e7c:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e86:	b299      	uxth	r1, r3
			dev->buffer,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e8e:	230a      	movs	r3, #10
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2302      	movs	r3, #2
 8000e94:	f005 f882 	bl	8005f9c <HAL_I2C_Master_Receive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <BH1750_read_dev+0x2e>

	return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	895b      	ldrh	r3, [r3, #10]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b5b      	ldrb	r3, [r3, #13]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	815a      	strh	r2, [r3, #10]

	//TODO check float stuff
	dev->value/=1.2;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	895b      	ldrh	r3, [r3, #10]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb32 	bl	8000544 <__aeabi_i2d>
 8000ee0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <BH1750_convert+0x5c>)
 8000ee6:	f7ff fcc1 	bl	800086c <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fda3 	bl	8000a3c <__aeabi_d2uiz>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	815a      	strh	r2, [r3, #10]

	return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	3ff33333 	.word	0x3ff33333

08000f0c <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffae 	bl	8000e76 <BH1750_read_dev>
	BH1750_convert(dev);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffc6 	bl	8000eac <BH1750_convert>
	return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <DMA_Callback>:
#include "WS2812_Lib.h"

uint16_t WS2812_TIM_BUF[WS2812_BUFLEN];
uint8_t dma_ready = 1;

void DMA_Callback(void) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	dma_ready = 1;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <DMA_Callback+0x14>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000004 	.word	0x20000004
 8000f44:	00000000 	.word	0x00000000

08000f48 <calcBuf>:
/**
 * Internal function, calculates the HI or LO values for the 800 kHz WS2812 signal and puts them into a buffer for the Timer-DMA
 *
 */
void calcBuf(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  uint32_t n;
  uint32_t pos;
  WS2812_RGB_t led;

  pos=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  // set timings for all LEDs
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	f000 bce5 	b.w	8001924 <calcBuf+0x9dc>
    led=WS2812_LED_BUF_CH1[n];
 8000f5a:	49ab      	ldr	r1, [pc, #684]	; (8001208 <calcBuf+0x2c0>)
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	18ca      	adds	r2, r1, r3
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	8811      	ldrh	r1, [r2, #0]
 8000f6a:	7892      	ldrb	r2, [r2, #2]
 8000f6c:	8019      	strh	r1, [r3, #0]
 8000f6e:	709a      	strb	r2, [r3, #2]

    // Col:Green , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.green&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da13      	bge.n	8000fa0 <calcBuf+0x58>
 8000f78:	4ba4      	ldr	r3, [pc, #656]	; (800120c <calcBuf+0x2c4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fad0 	bl	8000524 <__aeabi_ui2d>
 8000f84:	a39c      	add	r3, pc, #624	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fc6f 	bl	800086c <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fd51 	bl	8000a3c <__aeabi_d2uiz>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	e012      	b.n	8000fc6 <calcBuf+0x7e>
 8000fa0:	4b9a      	ldr	r3, [pc, #616]	; (800120c <calcBuf+0x2c4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fabc 	bl	8000524 <__aeabi_ui2d>
 8000fac:	a394      	add	r3, pc, #592	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fc5b 	bl	800086c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd3d 	bl	8000a3c <__aeabi_d2uiz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	4990      	ldr	r1, [pc, #576]	; (8001210 <calcBuf+0x2c8>)
 8000fce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000fd2:	797b      	ldrb	r3, [r7, #5]
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d013      	beq.n	8001004 <calcBuf+0xbc>
 8000fdc:	4b8b      	ldr	r3, [pc, #556]	; (800120c <calcBuf+0x2c4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fa9e 	bl	8000524 <__aeabi_ui2d>
 8000fe8:	a383      	add	r3, pc, #524	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fc3d 	bl	800086c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fd1f 	bl	8000a3c <__aeabi_d2uiz>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	e012      	b.n	800102a <calcBuf+0xe2>
 8001004:	4b81      	ldr	r3, [pc, #516]	; (800120c <calcBuf+0x2c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa8a 	bl	8000524 <__aeabi_ui2d>
 8001010:	a37b      	add	r3, pc, #492	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff fc29 	bl	800086c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd0b 	bl	8000a3c <__aeabi_d2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1c59      	adds	r1, r3, #1
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	4977      	ldr	r1, [pc, #476]	; (8001210 <calcBuf+0x2c8>)
 8001032:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001036:	797b      	ldrb	r3, [r7, #5]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <calcBuf+0x120>
 8001040:	4b72      	ldr	r3, [pc, #456]	; (800120c <calcBuf+0x2c4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa6c 	bl	8000524 <__aeabi_ui2d>
 800104c:	a36a      	add	r3, pc, #424	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fc0b 	bl	800086c <__aeabi_ddiv>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fced 	bl	8000a3c <__aeabi_d2uiz>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	e012      	b.n	800108e <calcBuf+0x146>
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <calcBuf+0x2c4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa58 	bl	8000524 <__aeabi_ui2d>
 8001074:	a362      	add	r3, pc, #392	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fbf7 	bl	800086c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fcd9 	bl	8000a3c <__aeabi_d2uiz>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c59      	adds	r1, r3, #1
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	495e      	ldr	r1, [pc, #376]	; (8001210 <calcBuf+0x2c8>)
 8001096:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <calcBuf+0x184>
 80010a4:	4b59      	ldr	r3, [pc, #356]	; (800120c <calcBuf+0x2c4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa3a 	bl	8000524 <__aeabi_ui2d>
 80010b0:	a351      	add	r3, pc, #324	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fbd9 	bl	800086c <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fcbb 	bl	8000a3c <__aeabi_d2uiz>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	e012      	b.n	80010f2 <calcBuf+0x1aa>
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <calcBuf+0x2c4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa26 	bl	8000524 <__aeabi_ui2d>
 80010d8:	a349      	add	r3, pc, #292	; (adr r3, 8001200 <calcBuf+0x2b8>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fbc5 	bl	800086c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fca7 	bl	8000a3c <__aeabi_d2uiz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1c59      	adds	r1, r3, #1
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	4945      	ldr	r1, [pc, #276]	; (8001210 <calcBuf+0x2c8>)
 80010fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <calcBuf+0x1e8>
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <calcBuf+0x2c4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa08 	bl	8000524 <__aeabi_ui2d>
 8001114:	a338      	add	r3, pc, #224	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fba7 	bl	800086c <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fc89 	bl	8000a3c <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	e012      	b.n	8001156 <calcBuf+0x20e>
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <calcBuf+0x2c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9f4 	bl	8000524 <__aeabi_ui2d>
 800113c:	a330      	add	r3, pc, #192	; (adr r3, 8001200 <calcBuf+0x2b8>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fb93 	bl	800086c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fc75 	bl	8000a3c <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	492c      	ldr	r1, [pc, #176]	; (8001210 <calcBuf+0x2c8>)
 800115e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <calcBuf+0x24c>
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <calcBuf+0x2c4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9d6 	bl	8000524 <__aeabi_ui2d>
 8001178:	a31f      	add	r3, pc, #124	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fb75 	bl	800086c <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fc57 	bl	8000a3c <__aeabi_d2uiz>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	e012      	b.n	80011ba <calcBuf+0x272>
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <calcBuf+0x2c4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9c2 	bl	8000524 <__aeabi_ui2d>
 80011a0:	a317      	add	r3, pc, #92	; (adr r3, 8001200 <calcBuf+0x2b8>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fb61 	bl	800086c <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc43 	bl	8000a3c <__aeabi_d2uiz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1c59      	adds	r1, r3, #1
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <calcBuf+0x2c8>)
 80011c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d021      	beq.n	8001214 <calcBuf+0x2cc>
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <calcBuf+0x2c4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9a4 	bl	8000524 <__aeabi_ui2d>
 80011dc:	a306      	add	r3, pc, #24	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fb43 	bl	800086c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc25 	bl	8000a3c <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	e020      	b.n	800123a <calcBuf+0x2f2>
 80011f8:	08d3dcb1 	.word	0x08d3dcb1
 80011fc:	40013dcb 	.word	0x40013dcb
 8001200:	8ba2e8ba 	.word	0x8ba2e8ba
 8001204:	4016ba2e 	.word	0x4016ba2e
 8001208:	2000a484 	.word	0x2000a484
 800120c:	20009b3c 	.word	0x20009b3c
 8001210:	20009b84 	.word	0x20009b84
 8001214:	4bb2      	ldr	r3, [pc, #712]	; (80014e0 <calcBuf+0x598>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f982 	bl	8000524 <__aeabi_ui2d>
 8001220:	a3ab      	add	r3, pc, #684	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb21 	bl	800086c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fc03 	bl	8000a3c <__aeabi_d2uiz>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	49a8      	ldr	r1, [pc, #672]	; (80014e4 <calcBuf+0x59c>)
 8001242:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <calcBuf+0x330>
 8001250:	4ba3      	ldr	r3, [pc, #652]	; (80014e0 <calcBuf+0x598>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f964 	bl	8000524 <__aeabi_ui2d>
 800125c:	a39e      	add	r3, pc, #632	; (adr r3, 80014d8 <calcBuf+0x590>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff fb03 	bl	800086c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fbe5 	bl	8000a3c <__aeabi_d2uiz>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	e012      	b.n	800129e <calcBuf+0x356>
 8001278:	4b99      	ldr	r3, [pc, #612]	; (80014e0 <calcBuf+0x598>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f950 	bl	8000524 <__aeabi_ui2d>
 8001284:	a392      	add	r3, pc, #584	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff faef 	bl	800086c <__aeabi_ddiv>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fbd1 	bl	8000a3c <__aeabi_d2uiz>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1c59      	adds	r1, r3, #1
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	498f      	ldr	r1, [pc, #572]	; (80014e4 <calcBuf+0x59c>)
 80012a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Col:Red , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.red&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80012aa:	793b      	ldrb	r3, [r7, #4]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da13      	bge.n	80012da <calcBuf+0x392>
 80012b2:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <calcBuf+0x598>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f933 	bl	8000524 <__aeabi_ui2d>
 80012be:	a386      	add	r3, pc, #536	; (adr r3, 80014d8 <calcBuf+0x590>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f7ff fad2 	bl	800086c <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fbb4 	bl	8000a3c <__aeabi_d2uiz>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	e012      	b.n	8001300 <calcBuf+0x3b8>
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <calcBuf+0x598>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f91f 	bl	8000524 <__aeabi_ui2d>
 80012e6:	a37a      	add	r3, pc, #488	; (adr r3, 80014d0 <calcBuf+0x588>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff fabe 	bl	800086c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fba0 	bl	8000a3c <__aeabi_d2uiz>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	4977      	ldr	r1, [pc, #476]	; (80014e4 <calcBuf+0x59c>)
 8001308:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800130c:	793b      	ldrb	r3, [r7, #4]
 800130e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d013      	beq.n	800133e <calcBuf+0x3f6>
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <calcBuf+0x598>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f901 	bl	8000524 <__aeabi_ui2d>
 8001322:	a36d      	add	r3, pc, #436	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff faa0 	bl	800086c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb82 	bl	8000a3c <__aeabi_d2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	e012      	b.n	8001364 <calcBuf+0x41c>
 800133e:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <calcBuf+0x598>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ed 	bl	8000524 <__aeabi_ui2d>
 800134a:	a361      	add	r3, pc, #388	; (adr r3, 80014d0 <calcBuf+0x588>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa8c 	bl	800086c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fb6e 	bl	8000a3c <__aeabi_d2uiz>
 8001360:	4603      	mov	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c59      	adds	r1, r3, #1
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	495e      	ldr	r1, [pc, #376]	; (80014e4 <calcBuf+0x59c>)
 800136c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001370:	793b      	ldrb	r3, [r7, #4]
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	2b00      	cmp	r3, #0
 8001378:	d013      	beq.n	80013a2 <calcBuf+0x45a>
 800137a:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <calcBuf+0x598>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8cf 	bl	8000524 <__aeabi_ui2d>
 8001386:	a354      	add	r3, pc, #336	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fa6e 	bl	800086c <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb50 	bl	8000a3c <__aeabi_d2uiz>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	e012      	b.n	80013c8 <calcBuf+0x480>
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <calcBuf+0x598>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8bb 	bl	8000524 <__aeabi_ui2d>
 80013ae:	a348      	add	r3, pc, #288	; (adr r3, 80014d0 <calcBuf+0x588>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fa5a 	bl	800086c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb3c 	bl	8000a3c <__aeabi_d2uiz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c59      	adds	r1, r3, #1
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	4945      	ldr	r1, [pc, #276]	; (80014e4 <calcBuf+0x59c>)
 80013d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80013d4:	793b      	ldrb	r3, [r7, #4]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d013      	beq.n	8001406 <calcBuf+0x4be>
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <calcBuf+0x598>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f89d 	bl	8000524 <__aeabi_ui2d>
 80013ea:	a33b      	add	r3, pc, #236	; (adr r3, 80014d8 <calcBuf+0x590>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff fa3c 	bl	800086c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb1e 	bl	8000a3c <__aeabi_d2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	e012      	b.n	800142c <calcBuf+0x4e4>
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <calcBuf+0x598>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f889 	bl	8000524 <__aeabi_ui2d>
 8001412:	a32f      	add	r3, pc, #188	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fa28 	bl	800086c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb0a 	bl	8000a3c <__aeabi_d2uiz>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	492c      	ldr	r1, [pc, #176]	; (80014e4 <calcBuf+0x59c>)
 8001434:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001438:	793b      	ldrb	r3, [r7, #4]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d013      	beq.n	800146a <calcBuf+0x522>
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <calcBuf+0x598>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_ui2d>
 800144e:	a322      	add	r3, pc, #136	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff fa0a 	bl	800086c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff faec 	bl	8000a3c <__aeabi_d2uiz>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	e012      	b.n	8001490 <calcBuf+0x548>
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <calcBuf+0x598>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f857 	bl	8000524 <__aeabi_ui2d>
 8001476:	a316      	add	r3, pc, #88	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f9f6 	bl	800086c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fad8 	bl	8000a3c <__aeabi_d2uiz>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c59      	adds	r1, r3, #1
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	4913      	ldr	r1, [pc, #76]	; (80014e4 <calcBuf+0x59c>)
 8001498:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d020      	beq.n	80014e8 <calcBuf+0x5a0>
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <calcBuf+0x598>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f839 	bl	8000524 <__aeabi_ui2d>
 80014b2:	a309      	add	r3, pc, #36	; (adr r3, 80014d8 <calcBuf+0x590>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9d8 	bl	800086c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff faba 	bl	8000a3c <__aeabi_d2uiz>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	e01f      	b.n	800150e <calcBuf+0x5c6>
 80014ce:	bf00      	nop
 80014d0:	8ba2e8ba 	.word	0x8ba2e8ba
 80014d4:	4016ba2e 	.word	0x4016ba2e
 80014d8:	08d3dcb1 	.word	0x08d3dcb1
 80014dc:	40013dcb 	.word	0x40013dcb
 80014e0:	20009b3c 	.word	0x20009b3c
 80014e4:	20009b84 	.word	0x20009b84
 80014e8:	4bb3      	ldr	r3, [pc, #716]	; (80017b8 <calcBuf+0x870>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f818 	bl	8000524 <__aeabi_ui2d>
 80014f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80017a8 <calcBuf+0x860>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f9b7 	bl	800086c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fa99 	bl	8000a3c <__aeabi_d2uiz>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1c59      	adds	r1, r3, #1
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	49a9      	ldr	r1, [pc, #676]	; (80017bc <calcBuf+0x874>)
 8001516:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800151a:	793b      	ldrb	r3, [r7, #4]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <calcBuf+0x604>
 8001524:	4ba4      	ldr	r3, [pc, #656]	; (80017b8 <calcBuf+0x870>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fffa 	bl	8000524 <__aeabi_ui2d>
 8001530:	a39f      	add	r3, pc, #636	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f999 	bl	800086c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fa7b 	bl	8000a3c <__aeabi_d2uiz>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	e012      	b.n	8001572 <calcBuf+0x62a>
 800154c:	4b9a      	ldr	r3, [pc, #616]	; (80017b8 <calcBuf+0x870>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffe6 	bl	8000524 <__aeabi_ui2d>
 8001558:	a393      	add	r3, pc, #588	; (adr r3, 80017a8 <calcBuf+0x860>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f985 	bl	800086c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fa67 	bl	8000a3c <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	b29a      	uxth	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1c59      	adds	r1, r3, #1
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	4990      	ldr	r1, [pc, #576]	; (80017bc <calcBuf+0x874>)
 800157a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800157e:	793b      	ldrb	r3, [r7, #4]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <calcBuf+0x668>
 8001588:	4b8b      	ldr	r3, [pc, #556]	; (80017b8 <calcBuf+0x870>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffc8 	bl	8000524 <__aeabi_ui2d>
 8001594:	a386      	add	r3, pc, #536	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f967 	bl	800086c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fa49 	bl	8000a3c <__aeabi_d2uiz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	e012      	b.n	80015d6 <calcBuf+0x68e>
 80015b0:	4b81      	ldr	r3, [pc, #516]	; (80017b8 <calcBuf+0x870>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffb4 	bl	8000524 <__aeabi_ui2d>
 80015bc:	a37a      	add	r3, pc, #488	; (adr r3, 80017a8 <calcBuf+0x860>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f953 	bl	800086c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa35 	bl	8000a3c <__aeabi_d2uiz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	4977      	ldr	r1, [pc, #476]	; (80017bc <calcBuf+0x874>)
 80015de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	// Col:Blue , Bit:7..0
	WS2812_TIM_BUF[pos++]=((led.blue&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da13      	bge.n	8001612 <calcBuf+0x6ca>
 80015ea:	4b73      	ldr	r3, [pc, #460]	; (80017b8 <calcBuf+0x870>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff97 	bl	8000524 <__aeabi_ui2d>
 80015f6:	a36e      	add	r3, pc, #440	; (adr r3, 80017b0 <calcBuf+0x868>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff f936 	bl	800086c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff fa18 	bl	8000a3c <__aeabi_d2uiz>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	e012      	b.n	8001638 <calcBuf+0x6f0>
 8001612:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <calcBuf+0x870>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff83 	bl	8000524 <__aeabi_ui2d>
 800161e:	a362      	add	r3, pc, #392	; (adr r3, 80017a8 <calcBuf+0x860>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f922 	bl	800086c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fa04 	bl	8000a3c <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c59      	adds	r1, r3, #1
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	495f      	ldr	r1, [pc, #380]	; (80017bc <calcBuf+0x874>)
 8001640:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164a:	2b00      	cmp	r3, #0
 800164c:	d013      	beq.n	8001676 <calcBuf+0x72e>
 800164e:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <calcBuf+0x870>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff65 	bl	8000524 <__aeabi_ui2d>
 800165a:	a355      	add	r3, pc, #340	; (adr r3, 80017b0 <calcBuf+0x868>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff f904 	bl	800086c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff f9e6 	bl	8000a3c <__aeabi_d2uiz>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	e012      	b.n	800169c <calcBuf+0x754>
 8001676:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <calcBuf+0x870>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff51 	bl	8000524 <__aeabi_ui2d>
 8001682:	a349      	add	r3, pc, #292	; (adr r3, 80017a8 <calcBuf+0x860>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7ff f8f0 	bl	800086c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff f9d2 	bl	8000a3c <__aeabi_d2uiz>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1c59      	adds	r1, r3, #1
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	4946      	ldr	r1, [pc, #280]	; (80017bc <calcBuf+0x874>)
 80016a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d013      	beq.n	80016da <calcBuf+0x792>
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <calcBuf+0x870>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff33 	bl	8000524 <__aeabi_ui2d>
 80016be:	a33c      	add	r3, pc, #240	; (adr r3, 80017b0 <calcBuf+0x868>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7ff f8d2 	bl	800086c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff f9b4 	bl	8000a3c <__aeabi_d2uiz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	e012      	b.n	8001700 <calcBuf+0x7b8>
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <calcBuf+0x870>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff1f 	bl	8000524 <__aeabi_ui2d>
 80016e6:	a330      	add	r3, pc, #192	; (adr r3, 80017a8 <calcBuf+0x860>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f8be 	bl	800086c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff f9a0 	bl	8000a3c <__aeabi_d2uiz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	492d      	ldr	r1, [pc, #180]	; (80017bc <calcBuf+0x874>)
 8001708:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <calcBuf+0x7f6>
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <calcBuf+0x870>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff01 	bl	8000524 <__aeabi_ui2d>
 8001722:	a323      	add	r3, pc, #140	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7ff f8a0 	bl	800086c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f982 	bl	8000a3c <__aeabi_d2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	e012      	b.n	8001764 <calcBuf+0x81c>
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <calcBuf+0x870>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_ui2d>
 800174a:	a317      	add	r3, pc, #92	; (adr r3, 80017a8 <calcBuf+0x860>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f88c 	bl	800086c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f96e 	bl	8000a3c <__aeabi_d2uiz>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4914      	ldr	r1, [pc, #80]	; (80017bc <calcBuf+0x874>)
 800176c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d022      	beq.n	80017c0 <calcBuf+0x878>
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <calcBuf+0x870>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fecf 	bl	8000524 <__aeabi_ui2d>
 8001786:	a30a      	add	r3, pc, #40	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7ff f86e 	bl	800086c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f950 	bl	8000a3c <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	e021      	b.n	80017e6 <calcBuf+0x89e>
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	8ba2e8ba 	.word	0x8ba2e8ba
 80017ac:	4016ba2e 	.word	0x4016ba2e
 80017b0:	08d3dcb1 	.word	0x08d3dcb1
 80017b4:	40013dcb 	.word	0x40013dcb
 80017b8:	20009b3c 	.word	0x20009b3c
 80017bc:	20009b84 	.word	0x20009b84
 80017c0:	4b69      	ldr	r3, [pc, #420]	; (8001968 <calcBuf+0xa20>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feac 	bl	8000524 <__aeabi_ui2d>
 80017cc:	a362      	add	r3, pc, #392	; (adr r3, 8001958 <calcBuf+0xa10>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7ff f84b 	bl	800086c <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f92d 	bl	8000a3c <__aeabi_d2uiz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1c59      	adds	r1, r3, #1
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	495f      	ldr	r1, [pc, #380]	; (800196c <calcBuf+0xa24>)
 80017ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <calcBuf+0x8dc>
 80017fc:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <calcBuf+0xa20>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe8e 	bl	8000524 <__aeabi_ui2d>
 8001808:	a355      	add	r3, pc, #340	; (adr r3, 8001960 <calcBuf+0xa18>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7ff f82d 	bl	800086c <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f90f 	bl	8000a3c <__aeabi_d2uiz>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	e012      	b.n	800184a <calcBuf+0x902>
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <calcBuf+0xa20>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe7a 	bl	8000524 <__aeabi_ui2d>
 8001830:	a349      	add	r3, pc, #292	; (adr r3, 8001958 <calcBuf+0xa10>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7ff f819 	bl	800086c <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f8fb 	bl	8000a3c <__aeabi_d2uiz>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1c59      	adds	r1, r3, #1
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	4946      	ldr	r1, [pc, #280]	; (800196c <calcBuf+0xa24>)
 8001852:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <calcBuf+0x940>
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <calcBuf+0xa20>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe5c 	bl	8000524 <__aeabi_ui2d>
 800186c:	a33c      	add	r3, pc, #240	; (adr r3, 8001960 <calcBuf+0xa18>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fffb 	bl	800086c <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f8dd 	bl	8000a3c <__aeabi_d2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	e012      	b.n	80018ae <calcBuf+0x966>
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <calcBuf+0xa20>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe48 	bl	8000524 <__aeabi_ui2d>
 8001894:	a330      	add	r3, pc, #192	; (adr r3, 8001958 <calcBuf+0xa10>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe ffe7 	bl	800086c <__aeabi_ddiv>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f8c9 	bl	8000a3c <__aeabi_d2uiz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c59      	adds	r1, r3, #1
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	492d      	ldr	r1, [pc, #180]	; (800196c <calcBuf+0xa24>)
 80018b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <calcBuf+0x9a4>
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <calcBuf+0xa20>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe2a 	bl	8000524 <__aeabi_ui2d>
 80018d0:	a323      	add	r3, pc, #140	; (adr r3, 8001960 <calcBuf+0xa18>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe ffc9 	bl	800086c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f8ab 	bl	8000a3c <__aeabi_d2uiz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	e012      	b.n	8001912 <calcBuf+0x9ca>
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <calcBuf+0xa20>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe16 	bl	8000524 <__aeabi_ui2d>
 80018f8:	a317      	add	r3, pc, #92	; (adr r3, 8001958 <calcBuf+0xa10>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe ffb5 	bl	800086c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f897 	bl	8000a3c <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	4914      	ldr	r1, [pc, #80]	; (800196c <calcBuf+0xa24>)
 800191a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b2d      	cmp	r3, #45	; 0x2d
 8001928:	f67f ab17 	bls.w	8000f5a <calcBuf+0x12>
  }

  // short pause after all LEDs have been updated
  for(n=0;n<48;n++) {
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e009      	b.n	8001946 <calcBuf+0x9fe>
    WS2812_TIM_BUF[pos++]=0;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <calcBuf+0xa24>)
 800193a:	2100      	movs	r1, #0
 800193c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(n=0;n<48;n++) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b2f      	cmp	r3, #47	; 0x2f
 800194a:	d9f2      	bls.n	8001932 <calcBuf+0x9ea>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	8ba2e8ba 	.word	0x8ba2e8ba
 800195c:	4016ba2e 	.word	0x4016ba2e
 8001960:	08d3dcb1 	.word	0x08d3dcb1
 8001964:	40013dcb 	.word	0x40013dcb
 8001968:	20009b3c 	.word	0x20009b3c
 800196c:	20009b84 	.word	0x20009b84

08001970 <startDMA>:

/**
 * Internal function; start DMA transfer
 */
void startDMA(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	//uint8_t test[8] = {10};
	dma_ready = 0;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <startDMA+0x1c>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)WS2812_TIM_BUF, WS2812_BUFLEN);
 800197a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <startDMA+0x20>)
 8001980:	2100      	movs	r1, #0
 8001982:	4804      	ldr	r0, [pc, #16]	; (8001994 <startDMA+0x24>)
 8001984:	f007 fdd6 	bl	8009534 <HAL_TIM_PWM_Start_DMA>
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000004 	.word	0x20000004
 8001990:	20009b84 	.word	0x20009b84
 8001994:	20009b3c 	.word	0x20009b3c

08001998 <WS2812_Refresh>:

void WS2812_Refresh(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	while(!dma_ready);
 800199c:	bf00      	nop
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <WS2812_Refresh+0x1c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0fb      	beq.n	800199e <WS2812_Refresh+0x6>
	calcBuf();
 80019a6:	f7ff facf 	bl	8000f48 <calcBuf>
	startDMA();
 80019aa:	f7ff ffe1 	bl	8001970 <startDMA>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000004 	.word	0x20000004

080019b8 <WS2812_Clear>:

/**
 * Set all LEDs to 0 (off) and update
 */
void WS2812_Clear(uint8_t refresh) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	uint16_t num;

	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	81fb      	strh	r3, [r7, #14]
 80019c6:	e01a      	b.n	80019fe <WS2812_Clear+0x46>
		WS2812_LED_BUF_CH1[num] = (WS2812_RGB_t){0,0,0};
 80019c8:	89fa      	ldrh	r2, [r7, #14]
 80019ca:	4913      	ldr	r1, [pc, #76]	; (8001a18 <WS2812_Clear+0x60>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	2100      	movs	r1, #0
 80019d6:	7019      	strb	r1, [r3, #0]
 80019d8:	490f      	ldr	r1, [pc, #60]	; (8001a18 <WS2812_Clear+0x60>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	3301      	adds	r3, #1
 80019e4:	2100      	movs	r1, #0
 80019e6:	7019      	strb	r1, [r3, #0]
 80019e8:	490b      	ldr	r1, [pc, #44]	; (8001a18 <WS2812_Clear+0x60>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	3302      	adds	r3, #2
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	3301      	adds	r3, #1
 80019fc:	81fb      	strh	r3, [r7, #14]
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	2b2d      	cmp	r3, #45	; 0x2d
 8001a02:	d9e1      	bls.n	80019c8 <WS2812_Clear+0x10>
	}

	 if(refresh==1) WS2812_Refresh();
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <WS2812_Clear+0x56>
 8001a0a:	f7ff ffc5 	bl	8001998 <WS2812_Refresh>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000a484 	.word	0x2000a484

08001a1c <WS2812_One_RGB>:

/**
 * Set one LED (R, G, B values). If refresh == 1, update LEDs, otherwise just update buffer (if several function calls are to be done before refresh)
 */
void WS2812_One_RGB(uint32_t nr, WS2812_RGB_t rgb_col, uint8_t refresh)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	4613      	mov	r3, r2
 8001a28:	71fb      	strb	r3, [r7, #7]
  if(nr<WS2812_NUM_LEDS_CH1) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b2d      	cmp	r3, #45	; 0x2d
 8001a2e:	d811      	bhi.n	8001a54 <WS2812_One_RGB+0x38>
	  WS2812_LED_BUF_CH1[nr]=rgb_col;
 8001a30:	490a      	ldr	r1, [pc, #40]	; (8001a5c <WS2812_One_RGB+0x40>)
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	8819      	ldrh	r1, [r3, #0]
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	8011      	strh	r1, [r2, #0]
 8001a48:	7093      	strb	r3, [r2, #2]

    if(refresh==1) WS2812_Refresh();
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <WS2812_One_RGB+0x38>
 8001a50:	f7ff ffa2 	bl	8001998 <WS2812_Refresh>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000a484 	.word	0x2000a484

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BufferIsSet = 0;
 8001a64:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <main+0x12c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6a:	f002 fc5f 	bl	800432c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6e:	f000 f8d5 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a72:	f000 fccf 	bl	8002414 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001a76:	f000 fa6b 	bl	8001f50 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001a7a:	f000 f9e1 	bl	8001e40 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001a7e:	f000 fc6b 	bl	8002358 <MX_FMC_Init>
  MX_CRC_Init();
 8001a82:	f000 f9c9 	bl	8001e18 <MX_CRC_Init>
  MX_TIM13_Init();
 8001a86:	f000 fbf9 	bl	800227c <MX_TIM13_Init>
  MX_DMA_Init();
 8001a8a:	f000 fc45 	bl	8002318 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a8e:	f000 fb03 	bl	8002098 <MX_TIM1_Init>
  MX_TIM9_Init();
 8001a92:	f000 fba1 	bl	80021d8 <MX_TIM9_Init>
  MX_CAN1_Init();
 8001a96:	f000 f92d 	bl	8001cf4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001a9a:	f000 f987 	bl	8001dac <MX_CAN2_Init>
  MX_I2C2_Init();
 8001a9e:	f000 fa17 	bl	8001ed0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001aa2:	f000 fad9 	bl	8002058 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001aa6:	f009 fd2f 	bl	800b508 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8001aaa:	f00d fc47 	bl	800f33c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4837      	ldr	r0, [pc, #220]	; (8001b90 <main+0x130>)
 8001ab2:	f007 fc77 	bl	80093a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4836      	ldr	r0, [pc, #216]	; (8001b94 <main+0x134>)
 8001aba:	f007 fc73 	bl	80093a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4834      	ldr	r0, [pc, #208]	; (8001b94 <main+0x134>)
 8001ac2:	f007 fc6f 	bl	80093a4 <HAL_TIM_PWM_Start>


  BH1750_sensor = BH1750_init_dev_struct(&hi2c2, "BH1750 device", true);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4933      	ldr	r1, [pc, #204]	; (8001b98 <main+0x138>)
 8001aca:	4834      	ldr	r0, [pc, #208]	; (8001b9c <main+0x13c>)
 8001acc:	f7ff f978 	bl	8000dc0 <BH1750_init_dev_struct>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a33      	ldr	r2, [pc, #204]	; (8001ba0 <main+0x140>)
 8001ad4:	6013      	str	r3, [r2, #0]

  BH1750_init_dev(BH1750_sensor);
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <main+0x140>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f9b6 	bl	8000e4c <BH1750_init_dev>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ae0:	f009 fff6 	bl	800bad0 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of START_Task */
  START_TaskHandle = osThreadNew(Start_START_Task, NULL, &START_Task_attributes);
 8001ae4:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <main+0x144>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	482f      	ldr	r0, [pc, #188]	; (8001ba8 <main+0x148>)
 8001aea:	f00a f872 	bl	800bbd2 <osThreadNew>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a2e      	ldr	r2, [pc, #184]	; (8001bac <main+0x14c>)
 8001af2:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001af4:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <main+0x150>)
 8001af6:	2100      	movs	r1, #0
 8001af8:	482e      	ldr	r0, [pc, #184]	; (8001bb4 <main+0x154>)
 8001afa:	f00a f86a 	bl	800bbd2 <osThreadNew>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <main+0x158>)
 8001b02:	6013      	str	r3, [r2, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(Start_SD_Task, NULL, &SD_Task_attributes);
 8001b04:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <main+0x15c>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <main+0x160>)
 8001b0a:	f00a f862 	bl	800bbd2 <osThreadNew>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <main+0x164>)
 8001b12:	6013      	str	r3, [r2, #0]

  /* creation of LED_Task */
  LED_TaskHandle = osThreadNew(Start_LED_Task, NULL, &LED_Task_attributes);
 8001b14:	4a2c      	ldr	r2, [pc, #176]	; (8001bc8 <main+0x168>)
 8001b16:	2100      	movs	r1, #0
 8001b18:	482c      	ldr	r0, [pc, #176]	; (8001bcc <main+0x16c>)
 8001b1a:	f00a f85a 	bl	800bbd2 <osThreadNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <main+0x170>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Task */
  CAN_TaskHandle = osThreadNew(Start_CAN_Task, NULL, &CAN_Task_attributes);
 8001b24:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <main+0x174>)
 8001b26:	2100      	movs	r1, #0
 8001b28:	482b      	ldr	r0, [pc, #172]	; (8001bd8 <main+0x178>)
 8001b2a:	f00a f852 	bl	800bbd2 <osThreadNew>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a2a      	ldr	r2, [pc, #168]	; (8001bdc <main+0x17c>)
 8001b32:	6013      	str	r3, [r2, #0]

  /* creation of BTN_Task */
  BTN_TaskHandle = osThreadNew(Start_BTN_Task, NULL, &BTN_Task_attributes);
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <main+0x180>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	482a      	ldr	r0, [pc, #168]	; (8001be4 <main+0x184>)
 8001b3a:	f00a f84a 	bl	800bbd2 <osThreadNew>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <main+0x188>)
 8001b42:	6013      	str	r3, [r2, #0]

  /* creation of BARO_Task */
  BARO_TaskHandle = osThreadNew(Start_BARO_Task, NULL, &BARO_Task_attributes);
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <main+0x18c>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4829      	ldr	r0, [pc, #164]	; (8001bf0 <main+0x190>)
 8001b4a:	f00a f842 	bl	800bbd2 <osThreadNew>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <main+0x194>)
 8001b52:	6013      	str	r3, [r2, #0]

  /* creation of RGB_Task */
  RGB_TaskHandle = osThreadNew(Start_RGB_Task, NULL, &RGB_Task_attributes);
 8001b54:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <main+0x198>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	4828      	ldr	r0, [pc, #160]	; (8001bfc <main+0x19c>)
 8001b5a:	f00a f83a 	bl	800bbd2 <osThreadNew>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <main+0x1a0>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* creation of BH1750_Task */
  BH1750_TaskHandle = osThreadNew(Start_BH1750_Task, NULL, &BH1750_Task_attributes);
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <main+0x1a4>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4827      	ldr	r0, [pc, #156]	; (8001c08 <main+0x1a8>)
 8001b6a:	f00a f832 	bl	800bbd2 <osThreadNew>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <main+0x1ac>)
 8001b72:	6013      	str	r3, [r2, #0]

  /* creation of LPS22_Task */
  LPS22_TaskHandle = osThreadNew(Start_LPS22_Task, NULL, &LPS22_Task_attributes);
 8001b74:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <main+0x1b0>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4826      	ldr	r0, [pc, #152]	; (8001c14 <main+0x1b4>)
 8001b7a:	f00a f82a 	bl	800bbd2 <osThreadNew>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <main+0x1b8>)
 8001b82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b84:	f009 ffea 	bl	800bb5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8001b88:	e7fe      	b.n	8001b88 <main+0x128>
 8001b8a:	bf00      	nop
 8001b8c:	2000a514 	.word	0x2000a514
 8001b90:	2000a710 	.word	0x2000a710
 8001b94:	2000afe0 	.word	0x2000afe0
 8001b98:	0802f4ac 	.word	0x0802f4ac
 8001b9c:	2000a528 	.word	0x2000a528
 8001ba0:	2000b194 	.word	0x2000b194
 8001ba4:	0802ffe0 	.word	0x0802ffe0
 8001ba8:	080026d5 	.word	0x080026d5
 8001bac:	2000a638 	.word	0x2000a638
 8001bb0:	08030004 	.word	0x08030004
 8001bb4:	0800f349 	.word	0x0800f349
 8001bb8:	2000a70c 	.word	0x2000a70c
 8001bbc:	08030028 	.word	0x08030028
 8001bc0:	0800273d 	.word	0x0800273d
 8001bc4:	2000a51c 	.word	0x2000a51c
 8001bc8:	0803004c 	.word	0x0803004c
 8001bcc:	0800274d 	.word	0x0800274d
 8001bd0:	2000a61c 	.word	0x2000a61c
 8001bd4:	08030070 	.word	0x08030070
 8001bd8:	08002761 	.word	0x08002761
 8001bdc:	2000b0b4 	.word	0x2000b0b4
 8001be0:	08030094 	.word	0x08030094
 8001be4:	08003299 	.word	0x08003299
 8001be8:	2000b028 	.word	0x2000b028
 8001bec:	080300b8 	.word	0x080300b8
 8001bf0:	080033a5 	.word	0x080033a5
 8001bf4:	2000b198 	.word	0x2000b198
 8001bf8:	080300dc 	.word	0x080300dc
 8001bfc:	080033b5 	.word	0x080033b5
 8001c00:	2000a510 	.word	0x2000a510
 8001c04:	08030100 	.word	0x08030100
 8001c08:	080035a5 	.word	0x080035a5
 8001c0c:	2000a518 	.word	0x2000a518
 8001c10:	08030124 	.word	0x08030124
 8001c14:	080035bb 	.word	0x080035bb
 8001c18:	2000b190 	.word	0x2000b190

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	; 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2230      	movs	r2, #48	; 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f02c fc80 	bl	802e530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <SystemClock_Config+0xd0>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a28      	ldr	r2, [pc, #160]	; (8001cec <SystemClock_Config+0xd0>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <SystemClock_Config+0xd0>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <SystemClock_Config+0xd4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <SystemClock_Config+0xd4>)
 8001c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <SystemClock_Config+0xd4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c90:	23a8      	movs	r3, #168	; 0xa8
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f005 fadf 	bl	8007264 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cac:	f001 fca0 	bl	80035f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2105      	movs	r1, #5
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f005 fd40 	bl	8007754 <HAL_RCC_ClockConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cda:	f001 fc89 	bl	80035f0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001cde:	f005 fe1f 	bl	8007920 <HAL_RCC_EnableCSS>
}
 8001ce2:	bf00      	nop
 8001ce4:	3750      	adds	r7, #80	; 0x50
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <MX_CAN1_Init+0xb4>)
 8001cfe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d02:	2215      	movs	r2, #21
 8001d04:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d1e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d26:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d44:	4817      	ldr	r0, [pc, #92]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d46:	f002 fb57 	bl	80043f8 <HAL_CAN_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d50:	f001 fc4e 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 15;
 8001d54:	230f      	movs	r3, #15
 8001d56:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	61fb      	str	r3, [r7, #28]
  	sFilterConfig.FilterIdHigh = 0x0000;
 8001d60:	2300      	movs	r3, #0
 8001d62:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIdLow = 0x0000;
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterActivation = ENABLE;
 8001d74:	2301      	movs	r3, #1
 8001d76:	623b      	str	r3, [r7, #32]
  	//sFilterConfig.SlaveStartFilterBank = 14;
  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d7e:	f002 fc37 	bl	80045f0 <HAL_CAN_ConfigFilter>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_CAN1_Init+0x98>
  		/* Filter configuration Error */
  		Error_Handler();
 8001d88:	f001 fc32 	bl	80035f0 <Error_Handler>
  	}
  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_CAN1_Init+0xb0>)
 8001d8e:	f002 fd0f 	bl	80047b0 <HAL_CAN_Start>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_CAN1_Init+0xa8>
  		/* Start Error */
  		Error_Handler();
 8001d98:	f001 fc2a 	bl	80035f0 <Error_Handler>
  	}
  /* USER CODE END CAN1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000b100 	.word	0x2000b100
 8001da8:	40006400 	.word	0x40006400

08001dac <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001db2:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <MX_CAN2_Init+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001db8:	2215      	movs	r2, #21
 8001dba:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001dd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dd4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001dfa:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_CAN2_Init+0x64>)
 8001dfc:	f002 fafc 	bl	80043f8 <HAL_CAN_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001e06:	f001 fbf3 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000a6e4 	.word	0x2000a6e4
 8001e14:	40006800 	.word	0x40006800

08001e18 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_CRC_Init+0x20>)
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <MX_CRC_Init+0x24>)
 8001e20:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_CRC_Init+0x20>)
 8001e24:	f002 fefc 	bl	8004c20 <HAL_CRC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001e2e:	f001 fbdf 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000a520 	.word	0x2000a520
 8001e3c:	40023000 	.word	0x40023000

08001e40 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e46:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <MX_DMA2D_Init+0x8c>)
 8001e48:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e50:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e54:	2202      	movs	r2, #2
 8001e56:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e66:	2202      	movs	r2, #2
 8001e68:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e7e:	2202      	movs	r2, #2
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001e8e:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001e90:	f003 fa5e 	bl	8005350 <HAL_DMA2D_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8001e9a:	f001 fba9 	bl	80035f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001ea2:	f003 fbaf 	bl	8005604 <HAL_DMA2D_ConfigLayer>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8001eac:	f001 fba0 	bl	80035f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_DMA2D_Init+0x88>)
 8001eb4:	f003 fba6 	bl	8005604 <HAL_DMA2D_ConfigLayer>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8001ebe:	f001 fb97 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000b0b8 	.word	0x2000b0b8
 8001ecc:	4002b000 	.word	0x4002b000

08001ed0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <MX_I2C2_Init+0x78>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001edc:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <MX_I2C2_Init+0x7c>)
 8001ede:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001f0e:	f003 fe03 	bl	8005b18 <HAL_I2C_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f18:	f001 fb6a 	bl	80035f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4809      	ldr	r0, [pc, #36]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001f20:	f004 fd8f 	bl	8006a42 <HAL_I2CEx_ConfigAnalogFilter>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001f2a:	f001 fb61 	bl	80035f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <MX_I2C2_Init+0x74>)
 8001f32:	f004 fdc2 	bl	8006aba <HAL_I2CEx_ConfigDigitalFilter>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001f3c:	f001 fb58 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	2000a528 	.word	0x2000a528
 8001f48:	40005800 	.word	0x40005800
 8001f4c:	00061a80 	.word	0x00061a80

08001f50 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	; 0x38
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2234      	movs	r2, #52	; 0x34
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f02c fae7 	bl	802e530 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f64:	4a3b      	ldr	r2, [pc, #236]	; (8002054 <MX_LTDC_Init+0x104>)
 8001f66:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001f68:	4b39      	ldr	r3, [pc, #228]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f6e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001f70:	4b37      	ldr	r3, [pc, #220]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f76:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f7e:	4b34      	ldr	r3, [pc, #208]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 80;
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f92:	2250      	movs	r2, #80	; 0x50
 8001f94:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 40;
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f98:	2228      	movs	r2, #40	; 0x28
 8001f9a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1104;
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <MX_LTDC_Init+0x100>)
 8001f9e:	f44f 628a 	mov.w	r2, #1104	; 0x450
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 640;
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <MX_LTDC_Init+0x100>)
 8001fa6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1304;
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <MX_LTDC_Init+0x100>)
 8001fae:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 662;
 8001fb4:	4b26      	ldr	r3, [pc, #152]	; (8002050 <MX_LTDC_Init+0x100>)
 8001fb6:	f240 2296 	movw	r2, #662	; 0x296
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <MX_LTDC_Init+0x100>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <MX_LTDC_Init+0x100>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001fcc:	4b20      	ldr	r3, [pc, #128]	; (8002050 <MX_LTDC_Init+0x100>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001fd4:	481e      	ldr	r0, [pc, #120]	; (8002050 <MX_LTDC_Init+0x100>)
 8001fd6:	f004 fdaf 	bl	8006b38 <HAL_LTDC_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8001fe0:	f001 fb06 	bl	80035f0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 8001fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fec:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8001ff2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001ff6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001ffc:	23ff      	movs	r3, #255	; 0xff
 8001ffe:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002004:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002008:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800200a:	2307      	movs	r3, #7
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800200e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8002014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 800201a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_LTDC_Init+0x100>)
 800203a:	f004 ff05 	bl	8006e48 <HAL_LTDC_ConfigLayer>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8002044:	f001 fad4 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	3738      	adds	r7, #56	; 0x38
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	2000a63c 	.word	0x2000a63c
 8002054:	40016800 	.word	0x40016800

08002058 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <MX_SDIO_SD_Init+0x38>)
 800205e:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <MX_SDIO_SD_Init+0x3c>)
 8002060:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <MX_SDIO_SD_Init+0x38>)
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <MX_SDIO_SD_Init+0x38>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <MX_SDIO_SD_Init+0x38>)
 8002070:	2200      	movs	r2, #0
 8002072:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <MX_SDIO_SD_Init+0x38>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <MX_SDIO_SD_Init+0x38>)
 800207c:	2200      	movs	r2, #0
 800207e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <MX_SDIO_SD_Init+0x38>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	2000b02c 	.word	0x2000b02c
 8002094:	40012c00 	.word	0x40012c00

08002098 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b096      	sub	sp, #88	; 0x58
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	611a      	str	r2, [r3, #16]
 80020c6:	615a      	str	r2, [r3, #20]
 80020c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2220      	movs	r2, #32
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f02c fa2d 	bl	802e530 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020d6:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <MX_TIM1_Init+0x138>)
 80020d8:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <MX_TIM1_Init+0x13c>)
 80020da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020dc:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <MX_TIM1_Init+0x138>)
 80020de:	2200      	movs	r2, #0
 80020e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <MX_TIM1_Init+0x138>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210-1;
 80020e8:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <MX_TIM1_Init+0x138>)
 80020ea:	22d1      	movs	r2, #209	; 0xd1
 80020ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <MX_TIM1_Init+0x138>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <MX_TIM1_Init+0x138>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <MX_TIM1_Init+0x138>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002100:	4833      	ldr	r0, [pc, #204]	; (80021d0 <MX_TIM1_Init+0x138>)
 8002102:	f007 f83f 	bl	8009184 <HAL_TIM_Base_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800210c:	f001 fa70 	bl	80035f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002114:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800211a:	4619      	mov	r1, r3
 800211c:	482c      	ldr	r0, [pc, #176]	; (80021d0 <MX_TIM1_Init+0x138>)
 800211e:	f007 fd9b 	bl	8009c58 <HAL_TIM_ConfigClockSource>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002128:	f001 fa62 	bl	80035f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800212c:	4828      	ldr	r0, [pc, #160]	; (80021d0 <MX_TIM1_Init+0x138>)
 800212e:	f007 f8e9 	bl	8009304 <HAL_TIM_PWM_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002138:	f001 fa5a 	bl	80035f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002144:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002148:	4619      	mov	r1, r3
 800214a:	4821      	ldr	r0, [pc, #132]	; (80021d0 <MX_TIM1_Init+0x138>)
 800214c:	f008 fa68 	bl	800a620 <HAL_TIMEx_MasterConfigSynchronization>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002156:	f001 fa4b 	bl	80035f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800215a:	2360      	movs	r3, #96	; 0x60
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002162:	2300      	movs	r3, #0
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002166:	2300      	movs	r3, #0
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	2200      	movs	r2, #0
 800217c:	4619      	mov	r1, r3
 800217e:	4814      	ldr	r0, [pc, #80]	; (80021d0 <MX_TIM1_Init+0x138>)
 8002180:	f007 fca8 	bl	8009ad4 <HAL_TIM_PWM_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800218a:	f001 fa31 	bl	80035f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4807      	ldr	r0, [pc, #28]	; (80021d0 <MX_TIM1_Init+0x138>)
 80021b2:	f008 fab1 	bl	800a718 <HAL_TIMEx_ConfigBreakDeadTime>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80021bc:	f001 fa18 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM1_Init+0x138>)
 80021c2:	f001 fddb 	bl	8003d7c <HAL_TIM_MspPostInit>

}
 80021c6:	bf00      	nop
 80021c8:	3758      	adds	r7, #88	; 0x58
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20009b3c 	.word	0x20009b3c
 80021d4:	40010000 	.word	0x40010000

080021d8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
 80021ec:	615a      	str	r2, [r3, #20]
 80021ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <MX_TIM9_Init+0x9c>)
 80021f2:	4a21      	ldr	r2, [pc, #132]	; (8002278 <MX_TIM9_Init+0xa0>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = (840 * 3) -1;
 80021f6:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <MX_TIM9_Init+0x9c>)
 80021f8:	f640 12d7 	movw	r2, #2519	; 0x9d7
 80021fc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <MX_TIM9_Init+0x9c>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000 -1;
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <MX_TIM9_Init+0x9c>)
 8002206:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800220a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <MX_TIM9_Init+0x9c>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <MX_TIM9_Init+0x9c>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <MX_TIM9_Init+0x9c>)
 800221a:	f007 f873 	bl	8009304 <HAL_TIM_PWM_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8002224:	f001 f9e4 	bl	80035f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002228:	2360      	movs	r3, #96	; 0x60
 800222a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 800222c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	4619      	mov	r1, r3
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <MX_TIM9_Init+0x9c>)
 8002242:	f007 fc47 	bl	8009ad4 <HAL_TIM_PWM_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800224c:	f001 f9d0 	bl	80035f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2204      	movs	r2, #4
 8002254:	4619      	mov	r1, r3
 8002256:	4807      	ldr	r0, [pc, #28]	; (8002274 <MX_TIM9_Init+0x9c>)
 8002258:	f007 fc3c 	bl	8009ad4 <HAL_TIM_PWM_ConfigChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 8002262:	f001 f9c5 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002266:	4803      	ldr	r0, [pc, #12]	; (8002274 <MX_TIM9_Init+0x9c>)
 8002268:	f001 fd88 	bl	8003d7c <HAL_TIM_MspPostInit>

}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	2000afe0 	.word	0x2000afe0
 8002278:	40014000 	.word	0x40014000

0800227c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
 8002290:	615a      	str	r2, [r3, #20]
 8002292:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <MX_TIM13_Init+0x94>)
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <MX_TIM13_Init+0x98>)
 8002298:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <MX_TIM13_Init+0x94>)
 800229c:	2253      	movs	r2, #83	; 0x53
 800229e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <MX_TIM13_Init+0x94>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <MX_TIM13_Init+0x94>)
 80022a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <MX_TIM13_Init+0x94>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <MX_TIM13_Init+0x94>)
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80022ba:	4815      	ldr	r0, [pc, #84]	; (8002310 <MX_TIM13_Init+0x94>)
 80022bc:	f006 ff62 	bl	8009184 <HAL_TIM_Base_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80022c6:	f001 f993 	bl	80035f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80022ca:	4811      	ldr	r0, [pc, #68]	; (8002310 <MX_TIM13_Init+0x94>)
 80022cc:	f007 f81a 	bl	8009304 <HAL_TIM_PWM_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80022d6:	f001 f98b 	bl	80035f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022da:	2360      	movs	r3, #96	; 0x60
 80022dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2200      	movs	r2, #0
 80022ee:	4619      	mov	r1, r3
 80022f0:	4807      	ldr	r0, [pc, #28]	; (8002310 <MX_TIM13_Init+0x94>)
 80022f2:	f007 fbef 	bl	8009ad4 <HAL_TIM_PWM_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80022fc:	f001 f978 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002300:	4803      	ldr	r0, [pc, #12]	; (8002310 <MX_TIM13_Init+0x94>)
 8002302:	f001 fd3b 	bl	8003d7c <HAL_TIM_MspPostInit>

}
 8002306:	bf00      	nop
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000a710 	.word	0x2000a710
 8002314:	40001c00 	.word	0x40001c00

08002318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MX_DMA_Init+0x3c>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <MX_DMA_Init+0x3c>)
 8002328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_DMA_Init+0x3c>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2105      	movs	r1, #5
 800233e:	2039      	movs	r0, #57	; 0x39
 8002340:	f002 fc44 	bl	8004bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002344:	2039      	movs	r0, #57	; 0x39
 8002346:	f002 fc5d 	bl	8004c04 <HAL_NVIC_EnableIRQ>

}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <MX_FMC_Init+0xb4>)
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <MX_FMC_Init+0xb8>)
 8002376:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <MX_FMC_Init+0xb4>)
 800237a:	2201      	movs	r2, #1
 800237c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <MX_FMC_Init+0xb4>)
 8002380:	2201      	movs	r2, #1
 8002382:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <MX_FMC_Init+0xb4>)
 8002386:	2208      	movs	r2, #8
 8002388:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <MX_FMC_Init+0xb4>)
 800238c:	2210      	movs	r2, #16
 800238e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <MX_FMC_Init+0xb4>)
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <MX_FMC_Init+0xb4>)
 8002398:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800239c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <MX_FMC_Init+0xb4>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <MX_FMC_Init+0xb4>)
 80023a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023aa:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <MX_FMC_Init+0xb4>)
 80023ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <MX_FMC_Init+0xb4>)
 80023b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80023bc:	2302      	movs	r3, #2
 80023be:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 8;
 80023c0:	2308      	movs	r3, #8
 80023c2:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 80023c4:	2306      	movs	r3, #6
 80023c6:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 80023c8:	2307      	movs	r3, #7
 80023ca:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 5;
 80023cc:	2305      	movs	r3, #5
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 80023d0:	2302      	movs	r3, #2
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	480b      	ldr	r0, [pc, #44]	; (800240c <MX_FMC_Init+0xb4>)
 80023e0:	f006 fe4d 	bl	800907e <HAL_SDRAM_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 80023ea:	f001 f901 	bl	80035f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	FMC_SDRAM_CommandTypeDef command;
	if (SDRAM_Initialization_Sequence(&hsdram1, &command) != HAL_OK) {
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <MX_FMC_Init+0xb4>)
 80023f4:	f001 f91e 	bl	8003634 <SDRAM_Initialization_Sequence>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_FMC_Init+0xaa>
		Error_Handler();
 80023fe:	f001 f8f7 	bl	80035f0 <Error_Handler>
	}
  /* USER CODE END FMC_Init 2 */
}
 8002402:	bf00      	nop
 8002404:	3730      	adds	r7, #48	; 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000b140 	.word	0x2000b140
 8002410:	a0000140 	.word	0xa0000140

08002414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b090      	sub	sp, #64	; 0x40
 8002418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
 800242e:	4b87      	ldr	r3, [pc, #540]	; (800264c <MX_GPIO_Init+0x238>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a86      	ldr	r2, [pc, #536]	; (800264c <MX_GPIO_Init+0x238>)
 8002434:	f043 0310 	orr.w	r3, r3, #16
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b84      	ldr	r3, [pc, #528]	; (800264c <MX_GPIO_Init+0x238>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	4b80      	ldr	r3, [pc, #512]	; (800264c <MX_GPIO_Init+0x238>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a7f      	ldr	r2, [pc, #508]	; (800264c <MX_GPIO_Init+0x238>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b7d      	ldr	r3, [pc, #500]	; (800264c <MX_GPIO_Init+0x238>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	4b79      	ldr	r3, [pc, #484]	; (800264c <MX_GPIO_Init+0x238>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a78      	ldr	r2, [pc, #480]	; (800264c <MX_GPIO_Init+0x238>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b76      	ldr	r3, [pc, #472]	; (800264c <MX_GPIO_Init+0x238>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	623b      	str	r3, [r7, #32]
 800247c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <MX_GPIO_Init+0x238>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a71      	ldr	r2, [pc, #452]	; (800264c <MX_GPIO_Init+0x238>)
 8002488:	f043 0320 	orr.w	r3, r3, #32
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b6f      	ldr	r3, [pc, #444]	; (800264c <MX_GPIO_Init+0x238>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	4b6b      	ldr	r3, [pc, #428]	; (800264c <MX_GPIO_Init+0x238>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a6a      	ldr	r2, [pc, #424]	; (800264c <MX_GPIO_Init+0x238>)
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b68      	ldr	r3, [pc, #416]	; (800264c <MX_GPIO_Init+0x238>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	4b64      	ldr	r3, [pc, #400]	; (800264c <MX_GPIO_Init+0x238>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a63      	ldr	r2, [pc, #396]	; (800264c <MX_GPIO_Init+0x238>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b61      	ldr	r3, [pc, #388]	; (800264c <MX_GPIO_Init+0x238>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b5d      	ldr	r3, [pc, #372]	; (800264c <MX_GPIO_Init+0x238>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a5c      	ldr	r2, [pc, #368]	; (800264c <MX_GPIO_Init+0x238>)
 80024dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b5a      	ldr	r3, [pc, #360]	; (800264c <MX_GPIO_Init+0x238>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <MX_GPIO_Init+0x238>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a55      	ldr	r2, [pc, #340]	; (800264c <MX_GPIO_Init+0x238>)
 80024f8:	f043 0308 	orr.w	r3, r3, #8
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b53      	ldr	r3, [pc, #332]	; (800264c <MX_GPIO_Init+0x238>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	4b4f      	ldr	r3, [pc, #316]	; (800264c <MX_GPIO_Init+0x238>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a4e      	ldr	r2, [pc, #312]	; (800264c <MX_GPIO_Init+0x238>)
 8002514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b4c      	ldr	r3, [pc, #304]	; (800264c <MX_GPIO_Init+0x238>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	4b48      	ldr	r3, [pc, #288]	; (800264c <MX_GPIO_Init+0x238>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a47      	ldr	r2, [pc, #284]	; (800264c <MX_GPIO_Init+0x238>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b45      	ldr	r3, [pc, #276]	; (800264c <MX_GPIO_Init+0x238>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PI3_GPIO_Port, LED_PI3_Pin, GPIO_PIN_RESET);
 8002542:	2200      	movs	r2, #0
 8002544:	2108      	movs	r1, #8
 8002546:	4842      	ldr	r0, [pc, #264]	; (8002650 <MX_GPIO_Init+0x23c>)
 8002548:	f003 fab2 	bl	8005ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PD4_GPIO_Port, LED_PD4_Pin, GPIO_PIN_RESET);
 800254c:	2200      	movs	r2, #0
 800254e:	2110      	movs	r1, #16
 8002550:	4840      	ldr	r0, [pc, #256]	; (8002654 <MX_GPIO_Init+0x240>)
 8002552:	f003 faad 	bl	8005ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin|LED_PJ15_Pin, GPIO_PIN_RESET);
 8002556:	2200      	movs	r2, #0
 8002558:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800255c:	483e      	ldr	r0, [pc, #248]	; (8002658 <MX_GPIO_Init+0x244>)
 800255e:	f003 faa7 	bl	8005ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 8002562:	230c      	movs	r3, #12
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002566:	2300      	movs	r3, #0
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800256e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002572:	4619      	mov	r1, r3
 8002574:	4839      	ldr	r0, [pc, #228]	; (800265c <MX_GPIO_Init+0x248>)
 8002576:	f003 f8d7 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_4_Pin;
 800257a:	23c0      	movs	r3, #192	; 0xc0
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257e:	2300      	movs	r3, #0
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258a:	4619      	mov	r1, r3
 800258c:	4832      	ldr	r0, [pc, #200]	; (8002658 <MX_GPIO_Init+0x244>)
 800258e:	f003 f8cb 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_ENT_Pin */
  GPIO_InitStruct.Pin = SDIO_ENT_Pin;
 8002592:	2308      	movs	r3, #8
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002596:	2300      	movs	r3, #0
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO_ENT_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025a2:	4619      	mov	r1, r3
 80025a4:	482e      	ldr	r0, [pc, #184]	; (8002660 <MX_GPIO_Init+0x24c>)
 80025a6:	f003 f8bf 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025bc:	2307      	movs	r3, #7
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c4:	4619      	mov	r1, r3
 80025c6:	4827      	ldr	r0, [pc, #156]	; (8002664 <MX_GPIO_Init+0x250>)
 80025c8:	f003 f8ae 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PI3_Pin */
  GPIO_InitStruct.Pin = LED_PI3_Pin;
 80025cc:	2308      	movs	r3, #8
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d0:	2301      	movs	r3, #1
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PI3_GPIO_Port, &GPIO_InitStruct);
 80025dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e0:	4619      	mov	r1, r3
 80025e2:	481b      	ldr	r0, [pc, #108]	; (8002650 <MX_GPIO_Init+0x23c>)
 80025e4:	f003 f8a0 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PD4_Pin */
  GPIO_InitStruct.Pin = LED_PD4_Pin;
 80025e8:	2310      	movs	r3, #16
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PD4_GPIO_Port, &GPIO_InitStruct);
 80025f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fc:	4619      	mov	r1, r3
 80025fe:	4815      	ldr	r0, [pc, #84]	; (8002654 <MX_GPIO_Init+0x240>)
 8002600:	f003 f892 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PJ12_Pin LED_PJ13_Pin LED_PJ14_Pin LED_PJ15_Pin */
  GPIO_InitStruct.Pin = LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin|LED_PJ15_Pin;
 8002604:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261a:	4619      	mov	r1, r3
 800261c:	480e      	ldr	r0, [pc, #56]	; (8002658 <MX_GPIO_Init+0x244>)
 800261e:	f003 f883 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002622:	2338      	movs	r3, #56	; 0x38
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002632:	2305      	movs	r3, #5
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263a:	4619      	mov	r1, r3
 800263c:	480a      	ldr	r0, [pc, #40]	; (8002668 <MX_GPIO_Init+0x254>)
 800263e:	f003 f873 	bl	8005728 <HAL_GPIO_Init>

}
 8002642:	bf00      	nop
 8002644:	3740      	adds	r7, #64	; 0x40
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40022000 	.word	0x40022000
 8002654:	40020c00 	.word	0x40020c00
 8002658:	40022400 	.word	0x40022400
 800265c:	40021000 	.word	0x40021000
 8002660:	40021800 	.word	0x40021800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400

0800266c <mapInt>:
float mapFloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

long mapInt(float x, float in_min, float in_max, int out_min, int out_max) {
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	ed87 0a05 	vstr	s0, [r7, #20]
 8002676:	edc7 0a04 	vstr	s1, [r7, #16]
 800267a:	ed87 1a03 	vstr	s2, [r7, #12]
 800267e:	60b8      	str	r0, [r7, #8]
 8002680:	6079      	str	r1, [r7, #4]
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 8002682:	ed97 7a05 	vldr	s14, [r7, #20]
 8002686:	edd7 7a04 	vldr	s15, [r7, #16]
 800268a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	ee07 3a90 	vmov	s15, r3
 8002698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800269c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80026a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			+ out_min);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 80026be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c2:	ee17 3a90 	vmov	r3, s15
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <Start_START_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_START_Task */
void Start_START_Task(void *argument)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//htim13.Instance->CCR1 = (htim13.Instance->ARR) * 0.99;

	Current_Status.LED_BRIGHTNESS  = LED_DEFAULT_BRIGHTNESS;
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <Start_START_Task+0x60>)
 80026de:	2205      	movs	r2, #5
 80026e0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	Current_Status.LCD_BRIGHTNESS = LCD_DEFAULT_BRIGHTNESS;
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <Start_START_Task+0x60>)
 80026e6:	22c8      	movs	r2, #200	; 0xc8
 80026e8:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <Start_START_Task+0x60>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	/* Infinite loop */
	for (;;) {
		if(Current_Status.LCD_BRIGHTNESS_CHANGED == 1)
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <Start_START_Task+0x60>)
 80026f6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d109      	bne.n	8002712 <Start_START_Task+0x3e>
		{
			htim13.Instance->CCR1 = Current_Status.LCD_BRIGHTNESS;
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <Start_START_Task+0x60>)
 8002700:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <Start_START_Task+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	635a      	str	r2, [r3, #52]	; 0x34
			Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <Start_START_Task+0x60>)
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		}

		 Current_Status.RPM = Current_Status.RPM <= 8000 ? Current_Status.RPM + 25 : 0;
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <Start_START_Task+0x60>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800271a:	d804      	bhi.n	8002726 <Start_START_Task+0x52>
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <Start_START_Task+0x60>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	3319      	adds	r3, #25
 8002722:	b29b      	uxth	r3, r3
 8002724:	e000      	b.n	8002728 <Start_START_Task+0x54>
 8002726:	2300      	movs	r3, #0
 8002728:	4a02      	ldr	r2, [pc, #8]	; (8002734 <Start_START_Task+0x60>)
 800272a:	8013      	strh	r3, [r2, #0]
		 osDelay(10);
 800272c:	200a      	movs	r0, #10
 800272e:	f009 fae2 	bl	800bcf6 <osDelay>
		if(Current_Status.LCD_BRIGHTNESS_CHANGED == 1)
 8002732:	e7df      	b.n	80026f4 <Start_START_Task+0x20>
 8002734:	2000a57c 	.word	0x2000a57c
 8002738:	2000a710 	.word	0x2000a710

0800273c <Start_SD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_Task */
void Start_SD_Task(void *argument)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002744:	2001      	movs	r0, #1
 8002746:	f009 fad6 	bl	800bcf6 <osDelay>
 800274a:	e7fb      	b.n	8002744 <Start_SD_Task+0x8>

0800274c <Start_LED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LED_Task */
void Start_LED_Task(void *argument)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LED_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002754:	2001      	movs	r0, #1
 8002756:	f009 face 	bl	800bcf6 <osDelay>
 800275a:	e7fb      	b.n	8002754 <Start_LED_Task+0x8>
 800275c:	0000      	movs	r0, r0
	...

08002760 <Start_CAN_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_CAN_Task */
void Start_CAN_Task(void *argument)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  if (CAN_ENABLED) {

	  			if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8002768:	4bc3      	ldr	r3, [pc, #780]	; (8002a78 <Start_CAN_Task+0x318>)
 800276a:	4ac4      	ldr	r2, [pc, #784]	; (8002a7c <Start_CAN_Task+0x31c>)
 800276c:	2100      	movs	r1, #0
 800276e:	48c4      	ldr	r0, [pc, #784]	; (8002a80 <Start_CAN_Task+0x320>)
 8002770:	f002 f862 	bl	8004838 <HAL_CAN_GetRxMessage>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 8582 	bne.w	8003280 <Start_CAN_Task+0xb20>
	  			{
	  				if(Current_Status.CAN_PROTOCOL == CAN_LINK)
 800277c:	4bc1      	ldr	r3, [pc, #772]	; (8002a84 <Start_CAN_Task+0x324>)
 800277e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 8384 	bne.w	8002e90 <Start_CAN_Task+0x730>
	  				{
	  					switch (RxHeader.StdId) {
 8002788:	4bbc      	ldr	r3, [pc, #752]	; (8002a7c <Start_CAN_Task+0x31c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002790:	f000 814a 	beq.w	8002a28 <Start_CAN_Task+0x2c8>
 8002794:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8002798:	f040 836d 	bne.w	8002e76 <Start_CAN_Task+0x716>
	  						case 0x7E8:
	  							switch (RxData[2]) {
 800279c:	4bb6      	ldr	r3, [pc, #728]	; (8002a78 <Start_CAN_Task+0x318>)
 800279e:	789b      	ldrb	r3, [r3, #2]
 80027a0:	3b05      	subs	r3, #5
 80027a2:	2b5b      	cmp	r3, #91	; 0x5b
 80027a4:	f200 813e 	bhi.w	8002a24 <Start_CAN_Task+0x2c4>
 80027a8:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <Start_CAN_Task+0x50>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	08002921 	.word	0x08002921
 80027b4:	08002a25 	.word	0x08002a25
 80027b8:	08002a25 	.word	0x08002a25
 80027bc:	08002a25 	.word	0x08002a25
 80027c0:	08002a25 	.word	0x08002a25
 80027c4:	08002a25 	.word	0x08002a25
 80027c8:	08002933 	.word	0x08002933
 80027cc:	08002941 	.word	0x08002941
 80027d0:	0800295b 	.word	0x0800295b
 80027d4:	08002967 	.word	0x08002967
 80027d8:	0800297b 	.word	0x0800297b
 80027dc:	08002a25 	.word	0x08002a25
 80027e0:	0800298d 	.word	0x0800298d
 80027e4:	08002a25 	.word	0x08002a25
 80027e8:	08002a25 	.word	0x08002a25
 80027ec:	08002a25 	.word	0x08002a25
 80027f0:	08002a25 	.word	0x08002a25
 80027f4:	08002a25 	.word	0x08002a25
 80027f8:	08002a25 	.word	0x08002a25
 80027fc:	08002a25 	.word	0x08002a25
 8002800:	08002a25 	.word	0x08002a25
 8002804:	08002a25 	.word	0x08002a25
 8002808:	08002a25 	.word	0x08002a25
 800280c:	08002a25 	.word	0x08002a25
 8002810:	08002a25 	.word	0x08002a25
 8002814:	08002a25 	.word	0x08002a25
 8002818:	08002a25 	.word	0x08002a25
 800281c:	08002a25 	.word	0x08002a25
 8002820:	08002a25 	.word	0x08002a25
 8002824:	08002997 	.word	0x08002997
 8002828:	08002a25 	.word	0x08002a25
 800282c:	080029d1 	.word	0x080029d1
 8002830:	080029d9 	.word	0x080029d9
 8002834:	08002a25 	.word	0x08002a25
 8002838:	08002a25 	.word	0x08002a25
 800283c:	08002a25 	.word	0x08002a25
 8002840:	08002a25 	.word	0x08002a25
 8002844:	08002a25 	.word	0x08002a25
 8002848:	08002a25 	.word	0x08002a25
 800284c:	08002a25 	.word	0x08002a25
 8002850:	08002a25 	.word	0x08002a25
 8002854:	08002a25 	.word	0x08002a25
 8002858:	08002a25 	.word	0x08002a25
 800285c:	08002a25 	.word	0x08002a25
 8002860:	08002a25 	.word	0x08002a25
 8002864:	08002a25 	.word	0x08002a25
 8002868:	080029e1 	.word	0x080029e1
 800286c:	08002a25 	.word	0x08002a25
 8002870:	08002a25 	.word	0x08002a25
 8002874:	08002a25 	.word	0x08002a25
 8002878:	08002a25 	.word	0x08002a25
 800287c:	08002a25 	.word	0x08002a25
 8002880:	08002a25 	.word	0x08002a25
 8002884:	08002a25 	.word	0x08002a25
 8002888:	08002a25 	.word	0x08002a25
 800288c:	08002a25 	.word	0x08002a25
 8002890:	08002a25 	.word	0x08002a25
 8002894:	08002a25 	.word	0x08002a25
 8002898:	08002a25 	.word	0x08002a25
 800289c:	08002a25 	.word	0x08002a25
 80028a0:	08002a25 	.word	0x08002a25
 80028a4:	080029ef 	.word	0x080029ef
 80028a8:	08002a25 	.word	0x08002a25
 80028ac:	08002a25 	.word	0x08002a25
 80028b0:	08002a25 	.word	0x08002a25
 80028b4:	08002a25 	.word	0x08002a25
 80028b8:	08002a25 	.word	0x08002a25
 80028bc:	08002a25 	.word	0x08002a25
 80028c0:	08002a25 	.word	0x08002a25
 80028c4:	08002a25 	.word	0x08002a25
 80028c8:	08002a25 	.word	0x08002a25
 80028cc:	08002a25 	.word	0x08002a25
 80028d0:	08002a25 	.word	0x08002a25
 80028d4:	08002a25 	.word	0x08002a25
 80028d8:	08002a25 	.word	0x08002a25
 80028dc:	08002a25 	.word	0x08002a25
 80028e0:	08002a25 	.word	0x08002a25
 80028e4:	08002a09 	.word	0x08002a09
 80028e8:	08002a25 	.word	0x08002a25
 80028ec:	08002a25 	.word	0x08002a25
 80028f0:	08002a25 	.word	0x08002a25
 80028f4:	08002a25 	.word	0x08002a25
 80028f8:	08002a25 	.word	0x08002a25
 80028fc:	08002a25 	.word	0x08002a25
 8002900:	08002a25 	.word	0x08002a25
 8002904:	08002a25 	.word	0x08002a25
 8002908:	08002a25 	.word	0x08002a25
 800290c:	08002a13 	.word	0x08002a13
 8002910:	08002a25 	.word	0x08002a25
 8002914:	08002a25 	.word	0x08002a25
 8002918:	08002a25 	.word	0x08002a25
 800291c:	08002a25 	.word	0x08002a25
	  								case 0x05: //PID-0x05 Engine coolant temperature , range is -40 to 215 deg C , formula == A-40
	  									Current_Status.ECT = RxData[3] - 40;
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <Start_CAN_Task+0x318>)
 8002922:	78db      	ldrb	r3, [r3, #3]
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b28      	subs	r3, #40	; 0x28
 8002928:	b29a      	uxth	r2, r3
 800292a:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <Start_CAN_Task+0x324>)
 800292c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  									break;
 8002930:	e079      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x0B: // PID-0x0B , MAP , range is 0 to 255 kPa , Formula == A
	  									Current_Status.MAP = RxData[3];
 8002932:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <Start_CAN_Task+0x318>)
 8002934:	78db      	ldrb	r3, [r3, #3]
 8002936:	b21a      	sxth	r2, r3
 8002938:	4b52      	ldr	r3, [pc, #328]	; (8002a84 <Start_CAN_Task+0x324>)
 800293a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  									break;
 800293e:	e072      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x0C: // PID-0x0C , RPM  , range is 0 to 16383.75 rpm , Formula == 256A+B / 4
	  									Current_Status.RPM = (uint16_t)((RxData[4] << 8) + (RxData[3] & 0x00ff));
 8002940:	4b4d      	ldr	r3, [pc, #308]	; (8002a78 <Start_CAN_Task+0x318>)
 8002942:	791b      	ldrb	r3, [r3, #4]
 8002944:	b29b      	uxth	r3, r3
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	b29a      	uxth	r2, r3
 800294a:	4b4b      	ldr	r3, [pc, #300]	; (8002a78 <Start_CAN_Task+0x318>)
 800294c:	78db      	ldrb	r3, [r3, #3]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4413      	add	r3, r2
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <Start_CAN_Task+0x324>)
 8002956:	801a      	strh	r2, [r3, #0]
	  									break;
 8002958:	e065      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x0D: //PID-0x0D , Vehicle speed , range is 0 to 255 km/h , formula == A
	  									Current_Status.LF_SPEED = RxData[3];
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <Start_CAN_Task+0x318>)
 800295c:	78db      	ldrb	r3, [r3, #3]
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <Start_CAN_Task+0x324>)
 8002962:	859a      	strh	r2, [r3, #44]	; 0x2c
	  									break;
 8002964:	e05f      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x0E: //PID-0x0E , Ignition Timing advance, range is -64 to 63.5 BTDC , formula == A/2 - 64
	  									Current_Status.IGN_TIM = RxData[3] / 2 - 64;
 8002966:	4b44      	ldr	r3, [pc, #272]	; (8002a78 <Start_CAN_Task+0x318>)
 8002968:	78db      	ldrb	r3, [r3, #3]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b40      	subs	r3, #64	; 0x40
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <Start_CAN_Task+0x324>)
 8002976:	835a      	strh	r2, [r3, #26]
	  									break;
 8002978:	e055      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x0F: //PID-0x0F , Inlet air temperature , range is -40 to 215 deg C, formula == A-40
	  									Current_Status.IAT = RxData[3] - 40;
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <Start_CAN_Task+0x318>)
 800297c:	78db      	ldrb	r3, [r3, #3]
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b28      	subs	r3, #40	; 0x28
 8002982:	b29a      	uxth	r2, r3
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <Start_CAN_Task+0x324>)
 8002986:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  									break;
 800298a:	e04c      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x11: // PID-0x11 , TPS percentage, range is 0 to 100 percent, formula == 100/256 A
	  									Current_Status.TPS = 100/256 * RxData[3];
 800298c:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <Start_CAN_Task+0x324>)
 800298e:	2200      	movs	r2, #0
 8002990:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  									break;
 8002994:	e047      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x1C: // PID-0x1C obd standard
	  									break;
	  								case 0x20: // PID-0x20 PIDs supported [21-40]
	  									break;
	  								case 0x22: // PID-0x22 Fuel /Pressure (Relative to manifold vacuum) , range is 0 to 5177.265 kPa , formula == 0.079(256A+B)
	  									Current_Status.FUELP = 0.079 * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));
 8002996:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <Start_CAN_Task+0x318>)
 8002998:	791b      	ldrb	r3, [r3, #4]
 800299a:	b29b      	uxth	r3, r3
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	b29b      	uxth	r3, r3
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	4a35      	ldr	r2, [pc, #212]	; (8002a78 <Start_CAN_Task+0x318>)
 80029a4:	78d2      	ldrb	r2, [r2, #3]
 80029a6:	4413      	add	r3, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdcb 	bl	8000544 <__aeabi_i2d>
 80029ae:	a330      	add	r3, pc, #192	; (adr r3, 8002a70 <Start_CAN_Task+0x310>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fe30 	bl	8000618 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f7fe f83c 	bl	8000a3c <__aeabi_d2uiz>
 80029c4:	4603      	mov	r3, r0
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <Start_CAN_Task+0x324>)
 80029ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  									break;
 80029ce:	e02a      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x24: // PID-0x24 O2 sensor2, AB: fuel/air equivalence ratio, CD: voltage ,  Formula == (2/65536)(256A +B) , 8/65536(256C+D) , Range is 0 to <2 and 0 to >8V
	  									Current_Status.LAMBDA1 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 80029d0:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <Start_CAN_Task+0x324>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	849a      	strh	r2, [r3, #36]	; 0x24
	  									break;
 80029d6:	e026      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x25: // PID-0x25 O2 sensor2, AB fuel/air equivalence ratio, CD voltage ,  2/65536(256A +B) ,8/65536(256C+D) , range is 0 to <2 and 0 to >8V
	  									Current_Status.LAMBDA2 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <Start_CAN_Task+0x324>)
 80029da:	2200      	movs	r2, #0
 80029dc:	84da      	strh	r2, [r3, #38]	; 0x26
	  									break;
 80029de:	e022      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x33: // PID-0x33 Absolute Barometric pressure , range is 0 to 255 kPa , formula == A
	  									Current_Status.BARO = RxData[3];
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <Start_CAN_Task+0x318>)
 80029e2:	78db      	ldrb	r3, [r3, #3]
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <Start_CAN_Task+0x324>)
 80029e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  									break;
 80029ec:	e01b      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x40: // PIDs supported [41-60]
	  									break;
	  								case 0x42: // PID-0x42 control module voltage, 256A+B / 1000 , range is 0 to 65.535v
	  									Current_Status.BATT = 256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff) / 1000;
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <Start_CAN_Task+0x318>)
 80029f0:	78db      	ldrb	r3, [r3, #3]
 80029f2:	4a25      	ldr	r2, [pc, #148]	; (8002a88 <Start_CAN_Task+0x328>)
 80029f4:	fb82 1203 	smull	r1, r2, r2, r3
 80029f8:	1192      	asrs	r2, r2, #6
 80029fa:	17db      	asrs	r3, r3, #31
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <Start_CAN_Task+0x324>)
 8002a02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  									break;
 8002a06:	e00e      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x46: // PID-0x46 Ambient Air Temperature , range is -40 to 215 deg C , formula == A-40
	  									break;
	  								case 0x52: // PID-0x52 Ethanol fuel % , range is 0 to 100% , formula == (100/255)A
	  									Current_Status.ETHANOL = 100 / 255 * RxData[3];
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <Start_CAN_Task+0x324>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	  									break;
 8002a10:	e009      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x5C: // PID-0x5C Engine oil temperature , range is -40 to 210 deg C , formula == A-40
	  									Current_Status.OILT = RxData[3] - 40;
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <Start_CAN_Task+0x318>)
 8002a14:	78db      	ldrb	r3, [r3, #3]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b28      	subs	r3, #40	; 0x28
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <Start_CAN_Task+0x324>)
 8002a1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  									break;
 8002a22:	e000      	b.n	8002a26 <Start_CAN_Task+0x2c6>
	  								case 0x60: // PIDs supported [61-80]
	  									break;
	  								default:
	  									break;
 8002a24:	bf00      	nop
	  							}
	  							break;
 8002a26:	e226      	b.n	8002e76 <Start_CAN_Task+0x716>
	  							case 0x3E8: //Link Dash
	  								switch (RxData[0]) {
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <Start_CAN_Task+0x318>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	f200 8221 	bhi.w	8002e74 <Start_CAN_Task+0x714>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <Start_CAN_Task+0x2d8>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a8d 	.word	0x08002a8d
 8002a3c:	08002adb 	.word	0x08002adb
 8002a40:	08002b29 	.word	0x08002b29
 8002a44:	08002b75 	.word	0x08002b75
 8002a48:	08002bc3 	.word	0x08002bc3
 8002a4c:	08002c0f 	.word	0x08002c0f
 8002a50:	08002c59 	.word	0x08002c59
 8002a54:	08002cad 	.word	0x08002cad
 8002a58:	08002cf9 	.word	0x08002cf9
 8002a5c:	08002d47 	.word	0x08002d47
 8002a60:	08002d91 	.word	0x08002d91
 8002a64:	08002ddb 	.word	0x08002ddb
 8002a68:	08002e25 	.word	0x08002e25
 8002a6c:	f3af 8000 	nop.w
 8002a70:	10624dd3 	.word	0x10624dd3
 8002a74:	3fb43958 	.word	0x3fb43958
 8002a78:	2000b0f8 	.word	0x2000b0f8
 8002a7c:	2000b174 	.word	0x2000b174
 8002a80:	2000a6e4 	.word	0x2000a6e4
 8002a84:	2000a57c 	.word	0x2000a57c
 8002a88:	10624dd3 	.word	0x10624dd3
	  									case 0:
	  										Current_Status.RPM = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002a8c:	4b85      	ldr	r3, [pc, #532]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002a8e:	78db      	ldrb	r3, [r3, #3]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	4b83      	ldr	r3, [pc, #524]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002a98:	789b      	ldrb	r3, [r3, #2]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	4b81      	ldr	r3, [pc, #516]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002aa2:	801a      	strh	r2, [r3, #0]
	  										Current_Status.MAP = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002aa4:	4b7f      	ldr	r3, [pc, #508]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002aa6:	795b      	ldrb	r3, [r3, #5]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	4b7d      	ldr	r3, [pc, #500]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002ab0:	791b      	ldrb	r3, [r3, #4]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	4b7b      	ldr	r3, [pc, #492]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002abc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  										Current_Status.MGP = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002ac0:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002ac2:	79db      	ldrb	r3, [r3, #7]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	4b76      	ldr	r3, [pc, #472]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002acc:	799b      	ldrb	r3, [r3, #6]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	4b74      	ldr	r3, [pc, #464]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002ad6:	81da      	strh	r2, [r3, #14]
	  										break;
 8002ad8:	e1cc      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 1:
	  										Current_Status.BARO = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002ada:	4b72      	ldr	r3, [pc, #456]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002adc:	78db      	ldrb	r3, [r3, #3]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002ae6:	789b      	ldrb	r3, [r3, #2]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	4b6e      	ldr	r3, [pc, #440]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002af0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  										Current_Status.TPS = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002af4:	4b6b      	ldr	r3, [pc, #428]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002af6:	795b      	ldrb	r3, [r3, #5]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b69      	ldr	r3, [pc, #420]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b00:	791b      	ldrb	r3, [r3, #4]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	4b67      	ldr	r3, [pc, #412]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  										Current_Status.INJ_DC = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002b0e:	4b65      	ldr	r3, [pc, #404]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b10:	79db      	ldrb	r3, [r3, #7]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	4b62      	ldr	r3, [pc, #392]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b1a:	799b      	ldrb	r3, [r3, #6]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	4b61      	ldr	r3, [pc, #388]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002b24:	821a      	strh	r2, [r3, #16]
	  										break;
 8002b26:	e1a5      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 2:
	  										Current_Status.INJ_DC_ST = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002b28:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b2a:	78db      	ldrb	r3, [r3, #3]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	4b5c      	ldr	r3, [pc, #368]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b34:	789b      	ldrb	r3, [r3, #2]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002b3e:	825a      	strh	r2, [r3, #18]
	  										Current_Status.INJ_PULSE = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002b40:	4b58      	ldr	r3, [pc, #352]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b42:	795b      	ldrb	r3, [r3, #5]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	4b56      	ldr	r3, [pc, #344]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b4c:	791b      	ldrb	r3, [r3, #4]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	4b54      	ldr	r3, [pc, #336]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002b56:	829a      	strh	r2, [r3, #20]
	  										Current_Status.ECT = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002b58:	4b52      	ldr	r3, [pc, #328]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b5a:	79db      	ldrb	r3, [r3, #7]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b64:	799b      	ldrb	r3, [r3, #6]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002b6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  										break;
 8002b72:	e17f      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 3:
	  										Current_Status.IAT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002b74:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b76:	78db      	ldrb	r3, [r3, #3]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b80:	789b      	ldrb	r3, [r3, #2]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002b8a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  										Current_Status.BATT = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002b8e:	4b45      	ldr	r3, [pc, #276]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b90:	795b      	ldrb	r3, [r3, #5]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002b9a:	791b      	ldrb	r3, [r3, #4]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	4b41      	ldr	r3, [pc, #260]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002ba4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  										Current_Status.MAF = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002ba8:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002baa:	79db      	ldrb	r3, [r3, #7]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b3c      	ldr	r3, [pc, #240]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002bb4:	799b      	ldrb	r3, [r3, #6]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002bbe:	82da      	strh	r2, [r3, #22]
	  										break;
 8002bc0:	e158      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 4:
	  										Current_Status.GEAR = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002bc4:	78db      	ldrb	r3, [r3, #3]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002bce:	789b      	ldrb	r3, [r3, #2]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	4b34      	ldr	r3, [pc, #208]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	  										Current_Status.INJ_TIM = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002bde:	795b      	ldrb	r3, [r3, #5]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b2f      	ldr	r3, [pc, #188]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002be8:	791b      	ldrb	r3, [r3, #4]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002bf2:	831a      	strh	r2, [r3, #24]
	  										Current_Status.IGN_TIM = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002bf6:	79db      	ldrb	r3, [r3, #7]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c00:	799b      	ldrb	r3, [r3, #6]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002c0a:	835a      	strh	r2, [r3, #26]
	  										break;
 8002c0c:	e132      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 5:
	  										Current_Status.CAM_I_L = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002c0e:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c10:	78db      	ldrb	r3, [r3, #3]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002c24:	839a      	strh	r2, [r3, #28]
	  										Current_Status.CAM_I_R = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c28:	795b      	ldrb	r3, [r3, #5]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c32:	791b      	ldrb	r3, [r3, #4]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002c3c:	83da      	strh	r2, [r3, #30]
	  										Current_Status.CAM_E_L = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c40:	79db      	ldrb	r3, [r3, #7]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c4a:	799b      	ldrb	r3, [r3, #6]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002c54:	841a      	strh	r2, [r3, #32]
	  										break;
 8002c56:	e10d      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 6:
	  										Current_Status.CAM_E_R = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c5a:	78db      	ldrb	r3, [r3, #3]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c64:	789b      	ldrb	r3, [r3, #2]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002c6e:	845a      	strh	r2, [r3, #34]	; 0x22
	  										Current_Status.LAMBDA1 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c72:	795b      	ldrb	r3, [r3, #5]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c7c:	791b      	ldrb	r3, [r3, #4]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002c86:	849a      	strh	r2, [r3, #36]	; 0x24
	  										Current_Status.LAMBDA2 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c8a:	79db      	ldrb	r3, [r3, #7]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <Start_CAN_Task+0x544>)
 8002c94:	799b      	ldrb	r3, [r3, #6]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <Start_CAN_Task+0x548>)
 8002c9e:	84da      	strh	r2, [r3, #38]	; 0x26
	  										break;
 8002ca0:	e0e8      	b.n	8002e74 <Start_CAN_Task+0x714>
 8002ca2:	bf00      	nop
 8002ca4:	2000b0f8 	.word	0x2000b0f8
 8002ca8:	2000a57c 	.word	0x2000a57c
	  									case 7:
	  										Current_Status.TRIG1_ERROR = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002cac:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <Start_CAN_Task+0x724>)
 8002cae:	78db      	ldrb	r3, [r3, #3]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <Start_CAN_Task+0x724>)
 8002cb8:	789b      	ldrb	r3, [r3, #2]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b71      	ldr	r3, [pc, #452]	; (8002e88 <Start_CAN_Task+0x728>)
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
	  										Current_Status.FAULT_CODES = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <Start_CAN_Task+0x724>)
 8002cc6:	795b      	ldrb	r3, [r3, #5]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <Start_CAN_Task+0x724>)
 8002cd0:	791b      	ldrb	r3, [r3, #4]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	4b6b      	ldr	r3, [pc, #428]	; (8002e88 <Start_CAN_Task+0x728>)
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a
	  										Current_Status.FUELP = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002cdc:	4b69      	ldr	r3, [pc, #420]	; (8002e84 <Start_CAN_Task+0x724>)
 8002cde:	79db      	ldrb	r3, [r3, #7]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <Start_CAN_Task+0x724>)
 8002ce8:	799b      	ldrb	r3, [r3, #6]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <Start_CAN_Task+0x728>)
 8002cf2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  										break;
 8002cf6:	e0bd      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 8:
	  										Current_Status.OILT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002cf8:	4b62      	ldr	r3, [pc, #392]	; (8002e84 <Start_CAN_Task+0x724>)
 8002cfa:	78db      	ldrb	r3, [r3, #3]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d04:	789b      	ldrb	r3, [r3, #2]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <Start_CAN_Task+0x728>)
 8002d0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  										Current_Status.OILP = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002d12:	4b5c      	ldr	r3, [pc, #368]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d14:	795b      	ldrb	r3, [r3, #5]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d1e:	791b      	ldrb	r3, [r3, #4]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <Start_CAN_Task+0x728>)
 8002d28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	  										Current_Status.LF_SPEED = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002d2c:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d2e:	79db      	ldrb	r3, [r3, #7]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d38:	799b      	ldrb	r3, [r3, #6]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <Start_CAN_Task+0x728>)
 8002d42:	859a      	strh	r2, [r3, #44]	; 0x2c
	  										break;
 8002d44:	e096      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 9:
	  										Current_Status.LR_SPEED = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002d46:	4b4f      	ldr	r3, [pc, #316]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d48:	78db      	ldrb	r3, [r3, #3]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d52:	789b      	ldrb	r3, [r3, #2]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <Start_CAN_Task+0x728>)
 8002d5c:	85da      	strh	r2, [r3, #46]	; 0x2e
	  										Current_Status.RF_SPEED = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002d5e:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d60:	795b      	ldrb	r3, [r3, #5]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d6a:	791b      	ldrb	r3, [r3, #4]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	4b45      	ldr	r3, [pc, #276]	; (8002e88 <Start_CAN_Task+0x728>)
 8002d74:	861a      	strh	r2, [r3, #48]	; 0x30
	  										Current_Status.RR_SPEED = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002d76:	4b43      	ldr	r3, [pc, #268]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d78:	79db      	ldrb	r3, [r3, #7]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	4b40      	ldr	r3, [pc, #256]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d82:	799b      	ldrb	r3, [r3, #6]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <Start_CAN_Task+0x728>)
 8002d8c:	865a      	strh	r2, [r3, #50]	; 0x32
	  										break;
 8002d8e:	e071      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 10:
	  										Current_Status.KNOCK1 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002d90:	4b3c      	ldr	r3, [pc, #240]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d92:	78db      	ldrb	r3, [r3, #3]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <Start_CAN_Task+0x724>)
 8002d9c:	789b      	ldrb	r3, [r3, #2]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <Start_CAN_Task+0x728>)
 8002da6:	869a      	strh	r2, [r3, #52]	; 0x34
	  										Current_Status.KNOCK2 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <Start_CAN_Task+0x724>)
 8002daa:	795b      	ldrb	r3, [r3, #5]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <Start_CAN_Task+0x724>)
 8002db4:	791b      	ldrb	r3, [r3, #4]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <Start_CAN_Task+0x728>)
 8002dbe:	86da      	strh	r2, [r3, #54]	; 0x36
	  										Current_Status.KNOCK3 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002dc0:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <Start_CAN_Task+0x724>)
 8002dc2:	79db      	ldrb	r3, [r3, #7]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <Start_CAN_Task+0x724>)
 8002dcc:	799b      	ldrb	r3, [r3, #6]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <Start_CAN_Task+0x728>)
 8002dd6:	871a      	strh	r2, [r3, #56]	; 0x38
	  										break;
 8002dd8:	e04c      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 11:
	  										Current_Status.KNOCK4 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002dda:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <Start_CAN_Task+0x724>)
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <Start_CAN_Task+0x724>)
 8002de6:	789b      	ldrb	r3, [r3, #2]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <Start_CAN_Task+0x728>)
 8002df0:	875a      	strh	r2, [r3, #58]	; 0x3a
	  										Current_Status.KNOCK5 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <Start_CAN_Task+0x724>)
 8002df4:	795b      	ldrb	r3, [r3, #5]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <Start_CAN_Task+0x724>)
 8002dfe:	791b      	ldrb	r3, [r3, #4]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <Start_CAN_Task+0x728>)
 8002e08:	879a      	strh	r2, [r3, #60]	; 0x3c
	  										Current_Status.KNOCK6 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <Start_CAN_Task+0x724>)
 8002e0c:	79db      	ldrb	r3, [r3, #7]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <Start_CAN_Task+0x724>)
 8002e16:	799b      	ldrb	r3, [r3, #6]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <Start_CAN_Task+0x728>)
 8002e20:	87da      	strh	r2, [r3, #62]	; 0x3e
	  										break;
 8002e22:	e027      	b.n	8002e74 <Start_CAN_Task+0x714>
	  									case 12:
	  										Current_Status.KNOCK7 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <Start_CAN_Task+0x724>)
 8002e26:	78db      	ldrb	r3, [r3, #3]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <Start_CAN_Task+0x724>)
 8002e30:	789b      	ldrb	r3, [r3, #2]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <Start_CAN_Task+0x728>)
 8002e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	  										Current_Status.KNOCK8 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <Start_CAN_Task+0x724>)
 8002e40:	795b      	ldrb	r3, [r3, #5]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <Start_CAN_Task+0x724>)
 8002e4a:	791b      	ldrb	r3, [r3, #4]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <Start_CAN_Task+0x728>)
 8002e54:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	  										Current_Status.LIMITS = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <Start_CAN_Task+0x724>)
 8002e5a:	79db      	ldrb	r3, [r3, #7]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <Start_CAN_Task+0x724>)
 8002e64:	799b      	ldrb	r3, [r3, #6]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <Start_CAN_Task+0x728>)
 8002e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	  										break;
 8002e72:	bf00      	nop
	  								}
	  								break;
 8002e74:	bf00      	nop
	  							}
	  					HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 8002e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e7a:	4804      	ldr	r0, [pc, #16]	; (8002e8c <Start_CAN_Task+0x72c>)
 8002e7c:	f002 fe31 	bl	8005ae2 <HAL_GPIO_TogglePin>
 8002e80:	e156      	b.n	8003130 <Start_CAN_Task+0x9d0>
 8002e82:	bf00      	nop
 8002e84:	2000b0f8 	.word	0x2000b0f8
 8002e88:	2000a57c 	.word	0x2000a57c
 8002e8c:	40022400 	.word	0x40022400
	  				}
	  				else if(Current_Status.CAN_PROTOCOL == CAN_MX5)
 8002e90:	4bc5      	ldr	r3, [pc, #788]	; (80031a8 <Start_CAN_Task+0xa48>)
 8002e92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	f040 814a 	bne.w	8003130 <Start_CAN_Task+0x9d0>
	  				{
	  					switch (RxHeader.StdId) {
 8002e9c:	4bc3      	ldr	r3, [pc, #780]	; (80031ac <Start_CAN_Task+0xa4c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3b05      	subs	r3, #5
 8002ea2:	2b5b      	cmp	r3, #91	; 0x5b
 8002ea4:	f200 813e 	bhi.w	8003124 <Start_CAN_Task+0x9c4>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <Start_CAN_Task+0x750>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08003021 	.word	0x08003021
 8002eb4:	08003125 	.word	0x08003125
 8002eb8:	08003125 	.word	0x08003125
 8002ebc:	08003125 	.word	0x08003125
 8002ec0:	08003125 	.word	0x08003125
 8002ec4:	08003125 	.word	0x08003125
 8002ec8:	08003033 	.word	0x08003033
 8002ecc:	08003041 	.word	0x08003041
 8002ed0:	0800305b 	.word	0x0800305b
 8002ed4:	08003067 	.word	0x08003067
 8002ed8:	0800307b 	.word	0x0800307b
 8002edc:	08003125 	.word	0x08003125
 8002ee0:	0800308d 	.word	0x0800308d
 8002ee4:	08003125 	.word	0x08003125
 8002ee8:	08003125 	.word	0x08003125
 8002eec:	08003125 	.word	0x08003125
 8002ef0:	08003125 	.word	0x08003125
 8002ef4:	08003125 	.word	0x08003125
 8002ef8:	08003125 	.word	0x08003125
 8002efc:	08003125 	.word	0x08003125
 8002f00:	08003125 	.word	0x08003125
 8002f04:	08003125 	.word	0x08003125
 8002f08:	08003125 	.word	0x08003125
 8002f0c:	08003125 	.word	0x08003125
 8002f10:	08003125 	.word	0x08003125
 8002f14:	08003125 	.word	0x08003125
 8002f18:	08003125 	.word	0x08003125
 8002f1c:	08003125 	.word	0x08003125
 8002f20:	08003125 	.word	0x08003125
 8002f24:	08003097 	.word	0x08003097
 8002f28:	08003125 	.word	0x08003125
 8002f2c:	08003125 	.word	0x08003125
 8002f30:	080030d1 	.word	0x080030d1
 8002f34:	08003125 	.word	0x08003125
 8002f38:	08003125 	.word	0x08003125
 8002f3c:	08003125 	.word	0x08003125
 8002f40:	08003125 	.word	0x08003125
 8002f44:	08003125 	.word	0x08003125
 8002f48:	08003125 	.word	0x08003125
 8002f4c:	08003125 	.word	0x08003125
 8002f50:	08003125 	.word	0x08003125
 8002f54:	08003125 	.word	0x08003125
 8002f58:	08003125 	.word	0x08003125
 8002f5c:	08003125 	.word	0x08003125
 8002f60:	08003125 	.word	0x08003125
 8002f64:	08003125 	.word	0x08003125
 8002f68:	080030d9 	.word	0x080030d9
 8002f6c:	080030e7 	.word	0x080030e7
 8002f70:	08003125 	.word	0x08003125
 8002f74:	08003125 	.word	0x08003125
 8002f78:	08003125 	.word	0x08003125
 8002f7c:	08003125 	.word	0x08003125
 8002f80:	08003125 	.word	0x08003125
 8002f84:	08003125 	.word	0x08003125
 8002f88:	08003125 	.word	0x08003125
 8002f8c:	08003125 	.word	0x08003125
 8002f90:	08003125 	.word	0x08003125
 8002f94:	08003125 	.word	0x08003125
 8002f98:	08003125 	.word	0x08003125
 8002f9c:	08003125 	.word	0x08003125
 8002fa0:	08003125 	.word	0x08003125
 8002fa4:	080030ef 	.word	0x080030ef
 8002fa8:	08003125 	.word	0x08003125
 8002fac:	08003125 	.word	0x08003125
 8002fb0:	08003125 	.word	0x08003125
 8002fb4:	08003125 	.word	0x08003125
 8002fb8:	08003125 	.word	0x08003125
 8002fbc:	08003125 	.word	0x08003125
 8002fc0:	08003125 	.word	0x08003125
 8002fc4:	08003125 	.word	0x08003125
 8002fc8:	08003125 	.word	0x08003125
 8002fcc:	08003125 	.word	0x08003125
 8002fd0:	08003125 	.word	0x08003125
 8002fd4:	08003125 	.word	0x08003125
 8002fd8:	08003125 	.word	0x08003125
 8002fdc:	08003125 	.word	0x08003125
 8002fe0:	08003125 	.word	0x08003125
 8002fe4:	08003109 	.word	0x08003109
 8002fe8:	08003125 	.word	0x08003125
 8002fec:	08003125 	.word	0x08003125
 8002ff0:	08003125 	.word	0x08003125
 8002ff4:	08003125 	.word	0x08003125
 8002ff8:	08003125 	.word	0x08003125
 8002ffc:	08003125 	.word	0x08003125
 8003000:	08003125 	.word	0x08003125
 8003004:	08003125 	.word	0x08003125
 8003008:	08003125 	.word	0x08003125
 800300c:	08003113 	.word	0x08003113
 8003010:	08003125 	.word	0x08003125
 8003014:	08003125 	.word	0x08003125
 8003018:	08003125 	.word	0x08003125
 800301c:	08003125 	.word	0x08003125
	  						case 0x05: //PID-0x05 Engine coolant temperature , range is -40 to 215 deg C , formula == A-40
	  							Current_Status.ECT = RxData[3] - 40;
 8003020:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <Start_CAN_Task+0xa50>)
 8003022:	78db      	ldrb	r3, [r3, #3]
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b28      	subs	r3, #40	; 0x28
 8003028:	b29a      	uxth	r2, r3
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <Start_CAN_Task+0xa48>)
 800302c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  							break;
 8003030:	e079      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x0B: // PID-0x0B , MAP , range is 0 to 255 kPa , Formula == A
	  							Current_Status.MAP = RxData[3];
 8003032:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <Start_CAN_Task+0xa50>)
 8003034:	78db      	ldrb	r3, [r3, #3]
 8003036:	b21a      	sxth	r2, r3
 8003038:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <Start_CAN_Task+0xa48>)
 800303a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  							break;
 800303e:	e072      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x0C: // PID-0x0C , RPM  , range is 0 to 16383.75 rpm , Formula == 256A+B / 4
	  							Current_Status.RPM = (uint16_t)((RxData[4] << 8) + (RxData[3] & 0x00ff));
 8003040:	4b5b      	ldr	r3, [pc, #364]	; (80031b0 <Start_CAN_Task+0xa50>)
 8003042:	791b      	ldrb	r3, [r3, #4]
 8003044:	b29b      	uxth	r3, r3
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <Start_CAN_Task+0xa50>)
 800304c:	78db      	ldrb	r3, [r3, #3]
 800304e:	b29b      	uxth	r3, r3
 8003050:	4413      	add	r3, r2
 8003052:	b29a      	uxth	r2, r3
 8003054:	4b54      	ldr	r3, [pc, #336]	; (80031a8 <Start_CAN_Task+0xa48>)
 8003056:	801a      	strh	r2, [r3, #0]
	  							break;
 8003058:	e065      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x0D: //PID-0x0D , Vehicle speed , range is 0 to 255 km/h , formula == A
	  							Current_Status.LF_SPEED = RxData[3];
 800305a:	4b55      	ldr	r3, [pc, #340]	; (80031b0 <Start_CAN_Task+0xa50>)
 800305c:	78db      	ldrb	r3, [r3, #3]
 800305e:	b29a      	uxth	r2, r3
 8003060:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <Start_CAN_Task+0xa48>)
 8003062:	859a      	strh	r2, [r3, #44]	; 0x2c
	  							break;
 8003064:	e05f      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x0E: //PID-0x0E , Ignition Timing advance, range is -64 to 63.5 BTDC , formula == A/2 - 64
	  							Current_Status.IGN_TIM = RxData[3] / 2 - 64;
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <Start_CAN_Task+0xa50>)
 8003068:	78db      	ldrb	r3, [r3, #3]
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b40      	subs	r3, #64	; 0x40
 8003072:	b29a      	uxth	r2, r3
 8003074:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <Start_CAN_Task+0xa48>)
 8003076:	835a      	strh	r2, [r3, #26]
	  							break;
 8003078:	e055      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x0F: //PID-0x0F , Inlet air temperature , range is -40 to 215 deg C, formula == A-40
	  							Current_Status.IAT = RxData[3] - 40;
 800307a:	4b4d      	ldr	r3, [pc, #308]	; (80031b0 <Start_CAN_Task+0xa50>)
 800307c:	78db      	ldrb	r3, [r3, #3]
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b28      	subs	r3, #40	; 0x28
 8003082:	b29a      	uxth	r2, r3
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <Start_CAN_Task+0xa48>)
 8003086:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  							break;
 800308a:	e04c      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x11: // PID-0x11 , TPS percentage, range is 0 to 100 percent, formula == 100/256 A
	  							Current_Status.TPS = 100/256 * RxData[3];
 800308c:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <Start_CAN_Task+0xa48>)
 800308e:	2200      	movs	r2, #0
 8003090:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  							break;
 8003094:	e047      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x1C: // PID-0x1C obd standard
	  							break;
	  						case 0x20: // PID-0x20 PIDs supported [21-40]
	  							break;
	  						case 0x22: // PID-0x22 Fuel /Pressure (Relative to manifold vacuum) , range is 0 to 5177.265 kPa , formula == 0.079(256A+B)
	  							Current_Status.FUELP = 0.079 * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));
 8003096:	4b46      	ldr	r3, [pc, #280]	; (80031b0 <Start_CAN_Task+0xa50>)
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	b29b      	uxth	r3, r3
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	b29b      	uxth	r3, r3
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	4a43      	ldr	r2, [pc, #268]	; (80031b0 <Start_CAN_Task+0xa50>)
 80030a4:	78d2      	ldrb	r2, [r2, #3]
 80030a6:	4413      	add	r3, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fa4b 	bl	8000544 <__aeabi_i2d>
 80030ae:	a33c      	add	r3, pc, #240	; (adr r3, 80031a0 <Start_CAN_Task+0xa40>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f7fd fab0 	bl	8000618 <__aeabi_dmul>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	f7fd fcbc 	bl	8000a3c <__aeabi_d2uiz>
 80030c4:	4603      	mov	r3, r0
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	4b37      	ldr	r3, [pc, #220]	; (80031a8 <Start_CAN_Task+0xa48>)
 80030ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  							break;
 80030ce:	e02a      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x25: // PID-0x25 O2 sensor2, AB fuel/air equivalence ratio, CD voltage ,  2/65536(256A +B) ,8/65536(256C+D) , range is 0 to <2 and 0 to >8V
	  							Current_Status.LAMBDA2 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <Start_CAN_Task+0xa48>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	84da      	strh	r2, [r3, #38]	; 0x26
	  							break;
 80030d6:	e026      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x33: // PID-0x33 Absolute Barometric pressure , range is 0 to 255 kPa , formula == A
	  							Current_Status.BARO = RxData[3];
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <Start_CAN_Task+0xa50>)
 80030da:	78db      	ldrb	r3, [r3, #3]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <Start_CAN_Task+0xa48>)
 80030e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  							break;
 80030e4:	e01f      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x34: // PID-0x24 O2 sensor2, AB: fuel/air equivalence ratio, CD: voltage ,  Formula == (2/65536)(256A +B) , 8/65536(256C+D) , Range is 0 to <2 and 0 to >8V
	  							Current_Status.LAMBDA1 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <Start_CAN_Task+0xa48>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	849a      	strh	r2, [r3, #36]	; 0x24
	  							break;
 80030ec:	e01b      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x40: // PIDs supported [41-60]
	  							break;
	  						case 0x42: // PID-0x42 control module voltage, 256A+B / 1000 , range is 0 to 65.535v
	  							Current_Status.BATT = 256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff) / 1000;
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <Start_CAN_Task+0xa50>)
 80030f0:	78db      	ldrb	r3, [r3, #3]
 80030f2:	4a30      	ldr	r2, [pc, #192]	; (80031b4 <Start_CAN_Task+0xa54>)
 80030f4:	fb82 1203 	smull	r1, r2, r2, r3
 80030f8:	1192      	asrs	r2, r2, #6
 80030fa:	17db      	asrs	r3, r3, #31
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	b29a      	uxth	r2, r3
 8003100:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <Start_CAN_Task+0xa48>)
 8003102:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  							break;
 8003106:	e00e      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x46: // PID-0x46 Ambient Air Temperature , range is -40 to 215 deg C , formula == A-40
	  							break;
	  						case 0x52: // PID-0x52 Ethanol fuel % , range is 0 to 100% , formula == (100/255)A
	  							Current_Status.ETHANOL = 100 / 255 * RxData[3];
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <Start_CAN_Task+0xa48>)
 800310a:	2200      	movs	r2, #0
 800310c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	  							break;
 8003110:	e009      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x5C: // PID-0x5C Engine oil temperature , range is -40 to 210 deg C , formula == A-40
	  							Current_Status.OILT = RxData[3] - 40;
 8003112:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <Start_CAN_Task+0xa50>)
 8003114:	78db      	ldrb	r3, [r3, #3]
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b28      	subs	r3, #40	; 0x28
 800311a:	b29a      	uxth	r2, r3
 800311c:	4b22      	ldr	r3, [pc, #136]	; (80031a8 <Start_CAN_Task+0xa48>)
 800311e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  							break;
 8003122:	e000      	b.n	8003126 <Start_CAN_Task+0x9c6>
	  						case 0x60: // PIDs supported [61-80]
	  							break;
	  						default:
	  							break;
 8003124:	bf00      	nop
	  					}
	  					HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 8003126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800312a:	4823      	ldr	r0, [pc, #140]	; (80031b8 <Start_CAN_Task+0xa58>)
 800312c:	f002 fcd9 	bl	8005ae2 <HAL_GPIO_TogglePin>
	  				}

	  				Current_Status.RPM_100 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 100);
 8003130:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <Start_CAN_Task+0xa48>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313c:	2164      	movs	r1, #100	; 0x64
 800313e:	2000      	movs	r0, #0
 8003140:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80031bc <Start_CAN_Task+0xa5c>
 8003144:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80031c0 <Start_CAN_Task+0xa60>
 8003148:	eeb0 0a67 	vmov.f32	s0, s15
 800314c:	f7ff fa8e 	bl	800266c <mapInt>
 8003150:	4603      	mov	r3, r0
 8003152:	b29a      	uxth	r2, r3
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <Start_CAN_Task+0xa48>)
 8003156:	805a      	strh	r2, [r3, #2]
	  				Current_Status.RPM_100 = Current_Status.RPM_100 >= 100 ? 100 : Current_Status.RPM_100;
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <Start_CAN_Task+0xa48>)
 800315a:	885b      	ldrh	r3, [r3, #2]
 800315c:	2b64      	cmp	r3, #100	; 0x64
 800315e:	bf28      	it	cs
 8003160:	2364      	movcs	r3, #100	; 0x64
 8003162:	b29a      	uxth	r2, r3
 8003164:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <Start_CAN_Task+0xa48>)
 8003166:	805a      	strh	r2, [r3, #2]
	  				Current_Status.RPM_180 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 180);
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <Start_CAN_Task+0xa48>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003174:	21b4      	movs	r1, #180	; 0xb4
 8003176:	2000      	movs	r0, #0
 8003178:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80031bc <Start_CAN_Task+0xa5c>
 800317c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80031c0 <Start_CAN_Task+0xa60>
 8003180:	eeb0 0a67 	vmov.f32	s0, s15
 8003184:	f7ff fa72 	bl	800266c <mapInt>
 8003188:	4603      	mov	r3, r0
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <Start_CAN_Task+0xa48>)
 800318e:	809a      	strh	r2, [r3, #4]
	  				Current_Status.RPM_180 = Current_Status.RPM_180 >= 180 ? 810 : Current_Status.RPM_180;
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <Start_CAN_Task+0xa48>)
 8003192:	889b      	ldrh	r3, [r3, #4]
 8003194:	2bb3      	cmp	r3, #179	; 0xb3
 8003196:	d815      	bhi.n	80031c4 <Start_CAN_Task+0xa64>
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <Start_CAN_Task+0xa48>)
 800319a:	889b      	ldrh	r3, [r3, #4]
 800319c:	e014      	b.n	80031c8 <Start_CAN_Task+0xa68>
 800319e:	bf00      	nop
 80031a0:	10624dd3 	.word	0x10624dd3
 80031a4:	3fb43958 	.word	0x3fb43958
 80031a8:	2000a57c 	.word	0x2000a57c
 80031ac:	2000b174 	.word	0x2000b174
 80031b0:	2000b0f8 	.word	0x2000b0f8
 80031b4:	10624dd3 	.word	0x10624dd3
 80031b8:	40022400 	.word	0x40022400
 80031bc:	45fa0000 	.word	0x45fa0000
 80031c0:	00000000 	.word	0x00000000
 80031c4:	f240 332a 	movw	r3, #810	; 0x32a
 80031c8:	4a30      	ldr	r2, [pc, #192]	; (800328c <Start_CAN_Task+0xb2c>)
 80031ca:	8093      	strh	r3, [r2, #4]
	  				Current_Status.RPM_270 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 270);
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <Start_CAN_Task+0xb2c>)
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80031dc:	2000      	movs	r0, #0
 80031de:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8003290 <Start_CAN_Task+0xb30>
 80031e2:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003294 <Start_CAN_Task+0xb34>
 80031e6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ea:	f7ff fa3f 	bl	800266c <mapInt>
 80031ee:	4603      	mov	r3, r0
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <Start_CAN_Task+0xb2c>)
 80031f4:	811a      	strh	r2, [r3, #8]
	  				Current_Status.RPM_270 = Current_Status.RPM_270 >= 270 ? 270 : Current_Status.RPM_270;
 80031f6:	4b25      	ldr	r3, [pc, #148]	; (800328c <Start_CAN_Task+0xb2c>)
 80031f8:	891b      	ldrh	r3, [r3, #8]
 80031fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80031fe:	bf28      	it	cs
 8003200:	f44f 7387 	movcs.w	r3, #270	; 0x10e
 8003204:	b29a      	uxth	r2, r3
 8003206:	4b21      	ldr	r3, [pc, #132]	; (800328c <Start_CAN_Task+0xb2c>)
 8003208:	811a      	strh	r2, [r3, #8]
	  				Current_Status.RPM_240 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 240);
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <Start_CAN_Task+0xb2c>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003216:	21f0      	movs	r1, #240	; 0xf0
 8003218:	2000      	movs	r0, #0
 800321a:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8003290 <Start_CAN_Task+0xb30>
 800321e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003294 <Start_CAN_Task+0xb34>
 8003222:	eeb0 0a67 	vmov.f32	s0, s15
 8003226:	f7ff fa21 	bl	800266c <mapInt>
 800322a:	4603      	mov	r3, r0
 800322c:	b29a      	uxth	r2, r3
 800322e:	4b17      	ldr	r3, [pc, #92]	; (800328c <Start_CAN_Task+0xb2c>)
 8003230:	80da      	strh	r2, [r3, #6]
	  				Current_Status.RPM_240 = Current_Status.RPM_240 >= 240 ? 240 : Current_Status.RPM_240;
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <Start_CAN_Task+0xb2c>)
 8003234:	88db      	ldrh	r3, [r3, #6]
 8003236:	2bf0      	cmp	r3, #240	; 0xf0
 8003238:	bf28      	it	cs
 800323a:	23f0      	movcs	r3, #240	; 0xf0
 800323c:	b29a      	uxth	r2, r3
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <Start_CAN_Task+0xb2c>)
 8003240:	80da      	strh	r2, [r3, #6]
	  				Current_Status.RPM_360 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 360);
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <Start_CAN_Task+0xb2c>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003252:	2000      	movs	r0, #0
 8003254:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8003290 <Start_CAN_Task+0xb30>
 8003258:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8003294 <Start_CAN_Task+0xb34>
 800325c:	eeb0 0a67 	vmov.f32	s0, s15
 8003260:	f7ff fa04 	bl	800266c <mapInt>
 8003264:	4603      	mov	r3, r0
 8003266:	b29a      	uxth	r2, r3
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <Start_CAN_Task+0xb2c>)
 800326a:	815a      	strh	r2, [r3, #10]
	  				Current_Status.RPM_360 = Current_Status.RPM_360 >= 360 ? 360 : Current_Status.RPM_360;
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <Start_CAN_Task+0xb2c>)
 800326e:	895b      	ldrh	r3, [r3, #10]
 8003270:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8003274:	bf28      	it	cs
 8003276:	f44f 73b4 	movcs.w	r3, #360	; 0x168
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <Start_CAN_Task+0xb2c>)
 800327e:	815a      	strh	r2, [r3, #10]

	  				//HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
	  			}

	  			osDelay(1);
 8003280:	2001      	movs	r0, #1
 8003282:	f008 fd38 	bl	800bcf6 <osDelay>
	  if (CAN_ENABLED) {
 8003286:	f7ff ba6f 	b.w	8002768 <Start_CAN_Task+0x8>
 800328a:	bf00      	nop
 800328c:	2000a57c 	.word	0x2000a57c
 8003290:	45fa0000 	.word	0x45fa0000
 8003294:	00000000 	.word	0x00000000

08003298 <Start_BTN_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BTN_Task */
void Start_BTN_Task(void *argument)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BTN_Task */
  /* Infinite loop */
  for(;;)
  {
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 80032a0:	2104      	movs	r1, #4
 80032a2:	483d      	ldr	r0, [pc, #244]	; (8003398 <Start_BTN_Task+0x100>)
 80032a4:	f002 fbec 	bl	8005a80 <HAL_GPIO_ReadPin>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b3b      	ldr	r3, [pc, #236]	; (800339c <Start_BTN_Task+0x104>)
 80032ae:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		Current_Status.BTN_TOP_LEFT = HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin);
 80032b2:	2140      	movs	r1, #64	; 0x40
 80032b4:	483a      	ldr	r0, [pc, #232]	; (80033a0 <Start_BTN_Task+0x108>)
 80032b6:	f002 fbe3 	bl	8005a80 <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <Start_BTN_Task+0x104>)
 80032c0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

		//Current_Status.RPM = Current_Status.LCD_BRIGHTNESS;
		Current_Status.IND_LEFT = Current_Status.BTN_TOP_LEFT;
 80032c4:	4b35      	ldr	r3, [pc, #212]	; (800339c <Start_BTN_Task+0x104>)
 80032c6:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	4b33      	ldr	r3, [pc, #204]	; (800339c <Start_BTN_Task+0x104>)
 80032ce:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
		Current_Status.IND_RIGHT = Current_Status.BTN_TOP_RIGHT;
 80032d2:	4b32      	ldr	r3, [pc, #200]	; (800339c <Start_BTN_Task+0x104>)
 80032d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80032d8:	b29a      	uxth	r2, r3
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <Start_BTN_Task+0x104>)
 80032dc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		Current_Status.BTN_BOTTOM_RIGHT = HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin);
 80032e0:	2108      	movs	r1, #8
 80032e2:	482d      	ldr	r0, [pc, #180]	; (8003398 <Start_BTN_Task+0x100>)
 80032e4:	f002 fbcc 	bl	8005a80 <HAL_GPIO_ReadPin>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <Start_BTN_Task+0x104>)
 80032ee:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		Current_Status.BTN_BOTTOM_LEFT = HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin);
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	482a      	ldr	r0, [pc, #168]	; (80033a0 <Start_BTN_Task+0x108>)
 80032f6:	f002 fbc3 	bl	8005a80 <HAL_GPIO_ReadPin>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b27      	ldr	r3, [pc, #156]	; (800339c <Start_BTN_Task+0x104>)
 8003300:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

		if(Current_Status.BTN_BOTTOM_LEFT == 1 && Current_Status.LCD_BRIGHTNESS_CHANGED == 0)
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <Start_BTN_Task+0x104>)
 8003306:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800330a:	2b01      	cmp	r3, #1
 800330c:	d11a      	bne.n	8003344 <Start_BTN_Task+0xac>
 800330e:	4b23      	ldr	r3, [pc, #140]	; (800339c <Start_BTN_Task+0x104>)
 8003310:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003314:	2b00      	cmp	r3, #0
 8003316:	d115      	bne.n	8003344 <Start_BTN_Task+0xac>
		{
		  Current_Status.LCD_BRIGHTNESS = Current_Status.LCD_BRIGHTNESS >= 50 ? Current_Status.LCD_BRIGHTNESS - 50 : Current_Status.LCD_BRIGHTNESS;
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <Start_BTN_Task+0x104>)
 800331a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800331e:	2b31      	cmp	r3, #49	; 0x31
 8003320:	d905      	bls.n	800332e <Start_BTN_Task+0x96>
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <Start_BTN_Task+0x104>)
 8003324:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003328:	3b32      	subs	r3, #50	; 0x32
 800332a:	b29b      	uxth	r3, r3
 800332c:	e002      	b.n	8003334 <Start_BTN_Task+0x9c>
 800332e:	4b1b      	ldr	r3, [pc, #108]	; (800339c <Start_BTN_Task+0x104>)
 8003330:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <Start_BTN_Task+0x104>)
 8003336:	f8a2 3096 	strh.w	r3, [r2, #150]	; 0x96
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <Start_BTN_Task+0x104>)
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8003342:	e024      	b.n	800338e <Start_BTN_Task+0xf6>
		} else if(Current_Status.BTN_BOTTOM_RIGHT == 1 && Current_Status.LCD_BRIGHTNESS_CHANGED == 0)
 8003344:	4b15      	ldr	r3, [pc, #84]	; (800339c <Start_BTN_Task+0x104>)
 8003346:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d11b      	bne.n	8003386 <Start_BTN_Task+0xee>
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <Start_BTN_Task+0x104>)
 8003350:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003354:	2b00      	cmp	r3, #0
 8003356:	d116      	bne.n	8003386 <Start_BTN_Task+0xee>
		{
		  Current_Status.LCD_BRIGHTNESS = Current_Status.LCD_BRIGHTNESS <= 1000 ? Current_Status.LCD_BRIGHTNESS + 50 : Current_Status.LCD_BRIGHTNESS;
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <Start_BTN_Task+0x104>)
 800335a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800335e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003362:	d805      	bhi.n	8003370 <Start_BTN_Task+0xd8>
 8003364:	4b0d      	ldr	r3, [pc, #52]	; (800339c <Start_BTN_Task+0x104>)
 8003366:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800336a:	3332      	adds	r3, #50	; 0x32
 800336c:	b29b      	uxth	r3, r3
 800336e:	e002      	b.n	8003376 <Start_BTN_Task+0xde>
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <Start_BTN_Task+0x104>)
 8003372:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003376:	4a09      	ldr	r2, [pc, #36]	; (800339c <Start_BTN_Task+0x104>)
 8003378:	f8a2 3096 	strh.w	r3, [r2, #150]	; 0x96
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <Start_BTN_Task+0x104>)
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8003384:	e003      	b.n	800338e <Start_BTN_Task+0xf6>
		}else{
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <Start_BTN_Task+0x104>)
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		}


		osDelay(100);
 800338e:	2064      	movs	r0, #100	; 0x64
 8003390:	f008 fcb1 	bl	800bcf6 <osDelay>
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 8003394:	e784      	b.n	80032a0 <Start_BTN_Task+0x8>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	2000a57c 	.word	0x2000a57c
 80033a0:	40022400 	.word	0x40022400

080033a4 <Start_BARO_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BARO_Task */
void Start_BARO_Task(void *argument)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BARO_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f008 fca2 	bl	800bcf6 <osDelay>
 80033b2:	e7fb      	b.n	80033ac <Start_BARO_Task+0x8>

080033b4 <Start_RGB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RGB_Task */
void Start_RGB_Task(void *argument)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  if (RGB_ENABLED) {
	  		WS2812_Clear(0);
 80033bc:	2000      	movs	r0, #0
 80033be:	f7fe fafb 	bl	80019b8 <WS2812_Clear>
	  		uint8_t RPMLED = 24;
 80033c2:	2318      	movs	r3, #24
 80033c4:	77fb      	strb	r3, [r7, #31]

	  		uint16_t lowRange = mapInt(Current_Status.RPM, PROTECTION_RPM_LOW, 0, RPMLED - PROTECTION_RPM_LED, 1);
 80033c6:	4b72      	ldr	r3, [pc, #456]	; (8003590 <Start_RGB_Task+0x1dc>)
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d2:	7ffb      	ldrb	r3, [r7, #31]
 80033d4:	3b06      	subs	r3, #6
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8003594 <Start_RGB_Task+0x1e0>
 80033de:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8003598 <Start_RGB_Task+0x1e4>
 80033e2:	eeb0 0a67 	vmov.f32	s0, s15
 80033e6:	f7ff f941 	bl	800266c <mapInt>
 80033ea:	4603      	mov	r3, r0
 80033ec:	83bb      	strh	r3, [r7, #28]
	  		lowRange = lowRange > RPMLED - PROTECTION_RPM_LED ? RPMLED - PROTECTION_RPM_LED : lowRange;
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	1f5a      	subs	r2, r3, #5
 80033f2:	8bbb      	ldrh	r3, [r7, #28]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	dc04      	bgt.n	8003402 <Start_RGB_Task+0x4e>
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b06      	subs	r3, #6
 80033fe:	b29b      	uxth	r3, r3
 8003400:	e000      	b.n	8003404 <Start_RGB_Task+0x50>
 8003402:	8bbb      	ldrh	r3, [r7, #28]
 8003404:	83bb      	strh	r3, [r7, #28]
	  		lowRange = lowRange < 1 ? 1 : lowRange;
 8003406:	8bbb      	ldrh	r3, [r7, #28]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <Start_RGB_Task+0x5c>
 800340c:	8bbb      	ldrh	r3, [r7, #28]
 800340e:	e000      	b.n	8003412 <Start_RGB_Task+0x5e>
 8003410:	2301      	movs	r3, #1
 8003412:	83bb      	strh	r3, [r7, #28]

	  		for (int i = 1; i <= lowRange ; i++) {
 8003414:	2301      	movs	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
 8003418:	e029      	b.n	800346e <Start_RGB_Task+0xba>
	  			WS2812_RGB_t color;
	  			if(Current_Status.ENGINE_PROTECTION == 1)
 800341a:	4b5d      	ldr	r3, [pc, #372]	; (8003590 <Start_RGB_Task+0x1dc>)
 800341c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <Start_RGB_Task+0x7e>
	  			{
	  				color.red = 255;
 8003424:	23ff      	movs	r3, #255	; 0xff
 8003426:	753b      	strb	r3, [r7, #20]
	  				color.green = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	757b      	strb	r3, [r7, #21]
	  				color.blue = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	75bb      	strb	r3, [r7, #22]
 8003430:	e012      	b.n	8003458 <Start_RGB_Task+0xa4>
	  			} else {
	  				color.red = (int) (0 * Current_Status.LED_BRIGHTNESS / 100);
 8003432:	2300      	movs	r3, #0
 8003434:	753b      	strb	r3, [r7, #20]
	  				color.green = (int) (255 * Current_Status.LED_BRIGHTNESS / 100);
 8003436:	4b56      	ldr	r3, [pc, #344]	; (8003590 <Start_RGB_Task+0x1dc>)
 8003438:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800343c:	461a      	mov	r2, r3
 800343e:	4613      	mov	r3, r2
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	4a55      	ldr	r2, [pc, #340]	; (800359c <Start_RGB_Task+0x1e8>)
 8003446:	fb82 1203 	smull	r1, r2, r2, r3
 800344a:	1152      	asrs	r2, r2, #5
 800344c:	17db      	asrs	r3, r3, #31
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	757b      	strb	r3, [r7, #21]
	  				color.blue = (int) (0 * Current_Status.LED_BRIGHTNESS / 100);
 8003454:	2300      	movs	r3, #0
 8003456:	75bb      	strb	r3, [r7, #22]
	  			}
	  			WS2812_One_RGB((RPMLED - i) + (LED_NUMBER - RPMLED), color, 0);
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 800345e:	2200      	movs	r2, #0
 8003460:	6979      	ldr	r1, [r7, #20]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe fada 	bl	8001a1c <WS2812_One_RGB>
	  		for (int i = 1; i <= lowRange ; i++) {
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	3301      	adds	r3, #1
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	8bbb      	ldrh	r3, [r7, #28]
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	429a      	cmp	r2, r3
 8003474:	ddd1      	ble.n	800341a <Start_RGB_Task+0x66>
	  		}

	  		if(Current_Status.RPM > PROTECTION_RPM_LOW)
 8003476:	4b46      	ldr	r3, [pc, #280]	; (8003590 <Start_RGB_Task+0x1dc>)
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	f641 1264 	movw	r2, #6500	; 0x1964
 800347e:	4293      	cmp	r3, r2
 8003480:	d945      	bls.n	800350e <Start_RGB_Task+0x15a>
	  		{
	  			uint16_t highRange = mapInt(Current_Status.RPM, PROTECTION_RPM_HIGH, PROTECTION_RPM_LOW, PROTECTION_RPM_LED, 1);
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <Start_RGB_Task+0x1dc>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	2101      	movs	r1, #1
 8003490:	2006      	movs	r0, #6
 8003492:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8003598 <Start_RGB_Task+0x1e4>
 8003496:	eddf 0a42 	vldr	s1, [pc, #264]	; 80035a0 <Start_RGB_Task+0x1ec>
 800349a:	eeb0 0a67 	vmov.f32	s0, s15
 800349e:	f7ff f8e5 	bl	800266c <mapInt>
 80034a2:	4603      	mov	r3, r0
 80034a4:	837b      	strh	r3, [r7, #26]

	  			 Current_Status.GPS_SATTELITES = highRange;
 80034a6:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <Start_RGB_Task+0x1dc>)
 80034a8:	8b7b      	ldrh	r3, [r7, #26]
 80034aa:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
	  			for (int i = 1; i <= highRange; i++) {
 80034ae:	2301      	movs	r3, #1
 80034b0:	623b      	str	r3, [r7, #32]
 80034b2:	e028      	b.n	8003506 <Start_RGB_Task+0x152>
	  				WS2812_RGB_t color;
	  				color.red = (int) (255 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <Start_RGB_Task+0x1dc>)
 80034b6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d00e      	beq.n	80034dc <Start_RGB_Task+0x128>
 80034be:	4b34      	ldr	r3, [pc, #208]	; (8003590 <Start_RGB_Task+0x1dc>)
 80034c0:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80034c4:	461a      	mov	r2, r3
 80034c6:	4613      	mov	r3, r2
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	4a33      	ldr	r2, [pc, #204]	; (800359c <Start_RGB_Task+0x1e8>)
 80034ce:	fb82 1203 	smull	r1, r2, r2, r3
 80034d2:	1152      	asrs	r2, r2, #5
 80034d4:	17db      	asrs	r3, r3, #31
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e000      	b.n	80034de <Start_RGB_Task+0x12a>
 80034dc:	23ff      	movs	r3, #255	; 0xff
 80034de:	743b      	strb	r3, [r7, #16]
	  				color.green = (int) (0 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 80034e0:	2300      	movs	r3, #0
 80034e2:	747b      	strb	r3, [r7, #17]
	  				color.blue = (int) (0 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 80034e4:	2300      	movs	r3, #0
 80034e6:	74bb      	strb	r3, [r7, #18]

	  				WS2812_One_RGB((PROTECTION_RPM_LED - i) + (LED_NUMBER - RPMLED), color, 0);
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f1c3 0206 	rsb	r2, r3, #6
 80034ee:	7ffb      	ldrb	r3, [r7, #31]
 80034f0:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 80034f4:	4413      	add	r3, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	6939      	ldr	r1, [r7, #16]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fa8e 	bl	8001a1c <WS2812_One_RGB>
	  			for (int i = 1; i <= highRange; i++) {
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	3301      	adds	r3, #1
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	8b7b      	ldrh	r3, [r7, #26]
 8003508:	6a3a      	ldr	r2, [r7, #32]
 800350a:	429a      	cmp	r2, r3
 800350c:	ddd2      	ble.n	80034b4 <Start_RGB_Task+0x100>
	  //		WS2812_One_RGB(4, (WS2812_RGB_t){(255 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
	  //		WS2812_One_RGB(5, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
	  //
	  //		WS2812_One_RGB(18, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //red
	  //		WS2812_One_RGB(20, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
	  		if(Current_Status.IND_LEFT)
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <Start_RGB_Task+0x1dc>)
 8003510:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003514:	2b00      	cmp	r3, #0
 8003516:	d017      	beq.n	8003548 <Start_RGB_Task+0x194>
	  		{
	  			WS2812_One_RGB(21, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
 8003518:	2300      	movs	r3, #0
 800351a:	733b      	strb	r3, [r7, #12]
 800351c:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <Start_RGB_Task+0x1dc>)
 800351e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8003522:	461a      	mov	r2, r3
 8003524:	4613      	mov	r3, r2
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	4a1c      	ldr	r2, [pc, #112]	; (800359c <Start_RGB_Task+0x1e8>)
 800352c:	fb82 1203 	smull	r1, r2, r2, r3
 8003530:	1152      	asrs	r2, r2, #5
 8003532:	17db      	asrs	r3, r3, #31
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	737b      	strb	r3, [r7, #13]
 800353a:	2300      	movs	r3, #0
 800353c:	73bb      	strb	r3, [r7, #14]
 800353e:	2200      	movs	r2, #0
 8003540:	68f9      	ldr	r1, [r7, #12]
 8003542:	2015      	movs	r0, #21
 8003544:	f7fe fa6a 	bl	8001a1c <WS2812_One_RGB>
	  		}
	  		if(Current_Status.IND_RIGHT)
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <Start_RGB_Task+0x1dc>)
 800354a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800354e:	2b00      	cmp	r3, #0
 8003550:	d017      	beq.n	8003582 <Start_RGB_Task+0x1ce>
			{
				WS2812_One_RGB(0, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
 8003552:	2300      	movs	r3, #0
 8003554:	723b      	strb	r3, [r7, #8]
 8003556:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <Start_RGB_Task+0x1dc>)
 8003558:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800355c:	461a      	mov	r2, r3
 800355e:	4613      	mov	r3, r2
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	4a0d      	ldr	r2, [pc, #52]	; (800359c <Start_RGB_Task+0x1e8>)
 8003566:	fb82 1203 	smull	r1, r2, r2, r3
 800356a:	1152      	asrs	r2, r2, #5
 800356c:	17db      	asrs	r3, r3, #31
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	727b      	strb	r3, [r7, #9]
 8003574:	2300      	movs	r3, #0
 8003576:	72bb      	strb	r3, [r7, #10]
 8003578:	2200      	movs	r2, #0
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	2000      	movs	r0, #0
 800357e:	f7fe fa4d 	bl	8001a1c <WS2812_One_RGB>
			}

	  		WS2812_Refresh();
 8003582:	f7fe fa09 	bl	8001998 <WS2812_Refresh>
	  		osDelay(84);
 8003586:	2054      	movs	r0, #84	; 0x54
 8003588:	f008 fbb5 	bl	800bcf6 <osDelay>
	  if (RGB_ENABLED) {
 800358c:	e716      	b.n	80033bc <Start_RGB_Task+0x8>
 800358e:	bf00      	nop
 8003590:	2000a57c 	.word	0x2000a57c
 8003594:	00000000 	.word	0x00000000
 8003598:	45cb2000 	.word	0x45cb2000
 800359c:	51eb851f 	.word	0x51eb851f
 80035a0:	45f3c000 	.word	0x45f3c000

080035a4 <Start_BH1750_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BH1750_Task */
void Start_BH1750_Task(void *argument)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BH1750_Task */
	uint8_t changInProgress = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
	  				changInProgress = 0;
	  			}
	  			//Current_Status.RPM = Current_Status.BH1750_LUX;
	  			osDelay(200);
	  		} else {
	  			osDelay(60000);
 80035b0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80035b4:	f008 fb9f 	bl	800bcf6 <osDelay>
	  if (BH1750_ENABLED) {
 80035b8:	e7fa      	b.n	80035b0 <Start_BH1750_Task+0xc>

080035ba <Start_LPS22_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LPS22_Task */
void Start_LPS22_Task(void *argument)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LPS22_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80035c2:	2001      	movs	r0, #1
 80035c4:	f008 fb97 	bl	800bcf6 <osDelay>
 80035c8:	e7fb      	b.n	80035c2 <Start_LPS22_Task+0x8>
	...

080035cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a04      	ldr	r2, [pc, #16]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035de:	f000 fec7 	bl	8004370 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40001000 	.word	0x40001000

080035f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035f4:	b672      	cpsid	i
}
 80035f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80035f8:	e7fe      	b.n	80035f8 <Error_Handler+0x8>
	...

080035fc <SDRAM_delay>:

SDRAM_HandleTypeDef hsdram1;
FMC_SDRAM_CommandTypeDef command;

void SDRAM_delay(__IO uint32_t nCount)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
	
  for(index = (100000 * nCount); index != 0; index--);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a09      	ldr	r2, [pc, #36]	; (8003630 <SDRAM_delay+0x34>)
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e002      	b.n	800361a <SDRAM_delay+0x1e>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3b01      	subs	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f9      	bne.n	8003614 <SDRAM_delay+0x18>

}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	000186a0 	.word	0x000186a0

08003634 <SDRAM_Initialization_Sequence>:


void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
  
  /* Configure a clock configuration enable command */
  Command->CommandMode 					= FMC_SDRAM_CMD_CLK_ENABLE;	// ����SDRAMʱ�� 
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK; 	// ѡ��Ҫ���Ƶ�����
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2208      	movs	r2, #8
 800364c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 800365a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f005 fd64 	bl	800912e <HAL_SDRAM_SendCommand>
  SDRAM_delay(1);		// ��ʱ�ȴ�
 8003666:	2001      	movs	r0, #1
 8003668:	f7ff ffc8 	bl	80035fc <SDRAM_delay>
  
  /* Configure a PALL (precharge all) command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_PALL;		// Ԥ�������
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2202      	movs	r2, #2
 8003670:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2208      	movs	r2, #8
 8003676:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2200      	movs	r2, #0
 8003682:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // ���Ϳ���ָ��
 8003684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f005 fd4f 	bl	800912e <HAL_SDRAM_SendCommand>
  
  /* Configure a Auto-Refresh command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// ʹ���Զ�ˢ��
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2203      	movs	r2, #3
 8003694:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;          // ѡ��Ҫ���Ƶ�����
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber			= 8;                                // �Զ�ˢ�´���
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2208      	movs	r2, #8
 80036a0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2200      	movs	r2, #0
 80036a6:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80036a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f005 fd3d 	bl	800912e <HAL_SDRAM_SendCommand>
  
  /* Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 80036b4:	f240 2331 	movw	r3, #561	; 0x231
 80036b8:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode					= FMC_SDRAM_CMD_LOAD_MODE;	// ����ģʽ�Ĵ�������
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2204      	movs	r2, #4
 80036be:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2208      	movs	r2, #8
 80036c4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2201      	movs	r2, #1
 80036ca:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= tmpmrd;
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80036d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036d6:	6839      	ldr	r1, [r7, #0]
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f005 fd28 	bl	800912e <HAL_SDRAM_SendCommand>
  
  hsdram->Instance->SDRTR |= ((uint32_t)((1386)<< 1));	// ����ˢ�¼����� 
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	f443 632d 	orr.w	r3, r3, #2768	; 0xad0
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6153      	str	r3, [r2, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_MspInit+0x54>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	4a11      	ldr	r2, [pc, #68]	; (8003750 <HAL_MspInit+0x54>)
 800370c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003710:	6453      	str	r3, [r2, #68]	; 0x44
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <HAL_MspInit+0x54>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_MspInit+0x54>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <HAL_MspInit+0x54>)
 8003728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_MspInit+0x54>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800373a:	2200      	movs	r2, #0
 800373c:	210f      	movs	r1, #15
 800373e:	f06f 0001 	mvn.w	r0, #1
 8003742:	f001 fa43 	bl	8004bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800

08003754 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 031c 	add.w	r3, r7, #28
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a43      	ldr	r2, [pc, #268]	; (8003880 <HAL_CAN_MspInit+0x12c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d136      	bne.n	80037e4 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003776:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_CAN_MspInit+0x130>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3301      	adds	r3, #1
 800377c:	4a41      	ldr	r2, [pc, #260]	; (8003884 <HAL_CAN_MspInit+0x130>)
 800377e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003780:	4b40      	ldr	r3, [pc, #256]	; (8003884 <HAL_CAN_MspInit+0x130>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d10d      	bne.n	80037a4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	4b3e      	ldr	r3, [pc, #248]	; (8003888 <HAL_CAN_MspInit+0x134>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	4a3d      	ldr	r2, [pc, #244]	; (8003888 <HAL_CAN_MspInit+0x134>)
 8003792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003796:	6413      	str	r3, [r2, #64]	; 0x40
 8003798:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <HAL_CAN_MspInit+0x134>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	4b37      	ldr	r3, [pc, #220]	; (8003888 <HAL_CAN_MspInit+0x134>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	4a36      	ldr	r2, [pc, #216]	; (8003888 <HAL_CAN_MspInit+0x134>)
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	6313      	str	r3, [r2, #48]	; 0x30
 80037b4:	4b34      	ldr	r3, [pc, #208]	; (8003888 <HAL_CAN_MspInit+0x134>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ce:	2303      	movs	r3, #3
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80037d2:	2309      	movs	r3, #9
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d6:	f107 031c 	add.w	r3, r7, #28
 80037da:	4619      	mov	r1, r3
 80037dc:	482b      	ldr	r0, [pc, #172]	; (800388c <HAL_CAN_MspInit+0x138>)
 80037de:	f001 ffa3 	bl	8005728 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80037e2:	e048      	b.n	8003876 <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a29      	ldr	r2, [pc, #164]	; (8003890 <HAL_CAN_MspInit+0x13c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d143      	bne.n	8003876 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_CAN_MspInit+0x134>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a24      	ldr	r2, [pc, #144]	; (8003888 <HAL_CAN_MspInit+0x134>)
 80037f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b22      	ldr	r3, [pc, #136]	; (8003888 <HAL_CAN_MspInit+0x134>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800380a:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <HAL_CAN_MspInit+0x130>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_CAN_MspInit+0x130>)
 8003812:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_CAN_MspInit+0x130>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10d      	bne.n	8003838 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <HAL_CAN_MspInit+0x134>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a18      	ldr	r2, [pc, #96]	; (8003888 <HAL_CAN_MspInit+0x134>)
 8003826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b16      	ldr	r3, [pc, #88]	; (8003888 <HAL_CAN_MspInit+0x134>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <HAL_CAN_MspInit+0x134>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4a11      	ldr	r2, [pc, #68]	; (8003888 <HAL_CAN_MspInit+0x134>)
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	6313      	str	r3, [r2, #48]	; 0x30
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <HAL_CAN_MspInit+0x134>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003854:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003862:	2303      	movs	r3, #3
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003866:	2309      	movs	r3, #9
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800386a:	f107 031c 	add.w	r3, r7, #28
 800386e:	4619      	mov	r1, r3
 8003870:	4806      	ldr	r0, [pc, #24]	; (800388c <HAL_CAN_MspInit+0x138>)
 8003872:	f001 ff59 	bl	8005728 <HAL_GPIO_Init>
}
 8003876:	bf00      	nop
 8003878:	3730      	adds	r7, #48	; 0x30
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40006400 	.word	0x40006400
 8003884:	2000011c 	.word	0x2000011c
 8003888:	40023800 	.word	0x40023800
 800388c:	40020400 	.word	0x40020400
 8003890:	40006800 	.word	0x40006800

08003894 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <HAL_CRC_MspInit+0x3c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d10d      	bne.n	80038c2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_CRC_MspInit+0x40>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <HAL_CRC_MspInit+0x40>)
 80038b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <HAL_CRC_MspInit+0x40>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40023000 	.word	0x40023000
 80038d4:	40023800 	.word	0x40023800

080038d8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <HAL_DMA2D_MspInit+0x48>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d115      	bne.n	8003916 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_DMA2D_MspInit+0x4c>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <HAL_DMA2D_MspInit+0x4c>)
 80038f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_DMA2D_MspInit+0x4c>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2105      	movs	r1, #5
 800390a:	205a      	movs	r0, #90	; 0x5a
 800390c:	f001 f95e 	bl	8004bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003910:	205a      	movs	r0, #90	; 0x5a
 8003912:	f001 f977 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	4002b000 	.word	0x4002b000
 8003924:	40023800 	.word	0x40023800

08003928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_I2C_MspInit+0x84>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d12b      	bne.n	80039a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 8003954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003966:	2330      	movs	r3, #48	; 0x30
 8003968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800396a:	2312      	movs	r3, #18
 800396c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800396e:	2301      	movs	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003972:	2303      	movs	r3, #3
 8003974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003976:	2304      	movs	r3, #4
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800397a:	f107 0314 	add.w	r3, r7, #20
 800397e:	4619      	mov	r1, r3
 8003980:	480c      	ldr	r0, [pc, #48]	; (80039b4 <HAL_I2C_MspInit+0x8c>)
 8003982:	f001 fed1 	bl	8005728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 8003990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_I2C_MspInit+0x88>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80039a2:	bf00      	nop
 80039a4:	3728      	adds	r7, #40	; 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40005800 	.word	0x40005800
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40021c00 	.word	0x40021c00

080039b8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b09a      	sub	sp, #104	; 0x68
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d4:	2230      	movs	r2, #48	; 0x30
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f02a fda9 	bl	802e530 <memset>
  if(hltdc->Instance==LTDC)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a65      	ldr	r2, [pc, #404]	; (8003b78 <HAL_LTDC_MspInit+0x1c0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	f040 80c2 	bne.w	8003b6e <HAL_LTDC_MspInit+0x1b6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80039ea:	2308      	movs	r3, #8
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80039ee:	2332      	movs	r3, #50	; 0x32
 80039f0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80039f2:	2302      	movs	r3, #2
 80039f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80039f6:	2300      	movs	r3, #0
 80039f8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 f8ea 	bl	8007bd8 <HAL_RCCEx_PeriphCLKConfig>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003a0a:	f7ff fdf1 	bl	80035f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	623b      	str	r3, [r7, #32]
 8003a12:	4b5a      	ldr	r3, [pc, #360]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	4a59      	ldr	r2, [pc, #356]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1e:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	4b4c      	ldr	r3, [pc, #304]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a4b      	ldr	r2, [pc, #300]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a50:	f043 0320 	orr.w	r3, r3, #32
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b49      	ldr	r3, [pc, #292]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	4a44      	ldr	r2, [pc, #272]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a6c:	f043 0302 	orr.w	r3, r3, #2
 8003a70:	6313      	str	r3, [r2, #48]	; 0x30
 8003a72:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	4b3e      	ldr	r3, [pc, #248]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a3d      	ldr	r2, [pc, #244]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	4b37      	ldr	r3, [pc, #220]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a36      	ldr	r2, [pc, #216]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <HAL_LTDC_MspInit+0x1c4>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8003ab6:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8003aba:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abc:	2302      	movs	r3, #2
 8003abe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ac8:	230e      	movs	r3, #14
 8003aca:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003acc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	482b      	ldr	r0, [pc, #172]	; (8003b80 <HAL_LTDC_MspInit+0x1c8>)
 8003ad4:	f001 fe28 	bl	8005728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003adc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003aea:	230e      	movs	r3, #14
 8003aec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003aee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003af2:	4619      	mov	r1, r3
 8003af4:	4823      	ldr	r0, [pc, #140]	; (8003b84 <HAL_LTDC_MspInit+0x1cc>)
 8003af6:	f001 fe17 	bl	8005728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003afa:	2302      	movs	r3, #2
 8003afc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b02:	2301      	movs	r3, #1
 8003b04:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b06:	2303      	movs	r3, #3
 8003b08:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b0a:	2309      	movs	r3, #9
 8003b0c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b12:	4619      	mov	r1, r3
 8003b14:	481c      	ldr	r0, [pc, #112]	; (8003b88 <HAL_LTDC_MspInit+0x1d0>)
 8003b16:	f001 fe07 	bl	8005728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8003b1a:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8003b1e:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	2302      	movs	r3, #2
 8003b22:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b24:	2301      	movs	r3, #1
 8003b26:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b2c:	230e      	movs	r3, #14
 8003b2e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b34:	4619      	mov	r1, r3
 8003b36:	4815      	ldr	r0, [pc, #84]	; (8003b8c <HAL_LTDC_MspInit+0x1d4>)
 8003b38:	f001 fdf6 	bl	8005728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8003b3c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003b40:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b46:	2301      	movs	r3, #1
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b4e:	230e      	movs	r3, #14
 8003b50:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b56:	4619      	mov	r1, r3
 8003b58:	480d      	ldr	r0, [pc, #52]	; (8003b90 <HAL_LTDC_MspInit+0x1d8>)
 8003b5a:	f001 fde5 	bl	8005728 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2105      	movs	r1, #5
 8003b62:	2058      	movs	r0, #88	; 0x58
 8003b64:	f001 f832 	bl	8004bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003b68:	2058      	movs	r0, #88	; 0x58
 8003b6a:	f001 f84b 	bl	8004c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003b6e:	bf00      	nop
 8003b70:	3768      	adds	r7, #104	; 0x68
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40016800 	.word	0x40016800
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40022000 	.word	0x40022000
 8003b84:	40021400 	.word	0x40021400
 8003b88:	40020400 	.word	0x40020400
 8003b8c:	40021c00 	.word	0x40021c00
 8003b90:	40021800 	.word	0x40021800

08003b94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <HAL_SD_MspInit+0xc0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d14a      	bne.n	8003c4c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <HAL_SD_MspInit+0xc4>)
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <HAL_SD_MspInit+0xc4>)
 8003bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_SD_MspInit+0xc4>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_SD_MspInit+0xc4>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_SD_MspInit+0xc4>)
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_SD_MspInit+0xc4>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_SD_MspInit+0xc4>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <HAL_SD_MspInit+0xc4>)
 8003bf8:	f043 0308 	orr.w	r3, r3, #8
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <HAL_SD_MspInit+0xc4>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003c0a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c0e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c10:	2302      	movs	r3, #2
 8003c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c14:	2301      	movs	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4619      	mov	r1, r3
 8003c26:	480d      	ldr	r0, [pc, #52]	; (8003c5c <HAL_SD_MspInit+0xc8>)
 8003c28:	f001 fd7e 	bl	8005728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c34:	2301      	movs	r3, #1
 8003c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4619      	mov	r1, r3
 8003c46:	4806      	ldr	r0, [pc, #24]	; (8003c60 <HAL_SD_MspInit+0xcc>)
 8003c48:	f001 fd6e 	bl	8005728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003c4c:	bf00      	nop
 8003c4e:	3728      	adds	r7, #40	; 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40020800 	.word	0x40020800
 8003c60:	40020c00 	.word	0x40020c00

08003c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2c      	ldr	r2, [pc, #176]	; (8003d24 <HAL_TIM_Base_MspInit+0xc0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d13f      	bne.n	8003cf6 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <HAL_TIM_Base_MspInit+0xc4>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	4a2a      	ldr	r2, [pc, #168]	; (8003d28 <HAL_TIM_Base_MspInit+0xc4>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6453      	str	r3, [r2, #68]	; 0x44
 8003c86:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <HAL_TIM_Base_MspInit+0xc4>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003c94:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <HAL_TIM_Base_MspInit+0xcc>)
 8003c96:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003c98:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003c9a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003c9e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ca0:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003ca2:	2240      	movs	r2, #64	; 0x40
 8003ca4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ca6:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cb2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cba:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cc2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cca:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003ccc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003cd0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003cd8:	4814      	ldr	r0, [pc, #80]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003cda:	f000 ffbd 	bl	8004c58 <HAL_DMA_Init>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003ce4:	f7ff fc84 	bl	80035f0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24
 8003cee:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <HAL_TIM_Base_MspInit+0xc8>)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003cf4:	e012      	b.n	8003d1c <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM13)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <HAL_TIM_Base_MspInit+0xd0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10d      	bne.n	8003d1c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_TIM_Base_MspInit+0xc4>)
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	4a07      	ldr	r2, [pc, #28]	; (8003d28 <HAL_TIM_Base_MspInit+0xc4>)
 8003d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_TIM_Base_MspInit+0xc4>)
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	20009adc 	.word	0x20009adc
 8003d30:	40026428 	.word	0x40026428
 8003d34:	40001c00 	.word	0x40001c00

08003d38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0b      	ldr	r2, [pc, #44]	; (8003d74 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10d      	bne.n	8003d66 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_TIM_PWM_MspInit+0x40>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_TIM_PWM_MspInit+0x40>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <HAL_TIM_PWM_MspInit+0x40>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40023800 	.word	0x40023800

08003d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a37      	ldr	r2, [pc, #220]	; (8003e78 <HAL_TIM_MspPostInit+0xfc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d11f      	bne.n	8003dde <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_TIM_MspPostInit+0x100>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	4a35      	ldr	r2, [pc, #212]	; (8003e7c <HAL_TIM_MspPostInit+0x100>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6313      	str	r3, [r2, #48]	; 0x30
 8003dae:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <HAL_TIM_MspPostInit+0x100>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	482a      	ldr	r0, [pc, #168]	; (8003e80 <HAL_TIM_MspPostInit+0x104>)
 8003dd8:	f001 fca6 	bl	8005728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003ddc:	e047      	b.n	8003e6e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <HAL_TIM_MspPostInit+0x108>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d11e      	bne.n	8003e26 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	4b23      	ldr	r3, [pc, #140]	; (8003e7c <HAL_TIM_MspPostInit+0x100>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <HAL_TIM_MspPostInit+0x100>)
 8003df2:	f043 0310 	orr.w	r3, r3, #16
 8003df6:	6313      	str	r3, [r2, #48]	; 0x30
 8003df8:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <HAL_TIM_MspPostInit+0x100>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e04:	2360      	movs	r3, #96	; 0x60
 8003e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e14:	2303      	movs	r3, #3
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	481a      	ldr	r0, [pc, #104]	; (8003e88 <HAL_TIM_MspPostInit+0x10c>)
 8003e20:	f001 fc82 	bl	8005728 <HAL_GPIO_Init>
}
 8003e24:	e023      	b.n	8003e6e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM13)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <HAL_TIM_MspPostInit+0x110>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d11e      	bne.n	8003e6e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e30:	2300      	movs	r3, #0
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_TIM_MspPostInit+0x100>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <HAL_TIM_MspPostInit+0x100>)
 8003e3a:	f043 0320 	orr.w	r3, r3, #32
 8003e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_TIM_MspPostInit+0x100>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e52:	2302      	movs	r3, #2
 8003e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e56:	2301      	movs	r3, #1
 8003e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003e5e:	2309      	movs	r3, #9
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e62:	f107 0314 	add.w	r3, r7, #20
 8003e66:	4619      	mov	r1, r3
 8003e68:	4809      	ldr	r0, [pc, #36]	; (8003e90 <HAL_TIM_MspPostInit+0x114>)
 8003e6a:	f001 fc5d 	bl	8005728 <HAL_GPIO_Init>
}
 8003e6e:	bf00      	nop
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020000 	.word	0x40020000
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40001c00 	.word	0x40001c00
 8003e90:	40021400 	.word	0x40021400

08003e94 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003e9a:	1d3b      	adds	r3, r7, #4
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003ea8:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <HAL_FMC_MspInit+0x114>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d177      	bne.n	8003fa0 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_FMC_MspInit+0x114>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <HAL_FMC_MspInit+0x118>)
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	4a3b      	ldr	r2, [pc, #236]	; (8003fac <HAL_FMC_MspInit+0x118>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6393      	str	r3, [r2, #56]	; 0x38
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_FMC_MspInit+0x118>)
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003ed2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003ed6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	4619      	mov	r1, r3
 8003eec:	4830      	ldr	r0, [pc, #192]	; (8003fb0 <HAL_FMC_MspInit+0x11c>)
 8003eee:	f001 fc1b 	bl	8005728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efe:	2303      	movs	r3, #3
 8003f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f02:	230c      	movs	r3, #12
 8003f04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	482a      	ldr	r0, [pc, #168]	; (8003fb4 <HAL_FMC_MspInit+0x120>)
 8003f0c:	f001 fc0c 	bl	8005728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003f10:	f248 1337 	movw	r3, #33079	; 0x8137
 8003f14:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f22:	230c      	movs	r3, #12
 8003f24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4823      	ldr	r0, [pc, #140]	; (8003fb8 <HAL_FMC_MspInit+0x124>)
 8003f2c:	f001 fbfc 	bl	8005728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003f30:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f36:	2302      	movs	r3, #2
 8003f38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f42:	230c      	movs	r3, #12
 8003f44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f46:	1d3b      	adds	r3, r7, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	481c      	ldr	r0, [pc, #112]	; (8003fbc <HAL_FMC_MspInit+0x128>)
 8003f4c:	f001 fbec 	bl	8005728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f50:	23c0      	movs	r3, #192	; 0xc0
 8003f52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f54:	2302      	movs	r3, #2
 8003f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f60:	230c      	movs	r3, #12
 8003f62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f64:	1d3b      	adds	r3, r7, #4
 8003f66:	4619      	mov	r1, r3
 8003f68:	4815      	ldr	r0, [pc, #84]	; (8003fc0 <HAL_FMC_MspInit+0x12c>)
 8003f6a:	f001 fbdd 	bl	8005728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003f6e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003f72:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f80:	230c      	movs	r3, #12
 8003f82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f84:	1d3b      	adds	r3, r7, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	480e      	ldr	r0, [pc, #56]	; (8003fc4 <HAL_FMC_MspInit+0x130>)
 8003f8a:	f001 fbcd 	bl	8005728 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 5, 0);
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2105      	movs	r1, #5
 8003f92:	2030      	movs	r0, #48	; 0x30
 8003f94:	f000 fe1a 	bl	8004bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8003f98:	2030      	movs	r0, #48	; 0x30
 8003f9a:	f000 fe33 	bl	8004c04 <HAL_NVIC_EnableIRQ>
 8003f9e:	e000      	b.n	8003fa2 <HAL_FMC_MspInit+0x10e>
    return;
 8003fa0:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000120 	.word	0x20000120
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40021400 	.word	0x40021400
 8003fb4:	40020800 	.word	0x40020800
 8003fb8:	40021800 	.word	0x40021800
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40021c00 	.word	0x40021c00
 8003fc4:	40020c00 	.word	0x40020c00

08003fc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003fd0:	f7ff ff60 	bl	8003e94 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	; 0x30
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003fec:	2200      	movs	r2, #0
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	2036      	movs	r0, #54	; 0x36
 8003ff2:	f000 fdeb 	bl	8004bcc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ff6:	2036      	movs	r0, #54	; 0x36
 8003ff8:	f000 fe04 	bl	8004c04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <HAL_InitTick+0xa4>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <HAL_InitTick+0xa4>)
 8004006:	f043 0310 	orr.w	r3, r3, #16
 800400a:	6413      	str	r3, [r2, #64]	; 0x40
 800400c:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <HAL_InitTick+0xa4>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004018:	f107 0210 	add.w	r2, r7, #16
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f003 fd8a 	bl	8007b3c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004028:	f003 fd74 	bl	8007b14 <HAL_RCC_GetPCLK1Freq>
 800402c:	4603      	mov	r3, r0
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	4a13      	ldr	r2, [pc, #76]	; (8004084 <HAL_InitTick+0xa8>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0c9b      	lsrs	r3, r3, #18
 800403c:	3b01      	subs	r3, #1
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <HAL_InitTick+0xac>)
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <HAL_InitTick+0xb0>)
 8004044:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <HAL_InitTick+0xac>)
 8004048:	f240 32e7 	movw	r2, #999	; 0x3e7
 800404c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800404e:	4a0e      	ldr	r2, [pc, #56]	; (8004088 <HAL_InitTick+0xac>)
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <HAL_InitTick+0xac>)
 8004056:	2200      	movs	r2, #0
 8004058:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_InitTick+0xac>)
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004060:	4809      	ldr	r0, [pc, #36]	; (8004088 <HAL_InitTick+0xac>)
 8004062:	f005 f88f 	bl	8009184 <HAL_TIM_Base_Init>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d104      	bne.n	8004076 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800406c:	4806      	ldr	r0, [pc, #24]	; (8004088 <HAL_InitTick+0xac>)
 800406e:	f005 f8d9 	bl	8009224 <HAL_TIM_Base_Start_IT>
 8004072:	4603      	mov	r3, r0
 8004074:	e000      	b.n	8004078 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
}
 8004078:	4618      	mov	r0, r3
 800407a:	3730      	adds	r7, #48	; 0x30
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	431bde83 	.word	0x431bde83
 8004088:	2000b19c 	.word	0x2000b19c
 800408c:	40001000 	.word	0x40001000

08004090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004094:	f003 fd84 	bl	8007ba0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004098:	e7fe      	b.n	8004098 <NMI_Handler+0x8>

0800409a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800409e:	e7fe      	b.n	800409e <HardFault_Handler+0x4>

080040a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a4:	e7fe      	b.n	80040a4 <MemManage_Handler+0x4>

080040a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040aa:	e7fe      	b.n	80040aa <BusFault_Handler+0x4>

080040ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <UsageFault_Handler+0x4>

080040b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 80040c4:	4802      	ldr	r0, [pc, #8]	; (80040d0 <FMC_IRQHandler+0x10>)
 80040c6:	f005 f80e 	bl	80090e6 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	2000b140 	.word	0x2000b140

080040d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040d8:	4802      	ldr	r0, [pc, #8]	; (80040e4 <TIM6_DAC_IRQHandler+0x10>)
 80040da:	f005 fbf3 	bl	80098c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	2000b19c 	.word	0x2000b19c

080040e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	DMA_Callback();
 80040ec:	f7fc ff1e 	bl	8000f2c <DMA_Callback>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <DMA2_Stream1_IRQHandler+0x14>)
 80040f2:	f000 feb7 	bl	8004e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20009adc 	.word	0x20009adc

08004100 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004104:	4802      	ldr	r0, [pc, #8]	; (8004110 <LTDC_IRQHandler+0x10>)
 8004106:	f002 fde7 	bl	8006cd8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	2000a63c 	.word	0x2000a63c

08004114 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004118:	4802      	ldr	r0, [pc, #8]	; (8004124 <DMA2D_IRQHandler+0x10>)
 800411a:	f001 f962 	bl	80053e2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	2000b0b8 	.word	0x2000b0b8

08004128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
	return 1;
 800412c:	2301      	movs	r3, #1
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_kill>:

int _kill(int pid, int sig)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004142:	f02a f8a1 	bl	802e288 <__errno>
 8004146:	4603      	mov	r3, r0
 8004148:	2216      	movs	r2, #22
 800414a:	601a      	str	r2, [r3, #0]
	return -1;
 800414c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <_exit>:

void _exit (int status)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004160:	f04f 31ff 	mov.w	r1, #4294967295
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ffe7 	bl	8004138 <_kill>
	while (1) {}		/* Make sure we hang here */
 800416a:	e7fe      	b.n	800416a <_exit+0x12>

0800416c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e00a      	b.n	8004194 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800417e:	f3af 8000 	nop.w
 8004182:	4601      	mov	r1, r0
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	60ba      	str	r2, [r7, #8]
 800418a:	b2ca      	uxtb	r2, r1
 800418c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3301      	adds	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	dbf0      	blt.n	800417e <_read+0x12>
	}

return len;
 800419c:	687b      	ldr	r3, [r7, #4]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b086      	sub	sp, #24
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e009      	b.n	80041cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	60ba      	str	r2, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3301      	adds	r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	dbf1      	blt.n	80041b8 <_write+0x12>
	}
	return len;
 80041d4:	687b      	ldr	r3, [r7, #4]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <_close>:

int _close(int file)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
	return -1;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004206:	605a      	str	r2, [r3, #4]
	return 0;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_isatty>:

int _isatty(int file)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
	return 1;
 800421e:	2301      	movs	r3, #1
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
	return 0;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <_sbrk+0x5c>)
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <_sbrk+0x60>)
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <_sbrk+0x64>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <_sbrk+0x64>)
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <_sbrk+0x68>)
 8004268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <_sbrk+0x64>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d207      	bcs.n	8004288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004278:	f02a f806 	bl	802e288 <__errno>
 800427c:	4603      	mov	r3, r0
 800427e:	220c      	movs	r2, #12
 8004280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	e009      	b.n	800429c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <_sbrk+0x64>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <_sbrk+0x64>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	4a05      	ldr	r2, [pc, #20]	; (80042ac <_sbrk+0x64>)
 8004298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20030000 	.word	0x20030000
 80042a8:	00000800 	.word	0x00000800
 80042ac:	20000124 	.word	0x20000124
 80042b0:	2000b6a8 	.word	0x2000b6a8

080042b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <SystemInit+0x20>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <SystemInit+0x20>)
 80042c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80042d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004310 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042dc:	480d      	ldr	r0, [pc, #52]	; (8004314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042de:	490e      	ldr	r1, [pc, #56]	; (8004318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042e0:	4a0e      	ldr	r2, [pc, #56]	; (800431c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042e4:	e002      	b.n	80042ec <LoopCopyDataInit>

080042e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ea:	3304      	adds	r3, #4

080042ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042f0:	d3f9      	bcc.n	80042e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042f4:	4c0b      	ldr	r4, [pc, #44]	; (8004324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f8:	e001      	b.n	80042fe <LoopFillZerobss>

080042fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042fc:	3204      	adds	r2, #4

080042fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004300:	d3fb      	bcc.n	80042fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004302:	f7ff ffd7 	bl	80042b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004306:	f02a f8cd 	bl	802e4a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800430a:	f7fd fba9 	bl	8001a60 <main>
  bx  lr    
 800430e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004310:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004318:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800431c:	080ad320 	.word	0x080ad320
  ldr r2, =_sbss
 8004320:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8004324:	2000b6a4 	.word	0x2000b6a4

08004328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004328:	e7fe      	b.n	8004328 <ADC_IRQHandler>
	...

0800432c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_Init+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0d      	ldr	r2, [pc, #52]	; (800436c <HAL_Init+0x40>)
 8004336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_Init+0x40>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <HAL_Init+0x40>)
 8004342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004348:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_Init+0x40>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a07      	ldr	r2, [pc, #28]	; (800436c <HAL_Init+0x40>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004354:	2003      	movs	r0, #3
 8004356:	f000 fc2e 	bl	8004bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800435a:	200f      	movs	r0, #15
 800435c:	f7ff fe3e 	bl	8003fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004360:	f7ff f9cc 	bl	80036fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00

08004370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_IncTick+0x20>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_IncTick+0x24>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4413      	add	r3, r2
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <HAL_IncTick+0x24>)
 8004382:	6013      	str	r3, [r2, #0]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000010 	.word	0x20000010
 8004394:	2000b1e4 	.word	0x2000b1e4

08004398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return uwTick;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_GetTick+0x14>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	2000b1e4 	.word	0x2000b1e4

080043b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043b8:	f7ff ffee 	bl	8004398 <HAL_GetTick>
 80043bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d005      	beq.n	80043d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <HAL_Delay+0x44>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043d6:	bf00      	nop
 80043d8:	f7ff ffde 	bl	8004398 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d8f7      	bhi.n	80043d8 <HAL_Delay+0x28>
  {
  }
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000010 	.word	0x20000010

080043f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e0ed      	b.n	80045e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff f99c 	bl	8003754 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800442c:	f7ff ffb4 	bl	8004398 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004432:	e012      	b.n	800445a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004434:	f7ff ffb0 	bl	8004398 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b0a      	cmp	r3, #10
 8004440:	d90b      	bls.n	800445a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2205      	movs	r2, #5
 8004452:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0c5      	b.n	80045e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0e5      	beq.n	8004434 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0202 	bic.w	r2, r2, #2
 8004476:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004478:	f7ff ff8e 	bl	8004398 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800447e:	e012      	b.n	80044a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004480:	f7ff ff8a 	bl	8004398 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b0a      	cmp	r3, #10
 800448c:	d90b      	bls.n	80044a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2205      	movs	r2, #5
 800449e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e09f      	b.n	80045e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	7e1b      	ldrb	r3, [r3, #24]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d108      	bne.n	80044ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e007      	b.n	80044de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7e5b      	ldrb	r3, [r3, #25]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d108      	bne.n	80044f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004506:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	7e9b      	ldrb	r3, [r3, #26]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d108      	bne.n	8004522 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0220 	orr.w	r2, r2, #32
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	e007      	b.n	8004532 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0220 	bic.w	r2, r2, #32
 8004530:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	7edb      	ldrb	r3, [r3, #27]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d108      	bne.n	800454c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0210 	bic.w	r2, r2, #16
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e007      	b.n	800455c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0210 	orr.w	r2, r2, #16
 800455a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7f1b      	ldrb	r3, [r3, #28]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d108      	bne.n	8004576 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0208 	orr.w	r2, r2, #8
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e007      	b.n	8004586 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0208 	bic.w	r2, r2, #8
 8004584:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7f5b      	ldrb	r3, [r3, #29]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d108      	bne.n	80045a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0204 	orr.w	r2, r2, #4
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e007      	b.n	80045b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	1e5a      	subs	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004606:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d003      	beq.n	8004616 <HAL_CAN_ConfigFilter+0x26>
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	2b02      	cmp	r3, #2
 8004612:	f040 80be 	bne.w	8004792 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004616:	4b65      	ldr	r3, [pc, #404]	; (80047ac <HAL_CAN_ConfigFilter+0x1bc>)
 8004618:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004620:	f043 0201 	orr.w	r2, r3, #1
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004630:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	431a      	orrs	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2201      	movs	r2, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	43db      	mvns	r3, r3
 8004668:	401a      	ands	r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d123      	bne.n	80046c0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800469a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3248      	adds	r2, #72	; 0x48
 80046a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046b6:	6979      	ldr	r1, [r7, #20]
 80046b8:	3348      	adds	r3, #72	; 0x48
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	440b      	add	r3, r1
 80046be:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d122      	bne.n	800470e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80046e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	3248      	adds	r2, #72	; 0x48
 80046ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004702:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004704:	6979      	ldr	r1, [r7, #20]
 8004706:	3348      	adds	r3, #72	; 0x48
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	440b      	add	r3, r1
 800470c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	43db      	mvns	r3, r3
 8004720:	401a      	ands	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004728:	e007      	b.n	800473a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	431a      	orrs	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	43db      	mvns	r3, r3
 800474c:	401a      	ands	r2, r3
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004754:	e007      	b.n	8004766 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	431a      	orrs	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	431a      	orrs	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004784:	f023 0201 	bic.w	r2, r3, #1
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e006      	b.n	80047a0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40006400 	.word	0x40006400

080047b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d12e      	bne.n	8004822 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047dc:	f7ff fddc 	bl	8004398 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80047e2:	e012      	b.n	800480a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047e4:	f7ff fdd8 	bl	8004398 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b0a      	cmp	r3, #10
 80047f0:	d90b      	bls.n	800480a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2205      	movs	r2, #5
 8004802:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e012      	b.n	8004830 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e006      	b.n	8004830 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
  }
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800484c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d003      	beq.n	800485c <HAL_CAN_GetRxMessage+0x24>
 8004854:	7dfb      	ldrb	r3, [r7, #23]
 8004856:	2b02      	cmp	r3, #2
 8004858:	f040 80f3 	bne.w	8004a42 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10e      	bne.n	8004880 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0e7      	b.n	8004a50 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0d8      	b.n	8004a50 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	331b      	adds	r3, #27
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	4413      	add	r3, r2
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0204 	and.w	r2, r3, #4
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10c      	bne.n	80048d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	331b      	adds	r3, #27
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	4413      	add	r3, r2
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	0d5b      	lsrs	r3, r3, #21
 80048cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e00b      	b.n	80048ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	331b      	adds	r3, #27
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	4413      	add	r3, r2
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	08db      	lsrs	r3, r3, #3
 80048e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	331b      	adds	r3, #27
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	4413      	add	r3, r2
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0202 	and.w	r2, r3, #2
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	331b      	adds	r3, #27
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	4413      	add	r3, r2
 8004910:	3304      	adds	r3, #4
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 020f 	and.w	r2, r3, #15
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	331b      	adds	r3, #27
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	4413      	add	r3, r2
 8004928:	3304      	adds	r3, #4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	0a1b      	lsrs	r3, r3, #8
 800492e:	b2da      	uxtb	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	331b      	adds	r3, #27
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	4413      	add	r3, r2
 8004940:	3304      	adds	r3, #4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	4413      	add	r3, r2
 8004956:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	b2da      	uxtb	r2, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	4413      	add	r3, r2
 800496c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	0a1a      	lsrs	r2, r3, #8
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	3301      	adds	r3, #1
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	4413      	add	r3, r2
 8004986:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	0c1a      	lsrs	r2, r3, #16
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	3302      	adds	r3, #2
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	4413      	add	r3, r2
 80049a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	0e1a      	lsrs	r2, r3, #24
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	3303      	adds	r3, #3
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	3304      	adds	r3, #4
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0a1a      	lsrs	r2, r3, #8
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	3305      	adds	r3, #5
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	0c1a      	lsrs	r2, r3, #16
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	3306      	adds	r3, #6
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0e1a      	lsrs	r2, r3, #24
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	3307      	adds	r3, #7
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d108      	bne.n	8004a2e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0220 	orr.w	r2, r2, #32
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	e007      	b.n	8004a3e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0220 	orr.w	r2, r2, #32
 8004a3c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e006      	b.n	8004a50 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a8e:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	60d3      	str	r3, [r2, #12]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <__NVIC_GetPriorityGrouping+0x18>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	f003 0307 	and.w	r3, r3, #7
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	db0b      	blt.n	8004aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	f003 021f 	and.w	r2, r3, #31
 8004ad8:	4907      	ldr	r1, [pc, #28]	; (8004af8 <__NVIC_EnableIRQ+0x38>)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	e000e100 	.word	0xe000e100

08004afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	6039      	str	r1, [r7, #0]
 8004b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	db0a      	blt.n	8004b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	490c      	ldr	r1, [pc, #48]	; (8004b48 <__NVIC_SetPriority+0x4c>)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	0112      	lsls	r2, r2, #4
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	440b      	add	r3, r1
 8004b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b24:	e00a      	b.n	8004b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	4908      	ldr	r1, [pc, #32]	; (8004b4c <__NVIC_SetPriority+0x50>)
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	3b04      	subs	r3, #4
 8004b34:	0112      	lsls	r2, r2, #4
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	440b      	add	r3, r1
 8004b3a:	761a      	strb	r2, [r3, #24]
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	e000e100 	.word	0xe000e100
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b089      	sub	sp, #36	; 0x24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f1c3 0307 	rsb	r3, r3, #7
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	bf28      	it	cs
 8004b6e:	2304      	movcs	r3, #4
 8004b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d902      	bls.n	8004b80 <NVIC_EncodePriority+0x30>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3b03      	subs	r3, #3
 8004b7e:	e000      	b.n	8004b82 <NVIC_EncodePriority+0x32>
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	401a      	ands	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b98:	f04f 31ff 	mov.w	r1, #4294967295
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	43d9      	mvns	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba8:	4313      	orrs	r3, r2
         );
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ff4c 	bl	8004a5c <__NVIC_SetPriorityGrouping>
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bde:	f7ff ff61 	bl	8004aa4 <__NVIC_GetPriorityGrouping>
 8004be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	6978      	ldr	r0, [r7, #20]
 8004bea:	f7ff ffb1 	bl	8004b50 <NVIC_EncodePriority>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff ff80 	bl	8004afc <__NVIC_SetPriority>
}
 8004bfc:	bf00      	nop
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff ff54 	bl	8004ac0 <__NVIC_EnableIRQ>
}
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e00e      	b.n	8004c50 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	795b      	ldrb	r3, [r3, #5]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fe fe26 	bl	8003894 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c64:	f7ff fb98 	bl	8004398 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e099      	b.n	8004da8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c94:	e00f      	b.n	8004cb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c96:	f7ff fb7f 	bl	8004398 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	d908      	bls.n	8004cb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2203      	movs	r2, #3
 8004cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e078      	b.n	8004da8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e8      	bne.n	8004c96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4b38      	ldr	r3, [pc, #224]	; (8004db0 <HAL_DMA_Init+0x158>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d107      	bne.n	8004d20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0307 	bic.w	r3, r3, #7
 8004d36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d117      	bne.n	8004d7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fa7b 	bl	8005258 <DMA_CheckFifoParam>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2240      	movs	r2, #64	; 0x40
 8004d6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d76:	2301      	movs	r3, #1
 8004d78:	e016      	b.n	8004da8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa32 	bl	80051ec <DMA_CalcBaseAndBitshift>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d90:	223f      	movs	r2, #63	; 0x3f
 8004d92:	409a      	lsls	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	f010803f 	.word	0xf010803f

08004db4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_DMA_Start_IT+0x26>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e040      	b.n	8004e5c <HAL_DMA_Start_IT+0xa8>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d12f      	bne.n	8004e4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2202      	movs	r2, #2
 8004df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f9c4 	bl	8005190 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0c:	223f      	movs	r2, #63	; 0x3f
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0216 	orr.w	r2, r2, #22
 8004e22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0208 	orr.w	r2, r2, #8
 8004e3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	e005      	b.n	8004e5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
 8004e58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e70:	4b92      	ldr	r3, [pc, #584]	; (80050bc <HAL_DMA_IRQHandler+0x258>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a92      	ldr	r2, [pc, #584]	; (80050c0 <HAL_DMA_IRQHandler+0x25c>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	0a9b      	lsrs	r3, r3, #10
 8004e7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8e:	2208      	movs	r2, #8
 8004e90:	409a      	lsls	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d01a      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0204 	bic.w	r2, r2, #4
 8004eb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	f043 0201 	orr.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d012      	beq.n	8004f06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	f043 0202 	orr.w	r2, r3, #2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d012      	beq.n	8004f3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00b      	beq.n	8004f3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f28:	2204      	movs	r2, #4
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	f043 0204 	orr.w	r2, r3, #4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f40:	2210      	movs	r2, #16
 8004f42:	409a      	lsls	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d043      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d03c      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5e:	2210      	movs	r2, #16
 8004f60:	409a      	lsls	r2, r3
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d018      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d108      	bne.n	8004f94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d024      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
 8004f92:	e01f      	b.n	8004fd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01b      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
 8004fa4:	e016      	b.n	8004fd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d107      	bne.n	8004fc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0208 	bic.w	r2, r2, #8
 8004fc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd8:	2220      	movs	r2, #32
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 808e 	beq.w	8005102 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8086 	beq.w	8005102 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b05      	cmp	r3, #5
 800500c:	d136      	bne.n	800507c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0216 	bic.w	r2, r2, #22
 800501c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800502c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <HAL_DMA_IRQHandler+0x1da>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0208 	bic.w	r2, r2, #8
 800504c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	223f      	movs	r2, #63	; 0x3f
 8005054:	409a      	lsls	r2, r3
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506e:	2b00      	cmp	r3, #0
 8005070:	d07d      	beq.n	800516e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
        }
        return;
 800507a:	e078      	b.n	800516e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d01c      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d108      	bne.n	80050aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509c:	2b00      	cmp	r3, #0
 800509e:	d030      	beq.n	8005102 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
 80050a8:	e02b      	b.n	8005102 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d027      	beq.n	8005102 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
 80050ba:	e022      	b.n	8005102 <HAL_DMA_IRQHandler+0x29e>
 80050bc:	20000008 	.word	0x20000008
 80050c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0210 	bic.w	r2, r2, #16
 80050e0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	2b00      	cmp	r3, #0
 8005108:	d032      	beq.n	8005170 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d022      	beq.n	800515c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2205      	movs	r2, #5
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	3301      	adds	r3, #1
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	429a      	cmp	r2, r3
 8005138:	d307      	bcc.n	800514a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f2      	bne.n	800512e <HAL_DMA_IRQHandler+0x2ca>
 8005148:	e000      	b.n	800514c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800514a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4798      	blx	r3
 800516c:	e000      	b.n	8005170 <HAL_DMA_IRQHandler+0x30c>
        return;
 800516e:	bf00      	nop
    }
  }
}
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop

08005178 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d108      	bne.n	80051d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051ce:	e007      	b.n	80051e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	60da      	str	r2, [r3, #12]
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	3b10      	subs	r3, #16
 80051fc:	4a14      	ldr	r2, [pc, #80]	; (8005250 <DMA_CalcBaseAndBitshift+0x64>)
 80051fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005202:	091b      	lsrs	r3, r3, #4
 8005204:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005206:	4a13      	ldr	r2, [pc, #76]	; (8005254 <DMA_CalcBaseAndBitshift+0x68>)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b03      	cmp	r3, #3
 8005218:	d909      	bls.n	800522e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	1d1a      	adds	r2, r3, #4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	659a      	str	r2, [r3, #88]	; 0x58
 800522c:	e007      	b.n	800523e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	aaaaaaab 	.word	0xaaaaaaab
 8005254:	08030160 	.word	0x08030160

08005258 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d11f      	bne.n	80052b2 <DMA_CheckFifoParam+0x5a>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d856      	bhi.n	8005326 <DMA_CheckFifoParam+0xce>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <DMA_CheckFifoParam+0x28>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	08005291 	.word	0x08005291
 8005284:	080052a3 	.word	0x080052a3
 8005288:	08005291 	.word	0x08005291
 800528c:	08005327 	.word	0x08005327
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d046      	beq.n	800532a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a0:	e043      	b.n	800532a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052aa:	d140      	bne.n	800532e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b0:	e03d      	b.n	800532e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ba:	d121      	bne.n	8005300 <DMA_CheckFifoParam+0xa8>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d837      	bhi.n	8005332 <DMA_CheckFifoParam+0xda>
 80052c2:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <DMA_CheckFifoParam+0x70>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052d9 	.word	0x080052d9
 80052cc:	080052df 	.word	0x080052df
 80052d0:	080052d9 	.word	0x080052d9
 80052d4:	080052f1 	.word	0x080052f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
      break;
 80052dc:	e030      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d025      	beq.n	8005336 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ee:	e022      	b.n	8005336 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052f8:	d11f      	bne.n	800533a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052fe:	e01c      	b.n	800533a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d903      	bls.n	800530e <DMA_CheckFifoParam+0xb6>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d003      	beq.n	8005314 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800530c:	e018      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
      break;
 8005312:	e015      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00e      	beq.n	800533e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	73fb      	strb	r3, [r7, #15]
      break;
 8005324:	e00b      	b.n	800533e <DMA_CheckFifoParam+0xe6>
      break;
 8005326:	bf00      	nop
 8005328:	e00a      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 800532a:	bf00      	nop
 800532c:	e008      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 800532e:	bf00      	nop
 8005330:	e006      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 8005332:	bf00      	nop
 8005334:	e004      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 8005336:	bf00      	nop
 8005338:	e002      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;   
 800533a:	bf00      	nop
 800533c:	e000      	b.n	8005340 <DMA_CheckFifoParam+0xe8>
      break;
 800533e:	bf00      	nop
    }
  } 
  
  return status; 
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop

08005350 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e03b      	b.n	80053da <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fe faae 	bl	80038d8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a0:	f023 0107 	bic.w	r1, r3, #7
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80053ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68d1      	ldr	r1, [r2, #12]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	430b      	orrs	r3, r1
 80053c8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d026      	beq.n	8005452 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d021      	beq.n	8005452 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800541c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2201      	movs	r2, #1
 8005430:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2204      	movs	r2, #4
 8005436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d026      	beq.n	80054aa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d021      	beq.n	80054aa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005474:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2220      	movs	r2, #32
 800547c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	f043 0202 	orr.w	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2204      	movs	r2, #4
 800548e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d026      	beq.n	8005502 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d021      	beq.n	8005502 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054cc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2208      	movs	r2, #8
 80054d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	f043 0204 	orr.w	r2, r3, #4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2204      	movs	r2, #4
 80054e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d013      	beq.n	8005534 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00e      	beq.n	8005534 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2204      	movs	r2, #4
 800552c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f853 	bl	80055da <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d024      	beq.n	8005588 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01f      	beq.n	8005588 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005556:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2202      	movs	r2, #2
 800555e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01f      	beq.n	80055d2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01a      	beq.n	80055d2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055aa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2210      	movs	r2, #16
 80055b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f80e 	bl	80055ee <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
	...

08005604 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_DMA2D_ConfigLayer+0x20>
 8005620:	2302      	movs	r3, #2
 8005622:	e079      	b.n	8005718 <HAL_DMA2D_ConfigLayer+0x114>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	3318      	adds	r3, #24
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	4413      	add	r3, r2
 800563e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	041b      	lsls	r3, r3, #16
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800564e:	4b35      	ldr	r3, [pc, #212]	; (8005724 <HAL_DMA2D_ConfigLayer+0x120>)
 8005650:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b0a      	cmp	r3, #10
 8005658:	d003      	beq.n	8005662 <HAL_DMA2D_ConfigLayer+0x5e>
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b09      	cmp	r3, #9
 8005660:	d107      	bne.n	8005672 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	e005      	b.n	800567e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	061b      	lsls	r3, r3, #24
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d120      	bne.n	80056c6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	43db      	mvns	r3, r3
 800568e:	ea02 0103 	and.w	r1, r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	430a      	orrs	r2, r1
 800569a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	6812      	ldr	r2, [r2, #0]
 80056a4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b0a      	cmp	r3, #10
 80056ac:	d003      	beq.n	80056b6 <HAL_DMA2D_ConfigLayer+0xb2>
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b09      	cmp	r3, #9
 80056b4:	d127      	bne.n	8005706 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28
 80056c4:	e01f      	b.n	8005706 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	43db      	mvns	r3, r3
 80056d0:	ea02 0103 	and.w	r1, r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	430a      	orrs	r2, r1
 80056dc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b0a      	cmp	r3, #10
 80056ee:	d003      	beq.n	80056f8 <HAL_DMA2D_ConfigLayer+0xf4>
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b09      	cmp	r3, #9
 80056f6:	d106      	bne.n	8005706 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005704:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	ff03000f 	.word	0xff03000f

08005728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005728:	b480      	push	{r7}
 800572a:	b089      	sub	sp, #36	; 0x24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	e177      	b.n	8005a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005744:	2201      	movs	r2, #1
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	429a      	cmp	r2, r3
 800575e:	f040 8166 	bne.w	8005a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b01      	cmp	r3, #1
 800576c:	d005      	beq.n	800577a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005776:	2b02      	cmp	r3, #2
 8005778:	d130      	bne.n	80057dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	2203      	movs	r2, #3
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057b0:	2201      	movs	r2, #1
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	f003 0201 	and.w	r2, r3, #1
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d017      	beq.n	8005818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	2203      	movs	r2, #3
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4313      	orrs	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d123      	bne.n	800586c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	08da      	lsrs	r2, r3, #3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3208      	adds	r2, #8
 800582c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	220f      	movs	r2, #15
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	08da      	lsrs	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3208      	adds	r2, #8
 8005866:	69b9      	ldr	r1, [r7, #24]
 8005868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	2203      	movs	r2, #3
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 0203 	and.w	r2, r3, #3
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80c0 	beq.w	8005a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	4b66      	ldr	r3, [pc, #408]	; (8005a4c <HAL_GPIO_Init+0x324>)
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	4a65      	ldr	r2, [pc, #404]	; (8005a4c <HAL_GPIO_Init+0x324>)
 80058b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058bc:	6453      	str	r3, [r2, #68]	; 0x44
 80058be:	4b63      	ldr	r3, [pc, #396]	; (8005a4c <HAL_GPIO_Init+0x324>)
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058ca:	4a61      	ldr	r2, [pc, #388]	; (8005a50 <HAL_GPIO_Init+0x328>)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	3302      	adds	r3, #2
 80058d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	220f      	movs	r2, #15
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4013      	ands	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a58      	ldr	r2, [pc, #352]	; (8005a54 <HAL_GPIO_Init+0x32c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d037      	beq.n	8005966 <HAL_GPIO_Init+0x23e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a57      	ldr	r2, [pc, #348]	; (8005a58 <HAL_GPIO_Init+0x330>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d031      	beq.n	8005962 <HAL_GPIO_Init+0x23a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a56      	ldr	r2, [pc, #344]	; (8005a5c <HAL_GPIO_Init+0x334>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d02b      	beq.n	800595e <HAL_GPIO_Init+0x236>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a55      	ldr	r2, [pc, #340]	; (8005a60 <HAL_GPIO_Init+0x338>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d025      	beq.n	800595a <HAL_GPIO_Init+0x232>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a54      	ldr	r2, [pc, #336]	; (8005a64 <HAL_GPIO_Init+0x33c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01f      	beq.n	8005956 <HAL_GPIO_Init+0x22e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a53      	ldr	r2, [pc, #332]	; (8005a68 <HAL_GPIO_Init+0x340>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d019      	beq.n	8005952 <HAL_GPIO_Init+0x22a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a52      	ldr	r2, [pc, #328]	; (8005a6c <HAL_GPIO_Init+0x344>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <HAL_GPIO_Init+0x226>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a51      	ldr	r2, [pc, #324]	; (8005a70 <HAL_GPIO_Init+0x348>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00d      	beq.n	800594a <HAL_GPIO_Init+0x222>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a50      	ldr	r2, [pc, #320]	; (8005a74 <HAL_GPIO_Init+0x34c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d007      	beq.n	8005946 <HAL_GPIO_Init+0x21e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a4f      	ldr	r2, [pc, #316]	; (8005a78 <HAL_GPIO_Init+0x350>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d101      	bne.n	8005942 <HAL_GPIO_Init+0x21a>
 800593e:	2309      	movs	r3, #9
 8005940:	e012      	b.n	8005968 <HAL_GPIO_Init+0x240>
 8005942:	230a      	movs	r3, #10
 8005944:	e010      	b.n	8005968 <HAL_GPIO_Init+0x240>
 8005946:	2308      	movs	r3, #8
 8005948:	e00e      	b.n	8005968 <HAL_GPIO_Init+0x240>
 800594a:	2307      	movs	r3, #7
 800594c:	e00c      	b.n	8005968 <HAL_GPIO_Init+0x240>
 800594e:	2306      	movs	r3, #6
 8005950:	e00a      	b.n	8005968 <HAL_GPIO_Init+0x240>
 8005952:	2305      	movs	r3, #5
 8005954:	e008      	b.n	8005968 <HAL_GPIO_Init+0x240>
 8005956:	2304      	movs	r3, #4
 8005958:	e006      	b.n	8005968 <HAL_GPIO_Init+0x240>
 800595a:	2303      	movs	r3, #3
 800595c:	e004      	b.n	8005968 <HAL_GPIO_Init+0x240>
 800595e:	2302      	movs	r3, #2
 8005960:	e002      	b.n	8005968 <HAL_GPIO_Init+0x240>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <HAL_GPIO_Init+0x240>
 8005966:	2300      	movs	r3, #0
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	f002 0203 	and.w	r2, r2, #3
 800596e:	0092      	lsls	r2, r2, #2
 8005970:	4093      	lsls	r3, r2
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005978:	4935      	ldr	r1, [pc, #212]	; (8005a50 <HAL_GPIO_Init+0x328>)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	089b      	lsrs	r3, r3, #2
 800597e:	3302      	adds	r3, #2
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005986:	4b3d      	ldr	r3, [pc, #244]	; (8005a7c <HAL_GPIO_Init+0x354>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059aa:	4a34      	ldr	r2, [pc, #208]	; (8005a7c <HAL_GPIO_Init+0x354>)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059b0:	4b32      	ldr	r3, [pc, #200]	; (8005a7c <HAL_GPIO_Init+0x354>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059d4:	4a29      	ldr	r2, [pc, #164]	; (8005a7c <HAL_GPIO_Init+0x354>)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059da:	4b28      	ldr	r3, [pc, #160]	; (8005a7c <HAL_GPIO_Init+0x354>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	43db      	mvns	r3, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4013      	ands	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059fe:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <HAL_GPIO_Init+0x354>)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a04:	4b1d      	ldr	r3, [pc, #116]	; (8005a7c <HAL_GPIO_Init+0x354>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a28:	4a14      	ldr	r2, [pc, #80]	; (8005a7c <HAL_GPIO_Init+0x354>)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3301      	adds	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	f67f ae84 	bls.w	8005744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	3724      	adds	r7, #36	; 0x24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40013800 	.word	0x40013800
 8005a54:	40020000 	.word	0x40020000
 8005a58:	40020400 	.word	0x40020400
 8005a5c:	40020800 	.word	0x40020800
 8005a60:	40020c00 	.word	0x40020c00
 8005a64:	40021000 	.word	0x40021000
 8005a68:	40021400 	.word	0x40021400
 8005a6c:	40021800 	.word	0x40021800
 8005a70:	40021c00 	.word	0x40021c00
 8005a74:	40022000 	.word	0x40022000
 8005a78:	40022400 	.word	0x40022400
 8005a7c:	40013c00 	.word	0x40013c00

08005a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691a      	ldr	r2, [r3, #16]
 8005a90:	887b      	ldrh	r3, [r7, #2]
 8005a92:	4013      	ands	r3, r2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
 8005a9c:	e001      	b.n	8005aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	807b      	strh	r3, [r7, #2]
 8005abc:	4613      	mov	r3, r2
 8005abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ac0:	787b      	ldrb	r3, [r7, #1]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ac6:	887a      	ldrh	r2, [r7, #2]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005acc:	e003      	b.n	8005ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ace:	887b      	ldrh	r3, [r7, #2]
 8005ad0:	041a      	lsls	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	619a      	str	r2, [r3, #24]
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005af4:	887a      	ldrh	r2, [r7, #2]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4013      	ands	r3, r2
 8005afa:	041a      	lsls	r2, r3, #16
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	43d9      	mvns	r1, r3
 8005b00:	887b      	ldrh	r3, [r7, #2]
 8005b02:	400b      	ands	r3, r1
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	619a      	str	r2, [r3, #24]
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e12b      	b.n	8005d82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fd fef2 	bl	8003928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0201 	bic.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b7c:	f001 ffca 	bl	8007b14 <HAL_RCC_GetPCLK1Freq>
 8005b80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4a81      	ldr	r2, [pc, #516]	; (8005d8c <HAL_I2C_Init+0x274>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d807      	bhi.n	8005b9c <HAL_I2C_Init+0x84>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a80      	ldr	r2, [pc, #512]	; (8005d90 <HAL_I2C_Init+0x278>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	bf94      	ite	ls
 8005b94:	2301      	movls	r3, #1
 8005b96:	2300      	movhi	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	e006      	b.n	8005baa <HAL_I2C_Init+0x92>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4a7d      	ldr	r2, [pc, #500]	; (8005d94 <HAL_I2C_Init+0x27c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	bf94      	ite	ls
 8005ba4:	2301      	movls	r3, #1
 8005ba6:	2300      	movhi	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e0e7      	b.n	8005d82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4a78      	ldr	r2, [pc, #480]	; (8005d98 <HAL_I2C_Init+0x280>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	0c9b      	lsrs	r3, r3, #18
 8005bbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a6a      	ldr	r2, [pc, #424]	; (8005d8c <HAL_I2C_Init+0x274>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d802      	bhi.n	8005bec <HAL_I2C_Init+0xd4>
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3301      	adds	r3, #1
 8005bea:	e009      	b.n	8005c00 <HAL_I2C_Init+0xe8>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	4a69      	ldr	r2, [pc, #420]	; (8005d9c <HAL_I2C_Init+0x284>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	099b      	lsrs	r3, r3, #6
 8005bfe:	3301      	adds	r3, #1
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	495c      	ldr	r1, [pc, #368]	; (8005d8c <HAL_I2C_Init+0x274>)
 8005c1c:	428b      	cmp	r3, r1
 8005c1e:	d819      	bhi.n	8005c54 <HAL_I2C_Init+0x13c>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1e59      	subs	r1, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c34:	400b      	ands	r3, r1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_I2C_Init+0x138>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1e59      	subs	r1, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c48:	3301      	adds	r3, #1
 8005c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4e:	e051      	b.n	8005cf4 <HAL_I2C_Init+0x1dc>
 8005c50:	2304      	movs	r3, #4
 8005c52:	e04f      	b.n	8005cf4 <HAL_I2C_Init+0x1dc>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d111      	bne.n	8005c80 <HAL_I2C_Init+0x168>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1e58      	subs	r0, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	440b      	add	r3, r1
 8005c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c6e:	3301      	adds	r3, #1
 8005c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e012      	b.n	8005ca6 <HAL_I2C_Init+0x18e>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	1e58      	subs	r0, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6859      	ldr	r1, [r3, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	0099      	lsls	r1, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c96:	3301      	adds	r3, #1
 8005c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_I2C_Init+0x196>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e022      	b.n	8005cf4 <HAL_I2C_Init+0x1dc>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10e      	bne.n	8005cd4 <HAL_I2C_Init+0x1bc>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1e58      	subs	r0, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6859      	ldr	r1, [r3, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	440b      	add	r3, r1
 8005cc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cc8:	3301      	adds	r3, #1
 8005cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd2:	e00f      	b.n	8005cf4 <HAL_I2C_Init+0x1dc>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	1e58      	subs	r0, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6859      	ldr	r1, [r3, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	0099      	lsls	r1, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cea:	3301      	adds	r3, #1
 8005cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	6809      	ldr	r1, [r1, #0]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69da      	ldr	r2, [r3, #28]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6911      	ldr	r1, [r2, #16]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68d2      	ldr	r2, [r2, #12]
 8005d2e:	4311      	orrs	r1, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695a      	ldr	r2, [r3, #20]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	000186a0 	.word	0x000186a0
 8005d90:	001e847f 	.word	0x001e847f
 8005d94:	003d08ff 	.word	0x003d08ff
 8005d98:	431bde83 	.word	0x431bde83
 8005d9c:	10624dd3 	.word	0x10624dd3

08005da0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	607a      	str	r2, [r7, #4]
 8005daa:	461a      	mov	r2, r3
 8005dac:	460b      	mov	r3, r1
 8005dae:	817b      	strh	r3, [r7, #10]
 8005db0:	4613      	mov	r3, r2
 8005db2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005db4:	f7fe faf0 	bl	8004398 <HAL_GetTick>
 8005db8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	f040 80e0 	bne.w	8005f88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	2319      	movs	r3, #25
 8005dce:	2201      	movs	r2, #1
 8005dd0:	4970      	ldr	r1, [pc, #448]	; (8005f94 <HAL_I2C_Master_Transmit+0x1f4>)
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fc58 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005dde:	2302      	movs	r3, #2
 8005de0:	e0d3      	b.n	8005f8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_I2C_Master_Transmit+0x50>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e0cc      	b.n	8005f8a <HAL_I2C_Master_Transmit+0x1ea>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d007      	beq.n	8005e16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0201 	orr.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2221      	movs	r2, #33	; 0x21
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2210      	movs	r2, #16
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	893a      	ldrh	r2, [r7, #8]
 8005e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a50      	ldr	r2, [pc, #320]	; (8005f98 <HAL_I2C_Master_Transmit+0x1f8>)
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e58:	8979      	ldrh	r1, [r7, #10]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fac2 	bl	80063e8 <I2C_MasterRequestWrite>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e08d      	b.n	8005f8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e84:	e066      	b.n	8005f54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	6a39      	ldr	r1, [r7, #32]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fcd2 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00d      	beq.n	8005eb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d107      	bne.n	8005eae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e06b      	b.n	8005f8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d11b      	bne.n	8005f28 <HAL_I2C_Master_Transmit+0x188>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d017      	beq.n	8005f28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	781a      	ldrb	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	6a39      	ldr	r1, [r7, #32]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fcc2 	bl	80068b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00d      	beq.n	8005f54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d107      	bne.n	8005f50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e01a      	b.n	8005f8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d194      	bne.n	8005e86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e000      	b.n	8005f8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
  }
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	00100002 	.word	0x00100002
 8005f98:	ffff0000 	.word	0xffff0000

08005f9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08c      	sub	sp, #48	; 0x30
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	607a      	str	r2, [r7, #4]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	460b      	mov	r3, r1
 8005faa:	817b      	strh	r3, [r7, #10]
 8005fac:	4613      	mov	r3, r2
 8005fae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fb0:	f7fe f9f2 	bl	8004398 <HAL_GetTick>
 8005fb4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	f040 820b 	bne.w	80063da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	2319      	movs	r3, #25
 8005fca:	2201      	movs	r2, #1
 8005fcc:	497c      	ldr	r1, [pc, #496]	; (80061c0 <HAL_I2C_Master_Receive+0x224>)
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fb5a 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e1fe      	b.n	80063dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_I2C_Master_Receive+0x50>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e1f7      	b.n	80063dc <HAL_I2C_Master_Receive+0x440>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d007      	beq.n	8006012 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006020:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2222      	movs	r2, #34	; 0x22
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2210      	movs	r2, #16
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	893a      	ldrh	r2, [r7, #8]
 8006042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4a5c      	ldr	r2, [pc, #368]	; (80061c4 <HAL_I2C_Master_Receive+0x228>)
 8006052:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006054:	8979      	ldrh	r1, [r7, #10]
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fa46 	bl	80064ec <I2C_MasterRequestRead>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e1b8      	b.n	80063dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	2b00      	cmp	r3, #0
 8006070:	d113      	bne.n	800609a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006072:	2300      	movs	r3, #0
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	e18c      	b.n	80063b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d11b      	bne.n	80060da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	61fb      	str	r3, [r7, #28]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	e16c      	b.n	80063b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d11b      	bne.n	800611a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006100:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006102:	2300      	movs	r3, #0
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	e14c      	b.n	80063b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006128:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	617b      	str	r3, [r7, #20]
 800613e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006140:	e138      	b.n	80063b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006146:	2b03      	cmp	r3, #3
 8006148:	f200 80f1 	bhi.w	800632e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	2b01      	cmp	r3, #1
 8006152:	d123      	bne.n	800619c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 fbed 	bl	8006938 <I2C_WaitOnRXNEFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e139      	b.n	80063dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	855a      	strh	r2, [r3, #42]	; 0x2a
 800619a:	e10b      	b.n	80063b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d14e      	bne.n	8006242 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	2200      	movs	r2, #0
 80061ac:	4906      	ldr	r1, [pc, #24]	; (80061c8 <HAL_I2C_Master_Receive+0x22c>)
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fa6a 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e10e      	b.n	80063dc <HAL_I2C_Master_Receive+0x440>
 80061be:	bf00      	nop
 80061c0:	00100002 	.word	0x00100002
 80061c4:	ffff0000 	.word	0xffff0000
 80061c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006240:	e0b8      	b.n	80063b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	2200      	movs	r2, #0
 800624a:	4966      	ldr	r1, [pc, #408]	; (80063e4 <HAL_I2C_Master_Receive+0x448>)
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fa1b 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e0bf      	b.n	80063dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	2200      	movs	r2, #0
 80062a6:	494f      	ldr	r1, [pc, #316]	; (80063e4 <HAL_I2C_Master_Receive+0x448>)
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f9ed 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e091      	b.n	80063dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800632c:	e042      	b.n	80063b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800632e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fb00 	bl	8006938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e04c      	b.n	80063dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	2b04      	cmp	r3, #4
 8006380:	d118      	bne.n	80063b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f47f aec2 	bne.w	8006142 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	e000      	b.n	80063dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063da:	2302      	movs	r3, #2
  }
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3728      	adds	r7, #40	; 0x28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	00010004 	.word	0x00010004

080063e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	460b      	mov	r3, r1
 80063f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d006      	beq.n	8006412 <I2C_MasterRequestWrite+0x2a>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d003      	beq.n	8006412 <I2C_MasterRequestWrite+0x2a>
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006410:	d108      	bne.n	8006424 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	e00b      	b.n	800643c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	2b12      	cmp	r3, #18
 800642a:	d107      	bne.n	800643c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800643a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f91d 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00d      	beq.n	8006470 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006462:	d103      	bne.n	800646c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800646a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e035      	b.n	80064dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006478:	d108      	bne.n	800648c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800647a:	897b      	ldrh	r3, [r7, #10]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006488:	611a      	str	r2, [r3, #16]
 800648a:	e01b      	b.n	80064c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800648c:	897b      	ldrh	r3, [r7, #10]
 800648e:	11db      	asrs	r3, r3, #7
 8006490:	b2db      	uxtb	r3, r3
 8006492:	f003 0306 	and.w	r3, r3, #6
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f063 030f 	orn	r3, r3, #15
 800649c:	b2da      	uxtb	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	490e      	ldr	r1, [pc, #56]	; (80064e4 <I2C_MasterRequestWrite+0xfc>)
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f943 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e010      	b.n	80064dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064ba:	897b      	ldrh	r3, [r7, #10]
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	4907      	ldr	r1, [pc, #28]	; (80064e8 <I2C_MasterRequestWrite+0x100>)
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f933 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	00010008 	.word	0x00010008
 80064e8:	00010002 	.word	0x00010002

080064ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	460b      	mov	r3, r1
 80064fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006510:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b08      	cmp	r3, #8
 8006516:	d006      	beq.n	8006526 <I2C_MasterRequestRead+0x3a>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d003      	beq.n	8006526 <I2C_MasterRequestRead+0x3a>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006524:	d108      	bne.n	8006538 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e00b      	b.n	8006550 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	2b11      	cmp	r3, #17
 800653e:	d107      	bne.n	8006550 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800654e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f893 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00d      	beq.n	8006584 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006576:	d103      	bne.n	8006580 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800657e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e079      	b.n	8006678 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800658c:	d108      	bne.n	80065a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800658e:	897b      	ldrh	r3, [r7, #10]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	e05f      	b.n	8006660 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065a0:	897b      	ldrh	r3, [r7, #10]
 80065a2:	11db      	asrs	r3, r3, #7
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0306 	and.w	r3, r3, #6
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f063 030f 	orn	r3, r3, #15
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4930      	ldr	r1, [pc, #192]	; (8006680 <I2C_MasterRequestRead+0x194>)
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 f8b9 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e054      	b.n	8006678 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065ce:	897b      	ldrh	r3, [r7, #10]
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	4929      	ldr	r1, [pc, #164]	; (8006684 <I2C_MasterRequestRead+0x198>)
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f8a9 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e044      	b.n	8006678 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ee:	2300      	movs	r3, #0
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006612:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 f831 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00d      	beq.n	8006648 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663a:	d103      	bne.n	8006644 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006642:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e017      	b.n	8006678 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006648:	897b      	ldrh	r3, [r7, #10]
 800664a:	11db      	asrs	r3, r3, #7
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 0306 	and.w	r3, r3, #6
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f063 030e 	orn	r3, r3, #14
 8006658:	b2da      	uxtb	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	4907      	ldr	r1, [pc, #28]	; (8006684 <I2C_MasterRequestRead+0x198>)
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f865 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	00010008 	.word	0x00010008
 8006684:	00010002 	.word	0x00010002

08006688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006698:	e025      	b.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d021      	beq.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fd fe79 	bl	8004398 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d116      	bne.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f043 0220 	orr.w	r2, r3, #32
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e023      	b.n	800672e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	0c1b      	lsrs	r3, r3, #16
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10d      	bne.n	800670c <I2C_WaitOnFlagUntilTimeout+0x84>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	43da      	mvns	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4013      	ands	r3, r2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf0c      	ite	eq
 8006702:	2301      	moveq	r3, #1
 8006704:	2300      	movne	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	e00c      	b.n	8006726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	43da      	mvns	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4013      	ands	r3, r2
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf0c      	ite	eq
 800671e:	2301      	moveq	r3, #1
 8006720:	2300      	movne	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	429a      	cmp	r2, r3
 800672a:	d0b6      	beq.n	800669a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006744:	e051      	b.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006754:	d123      	bne.n	800679e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800676e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f043 0204 	orr.w	r2, r3, #4
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e046      	b.n	800682c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d021      	beq.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fd fdf7 	bl	8004398 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d116      	bne.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e020      	b.n	800682c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d10c      	bne.n	800680e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	43da      	mvns	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4013      	ands	r3, r2
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	e00b      	b.n	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	43da      	mvns	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d18d      	bne.n	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006840:	e02d      	b.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f8ce 	bl	80069e4 <I2C_IsAcknowledgeFailed>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e02d      	b.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d021      	beq.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fd fd9d 	bl	8004398 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d116      	bne.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f043 0220 	orr.w	r2, r3, #32
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e007      	b.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d1ca      	bne.n	8006842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c2:	e02d      	b.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f88d 	bl	80069e4 <I2C_IsAcknowledgeFailed>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e02d      	b.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d021      	beq.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068dc:	f7fd fd5c 	bl	8004398 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d116      	bne.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e007      	b.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b04      	cmp	r3, #4
 800692c:	d1ca      	bne.n	80068c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006944:	e042      	b.n	80069cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	2b10      	cmp	r3, #16
 8006952:	d119      	bne.n	8006988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0210 	mvn.w	r2, #16
 800695c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e029      	b.n	80069dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006988:	f7fd fd06 	bl	8004398 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	429a      	cmp	r2, r3
 8006996:	d302      	bcc.n	800699e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d116      	bne.n	80069cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	f043 0220 	orr.w	r2, r3, #32
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e007      	b.n	80069dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d6:	2b40      	cmp	r3, #64	; 0x40
 80069d8:	d1b5      	bne.n	8006946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fa:	d11b      	bne.n	8006a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a20:	f043 0204 	orr.w	r2, r3, #4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d129      	bne.n	8006aac <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2224      	movs	r2, #36	; 0x24
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0201 	bic.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0210 	bic.w	r2, r2, #16
 8006a7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e000      	b.n	8006aae <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006aac:	2302      	movs	r3, #2
  }
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d12a      	bne.n	8006b2a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2224      	movs	r2, #36	; 0x24
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0201 	bic.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006af4:	89fb      	ldrh	r3, [r7, #14]
 8006af6:	f023 030f 	bic.w	r3, r3, #15
 8006afa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	89fb      	ldrh	r3, [r7, #14]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	89fa      	ldrh	r2, [r7, #14]
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f042 0201 	orr.w	r2, r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e000      	b.n	8006b2c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006b2a:	2302      	movs	r3, #2
  }
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e0bf      	b.n	8006cca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fc ff2a 	bl	80039b8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006b7a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6999      	ldr	r1, [r3, #24]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b90:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6899      	ldr	r1, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b4a      	ldr	r3, [pc, #296]	; (8006cd4 <HAL_LTDC_Init+0x19c>)
 8006bac:	400b      	ands	r3, r1
 8006bae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	041b      	lsls	r3, r3, #16
 8006bb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6899      	ldr	r1, [r3, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68d9      	ldr	r1, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	4b3e      	ldr	r3, [pc, #248]	; (8006cd4 <HAL_LTDC_Init+0x19c>)
 8006bda:	400b      	ands	r3, r1
 8006bdc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68d9      	ldr	r1, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1a      	ldr	r2, [r3, #32]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6919      	ldr	r1, [r3, #16]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b33      	ldr	r3, [pc, #204]	; (8006cd4 <HAL_LTDC_Init+0x19c>)
 8006c08:	400b      	ands	r3, r1
 8006c0a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6919      	ldr	r1, [r3, #16]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6959      	ldr	r1, [r3, #20]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4b27      	ldr	r3, [pc, #156]	; (8006cd4 <HAL_LTDC_Init+0x19c>)
 8006c36:	400b      	ands	r3, r1
 8006c38:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	041b      	lsls	r3, r3, #16
 8006c40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6959      	ldr	r1, [r3, #20]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006c68:	041b      	lsls	r3, r3, #16
 8006c6a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0206 	orr.w	r2, r2, #6
 8006ca6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0201 	orr.w	r2, r2, #1
 8006cb6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	f000f800 	.word	0xf000f800

08006cd8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d023      	beq.n	8006d42 <HAL_LTDC_IRQHandler+0x6a>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01e      	beq.n	8006d42 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0204 	bic.w	r2, r2, #4
 8006d12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2204      	movs	r2, #4
 8006d1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d22:	f043 0201 	orr.w	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2204      	movs	r2, #4
 8006d30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f86f 	bl	8006e20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d023      	beq.n	8006d94 <HAL_LTDC_IRQHandler+0xbc>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01e      	beq.n	8006d94 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0202 	bic.w	r2, r2, #2
 8006d64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d74:	f043 0202 	orr.w	r2, r3, #2
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2204      	movs	r2, #4
 8006d82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f846 	bl	8006e20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d01b      	beq.n	8006dd6 <HAL_LTDC_IRQHandler+0xfe>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d016      	beq.n	8006dd6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0201 	bic.w	r2, r2, #1
 8006db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f010 f87d 	bl	8016ed0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01b      	beq.n	8006e18 <HAL_LTDC_IRQHandler+0x140>
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0208 	bic.w	r2, r2, #8
 8006df8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2208      	movs	r2, #8
 8006e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f80e 	bl	8006e34 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006e48:	b5b0      	push	{r4, r5, r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_LTDC_ConfigLayer+0x1a>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e02c      	b.n	8006ebc <HAL_LTDC_ConfigLayer+0x74>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2134      	movs	r1, #52	; 0x34
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	4614      	mov	r4, r2
 8006e86:	461d      	mov	r5, r3
 8006e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f849 	bl	8006f34 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bdb0      	pop	{r4, r5, r7, pc}

08006ec4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_LTDC_ProgramLineEvent+0x18>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e023      	b.n	8006f24 <HAL_LTDC_ProgramLineEvent+0x60>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006efc:	4a0c      	ldr	r2, [pc, #48]	; (8006f30 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	40016800 	.word	0x40016800

08006f34 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b089      	sub	sp, #36	; 0x24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f50:	4413      	add	r3, r2
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	01db      	lsls	r3, r3, #7
 8006f60:	4413      	add	r3, r2
 8006f62:	3384      	adds	r3, #132	; 0x84
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	01d2      	lsls	r2, r2, #7
 8006f70:	440a      	add	r2, r1
 8006f72:	3284      	adds	r2, #132	; 0x84
 8006f74:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006f78:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	0c1b      	lsrs	r3, r3, #16
 8006f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f8a:	4413      	add	r3, r2
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4619      	mov	r1, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	01db      	lsls	r3, r3, #7
 8006f98:	440b      	add	r3, r1
 8006f9a:	3384      	adds	r3, #132	; 0x84
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fb2:	4413      	add	r3, r2
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	01db      	lsls	r3, r3, #7
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3384      	adds	r3, #132	; 0x84
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	6812      	ldr	r2, [r2, #0]
 8006fcc:	4611      	mov	r1, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	01d2      	lsls	r2, r2, #7
 8006fd2:	440a      	add	r2, r1
 8006fd4:	3284      	adds	r2, #132	; 0x84
 8006fd6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006fda:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fea:	4413      	add	r3, r2
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	01db      	lsls	r3, r3, #7
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3384      	adds	r3, #132	; 0x84
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4313      	orrs	r3, r2
 8007002:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	01db      	lsls	r3, r3, #7
 800700e:	4413      	add	r3, r2
 8007010:	3384      	adds	r3, #132	; 0x84
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	4611      	mov	r1, r2
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	01d2      	lsls	r2, r2, #7
 800701e:	440a      	add	r2, r1
 8007020:	3284      	adds	r2, #132	; 0x84
 8007022:	f023 0307 	bic.w	r3, r3, #7
 8007026:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	01db      	lsls	r3, r3, #7
 8007032:	4413      	add	r3, r2
 8007034:	3384      	adds	r3, #132	; 0x84
 8007036:	461a      	mov	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	061b      	lsls	r3, r3, #24
 8007058:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	01db      	lsls	r3, r3, #7
 8007064:	4413      	add	r3, r2
 8007066:	3384      	adds	r3, #132	; 0x84
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	01db      	lsls	r3, r3, #7
 8007074:	4413      	add	r3, r2
 8007076:	3384      	adds	r3, #132	; 0x84
 8007078:	461a      	mov	r2, r3
 800707a:	2300      	movs	r3, #0
 800707c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007084:	461a      	mov	r2, r3
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	431a      	orrs	r2, r3
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	431a      	orrs	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4619      	mov	r1, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	01db      	lsls	r3, r3, #7
 8007098:	440b      	add	r3, r1
 800709a:	3384      	adds	r3, #132	; 0x84
 800709c:	4619      	mov	r1, r3
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	461a      	mov	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	01db      	lsls	r3, r3, #7
 80070ae:	4413      	add	r3, r2
 80070b0:	3384      	adds	r3, #132	; 0x84
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	6812      	ldr	r2, [r2, #0]
 80070b8:	4611      	mov	r1, r2
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	01d2      	lsls	r2, r2, #7
 80070be:	440a      	add	r2, r1
 80070c0:	3284      	adds	r2, #132	; 0x84
 80070c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	01db      	lsls	r3, r3, #7
 80070d2:	4413      	add	r3, r2
 80070d4:	3384      	adds	r3, #132	; 0x84
 80070d6:	461a      	mov	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	01db      	lsls	r3, r3, #7
 80070e8:	4413      	add	r3, r2
 80070ea:	3384      	adds	r3, #132	; 0x84
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	4611      	mov	r1, r2
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	01d2      	lsls	r2, r2, #7
 80070f8:	440a      	add	r2, r1
 80070fa:	3284      	adds	r2, #132	; 0x84
 80070fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007100:	f023 0307 	bic.w	r3, r3, #7
 8007104:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	69da      	ldr	r2, [r3, #28]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	6809      	ldr	r1, [r1, #0]
 8007112:	4608      	mov	r0, r1
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	01c9      	lsls	r1, r1, #7
 8007118:	4401      	add	r1, r0
 800711a:	3184      	adds	r1, #132	; 0x84
 800711c:	4313      	orrs	r3, r2
 800711e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	01db      	lsls	r3, r3, #7
 800712a:	4413      	add	r3, r2
 800712c:	3384      	adds	r3, #132	; 0x84
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	01db      	lsls	r3, r3, #7
 800713a:	4413      	add	r3, r2
 800713c:	3384      	adds	r3, #132	; 0x84
 800713e:	461a      	mov	r2, r3
 8007140:	2300      	movs	r3, #0
 8007142:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	01db      	lsls	r3, r3, #7
 800714e:	4413      	add	r3, r2
 8007150:	3384      	adds	r3, #132	; 0x84
 8007152:	461a      	mov	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d102      	bne.n	8007168 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007162:	2304      	movs	r3, #4
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	e01b      	b.n	80071a0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d102      	bne.n	8007176 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007170:	2303      	movs	r3, #3
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	e014      	b.n	80071a0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b04      	cmp	r3, #4
 800717c:	d00b      	beq.n	8007196 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007182:	2b02      	cmp	r3, #2
 8007184:	d007      	beq.n	8007196 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800718a:	2b03      	cmp	r3, #3
 800718c:	d003      	beq.n	8007196 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007192:	2b07      	cmp	r3, #7
 8007194:	d102      	bne.n	800719c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007196:	2302      	movs	r3, #2
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	e001      	b.n	80071a0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800719c:	2301      	movs	r3, #1
 800719e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	01db      	lsls	r3, r3, #7
 80071aa:	4413      	add	r3, r2
 80071ac:	3384      	adds	r3, #132	; 0x84
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	6812      	ldr	r2, [r2, #0]
 80071b4:	4611      	mov	r1, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	01d2      	lsls	r2, r2, #7
 80071ba:	440a      	add	r2, r1
 80071bc:	3284      	adds	r2, #132	; 0x84
 80071be:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80071c2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	fb02 f303 	mul.w	r3, r2, r3
 80071ce:	041a      	lsls	r2, r3, #16
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6859      	ldr	r1, [r3, #4]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	1acb      	subs	r3, r1, r3
 80071da:	69f9      	ldr	r1, [r7, #28]
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	3303      	adds	r3, #3
 80071e2:	68f9      	ldr	r1, [r7, #12]
 80071e4:	6809      	ldr	r1, [r1, #0]
 80071e6:	4608      	mov	r0, r1
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	01c9      	lsls	r1, r1, #7
 80071ec:	4401      	add	r1, r0
 80071ee:	3184      	adds	r1, #132	; 0x84
 80071f0:	4313      	orrs	r3, r2
 80071f2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	01db      	lsls	r3, r3, #7
 80071fe:	4413      	add	r3, r2
 8007200:	3384      	adds	r3, #132	; 0x84
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	4611      	mov	r1, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	01d2      	lsls	r2, r2, #7
 800720e:	440a      	add	r2, r1
 8007210:	3284      	adds	r2, #132	; 0x84
 8007212:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007216:	f023 0307 	bic.w	r3, r3, #7
 800721a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	01db      	lsls	r3, r3, #7
 8007226:	4413      	add	r3, r2
 8007228:	3384      	adds	r3, #132	; 0x84
 800722a:	461a      	mov	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	01db      	lsls	r3, r3, #7
 800723c:	4413      	add	r3, r2
 800723e:	3384      	adds	r3, #132	; 0x84
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	4611      	mov	r1, r2
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	01d2      	lsls	r2, r2, #7
 800724c:	440a      	add	r2, r1
 800724e:	3284      	adds	r2, #132	; 0x84
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	6013      	str	r3, [r2, #0]
}
 8007256:	bf00      	nop
 8007258:	3724      	adds	r7, #36	; 0x24
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
	...

08007264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e264      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d075      	beq.n	800736e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007282:	4ba3      	ldr	r3, [pc, #652]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b04      	cmp	r3, #4
 800728c:	d00c      	beq.n	80072a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800728e:	4ba0      	ldr	r3, [pc, #640]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007296:	2b08      	cmp	r3, #8
 8007298:	d112      	bne.n	80072c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800729a:	4b9d      	ldr	r3, [pc, #628]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072a6:	d10b      	bne.n	80072c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072a8:	4b99      	ldr	r3, [pc, #612]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d05b      	beq.n	800736c <HAL_RCC_OscConfig+0x108>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d157      	bne.n	800736c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e23f      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c8:	d106      	bne.n	80072d8 <HAL_RCC_OscConfig+0x74>
 80072ca:	4b91      	ldr	r3, [pc, #580]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a90      	ldr	r2, [pc, #576]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e01d      	b.n	8007314 <HAL_RCC_OscConfig+0xb0>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072e0:	d10c      	bne.n	80072fc <HAL_RCC_OscConfig+0x98>
 80072e2:	4b8b      	ldr	r3, [pc, #556]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a8a      	ldr	r2, [pc, #552]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	4b88      	ldr	r3, [pc, #544]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a87      	ldr	r2, [pc, #540]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	e00b      	b.n	8007314 <HAL_RCC_OscConfig+0xb0>
 80072fc:	4b84      	ldr	r3, [pc, #528]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a83      	ldr	r2, [pc, #524]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	4b81      	ldr	r3, [pc, #516]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a80      	ldr	r2, [pc, #512]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 800730e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d013      	beq.n	8007344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800731c:	f7fd f83c 	bl	8004398 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007324:	f7fd f838 	bl	8004398 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	; 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e204      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007336:	4b76      	ldr	r3, [pc, #472]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0f0      	beq.n	8007324 <HAL_RCC_OscConfig+0xc0>
 8007342:	e014      	b.n	800736e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007344:	f7fd f828 	bl	8004398 <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800734c:	f7fd f824 	bl	8004398 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b64      	cmp	r3, #100	; 0x64
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e1f0      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800735e:	4b6c      	ldr	r3, [pc, #432]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f0      	bne.n	800734c <HAL_RCC_OscConfig+0xe8>
 800736a:	e000      	b.n	800736e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800736c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d063      	beq.n	8007442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800737a:	4b65      	ldr	r3, [pc, #404]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f003 030c 	and.w	r3, r3, #12
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00b      	beq.n	800739e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007386:	4b62      	ldr	r3, [pc, #392]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800738e:	2b08      	cmp	r3, #8
 8007390:	d11c      	bne.n	80073cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007392:	4b5f      	ldr	r3, [pc, #380]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d116      	bne.n	80073cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800739e:	4b5c      	ldr	r3, [pc, #368]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d005      	beq.n	80073b6 <HAL_RCC_OscConfig+0x152>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d001      	beq.n	80073b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e1c4      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073b6:	4b56      	ldr	r3, [pc, #344]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4952      	ldr	r1, [pc, #328]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ca:	e03a      	b.n	8007442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d020      	beq.n	8007416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073d4:	4b4f      	ldr	r3, [pc, #316]	; (8007514 <HAL_RCC_OscConfig+0x2b0>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073da:	f7fc ffdd 	bl	8004398 <HAL_GetTick>
 80073de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073e2:	f7fc ffd9 	bl	8004398 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e1a5      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073f4:	4b46      	ldr	r3, [pc, #280]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007400:	4b43      	ldr	r3, [pc, #268]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	4940      	ldr	r1, [pc, #256]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007410:	4313      	orrs	r3, r2
 8007412:	600b      	str	r3, [r1, #0]
 8007414:	e015      	b.n	8007442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007416:	4b3f      	ldr	r3, [pc, #252]	; (8007514 <HAL_RCC_OscConfig+0x2b0>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fc ffbc 	bl	8004398 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007424:	f7fc ffb8 	bl	8004398 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e184      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007436:	4b36      	ldr	r3, [pc, #216]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f0      	bne.n	8007424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d030      	beq.n	80074b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d016      	beq.n	8007484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007456:	4b30      	ldr	r3, [pc, #192]	; (8007518 <HAL_RCC_OscConfig+0x2b4>)
 8007458:	2201      	movs	r2, #1
 800745a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745c:	f7fc ff9c 	bl	8004398 <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007464:	f7fc ff98 	bl	8004398 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e164      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007476:	4b26      	ldr	r3, [pc, #152]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 8007478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0f0      	beq.n	8007464 <HAL_RCC_OscConfig+0x200>
 8007482:	e015      	b.n	80074b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <HAL_RCC_OscConfig+0x2b4>)
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800748a:	f7fc ff85 	bl	8004398 <HAL_GetTick>
 800748e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007492:	f7fc ff81 	bl	8004398 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e14d      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074a4:	4b1a      	ldr	r3, [pc, #104]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f0      	bne.n	8007492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80a0 	beq.w	80075fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074be:	2300      	movs	r3, #0
 80074c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074c2:	4b13      	ldr	r3, [pc, #76]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10f      	bne.n	80074ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ce:	2300      	movs	r3, #0
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	4a0e      	ldr	r2, [pc, #56]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074dc:	6413      	str	r3, [r2, #64]	; 0x40
 80074de:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <HAL_RCC_OscConfig+0x2ac>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e6:	60bb      	str	r3, [r7, #8]
 80074e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074ea:	2301      	movs	r3, #1
 80074ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <HAL_RCC_OscConfig+0x2b8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d121      	bne.n	800753e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074fa:	4b08      	ldr	r3, [pc, #32]	; (800751c <HAL_RCC_OscConfig+0x2b8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a07      	ldr	r2, [pc, #28]	; (800751c <HAL_RCC_OscConfig+0x2b8>)
 8007500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007506:	f7fc ff47 	bl	8004398 <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800750c:	e011      	b.n	8007532 <HAL_RCC_OscConfig+0x2ce>
 800750e:	bf00      	nop
 8007510:	40023800 	.word	0x40023800
 8007514:	42470000 	.word	0x42470000
 8007518:	42470e80 	.word	0x42470e80
 800751c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007520:	f7fc ff3a 	bl	8004398 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e106      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007532:	4b85      	ldr	r3, [pc, #532]	; (8007748 <HAL_RCC_OscConfig+0x4e4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0f0      	beq.n	8007520 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d106      	bne.n	8007554 <HAL_RCC_OscConfig+0x2f0>
 8007546:	4b81      	ldr	r3, [pc, #516]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754a:	4a80      	ldr	r2, [pc, #512]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800754c:	f043 0301 	orr.w	r3, r3, #1
 8007550:	6713      	str	r3, [r2, #112]	; 0x70
 8007552:	e01c      	b.n	800758e <HAL_RCC_OscConfig+0x32a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b05      	cmp	r3, #5
 800755a:	d10c      	bne.n	8007576 <HAL_RCC_OscConfig+0x312>
 800755c:	4b7b      	ldr	r3, [pc, #492]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	4a7a      	ldr	r2, [pc, #488]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007562:	f043 0304 	orr.w	r3, r3, #4
 8007566:	6713      	str	r3, [r2, #112]	; 0x70
 8007568:	4b78      	ldr	r3, [pc, #480]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800756a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756c:	4a77      	ldr	r2, [pc, #476]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	6713      	str	r3, [r2, #112]	; 0x70
 8007574:	e00b      	b.n	800758e <HAL_RCC_OscConfig+0x32a>
 8007576:	4b75      	ldr	r3, [pc, #468]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757a:	4a74      	ldr	r2, [pc, #464]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800757c:	f023 0301 	bic.w	r3, r3, #1
 8007580:	6713      	str	r3, [r2, #112]	; 0x70
 8007582:	4b72      	ldr	r3, [pc, #456]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007586:	4a71      	ldr	r2, [pc, #452]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007588:	f023 0304 	bic.w	r3, r3, #4
 800758c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d015      	beq.n	80075c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007596:	f7fc feff 	bl	8004398 <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759c:	e00a      	b.n	80075b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800759e:	f7fc fefb 	bl	8004398 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e0c5      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b4:	4b65      	ldr	r3, [pc, #404]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80075b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0ee      	beq.n	800759e <HAL_RCC_OscConfig+0x33a>
 80075c0:	e014      	b.n	80075ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075c2:	f7fc fee9 	bl	8004398 <HAL_GetTick>
 80075c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075c8:	e00a      	b.n	80075e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ca:	f7fc fee5 	bl	8004398 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d8:	4293      	cmp	r3, r2
 80075da:	d901      	bls.n	80075e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e0af      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075e0:	4b5a      	ldr	r3, [pc, #360]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80075e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1ee      	bne.n	80075ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d105      	bne.n	80075fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075f2:	4b56      	ldr	r3, [pc, #344]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	4a55      	ldr	r2, [pc, #340]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80075f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 809b 	beq.w	800773e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007608:	4b50      	ldr	r3, [pc, #320]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 030c 	and.w	r3, r3, #12
 8007610:	2b08      	cmp	r3, #8
 8007612:	d05c      	beq.n	80076ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d141      	bne.n	80076a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800761c:	4b4c      	ldr	r3, [pc, #304]	; (8007750 <HAL_RCC_OscConfig+0x4ec>)
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007622:	f7fc feb9 	bl	8004398 <HAL_GetTick>
 8007626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007628:	e008      	b.n	800763c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800762a:	f7fc feb5 	bl	8004398 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e081      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800763c:	4b43      	ldr	r3, [pc, #268]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f0      	bne.n	800762a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69da      	ldr	r2, [r3, #28]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	019b      	lsls	r3, r3, #6
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	085b      	lsrs	r3, r3, #1
 8007660:	3b01      	subs	r3, #1
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	061b      	lsls	r3, r3, #24
 800766c:	4937      	ldr	r1, [pc, #220]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 800766e:	4313      	orrs	r3, r2
 8007670:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007672:	4b37      	ldr	r3, [pc, #220]	; (8007750 <HAL_RCC_OscConfig+0x4ec>)
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007678:	f7fc fe8e 	bl	8004398 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007680:	f7fc fe8a 	bl	8004398 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e056      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007692:	4b2e      	ldr	r3, [pc, #184]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0f0      	beq.n	8007680 <HAL_RCC_OscConfig+0x41c>
 800769e:	e04e      	b.n	800773e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076a0:	4b2b      	ldr	r3, [pc, #172]	; (8007750 <HAL_RCC_OscConfig+0x4ec>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a6:	f7fc fe77 	bl	8004398 <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ac:	e008      	b.n	80076c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076ae:	f7fc fe73 	bl	8004398 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e03f      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076c0:	4b22      	ldr	r3, [pc, #136]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1f0      	bne.n	80076ae <HAL_RCC_OscConfig+0x44a>
 80076cc:	e037      	b.n	800773e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e032      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076da:	4b1c      	ldr	r3, [pc, #112]	; (800774c <HAL_RCC_OscConfig+0x4e8>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d028      	beq.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d121      	bne.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007700:	429a      	cmp	r2, r3
 8007702:	d11a      	bne.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800770a:	4013      	ands	r3, r2
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007710:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007712:	4293      	cmp	r3, r2
 8007714:	d111      	bne.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	3b01      	subs	r3, #1
 8007724:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007726:	429a      	cmp	r2, r3
 8007728:	d107      	bne.n	800773a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007736:	429a      	cmp	r2, r3
 8007738:	d001      	beq.n	800773e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40007000 	.word	0x40007000
 800774c:	40023800 	.word	0x40023800
 8007750:	42470060 	.word	0x42470060

08007754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e0cc      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007768:	4b68      	ldr	r3, [pc, #416]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	429a      	cmp	r2, r3
 8007774:	d90c      	bls.n	8007790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007776:	4b65      	ldr	r3, [pc, #404]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800777e:	4b63      	ldr	r3, [pc, #396]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	429a      	cmp	r2, r3
 800778a:	d001      	beq.n	8007790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e0b8      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d020      	beq.n	80077de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077a8:	4b59      	ldr	r3, [pc, #356]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	4a58      	ldr	r2, [pc, #352]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077c0:	4b53      	ldr	r3, [pc, #332]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	4a52      	ldr	r2, [pc, #328]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077cc:	4b50      	ldr	r3, [pc, #320]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	494d      	ldr	r1, [pc, #308]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d044      	beq.n	8007874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d107      	bne.n	8007802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077f2:	4b47      	ldr	r3, [pc, #284]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d119      	bne.n	8007832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e07f      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d003      	beq.n	8007812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800780e:	2b03      	cmp	r3, #3
 8007810:	d107      	bne.n	8007822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007812:	4b3f      	ldr	r3, [pc, #252]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e06f      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007822:	4b3b      	ldr	r3, [pc, #236]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e067      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007832:	4b37      	ldr	r3, [pc, #220]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f023 0203 	bic.w	r2, r3, #3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	4934      	ldr	r1, [pc, #208]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007840:	4313      	orrs	r3, r2
 8007842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007844:	f7fc fda8 	bl	8004398 <HAL_GetTick>
 8007848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800784a:	e00a      	b.n	8007862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800784c:	f7fc fda4 	bl	8004398 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	f241 3288 	movw	r2, #5000	; 0x1388
 800785a:	4293      	cmp	r3, r2
 800785c:	d901      	bls.n	8007862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e04f      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007862:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 020c 	and.w	r2, r3, #12
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	429a      	cmp	r2, r3
 8007872:	d1eb      	bne.n	800784c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007874:	4b25      	ldr	r3, [pc, #148]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d20c      	bcs.n	800789c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007882:	4b22      	ldr	r3, [pc, #136]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800788a:	4b20      	ldr	r3, [pc, #128]	; (800790c <HAL_RCC_ClockConfig+0x1b8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d001      	beq.n	800789c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e032      	b.n	8007902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078a8:	4b19      	ldr	r3, [pc, #100]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	4916      	ldr	r1, [pc, #88]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078c6:	4b12      	ldr	r3, [pc, #72]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	490e      	ldr	r1, [pc, #56]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078da:	f000 f82d 	bl	8007938 <HAL_RCC_GetSysClockFreq>
 80078de:	4602      	mov	r2, r0
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_RCC_ClockConfig+0x1bc>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	091b      	lsrs	r3, r3, #4
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	490a      	ldr	r1, [pc, #40]	; (8007914 <HAL_RCC_ClockConfig+0x1c0>)
 80078ec:	5ccb      	ldrb	r3, [r1, r3]
 80078ee:	fa22 f303 	lsr.w	r3, r2, r3
 80078f2:	4a09      	ldr	r2, [pc, #36]	; (8007918 <HAL_RCC_ClockConfig+0x1c4>)
 80078f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078f6:	4b09      	ldr	r3, [pc, #36]	; (800791c <HAL_RCC_ClockConfig+0x1c8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fc fb6e 	bl	8003fdc <HAL_InitTick>

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40023c00 	.word	0x40023c00
 8007910:	40023800 	.word	0x40023800
 8007914:	08030148 	.word	0x08030148
 8007918:	20000008 	.word	0x20000008
 800791c:	2000000c 	.word	0x2000000c

08007920 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007920:	b480      	push	{r7}
 8007922:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007924:	4b03      	ldr	r3, [pc, #12]	; (8007934 <HAL_RCC_EnableCSS+0x14>)
 8007926:	2201      	movs	r2, #1
 8007928:	601a      	str	r2, [r3, #0]
}
 800792a:	bf00      	nop
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	4247004c 	.word	0x4247004c

08007938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007938:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007940:	2300      	movs	r3, #0
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	2300      	movs	r3, #0
 800794a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007950:	4b67      	ldr	r3, [pc, #412]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 030c 	and.w	r3, r3, #12
 8007958:	2b08      	cmp	r3, #8
 800795a:	d00d      	beq.n	8007978 <HAL_RCC_GetSysClockFreq+0x40>
 800795c:	2b08      	cmp	r3, #8
 800795e:	f200 80bd 	bhi.w	8007adc <HAL_RCC_GetSysClockFreq+0x1a4>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <HAL_RCC_GetSysClockFreq+0x34>
 8007966:	2b04      	cmp	r3, #4
 8007968:	d003      	beq.n	8007972 <HAL_RCC_GetSysClockFreq+0x3a>
 800796a:	e0b7      	b.n	8007adc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800796c:	4b61      	ldr	r3, [pc, #388]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800796e:	60bb      	str	r3, [r7, #8]
       break;
 8007970:	e0b7      	b.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007972:	4b61      	ldr	r3, [pc, #388]	; (8007af8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007974:	60bb      	str	r3, [r7, #8]
      break;
 8007976:	e0b4      	b.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007978:	4b5d      	ldr	r3, [pc, #372]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007980:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007982:	4b5b      	ldr	r3, [pc, #364]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d04d      	beq.n	8007a2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800798e:	4b58      	ldr	r3, [pc, #352]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	099b      	lsrs	r3, r3, #6
 8007994:	461a      	mov	r2, r3
 8007996:	f04f 0300 	mov.w	r3, #0
 800799a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800799e:	f04f 0100 	mov.w	r1, #0
 80079a2:	ea02 0800 	and.w	r8, r2, r0
 80079a6:	ea03 0901 	and.w	r9, r3, r1
 80079aa:	4640      	mov	r0, r8
 80079ac:	4649      	mov	r1, r9
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	014b      	lsls	r3, r1, #5
 80079b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80079bc:	0142      	lsls	r2, r0, #5
 80079be:	4610      	mov	r0, r2
 80079c0:	4619      	mov	r1, r3
 80079c2:	ebb0 0008 	subs.w	r0, r0, r8
 80079c6:	eb61 0109 	sbc.w	r1, r1, r9
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	f04f 0300 	mov.w	r3, #0
 80079d2:	018b      	lsls	r3, r1, #6
 80079d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80079d8:	0182      	lsls	r2, r0, #6
 80079da:	1a12      	subs	r2, r2, r0
 80079dc:	eb63 0301 	sbc.w	r3, r3, r1
 80079e0:	f04f 0000 	mov.w	r0, #0
 80079e4:	f04f 0100 	mov.w	r1, #0
 80079e8:	00d9      	lsls	r1, r3, #3
 80079ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079ee:	00d0      	lsls	r0, r2, #3
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	eb12 0208 	adds.w	r2, r2, r8
 80079f8:	eb43 0309 	adc.w	r3, r3, r9
 80079fc:	f04f 0000 	mov.w	r0, #0
 8007a00:	f04f 0100 	mov.w	r1, #0
 8007a04:	0259      	lsls	r1, r3, #9
 8007a06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007a0a:	0250      	lsls	r0, r2, #9
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4610      	mov	r0, r2
 8007a12:	4619      	mov	r1, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	f7f9 f82e 	bl	8000a7c <__aeabi_uldivmod>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4613      	mov	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e04a      	b.n	8007ac0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a2a:	4b31      	ldr	r3, [pc, #196]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	099b      	lsrs	r3, r3, #6
 8007a30:	461a      	mov	r2, r3
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a3a:	f04f 0100 	mov.w	r1, #0
 8007a3e:	ea02 0400 	and.w	r4, r2, r0
 8007a42:	ea03 0501 	and.w	r5, r3, r1
 8007a46:	4620      	mov	r0, r4
 8007a48:	4629      	mov	r1, r5
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	014b      	lsls	r3, r1, #5
 8007a54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a58:	0142      	lsls	r2, r0, #5
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	1b00      	subs	r0, r0, r4
 8007a60:	eb61 0105 	sbc.w	r1, r1, r5
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	018b      	lsls	r3, r1, #6
 8007a6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a72:	0182      	lsls	r2, r0, #6
 8007a74:	1a12      	subs	r2, r2, r0
 8007a76:	eb63 0301 	sbc.w	r3, r3, r1
 8007a7a:	f04f 0000 	mov.w	r0, #0
 8007a7e:	f04f 0100 	mov.w	r1, #0
 8007a82:	00d9      	lsls	r1, r3, #3
 8007a84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a88:	00d0      	lsls	r0, r2, #3
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	1912      	adds	r2, r2, r4
 8007a90:	eb45 0303 	adc.w	r3, r5, r3
 8007a94:	f04f 0000 	mov.w	r0, #0
 8007a98:	f04f 0100 	mov.w	r1, #0
 8007a9c:	0299      	lsls	r1, r3, #10
 8007a9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007aa2:	0290      	lsls	r0, r2, #10
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f04f 0300 	mov.w	r3, #0
 8007ab4:	f7f8 ffe2 	bl	8000a7c <__aeabi_uldivmod>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4613      	mov	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ac0:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	3301      	adds	r3, #1
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad8:	60bb      	str	r3, [r7, #8]
      break;
 8007ada:	e002      	b.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007adc:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007ade:	60bb      	str	r3, [r7, #8]
      break;
 8007ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007aee:	bf00      	nop
 8007af0:	40023800 	.word	0x40023800
 8007af4:	00f42400 	.word	0x00f42400
 8007af8:	007a1200 	.word	0x007a1200

08007afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b00:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b02:	681b      	ldr	r3, [r3, #0]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20000008 	.word	0x20000008

08007b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b18:	f7ff fff0 	bl	8007afc <HAL_RCC_GetHCLKFreq>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	0a9b      	lsrs	r3, r3, #10
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	4903      	ldr	r1, [pc, #12]	; (8007b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b2a:	5ccb      	ldrb	r3, [r1, r3]
 8007b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	40023800 	.word	0x40023800
 8007b38:	08030158 	.word	0x08030158

08007b3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	220f      	movs	r2, #15
 8007b4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b4c:	4b12      	ldr	r3, [pc, #72]	; (8007b98 <HAL_RCC_GetClockConfig+0x5c>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f003 0203 	and.w	r2, r3, #3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b58:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <HAL_RCC_GetClockConfig+0x5c>)
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <HAL_RCC_GetClockConfig+0x5c>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007b70:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <HAL_RCC_GetClockConfig+0x5c>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	08db      	lsrs	r3, r3, #3
 8007b76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <HAL_RCC_GetClockConfig+0x60>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 020f 	and.w	r2, r3, #15
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	601a      	str	r2, [r3, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	40023c00 	.word	0x40023c00

08007ba0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bac:	2b80      	cmp	r3, #128	; 0x80
 8007bae:	d104      	bne.n	8007bba <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007bb0:	f000 f80a 	bl	8007bc8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007bb4:	4b03      	ldr	r3, [pc, #12]	; (8007bc4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007bb6:	2280      	movs	r2, #128	; 0x80
 8007bb8:	701a      	strb	r2, [r3, #0]
  }
}
 8007bba:	bf00      	nop
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	40023800 	.word	0x40023800
 8007bc4:	4002380e 	.word	0x4002380e

08007bc8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d105      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d075      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c0c:	4bad      	ldr	r3, [pc, #692]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c12:	f7fc fbc1 	bl	8004398 <HAL_GetTick>
 8007c16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c18:	e008      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c1a:	f7fc fbbd 	bl	8004398 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e18b      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c2c:	4ba6      	ldr	r3, [pc, #664]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1f0      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d009      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	019a      	lsls	r2, r3, #6
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	071b      	lsls	r3, r3, #28
 8007c50:	499d      	ldr	r1, [pc, #628]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01f      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c64:	4b98      	ldr	r3, [pc, #608]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c6a:	0f1b      	lsrs	r3, r3, #28
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	019a      	lsls	r2, r3, #6
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	061b      	lsls	r3, r3, #24
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	071b      	lsls	r3, r3, #28
 8007c84:	4990      	ldr	r1, [pc, #576]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c8c:	4b8e      	ldr	r3, [pc, #568]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c92:	f023 021f 	bic.w	r2, r3, #31
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	498a      	ldr	r1, [pc, #552]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00d      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	019a      	lsls	r2, r3, #6
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	061b      	lsls	r3, r3, #24
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	071b      	lsls	r3, r3, #28
 8007cc4:	4980      	ldr	r1, [pc, #512]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ccc:	4b7d      	ldr	r3, [pc, #500]	; (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007cce:	2201      	movs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cd2:	f7fc fb61 	bl	8004398 <HAL_GetTick>
 8007cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cd8:	e008      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007cda:	f7fc fb5d 	bl	8004398 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d901      	bls.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e12b      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cec:	4b76      	ldr	r3, [pc, #472]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d0f0      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d105      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d079      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007d10:	4b6e      	ldr	r3, [pc, #440]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d16:	f7fc fb3f 	bl	8004398 <HAL_GetTick>
 8007d1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d1c:	e008      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007d1e:	f7fc fb3b 	bl	8004398 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d901      	bls.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e109      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d30:	4b65      	ldr	r3, [pc, #404]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d3c:	d0ef      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d020      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d4a:	4b5f      	ldr	r3, [pc, #380]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d50:	0f1b      	lsrs	r3, r3, #28
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	019a      	lsls	r2, r3, #6
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	061b      	lsls	r3, r3, #24
 8007d64:	431a      	orrs	r2, r3
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	071b      	lsls	r3, r3, #28
 8007d6a:	4957      	ldr	r1, [pc, #348]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d72:	4b55      	ldr	r3, [pc, #340]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	021b      	lsls	r3, r3, #8
 8007d84:	4950      	ldr	r1, [pc, #320]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01e      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d98:	4b4b      	ldr	r3, [pc, #300]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9e:	0e1b      	lsrs	r3, r3, #24
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	019a      	lsls	r2, r3, #6
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	061b      	lsls	r3, r3, #24
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	071b      	lsls	r3, r3, #28
 8007db8:	4943      	ldr	r1, [pc, #268]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007dc0:	4b41      	ldr	r3, [pc, #260]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	493e      	ldr	r1, [pc, #248]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007dd6:	4b3d      	ldr	r3, [pc, #244]	; (8007ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ddc:	f7fc fadc 	bl	8004398 <HAL_GetTick>
 8007de0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007de2:	e008      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007de4:	f7fc fad8 	bl	8004398 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e0a6      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007df6:	4b34      	ldr	r3, [pc, #208]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e02:	d1ef      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 808d 	beq.w	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	4b2c      	ldr	r3, [pc, #176]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	4a2b      	ldr	r2, [pc, #172]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e20:	6413      	str	r3, [r2, #64]	; 0x40
 8007e22:	4b29      	ldr	r3, [pc, #164]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007e2e:	4b28      	ldr	r3, [pc, #160]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a27      	ldr	r2, [pc, #156]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e3a:	f7fc faad 	bl	8004398 <HAL_GetTick>
 8007e3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e40:	e008      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e42:	f7fc faa9 	bl	8004398 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d901      	bls.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e077      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e54:	4b1e      	ldr	r3, [pc, #120]	; (8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0f0      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e60:	4b19      	ldr	r3, [pc, #100]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d039      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d032      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e88:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e8e:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007e94:	4a0c      	ldr	r2, [pc, #48]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d11e      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ea6:	f7fc fa77 	bl	8004398 <HAL_GetTick>
 8007eaa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eac:	e014      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eae:	f7fc fa73 	bl	8004398 <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d90b      	bls.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e03f      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007ec4:	42470068 	.word	0x42470068
 8007ec8:	40023800 	.word	0x40023800
 8007ecc:	42470070 	.word	0x42470070
 8007ed0:	40007000 	.word	0x40007000
 8007ed4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ed8:	4b1c      	ldr	r3, [pc, #112]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d0e4      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ef0:	d10d      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007ef2:	4b16      	ldr	r3, [pc, #88]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f06:	4911      	ldr	r1, [pc, #68]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	608b      	str	r3, [r1, #8]
 8007f0c:	e005      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007f0e:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	4a0e      	ldr	r2, [pc, #56]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007f18:	6093      	str	r3, [r2, #8]
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f26:	4909      	ldr	r1, [pc, #36]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007f3e:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007f40:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	40023800 	.word	0x40023800
 8007f50:	424711e0 	.word	0x424711e0

08007f54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e022      	b.n	8007fac <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7fb fe0b 	bl	8003b94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2203      	movs	r2, #3
 8007f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f814 	bl	8007fb4 <HAL_SD_InitCard>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e00a      	b.n	8007fac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007fb4:	b5b0      	push	{r4, r5, r7, lr}
 8007fb6:	b08e      	sub	sp, #56	; 0x38
 8007fb8:	af04      	add	r7, sp, #16
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007fd0:	2376      	movs	r3, #118	; 0x76
 8007fd2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681d      	ldr	r5, [r3, #0]
 8007fd8:	466c      	mov	r4, sp
 8007fda:	f107 0314 	add.w	r3, r7, #20
 8007fde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fe6:	f107 0308 	add.w	r3, r7, #8
 8007fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fec:	4628      	mov	r0, r5
 8007fee:	f002 fd27 	bl	800aa40 <SDIO_Init>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e04c      	b.n	800809e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008004:	4b28      	ldr	r3, [pc, #160]	; (80080a8 <HAL_SD_InitCard+0xf4>)
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f002 fd4e 	bl	800aab0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008014:	4b24      	ldr	r3, [pc, #144]	; (80080a8 <HAL_SD_InitCard+0xf4>)
 8008016:	2201      	movs	r2, #1
 8008018:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fe10 	bl	8008c40 <SD_PowerON>
 8008020:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	431a      	orrs	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e02e      	b.n	800809e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fd31 	bl	8008aa8 <SD_InitCard>
 8008046:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00b      	beq.n	8008066 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e01b      	b.n	800809e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800806e:	4618      	mov	r0, r3
 8008070:	f002 fdb1 	bl	800abd6 <SDMMC_CmdBlockLength>
 8008074:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00f      	beq.n	800809c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <HAL_SD_InitCard+0xf8>)
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3728      	adds	r7, #40	; 0x28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bdb0      	pop	{r4, r5, r7, pc}
 80080a6:	bf00      	nop
 80080a8:	422580a0 	.word	0x422580a0
 80080ac:	004005ff 	.word	0x004005ff

080080b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08c      	sub	sp, #48	; 0x30
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
 80080bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d107      	bne.n	80080d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e0c0      	b.n	800825a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	f040 80b9 	bne.w	8008258 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80080ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	441a      	add	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d907      	bls.n	800810a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e0a7      	b.n	800825a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2203      	movs	r2, #3
 800810e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2200      	movs	r2, #0
 8008118:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8008128:	f043 0302 	orr.w	r3, r3, #2
 800812c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	4a4c      	ldr	r2, [pc, #304]	; (8008264 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	4a4b      	ldr	r2, [pc, #300]	; (8008268 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800813c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	2200      	movs	r2, #0
 8008144:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	2200      	movs	r2, #0
 800814c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3380      	adds	r3, #128	; 0x80
 8008174:	4619      	mov	r1, r3
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	025b      	lsls	r3, r3, #9
 800817c:	089b      	lsrs	r3, r3, #2
 800817e:	f7fc fe19 	bl	8004db4 <HAL_DMA_Start_IT>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d017      	beq.n	80081b8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008196:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a33      	ldr	r2, [pc, #204]	; (800826c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800819e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e050      	b.n	800825a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80081b8:	4b2d      	ldr	r3, [pc, #180]	; (8008270 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d002      	beq.n	80081cc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	025b      	lsls	r3, r3, #9
 80081ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081cc:	f04f 33ff 	mov.w	r3, #4294967295
 80081d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	025b      	lsls	r3, r3, #9
 80081d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80081d8:	2390      	movs	r3, #144	; 0x90
 80081da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80081dc:	2302      	movs	r3, #2
 80081de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f107 0210 	add.w	r2, r7, #16
 80081f0:	4611      	mov	r1, r2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f002 fcc3 	bl	800ab7e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d90a      	bls.n	8008214 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2282      	movs	r2, #130	; 0x82
 8008202:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800820a:	4618      	mov	r0, r3
 800820c:	f002 fd27 	bl	800ac5e <SDMMC_CmdReadMultiBlock>
 8008210:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008212:	e009      	b.n	8008228 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2281      	movs	r2, #129	; 0x81
 8008218:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008220:	4618      	mov	r0, r3
 8008222:	f002 fcfa 	bl	800ac1a <SDMMC_CmdReadSingleBlock>
 8008226:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d012      	beq.n	8008254 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a0e      	ldr	r2, [pc, #56]	; (800826c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008234:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823c:	431a      	orrs	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e002      	b.n	800825a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	e000      	b.n	800825a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8008258:	2302      	movs	r3, #2
  }
}
 800825a:	4618      	mov	r0, r3
 800825c:	3730      	adds	r7, #48	; 0x30
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	08008993 	.word	0x08008993
 8008268:	08008a05 	.word	0x08008a05
 800826c:	004005ff 	.word	0x004005ff
 8008270:	4225858c 	.word	0x4225858c

08008274 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08c      	sub	sp, #48	; 0x30
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d107      	bne.n	800829c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e0c5      	b.n	8008428 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	f040 80be 	bne.w	8008426 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d907      	bls.n	80082ce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e0ac      	b.n	8008428 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2203      	movs	r2, #3
 80082d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2200      	movs	r2, #0
 80082dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	6812      	ldr	r2, [r2, #0]
 80082e8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80082ec:	f043 0302 	orr.w	r3, r3, #2
 80082f0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f6:	4a4e      	ldr	r2, [pc, #312]	; (8008430 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80082f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fe:	4a4d      	ldr	r2, [pc, #308]	; (8008434 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008300:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008306:	2200      	movs	r2, #0
 8008308:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830e:	2b01      	cmp	r3, #1
 8008310:	d002      	beq.n	8008318 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	025b      	lsls	r3, r3, #9
 8008316:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d90a      	bls.n	8008334 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	22a0      	movs	r2, #160	; 0xa0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800832a:	4618      	mov	r0, r3
 800832c:	f002 fcdb 	bl	800ace6 <SDMMC_CmdWriteMultiBlock>
 8008330:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008332:	e009      	b.n	8008348 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2290      	movs	r2, #144	; 0x90
 8008338:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008340:	4618      	mov	r0, r3
 8008342:	f002 fcae 	bl	800aca2 <SDMMC_CmdWriteSingleBlock>
 8008346:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d012      	beq.n	8008374 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a39      	ldr	r2, [pc, #228]	; (8008438 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008354:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	431a      	orrs	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e059      	b.n	8008428 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008374:	4b31      	ldr	r3, [pc, #196]	; (800843c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008376:	2201      	movs	r2, #1
 8008378:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837e:	2240      	movs	r2, #64	; 0x40
 8008380:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80083a2:	68b9      	ldr	r1, [r7, #8]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3380      	adds	r3, #128	; 0x80
 80083aa:	461a      	mov	r2, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	025b      	lsls	r3, r3, #9
 80083b0:	089b      	lsrs	r3, r3, #2
 80083b2:	f7fc fcff 	bl	8004db4 <HAL_DMA_Start_IT>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d01c      	beq.n	80083f6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	6812      	ldr	r2, [r2, #0]
 80083c6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80083ca:	f023 0302 	bic.w	r3, r3, #2
 80083ce:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a18      	ldr	r2, [pc, #96]	; (8008438 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e018      	b.n	8008428 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083f6:	f04f 33ff 	mov.w	r3, #4294967295
 80083fa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	025b      	lsls	r3, r3, #9
 8008400:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008402:	2390      	movs	r3, #144	; 0x90
 8008404:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008406:	2300      	movs	r3, #0
 8008408:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800840a:	2300      	movs	r3, #0
 800840c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800840e:	2301      	movs	r3, #1
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f107 0210 	add.w	r2, r7, #16
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f002 fbae 	bl	800ab7e <SDIO_ConfigData>

      return HAL_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	e000      	b.n	8008428 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8008426:	2302      	movs	r3, #2
  }
}
 8008428:	4618      	mov	r0, r3
 800842a:	3730      	adds	r7, #48	; 0x30
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	08008969 	.word	0x08008969
 8008434:	08008a05 	.word	0x08008a05
 8008438:	004005ff 	.word	0x004005ff
 800843c:	4225858c 	.word	0x4225858c

08008440 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008462:	0f9b      	lsrs	r3, r3, #30
 8008464:	b2da      	uxtb	r2, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800846e:	0e9b      	lsrs	r3, r3, #26
 8008470:	b2db      	uxtb	r3, r3
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	b2da      	uxtb	r2, r3
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008480:	0e1b      	lsrs	r3, r3, #24
 8008482:	b2db      	uxtb	r3, r3
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	b2da      	uxtb	r2, r3
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008492:	0c1b      	lsrs	r3, r3, #16
 8008494:	b2da      	uxtb	r2, r3
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b4:	0d1b      	lsrs	r3, r3, #20
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084c0:	0c1b      	lsrs	r3, r3, #16
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 030f 	and.w	r3, r3, #15
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084d2:	0bdb      	lsrs	r3, r3, #15
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	f003 0301 	and.w	r3, r3, #1
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e4:	0b9b      	lsrs	r3, r3, #14
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084f6:	0b5b      	lsrs	r3, r3, #13
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008508:	0b1b      	lsrs	r3, r3, #12
 800850a:	b2db      	uxtb	r3, r3
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	b2da      	uxtb	r2, r3
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2200      	movs	r2, #0
 800851a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008520:	2b00      	cmp	r3, #0
 8008522:	d163      	bne.n	80085ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008528:	009a      	lsls	r2, r3, #2
 800852a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800852e:	4013      	ands	r3, r2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008534:	0f92      	lsrs	r2, r2, #30
 8008536:	431a      	orrs	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008540:	0edb      	lsrs	r3, r3, #27
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	b2da      	uxtb	r2, r3
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008552:	0e1b      	lsrs	r3, r3, #24
 8008554:	b2db      	uxtb	r3, r3
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	b2da      	uxtb	r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008564:	0d5b      	lsrs	r3, r3, #21
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	b2da      	uxtb	r2, r3
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008576:	0c9b      	lsrs	r3, r3, #18
 8008578:	b2db      	uxtb	r3, r3
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	b2da      	uxtb	r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008588:	0bdb      	lsrs	r3, r3, #15
 800858a:	b2db      	uxtb	r3, r3
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	b2da      	uxtb	r2, r3
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	7e1b      	ldrb	r3, [r3, #24]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	3302      	adds	r3, #2
 80085ac:	2201      	movs	r2, #1
 80085ae:	fa02 f303 	lsl.w	r3, r2, r3
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80085b6:	fb02 f203 	mul.w	r2, r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	7a1b      	ldrb	r3, [r3, #8]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 030f 	and.w	r3, r3, #15
 80085c8:	2201      	movs	r2, #1
 80085ca:	409a      	lsls	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80085d8:	0a52      	lsrs	r2, r2, #9
 80085da:	fb02 f203 	mul.w	r2, r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e8:	661a      	str	r2, [r3, #96]	; 0x60
 80085ea:	e031      	b.n	8008650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d11d      	bne.n	8008630 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085f8:	041b      	lsls	r3, r3, #16
 80085fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008602:	0c1b      	lsrs	r3, r3, #16
 8008604:	431a      	orrs	r2, r3
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	3301      	adds	r3, #1
 8008610:	029a      	lsls	r2, r3, #10
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008624:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	661a      	str	r2, [r3, #96]	; 0x60
 800862e:	e00f      	b.n	8008650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a58      	ldr	r2, [pc, #352]	; (8008798 <HAL_SD_GetCardCSD+0x344>)
 8008636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e09d      	b.n	800878c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008654:	0b9b      	lsrs	r3, r3, #14
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	b2da      	uxtb	r2, r3
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008666:	09db      	lsrs	r3, r3, #7
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866e:	b2da      	uxtb	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867e:	b2da      	uxtb	r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008688:	0fdb      	lsrs	r3, r3, #31
 800868a:	b2da      	uxtb	r2, r3
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008694:	0f5b      	lsrs	r3, r3, #29
 8008696:	b2db      	uxtb	r3, r3
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	b2da      	uxtb	r2, r3
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a6:	0e9b      	lsrs	r3, r3, #26
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b8:	0d9b      	lsrs	r3, r3, #22
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ca:	0d5b      	lsrs	r3, r3, #21
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fa:	0bdb      	lsrs	r3, r3, #15
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870e:	0b9b      	lsrs	r3, r3, #14
 8008710:	b2db      	uxtb	r3, r3
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	b2da      	uxtb	r2, r3
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008722:	0b5b      	lsrs	r3, r3, #13
 8008724:	b2db      	uxtb	r3, r3
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008736:	0b1b      	lsrs	r3, r3, #12
 8008738:	b2db      	uxtb	r3, r3
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	b2da      	uxtb	r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874a:	0a9b      	lsrs	r3, r3, #10
 800874c:	b2db      	uxtb	r3, r3
 800874e:	f003 0303 	and.w	r3, r3, #3
 8008752:	b2da      	uxtb	r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875e:	0a1b      	lsrs	r3, r3, #8
 8008760:	b2db      	uxtb	r3, r3
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	b2da      	uxtb	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008772:	085b      	lsrs	r3, r3, #1
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877a:	b2da      	uxtb	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	004005ff 	.word	0x004005ff

0800879c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80087f4:	b5b0      	push	{r4, r5, r7, lr}
 80087f6:	b08e      	sub	sp, #56	; 0x38
 80087f8:	af04      	add	r7, sp, #16
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2203      	movs	r2, #3
 8008808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008810:	2b03      	cmp	r3, #3
 8008812:	d02e      	beq.n	8008872 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800881a:	d106      	bne.n	800882a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008820:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	639a      	str	r2, [r3, #56]	; 0x38
 8008828:	e029      	b.n	800887e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008830:	d10a      	bne.n	8008848 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 faba 	bl	8008dac <SD_WideBus_Enable>
 8008838:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	639a      	str	r2, [r3, #56]	; 0x38
 8008846:	e01a      	b.n	800887e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10a      	bne.n	8008864 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 faf7 	bl	8008e42 <SD_WideBus_Disable>
 8008854:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	639a      	str	r2, [r3, #56]	; 0x38
 8008862:	e00c      	b.n	800887e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008868:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	639a      	str	r2, [r3, #56]	; 0x38
 8008870:	e005      	b.n	800887e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a26      	ldr	r2, [pc, #152]	; (8008924 <HAL_SD_ConfigWideBusOperation+0x130>)
 800888c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800889c:	e01f      	b.n	80088de <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681d      	ldr	r5, [r3, #0]
 80088c4:	466c      	mov	r4, sp
 80088c6:	f107 0314 	add.w	r3, r7, #20
 80088ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80088d2:	f107 0308 	add.w	r3, r7, #8
 80088d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088d8:	4628      	mov	r0, r5
 80088da:	f002 f8b1 	bl	800aa40 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088e6:	4618      	mov	r0, r3
 80088e8:	f002 f975 	bl	800abd6 <SDMMC_CmdBlockLength>
 80088ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00c      	beq.n	800890e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a0a      	ldr	r2, [pc, #40]	; (8008924 <HAL_SD_ConfigWideBusOperation+0x130>)
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	431a      	orrs	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800891a:	4618      	mov	r0, r3
 800891c:	3728      	adds	r7, #40	; 0x28
 800891e:	46bd      	mov	sp, r7
 8008920:	bdb0      	pop	{r4, r5, r7, pc}
 8008922:	bf00      	nop
 8008924:	004005ff 	.word	0x004005ff

08008928 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008934:	f107 030c 	add.w	r3, r7, #12
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa0e 	bl	8008d5c <SD_SendStatus>
 8008940:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	431a      	orrs	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	0a5b      	lsrs	r3, r3, #9
 8008958:	f003 030f 	and.w	r3, r3, #15
 800895c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800895e:	693b      	ldr	r3, [r7, #16]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008984:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	2b82      	cmp	r3, #130	; 0x82
 80089a6:	d111      	bne.n	80089cc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f002 f9bd 	bl	800ad2c <SDMMC_CmdStopTransfer>
 80089b2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d008      	beq.n	80089cc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	431a      	orrs	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f7ff fd3a 	bl	8008440 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0208 	bic.w	r2, r2, #8
 80089da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f002 fe11 	bl	800b61c <HAL_SD_RxCpltCallback>
#endif
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7fc fbb0 	bl	8005178 <HAL_DMA_GetError>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d03e      	beq.n	8008a9c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a24:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d002      	beq.n	8008a3a <SD_DMAError+0x36>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d12d      	bne.n	8008a96 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a19      	ldr	r2, [pc, #100]	; (8008aa4 <SD_DMAError+0xa0>)
 8008a40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008a50:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008a5e:	6978      	ldr	r0, [r7, #20]
 8008a60:	f7ff ff62 	bl	8008928 <HAL_SD_GetCardState>
 8008a64:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b06      	cmp	r3, #6
 8008a6a:	d002      	beq.n	8008a72 <SD_DMAError+0x6e>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b05      	cmp	r3, #5
 8008a70:	d10a      	bne.n	8008a88 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f002 f958 	bl	800ad2c <SDMMC_CmdStopTransfer>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	431a      	orrs	r2, r3
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2200      	movs	r2, #0
 8008a94:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008a96:	6978      	ldr	r0, [r7, #20]
 8008a98:	f7ff fcd2 	bl	8008440 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008a9c:	bf00      	nop
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	004005ff 	.word	0x004005ff

08008aa8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008aa8:	b5b0      	push	{r4, r5, r7, lr}
 8008aaa:	b094      	sub	sp, #80	; 0x50
 8008aac:	af04      	add	r7, sp, #16
 8008aae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f002 f808 	bl	800aace <SDIO_GetPowerState>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ac4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ac8:	e0b6      	b.n	8008c38 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d02f      	beq.n	8008b32 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f002 fa32 	bl	800af40 <SDMMC_CmdSendCID>
 8008adc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <SD_InitCard+0x40>
    {
      return errorstate;
 8008ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae6:	e0a7      	b.n	8008c38 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2100      	movs	r1, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f002 f832 	bl	800ab58 <SDIO_GetResponse>
 8008af4:	4602      	mov	r2, r0
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2104      	movs	r1, #4
 8008b00:	4618      	mov	r0, r3
 8008b02:	f002 f829 	bl	800ab58 <SDIO_GetResponse>
 8008b06:	4602      	mov	r2, r0
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2108      	movs	r1, #8
 8008b12:	4618      	mov	r0, r3
 8008b14:	f002 f820 	bl	800ab58 <SDIO_GetResponse>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	210c      	movs	r1, #12
 8008b24:	4618      	mov	r0, r3
 8008b26:	f002 f817 	bl	800ab58 <SDIO_GetResponse>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d00d      	beq.n	8008b56 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f107 020e 	add.w	r2, r7, #14
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f002 fa38 	bl	800afba <SDMMC_CmdSetRelAdd>
 8008b4a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <SD_InitCard+0xae>
    {
      return errorstate;
 8008b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b54:	e070      	b.n	8008c38 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d036      	beq.n	8008bcc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008b5e:	89fb      	ldrh	r3, [r7, #14]
 8008b60:	461a      	mov	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6e:	041b      	lsls	r3, r3, #16
 8008b70:	4619      	mov	r1, r3
 8008b72:	4610      	mov	r0, r2
 8008b74:	f002 fa02 	bl	800af7c <SDMMC_CmdSendCSD>
 8008b78:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b82:	e059      	b.n	8008c38 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2100      	movs	r1, #0
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f001 ffe4 	bl	800ab58 <SDIO_GetResponse>
 8008b90:	4602      	mov	r2, r0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2104      	movs	r1, #4
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f001 ffdb 	bl	800ab58 <SDIO_GetResponse>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2108      	movs	r1, #8
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 ffd2 	bl	800ab58 <SDIO_GetResponse>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	210c      	movs	r1, #12
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f001 ffc9 	bl	800ab58 <SDIO_GetResponse>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2104      	movs	r1, #4
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 ffc0 	bl	800ab58 <SDIO_GetResponse>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	0d1a      	lsrs	r2, r3, #20
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008be0:	f107 0310 	add.w	r3, r7, #16
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff fc34 	bl	8008454 <HAL_SD_GetCardCSD>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bf6:	e01f      	b.n	8008c38 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6819      	ldr	r1, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c00:	041b      	lsls	r3, r3, #16
 8008c02:	461a      	mov	r2, r3
 8008c04:	f04f 0300 	mov.w	r3, #0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	f002 f8b1 	bl	800ad70 <SDMMC_CmdSelDesel>
 8008c0e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <SD_InitCard+0x172>
  {
    return errorstate;
 8008c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c18:	e00e      	b.n	8008c38 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681d      	ldr	r5, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	466c      	mov	r4, sp
 8008c22:	f103 0210 	add.w	r2, r3, #16
 8008c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c30:	4628      	mov	r0, r5
 8008c32:	f001 ff05 	bl	800aa40 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3740      	adds	r7, #64	; 0x40
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bdb0      	pop	{r4, r5, r7, pc}

08008c40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	2300      	movs	r3, #0
 8008c52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f002 f8ac 	bl	800adb6 <SDMMC_CmdGoIdleState>
 8008c5e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	e072      	b.n	8008d50 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f002 f8bf 	bl	800adf2 <SDMMC_CmdOperCond>
 8008c74:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00d      	beq.n	8008c98 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f002 f895 	bl	800adb6 <SDMMC_CmdGoIdleState>
 8008c8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	e05b      	b.n	8008d50 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d137      	bne.n	8008d16 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2100      	movs	r1, #0
 8008cac:	4618      	mov	r0, r3
 8008cae:	f002 f8bf 	bl	800ae30 <SDMMC_CmdAppCommand>
 8008cb2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d02d      	beq.n	8008d16 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cbe:	e047      	b.n	8008d50 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f002 f8b2 	bl	800ae30 <SDMMC_CmdAppCommand>
 8008ccc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	e03b      	b.n	8008d50 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	491e      	ldr	r1, [pc, #120]	; (8008d58 <SD_PowerON+0x118>)
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f002 f8c8 	bl	800ae74 <SDMMC_CmdAppOperCommand>
 8008ce4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cf0:	e02e      	b.n	8008d50 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f001 ff2d 	bl	800ab58 <SDIO_GetResponse>
 8008cfe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	0fdb      	lsrs	r3, r3, #31
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <SD_PowerON+0xcc>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <SD_PowerON+0xce>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	613b      	str	r3, [r7, #16]

    count++;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d802      	bhi.n	8008d26 <SD_PowerON+0xe6>
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0cc      	beq.n	8008cc0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d902      	bls.n	8008d36 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d34:	e00c      	b.n	8008d50 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	645a      	str	r2, [r3, #68]	; 0x44
 8008d46:	e002      	b.n	8008d4e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	c1100000 	.word	0xc1100000

08008d5c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d70:	e018      	b.n	8008da4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d7a:	041b      	lsls	r3, r3, #16
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f002 f93c 	bl	800affc <SDMMC_CmdSendStatus>
 8008d84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	e009      	b.n	8008da4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4618      	mov	r0, r3
 8008d98:	f001 fede 	bl	800ab58 <SDIO_GetResponse>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	2300      	movs	r3, #0
 8008dba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 fec8 	bl	800ab58 <SDIO_GetResponse>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dd2:	d102      	bne.n	8008dda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008dd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dd8:	e02f      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008dda:	f107 030c 	add.w	r3, r7, #12
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f879 	bl	8008ed8 <SD_FindSCR>
 8008de6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	e023      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01c      	beq.n	8008e36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f002 f811 	bl	800ae30 <SDMMC_CmdAppCommand>
 8008e0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	e00f      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2102      	movs	r1, #2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f002 f84a 	bl	800aeba <SDMMC_CmdBusWidth>
 8008e26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	e003      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e001      	b.n	8008e3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b086      	sub	sp, #24
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2100      	movs	r1, #0
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f001 fe7d 	bl	800ab58 <SDIO_GetResponse>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e68:	d102      	bne.n	8008e70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e6e:	e02f      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e70:	f107 030c 	add.w	r3, r7, #12
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f82e 	bl	8008ed8 <SD_FindSCR>
 8008e7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	e023      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d01c      	beq.n	8008ecc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9a:	041b      	lsls	r3, r3, #16
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	f001 ffc6 	bl	800ae30 <SDMMC_CmdAppCommand>
 8008ea4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	e00f      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f001 ffff 	bl	800aeba <SDMMC_CmdBusWidth>
 8008ebc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	e003      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e001      	b.n	8008ed0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ecc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ed8:	b590      	push	{r4, r7, lr}
 8008eda:	b08f      	sub	sp, #60	; 0x3c
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ee2:	f7fb fa59 	bl	8004398 <HAL_GetTick>
 8008ee6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008eec:	2300      	movs	r3, #0
 8008eee:	60bb      	str	r3, [r7, #8]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2108      	movs	r1, #8
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 fe69 	bl	800abd6 <SDMMC_CmdBlockLength>
 8008f04:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	e0b2      	b.n	8009076 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f18:	041b      	lsls	r3, r3, #16
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f001 ff87 	bl	800ae30 <SDMMC_CmdAppCommand>
 8008f22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	e0a3      	b.n	8009076 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f32:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008f34:	2308      	movs	r3, #8
 8008f36:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008f38:	2330      	movs	r3, #48	; 0x30
 8008f3a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008f44:	2301      	movs	r3, #1
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f107 0210 	add.w	r2, r7, #16
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 fe13 	bl	800ab7e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 ffce 	bl	800aefe <SDMMC_CmdSendSCR>
 8008f62:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d02a      	beq.n	8008fc0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	e083      	b.n	8009076 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00f      	beq.n	8008f9c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6819      	ldr	r1, [r3, #0]
 8008f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	f107 0208 	add.w	r2, r7, #8
 8008f88:	18d4      	adds	r4, r2, r3
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	f001 fd83 	bl	800aa96 <SDIO_ReadFIFO>
 8008f90:	4603      	mov	r3, r0
 8008f92:	6023      	str	r3, [r4, #0]
      index++;
 8008f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f96:	3301      	adds	r3, #1
 8008f98:	637b      	str	r3, [r7, #52]	; 0x34
 8008f9a:	e006      	b.n	8008faa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d012      	beq.n	8008fd0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008faa:	f7fb f9f5 	bl	8004398 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb8:	d102      	bne.n	8008fc0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fbe:	e05a      	b.n	8009076 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0cf      	beq.n	8008f6e <SD_FindSCR+0x96>
 8008fce:	e000      	b.n	8008fd2 <SD_FindSCR+0xfa>
      break;
 8008fd0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd8:	f003 0308 	and.w	r3, r3, #8
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008fe8:	2308      	movs	r3, #8
 8008fea:	e044      	b.n	8009076 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2202      	movs	r2, #2
 8009000:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009002:	2302      	movs	r3, #2
 8009004:	e037      	b.n	8009076 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2220      	movs	r2, #32
 800901a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800901c:	2320      	movs	r3, #32
 800901e:	e02a      	b.n	8009076 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f240 523a 	movw	r2, #1338	; 0x53a
 8009028:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	061a      	lsls	r2, r3, #24
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	021b      	lsls	r3, r3, #8
 8009032:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009036:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	0a1b      	lsrs	r3, r3, #8
 800903c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009040:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	0e1b      	lsrs	r3, r3, #24
 8009046:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	601a      	str	r2, [r3, #0]
    scr++;
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	3304      	adds	r3, #4
 8009050:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	061a      	lsls	r2, r3, #24
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	021b      	lsls	r3, r3, #8
 800905a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800905e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	0a1b      	lsrs	r3, r3, #8
 8009064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009068:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	0e1b      	lsrs	r3, r3, #24
 800906e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	373c      	adds	r7, #60	; 0x3c
 800907a:	46bd      	mov	sp, r7
 800907c:	bd90      	pop	{r4, r7, pc}

0800907e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e025      	b.n	80090de <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7fa ff8e 	bl	8003fc8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4619      	mov	r1, r3
 80090be:	4610      	mov	r0, r2
 80090c0:	f001 fb90 	bl	800a7e4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6818      	ldr	r0, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	461a      	mov	r2, r3
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	f001 fbfb 	bl	800a8ca <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d10a      	bne.n	8009112 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f80c 	bl	800911a <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	695a      	ldr	r2, [r3, #20]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f042 0201 	orr.w	r2, r2, #1
 8009110:	615a      	str	r2, [r3, #20]
  }
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 8009122:	bf00      	nop
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b02      	cmp	r3, #2
 8009144:	d101      	bne.n	800914a <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009146:	2302      	movs	r3, #2
 8009148:	e018      	b.n	800917c <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2202      	movs	r2, #2
 800914e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	4618      	mov	r0, r3
 800915c:	f001 fc34 	bl	800a9c8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b02      	cmp	r3, #2
 8009166:	d104      	bne.n	8009172 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2205      	movs	r2, #5
 800916c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009170:	e003      	b.n	800917a <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e041      	b.n	800921a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d106      	bne.n	80091b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fa fd5a 	bl	8003c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3304      	adds	r3, #4
 80091c0:	4619      	mov	r1, r3
 80091c2:	4610      	mov	r0, r2
 80091c4:	f000 ff1c 	bl	800a000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b01      	cmp	r3, #1
 8009236:	d001      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e04e      	b.n	80092da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2202      	movs	r2, #2
 8009240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68da      	ldr	r2, [r3, #12]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0201 	orr.w	r2, r2, #1
 8009252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a23      	ldr	r2, [pc, #140]	; (80092e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d022      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x80>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009266:	d01d      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x80>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a1f      	ldr	r2, [pc, #124]	; (80092ec <HAL_TIM_Base_Start_IT+0xc8>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d018      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x80>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a1e      	ldr	r2, [pc, #120]	; (80092f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d013      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x80>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a1c      	ldr	r2, [pc, #112]	; (80092f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d00e      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x80>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a1b      	ldr	r2, [pc, #108]	; (80092f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d009      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x80>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a19      	ldr	r2, [pc, #100]	; (80092fc <HAL_TIM_Base_Start_IT+0xd8>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d004      	beq.n	80092a4 <HAL_TIM_Base_Start_IT+0x80>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a18      	ldr	r2, [pc, #96]	; (8009300 <HAL_TIM_Base_Start_IT+0xdc>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d111      	bne.n	80092c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 0307 	and.w	r3, r3, #7
 80092ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b06      	cmp	r3, #6
 80092b4:	d010      	beq.n	80092d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f042 0201 	orr.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c6:	e007      	b.n	80092d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0201 	orr.w	r2, r2, #1
 80092d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	40010000 	.word	0x40010000
 80092ec:	40000400 	.word	0x40000400
 80092f0:	40000800 	.word	0x40000800
 80092f4:	40000c00 	.word	0x40000c00
 80092f8:	40010400 	.word	0x40010400
 80092fc:	40014000 	.word	0x40014000
 8009300:	40001800 	.word	0x40001800

08009304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e041      	b.n	800939a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7fa fd04 	bl	8003d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3304      	adds	r3, #4
 8009340:	4619      	mov	r1, r3
 8009342:	4610      	mov	r0, r2
 8009344:	f000 fe5c 	bl	800a000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <HAL_TIM_PWM_Start+0x24>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	bf14      	ite	ne
 80093c0:	2301      	movne	r3, #1
 80093c2:	2300      	moveq	r3, #0
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	e022      	b.n	800940e <HAL_TIM_PWM_Start+0x6a>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d109      	bne.n	80093e2 <HAL_TIM_PWM_Start+0x3e>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	bf14      	ite	ne
 80093da:	2301      	movne	r3, #1
 80093dc:	2300      	moveq	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	e015      	b.n	800940e <HAL_TIM_PWM_Start+0x6a>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d109      	bne.n	80093fc <HAL_TIM_PWM_Start+0x58>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	bf14      	ite	ne
 80093f4:	2301      	movne	r3, #1
 80093f6:	2300      	moveq	r3, #0
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	e008      	b.n	800940e <HAL_TIM_PWM_Start+0x6a>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b01      	cmp	r3, #1
 8009406:	bf14      	ite	ne
 8009408:	2301      	movne	r3, #1
 800940a:	2300      	moveq	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e07c      	b.n	8009510 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <HAL_TIM_PWM_Start+0x82>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009424:	e013      	b.n	800944e <HAL_TIM_PWM_Start+0xaa>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b04      	cmp	r3, #4
 800942a:	d104      	bne.n	8009436 <HAL_TIM_PWM_Start+0x92>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2202      	movs	r2, #2
 8009430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009434:	e00b      	b.n	800944e <HAL_TIM_PWM_Start+0xaa>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b08      	cmp	r3, #8
 800943a:	d104      	bne.n	8009446 <HAL_TIM_PWM_Start+0xa2>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009444:	e003      	b.n	800944e <HAL_TIM_PWM_Start+0xaa>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2202      	movs	r2, #2
 800944a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2201      	movs	r2, #1
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f001 f8bc 	bl	800a5d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a2d      	ldr	r2, [pc, #180]	; (8009518 <HAL_TIM_PWM_Start+0x174>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d004      	beq.n	8009470 <HAL_TIM_PWM_Start+0xcc>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a2c      	ldr	r2, [pc, #176]	; (800951c <HAL_TIM_PWM_Start+0x178>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d101      	bne.n	8009474 <HAL_TIM_PWM_Start+0xd0>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <HAL_TIM_PWM_Start+0xd2>
 8009474:	2300      	movs	r3, #0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d007      	beq.n	800948a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009488:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a22      	ldr	r2, [pc, #136]	; (8009518 <HAL_TIM_PWM_Start+0x174>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d022      	beq.n	80094da <HAL_TIM_PWM_Start+0x136>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800949c:	d01d      	beq.n	80094da <HAL_TIM_PWM_Start+0x136>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a1f      	ldr	r2, [pc, #124]	; (8009520 <HAL_TIM_PWM_Start+0x17c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d018      	beq.n	80094da <HAL_TIM_PWM_Start+0x136>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a1d      	ldr	r2, [pc, #116]	; (8009524 <HAL_TIM_PWM_Start+0x180>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d013      	beq.n	80094da <HAL_TIM_PWM_Start+0x136>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a1c      	ldr	r2, [pc, #112]	; (8009528 <HAL_TIM_PWM_Start+0x184>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d00e      	beq.n	80094da <HAL_TIM_PWM_Start+0x136>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a16      	ldr	r2, [pc, #88]	; (800951c <HAL_TIM_PWM_Start+0x178>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d009      	beq.n	80094da <HAL_TIM_PWM_Start+0x136>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a18      	ldr	r2, [pc, #96]	; (800952c <HAL_TIM_PWM_Start+0x188>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d004      	beq.n	80094da <HAL_TIM_PWM_Start+0x136>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a16      	ldr	r2, [pc, #88]	; (8009530 <HAL_TIM_PWM_Start+0x18c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d111      	bne.n	80094fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f003 0307 	and.w	r3, r3, #7
 80094e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b06      	cmp	r3, #6
 80094ea:	d010      	beq.n	800950e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0201 	orr.w	r2, r2, #1
 80094fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094fc:	e007      	b.n	800950e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f042 0201 	orr.w	r2, r2, #1
 800950c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	40010000 	.word	0x40010000
 800951c:	40010400 	.word	0x40010400
 8009520:	40000400 	.word	0x40000400
 8009524:	40000800 	.word	0x40000800
 8009528:	40000c00 	.word	0x40000c00
 800952c:	40014000 	.word	0x40014000
 8009530:	40001800 	.word	0x40001800

08009534 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d109      	bne.n	8009560 <HAL_TIM_PWM_Start_DMA+0x2c>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b02      	cmp	r3, #2
 8009556:	bf0c      	ite	eq
 8009558:	2301      	moveq	r3, #1
 800955a:	2300      	movne	r3, #0
 800955c:	b2db      	uxtb	r3, r3
 800955e:	e022      	b.n	80095a6 <HAL_TIM_PWM_Start_DMA+0x72>
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b04      	cmp	r3, #4
 8009564:	d109      	bne.n	800957a <HAL_TIM_PWM_Start_DMA+0x46>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b02      	cmp	r3, #2
 8009570:	bf0c      	ite	eq
 8009572:	2301      	moveq	r3, #1
 8009574:	2300      	movne	r3, #0
 8009576:	b2db      	uxtb	r3, r3
 8009578:	e015      	b.n	80095a6 <HAL_TIM_PWM_Start_DMA+0x72>
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b08      	cmp	r3, #8
 800957e:	d109      	bne.n	8009594 <HAL_TIM_PWM_Start_DMA+0x60>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b02      	cmp	r3, #2
 800958a:	bf0c      	ite	eq
 800958c:	2301      	moveq	r3, #1
 800958e:	2300      	movne	r3, #0
 8009590:	b2db      	uxtb	r3, r3
 8009592:	e008      	b.n	80095a6 <HAL_TIM_PWM_Start_DMA+0x72>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b02      	cmp	r3, #2
 800959e:	bf0c      	ite	eq
 80095a0:	2301      	moveq	r3, #1
 80095a2:	2300      	movne	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80095aa:	2302      	movs	r3, #2
 80095ac:	e171      	b.n	8009892 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d109      	bne.n	80095c8 <HAL_TIM_PWM_Start_DMA+0x94>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	2b01      	cmp	r3, #1
 80095be:	bf0c      	ite	eq
 80095c0:	2301      	moveq	r3, #1
 80095c2:	2300      	movne	r3, #0
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	e022      	b.n	800960e <HAL_TIM_PWM_Start_DMA+0xda>
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	d109      	bne.n	80095e2 <HAL_TIM_PWM_Start_DMA+0xae>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	bf0c      	ite	eq
 80095da:	2301      	moveq	r3, #1
 80095dc:	2300      	movne	r3, #0
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	e015      	b.n	800960e <HAL_TIM_PWM_Start_DMA+0xda>
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d109      	bne.n	80095fc <HAL_TIM_PWM_Start_DMA+0xc8>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	bf0c      	ite	eq
 80095f4:	2301      	moveq	r3, #1
 80095f6:	2300      	movne	r3, #0
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	e008      	b.n	800960e <HAL_TIM_PWM_Start_DMA+0xda>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b01      	cmp	r3, #1
 8009606:	bf0c      	ite	eq
 8009608:	2301      	moveq	r3, #1
 800960a:	2300      	movne	r3, #0
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d024      	beq.n	800965c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d104      	bne.n	8009622 <HAL_TIM_PWM_Start_DMA+0xee>
 8009618:	887b      	ldrh	r3, [r7, #2]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e137      	b.n	8009892 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <HAL_TIM_PWM_Start_DMA+0xfe>
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009630:	e016      	b.n	8009660 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b04      	cmp	r3, #4
 8009636:	d104      	bne.n	8009642 <HAL_TIM_PWM_Start_DMA+0x10e>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009640:	e00e      	b.n	8009660 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b08      	cmp	r3, #8
 8009646:	d104      	bne.n	8009652 <HAL_TIM_PWM_Start_DMA+0x11e>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009650:	e006      	b.n	8009660 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2202      	movs	r2, #2
 8009656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800965a:	e001      	b.n	8009660 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e118      	b.n	8009892 <HAL_TIM_PWM_Start_DMA+0x35e>
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b0c      	cmp	r3, #12
 8009664:	f200 80ae 	bhi.w	80097c4 <HAL_TIM_PWM_Start_DMA+0x290>
 8009668:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800966a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966e:	bf00      	nop
 8009670:	080096a5 	.word	0x080096a5
 8009674:	080097c5 	.word	0x080097c5
 8009678:	080097c5 	.word	0x080097c5
 800967c:	080097c5 	.word	0x080097c5
 8009680:	080096ed 	.word	0x080096ed
 8009684:	080097c5 	.word	0x080097c5
 8009688:	080097c5 	.word	0x080097c5
 800968c:	080097c5 	.word	0x080097c5
 8009690:	08009735 	.word	0x08009735
 8009694:	080097c5 	.word	0x080097c5
 8009698:	080097c5 	.word	0x080097c5
 800969c:	080097c5 	.word	0x080097c5
 80096a0:	0800977d 	.word	0x0800977d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	4a7c      	ldr	r2, [pc, #496]	; (800989c <HAL_TIM_PWM_Start_DMA+0x368>)
 80096aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b0:	4a7b      	ldr	r2, [pc, #492]	; (80098a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80096b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	4a7a      	ldr	r2, [pc, #488]	; (80098a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80096ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3334      	adds	r3, #52	; 0x34
 80096c8:	461a      	mov	r2, r3
 80096ca:	887b      	ldrh	r3, [r7, #2]
 80096cc:	f7fb fb72 	bl	8004db4 <HAL_DMA_Start_IT>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e0db      	b.n	8009892 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68da      	ldr	r2, [r3, #12]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096e8:	60da      	str	r2, [r3, #12]
      break;
 80096ea:	e06e      	b.n	80097ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f0:	4a6a      	ldr	r2, [pc, #424]	; (800989c <HAL_TIM_PWM_Start_DMA+0x368>)
 80096f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f8:	4a69      	ldr	r2, [pc, #420]	; (80098a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80096fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009700:	4a68      	ldr	r2, [pc, #416]	; (80098a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009702:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3338      	adds	r3, #56	; 0x38
 8009710:	461a      	mov	r2, r3
 8009712:	887b      	ldrh	r3, [r7, #2]
 8009714:	f7fb fb4e 	bl	8004db4 <HAL_DMA_Start_IT>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e0b7      	b.n	8009892 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68da      	ldr	r2, [r3, #12]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009730:	60da      	str	r2, [r3, #12]
      break;
 8009732:	e04a      	b.n	80097ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	4a58      	ldr	r2, [pc, #352]	; (800989c <HAL_TIM_PWM_Start_DMA+0x368>)
 800973a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009740:	4a57      	ldr	r2, [pc, #348]	; (80098a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009742:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	4a56      	ldr	r2, [pc, #344]	; (80098a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800974a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	333c      	adds	r3, #60	; 0x3c
 8009758:	461a      	mov	r2, r3
 800975a:	887b      	ldrh	r3, [r7, #2]
 800975c:	f7fb fb2a 	bl	8004db4 <HAL_DMA_Start_IT>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e093      	b.n	8009892 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68da      	ldr	r2, [r3, #12]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009778:	60da      	str	r2, [r3, #12]
      break;
 800977a:	e026      	b.n	80097ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	4a46      	ldr	r2, [pc, #280]	; (800989c <HAL_TIM_PWM_Start_DMA+0x368>)
 8009782:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009788:	4a45      	ldr	r2, [pc, #276]	; (80098a0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800978a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	4a44      	ldr	r2, [pc, #272]	; (80098a4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009792:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3340      	adds	r3, #64	; 0x40
 80097a0:	461a      	mov	r2, r3
 80097a2:	887b      	ldrh	r3, [r7, #2]
 80097a4:	f7fb fb06 	bl	8004db4 <HAL_DMA_Start_IT>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e06f      	b.n	8009892 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68da      	ldr	r2, [r3, #12]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097c0:	60da      	str	r2, [r3, #12]
      break;
 80097c2:	e002      	b.n	80097ca <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	75fb      	strb	r3, [r7, #23]
      break;
 80097c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d15f      	bne.n	8009890 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2201      	movs	r2, #1
 80097d6:	68b9      	ldr	r1, [r7, #8]
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fefb 	bl	800a5d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a31      	ldr	r2, [pc, #196]	; (80098a8 <HAL_TIM_PWM_Start_DMA+0x374>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d004      	beq.n	80097f2 <HAL_TIM_PWM_Start_DMA+0x2be>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a2f      	ldr	r2, [pc, #188]	; (80098ac <HAL_TIM_PWM_Start_DMA+0x378>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d101      	bne.n	80097f6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e000      	b.n	80097f8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80097f6:	2300      	movs	r3, #0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d007      	beq.n	800980c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800980a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a25      	ldr	r2, [pc, #148]	; (80098a8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d022      	beq.n	800985c <HAL_TIM_PWM_Start_DMA+0x328>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800981e:	d01d      	beq.n	800985c <HAL_TIM_PWM_Start_DMA+0x328>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a22      	ldr	r2, [pc, #136]	; (80098b0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d018      	beq.n	800985c <HAL_TIM_PWM_Start_DMA+0x328>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a21      	ldr	r2, [pc, #132]	; (80098b4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d013      	beq.n	800985c <HAL_TIM_PWM_Start_DMA+0x328>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a1f      	ldr	r2, [pc, #124]	; (80098b8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d00e      	beq.n	800985c <HAL_TIM_PWM_Start_DMA+0x328>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a1a      	ldr	r2, [pc, #104]	; (80098ac <HAL_TIM_PWM_Start_DMA+0x378>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d009      	beq.n	800985c <HAL_TIM_PWM_Start_DMA+0x328>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <HAL_TIM_PWM_Start_DMA+0x388>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d004      	beq.n	800985c <HAL_TIM_PWM_Start_DMA+0x328>
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a1a      	ldr	r2, [pc, #104]	; (80098c0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d111      	bne.n	8009880 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 0307 	and.w	r3, r3, #7
 8009866:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b06      	cmp	r3, #6
 800986c:	d010      	beq.n	8009890 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f042 0201 	orr.w	r2, r2, #1
 800987c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800987e:	e007      	b.n	8009890 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0201 	orr.w	r2, r2, #1
 800988e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009890:	7dfb      	ldrb	r3, [r7, #23]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	08009ef1 	.word	0x08009ef1
 80098a0:	08009f99 	.word	0x08009f99
 80098a4:	08009e5f 	.word	0x08009e5f
 80098a8:	40010000 	.word	0x40010000
 80098ac:	40010400 	.word	0x40010400
 80098b0:	40000400 	.word	0x40000400
 80098b4:	40000800 	.word	0x40000800
 80098b8:	40000c00 	.word	0x40000c00
 80098bc:	40014000 	.word	0x40014000
 80098c0:	40001800 	.word	0x40001800

080098c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d122      	bne.n	8009920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d11b      	bne.n	8009920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f06f 0202 	mvn.w	r2, #2
 80098f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2201      	movs	r2, #1
 80098f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	699b      	ldr	r3, [r3, #24]
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fa77 	bl	8009dfa <HAL_TIM_IC_CaptureCallback>
 800990c:	e005      	b.n	800991a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa69 	bl	8009de6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fa7a 	bl	8009e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	f003 0304 	and.w	r3, r3, #4
 800992a:	2b04      	cmp	r3, #4
 800992c:	d122      	bne.n	8009974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b04      	cmp	r3, #4
 800993a:	d11b      	bne.n	8009974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f06f 0204 	mvn.w	r2, #4
 8009944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2202      	movs	r2, #2
 800994a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa4d 	bl	8009dfa <HAL_TIM_IC_CaptureCallback>
 8009960:	e005      	b.n	800996e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fa3f 	bl	8009de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fa50 	bl	8009e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b08      	cmp	r3, #8
 8009980:	d122      	bne.n	80099c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	f003 0308 	and.w	r3, r3, #8
 800998c:	2b08      	cmp	r3, #8
 800998e:	d11b      	bne.n	80099c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f06f 0208 	mvn.w	r2, #8
 8009998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2204      	movs	r2, #4
 800999e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa23 	bl	8009dfa <HAL_TIM_IC_CaptureCallback>
 80099b4:	e005      	b.n	80099c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa15 	bl	8009de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa26 	bl	8009e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	f003 0310 	and.w	r3, r3, #16
 80099d2:	2b10      	cmp	r3, #16
 80099d4:	d122      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d11b      	bne.n	8009a1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f06f 0210 	mvn.w	r2, #16
 80099ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2208      	movs	r2, #8
 80099f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f9f9 	bl	8009dfa <HAL_TIM_IC_CaptureCallback>
 8009a08:	e005      	b.n	8009a16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f9eb 	bl	8009de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f9fc 	bl	8009e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d10e      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d107      	bne.n	8009a48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f06f 0201 	mvn.w	r2, #1
 8009a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7f9 fdc2 	bl	80035cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a52:	2b80      	cmp	r3, #128	; 0x80
 8009a54:	d10e      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a60:	2b80      	cmp	r3, #128	; 0x80
 8009a62:	d107      	bne.n	8009a74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 feae 	bl	800a7d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d10e      	bne.n	8009aa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a8c:	2b40      	cmp	r3, #64	; 0x40
 8009a8e:	d107      	bne.n	8009aa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f9cb 	bl	8009e36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d10e      	bne.n	8009acc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	d107      	bne.n	8009acc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f06f 0220 	mvn.w	r2, #32
 8009ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fe78 	bl	800a7bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009aee:	2302      	movs	r3, #2
 8009af0:	e0ae      	b.n	8009c50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b0c      	cmp	r3, #12
 8009afe:	f200 809f 	bhi.w	8009c40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009b02:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009b3d 	.word	0x08009b3d
 8009b0c:	08009c41 	.word	0x08009c41
 8009b10:	08009c41 	.word	0x08009c41
 8009b14:	08009c41 	.word	0x08009c41
 8009b18:	08009b7d 	.word	0x08009b7d
 8009b1c:	08009c41 	.word	0x08009c41
 8009b20:	08009c41 	.word	0x08009c41
 8009b24:	08009c41 	.word	0x08009c41
 8009b28:	08009bbf 	.word	0x08009bbf
 8009b2c:	08009c41 	.word	0x08009c41
 8009b30:	08009c41 	.word	0x08009c41
 8009b34:	08009c41 	.word	0x08009c41
 8009b38:	08009bff 	.word	0x08009bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 fafc 	bl	800a140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	699a      	ldr	r2, [r3, #24]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f042 0208 	orr.w	r2, r2, #8
 8009b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	699a      	ldr	r2, [r3, #24]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f022 0204 	bic.w	r2, r2, #4
 8009b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6999      	ldr	r1, [r3, #24]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	691a      	ldr	r2, [r3, #16]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	619a      	str	r2, [r3, #24]
      break;
 8009b7a:	e064      	b.n	8009c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 fb4c 	bl	800a220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699a      	ldr	r2, [r3, #24]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	699a      	ldr	r2, [r3, #24]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6999      	ldr	r1, [r3, #24]
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	021a      	lsls	r2, r3, #8
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	619a      	str	r2, [r3, #24]
      break;
 8009bbc:	e043      	b.n	8009c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fba1 	bl	800a30c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	69da      	ldr	r2, [r3, #28]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f042 0208 	orr.w	r2, r2, #8
 8009bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69da      	ldr	r2, [r3, #28]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0204 	bic.w	r2, r2, #4
 8009be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69d9      	ldr	r1, [r3, #28]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	691a      	ldr	r2, [r3, #16]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	61da      	str	r2, [r3, #28]
      break;
 8009bfc:	e023      	b.n	8009c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68b9      	ldr	r1, [r7, #8]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 fbf5 	bl	800a3f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69da      	ldr	r2, [r3, #28]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	69da      	ldr	r2, [r3, #28]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69d9      	ldr	r1, [r3, #28]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	021a      	lsls	r2, r3, #8
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	61da      	str	r2, [r3, #28]
      break;
 8009c3e:	e002      	b.n	8009c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	75fb      	strb	r3, [r7, #23]
      break;
 8009c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d101      	bne.n	8009c74 <HAL_TIM_ConfigClockSource+0x1c>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e0b4      	b.n	8009dde <HAL_TIM_ConfigClockSource+0x186>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cac:	d03e      	beq.n	8009d2c <HAL_TIM_ConfigClockSource+0xd4>
 8009cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb2:	f200 8087 	bhi.w	8009dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cba:	f000 8086 	beq.w	8009dca <HAL_TIM_ConfigClockSource+0x172>
 8009cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc2:	d87f      	bhi.n	8009dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cc4:	2b70      	cmp	r3, #112	; 0x70
 8009cc6:	d01a      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0xa6>
 8009cc8:	2b70      	cmp	r3, #112	; 0x70
 8009cca:	d87b      	bhi.n	8009dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ccc:	2b60      	cmp	r3, #96	; 0x60
 8009cce:	d050      	beq.n	8009d72 <HAL_TIM_ConfigClockSource+0x11a>
 8009cd0:	2b60      	cmp	r3, #96	; 0x60
 8009cd2:	d877      	bhi.n	8009dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cd4:	2b50      	cmp	r3, #80	; 0x50
 8009cd6:	d03c      	beq.n	8009d52 <HAL_TIM_ConfigClockSource+0xfa>
 8009cd8:	2b50      	cmp	r3, #80	; 0x50
 8009cda:	d873      	bhi.n	8009dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cdc:	2b40      	cmp	r3, #64	; 0x40
 8009cde:	d058      	beq.n	8009d92 <HAL_TIM_ConfigClockSource+0x13a>
 8009ce0:	2b40      	cmp	r3, #64	; 0x40
 8009ce2:	d86f      	bhi.n	8009dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ce4:	2b30      	cmp	r3, #48	; 0x30
 8009ce6:	d064      	beq.n	8009db2 <HAL_TIM_ConfigClockSource+0x15a>
 8009ce8:	2b30      	cmp	r3, #48	; 0x30
 8009cea:	d86b      	bhi.n	8009dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cec:	2b20      	cmp	r3, #32
 8009cee:	d060      	beq.n	8009db2 <HAL_TIM_ConfigClockSource+0x15a>
 8009cf0:	2b20      	cmp	r3, #32
 8009cf2:	d867      	bhi.n	8009dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d05c      	beq.n	8009db2 <HAL_TIM_ConfigClockSource+0x15a>
 8009cf8:	2b10      	cmp	r3, #16
 8009cfa:	d05a      	beq.n	8009db2 <HAL_TIM_ConfigClockSource+0x15a>
 8009cfc:	e062      	b.n	8009dc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	6899      	ldr	r1, [r3, #8]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	f000 fc41 	bl	800a594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	609a      	str	r2, [r3, #8]
      break;
 8009d2a:	e04f      	b.n	8009dcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6818      	ldr	r0, [r3, #0]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	6899      	ldr	r1, [r3, #8]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f000 fc2a 	bl	800a594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d4e:	609a      	str	r2, [r3, #8]
      break;
 8009d50:	e03c      	b.n	8009dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	6859      	ldr	r1, [r3, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f000 fb9e 	bl	800a4a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2150      	movs	r1, #80	; 0x50
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 fbf7 	bl	800a55e <TIM_ITRx_SetConfig>
      break;
 8009d70:	e02c      	b.n	8009dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6818      	ldr	r0, [r3, #0]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	6859      	ldr	r1, [r3, #4]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f000 fbbd 	bl	800a4fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2160      	movs	r1, #96	; 0x60
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 fbe7 	bl	800a55e <TIM_ITRx_SetConfig>
      break;
 8009d90:	e01c      	b.n	8009dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	6859      	ldr	r1, [r3, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	f000 fb7e 	bl	800a4a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2140      	movs	r1, #64	; 0x40
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fbd7 	bl	800a55e <TIM_ITRx_SetConfig>
      break;
 8009db0:	e00c      	b.n	8009dcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	f000 fbce 	bl	800a55e <TIM_ITRx_SetConfig>
      break;
 8009dc2:	e003      	b.n	8009dcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc8:	e000      	b.n	8009dcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b083      	sub	sp, #12
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dee:	bf00      	nop
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009e2a:	bf00      	nop
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e36:	b480      	push	{r7}
 8009e38:	b083      	sub	sp, #12
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009e52:	bf00      	nop
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d107      	bne.n	8009e86 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e84:	e02a      	b.n	8009edc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d107      	bne.n	8009ea0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2202      	movs	r2, #2
 8009e94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e9e:	e01d      	b.n	8009edc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d107      	bne.n	8009eba <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2204      	movs	r2, #4
 8009eae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009eb8:	e010      	b.n	8009edc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d107      	bne.n	8009ed4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2208      	movs	r2, #8
 8009ec8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ed2:	e003      	b.n	8009edc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f7ff ffb4 	bl	8009e4a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	771a      	strb	r2, [r3, #28]
}
 8009ee8:	bf00      	nop
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d10b      	bne.n	8009f20 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d136      	bne.n	8009f84 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f1e:	e031      	b.n	8009f84 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d10b      	bne.n	8009f42 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d125      	bne.n	8009f84 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f40:	e020      	b.n	8009f84 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d10b      	bne.n	8009f64 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2204      	movs	r2, #4
 8009f50:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d114      	bne.n	8009f84 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f62:	e00f      	b.n	8009f84 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d10a      	bne.n	8009f84 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2208      	movs	r2, #8
 8009f72:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d103      	bne.n	8009f84 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f7ff ff42 	bl	8009e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	771a      	strb	r2, [r3, #28]
}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d103      	bne.n	8009fb8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	771a      	strb	r2, [r3, #28]
 8009fb6:	e019      	b.n	8009fec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d103      	bne.n	8009fca <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	771a      	strb	r2, [r3, #28]
 8009fc8:	e010      	b.n	8009fec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d103      	bne.n	8009fdc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2204      	movs	r2, #4
 8009fd8:	771a      	strb	r2, [r3, #28]
 8009fda:	e007      	b.n	8009fec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d102      	bne.n	8009fec <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2208      	movs	r2, #8
 8009fea:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7ff ff18 	bl	8009e22 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	771a      	strb	r2, [r3, #28]
}
 8009ff8:	bf00      	nop
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a40      	ldr	r2, [pc, #256]	; (800a114 <TIM_Base_SetConfig+0x114>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d013      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01e:	d00f      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a3d      	ldr	r2, [pc, #244]	; (800a118 <TIM_Base_SetConfig+0x118>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d00b      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a3c      	ldr	r2, [pc, #240]	; (800a11c <TIM_Base_SetConfig+0x11c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d007      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a3b      	ldr	r2, [pc, #236]	; (800a120 <TIM_Base_SetConfig+0x120>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d003      	beq.n	800a040 <TIM_Base_SetConfig+0x40>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a3a      	ldr	r2, [pc, #232]	; (800a124 <TIM_Base_SetConfig+0x124>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d108      	bne.n	800a052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	4313      	orrs	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a2f      	ldr	r2, [pc, #188]	; (800a114 <TIM_Base_SetConfig+0x114>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d02b      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a060:	d027      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a2c      	ldr	r2, [pc, #176]	; (800a118 <TIM_Base_SetConfig+0x118>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d023      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a2b      	ldr	r2, [pc, #172]	; (800a11c <TIM_Base_SetConfig+0x11c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d01f      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a2a      	ldr	r2, [pc, #168]	; (800a120 <TIM_Base_SetConfig+0x120>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d01b      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a29      	ldr	r2, [pc, #164]	; (800a124 <TIM_Base_SetConfig+0x124>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d017      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a28      	ldr	r2, [pc, #160]	; (800a128 <TIM_Base_SetConfig+0x128>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d013      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a27      	ldr	r2, [pc, #156]	; (800a12c <TIM_Base_SetConfig+0x12c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00f      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a26      	ldr	r2, [pc, #152]	; (800a130 <TIM_Base_SetConfig+0x130>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d00b      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a25      	ldr	r2, [pc, #148]	; (800a134 <TIM_Base_SetConfig+0x134>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d007      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a24      	ldr	r2, [pc, #144]	; (800a138 <TIM_Base_SetConfig+0x138>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d003      	beq.n	800a0b2 <TIM_Base_SetConfig+0xb2>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a23      	ldr	r2, [pc, #140]	; (800a13c <TIM_Base_SetConfig+0x13c>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d108      	bne.n	800a0c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a0a      	ldr	r2, [pc, #40]	; (800a114 <TIM_Base_SetConfig+0x114>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d003      	beq.n	800a0f8 <TIM_Base_SetConfig+0xf8>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a0c      	ldr	r2, [pc, #48]	; (800a124 <TIM_Base_SetConfig+0x124>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d103      	bne.n	800a100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	691a      	ldr	r2, [r3, #16]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	615a      	str	r2, [r3, #20]
}
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	40010000 	.word	0x40010000
 800a118:	40000400 	.word	0x40000400
 800a11c:	40000800 	.word	0x40000800
 800a120:	40000c00 	.word	0x40000c00
 800a124:	40010400 	.word	0x40010400
 800a128:	40014000 	.word	0x40014000
 800a12c:	40014400 	.word	0x40014400
 800a130:	40014800 	.word	0x40014800
 800a134:	40001800 	.word	0x40001800
 800a138:	40001c00 	.word	0x40001c00
 800a13c:	40002000 	.word	0x40002000

0800a140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	f023 0201 	bic.w	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	4313      	orrs	r3, r2
 800a180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f023 0302 	bic.w	r3, r3, #2
 800a188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a20      	ldr	r2, [pc, #128]	; (800a218 <TIM_OC1_SetConfig+0xd8>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d003      	beq.n	800a1a4 <TIM_OC1_SetConfig+0x64>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a1f      	ldr	r2, [pc, #124]	; (800a21c <TIM_OC1_SetConfig+0xdc>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d10c      	bne.n	800a1be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f023 0308 	bic.w	r3, r3, #8
 800a1aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f023 0304 	bic.w	r3, r3, #4
 800a1bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a15      	ldr	r2, [pc, #84]	; (800a218 <TIM_OC1_SetConfig+0xd8>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d003      	beq.n	800a1ce <TIM_OC1_SetConfig+0x8e>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a14      	ldr	r2, [pc, #80]	; (800a21c <TIM_OC1_SetConfig+0xdc>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d111      	bne.n	800a1f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	621a      	str	r2, [r3, #32]
}
 800a20c:	bf00      	nop
 800a20e:	371c      	adds	r7, #28
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	40010000 	.word	0x40010000
 800a21c:	40010400 	.word	0x40010400

0800a220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	f023 0210 	bic.w	r2, r3, #16
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a24e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	021b      	lsls	r3, r3, #8
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	4313      	orrs	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f023 0320 	bic.w	r3, r3, #32
 800a26a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	4313      	orrs	r3, r2
 800a276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a22      	ldr	r2, [pc, #136]	; (800a304 <TIM_OC2_SetConfig+0xe4>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d003      	beq.n	800a288 <TIM_OC2_SetConfig+0x68>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a21      	ldr	r2, [pc, #132]	; (800a308 <TIM_OC2_SetConfig+0xe8>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d10d      	bne.n	800a2a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a28e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	011b      	lsls	r3, r3, #4
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	4313      	orrs	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a17      	ldr	r2, [pc, #92]	; (800a304 <TIM_OC2_SetConfig+0xe4>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d003      	beq.n	800a2b4 <TIM_OC2_SetConfig+0x94>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a16      	ldr	r2, [pc, #88]	; (800a308 <TIM_OC2_SetConfig+0xe8>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d113      	bne.n	800a2dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	621a      	str	r2, [r3, #32]
}
 800a2f6:	bf00      	nop
 800a2f8:	371c      	adds	r7, #28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	40010000 	.word	0x40010000
 800a308:	40010400 	.word	0x40010400

0800a30c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a33a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f023 0303 	bic.w	r3, r3, #3
 800a342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	021b      	lsls	r3, r3, #8
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	4313      	orrs	r3, r2
 800a360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a21      	ldr	r2, [pc, #132]	; (800a3ec <TIM_OC3_SetConfig+0xe0>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d003      	beq.n	800a372 <TIM_OC3_SetConfig+0x66>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a20      	ldr	r2, [pc, #128]	; (800a3f0 <TIM_OC3_SetConfig+0xe4>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d10d      	bne.n	800a38e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	021b      	lsls	r3, r3, #8
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a38c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a16      	ldr	r2, [pc, #88]	; (800a3ec <TIM_OC3_SetConfig+0xe0>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d003      	beq.n	800a39e <TIM_OC3_SetConfig+0x92>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a15      	ldr	r2, [pc, #84]	; (800a3f0 <TIM_OC3_SetConfig+0xe4>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d113      	bne.n	800a3c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	011b      	lsls	r3, r3, #4
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	011b      	lsls	r3, r3, #4
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	621a      	str	r2, [r3, #32]
}
 800a3e0:	bf00      	nop
 800a3e2:	371c      	adds	r7, #28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	40010000 	.word	0x40010000
 800a3f0:	40010400 	.word	0x40010400

0800a3f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a42a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	021b      	lsls	r3, r3, #8
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4313      	orrs	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a43e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	031b      	lsls	r3, r3, #12
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	4313      	orrs	r3, r2
 800a44a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a12      	ldr	r2, [pc, #72]	; (800a498 <TIM_OC4_SetConfig+0xa4>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d003      	beq.n	800a45c <TIM_OC4_SetConfig+0x68>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a11      	ldr	r2, [pc, #68]	; (800a49c <TIM_OC4_SetConfig+0xa8>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d109      	bne.n	800a470 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	695b      	ldr	r3, [r3, #20]
 800a468:	019b      	lsls	r3, r3, #6
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	685a      	ldr	r2, [r3, #4]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	621a      	str	r2, [r3, #32]
}
 800a48a:	bf00      	nop
 800a48c:	371c      	adds	r7, #28
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	40010000 	.word	0x40010000
 800a49c:	40010400 	.word	0x40010400

0800a4a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6a1b      	ldr	r3, [r3, #32]
 800a4b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	f023 0201 	bic.w	r2, r3, #1
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	011b      	lsls	r3, r3, #4
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f023 030a 	bic.w	r3, r3, #10
 800a4dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	621a      	str	r2, [r3, #32]
}
 800a4f2:	bf00      	nop
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b087      	sub	sp, #28
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	f023 0210 	bic.w	r2, r3, #16
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	031b      	lsls	r3, r3, #12
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	4313      	orrs	r3, r2
 800a532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a53a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	011b      	lsls	r3, r3, #4
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	4313      	orrs	r3, r2
 800a544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	621a      	str	r2, [r3, #32]
}
 800a552:	bf00      	nop
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a55e:	b480      	push	{r7}
 800a560:	b085      	sub	sp, #20
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	f043 0307 	orr.w	r3, r3, #7
 800a580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	609a      	str	r2, [r3, #8]
}
 800a588:	bf00      	nop
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	021a      	lsls	r2, r3, #8
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	431a      	orrs	r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	609a      	str	r2, [r3, #8]
}
 800a5c8:	bf00      	nop
 800a5ca:	371c      	adds	r7, #28
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	f003 031f 	and.w	r3, r3, #31
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6a1a      	ldr	r2, [r3, #32]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	43db      	mvns	r3, r3
 800a5f6:	401a      	ands	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6a1a      	ldr	r2, [r3, #32]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f003 031f 	and.w	r3, r3, #31
 800a606:	6879      	ldr	r1, [r7, #4]
 800a608:	fa01 f303 	lsl.w	r3, r1, r3
 800a60c:	431a      	orrs	r2, r3
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	621a      	str	r2, [r3, #32]
}
 800a612:	bf00      	nop
 800a614:	371c      	adds	r7, #28
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
	...

0800a620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a630:	2b01      	cmp	r3, #1
 800a632:	d101      	bne.n	800a638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a634:	2302      	movs	r3, #2
 800a636:	e05a      	b.n	800a6ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a65e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a21      	ldr	r2, [pc, #132]	; (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d022      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a684:	d01d      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a1d      	ldr	r2, [pc, #116]	; (800a700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d018      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a1b      	ldr	r2, [pc, #108]	; (800a704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d013      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a1a      	ldr	r2, [pc, #104]	; (800a708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d00e      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a18      	ldr	r2, [pc, #96]	; (800a70c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d009      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a17      	ldr	r2, [pc, #92]	; (800a710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d004      	beq.n	800a6c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a15      	ldr	r2, [pc, #84]	; (800a714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d10c      	bne.n	800a6dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	40010000 	.word	0x40010000
 800a700:	40000400 	.word	0x40000400
 800a704:	40000800 	.word	0x40000800
 800a708:	40000c00 	.word	0x40000c00
 800a70c:	40010400 	.word	0x40010400
 800a710:	40014000 	.word	0x40014000
 800a714:	40001800 	.word	0x40001800

0800a718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d101      	bne.n	800a734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a730:	2302      	movs	r3, #2
 800a732:	e03d      	b.n	800a7b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	4313      	orrs	r3, r2
 800a748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	4313      	orrs	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	4313      	orrs	r3, r2
 800a764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4313      	orrs	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	4313      	orrs	r3, r2
 800a780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	695b      	ldr	r3, [r3, #20]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d029      	beq.n	800a852 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a80a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a80e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a818:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a81e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a824:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a82a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a830:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a836:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a83c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a842:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	e034      	b.n	800a8bc <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a85e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a868:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a86e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a882:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a886:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a890:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a896:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a89c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a8a2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a8a8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b087      	sub	sp, #28
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d02e      	beq.n	800a942 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8f0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a900:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	3b01      	subs	r3, #1
 800a908:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a90a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	3b01      	subs	r3, #1
 800a912:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a914:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a91e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	3b01      	subs	r3, #1
 800a926:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a928:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	3b01      	subs	r3, #1
 800a930:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a932:	4313      	orrs	r3, r2
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	4313      	orrs	r3, r2
 800a938:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	609a      	str	r2, [r3, #8]
 800a940:	e03b      	b.n	800a9ba <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a94e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a952:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	3b01      	subs	r3, #1
 800a95a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	695b      	ldr	r3, [r3, #20]
 800a960:	3b01      	subs	r3, #1
 800a962:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a964:	4313      	orrs	r3, r2
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	4313      	orrs	r3, r2
 800a96a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a978:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	3b01      	subs	r3, #1
 800a986:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a988:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	3b01      	subs	r3, #1
 800a990:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a992:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	3b01      	subs	r3, #1
 800a99a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a99c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	693a      	ldr	r2, [r7, #16]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	371c      	adds	r7, #28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a9e4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a9ee:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800aa00:	f7f9 fcca 	bl	8004398 <HAL_GetTick>
 800aa04:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800aa06:	e010      	b.n	800aa2a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0e:	d00c      	beq.n	800aa2a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d007      	beq.n	800aa26 <FMC_SDRAM_SendCommand+0x5e>
 800aa16:	f7f9 fcbf 	bl	8004398 <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d201      	bcs.n	800aa2a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e006      	b.n	800aa38 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	f003 0320 	and.w	r3, r3, #32
 800aa32:	2b20      	cmp	r3, #32
 800aa34:	d0e8      	beq.n	800aa08 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800aa40:	b084      	sub	sp, #16
 800aa42:	b480      	push	{r7}
 800aa44:	b085      	sub	sp, #20
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	f107 001c 	add.w	r0, r7, #28
 800aa4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aa62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aa66:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aa6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800aa7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	431a      	orrs	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	b004      	add	sp, #16
 800aa94:	4770      	bx	lr

0800aa96 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2203      	movs	r2, #3
 800aabc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800aabe:	2002      	movs	r0, #2
 800aac0:	f7f9 fc76 	bl	80043b0 <HAL_Delay>
  
  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0303 	and.w	r3, r3, #3
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800aaea:	b480      	push	{r7}
 800aaec:	b085      	sub	sp, #20
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab08:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab0e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab24:	f023 030f 	bic.w	r3, r3, #15
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b083      	sub	sp, #12
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	b2db      	uxtb	r3, r3
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3314      	adds	r3, #20
 800ab66:	461a      	mov	r2, r3
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
}  
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b085      	sub	sp, #20
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aba4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800abaa:	431a      	orrs	r2, r3
                       Data->DPSM);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800abb0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	431a      	orrs	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0

}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b088      	sub	sp, #32
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800abe4:	2310      	movs	r3, #16
 800abe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abe8:	2340      	movs	r3, #64	; 0x40
 800abea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abec:	2300      	movs	r3, #0
 800abee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abf6:	f107 0308 	add.w	r3, r7, #8
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7ff ff74 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ac02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac06:	2110      	movs	r1, #16
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fa45 	bl	800b098 <SDMMC_GetCmdResp1>
 800ac0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac10:	69fb      	ldr	r3, [r7, #28]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3720      	adds	r7, #32
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b088      	sub	sp, #32
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac28:	2311      	movs	r3, #17
 800ac2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac2c:	2340      	movs	r3, #64	; 0x40
 800ac2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac30:	2300      	movs	r3, #0
 800ac32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac3a:	f107 0308 	add.w	r3, r7, #8
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff ff52 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ac46:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac4a:	2111      	movs	r1, #17
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 fa23 	bl	800b098 <SDMMC_GetCmdResp1>
 800ac52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac54:	69fb      	ldr	r3, [r7, #28]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3720      	adds	r7, #32
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b088      	sub	sp, #32
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ac6c:	2312      	movs	r3, #18
 800ac6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac70:	2340      	movs	r3, #64	; 0x40
 800ac72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac74:	2300      	movs	r3, #0
 800ac76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac7e:	f107 0308 	add.w	r3, r7, #8
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff ff30 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ac8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac8e:	2112      	movs	r1, #18
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fa01 	bl	800b098 <SDMMC_GetCmdResp1>
 800ac96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac98:	69fb      	ldr	r3, [r7, #28]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b088      	sub	sp, #32
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800acb0:	2318      	movs	r3, #24
 800acb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acb4:	2340      	movs	r3, #64	; 0x40
 800acb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acb8:	2300      	movs	r3, #0
 800acba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acc2:	f107 0308 	add.w	r3, r7, #8
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff ff0e 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800acce:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd2:	2118      	movs	r1, #24
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f9df 	bl	800b098 <SDMMC_GetCmdResp1>
 800acda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acdc:	69fb      	ldr	r3, [r7, #28]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3720      	adds	r7, #32
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b088      	sub	sp, #32
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800acf4:	2319      	movs	r3, #25
 800acf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acf8:	2340      	movs	r3, #64	; 0x40
 800acfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acfc:	2300      	movs	r3, #0
 800acfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad06:	f107 0308 	add.w	r3, r7, #8
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7ff feec 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ad12:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad16:	2119      	movs	r1, #25
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f9bd 	bl	800b098 <SDMMC_GetCmdResp1>
 800ad1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad20:	69fb      	ldr	r3, [r7, #28]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
	...

0800ad2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad38:	230c      	movs	r3, #12
 800ad3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad3c:	2340      	movs	r3, #64	; 0x40
 800ad3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad4a:	f107 0308 	add.w	r3, r7, #8
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff feca 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ad56:	4a05      	ldr	r2, [pc, #20]	; (800ad6c <SDMMC_CmdStopTransfer+0x40>)
 800ad58:	210c      	movs	r1, #12
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f99c 	bl	800b098 <SDMMC_GetCmdResp1>
 800ad60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad62:	69fb      	ldr	r3, [r7, #28]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3720      	adds	r7, #32
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	05f5e100 	.word	0x05f5e100

0800ad70 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b08a      	sub	sp, #40	; 0x28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ad80:	2307      	movs	r3, #7
 800ad82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad84:	2340      	movs	r3, #64	; 0x40
 800ad86:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad90:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad92:	f107 0310 	add.w	r3, r7, #16
 800ad96:	4619      	mov	r1, r3
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f7ff fea6 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ad9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada2:	2107      	movs	r1, #7
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f000 f977 	bl	800b098 <SDMMC_GetCmdResp1>
 800adaa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3728      	adds	r7, #40	; 0x28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b088      	sub	sp, #32
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800adc6:	2300      	movs	r3, #0
 800adc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800add4:	f107 0308 	add.w	r3, r7, #8
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7ff fe85 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f92d 	bl	800b040 <SDMMC_GetCmdError>
 800ade6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ade8:	69fb      	ldr	r3, [r7, #28]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3720      	adds	r7, #32
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b088      	sub	sp, #32
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800adfa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800adfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae00:	2308      	movs	r3, #8
 800ae02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae04:	2340      	movs	r3, #64	; 0x40
 800ae06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae12:	f107 0308 	add.w	r3, r7, #8
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff fe66 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fb24 	bl	800b46c <SDMMC_GetCmdResp7>
 800ae24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae26:	69fb      	ldr	r3, [r7, #28]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3720      	adds	r7, #32
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae3e:	2337      	movs	r3, #55	; 0x37
 800ae40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae42:	2340      	movs	r3, #64	; 0x40
 800ae44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae46:	2300      	movs	r3, #0
 800ae48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae50:	f107 0308 	add.w	r3, r7, #8
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff fe47 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ae5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae60:	2137      	movs	r1, #55	; 0x37
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f918 	bl	800b098 <SDMMC_GetCmdResp1>
 800ae68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae6a:	69fb      	ldr	r3, [r7, #28]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3720      	adds	r7, #32
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b088      	sub	sp, #32
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ae8a:	2329      	movs	r3, #41	; 0x29
 800ae8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae8e:	2340      	movs	r3, #64	; 0x40
 800ae90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae9c:	f107 0308 	add.w	r3, r7, #8
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff fe21 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 fa2b 	bl	800b304 <SDMMC_GetCmdResp3>
 800aeae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb0:	69fb      	ldr	r3, [r7, #28]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3720      	adds	r7, #32
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b088      	sub	sp, #32
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aec8:	2306      	movs	r3, #6
 800aeca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aecc:	2340      	movs	r3, #64	; 0x40
 800aece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aed0:	2300      	movs	r3, #0
 800aed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aed8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aeda:	f107 0308 	add.w	r3, r7, #8
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff fe02 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800aee6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeea:	2106      	movs	r1, #6
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f8d3 	bl	800b098 <SDMMC_GetCmdResp1>
 800aef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef4:	69fb      	ldr	r3, [r7, #28]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3720      	adds	r7, #32
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b088      	sub	sp, #32
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af0a:	2333      	movs	r3, #51	; 0x33
 800af0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af0e:	2340      	movs	r3, #64	; 0x40
 800af10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af1c:	f107 0308 	add.w	r3, r7, #8
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7ff fde1 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800af28:	f241 3288 	movw	r2, #5000	; 0x1388
 800af2c:	2133      	movs	r1, #51	; 0x33
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f8b2 	bl	800b098 <SDMMC_GetCmdResp1>
 800af34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af36:	69fb      	ldr	r3, [r7, #28]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800af48:	2300      	movs	r3, #0
 800af4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800af4c:	2302      	movs	r3, #2
 800af4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800af50:	23c0      	movs	r3, #192	; 0xc0
 800af52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af54:	2300      	movs	r3, #0
 800af56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af5e:	f107 0308 	add.w	r3, r7, #8
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff fdc0 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f982 	bl	800b274 <SDMMC_GetCmdResp2>
 800af70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af72:	69fb      	ldr	r3, [r7, #28]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3720      	adds	r7, #32
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800af8a:	2309      	movs	r3, #9
 800af8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800af8e:	23c0      	movs	r3, #192	; 0xc0
 800af90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af9c:	f107 0308 	add.w	r3, r7, #8
 800afa0:	4619      	mov	r1, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff fda1 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f963 	bl	800b274 <SDMMC_GetCmdResp2>
 800afae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afb0:	69fb      	ldr	r3, [r7, #28]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b088      	sub	sp, #32
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800afc4:	2300      	movs	r3, #0
 800afc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800afc8:	2303      	movs	r3, #3
 800afca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afcc:	2340      	movs	r3, #64	; 0x40
 800afce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afd0:	2300      	movs	r3, #0
 800afd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afda:	f107 0308 	add.w	r3, r7, #8
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff fd82 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	2103      	movs	r1, #3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f9c8 	bl	800b380 <SDMMC_GetCmdResp6>
 800aff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aff2:	69fb      	ldr	r3, [r7, #28]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3720      	adds	r7, #32
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b088      	sub	sp, #32
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b00a:	230d      	movs	r3, #13
 800b00c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b00e:	2340      	movs	r3, #64	; 0x40
 800b010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b012:	2300      	movs	r3, #0
 800b014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b01a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b01c:	f107 0308 	add.w	r3, r7, #8
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7ff fd61 	bl	800aaea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b028:	f241 3288 	movw	r2, #5000	; 0x1388
 800b02c:	210d      	movs	r1, #13
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f832 	bl	800b098 <SDMMC_GetCmdResp1>
 800b034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b036:	69fb      	ldr	r3, [r7, #28]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3720      	adds	r7, #32
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b048:	4b11      	ldr	r3, [pc, #68]	; (800b090 <SDMMC_GetCmdError+0x50>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a11      	ldr	r2, [pc, #68]	; (800b094 <SDMMC_GetCmdError+0x54>)
 800b04e:	fba2 2303 	umull	r2, r3, r2, r3
 800b052:	0a5b      	lsrs	r3, r3, #9
 800b054:	f241 3288 	movw	r2, #5000	; 0x1388
 800b058:	fb02 f303 	mul.w	r3, r2, r3
 800b05c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	1e5a      	subs	r2, r3, #1
 800b062:	60fa      	str	r2, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d102      	bne.n	800b06e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b06c:	e009      	b.n	800b082 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b076:	2b00      	cmp	r3, #0
 800b078:	d0f1      	beq.n	800b05e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	22c5      	movs	r2, #197	; 0xc5
 800b07e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	20000008 	.word	0x20000008
 800b094:	10624dd3 	.word	0x10624dd3

0800b098 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	607a      	str	r2, [r7, #4]
 800b0a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b0a6:	4b70      	ldr	r3, [pc, #448]	; (800b268 <SDMMC_GetCmdResp1+0x1d0>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a70      	ldr	r2, [pc, #448]	; (800b26c <SDMMC_GetCmdResp1+0x1d4>)
 800b0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b0b0:	0a5a      	lsrs	r2, r3, #9
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	fb02 f303 	mul.w	r3, r2, r3
 800b0b8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	61fa      	str	r2, [r7, #28]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0c8:	e0c9      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0ef      	beq.n	800b0ba <SDMMC_GetCmdResp1+0x22>
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1ea      	bne.n	800b0ba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2204      	movs	r2, #4
 800b0f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0f6:	2304      	movs	r3, #4
 800b0f8:	e0b1      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d004      	beq.n	800b110 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2201      	movs	r2, #1
 800b10a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e0a6      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	22c5      	movs	r2, #197	; 0xc5
 800b114:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f7ff fd11 	bl	800ab3e <SDIO_GetCommandResponse>
 800b11c:	4603      	mov	r3, r0
 800b11e:	461a      	mov	r2, r3
 800b120:	7afb      	ldrb	r3, [r7, #11]
 800b122:	4293      	cmp	r3, r2
 800b124:	d001      	beq.n	800b12a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b126:	2301      	movs	r3, #1
 800b128:	e099      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b12a:	2100      	movs	r1, #0
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f7ff fd13 	bl	800ab58 <SDIO_GetResponse>
 800b132:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	4b4e      	ldr	r3, [pc, #312]	; (800b270 <SDMMC_GetCmdResp1+0x1d8>)
 800b138:	4013      	ands	r3, r2
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b13e:	2300      	movs	r3, #0
 800b140:	e08d      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2b00      	cmp	r3, #0
 800b146:	da02      	bge.n	800b14e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b148:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b14c:	e087      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b158:	2340      	movs	r3, #64	; 0x40
 800b15a:	e080      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b166:	2380      	movs	r3, #128	; 0x80
 800b168:	e079      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b174:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b178:	e071      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b184:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b188:	e069      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b198:	e061      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b1a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b1a8:	e059      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b1b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1b8:	e051      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b1c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1c8:	e049      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b1d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1d8:	e041      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b1e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1e8:	e039      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b1f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1f8:	e031      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b204:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b208:	e029      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b214:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b218:	e021      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b224:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b228:	e019      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b234:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b238:	e011      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b244:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b248:	e009      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f003 0308 	and.w	r3, r3, #8
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b254:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b258:	e001      	b.n	800b25e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b25a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20000008 	.word	0x20000008
 800b26c:	10624dd3 	.word	0x10624dd3
 800b270:	fdffe008 	.word	0xfdffe008

0800b274 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b27c:	4b1f      	ldr	r3, [pc, #124]	; (800b2fc <SDMMC_GetCmdResp2+0x88>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a1f      	ldr	r2, [pc, #124]	; (800b300 <SDMMC_GetCmdResp2+0x8c>)
 800b282:	fba2 2303 	umull	r2, r3, r2, r3
 800b286:	0a5b      	lsrs	r3, r3, #9
 800b288:	f241 3288 	movw	r2, #5000	; 0x1388
 800b28c:	fb02 f303 	mul.w	r3, r2, r3
 800b290:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	1e5a      	subs	r2, r3, #1
 800b296:	60fa      	str	r2, [r7, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d102      	bne.n	800b2a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b29c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2a0:	e026      	b.n	800b2f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0ef      	beq.n	800b292 <SDMMC_GetCmdResp2+0x1e>
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1ea      	bne.n	800b292 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d004      	beq.n	800b2d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2204      	movs	r2, #4
 800b2cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2ce:	2304      	movs	r3, #4
 800b2d0:	e00e      	b.n	800b2f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d004      	beq.n	800b2e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e003      	b.n	800b2f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	22c5      	movs	r2, #197	; 0xc5
 800b2ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	20000008 	.word	0x20000008
 800b300:	10624dd3 	.word	0x10624dd3

0800b304 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b30c:	4b1a      	ldr	r3, [pc, #104]	; (800b378 <SDMMC_GetCmdResp3+0x74>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a1a      	ldr	r2, [pc, #104]	; (800b37c <SDMMC_GetCmdResp3+0x78>)
 800b312:	fba2 2303 	umull	r2, r3, r2, r3
 800b316:	0a5b      	lsrs	r3, r3, #9
 800b318:	f241 3288 	movw	r2, #5000	; 0x1388
 800b31c:	fb02 f303 	mul.w	r3, r2, r3
 800b320:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	1e5a      	subs	r2, r3, #1
 800b326:	60fa      	str	r2, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d102      	bne.n	800b332 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b32c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b330:	e01b      	b.n	800b36a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b336:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0ef      	beq.n	800b322 <SDMMC_GetCmdResp3+0x1e>
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1ea      	bne.n	800b322 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	2b00      	cmp	r3, #0
 800b356:	d004      	beq.n	800b362 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2204      	movs	r2, #4
 800b35c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b35e:	2304      	movs	r3, #4
 800b360:	e003      	b.n	800b36a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	22c5      	movs	r2, #197	; 0xc5
 800b366:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	20000008 	.word	0x20000008
 800b37c:	10624dd3 	.word	0x10624dd3

0800b380 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b088      	sub	sp, #32
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	460b      	mov	r3, r1
 800b38a:	607a      	str	r2, [r7, #4]
 800b38c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b38e:	4b35      	ldr	r3, [pc, #212]	; (800b464 <SDMMC_GetCmdResp6+0xe4>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a35      	ldr	r2, [pc, #212]	; (800b468 <SDMMC_GetCmdResp6+0xe8>)
 800b394:	fba2 2303 	umull	r2, r3, r2, r3
 800b398:	0a5b      	lsrs	r3, r3, #9
 800b39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b39e:	fb02 f303 	mul.w	r3, r2, r3
 800b3a2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	1e5a      	subs	r2, r3, #1
 800b3a8:	61fa      	str	r2, [r7, #28]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d102      	bne.n	800b3b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3b2:	e052      	b.n	800b45a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d0ef      	beq.n	800b3a4 <SDMMC_GetCmdResp6+0x24>
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1ea      	bne.n	800b3a4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d2:	f003 0304 	and.w	r3, r3, #4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d004      	beq.n	800b3e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2204      	movs	r2, #4
 800b3de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3e0:	2304      	movs	r3, #4
 800b3e2:	e03a      	b.n	800b45a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d004      	beq.n	800b3fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e02f      	b.n	800b45a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f7ff fb9f 	bl	800ab3e <SDIO_GetCommandResponse>
 800b400:	4603      	mov	r3, r0
 800b402:	461a      	mov	r2, r3
 800b404:	7afb      	ldrb	r3, [r7, #11]
 800b406:	4293      	cmp	r3, r2
 800b408:	d001      	beq.n	800b40e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e025      	b.n	800b45a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	22c5      	movs	r2, #197	; 0xc5
 800b412:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b414:	2100      	movs	r1, #0
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f7ff fb9e 	bl	800ab58 <SDIO_GetResponse>
 800b41c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	0c1b      	lsrs	r3, r3, #16
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b432:	2300      	movs	r3, #0
 800b434:	e011      	b.n	800b45a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b444:	e009      	b.n	800b45a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b454:	e001      	b.n	800b45a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3720      	adds	r7, #32
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20000008 	.word	0x20000008
 800b468:	10624dd3 	.word	0x10624dd3

0800b46c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b474:	4b22      	ldr	r3, [pc, #136]	; (800b500 <SDMMC_GetCmdResp7+0x94>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a22      	ldr	r2, [pc, #136]	; (800b504 <SDMMC_GetCmdResp7+0x98>)
 800b47a:	fba2 2303 	umull	r2, r3, r2, r3
 800b47e:	0a5b      	lsrs	r3, r3, #9
 800b480:	f241 3288 	movw	r2, #5000	; 0x1388
 800b484:	fb02 f303 	mul.w	r3, r2, r3
 800b488:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	1e5a      	subs	r2, r3, #1
 800b48e:	60fa      	str	r2, [r7, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d102      	bne.n	800b49a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b494:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b498:	e02c      	b.n	800b4f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b49e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d0ef      	beq.n	800b48a <SDMMC_GetCmdResp7+0x1e>
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1ea      	bne.n	800b48a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b8:	f003 0304 	and.w	r3, r3, #4
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d004      	beq.n	800b4ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2204      	movs	r2, #4
 800b4c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4c6:	2304      	movs	r3, #4
 800b4c8:	e014      	b.n	800b4f4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d004      	beq.n	800b4e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e009      	b.n	800b4f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2240      	movs	r2, #64	; 0x40
 800b4f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b4f2:	2300      	movs	r3, #0
  
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	20000008 	.word	0x20000008
 800b504:	10624dd3 	.word	0x10624dd3

0800b508 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b50c:	4904      	ldr	r1, [pc, #16]	; (800b520 <MX_FATFS_Init+0x18>)
 800b50e:	4805      	ldr	r0, [pc, #20]	; (800b524 <MX_FATFS_Init+0x1c>)
 800b510:	f000 fa8a 	bl	800ba28 <FATFS_LinkDriver>
 800b514:	4603      	mov	r3, r0
 800b516:	461a      	mov	r2, r3
 800b518:	4b03      	ldr	r3, [pc, #12]	; (800b528 <MX_FATFS_Init+0x20>)
 800b51a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b51c:	bf00      	nop
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	2000b1ec 	.word	0x2000b1ec
 800b524:	08030168 	.word	0x08030168
 800b528:	2000b1e8 	.word	0x2000b1e8

0800b52c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b536:	f000 f87b 	bl	800b630 <BSP_SD_IsDetected>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d001      	beq.n	800b544 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e012      	b.n	800b56a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b544:	480b      	ldr	r0, [pc, #44]	; (800b574 <BSP_SD_Init+0x48>)
 800b546:	f7fc fd05 	bl	8007f54 <HAL_SD_Init>
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d109      	bne.n	800b568 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b558:	4806      	ldr	r0, [pc, #24]	; (800b574 <BSP_SD_Init+0x48>)
 800b55a:	f7fd f94b 	bl	80087f4 <HAL_SD_ConfigWideBusOperation>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d001      	beq.n	800b568 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b568:	79fb      	ldrb	r3, [r7, #7]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	2000b02c 	.word	0x2000b02c

0800b578 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b584:	2300      	movs	r3, #0
 800b586:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	68f9      	ldr	r1, [r7, #12]
 800b58e:	4806      	ldr	r0, [pc, #24]	; (800b5a8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b590:	f7fc fd8e 	bl	80080b0 <HAL_SD_ReadBlocks_DMA>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3718      	adds	r7, #24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	2000b02c 	.word	0x2000b02c

0800b5ac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	68f9      	ldr	r1, [r7, #12]
 800b5c2:	4806      	ldr	r0, [pc, #24]	; (800b5dc <BSP_SD_WriteBlocks_DMA+0x30>)
 800b5c4:	f7fc fe56 	bl	8008274 <HAL_SD_WriteBlocks_DMA>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3718      	adds	r7, #24
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	2000b02c 	.word	0x2000b02c

0800b5e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b5e4:	4805      	ldr	r0, [pc, #20]	; (800b5fc <BSP_SD_GetCardState+0x1c>)
 800b5e6:	f7fd f99f 	bl	8008928 <HAL_SD_GetCardState>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	bf14      	ite	ne
 800b5f0:	2301      	movne	r3, #1
 800b5f2:	2300      	moveq	r3, #0
 800b5f4:	b2db      	uxtb	r3, r3
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	2000b02c 	.word	0x2000b02c

0800b600 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b608:	6879      	ldr	r1, [r7, #4]
 800b60a:	4803      	ldr	r0, [pc, #12]	; (800b618 <BSP_SD_GetCardInfo+0x18>)
 800b60c:	f7fd f8c6 	bl	800879c <HAL_SD_GetCardInfo>
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	2000b02c 	.word	0x2000b02c

0800b61c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b624:	f000 f9a2 	bl	800b96c <BSP_SD_ReadCpltCallback>
}
 800b628:	bf00      	nop
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b636:	2301      	movs	r3, #1
 800b638:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b63a:	f000 f80b 	bl	800b654 <BSP_PlatformIsDetected>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b644:	2300      	movs	r3, #0
 800b646:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b648:	79fb      	ldrb	r3, [r7, #7]
 800b64a:	b2db      	uxtb	r3, r3
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b65a:	2301      	movs	r3, #1
 800b65c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b65e:	2108      	movs	r1, #8
 800b660:	4806      	ldr	r0, [pc, #24]	; (800b67c <BSP_PlatformIsDetected+0x28>)
 800b662:	f7fa fa0d 	bl	8005a80 <HAL_GPIO_ReadPin>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d001      	beq.n	800b670 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b66c:	2300      	movs	r3, #0
 800b66e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b670:	79fb      	ldrb	r3, [r7, #7]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	40021800 	.word	0x40021800

0800b680 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800b688:	f000 fa8e 	bl	800bba8 <osKernelGetTickCount>
 800b68c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800b68e:	e006      	b.n	800b69e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b690:	f7ff ffa6 	bl	800b5e0 <BSP_SD_GetCardState>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	e009      	b.n	800b6b2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800b69e:	f000 fa83 	bl	800bba8 <osKernelGetTickCount>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d8f0      	bhi.n	800b690 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b6ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
	...

0800b6bc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b6c6:	4b0b      	ldr	r3, [pc, #44]	; (800b6f4 <SD_CheckStatus+0x38>)
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b6cc:	f7ff ff88 	bl	800b5e0 <BSP_SD_GetCardState>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d107      	bne.n	800b6e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b6d6:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <SD_CheckStatus+0x38>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	f023 0301 	bic.w	r3, r3, #1
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	4b04      	ldr	r3, [pc, #16]	; (800b6f4 <SD_CheckStatus+0x38>)
 800b6e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b6e6:	4b03      	ldr	r3, [pc, #12]	; (800b6f4 <SD_CheckStatus+0x38>)
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	b2db      	uxtb	r3, r3
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	20000011 	.word	0x20000011

0800b6f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	4603      	mov	r3, r0
 800b700:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b702:	4b1c      	ldr	r3, [pc, #112]	; (800b774 <SD_initialize+0x7c>)
 800b704:	2201      	movs	r2, #1
 800b706:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800b708:	f000 fa06 	bl	800bb18 <osKernelGetState>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d129      	bne.n	800b766 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800b712:	f7ff ff0b 	bl	800b52c <BSP_SD_Init>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d107      	bne.n	800b72c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800b71c:	79fb      	ldrb	r3, [r7, #7]
 800b71e:	4618      	mov	r0, r3
 800b720:	f7ff ffcc 	bl	800b6bc <SD_CheckStatus>
 800b724:	4603      	mov	r3, r0
 800b726:	461a      	mov	r2, r3
 800b728:	4b12      	ldr	r3, [pc, #72]	; (800b774 <SD_initialize+0x7c>)
 800b72a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800b72c:	4b11      	ldr	r3, [pc, #68]	; (800b774 <SD_initialize+0x7c>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	b2db      	uxtb	r3, r3
 800b732:	2b01      	cmp	r3, #1
 800b734:	d017      	beq.n	800b766 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800b736:	4b10      	ldr	r3, [pc, #64]	; (800b778 <SD_initialize+0x80>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d107      	bne.n	800b74e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800b73e:	2200      	movs	r2, #0
 800b740:	2102      	movs	r1, #2
 800b742:	200a      	movs	r0, #10
 800b744:	f000 fc12 	bl	800bf6c <osMessageQueueNew>
 800b748:	4603      	mov	r3, r0
 800b74a:	4a0b      	ldr	r2, [pc, #44]	; (800b778 <SD_initialize+0x80>)
 800b74c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800b74e:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <SD_initialize+0x80>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d107      	bne.n	800b766 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800b756:	4b07      	ldr	r3, [pc, #28]	; (800b774 <SD_initialize+0x7c>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f043 0301 	orr.w	r3, r3, #1
 800b760:	b2da      	uxtb	r2, r3
 800b762:	4b04      	ldr	r3, [pc, #16]	; (800b774 <SD_initialize+0x7c>)
 800b764:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b766:	4b03      	ldr	r3, [pc, #12]	; (800b774 <SD_initialize+0x7c>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	b2db      	uxtb	r3, r3
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20000011 	.word	0x20000011
 800b778:	20000128 	.word	0x20000128

0800b77c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff ff97 	bl	800b6bc <SD_CheckStatus>
 800b78e:	4603      	mov	r3, r0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b088      	sub	sp, #32
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b7ac:	f247 5030 	movw	r0, #30000	; 0x7530
 800b7b0:	f7ff ff66 	bl	800b680 <SD_CheckStatusWithTimeout>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	da01      	bge.n	800b7be <SD_read+0x26>
  {
    return res;
 800b7ba:	7ffb      	ldrb	r3, [r7, #31]
 800b7bc:	e02f      	b.n	800b81e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b7be:	683a      	ldr	r2, [r7, #0]
 800b7c0:	6879      	ldr	r1, [r7, #4]
 800b7c2:	68b8      	ldr	r0, [r7, #8]
 800b7c4:	f7ff fed8 	bl	800b578 <BSP_SD_ReadBlocks_DMA>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800b7cc:	7fbb      	ldrb	r3, [r7, #30]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d124      	bne.n	800b81c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b7d2:	4b15      	ldr	r3, [pc, #84]	; (800b828 <SD_read+0x90>)
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	f107 0112 	add.w	r1, r7, #18
 800b7da:	f247 5330 	movw	r3, #30000	; 0x7530
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f000 fc98 	bl	800c114 <osMessageQueueGet>
 800b7e4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d117      	bne.n	800b81c <SD_read+0x84>
 800b7ec:	8a7b      	ldrh	r3, [r7, #18]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d114      	bne.n	800b81c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800b7f2:	f000 f9d9 	bl	800bba8 <osKernelGetTickCount>
 800b7f6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b7f8:	e007      	b.n	800b80a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b7fa:	f7ff fef1 	bl	800b5e0 <BSP_SD_GetCardState>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <SD_read+0x72>
              {
                res = RES_OK;
 800b804:	2300      	movs	r3, #0
 800b806:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b808:	e008      	b.n	800b81c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b80a:	f000 f9cd 	bl	800bba8 <osKernelGetTickCount>
 800b80e:	4602      	mov	r2, r0
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	f247 522f 	movw	r2, #29999	; 0x752f
 800b818:	4293      	cmp	r3, r2
 800b81a:	d9ee      	bls.n	800b7fa <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b81c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3720      	adds	r7, #32
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20000128 	.word	0x20000128

0800b82c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b088      	sub	sp, #32
 800b830:	af00      	add	r7, sp, #0
 800b832:	60b9      	str	r1, [r7, #8]
 800b834:	607a      	str	r2, [r7, #4]
 800b836:	603b      	str	r3, [r7, #0]
 800b838:	4603      	mov	r3, r0
 800b83a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b840:	f247 5030 	movw	r0, #30000	; 0x7530
 800b844:	f7ff ff1c 	bl	800b680 <SD_CheckStatusWithTimeout>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	da01      	bge.n	800b852 <SD_write+0x26>
  {
    return res;
 800b84e:	7ffb      	ldrb	r3, [r7, #31]
 800b850:	e02d      	b.n	800b8ae <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	6879      	ldr	r1, [r7, #4]
 800b856:	68b8      	ldr	r0, [r7, #8]
 800b858:	f7ff fea8 	bl	800b5ac <BSP_SD_WriteBlocks_DMA>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d124      	bne.n	800b8ac <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b862:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <SD_write+0x8c>)
 800b864:	6818      	ldr	r0, [r3, #0]
 800b866:	f107 0112 	add.w	r1, r7, #18
 800b86a:	f247 5330 	movw	r3, #30000	; 0x7530
 800b86e:	2200      	movs	r2, #0
 800b870:	f000 fc50 	bl	800c114 <osMessageQueueGet>
 800b874:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d117      	bne.n	800b8ac <SD_write+0x80>
 800b87c:	8a7b      	ldrh	r3, [r7, #18]
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d114      	bne.n	800b8ac <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800b882:	f000 f991 	bl	800bba8 <osKernelGetTickCount>
 800b886:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b888:	e007      	b.n	800b89a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b88a:	f7ff fea9 	bl	800b5e0 <BSP_SD_GetCardState>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <SD_write+0x6e>
          {
            res = RES_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	77fb      	strb	r3, [r7, #31]
            break;
 800b898:	e008      	b.n	800b8ac <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b89a:	f000 f985 	bl	800bba8 <osKernelGetTickCount>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	f247 522f 	movw	r2, #29999	; 0x752f
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d9ee      	bls.n	800b88a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800b8ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3720      	adds	r7, #32
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000128 	.word	0x20000128

0800b8bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08c      	sub	sp, #48	; 0x30
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	603a      	str	r2, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b8d2:	4b25      	ldr	r3, [pc, #148]	; (800b968 <SD_ioctl+0xac>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d001      	beq.n	800b8e4 <SD_ioctl+0x28>
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e03c      	b.n	800b95e <SD_ioctl+0xa2>

  switch (cmd)
 800b8e4:	79bb      	ldrb	r3, [r7, #6]
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d834      	bhi.n	800b954 <SD_ioctl+0x98>
 800b8ea:	a201      	add	r2, pc, #4	; (adr r2, 800b8f0 <SD_ioctl+0x34>)
 800b8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f0:	0800b901 	.word	0x0800b901
 800b8f4:	0800b909 	.word	0x0800b909
 800b8f8:	0800b921 	.word	0x0800b921
 800b8fc:	0800b93b 	.word	0x0800b93b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b906:	e028      	b.n	800b95a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b908:	f107 030c 	add.w	r3, r7, #12
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff fe77 	bl	800b600 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b91e:	e01c      	b.n	800b95a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b920:	f107 030c 	add.w	r3, r7, #12
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff fe6b 	bl	800b600 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b938:	e00f      	b.n	800b95a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b93a:	f107 030c 	add.w	r3, r7, #12
 800b93e:	4618      	mov	r0, r3
 800b940:	f7ff fe5e 	bl	800b600 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b946:	0a5a      	lsrs	r2, r3, #9
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b952:	e002      	b.n	800b95a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b954:	2304      	movs	r3, #4
 800b956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b95a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3730      	adds	r7, #48	; 0x30
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	20000011 	.word	0x20000011

0800b96c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800b972:	2301      	movs	r3, #1
 800b974:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800b976:	4b05      	ldr	r3, [pc, #20]	; (800b98c <BSP_SD_ReadCpltCallback+0x20>)
 800b978:	6818      	ldr	r0, [r3, #0]
 800b97a:	1db9      	adds	r1, r7, #6
 800b97c:	2300      	movs	r3, #0
 800b97e:	2200      	movs	r2, #0
 800b980:	f000 fb68 	bl	800c054 <osMessageQueuePut>
#endif
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20000128 	.word	0x20000128

0800b990 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b990:	b480      	push	{r7}
 800b992:	b087      	sub	sp, #28
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	4613      	mov	r3, r2
 800b99c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9a6:	4b1f      	ldr	r3, [pc, #124]	; (800ba24 <FATFS_LinkDriverEx+0x94>)
 800b9a8:	7a5b      	ldrb	r3, [r3, #9]
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d131      	bne.n	800ba14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9b0:	4b1c      	ldr	r3, [pc, #112]	; (800ba24 <FATFS_LinkDriverEx+0x94>)
 800b9b2:	7a5b      	ldrb	r3, [r3, #9]
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	4b1a      	ldr	r3, [pc, #104]	; (800ba24 <FATFS_LinkDriverEx+0x94>)
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b9be:	4b19      	ldr	r3, [pc, #100]	; (800ba24 <FATFS_LinkDriverEx+0x94>)
 800b9c0:	7a5b      	ldrb	r3, [r3, #9]
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	4a17      	ldr	r2, [pc, #92]	; (800ba24 <FATFS_LinkDriverEx+0x94>)
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b9ce:	4b15      	ldr	r3, [pc, #84]	; (800ba24 <FATFS_LinkDriverEx+0x94>)
 800b9d0:	7a5b      	ldrb	r3, [r3, #9]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	4b13      	ldr	r3, [pc, #76]	; (800ba24 <FATFS_LinkDriverEx+0x94>)
 800b9d8:	4413      	add	r3, r2
 800b9da:	79fa      	ldrb	r2, [r7, #7]
 800b9dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b9de:	4b11      	ldr	r3, [pc, #68]	; (800ba24 <FATFS_LinkDriverEx+0x94>)
 800b9e0:	7a5b      	ldrb	r3, [r3, #9]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	b2d1      	uxtb	r1, r2
 800b9e8:	4a0e      	ldr	r2, [pc, #56]	; (800ba24 <FATFS_LinkDriverEx+0x94>)
 800b9ea:	7251      	strb	r1, [r2, #9]
 800b9ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b9ee:	7dbb      	ldrb	r3, [r7, #22]
 800b9f0:	3330      	adds	r3, #48	; 0x30
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	223a      	movs	r2, #58	; 0x3a
 800b9fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	3302      	adds	r3, #2
 800ba04:	222f      	movs	r2, #47	; 0x2f
 800ba06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	3303      	adds	r3, #3
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba10:	2300      	movs	r3, #0
 800ba12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	371c      	adds	r7, #28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	2000012c 	.word	0x2000012c

0800ba28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba32:	2200      	movs	r2, #0
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff ffaa 	bl	800b990 <FATFS_LinkDriverEx>
 800ba3c:	4603      	mov	r3, r0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
	...

0800ba48 <__NVIC_SetPriority>:
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	4603      	mov	r3, r0
 800ba50:	6039      	str	r1, [r7, #0]
 800ba52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	db0a      	blt.n	800ba72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	490c      	ldr	r1, [pc, #48]	; (800ba94 <__NVIC_SetPriority+0x4c>)
 800ba62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba66:	0112      	lsls	r2, r2, #4
 800ba68:	b2d2      	uxtb	r2, r2
 800ba6a:	440b      	add	r3, r1
 800ba6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ba70:	e00a      	b.n	800ba88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	4908      	ldr	r1, [pc, #32]	; (800ba98 <__NVIC_SetPriority+0x50>)
 800ba78:	79fb      	ldrb	r3, [r7, #7]
 800ba7a:	f003 030f 	and.w	r3, r3, #15
 800ba7e:	3b04      	subs	r3, #4
 800ba80:	0112      	lsls	r2, r2, #4
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	440b      	add	r3, r1
 800ba86:	761a      	strb	r2, [r3, #24]
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	e000e100 	.word	0xe000e100
 800ba98:	e000ed00 	.word	0xe000ed00

0800ba9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800baa0:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <SysTick_Handler+0x1c>)
 800baa2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800baa4:	f002 fae4 	bl	800e070 <xTaskGetSchedulerState>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d001      	beq.n	800bab2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800baae:	f003 f9cb 	bl	800ee48 <xPortSysTickHandler>
  }
}
 800bab2:	bf00      	nop
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	e000e010 	.word	0xe000e010

0800babc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bac0:	2100      	movs	r1, #0
 800bac2:	f06f 0004 	mvn.w	r0, #4
 800bac6:	f7ff ffbf 	bl	800ba48 <__NVIC_SetPriority>
#endif
}
 800baca:	bf00      	nop
 800bacc:	bd80      	pop	{r7, pc}
	...

0800bad0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bad6:	f3ef 8305 	mrs	r3, IPSR
 800bada:	603b      	str	r3, [r7, #0]
  return(result);
 800badc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d003      	beq.n	800baea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bae2:	f06f 0305 	mvn.w	r3, #5
 800bae6:	607b      	str	r3, [r7, #4]
 800bae8:	e00c      	b.n	800bb04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800baea:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <osKernelInitialize+0x44>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d105      	bne.n	800bafe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800baf2:	4b08      	ldr	r3, [pc, #32]	; (800bb14 <osKernelInitialize+0x44>)
 800baf4:	2201      	movs	r2, #1
 800baf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	607b      	str	r3, [r7, #4]
 800bafc:	e002      	b.n	800bb04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bafe:	f04f 33ff 	mov.w	r3, #4294967295
 800bb02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb04:	687b      	ldr	r3, [r7, #4]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20000138 	.word	0x20000138

0800bb18 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800bb1e:	f002 faa7 	bl	800e070 <xTaskGetSchedulerState>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d004      	beq.n	800bb32 <osKernelGetState+0x1a>
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d105      	bne.n	800bb38 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	607b      	str	r3, [r7, #4]
      break;
 800bb30:	e00c      	b.n	800bb4c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800bb32:	2303      	movs	r3, #3
 800bb34:	607b      	str	r3, [r7, #4]
      break;
 800bb36:	e009      	b.n	800bb4c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800bb38:	4b07      	ldr	r3, [pc, #28]	; (800bb58 <osKernelGetState+0x40>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d102      	bne.n	800bb46 <osKernelGetState+0x2e>
        state = osKernelReady;
 800bb40:	2301      	movs	r3, #1
 800bb42:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800bb44:	e001      	b.n	800bb4a <osKernelGetState+0x32>
        state = osKernelInactive;
 800bb46:	2300      	movs	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]
      break;
 800bb4a:	bf00      	nop
  }

  return (state);
 800bb4c:	687b      	ldr	r3, [r7, #4]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20000138 	.word	0x20000138

0800bb5c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb62:	f3ef 8305 	mrs	r3, IPSR
 800bb66:	603b      	str	r3, [r7, #0]
  return(result);
 800bb68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d003      	beq.n	800bb76 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bb6e:	f06f 0305 	mvn.w	r3, #5
 800bb72:	607b      	str	r3, [r7, #4]
 800bb74:	e010      	b.n	800bb98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bb76:	4b0b      	ldr	r3, [pc, #44]	; (800bba4 <osKernelStart+0x48>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d109      	bne.n	800bb92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb7e:	f7ff ff9d 	bl	800babc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bb82:	4b08      	ldr	r3, [pc, #32]	; (800bba4 <osKernelStart+0x48>)
 800bb84:	2202      	movs	r2, #2
 800bb86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb88:	f001 fe04 	bl	800d794 <vTaskStartScheduler>
      stat = osOK;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	607b      	str	r3, [r7, #4]
 800bb90:	e002      	b.n	800bb98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bb92:	f04f 33ff 	mov.w	r3, #4294967295
 800bb96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb98:	687b      	ldr	r3, [r7, #4]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	20000138 	.word	0x20000138

0800bba8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbae:	f3ef 8305 	mrs	r3, IPSR
 800bbb2:	603b      	str	r3, [r7, #0]
  return(result);
 800bbb4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800bbba:	f001 ff17 	bl	800d9ec <xTaskGetTickCountFromISR>
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	e002      	b.n	800bbc8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800bbc2:	f001 ff03 	bl	800d9cc <xTaskGetTickCount>
 800bbc6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800bbc8:	687b      	ldr	r3, [r7, #4]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b08e      	sub	sp, #56	; 0x38
 800bbd6:	af04      	add	r7, sp, #16
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbe2:	f3ef 8305 	mrs	r3, IPSR
 800bbe6:	617b      	str	r3, [r7, #20]
  return(result);
 800bbe8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d17e      	bne.n	800bcec <osThreadNew+0x11a>
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d07b      	beq.n	800bcec <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bbf4:	2340      	movs	r3, #64	; 0x40
 800bbf6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bbf8:	2318      	movs	r3, #24
 800bbfa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bc00:	f04f 33ff 	mov.w	r3, #4294967295
 800bc04:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d045      	beq.n	800bc98 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <osThreadNew+0x48>
        name = attr->name;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d002      	beq.n	800bc28 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d008      	beq.n	800bc40 <osThreadNew+0x6e>
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	2b38      	cmp	r3, #56	; 0x38
 800bc32:	d805      	bhi.n	800bc40 <osThreadNew+0x6e>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <osThreadNew+0x72>
        return (NULL);
 800bc40:	2300      	movs	r3, #0
 800bc42:	e054      	b.n	800bcee <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	695b      	ldr	r3, [r3, #20]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d003      	beq.n	800bc54 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	089b      	lsrs	r3, r3, #2
 800bc52:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00e      	beq.n	800bc7a <osThreadNew+0xa8>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	2bbb      	cmp	r3, #187	; 0xbb
 800bc62:	d90a      	bls.n	800bc7a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d006      	beq.n	800bc7a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <osThreadNew+0xa8>
        mem = 1;
 800bc74:	2301      	movs	r3, #1
 800bc76:	61bb      	str	r3, [r7, #24]
 800bc78:	e010      	b.n	800bc9c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10c      	bne.n	800bc9c <osThreadNew+0xca>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d108      	bne.n	800bc9c <osThreadNew+0xca>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d104      	bne.n	800bc9c <osThreadNew+0xca>
          mem = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	61bb      	str	r3, [r7, #24]
 800bc96:	e001      	b.n	800bc9c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d110      	bne.n	800bcc4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bcaa:	9202      	str	r2, [sp, #8]
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	6a3a      	ldr	r2, [r7, #32]
 800bcb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f001 fb7f 	bl	800d3bc <xTaskCreateStatic>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	613b      	str	r3, [r7, #16]
 800bcc2:	e013      	b.n	800bcec <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d110      	bne.n	800bcec <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	f107 0310 	add.w	r3, r7, #16
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f001 fbca 	bl	800d476 <xTaskCreate>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d001      	beq.n	800bcec <osThreadNew+0x11a>
            hTask = NULL;
 800bce8:	2300      	movs	r3, #0
 800bcea:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bcec:	693b      	ldr	r3, [r7, #16]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3728      	adds	r7, #40	; 0x28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b084      	sub	sp, #16
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcfe:	f3ef 8305 	mrs	r3, IPSR
 800bd02:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <osDelay+0x1c>
    stat = osErrorISR;
 800bd0a:	f06f 0305 	mvn.w	r3, #5
 800bd0e:	60fb      	str	r3, [r7, #12]
 800bd10:	e007      	b.n	800bd22 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f001 fd05 	bl	800d72c <vTaskDelay>
    }
  }

  return (stat);
 800bd22:	68fb      	ldr	r3, [r7, #12]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b08a      	sub	sp, #40	; 0x28
 800bd30:	af02      	add	r7, sp, #8
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd3c:	f3ef 8305 	mrs	r3, IPSR
 800bd40:	613b      	str	r3, [r7, #16]
  return(result);
 800bd42:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d175      	bne.n	800be34 <osSemaphoreNew+0x108>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d072      	beq.n	800be34 <osSemaphoreNew+0x108>
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d86e      	bhi.n	800be34 <osSemaphoreNew+0x108>
    mem = -1;
 800bd56:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d015      	beq.n	800bd8e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d006      	beq.n	800bd78 <osSemaphoreNew+0x4c>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	2b4f      	cmp	r3, #79	; 0x4f
 800bd70:	d902      	bls.n	800bd78 <osSemaphoreNew+0x4c>
        mem = 1;
 800bd72:	2301      	movs	r3, #1
 800bd74:	61bb      	str	r3, [r7, #24]
 800bd76:	e00c      	b.n	800bd92 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d108      	bne.n	800bd92 <osSemaphoreNew+0x66>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d104      	bne.n	800bd92 <osSemaphoreNew+0x66>
          mem = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	61bb      	str	r3, [r7, #24]
 800bd8c:	e001      	b.n	800bd92 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd98:	d04c      	beq.n	800be34 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d128      	bne.n	800bdf2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d10a      	bne.n	800bdbc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	2203      	movs	r2, #3
 800bdac:	9200      	str	r2, [sp, #0]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	2001      	movs	r0, #1
 800bdb4:	f000 fb5c 	bl	800c470 <xQueueGenericCreateStatic>
 800bdb8:	61f8      	str	r0, [r7, #28]
 800bdba:	e005      	b.n	800bdc8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bdbc:	2203      	movs	r2, #3
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	f000 fbcd 	bl	800c560 <xQueueGenericCreate>
 800bdc6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d022      	beq.n	800be14 <osSemaphoreNew+0xe8>
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d01f      	beq.n	800be14 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	2100      	movs	r1, #0
 800bdda:	69f8      	ldr	r0, [r7, #28]
 800bddc:	f000 fc88 	bl	800c6f0 <xQueueGenericSend>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d016      	beq.n	800be14 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bde6:	69f8      	ldr	r0, [r7, #28]
 800bde8:	f001 f914 	bl	800d014 <vQueueDelete>
            hSemaphore = NULL;
 800bdec:	2300      	movs	r3, #0
 800bdee:	61fb      	str	r3, [r7, #28]
 800bdf0:	e010      	b.n	800be14 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d108      	bne.n	800be0a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	68b9      	ldr	r1, [r7, #8]
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f000 fc0a 	bl	800c61a <xQueueCreateCountingSemaphoreStatic>
 800be06:	61f8      	str	r0, [r7, #28]
 800be08:	e004      	b.n	800be14 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800be0a:	68b9      	ldr	r1, [r7, #8]
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f000 fc3b 	bl	800c688 <xQueueCreateCountingSemaphore>
 800be12:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00c      	beq.n	800be34 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d003      	beq.n	800be28 <osSemaphoreNew+0xfc>
          name = attr->name;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	e001      	b.n	800be2c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800be28:	2300      	movs	r3, #0
 800be2a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800be2c:	6979      	ldr	r1, [r7, #20]
 800be2e:	69f8      	ldr	r0, [r7, #28]
 800be30:	f001 fa3c 	bl	800d2ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800be34:	69fb      	ldr	r3, [r7, #28]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3720      	adds	r7, #32
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
	...

0800be40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800be4e:	2300      	movs	r3, #0
 800be50:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d103      	bne.n	800be60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800be58:	f06f 0303 	mvn.w	r3, #3
 800be5c:	617b      	str	r3, [r7, #20]
 800be5e:	e039      	b.n	800bed4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be60:	f3ef 8305 	mrs	r3, IPSR
 800be64:	60fb      	str	r3, [r7, #12]
  return(result);
 800be66:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d022      	beq.n	800beb2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800be72:	f06f 0303 	mvn.w	r3, #3
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	e02c      	b.n	800bed4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800be7a:	2300      	movs	r3, #0
 800be7c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800be7e:	f107 0308 	add.w	r3, r7, #8
 800be82:	461a      	mov	r2, r3
 800be84:	2100      	movs	r1, #0
 800be86:	6938      	ldr	r0, [r7, #16]
 800be88:	f001 f844 	bl	800cf14 <xQueueReceiveFromISR>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d003      	beq.n	800be9a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800be92:	f06f 0302 	mvn.w	r3, #2
 800be96:	617b      	str	r3, [r7, #20]
 800be98:	e01c      	b.n	800bed4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d019      	beq.n	800bed4 <osSemaphoreAcquire+0x94>
 800bea0:	4b0f      	ldr	r3, [pc, #60]	; (800bee0 <osSemaphoreAcquire+0xa0>)
 800bea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	e010      	b.n	800bed4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6938      	ldr	r0, [r7, #16]
 800beb6:	f000 ff21 	bl	800ccfc <xQueueSemaphoreTake>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d009      	beq.n	800bed4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800bec6:	f06f 0301 	mvn.w	r3, #1
 800beca:	617b      	str	r3, [r7, #20]
 800becc:	e002      	b.n	800bed4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800bece:	f06f 0302 	mvn.w	r3, #2
 800bed2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bed4:	697b      	ldr	r3, [r7, #20]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	e000ed04 	.word	0xe000ed04

0800bee4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d103      	bne.n	800bf02 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800befa:	f06f 0303 	mvn.w	r3, #3
 800befe:	617b      	str	r3, [r7, #20]
 800bf00:	e02c      	b.n	800bf5c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf02:	f3ef 8305 	mrs	r3, IPSR
 800bf06:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf08:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d01a      	beq.n	800bf44 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bf12:	f107 0308 	add.w	r3, r7, #8
 800bf16:	4619      	mov	r1, r3
 800bf18:	6938      	ldr	r0, [r7, #16]
 800bf1a:	f000 fd82 	bl	800ca22 <xQueueGiveFromISR>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d003      	beq.n	800bf2c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800bf24:	f06f 0302 	mvn.w	r3, #2
 800bf28:	617b      	str	r3, [r7, #20]
 800bf2a:	e017      	b.n	800bf5c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d014      	beq.n	800bf5c <osSemaphoreRelease+0x78>
 800bf32:	4b0d      	ldr	r3, [pc, #52]	; (800bf68 <osSemaphoreRelease+0x84>)
 800bf34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	e00b      	b.n	800bf5c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bf44:	2300      	movs	r3, #0
 800bf46:	2200      	movs	r2, #0
 800bf48:	2100      	movs	r1, #0
 800bf4a:	6938      	ldr	r0, [r7, #16]
 800bf4c:	f000 fbd0 	bl	800c6f0 <xQueueGenericSend>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d002      	beq.n	800bf5c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800bf56:	f06f 0302 	mvn.w	r3, #2
 800bf5a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bf5c:	697b      	ldr	r3, [r7, #20]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	e000ed04 	.word	0xe000ed04

0800bf6c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08a      	sub	sp, #40	; 0x28
 800bf70:	af02      	add	r7, sp, #8
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf7c:	f3ef 8305 	mrs	r3, IPSR
 800bf80:	613b      	str	r3, [r7, #16]
  return(result);
 800bf82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d15f      	bne.n	800c048 <osMessageQueueNew+0xdc>
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d05c      	beq.n	800c048 <osMessageQueueNew+0xdc>
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d059      	beq.n	800c048 <osMessageQueueNew+0xdc>
    mem = -1;
 800bf94:	f04f 33ff 	mov.w	r3, #4294967295
 800bf98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d029      	beq.n	800bff4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d012      	beq.n	800bfce <osMessageQueueNew+0x62>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	2b4f      	cmp	r3, #79	; 0x4f
 800bfae:	d90e      	bls.n	800bfce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	695a      	ldr	r2, [r3, #20]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68b9      	ldr	r1, [r7, #8]
 800bfc0:	fb01 f303 	mul.w	r3, r1, r3
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d302      	bcc.n	800bfce <osMessageQueueNew+0x62>
        mem = 1;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	61bb      	str	r3, [r7, #24]
 800bfcc:	e014      	b.n	800bff8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d110      	bne.n	800bff8 <osMessageQueueNew+0x8c>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10c      	bne.n	800bff8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d108      	bne.n	800bff8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d104      	bne.n	800bff8 <osMessageQueueNew+0x8c>
          mem = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	61bb      	str	r3, [r7, #24]
 800bff2:	e001      	b.n	800bff8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d10b      	bne.n	800c016 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	691a      	ldr	r2, [r3, #16]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	2100      	movs	r1, #0
 800c008:	9100      	str	r1, [sp, #0]
 800c00a:	68b9      	ldr	r1, [r7, #8]
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f000 fa2f 	bl	800c470 <xQueueGenericCreateStatic>
 800c012:	61f8      	str	r0, [r7, #28]
 800c014:	e008      	b.n	800c028 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d105      	bne.n	800c028 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c01c:	2200      	movs	r2, #0
 800c01e:	68b9      	ldr	r1, [r7, #8]
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f000 fa9d 	bl	800c560 <xQueueGenericCreate>
 800c026:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00c      	beq.n	800c048 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d003      	beq.n	800c03c <osMessageQueueNew+0xd0>
        name = attr->name;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	617b      	str	r3, [r7, #20]
 800c03a:	e001      	b.n	800c040 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c040:	6979      	ldr	r1, [r7, #20]
 800c042:	69f8      	ldr	r0, [r7, #28]
 800c044:	f001 f932 	bl	800d2ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c048:	69fb      	ldr	r3, [r7, #28]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3720      	adds	r7, #32
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c054:	b580      	push	{r7, lr}
 800c056:	b088      	sub	sp, #32
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	4613      	mov	r3, r2
 800c062:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c068:	2300      	movs	r3, #0
 800c06a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c06c:	f3ef 8305 	mrs	r3, IPSR
 800c070:	617b      	str	r3, [r7, #20]
  return(result);
 800c072:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c074:	2b00      	cmp	r3, #0
 800c076:	d028      	beq.n	800c0ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d005      	beq.n	800c08a <osMessageQueuePut+0x36>
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <osMessageQueuePut+0x36>
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d003      	beq.n	800c092 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c08a:	f06f 0303 	mvn.w	r3, #3
 800c08e:	61fb      	str	r3, [r7, #28]
 800c090:	e038      	b.n	800c104 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c092:	2300      	movs	r3, #0
 800c094:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c096:	f107 0210 	add.w	r2, r7, #16
 800c09a:	2300      	movs	r3, #0
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	69b8      	ldr	r0, [r7, #24]
 800c0a0:	f000 fc24 	bl	800c8ec <xQueueGenericSendFromISR>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d003      	beq.n	800c0b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c0aa:	f06f 0302 	mvn.w	r3, #2
 800c0ae:	61fb      	str	r3, [r7, #28]
 800c0b0:	e028      	b.n	800c104 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d025      	beq.n	800c104 <osMessageQueuePut+0xb0>
 800c0b8:	4b15      	ldr	r3, [pc, #84]	; (800c110 <osMessageQueuePut+0xbc>)
 800c0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	e01c      	b.n	800c104 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <osMessageQueuePut+0x82>
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d103      	bne.n	800c0de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c0d6:	f06f 0303 	mvn.w	r3, #3
 800c0da:	61fb      	str	r3, [r7, #28]
 800c0dc:	e012      	b.n	800c104 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c0de:	2300      	movs	r3, #0
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	68b9      	ldr	r1, [r7, #8]
 800c0e4:	69b8      	ldr	r0, [r7, #24]
 800c0e6:	f000 fb03 	bl	800c6f0 <xQueueGenericSend>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d009      	beq.n	800c104 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c0f6:	f06f 0301 	mvn.w	r3, #1
 800c0fa:	61fb      	str	r3, [r7, #28]
 800c0fc:	e002      	b.n	800c104 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c0fe:	f06f 0302 	mvn.w	r3, #2
 800c102:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c104:	69fb      	ldr	r3, [r7, #28]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3720      	adds	r7, #32
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	e000ed04 	.word	0xe000ed04

0800c114 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c114:	b580      	push	{r7, lr}
 800c116:	b088      	sub	sp, #32
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
 800c120:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c126:	2300      	movs	r3, #0
 800c128:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c12a:	f3ef 8305 	mrs	r3, IPSR
 800c12e:	617b      	str	r3, [r7, #20]
  return(result);
 800c130:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c132:	2b00      	cmp	r3, #0
 800c134:	d028      	beq.n	800c188 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d005      	beq.n	800c148 <osMessageQueueGet+0x34>
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d002      	beq.n	800c148 <osMessageQueueGet+0x34>
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d003      	beq.n	800c150 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c148:	f06f 0303 	mvn.w	r3, #3
 800c14c:	61fb      	str	r3, [r7, #28]
 800c14e:	e037      	b.n	800c1c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c150:	2300      	movs	r3, #0
 800c152:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c154:	f107 0310 	add.w	r3, r7, #16
 800c158:	461a      	mov	r2, r3
 800c15a:	68b9      	ldr	r1, [r7, #8]
 800c15c:	69b8      	ldr	r0, [r7, #24]
 800c15e:	f000 fed9 	bl	800cf14 <xQueueReceiveFromISR>
 800c162:	4603      	mov	r3, r0
 800c164:	2b01      	cmp	r3, #1
 800c166:	d003      	beq.n	800c170 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c168:	f06f 0302 	mvn.w	r3, #2
 800c16c:	61fb      	str	r3, [r7, #28]
 800c16e:	e027      	b.n	800c1c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d024      	beq.n	800c1c0 <osMessageQueueGet+0xac>
 800c176:	4b15      	ldr	r3, [pc, #84]	; (800c1cc <osMessageQueueGet+0xb8>)
 800c178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c17c:	601a      	str	r2, [r3, #0]
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	e01b      	b.n	800c1c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <osMessageQueueGet+0x80>
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d103      	bne.n	800c19c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c194:	f06f 0303 	mvn.w	r3, #3
 800c198:	61fb      	str	r3, [r7, #28]
 800c19a:	e011      	b.n	800c1c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	68b9      	ldr	r1, [r7, #8]
 800c1a0:	69b8      	ldr	r0, [r7, #24]
 800c1a2:	f000 fccb 	bl	800cb3c <xQueueReceive>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d009      	beq.n	800c1c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c1b2:	f06f 0301 	mvn.w	r3, #1
 800c1b6:	61fb      	str	r3, [r7, #28]
 800c1b8:	e002      	b.n	800c1c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c1ba:	f06f 0302 	mvn.w	r3, #2
 800c1be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c1c0:	69fb      	ldr	r3, [r7, #28]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3720      	adds	r7, #32
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	e000ed04 	.word	0xe000ed04

0800c1d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4a07      	ldr	r2, [pc, #28]	; (800c1fc <vApplicationGetIdleTaskMemory+0x2c>)
 800c1e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	4a06      	ldr	r2, [pc, #24]	; (800c200 <vApplicationGetIdleTaskMemory+0x30>)
 800c1e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2240      	movs	r2, #64	; 0x40
 800c1ec:	601a      	str	r2, [r3, #0]
}
 800c1ee:	bf00      	nop
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	2000013c 	.word	0x2000013c
 800c200:	200001f8 	.word	0x200001f8

0800c204 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	4a07      	ldr	r2, [pc, #28]	; (800c230 <vApplicationGetTimerTaskMemory+0x2c>)
 800c214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	4a06      	ldr	r2, [pc, #24]	; (800c234 <vApplicationGetTimerTaskMemory+0x30>)
 800c21a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2280      	movs	r2, #128	; 0x80
 800c220:	601a      	str	r2, [r3, #0]
}
 800c222:	bf00      	nop
 800c224:	3714      	adds	r7, #20
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	200002f8 	.word	0x200002f8
 800c234:	200003b4 	.word	0x200003b4

0800c238 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f103 0208 	add.w	r2, r3, #8
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f04f 32ff 	mov.w	r2, #4294967295
 800c250:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f103 0208 	add.w	r2, r3, #8
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f103 0208 	add.w	r2, r3, #8
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c286:	bf00      	nop
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c292:	b480      	push	{r7}
 800c294:	b085      	sub	sp, #20
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	689a      	ldr	r2, [r3, #8]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	601a      	str	r2, [r3, #0]
}
 800c2ce:	bf00      	nop
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr

0800c2da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2da:	b480      	push	{r7}
 800c2dc:	b085      	sub	sp, #20
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
 800c2e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f0:	d103      	bne.n	800c2fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	60fb      	str	r3, [r7, #12]
 800c2f8:	e00c      	b.n	800c314 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	60fb      	str	r3, [r7, #12]
 800c300:	e002      	b.n	800c308 <vListInsert+0x2e>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	429a      	cmp	r2, r3
 800c312:	d2f6      	bcs.n	800c302 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	601a      	str	r2, [r3, #0]
}
 800c340:	bf00      	nop
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	6892      	ldr	r2, [r2, #8]
 800c362:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	6852      	ldr	r2, [r2, #4]
 800c36c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	429a      	cmp	r2, r3
 800c376:	d103      	bne.n	800c380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	1e5a      	subs	r2, r3, #1
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10a      	bne.n	800c3ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b8:	f383 8811 	msr	BASEPRI, r3
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c3c6:	bf00      	nop
 800c3c8:	e7fe      	b.n	800c3c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c3ca:	f002 fcab 	bl	800ed24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d6:	68f9      	ldr	r1, [r7, #12]
 800c3d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3da:	fb01 f303 	mul.w	r3, r1, r3
 800c3de:	441a      	add	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	68f9      	ldr	r1, [r7, #12]
 800c3fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c400:	fb01 f303 	mul.w	r3, r1, r3
 800c404:	441a      	add	r2, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	22ff      	movs	r2, #255	; 0xff
 800c40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	22ff      	movs	r2, #255	; 0xff
 800c416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d114      	bne.n	800c44a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d01a      	beq.n	800c45e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3310      	adds	r3, #16
 800c42c:	4618      	mov	r0, r3
 800c42e:	f001 fc5d 	bl	800dcec <xTaskRemoveFromEventList>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d012      	beq.n	800c45e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c438:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <xQueueGenericReset+0xcc>)
 800c43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c43e:	601a      	str	r2, [r3, #0]
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	e009      	b.n	800c45e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3310      	adds	r3, #16
 800c44e:	4618      	mov	r0, r3
 800c450:	f7ff fef2 	bl	800c238 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3324      	adds	r3, #36	; 0x24
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff feed 	bl	800c238 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c45e:	f002 fc91 	bl	800ed84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c462:	2301      	movs	r3, #1
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	e000ed04 	.word	0xe000ed04

0800c470 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08e      	sub	sp, #56	; 0x38
 800c474:	af02      	add	r7, sp, #8
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	607a      	str	r2, [r7, #4]
 800c47c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10a      	bne.n	800c49a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c496:	bf00      	nop
 800c498:	e7fe      	b.n	800c498 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10a      	bne.n	800c4b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <xQueueGenericCreateStatic+0x52>
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <xQueueGenericCreateStatic+0x56>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e000      	b.n	800c4c8 <xQueueGenericCreateStatic+0x58>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10a      	bne.n	800c4e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	623b      	str	r3, [r7, #32]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d102      	bne.n	800c4ee <xQueueGenericCreateStatic+0x7e>
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d101      	bne.n	800c4f2 <xQueueGenericCreateStatic+0x82>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e000      	b.n	800c4f4 <xQueueGenericCreateStatic+0x84>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10a      	bne.n	800c50e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	61fb      	str	r3, [r7, #28]
}
 800c50a:	bf00      	nop
 800c50c:	e7fe      	b.n	800c50c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c50e:	2350      	movs	r3, #80	; 0x50
 800c510:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	2b50      	cmp	r3, #80	; 0x50
 800c516:	d00a      	beq.n	800c52e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	61bb      	str	r3, [r7, #24]
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c52e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00d      	beq.n	800c556 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	2201      	movs	r2, #1
 800c53e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c542:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c548:	9300      	str	r3, [sp, #0]
 800c54a:	4613      	mov	r3, r2
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f000 f83f 	bl	800c5d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c558:	4618      	mov	r0, r3
 800c55a:	3730      	adds	r7, #48	; 0x30
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08a      	sub	sp, #40	; 0x28
 800c564:	af02      	add	r7, sp, #8
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	4613      	mov	r3, r2
 800c56c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10a      	bne.n	800c58a <xQueueGenericCreate+0x2a>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	613b      	str	r3, [r7, #16]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	fb02 f303 	mul.w	r3, r2, r3
 800c592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	3350      	adds	r3, #80	; 0x50
 800c598:	4618      	mov	r0, r3
 800c59a:	f002 fce5 	bl	800ef68 <pvPortMalloc>
 800c59e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d011      	beq.n	800c5ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	3350      	adds	r3, #80	; 0x50
 800c5ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5b8:	79fa      	ldrb	r2, [r7, #7]
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f000 f805 	bl	800c5d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c5ca:	69bb      	ldr	r3, [r7, #24]
	}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3720      	adds	r7, #32
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
 800c5e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d103      	bne.n	800c5f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	69ba      	ldr	r2, [r7, #24]
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	e002      	b.n	800c5f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c602:	2101      	movs	r1, #1
 800c604:	69b8      	ldr	r0, [r7, #24]
 800c606:	f7ff fecb 	bl	800c3a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	78fa      	ldrb	r2, [r7, #3]
 800c60e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c612:	bf00      	nop
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b08a      	sub	sp, #40	; 0x28
 800c61e:	af02      	add	r7, sp, #8
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	60b9      	str	r1, [r7, #8]
 800c624:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d10a      	bne.n	800c642 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	61bb      	str	r3, [r7, #24]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	429a      	cmp	r2, r3
 800c648:	d90a      	bls.n	800c660 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	617b      	str	r3, [r7, #20]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c660:	2302      	movs	r3, #2
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	2100      	movs	r1, #0
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f7ff ff00 	bl	800c470 <xQueueGenericCreateStatic>
 800c670:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d002      	beq.n	800c67e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c67e:	69fb      	ldr	r3, [r7, #28]
	}
 800c680:	4618      	mov	r0, r3
 800c682:	3720      	adds	r7, #32
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10a      	bne.n	800c6ae <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	613b      	str	r3, [r7, #16]
}
 800c6aa:	bf00      	nop
 800c6ac:	e7fe      	b.n	800c6ac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d90a      	bls.n	800c6cc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	60fb      	str	r3, [r7, #12]
}
 800c6c8:	bf00      	nop
 800c6ca:	e7fe      	b.n	800c6ca <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c6cc:	2202      	movs	r2, #2
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7ff ff45 	bl	800c560 <xQueueGenericCreate>
 800c6d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d002      	beq.n	800c6e4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c6e4:	697b      	ldr	r3, [r7, #20]
	}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
	...

0800c6f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b08e      	sub	sp, #56	; 0x38
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c6fe:	2300      	movs	r3, #0
 800c700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10a      	bne.n	800c722 <xQueueGenericSend+0x32>
	__asm volatile
 800c70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c710:	f383 8811 	msr	BASEPRI, r3
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c71e:	bf00      	nop
 800c720:	e7fe      	b.n	800c720 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d103      	bne.n	800c730 <xQueueGenericSend+0x40>
 800c728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <xQueueGenericSend+0x44>
 800c730:	2301      	movs	r3, #1
 800c732:	e000      	b.n	800c736 <xQueueGenericSend+0x46>
 800c734:	2300      	movs	r3, #0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10a      	bne.n	800c750 <xQueueGenericSend+0x60>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c74c:	bf00      	nop
 800c74e:	e7fe      	b.n	800c74e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	2b02      	cmp	r3, #2
 800c754:	d103      	bne.n	800c75e <xQueueGenericSend+0x6e>
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d101      	bne.n	800c762 <xQueueGenericSend+0x72>
 800c75e:	2301      	movs	r3, #1
 800c760:	e000      	b.n	800c764 <xQueueGenericSend+0x74>
 800c762:	2300      	movs	r3, #0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10a      	bne.n	800c77e <xQueueGenericSend+0x8e>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	623b      	str	r3, [r7, #32]
}
 800c77a:	bf00      	nop
 800c77c:	e7fe      	b.n	800c77c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c77e:	f001 fc77 	bl	800e070 <xTaskGetSchedulerState>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <xQueueGenericSend+0x9e>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d101      	bne.n	800c792 <xQueueGenericSend+0xa2>
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <xQueueGenericSend+0xa4>
 800c792:	2300      	movs	r3, #0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <xQueueGenericSend+0xbe>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	61fb      	str	r3, [r7, #28]
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7ae:	f002 fab9 	bl	800ed24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d302      	bcc.n	800c7c4 <xQueueGenericSend+0xd4>
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d129      	bne.n	800c818 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c7c4:	683a      	ldr	r2, [r7, #0]
 800c7c6:	68b9      	ldr	r1, [r7, #8]
 800c7c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7ca:	f000 fc5e 	bl	800d08a <prvCopyDataToQueue>
 800c7ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d010      	beq.n	800c7fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	3324      	adds	r3, #36	; 0x24
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f001 fa85 	bl	800dcec <xTaskRemoveFromEventList>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d013      	beq.n	800c810 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c7e8:	4b3f      	ldr	r3, [pc, #252]	; (800c8e8 <xQueueGenericSend+0x1f8>)
 800c7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	e00a      	b.n	800c810 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d007      	beq.n	800c810 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c800:	4b39      	ldr	r3, [pc, #228]	; (800c8e8 <xQueueGenericSend+0x1f8>)
 800c802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c806:	601a      	str	r2, [r3, #0]
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c810:	f002 fab8 	bl	800ed84 <vPortExitCritical>
				return pdPASS;
 800c814:	2301      	movs	r3, #1
 800c816:	e063      	b.n	800c8e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d103      	bne.n	800c826 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c81e:	f002 fab1 	bl	800ed84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c822:	2300      	movs	r3, #0
 800c824:	e05c      	b.n	800c8e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d106      	bne.n	800c83a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c82c:	f107 0314 	add.w	r3, r7, #20
 800c830:	4618      	mov	r0, r3
 800c832:	f001 fabf 	bl	800ddb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c836:	2301      	movs	r3, #1
 800c838:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c83a:	f002 faa3 	bl	800ed84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c83e:	f001 f819 	bl	800d874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c842:	f002 fa6f 	bl	800ed24 <vPortEnterCritical>
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c84c:	b25b      	sxtb	r3, r3
 800c84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c852:	d103      	bne.n	800c85c <xQueueGenericSend+0x16c>
 800c854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c856:	2200      	movs	r2, #0
 800c858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c862:	b25b      	sxtb	r3, r3
 800c864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c868:	d103      	bne.n	800c872 <xQueueGenericSend+0x182>
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c872:	f002 fa87 	bl	800ed84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c876:	1d3a      	adds	r2, r7, #4
 800c878:	f107 0314 	add.w	r3, r7, #20
 800c87c:	4611      	mov	r1, r2
 800c87e:	4618      	mov	r0, r3
 800c880:	f001 faae 	bl	800dde0 <xTaskCheckForTimeOut>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d124      	bne.n	800c8d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c88a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c88c:	f000 fcf5 	bl	800d27a <prvIsQueueFull>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d018      	beq.n	800c8c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	3310      	adds	r3, #16
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	4611      	mov	r1, r2
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f001 f9d4 	bl	800dc4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8a6:	f000 fc80 	bl	800d1aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c8aa:	f000 fff1 	bl	800d890 <xTaskResumeAll>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f47f af7c 	bne.w	800c7ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <xQueueGenericSend+0x1f8>)
 800c8b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8bc:	601a      	str	r2, [r3, #0]
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	e772      	b.n	800c7ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c8c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8ca:	f000 fc6e 	bl	800d1aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8ce:	f000 ffdf 	bl	800d890 <xTaskResumeAll>
 800c8d2:	e76c      	b.n	800c7ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c8d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c8d6:	f000 fc68 	bl	800d1aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8da:	f000 ffd9 	bl	800d890 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c8de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3738      	adds	r7, #56	; 0x38
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	e000ed04 	.word	0xe000ed04

0800c8ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b090      	sub	sp, #64	; 0x40
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d103      	bne.n	800c928 <xQueueGenericSendFromISR+0x3c>
 800c920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c924:	2b00      	cmp	r3, #0
 800c926:	d101      	bne.n	800c92c <xQueueGenericSendFromISR+0x40>
 800c928:	2301      	movs	r3, #1
 800c92a:	e000      	b.n	800c92e <xQueueGenericSendFromISR+0x42>
 800c92c:	2300      	movs	r3, #0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10a      	bne.n	800c948 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d103      	bne.n	800c956 <xQueueGenericSendFromISR+0x6a>
 800c94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c952:	2b01      	cmp	r3, #1
 800c954:	d101      	bne.n	800c95a <xQueueGenericSendFromISR+0x6e>
 800c956:	2301      	movs	r3, #1
 800c958:	e000      	b.n	800c95c <xQueueGenericSendFromISR+0x70>
 800c95a:	2300      	movs	r3, #0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10a      	bne.n	800c976 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	623b      	str	r3, [r7, #32]
}
 800c972:	bf00      	nop
 800c974:	e7fe      	b.n	800c974 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c976:	f002 fab7 	bl	800eee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c97a:	f3ef 8211 	mrs	r2, BASEPRI
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	61fa      	str	r2, [r7, #28]
 800c990:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c992:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c994:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d302      	bcc.n	800c9a8 <xQueueGenericSendFromISR+0xbc>
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d12f      	bne.n	800ca08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	68b9      	ldr	r1, [r7, #8]
 800c9bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9be:	f000 fb64 	bl	800d08a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c9c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ca:	d112      	bne.n	800c9f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d016      	beq.n	800ca02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	3324      	adds	r3, #36	; 0x24
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f001 f987 	bl	800dcec <xTaskRemoveFromEventList>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00e      	beq.n	800ca02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00b      	beq.n	800ca02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	e007      	b.n	800ca02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c9f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	b25a      	sxtb	r2, r3
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ca02:	2301      	movs	r3, #1
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ca06:	e001      	b.n	800ca0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3740      	adds	r7, #64	; 0x40
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b08e      	sub	sp, #56	; 0x38
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ca30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10a      	bne.n	800ca4c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	623b      	str	r3, [r7, #32]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00a      	beq.n	800ca6a <xQueueGiveFromISR+0x48>
	__asm volatile
 800ca54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca58:	f383 8811 	msr	BASEPRI, r3
 800ca5c:	f3bf 8f6f 	isb	sy
 800ca60:	f3bf 8f4f 	dsb	sy
 800ca64:	61fb      	str	r3, [r7, #28]
}
 800ca66:	bf00      	nop
 800ca68:	e7fe      	b.n	800ca68 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d103      	bne.n	800ca7a <xQueueGiveFromISR+0x58>
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d101      	bne.n	800ca7e <xQueueGiveFromISR+0x5c>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e000      	b.n	800ca80 <xQueueGiveFromISR+0x5e>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10a      	bne.n	800ca9a <xQueueGiveFromISR+0x78>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	61bb      	str	r3, [r7, #24]
}
 800ca96:	bf00      	nop
 800ca98:	e7fe      	b.n	800ca98 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca9a:	f002 fa25 	bl	800eee8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca9e:	f3ef 8211 	mrs	r2, BASEPRI
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	617a      	str	r2, [r7, #20]
 800cab4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cab6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d22b      	bcs.n	800cb22 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800caca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cacc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cada:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cadc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae4:	d112      	bne.n	800cb0c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caea:	2b00      	cmp	r3, #0
 800caec:	d016      	beq.n	800cb1c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	3324      	adds	r3, #36	; 0x24
 800caf2:	4618      	mov	r0, r3
 800caf4:	f001 f8fa 	bl	800dcec <xTaskRemoveFromEventList>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00e      	beq.n	800cb1c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00b      	beq.n	800cb1c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	2201      	movs	r2, #1
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	e007      	b.n	800cb1c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb10:	3301      	adds	r3, #1
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	b25a      	sxtb	r2, r3
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb20:	e001      	b.n	800cb26 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	637b      	str	r3, [r7, #52]	; 0x34
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f383 8811 	msr	BASEPRI, r3
}
 800cb30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3738      	adds	r7, #56	; 0x38
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08c      	sub	sp, #48	; 0x30
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10a      	bne.n	800cb6c <xQueueReceive+0x30>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	623b      	str	r3, [r7, #32]
}
 800cb68:	bf00      	nop
 800cb6a:	e7fe      	b.n	800cb6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d103      	bne.n	800cb7a <xQueueReceive+0x3e>
 800cb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <xQueueReceive+0x42>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e000      	b.n	800cb80 <xQueueReceive+0x44>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10a      	bne.n	800cb9a <xQueueReceive+0x5e>
	__asm volatile
 800cb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	61fb      	str	r3, [r7, #28]
}
 800cb96:	bf00      	nop
 800cb98:	e7fe      	b.n	800cb98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb9a:	f001 fa69 	bl	800e070 <xTaskGetSchedulerState>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <xQueueReceive+0x6e>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <xQueueReceive+0x72>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e000      	b.n	800cbb0 <xQueueReceive+0x74>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <xQueueReceive+0x8e>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	61bb      	str	r3, [r7, #24]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbca:	f002 f8ab 	bl	800ed24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d01f      	beq.n	800cc1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cbda:	68b9      	ldr	r1, [r7, #8]
 800cbdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbde:	f000 fabe 	bl	800d15e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe4:	1e5a      	subs	r2, r3, #1
 800cbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00f      	beq.n	800cc12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf4:	3310      	adds	r3, #16
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f001 f878 	bl	800dcec <xTaskRemoveFromEventList>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d007      	beq.n	800cc12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc02:	4b3d      	ldr	r3, [pc, #244]	; (800ccf8 <xQueueReceive+0x1bc>)
 800cc04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc08:	601a      	str	r2, [r3, #0]
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc12:	f002 f8b7 	bl	800ed84 <vPortExitCritical>
				return pdPASS;
 800cc16:	2301      	movs	r3, #1
 800cc18:	e069      	b.n	800ccee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d103      	bne.n	800cc28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc20:	f002 f8b0 	bl	800ed84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc24:	2300      	movs	r3, #0
 800cc26:	e062      	b.n	800ccee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d106      	bne.n	800cc3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc2e:	f107 0310 	add.w	r3, r7, #16
 800cc32:	4618      	mov	r0, r3
 800cc34:	f001 f8be 	bl	800ddb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc3c:	f002 f8a2 	bl	800ed84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc40:	f000 fe18 	bl	800d874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc44:	f002 f86e 	bl	800ed24 <vPortEnterCritical>
 800cc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc4e:	b25b      	sxtb	r3, r3
 800cc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc54:	d103      	bne.n	800cc5e <xQueueReceive+0x122>
 800cc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc64:	b25b      	sxtb	r3, r3
 800cc66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6a:	d103      	bne.n	800cc74 <xQueueReceive+0x138>
 800cc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc74:	f002 f886 	bl	800ed84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc78:	1d3a      	adds	r2, r7, #4
 800cc7a:	f107 0310 	add.w	r3, r7, #16
 800cc7e:	4611      	mov	r1, r2
 800cc80:	4618      	mov	r0, r3
 800cc82:	f001 f8ad 	bl	800dde0 <xTaskCheckForTimeOut>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d123      	bne.n	800ccd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc8e:	f000 fade 	bl	800d24e <prvIsQueueEmpty>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d017      	beq.n	800ccc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	3324      	adds	r3, #36	; 0x24
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	4611      	mov	r1, r2
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 ffd3 	bl	800dc4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cca8:	f000 fa7f 	bl	800d1aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ccac:	f000 fdf0 	bl	800d890 <xTaskResumeAll>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d189      	bne.n	800cbca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ccb6:	4b10      	ldr	r3, [pc, #64]	; (800ccf8 <xQueueReceive+0x1bc>)
 800ccb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccbc:	601a      	str	r2, [r3, #0]
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	e780      	b.n	800cbca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ccc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccca:	f000 fa6e 	bl	800d1aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccce:	f000 fddf 	bl	800d890 <xTaskResumeAll>
 800ccd2:	e77a      	b.n	800cbca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ccd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccd6:	f000 fa68 	bl	800d1aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccda:	f000 fdd9 	bl	800d890 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cce0:	f000 fab5 	bl	800d24e <prvIsQueueEmpty>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f43f af6f 	beq.w	800cbca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ccec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3730      	adds	r7, #48	; 0x30
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	e000ed04 	.word	0xe000ed04

0800ccfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08e      	sub	sp, #56	; 0x38
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd06:	2300      	movs	r3, #0
 800cd08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10a      	bne.n	800cd2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1c:	f383 8811 	msr	BASEPRI, r3
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	623b      	str	r3, [r7, #32]
}
 800cd2a:	bf00      	nop
 800cd2c:	e7fe      	b.n	800cd2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00a      	beq.n	800cd4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3a:	f383 8811 	msr	BASEPRI, r3
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	61fb      	str	r3, [r7, #28]
}
 800cd48:	bf00      	nop
 800cd4a:	e7fe      	b.n	800cd4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd4c:	f001 f990 	bl	800e070 <xTaskGetSchedulerState>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d102      	bne.n	800cd5c <xQueueSemaphoreTake+0x60>
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d101      	bne.n	800cd60 <xQueueSemaphoreTake+0x64>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e000      	b.n	800cd62 <xQueueSemaphoreTake+0x66>
 800cd60:	2300      	movs	r3, #0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d10a      	bne.n	800cd7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	61bb      	str	r3, [r7, #24]
}
 800cd78:	bf00      	nop
 800cd7a:	e7fe      	b.n	800cd7a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd7c:	f001 ffd2 	bl	800ed24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d024      	beq.n	800cdd6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8e:	1e5a      	subs	r2, r3, #1
 800cd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d104      	bne.n	800cda6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cd9c:	f001 fade 	bl	800e35c <pvTaskIncrementMutexHeldCount>
 800cda0:	4602      	mov	r2, r0
 800cda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00f      	beq.n	800cdce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb0:	3310      	adds	r3, #16
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 ff9a 	bl	800dcec <xTaskRemoveFromEventList>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d007      	beq.n	800cdce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cdbe:	4b54      	ldr	r3, [pc, #336]	; (800cf10 <xQueueSemaphoreTake+0x214>)
 800cdc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cdce:	f001 ffd9 	bl	800ed84 <vPortExitCritical>
				return pdPASS;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e097      	b.n	800cf06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d111      	bne.n	800ce00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00a      	beq.n	800cdf8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	617b      	str	r3, [r7, #20]
}
 800cdf4:	bf00      	nop
 800cdf6:	e7fe      	b.n	800cdf6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cdf8:	f001 ffc4 	bl	800ed84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	e082      	b.n	800cf06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d106      	bne.n	800ce14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce06:	f107 030c 	add.w	r3, r7, #12
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 ffd2 	bl	800ddb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce10:	2301      	movs	r3, #1
 800ce12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce14:	f001 ffb6 	bl	800ed84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce18:	f000 fd2c 	bl	800d874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce1c:	f001 ff82 	bl	800ed24 <vPortEnterCritical>
 800ce20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce26:	b25b      	sxtb	r3, r3
 800ce28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2c:	d103      	bne.n	800ce36 <xQueueSemaphoreTake+0x13a>
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce3c:	b25b      	sxtb	r3, r3
 800ce3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce42:	d103      	bne.n	800ce4c <xQueueSemaphoreTake+0x150>
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce4c:	f001 ff9a 	bl	800ed84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce50:	463a      	mov	r2, r7
 800ce52:	f107 030c 	add.w	r3, r7, #12
 800ce56:	4611      	mov	r1, r2
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 ffc1 	bl	800dde0 <xTaskCheckForTimeOut>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d132      	bne.n	800ceca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce66:	f000 f9f2 	bl	800d24e <prvIsQueueEmpty>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d026      	beq.n	800cebe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d109      	bne.n	800ce8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ce78:	f001 ff54 	bl	800ed24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f001 f913 	bl	800e0ac <xTaskPriorityInherit>
 800ce86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ce88:	f001 ff7c 	bl	800ed84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	3324      	adds	r3, #36	; 0x24
 800ce90:	683a      	ldr	r2, [r7, #0]
 800ce92:	4611      	mov	r1, r2
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 fed9 	bl	800dc4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce9c:	f000 f985 	bl	800d1aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cea0:	f000 fcf6 	bl	800d890 <xTaskResumeAll>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f47f af68 	bne.w	800cd7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ceac:	4b18      	ldr	r3, [pc, #96]	; (800cf10 <xQueueSemaphoreTake+0x214>)
 800ceae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	f3bf 8f6f 	isb	sy
 800cebc:	e75e      	b.n	800cd7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cec0:	f000 f973 	bl	800d1aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cec4:	f000 fce4 	bl	800d890 <xTaskResumeAll>
 800cec8:	e758      	b.n	800cd7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ceca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cecc:	f000 f96d 	bl	800d1aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ced0:	f000 fcde 	bl	800d890 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ced4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ced6:	f000 f9ba 	bl	800d24e <prvIsQueueEmpty>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f43f af4d 	beq.w	800cd7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00d      	beq.n	800cf04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cee8:	f001 ff1c 	bl	800ed24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ceec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ceee:	f000 f8b4 	bl	800d05a <prvGetDisinheritPriorityAfterTimeout>
 800cef2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cefa:	4618      	mov	r0, r3
 800cefc:	f001 f9ac 	bl	800e258 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cf00:	f001 ff40 	bl	800ed84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cf04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3738      	adds	r7, #56	; 0x38
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	e000ed04 	.word	0xe000ed04

0800cf14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b08e      	sub	sp, #56	; 0x38
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10a      	bne.n	800cf40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	623b      	str	r3, [r7, #32]
}
 800cf3c:	bf00      	nop
 800cf3e:	e7fe      	b.n	800cf3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d103      	bne.n	800cf4e <xQueueReceiveFromISR+0x3a>
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d101      	bne.n	800cf52 <xQueueReceiveFromISR+0x3e>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e000      	b.n	800cf54 <xQueueReceiveFromISR+0x40>
 800cf52:	2300      	movs	r3, #0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10a      	bne.n	800cf6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	61fb      	str	r3, [r7, #28]
}
 800cf6a:	bf00      	nop
 800cf6c:	e7fe      	b.n	800cf6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf6e:	f001 ffbb 	bl	800eee8 <vPortValidateInterruptPriority>
	__asm volatile
 800cf72:	f3ef 8211 	mrs	r2, BASEPRI
 800cf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7a:	f383 8811 	msr	BASEPRI, r3
 800cf7e:	f3bf 8f6f 	isb	sy
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	61ba      	str	r2, [r7, #24]
 800cf88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cf8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d02f      	beq.n	800cffa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cfa4:	68b9      	ldr	r1, [r7, #8]
 800cfa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfa8:	f000 f8d9 	bl	800d15e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfae:	1e5a      	subs	r2, r3, #1
 800cfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cfb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfbc:	d112      	bne.n	800cfe4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d016      	beq.n	800cff4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	3310      	adds	r3, #16
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 fe8e 	bl	800dcec <xTaskRemoveFromEventList>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00e      	beq.n	800cff4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00b      	beq.n	800cff4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	e007      	b.n	800cff4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cfe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfe8:	3301      	adds	r3, #1
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	b25a      	sxtb	r2, r3
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cff4:	2301      	movs	r3, #1
 800cff6:	637b      	str	r3, [r7, #52]	; 0x34
 800cff8:	e001      	b.n	800cffe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cffa:	2300      	movs	r3, #0
 800cffc:	637b      	str	r3, [r7, #52]	; 0x34
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	f383 8811 	msr	BASEPRI, r3
}
 800d008:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3738      	adds	r7, #56	; 0x38
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10a      	bne.n	800d03c <vQueueDelete+0x28>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	60bb      	str	r3, [r7, #8]
}
 800d038:	bf00      	nop
 800d03a:	e7fe      	b.n	800d03a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f000 f95f 	bl	800d300 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d102      	bne.n	800d052 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f002 f857 	bl	800f100 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d052:	bf00      	nop
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d05a:	b480      	push	{r7}
 800d05c:	b085      	sub	sp, #20
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d066:	2b00      	cmp	r3, #0
 800d068:	d006      	beq.n	800d078 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d074:	60fb      	str	r3, [r7, #12]
 800d076:	e001      	b.n	800d07c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d078:	2300      	movs	r3, #0
 800d07a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d07c:	68fb      	ldr	r3, [r7, #12]
	}
 800d07e:	4618      	mov	r0, r3
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b086      	sub	sp, #24
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d096:	2300      	movs	r3, #0
 800d098:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10d      	bne.n	800d0c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d14d      	bne.n	800d14c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f001 f861 	bl	800e17c <xTaskPriorityDisinherit>
 800d0ba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	609a      	str	r2, [r3, #8]
 800d0c2:	e043      	b.n	800d14c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d119      	bne.n	800d0fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6858      	ldr	r0, [r3, #4]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	68b9      	ldr	r1, [r7, #8]
 800d0d6:	f021 fa1d 	bl	802e514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e2:	441a      	add	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d32b      	bcc.n	800d14c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	605a      	str	r2, [r3, #4]
 800d0fc:	e026      	b.n	800d14c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	68d8      	ldr	r0, [r3, #12]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d106:	461a      	mov	r2, r3
 800d108:	68b9      	ldr	r1, [r7, #8]
 800d10a:	f021 fa03 	bl	802e514 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	68da      	ldr	r2, [r3, #12]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d116:	425b      	negs	r3, r3
 800d118:	441a      	add	r2, r3
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	68da      	ldr	r2, [r3, #12]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	429a      	cmp	r2, r3
 800d128:	d207      	bcs.n	800d13a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	689a      	ldr	r2, [r3, #8]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d132:	425b      	negs	r3, r3
 800d134:	441a      	add	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d105      	bne.n	800d14c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d002      	beq.n	800d14c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	3b01      	subs	r3, #1
 800d14a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	1c5a      	adds	r2, r3, #1
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d154:	697b      	ldr	r3, [r7, #20]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3718      	adds	r7, #24
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b082      	sub	sp, #8
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d018      	beq.n	800d1a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	68da      	ldr	r2, [r3, #12]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d178:	441a      	add	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	68da      	ldr	r2, [r3, #12]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	429a      	cmp	r2, r3
 800d188:	d303      	bcc.n	800d192 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	68d9      	ldr	r1, [r3, #12]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d19a:	461a      	mov	r2, r3
 800d19c:	6838      	ldr	r0, [r7, #0]
 800d19e:	f021 f9b9 	bl	802e514 <memcpy>
	}
}
 800d1a2:	bf00      	nop
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}

0800d1aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b084      	sub	sp, #16
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d1b2:	f001 fdb7 	bl	800ed24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1be:	e011      	b.n	800d1e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d012      	beq.n	800d1ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3324      	adds	r3, #36	; 0x24
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f000 fd8d 	bl	800dcec <xTaskRemoveFromEventList>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d1d8:	f000 fe64 	bl	800dea4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	dce9      	bgt.n	800d1c0 <prvUnlockQueue+0x16>
 800d1ec:	e000      	b.n	800d1f0 <prvUnlockQueue+0x46>
					break;
 800d1ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	22ff      	movs	r2, #255	; 0xff
 800d1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d1f8:	f001 fdc4 	bl	800ed84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d1fc:	f001 fd92 	bl	800ed24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d206:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d208:	e011      	b.n	800d22e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d012      	beq.n	800d238 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	3310      	adds	r3, #16
 800d216:	4618      	mov	r0, r3
 800d218:	f000 fd68 	bl	800dcec <xTaskRemoveFromEventList>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d222:	f000 fe3f 	bl	800dea4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d226:	7bbb      	ldrb	r3, [r7, #14]
 800d228:	3b01      	subs	r3, #1
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d22e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d232:	2b00      	cmp	r3, #0
 800d234:	dce9      	bgt.n	800d20a <prvUnlockQueue+0x60>
 800d236:	e000      	b.n	800d23a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d238:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	22ff      	movs	r2, #255	; 0xff
 800d23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d242:	f001 fd9f 	bl	800ed84 <vPortExitCritical>
}
 800d246:	bf00      	nop
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d256:	f001 fd65 	bl	800ed24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d102      	bne.n	800d268 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d262:	2301      	movs	r3, #1
 800d264:	60fb      	str	r3, [r7, #12]
 800d266:	e001      	b.n	800d26c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d268:	2300      	movs	r3, #0
 800d26a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d26c:	f001 fd8a 	bl	800ed84 <vPortExitCritical>

	return xReturn;
 800d270:	68fb      	ldr	r3, [r7, #12]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b084      	sub	sp, #16
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d282:	f001 fd4f 	bl	800ed24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d28e:	429a      	cmp	r2, r3
 800d290:	d102      	bne.n	800d298 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d292:	2301      	movs	r3, #1
 800d294:	60fb      	str	r3, [r7, #12]
 800d296:	e001      	b.n	800d29c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d298:	2300      	movs	r3, #0
 800d29a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d29c:	f001 fd72 	bl	800ed84 <vPortExitCritical>

	return xReturn;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
	...

0800d2ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	60fb      	str	r3, [r7, #12]
 800d2ba:	e014      	b.n	800d2e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d2bc:	4a0f      	ldr	r2, [pc, #60]	; (800d2fc <vQueueAddToRegistry+0x50>)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10b      	bne.n	800d2e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d2c8:	490c      	ldr	r1, [pc, #48]	; (800d2fc <vQueueAddToRegistry+0x50>)
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	683a      	ldr	r2, [r7, #0]
 800d2ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d2d2:	4a0a      	ldr	r2, [pc, #40]	; (800d2fc <vQueueAddToRegistry+0x50>)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	4413      	add	r3, r2
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d2de:	e006      	b.n	800d2ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	60fb      	str	r3, [r7, #12]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2b07      	cmp	r3, #7
 800d2ea:	d9e7      	bls.n	800d2bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d2ec:	bf00      	nop
 800d2ee:	bf00      	nop
 800d2f0:	3714      	adds	r7, #20
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	2000b654 	.word	0x2000b654

0800d300 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d300:	b480      	push	{r7}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d308:	2300      	movs	r3, #0
 800d30a:	60fb      	str	r3, [r7, #12]
 800d30c:	e016      	b.n	800d33c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d30e:	4a10      	ldr	r2, [pc, #64]	; (800d350 <vQueueUnregisterQueue+0x50>)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	00db      	lsls	r3, r3, #3
 800d314:	4413      	add	r3, r2
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d10b      	bne.n	800d336 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d31e:	4a0c      	ldr	r2, [pc, #48]	; (800d350 <vQueueUnregisterQueue+0x50>)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2100      	movs	r1, #0
 800d324:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d328:	4a09      	ldr	r2, [pc, #36]	; (800d350 <vQueueUnregisterQueue+0x50>)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	00db      	lsls	r3, r3, #3
 800d32e:	4413      	add	r3, r2
 800d330:	2200      	movs	r2, #0
 800d332:	605a      	str	r2, [r3, #4]
				break;
 800d334:	e006      	b.n	800d344 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3301      	adds	r3, #1
 800d33a:	60fb      	str	r3, [r7, #12]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b07      	cmp	r3, #7
 800d340:	d9e5      	bls.n	800d30e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d342:	bf00      	nop
 800d344:	bf00      	nop
 800d346:	3714      	adds	r7, #20
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	2000b654 	.word	0x2000b654

0800d354 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d364:	f001 fcde 	bl	800ed24 <vPortEnterCritical>
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d36e:	b25b      	sxtb	r3, r3
 800d370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d374:	d103      	bne.n	800d37e <vQueueWaitForMessageRestricted+0x2a>
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2200      	movs	r2, #0
 800d37a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d384:	b25b      	sxtb	r3, r3
 800d386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38a:	d103      	bne.n	800d394 <vQueueWaitForMessageRestricted+0x40>
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	2200      	movs	r2, #0
 800d390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d394:	f001 fcf6 	bl	800ed84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d106      	bne.n	800d3ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	3324      	adds	r3, #36	; 0x24
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	68b9      	ldr	r1, [r7, #8]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 fc73 	bl	800dc94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d3ae:	6978      	ldr	r0, [r7, #20]
 800d3b0:	f7ff fefb 	bl	800d1aa <prvUnlockQueue>
	}
 800d3b4:	bf00      	nop
 800d3b6:	3718      	adds	r7, #24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b08e      	sub	sp, #56	; 0x38
 800d3c0:	af04      	add	r7, sp, #16
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
 800d3c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d10a      	bne.n	800d3e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	623b      	str	r3, [r7, #32]
}
 800d3e2:	bf00      	nop
 800d3e4:	e7fe      	b.n	800d3e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10a      	bne.n	800d402 <xTaskCreateStatic+0x46>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f0:	f383 8811 	msr	BASEPRI, r3
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	61fb      	str	r3, [r7, #28]
}
 800d3fe:	bf00      	nop
 800d400:	e7fe      	b.n	800d400 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d402:	23bc      	movs	r3, #188	; 0xbc
 800d404:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	2bbc      	cmp	r3, #188	; 0xbc
 800d40a:	d00a      	beq.n	800d422 <xTaskCreateStatic+0x66>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	61bb      	str	r3, [r7, #24]
}
 800d41e:	bf00      	nop
 800d420:	e7fe      	b.n	800d420 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d422:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d426:	2b00      	cmp	r3, #0
 800d428:	d01e      	beq.n	800d468 <xTaskCreateStatic+0xac>
 800d42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d01b      	beq.n	800d468 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d438:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43c:	2202      	movs	r2, #2
 800d43e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d442:	2300      	movs	r3, #0
 800d444:	9303      	str	r3, [sp, #12]
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	9302      	str	r3, [sp, #8]
 800d44a:	f107 0314 	add.w	r3, r7, #20
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f000 f850 	bl	800d500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d462:	f000 f8f3 	bl	800d64c <prvAddNewTaskToReadyList>
 800d466:	e001      	b.n	800d46c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d468:	2300      	movs	r3, #0
 800d46a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d46c:	697b      	ldr	r3, [r7, #20]
	}
 800d46e:	4618      	mov	r0, r3
 800d470:	3728      	adds	r7, #40	; 0x28
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d476:	b580      	push	{r7, lr}
 800d478:	b08c      	sub	sp, #48	; 0x30
 800d47a:	af04      	add	r7, sp, #16
 800d47c:	60f8      	str	r0, [r7, #12]
 800d47e:	60b9      	str	r1, [r7, #8]
 800d480:	603b      	str	r3, [r7, #0]
 800d482:	4613      	mov	r3, r2
 800d484:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d486:	88fb      	ldrh	r3, [r7, #6]
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	4618      	mov	r0, r3
 800d48c:	f001 fd6c 	bl	800ef68 <pvPortMalloc>
 800d490:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00e      	beq.n	800d4b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d498:	20bc      	movs	r0, #188	; 0xbc
 800d49a:	f001 fd65 	bl	800ef68 <pvPortMalloc>
 800d49e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d003      	beq.n	800d4ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d4a6:	69fb      	ldr	r3, [r7, #28]
 800d4a8:	697a      	ldr	r2, [r7, #20]
 800d4aa:	631a      	str	r2, [r3, #48]	; 0x30
 800d4ac:	e005      	b.n	800d4ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d4ae:	6978      	ldr	r0, [r7, #20]
 800d4b0:	f001 fe26 	bl	800f100 <vPortFree>
 800d4b4:	e001      	b.n	800d4ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d017      	beq.n	800d4f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4c8:	88fa      	ldrh	r2, [r7, #6]
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	9303      	str	r3, [sp, #12]
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	9302      	str	r3, [sp, #8]
 800d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d4:	9301      	str	r3, [sp, #4]
 800d4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d8:	9300      	str	r3, [sp, #0]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	68b9      	ldr	r1, [r7, #8]
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f000 f80e 	bl	800d500 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4e4:	69f8      	ldr	r0, [r7, #28]
 800d4e6:	f000 f8b1 	bl	800d64c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	61bb      	str	r3, [r7, #24]
 800d4ee:	e002      	b.n	800d4f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d4f6:	69bb      	ldr	r3, [r7, #24]
	}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3720      	adds	r7, #32
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b088      	sub	sp, #32
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
 800d50c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	461a      	mov	r2, r3
 800d518:	21a5      	movs	r1, #165	; 0xa5
 800d51a:	f021 f809 	bl	802e530 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d528:	3b01      	subs	r3, #1
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	f023 0307 	bic.w	r3, r3, #7
 800d536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	f003 0307 	and.w	r3, r3, #7
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00a      	beq.n	800d558 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	617b      	str	r3, [r7, #20]
}
 800d554:	bf00      	nop
 800d556:	e7fe      	b.n	800d556 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d01f      	beq.n	800d59e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d55e:	2300      	movs	r3, #0
 800d560:	61fb      	str	r3, [r7, #28]
 800d562:	e012      	b.n	800d58a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	4413      	add	r3, r2
 800d56a:	7819      	ldrb	r1, [r3, #0]
 800d56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	4413      	add	r3, r2
 800d572:	3334      	adds	r3, #52	; 0x34
 800d574:	460a      	mov	r2, r1
 800d576:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	4413      	add	r3, r2
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d006      	beq.n	800d592 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	3301      	adds	r3, #1
 800d588:	61fb      	str	r3, [r7, #28]
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	2b0f      	cmp	r3, #15
 800d58e:	d9e9      	bls.n	800d564 <prvInitialiseNewTask+0x64>
 800d590:	e000      	b.n	800d594 <prvInitialiseNewTask+0x94>
			{
				break;
 800d592:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d59c:	e003      	b.n	800d5a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a8:	2b37      	cmp	r3, #55	; 0x37
 800d5aa:	d901      	bls.n	800d5b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d5ac:	2337      	movs	r3, #55	; 0x37
 800d5ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5be:	2200      	movs	r2, #0
 800d5c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fe fe56 	bl	800c278 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	3318      	adds	r3, #24
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fe fe51 	bl	800c278 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fe:	3354      	adds	r3, #84	; 0x54
 800d600:	2260      	movs	r2, #96	; 0x60
 800d602:	2100      	movs	r1, #0
 800d604:	4618      	mov	r0, r3
 800d606:	f020 ff93 	bl	802e530 <memset>
 800d60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60c:	4a0c      	ldr	r2, [pc, #48]	; (800d640 <prvInitialiseNewTask+0x140>)
 800d60e:	659a      	str	r2, [r3, #88]	; 0x58
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	4a0c      	ldr	r2, [pc, #48]	; (800d644 <prvInitialiseNewTask+0x144>)
 800d614:	65da      	str	r2, [r3, #92]	; 0x5c
 800d616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d618:	4a0b      	ldr	r2, [pc, #44]	; (800d648 <prvInitialiseNewTask+0x148>)
 800d61a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	68f9      	ldr	r1, [r7, #12]
 800d620:	69b8      	ldr	r0, [r7, #24]
 800d622:	f001 fa51 	bl	800eac8 <pxPortInitialiseStack>
 800d626:	4602      	mov	r2, r0
 800d628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d002      	beq.n	800d638 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d636:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d638:	bf00      	nop
 800d63a:	3720      	adds	r7, #32
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	08034088 	.word	0x08034088
 800d644:	080340a8 	.word	0x080340a8
 800d648:	08034068 	.word	0x08034068

0800d64c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d654:	f001 fb66 	bl	800ed24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d658:	4b2d      	ldr	r3, [pc, #180]	; (800d710 <prvAddNewTaskToReadyList+0xc4>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	3301      	adds	r3, #1
 800d65e:	4a2c      	ldr	r2, [pc, #176]	; (800d710 <prvAddNewTaskToReadyList+0xc4>)
 800d660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d662:	4b2c      	ldr	r3, [pc, #176]	; (800d714 <prvAddNewTaskToReadyList+0xc8>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d109      	bne.n	800d67e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d66a:	4a2a      	ldr	r2, [pc, #168]	; (800d714 <prvAddNewTaskToReadyList+0xc8>)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d670:	4b27      	ldr	r3, [pc, #156]	; (800d710 <prvAddNewTaskToReadyList+0xc4>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2b01      	cmp	r3, #1
 800d676:	d110      	bne.n	800d69a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d678:	f000 fc38 	bl	800deec <prvInitialiseTaskLists>
 800d67c:	e00d      	b.n	800d69a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d67e:	4b26      	ldr	r3, [pc, #152]	; (800d718 <prvAddNewTaskToReadyList+0xcc>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d109      	bne.n	800d69a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d686:	4b23      	ldr	r3, [pc, #140]	; (800d714 <prvAddNewTaskToReadyList+0xc8>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d690:	429a      	cmp	r2, r3
 800d692:	d802      	bhi.n	800d69a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d694:	4a1f      	ldr	r2, [pc, #124]	; (800d714 <prvAddNewTaskToReadyList+0xc8>)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d69a:	4b20      	ldr	r3, [pc, #128]	; (800d71c <prvAddNewTaskToReadyList+0xd0>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	4a1e      	ldr	r2, [pc, #120]	; (800d71c <prvAddNewTaskToReadyList+0xd0>)
 800d6a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d6a4:	4b1d      	ldr	r3, [pc, #116]	; (800d71c <prvAddNewTaskToReadyList+0xd0>)
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b0:	4b1b      	ldr	r3, [pc, #108]	; (800d720 <prvAddNewTaskToReadyList+0xd4>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d903      	bls.n	800d6c0 <prvAddNewTaskToReadyList+0x74>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6bc:	4a18      	ldr	r2, [pc, #96]	; (800d720 <prvAddNewTaskToReadyList+0xd4>)
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	4413      	add	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	4a15      	ldr	r2, [pc, #84]	; (800d724 <prvAddNewTaskToReadyList+0xd8>)
 800d6ce:	441a      	add	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	3304      	adds	r3, #4
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	f7fe fddb 	bl	800c292 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d6dc:	f001 fb52 	bl	800ed84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d6e0:	4b0d      	ldr	r3, [pc, #52]	; (800d718 <prvAddNewTaskToReadyList+0xcc>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00e      	beq.n	800d706 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6e8:	4b0a      	ldr	r3, [pc, #40]	; (800d714 <prvAddNewTaskToReadyList+0xc8>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d207      	bcs.n	800d706 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d6f6:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <prvAddNewTaskToReadyList+0xdc>)
 800d6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d706:	bf00      	nop
 800d708:	3708      	adds	r7, #8
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	20000a88 	.word	0x20000a88
 800d714:	200005b4 	.word	0x200005b4
 800d718:	20000a94 	.word	0x20000a94
 800d71c:	20000aa4 	.word	0x20000aa4
 800d720:	20000a90 	.word	0x20000a90
 800d724:	200005b8 	.word	0x200005b8
 800d728:	e000ed04 	.word	0xe000ed04

0800d72c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d734:	2300      	movs	r3, #0
 800d736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d017      	beq.n	800d76e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d73e:	4b13      	ldr	r3, [pc, #76]	; (800d78c <vTaskDelay+0x60>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d00a      	beq.n	800d75c <vTaskDelay+0x30>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	60bb      	str	r3, [r7, #8]
}
 800d758:	bf00      	nop
 800d75a:	e7fe      	b.n	800d75a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d75c:	f000 f88a 	bl	800d874 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d760:	2100      	movs	r1, #0
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fe0e 	bl	800e384 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d768:	f000 f892 	bl	800d890 <xTaskResumeAll>
 800d76c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d107      	bne.n	800d784 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d774:	4b06      	ldr	r3, [pc, #24]	; (800d790 <vTaskDelay+0x64>)
 800d776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d77a:	601a      	str	r2, [r3, #0]
 800d77c:	f3bf 8f4f 	dsb	sy
 800d780:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d784:	bf00      	nop
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	20000ab0 	.word	0x20000ab0
 800d790:	e000ed04 	.word	0xe000ed04

0800d794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b08a      	sub	sp, #40	; 0x28
 800d798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d7a2:	463a      	mov	r2, r7
 800d7a4:	1d39      	adds	r1, r7, #4
 800d7a6:	f107 0308 	add.w	r3, r7, #8
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fe fd10 	bl	800c1d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	9202      	str	r2, [sp, #8]
 800d7b8:	9301      	str	r3, [sp, #4]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	2300      	movs	r3, #0
 800d7c0:	460a      	mov	r2, r1
 800d7c2:	4924      	ldr	r1, [pc, #144]	; (800d854 <vTaskStartScheduler+0xc0>)
 800d7c4:	4824      	ldr	r0, [pc, #144]	; (800d858 <vTaskStartScheduler+0xc4>)
 800d7c6:	f7ff fdf9 	bl	800d3bc <xTaskCreateStatic>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	4a23      	ldr	r2, [pc, #140]	; (800d85c <vTaskStartScheduler+0xc8>)
 800d7ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d7d0:	4b22      	ldr	r3, [pc, #136]	; (800d85c <vTaskStartScheduler+0xc8>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	e001      	b.n	800d7e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d102      	bne.n	800d7ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d7e8:	f000 fe20 	bl	800e42c <xTimerCreateTimerTask>
 800d7ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d11b      	bne.n	800d82c <vTaskStartScheduler+0x98>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	613b      	str	r3, [r7, #16]
}
 800d806:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d808:	4b15      	ldr	r3, [pc, #84]	; (800d860 <vTaskStartScheduler+0xcc>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3354      	adds	r3, #84	; 0x54
 800d80e:	4a15      	ldr	r2, [pc, #84]	; (800d864 <vTaskStartScheduler+0xd0>)
 800d810:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d812:	4b15      	ldr	r3, [pc, #84]	; (800d868 <vTaskStartScheduler+0xd4>)
 800d814:	f04f 32ff 	mov.w	r2, #4294967295
 800d818:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d81a:	4b14      	ldr	r3, [pc, #80]	; (800d86c <vTaskStartScheduler+0xd8>)
 800d81c:	2201      	movs	r2, #1
 800d81e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d820:	4b13      	ldr	r3, [pc, #76]	; (800d870 <vTaskStartScheduler+0xdc>)
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d826:	f001 f9db 	bl	800ebe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d82a:	e00e      	b.n	800d84a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d832:	d10a      	bne.n	800d84a <vTaskStartScheduler+0xb6>
	__asm volatile
 800d834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d838:	f383 8811 	msr	BASEPRI, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f3bf 8f4f 	dsb	sy
 800d844:	60fb      	str	r3, [r7, #12]
}
 800d846:	bf00      	nop
 800d848:	e7fe      	b.n	800d848 <vTaskStartScheduler+0xb4>
}
 800d84a:	bf00      	nop
 800d84c:	3718      	adds	r7, #24
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	0802f4bc 	.word	0x0802f4bc
 800d858:	0800debd 	.word	0x0800debd
 800d85c:	20000aac 	.word	0x20000aac
 800d860:	200005b4 	.word	0x200005b4
 800d864:	20000098 	.word	0x20000098
 800d868:	20000aa8 	.word	0x20000aa8
 800d86c:	20000a94 	.word	0x20000a94
 800d870:	20000a8c 	.word	0x20000a8c

0800d874 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d874:	b480      	push	{r7}
 800d876:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d878:	4b04      	ldr	r3, [pc, #16]	; (800d88c <vTaskSuspendAll+0x18>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	3301      	adds	r3, #1
 800d87e:	4a03      	ldr	r2, [pc, #12]	; (800d88c <vTaskSuspendAll+0x18>)
 800d880:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d882:	bf00      	nop
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	20000ab0 	.word	0x20000ab0

0800d890 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d896:	2300      	movs	r3, #0
 800d898:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d89a:	2300      	movs	r3, #0
 800d89c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d89e:	4b42      	ldr	r3, [pc, #264]	; (800d9a8 <xTaskResumeAll+0x118>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d10a      	bne.n	800d8bc <xTaskResumeAll+0x2c>
	__asm volatile
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	603b      	str	r3, [r7, #0]
}
 800d8b8:	bf00      	nop
 800d8ba:	e7fe      	b.n	800d8ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d8bc:	f001 fa32 	bl	800ed24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d8c0:	4b39      	ldr	r3, [pc, #228]	; (800d9a8 <xTaskResumeAll+0x118>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	4a38      	ldr	r2, [pc, #224]	; (800d9a8 <xTaskResumeAll+0x118>)
 800d8c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8ca:	4b37      	ldr	r3, [pc, #220]	; (800d9a8 <xTaskResumeAll+0x118>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d162      	bne.n	800d998 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d8d2:	4b36      	ldr	r3, [pc, #216]	; (800d9ac <xTaskResumeAll+0x11c>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d05e      	beq.n	800d998 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8da:	e02f      	b.n	800d93c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8dc:	4b34      	ldr	r3, [pc, #208]	; (800d9b0 <xTaskResumeAll+0x120>)
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	3318      	adds	r3, #24
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7fe fd2f 	bl	800c34c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3304      	adds	r3, #4
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fe fd2a 	bl	800c34c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8fc:	4b2d      	ldr	r3, [pc, #180]	; (800d9b4 <xTaskResumeAll+0x124>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	429a      	cmp	r2, r3
 800d902:	d903      	bls.n	800d90c <xTaskResumeAll+0x7c>
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d908:	4a2a      	ldr	r2, [pc, #168]	; (800d9b4 <xTaskResumeAll+0x124>)
 800d90a:	6013      	str	r3, [r2, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d910:	4613      	mov	r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	4413      	add	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4a27      	ldr	r2, [pc, #156]	; (800d9b8 <xTaskResumeAll+0x128>)
 800d91a:	441a      	add	r2, r3
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3304      	adds	r3, #4
 800d920:	4619      	mov	r1, r3
 800d922:	4610      	mov	r0, r2
 800d924:	f7fe fcb5 	bl	800c292 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d92c:	4b23      	ldr	r3, [pc, #140]	; (800d9bc <xTaskResumeAll+0x12c>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d932:	429a      	cmp	r2, r3
 800d934:	d302      	bcc.n	800d93c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d936:	4b22      	ldr	r3, [pc, #136]	; (800d9c0 <xTaskResumeAll+0x130>)
 800d938:	2201      	movs	r2, #1
 800d93a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d93c:	4b1c      	ldr	r3, [pc, #112]	; (800d9b0 <xTaskResumeAll+0x120>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d1cb      	bne.n	800d8dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d94a:	f000 fb71 	bl	800e030 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d94e:	4b1d      	ldr	r3, [pc, #116]	; (800d9c4 <xTaskResumeAll+0x134>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d010      	beq.n	800d97c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d95a:	f000 f859 	bl	800da10 <xTaskIncrementTick>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d964:	4b16      	ldr	r3, [pc, #88]	; (800d9c0 <xTaskResumeAll+0x130>)
 800d966:	2201      	movs	r2, #1
 800d968:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	3b01      	subs	r3, #1
 800d96e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1f1      	bne.n	800d95a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d976:	4b13      	ldr	r3, [pc, #76]	; (800d9c4 <xTaskResumeAll+0x134>)
 800d978:	2200      	movs	r2, #0
 800d97a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d97c:	4b10      	ldr	r3, [pc, #64]	; (800d9c0 <xTaskResumeAll+0x130>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d009      	beq.n	800d998 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d984:	2301      	movs	r3, #1
 800d986:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d988:	4b0f      	ldr	r3, [pc, #60]	; (800d9c8 <xTaskResumeAll+0x138>)
 800d98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d998:	f001 f9f4 	bl	800ed84 <vPortExitCritical>

	return xAlreadyYielded;
 800d99c:	68bb      	ldr	r3, [r7, #8]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20000ab0 	.word	0x20000ab0
 800d9ac:	20000a88 	.word	0x20000a88
 800d9b0:	20000a48 	.word	0x20000a48
 800d9b4:	20000a90 	.word	0x20000a90
 800d9b8:	200005b8 	.word	0x200005b8
 800d9bc:	200005b4 	.word	0x200005b4
 800d9c0:	20000a9c 	.word	0x20000a9c
 800d9c4:	20000a98 	.word	0x20000a98
 800d9c8:	e000ed04 	.word	0xe000ed04

0800d9cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d9d2:	4b05      	ldr	r3, [pc, #20]	; (800d9e8 <xTaskGetTickCount+0x1c>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d9d8:	687b      	ldr	r3, [r7, #4]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	20000a8c 	.word	0x20000a8c

0800d9ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9f2:	f001 fa79 	bl	800eee8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d9fa:	4b04      	ldr	r3, [pc, #16]	; (800da0c <xTaskGetTickCountFromISR+0x20>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da00:	683b      	ldr	r3, [r7, #0]
}
 800da02:	4618      	mov	r0, r3
 800da04:	3708      	adds	r7, #8
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	20000a8c 	.word	0x20000a8c

0800da10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800da16:	2300      	movs	r3, #0
 800da18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da1a:	4b4f      	ldr	r3, [pc, #316]	; (800db58 <xTaskIncrementTick+0x148>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f040 808f 	bne.w	800db42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da24:	4b4d      	ldr	r3, [pc, #308]	; (800db5c <xTaskIncrementTick+0x14c>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	3301      	adds	r3, #1
 800da2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800da2c:	4a4b      	ldr	r2, [pc, #300]	; (800db5c <xTaskIncrementTick+0x14c>)
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d120      	bne.n	800da7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800da38:	4b49      	ldr	r3, [pc, #292]	; (800db60 <xTaskIncrementTick+0x150>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00a      	beq.n	800da58 <xTaskIncrementTick+0x48>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	603b      	str	r3, [r7, #0]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <xTaskIncrementTick+0x46>
 800da58:	4b41      	ldr	r3, [pc, #260]	; (800db60 <xTaskIncrementTick+0x150>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	4b41      	ldr	r3, [pc, #260]	; (800db64 <xTaskIncrementTick+0x154>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a3f      	ldr	r2, [pc, #252]	; (800db60 <xTaskIncrementTick+0x150>)
 800da64:	6013      	str	r3, [r2, #0]
 800da66:	4a3f      	ldr	r2, [pc, #252]	; (800db64 <xTaskIncrementTick+0x154>)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	4b3e      	ldr	r3, [pc, #248]	; (800db68 <xTaskIncrementTick+0x158>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	3301      	adds	r3, #1
 800da72:	4a3d      	ldr	r2, [pc, #244]	; (800db68 <xTaskIncrementTick+0x158>)
 800da74:	6013      	str	r3, [r2, #0]
 800da76:	f000 fadb 	bl	800e030 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da7a:	4b3c      	ldr	r3, [pc, #240]	; (800db6c <xTaskIncrementTick+0x15c>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	693a      	ldr	r2, [r7, #16]
 800da80:	429a      	cmp	r2, r3
 800da82:	d349      	bcc.n	800db18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da84:	4b36      	ldr	r3, [pc, #216]	; (800db60 <xTaskIncrementTick+0x150>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d104      	bne.n	800da98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da8e:	4b37      	ldr	r3, [pc, #220]	; (800db6c <xTaskIncrementTick+0x15c>)
 800da90:	f04f 32ff 	mov.w	r2, #4294967295
 800da94:	601a      	str	r2, [r3, #0]
					break;
 800da96:	e03f      	b.n	800db18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da98:	4b31      	ldr	r3, [pc, #196]	; (800db60 <xTaskIncrementTick+0x150>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800daa8:	693a      	ldr	r2, [r7, #16]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	429a      	cmp	r2, r3
 800daae:	d203      	bcs.n	800dab8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dab0:	4a2e      	ldr	r2, [pc, #184]	; (800db6c <xTaskIncrementTick+0x15c>)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dab6:	e02f      	b.n	800db18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	3304      	adds	r3, #4
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fe fc45 	bl	800c34c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d004      	beq.n	800dad4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	3318      	adds	r3, #24
 800dace:	4618      	mov	r0, r3
 800dad0:	f7fe fc3c 	bl	800c34c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad8:	4b25      	ldr	r3, [pc, #148]	; (800db70 <xTaskIncrementTick+0x160>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d903      	bls.n	800dae8 <xTaskIncrementTick+0xd8>
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae4:	4a22      	ldr	r2, [pc, #136]	; (800db70 <xTaskIncrementTick+0x160>)
 800dae6:	6013      	str	r3, [r2, #0]
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daec:	4613      	mov	r3, r2
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	4413      	add	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4a1f      	ldr	r2, [pc, #124]	; (800db74 <xTaskIncrementTick+0x164>)
 800daf6:	441a      	add	r2, r3
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	3304      	adds	r3, #4
 800dafc:	4619      	mov	r1, r3
 800dafe:	4610      	mov	r0, r2
 800db00:	f7fe fbc7 	bl	800c292 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db08:	4b1b      	ldr	r3, [pc, #108]	; (800db78 <xTaskIncrementTick+0x168>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0e:	429a      	cmp	r2, r3
 800db10:	d3b8      	bcc.n	800da84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800db12:	2301      	movs	r3, #1
 800db14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db16:	e7b5      	b.n	800da84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db18:	4b17      	ldr	r3, [pc, #92]	; (800db78 <xTaskIncrementTick+0x168>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db1e:	4915      	ldr	r1, [pc, #84]	; (800db74 <xTaskIncrementTick+0x164>)
 800db20:	4613      	mov	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	440b      	add	r3, r1
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d901      	bls.n	800db34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800db30:	2301      	movs	r3, #1
 800db32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800db34:	4b11      	ldr	r3, [pc, #68]	; (800db7c <xTaskIncrementTick+0x16c>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d007      	beq.n	800db4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800db3c:	2301      	movs	r3, #1
 800db3e:	617b      	str	r3, [r7, #20]
 800db40:	e004      	b.n	800db4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800db42:	4b0f      	ldr	r3, [pc, #60]	; (800db80 <xTaskIncrementTick+0x170>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	3301      	adds	r3, #1
 800db48:	4a0d      	ldr	r2, [pc, #52]	; (800db80 <xTaskIncrementTick+0x170>)
 800db4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800db4c:	697b      	ldr	r3, [r7, #20]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3718      	adds	r7, #24
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	20000ab0 	.word	0x20000ab0
 800db5c:	20000a8c 	.word	0x20000a8c
 800db60:	20000a40 	.word	0x20000a40
 800db64:	20000a44 	.word	0x20000a44
 800db68:	20000aa0 	.word	0x20000aa0
 800db6c:	20000aa8 	.word	0x20000aa8
 800db70:	20000a90 	.word	0x20000a90
 800db74:	200005b8 	.word	0x200005b8
 800db78:	200005b4 	.word	0x200005b4
 800db7c:	20000a9c 	.word	0x20000a9c
 800db80:	20000a98 	.word	0x20000a98

0800db84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db8a:	4b2a      	ldr	r3, [pc, #168]	; (800dc34 <vTaskSwitchContext+0xb0>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db92:	4b29      	ldr	r3, [pc, #164]	; (800dc38 <vTaskSwitchContext+0xb4>)
 800db94:	2201      	movs	r2, #1
 800db96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db98:	e046      	b.n	800dc28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800db9a:	4b27      	ldr	r3, [pc, #156]	; (800dc38 <vTaskSwitchContext+0xb4>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dba0:	4b26      	ldr	r3, [pc, #152]	; (800dc3c <vTaskSwitchContext+0xb8>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	e010      	b.n	800dbca <vTaskSwitchContext+0x46>
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10a      	bne.n	800dbc4 <vTaskSwitchContext+0x40>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	607b      	str	r3, [r7, #4]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <vTaskSwitchContext+0x3e>
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	60fb      	str	r3, [r7, #12]
 800dbca:	491d      	ldr	r1, [pc, #116]	; (800dc40 <vTaskSwitchContext+0xbc>)
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	4613      	mov	r3, r2
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	4413      	add	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	440b      	add	r3, r1
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0e4      	beq.n	800dba8 <vTaskSwitchContext+0x24>
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	4413      	add	r3, r2
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	4a15      	ldr	r2, [pc, #84]	; (800dc40 <vTaskSwitchContext+0xbc>)
 800dbea:	4413      	add	r3, r2
 800dbec:	60bb      	str	r3, [r7, #8]
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	605a      	str	r2, [r3, #4]
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	3308      	adds	r3, #8
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d104      	bne.n	800dc0e <vTaskSwitchContext+0x8a>
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	685a      	ldr	r2, [r3, #4]
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	605a      	str	r2, [r3, #4]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	4a0b      	ldr	r2, [pc, #44]	; (800dc44 <vTaskSwitchContext+0xc0>)
 800dc16:	6013      	str	r3, [r2, #0]
 800dc18:	4a08      	ldr	r2, [pc, #32]	; (800dc3c <vTaskSwitchContext+0xb8>)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc1e:	4b09      	ldr	r3, [pc, #36]	; (800dc44 <vTaskSwitchContext+0xc0>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	3354      	adds	r3, #84	; 0x54
 800dc24:	4a08      	ldr	r2, [pc, #32]	; (800dc48 <vTaskSwitchContext+0xc4>)
 800dc26:	6013      	str	r3, [r2, #0]
}
 800dc28:	bf00      	nop
 800dc2a:	3714      	adds	r7, #20
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr
 800dc34:	20000ab0 	.word	0x20000ab0
 800dc38:	20000a9c 	.word	0x20000a9c
 800dc3c:	20000a90 	.word	0x20000a90
 800dc40:	200005b8 	.word	0x200005b8
 800dc44:	200005b4 	.word	0x200005b4
 800dc48:	20000098 	.word	0x20000098

0800dc4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d10a      	bne.n	800dc72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc60:	f383 8811 	msr	BASEPRI, r3
 800dc64:	f3bf 8f6f 	isb	sy
 800dc68:	f3bf 8f4f 	dsb	sy
 800dc6c:	60fb      	str	r3, [r7, #12]
}
 800dc6e:	bf00      	nop
 800dc70:	e7fe      	b.n	800dc70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc72:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <vTaskPlaceOnEventList+0x44>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3318      	adds	r3, #24
 800dc78:	4619      	mov	r1, r3
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7fe fb2d 	bl	800c2da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc80:	2101      	movs	r1, #1
 800dc82:	6838      	ldr	r0, [r7, #0]
 800dc84:	f000 fb7e 	bl	800e384 <prvAddCurrentTaskToDelayedList>
}
 800dc88:	bf00      	nop
 800dc8a:	3710      	adds	r7, #16
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	200005b4 	.word	0x200005b4

0800dc94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10a      	bne.n	800dcbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcaa:	f383 8811 	msr	BASEPRI, r3
 800dcae:	f3bf 8f6f 	isb	sy
 800dcb2:	f3bf 8f4f 	dsb	sy
 800dcb6:	617b      	str	r3, [r7, #20]
}
 800dcb8:	bf00      	nop
 800dcba:	e7fe      	b.n	800dcba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dcbc:	4b0a      	ldr	r3, [pc, #40]	; (800dce8 <vTaskPlaceOnEventListRestricted+0x54>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3318      	adds	r3, #24
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f7fe fae4 	bl	800c292 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dcd0:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dcd6:	6879      	ldr	r1, [r7, #4]
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f000 fb53 	bl	800e384 <prvAddCurrentTaskToDelayedList>
	}
 800dcde:	bf00      	nop
 800dce0:	3718      	adds	r7, #24
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	200005b4 	.word	0x200005b4

0800dcec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10a      	bne.n	800dd18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd06:	f383 8811 	msr	BASEPRI, r3
 800dd0a:	f3bf 8f6f 	isb	sy
 800dd0e:	f3bf 8f4f 	dsb	sy
 800dd12:	60fb      	str	r3, [r7, #12]
}
 800dd14:	bf00      	nop
 800dd16:	e7fe      	b.n	800dd16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	3318      	adds	r3, #24
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe fb15 	bl	800c34c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd22:	4b1e      	ldr	r3, [pc, #120]	; (800dd9c <xTaskRemoveFromEventList+0xb0>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d11d      	bne.n	800dd66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fe fb0c 	bl	800c34c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd38:	4b19      	ldr	r3, [pc, #100]	; (800dda0 <xTaskRemoveFromEventList+0xb4>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d903      	bls.n	800dd48 <xTaskRemoveFromEventList+0x5c>
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd44:	4a16      	ldr	r2, [pc, #88]	; (800dda0 <xTaskRemoveFromEventList+0xb4>)
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4413      	add	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4a13      	ldr	r2, [pc, #76]	; (800dda4 <xTaskRemoveFromEventList+0xb8>)
 800dd56:	441a      	add	r2, r3
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	4610      	mov	r0, r2
 800dd60:	f7fe fa97 	bl	800c292 <vListInsertEnd>
 800dd64:	e005      	b.n	800dd72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	3318      	adds	r3, #24
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	480e      	ldr	r0, [pc, #56]	; (800dda8 <xTaskRemoveFromEventList+0xbc>)
 800dd6e:	f7fe fa90 	bl	800c292 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd76:	4b0d      	ldr	r3, [pc, #52]	; (800ddac <xTaskRemoveFromEventList+0xc0>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d905      	bls.n	800dd8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dd80:	2301      	movs	r3, #1
 800dd82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dd84:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <xTaskRemoveFromEventList+0xc4>)
 800dd86:	2201      	movs	r2, #1
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	e001      	b.n	800dd90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dd90:	697b      	ldr	r3, [r7, #20]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20000ab0 	.word	0x20000ab0
 800dda0:	20000a90 	.word	0x20000a90
 800dda4:	200005b8 	.word	0x200005b8
 800dda8:	20000a48 	.word	0x20000a48
 800ddac:	200005b4 	.word	0x200005b4
 800ddb0:	20000a9c 	.word	0x20000a9c

0800ddb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ddbc:	4b06      	ldr	r3, [pc, #24]	; (800ddd8 <vTaskInternalSetTimeOutState+0x24>)
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ddc4:	4b05      	ldr	r3, [pc, #20]	; (800dddc <vTaskInternalSetTimeOutState+0x28>)
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	605a      	str	r2, [r3, #4]
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr
 800ddd8:	20000aa0 	.word	0x20000aa0
 800dddc:	20000a8c 	.word	0x20000a8c

0800dde0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b088      	sub	sp, #32
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d10a      	bne.n	800de06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf4:	f383 8811 	msr	BASEPRI, r3
 800ddf8:	f3bf 8f6f 	isb	sy
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	613b      	str	r3, [r7, #16]
}
 800de02:	bf00      	nop
 800de04:	e7fe      	b.n	800de04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d10a      	bne.n	800de22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800de0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de10:	f383 8811 	msr	BASEPRI, r3
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	60fb      	str	r3, [r7, #12]
}
 800de1e:	bf00      	nop
 800de20:	e7fe      	b.n	800de20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800de22:	f000 ff7f 	bl	800ed24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800de26:	4b1d      	ldr	r3, [pc, #116]	; (800de9c <xTaskCheckForTimeOut+0xbc>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	69ba      	ldr	r2, [r7, #24]
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3e:	d102      	bne.n	800de46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800de40:	2300      	movs	r3, #0
 800de42:	61fb      	str	r3, [r7, #28]
 800de44:	e023      	b.n	800de8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	4b15      	ldr	r3, [pc, #84]	; (800dea0 <xTaskCheckForTimeOut+0xc0>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d007      	beq.n	800de62 <xTaskCheckForTimeOut+0x82>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	69ba      	ldr	r2, [r7, #24]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d302      	bcc.n	800de62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800de5c:	2301      	movs	r3, #1
 800de5e:	61fb      	str	r3, [r7, #28]
 800de60:	e015      	b.n	800de8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	697a      	ldr	r2, [r7, #20]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d20b      	bcs.n	800de84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	1ad2      	subs	r2, r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7ff ff9b 	bl	800ddb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800de7e:	2300      	movs	r3, #0
 800de80:	61fb      	str	r3, [r7, #28]
 800de82:	e004      	b.n	800de8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	2200      	movs	r2, #0
 800de88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800de8a:	2301      	movs	r3, #1
 800de8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800de8e:	f000 ff79 	bl	800ed84 <vPortExitCritical>

	return xReturn;
 800de92:	69fb      	ldr	r3, [r7, #28]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3720      	adds	r7, #32
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	20000a8c 	.word	0x20000a8c
 800dea0:	20000aa0 	.word	0x20000aa0

0800dea4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dea4:	b480      	push	{r7}
 800dea6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dea8:	4b03      	ldr	r3, [pc, #12]	; (800deb8 <vTaskMissedYield+0x14>)
 800deaa:	2201      	movs	r2, #1
 800deac:	601a      	str	r2, [r3, #0]
}
 800deae:	bf00      	nop
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr
 800deb8:	20000a9c 	.word	0x20000a9c

0800debc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dec4:	f000 f852 	bl	800df6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dec8:	4b06      	ldr	r3, [pc, #24]	; (800dee4 <prvIdleTask+0x28>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d9f9      	bls.n	800dec4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ded0:	4b05      	ldr	r3, [pc, #20]	; (800dee8 <prvIdleTask+0x2c>)
 800ded2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ded6:	601a      	str	r2, [r3, #0]
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dee0:	e7f0      	b.n	800dec4 <prvIdleTask+0x8>
 800dee2:	bf00      	nop
 800dee4:	200005b8 	.word	0x200005b8
 800dee8:	e000ed04 	.word	0xe000ed04

0800deec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800def2:	2300      	movs	r3, #0
 800def4:	607b      	str	r3, [r7, #4]
 800def6:	e00c      	b.n	800df12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	4613      	mov	r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	4413      	add	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4a12      	ldr	r2, [pc, #72]	; (800df4c <prvInitialiseTaskLists+0x60>)
 800df04:	4413      	add	r3, r2
 800df06:	4618      	mov	r0, r3
 800df08:	f7fe f996 	bl	800c238 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	3301      	adds	r3, #1
 800df10:	607b      	str	r3, [r7, #4]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b37      	cmp	r3, #55	; 0x37
 800df16:	d9ef      	bls.n	800def8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800df18:	480d      	ldr	r0, [pc, #52]	; (800df50 <prvInitialiseTaskLists+0x64>)
 800df1a:	f7fe f98d 	bl	800c238 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800df1e:	480d      	ldr	r0, [pc, #52]	; (800df54 <prvInitialiseTaskLists+0x68>)
 800df20:	f7fe f98a 	bl	800c238 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800df24:	480c      	ldr	r0, [pc, #48]	; (800df58 <prvInitialiseTaskLists+0x6c>)
 800df26:	f7fe f987 	bl	800c238 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df2a:	480c      	ldr	r0, [pc, #48]	; (800df5c <prvInitialiseTaskLists+0x70>)
 800df2c:	f7fe f984 	bl	800c238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df30:	480b      	ldr	r0, [pc, #44]	; (800df60 <prvInitialiseTaskLists+0x74>)
 800df32:	f7fe f981 	bl	800c238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df36:	4b0b      	ldr	r3, [pc, #44]	; (800df64 <prvInitialiseTaskLists+0x78>)
 800df38:	4a05      	ldr	r2, [pc, #20]	; (800df50 <prvInitialiseTaskLists+0x64>)
 800df3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df3c:	4b0a      	ldr	r3, [pc, #40]	; (800df68 <prvInitialiseTaskLists+0x7c>)
 800df3e:	4a05      	ldr	r2, [pc, #20]	; (800df54 <prvInitialiseTaskLists+0x68>)
 800df40:	601a      	str	r2, [r3, #0]
}
 800df42:	bf00      	nop
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	200005b8 	.word	0x200005b8
 800df50:	20000a18 	.word	0x20000a18
 800df54:	20000a2c 	.word	0x20000a2c
 800df58:	20000a48 	.word	0x20000a48
 800df5c:	20000a5c 	.word	0x20000a5c
 800df60:	20000a74 	.word	0x20000a74
 800df64:	20000a40 	.word	0x20000a40
 800df68:	20000a44 	.word	0x20000a44

0800df6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df72:	e019      	b.n	800dfa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df74:	f000 fed6 	bl	800ed24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df78:	4b10      	ldr	r3, [pc, #64]	; (800dfbc <prvCheckTasksWaitingTermination+0x50>)
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	3304      	adds	r3, #4
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe f9e1 	bl	800c34c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df8a:	4b0d      	ldr	r3, [pc, #52]	; (800dfc0 <prvCheckTasksWaitingTermination+0x54>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	3b01      	subs	r3, #1
 800df90:	4a0b      	ldr	r2, [pc, #44]	; (800dfc0 <prvCheckTasksWaitingTermination+0x54>)
 800df92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df94:	4b0b      	ldr	r3, [pc, #44]	; (800dfc4 <prvCheckTasksWaitingTermination+0x58>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	3b01      	subs	r3, #1
 800df9a:	4a0a      	ldr	r2, [pc, #40]	; (800dfc4 <prvCheckTasksWaitingTermination+0x58>)
 800df9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df9e:	f000 fef1 	bl	800ed84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 f810 	bl	800dfc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfa8:	4b06      	ldr	r3, [pc, #24]	; (800dfc4 <prvCheckTasksWaitingTermination+0x58>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1e1      	bne.n	800df74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dfb0:	bf00      	nop
 800dfb2:	bf00      	nop
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	20000a5c 	.word	0x20000a5c
 800dfc0:	20000a88 	.word	0x20000a88
 800dfc4:	20000a70 	.word	0x20000a70

0800dfc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	3354      	adds	r3, #84	; 0x54
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f020 fe69 	bl	802ecac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d108      	bne.n	800dff6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f001 f889 	bl	800f100 <vPortFree>
				vPortFree( pxTCB );
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f001 f886 	bl	800f100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dff4:	e018      	b.n	800e028 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d103      	bne.n	800e008 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f001 f87d 	bl	800f100 <vPortFree>
	}
 800e006:	e00f      	b.n	800e028 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d00a      	beq.n	800e028 <prvDeleteTCB+0x60>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	60fb      	str	r3, [r7, #12]
}
 800e024:	bf00      	nop
 800e026:	e7fe      	b.n	800e026 <prvDeleteTCB+0x5e>
	}
 800e028:	bf00      	nop
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e036:	4b0c      	ldr	r3, [pc, #48]	; (800e068 <prvResetNextTaskUnblockTime+0x38>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d104      	bne.n	800e04a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e040:	4b0a      	ldr	r3, [pc, #40]	; (800e06c <prvResetNextTaskUnblockTime+0x3c>)
 800e042:	f04f 32ff 	mov.w	r2, #4294967295
 800e046:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e048:	e008      	b.n	800e05c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e04a:	4b07      	ldr	r3, [pc, #28]	; (800e068 <prvResetNextTaskUnblockTime+0x38>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	4a04      	ldr	r2, [pc, #16]	; (800e06c <prvResetNextTaskUnblockTime+0x3c>)
 800e05a:	6013      	str	r3, [r2, #0]
}
 800e05c:	bf00      	nop
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr
 800e068:	20000a40 	.word	0x20000a40
 800e06c:	20000aa8 	.word	0x20000aa8

0800e070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e076:	4b0b      	ldr	r3, [pc, #44]	; (800e0a4 <xTaskGetSchedulerState+0x34>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d102      	bne.n	800e084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e07e:	2301      	movs	r3, #1
 800e080:	607b      	str	r3, [r7, #4]
 800e082:	e008      	b.n	800e096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e084:	4b08      	ldr	r3, [pc, #32]	; (800e0a8 <xTaskGetSchedulerState+0x38>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d102      	bne.n	800e092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e08c:	2302      	movs	r3, #2
 800e08e:	607b      	str	r3, [r7, #4]
 800e090:	e001      	b.n	800e096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e092:	2300      	movs	r3, #0
 800e094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e096:	687b      	ldr	r3, [r7, #4]
	}
 800e098:	4618      	mov	r0, r3
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	20000a94 	.word	0x20000a94
 800e0a8:	20000ab0 	.word	0x20000ab0

0800e0ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d051      	beq.n	800e166 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0c6:	4b2a      	ldr	r3, [pc, #168]	; (800e170 <xTaskPriorityInherit+0xc4>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d241      	bcs.n	800e154 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	699b      	ldr	r3, [r3, #24]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	db06      	blt.n	800e0e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0d8:	4b25      	ldr	r3, [pc, #148]	; (800e170 <xTaskPriorityInherit+0xc4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	6959      	ldr	r1, [r3, #20]
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4413      	add	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	4a1f      	ldr	r2, [pc, #124]	; (800e174 <xTaskPriorityInherit+0xc8>)
 800e0f8:	4413      	add	r3, r2
 800e0fa:	4299      	cmp	r1, r3
 800e0fc:	d122      	bne.n	800e144 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	3304      	adds	r3, #4
 800e102:	4618      	mov	r0, r3
 800e104:	f7fe f922 	bl	800c34c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e108:	4b19      	ldr	r3, [pc, #100]	; (800e170 <xTaskPriorityInherit+0xc4>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e116:	4b18      	ldr	r3, [pc, #96]	; (800e178 <xTaskPriorityInherit+0xcc>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d903      	bls.n	800e126 <xTaskPriorityInherit+0x7a>
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e122:	4a15      	ldr	r2, [pc, #84]	; (800e178 <xTaskPriorityInherit+0xcc>)
 800e124:	6013      	str	r3, [r2, #0]
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e12a:	4613      	mov	r3, r2
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	4413      	add	r3, r2
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	4a10      	ldr	r2, [pc, #64]	; (800e174 <xTaskPriorityInherit+0xc8>)
 800e134:	441a      	add	r2, r3
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	3304      	adds	r3, #4
 800e13a:	4619      	mov	r1, r3
 800e13c:	4610      	mov	r0, r2
 800e13e:	f7fe f8a8 	bl	800c292 <vListInsertEnd>
 800e142:	e004      	b.n	800e14e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e144:	4b0a      	ldr	r3, [pc, #40]	; (800e170 <xTaskPriorityInherit+0xc4>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e14e:	2301      	movs	r3, #1
 800e150:	60fb      	str	r3, [r7, #12]
 800e152:	e008      	b.n	800e166 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e158:	4b05      	ldr	r3, [pc, #20]	; (800e170 <xTaskPriorityInherit+0xc4>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15e:	429a      	cmp	r2, r3
 800e160:	d201      	bcs.n	800e166 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e162:	2301      	movs	r3, #1
 800e164:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e166:	68fb      	ldr	r3, [r7, #12]
	}
 800e168:	4618      	mov	r0, r3
 800e16a:	3710      	adds	r7, #16
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	200005b4 	.word	0x200005b4
 800e174:	200005b8 	.word	0x200005b8
 800e178:	20000a90 	.word	0x20000a90

0800e17c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e188:	2300      	movs	r3, #0
 800e18a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d056      	beq.n	800e240 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e192:	4b2e      	ldr	r3, [pc, #184]	; (800e24c <xTaskPriorityDisinherit+0xd0>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d00a      	beq.n	800e1b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	60fb      	str	r3, [r7, #12]
}
 800e1ae:	bf00      	nop
 800e1b0:	e7fe      	b.n	800e1b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d10a      	bne.n	800e1d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1be:	f383 8811 	msr	BASEPRI, r3
 800e1c2:	f3bf 8f6f 	isb	sy
 800e1c6:	f3bf 8f4f 	dsb	sy
 800e1ca:	60bb      	str	r3, [r7, #8]
}
 800e1cc:	bf00      	nop
 800e1ce:	e7fe      	b.n	800e1ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1d4:	1e5a      	subs	r2, r3, #1
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d02c      	beq.n	800e240 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d128      	bne.n	800e240 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	3304      	adds	r3, #4
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe f8aa 	bl	800c34c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e204:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e210:	4b0f      	ldr	r3, [pc, #60]	; (800e250 <xTaskPriorityDisinherit+0xd4>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	429a      	cmp	r2, r3
 800e216:	d903      	bls.n	800e220 <xTaskPriorityDisinherit+0xa4>
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21c:	4a0c      	ldr	r2, [pc, #48]	; (800e250 <xTaskPriorityDisinherit+0xd4>)
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e224:	4613      	mov	r3, r2
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4a09      	ldr	r2, [pc, #36]	; (800e254 <xTaskPriorityDisinherit+0xd8>)
 800e22e:	441a      	add	r2, r3
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	3304      	adds	r3, #4
 800e234:	4619      	mov	r1, r3
 800e236:	4610      	mov	r0, r2
 800e238:	f7fe f82b 	bl	800c292 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e23c:	2301      	movs	r3, #1
 800e23e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e240:	697b      	ldr	r3, [r7, #20]
	}
 800e242:	4618      	mov	r0, r3
 800e244:	3718      	adds	r7, #24
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	200005b4 	.word	0x200005b4
 800e250:	20000a90 	.word	0x20000a90
 800e254:	200005b8 	.word	0x200005b8

0800e258 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b088      	sub	sp, #32
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e266:	2301      	movs	r3, #1
 800e268:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d06a      	beq.n	800e346 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e274:	2b00      	cmp	r3, #0
 800e276:	d10a      	bne.n	800e28e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27c:	f383 8811 	msr	BASEPRI, r3
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	60fb      	str	r3, [r7, #12]
}
 800e28a:	bf00      	nop
 800e28c:	e7fe      	b.n	800e28c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e292:	683a      	ldr	r2, [r7, #0]
 800e294:	429a      	cmp	r2, r3
 800e296:	d902      	bls.n	800e29e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	61fb      	str	r3, [r7, #28]
 800e29c:	e002      	b.n	800e2a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a8:	69fa      	ldr	r2, [r7, #28]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d04b      	beq.n	800e346 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d146      	bne.n	800e346 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e2b8:	4b25      	ldr	r3, [pc, #148]	; (800e350 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	69ba      	ldr	r2, [r7, #24]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d10a      	bne.n	800e2d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c6:	f383 8811 	msr	BASEPRI, r3
 800e2ca:	f3bf 8f6f 	isb	sy
 800e2ce:	f3bf 8f4f 	dsb	sy
 800e2d2:	60bb      	str	r3, [r7, #8]
}
 800e2d4:	bf00      	nop
 800e2d6:	e7fe      	b.n	800e2d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	69fa      	ldr	r2, [r7, #28]
 800e2e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	db04      	blt.n	800e2f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	6959      	ldr	r1, [r3, #20]
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	4413      	add	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	4a13      	ldr	r2, [pc, #76]	; (800e354 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e306:	4413      	add	r3, r2
 800e308:	4299      	cmp	r1, r3
 800e30a:	d11c      	bne.n	800e346 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	3304      	adds	r3, #4
 800e310:	4618      	mov	r0, r3
 800e312:	f7fe f81b 	bl	800c34c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e31a:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d903      	bls.n	800e32a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e326:	4a0c      	ldr	r2, [pc, #48]	; (800e358 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e32e:	4613      	mov	r3, r2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	4413      	add	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4a07      	ldr	r2, [pc, #28]	; (800e354 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e338:	441a      	add	r2, r3
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	3304      	adds	r3, #4
 800e33e:	4619      	mov	r1, r3
 800e340:	4610      	mov	r0, r2
 800e342:	f7fd ffa6 	bl	800c292 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e346:	bf00      	nop
 800e348:	3720      	adds	r7, #32
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	200005b4 	.word	0x200005b4
 800e354:	200005b8 	.word	0x200005b8
 800e358:	20000a90 	.word	0x20000a90

0800e35c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e35c:	b480      	push	{r7}
 800e35e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e360:	4b07      	ldr	r3, [pc, #28]	; (800e380 <pvTaskIncrementMutexHeldCount+0x24>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d004      	beq.n	800e372 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e368:	4b05      	ldr	r3, [pc, #20]	; (800e380 <pvTaskIncrementMutexHeldCount+0x24>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e36e:	3201      	adds	r2, #1
 800e370:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e372:	4b03      	ldr	r3, [pc, #12]	; (800e380 <pvTaskIncrementMutexHeldCount+0x24>)
 800e374:	681b      	ldr	r3, [r3, #0]
	}
 800e376:	4618      	mov	r0, r3
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr
 800e380:	200005b4 	.word	0x200005b4

0800e384 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e38e:	4b21      	ldr	r3, [pc, #132]	; (800e414 <prvAddCurrentTaskToDelayedList+0x90>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e394:	4b20      	ldr	r3, [pc, #128]	; (800e418 <prvAddCurrentTaskToDelayedList+0x94>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	3304      	adds	r3, #4
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fd ffd6 	bl	800c34c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a6:	d10a      	bne.n	800e3be <prvAddCurrentTaskToDelayedList+0x3a>
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d007      	beq.n	800e3be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3ae:	4b1a      	ldr	r3, [pc, #104]	; (800e418 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	4819      	ldr	r0, [pc, #100]	; (800e41c <prvAddCurrentTaskToDelayedList+0x98>)
 800e3b8:	f7fd ff6b 	bl	800c292 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e3bc:	e026      	b.n	800e40c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e3be:	68fa      	ldr	r2, [r7, #12]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e3c6:	4b14      	ldr	r3, [pc, #80]	; (800e418 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e3ce:	68ba      	ldr	r2, [r7, #8]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d209      	bcs.n	800e3ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3d6:	4b12      	ldr	r3, [pc, #72]	; (800e420 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	4b0f      	ldr	r3, [pc, #60]	; (800e418 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	f7fd ff79 	bl	800c2da <vListInsert>
}
 800e3e8:	e010      	b.n	800e40c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3ea:	4b0e      	ldr	r3, [pc, #56]	; (800e424 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	4b0a      	ldr	r3, [pc, #40]	; (800e418 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	f7fd ff6f 	bl	800c2da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e3fc:	4b0a      	ldr	r3, [pc, #40]	; (800e428 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68ba      	ldr	r2, [r7, #8]
 800e402:	429a      	cmp	r2, r3
 800e404:	d202      	bcs.n	800e40c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e406:	4a08      	ldr	r2, [pc, #32]	; (800e428 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	6013      	str	r3, [r2, #0]
}
 800e40c:	bf00      	nop
 800e40e:	3710      	adds	r7, #16
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	20000a8c 	.word	0x20000a8c
 800e418:	200005b4 	.word	0x200005b4
 800e41c:	20000a74 	.word	0x20000a74
 800e420:	20000a44 	.word	0x20000a44
 800e424:	20000a40 	.word	0x20000a40
 800e428:	20000aa8 	.word	0x20000aa8

0800e42c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b08a      	sub	sp, #40	; 0x28
 800e430:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e432:	2300      	movs	r3, #0
 800e434:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e436:	f000 fb07 	bl	800ea48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e43a:	4b1c      	ldr	r3, [pc, #112]	; (800e4ac <xTimerCreateTimerTask+0x80>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d021      	beq.n	800e486 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e446:	2300      	movs	r3, #0
 800e448:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e44a:	1d3a      	adds	r2, r7, #4
 800e44c:	f107 0108 	add.w	r1, r7, #8
 800e450:	f107 030c 	add.w	r3, r7, #12
 800e454:	4618      	mov	r0, r3
 800e456:	f7fd fed5 	bl	800c204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e45a:	6879      	ldr	r1, [r7, #4]
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	9202      	str	r2, [sp, #8]
 800e462:	9301      	str	r3, [sp, #4]
 800e464:	2302      	movs	r3, #2
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	2300      	movs	r3, #0
 800e46a:	460a      	mov	r2, r1
 800e46c:	4910      	ldr	r1, [pc, #64]	; (800e4b0 <xTimerCreateTimerTask+0x84>)
 800e46e:	4811      	ldr	r0, [pc, #68]	; (800e4b4 <xTimerCreateTimerTask+0x88>)
 800e470:	f7fe ffa4 	bl	800d3bc <xTaskCreateStatic>
 800e474:	4603      	mov	r3, r0
 800e476:	4a10      	ldr	r2, [pc, #64]	; (800e4b8 <xTimerCreateTimerTask+0x8c>)
 800e478:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e47a:	4b0f      	ldr	r3, [pc, #60]	; (800e4b8 <xTimerCreateTimerTask+0x8c>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e482:	2301      	movs	r3, #1
 800e484:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d10a      	bne.n	800e4a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	613b      	str	r3, [r7, #16]
}
 800e49e:	bf00      	nop
 800e4a0:	e7fe      	b.n	800e4a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e4a2:	697b      	ldr	r3, [r7, #20]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3718      	adds	r7, #24
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	20000ae4 	.word	0x20000ae4
 800e4b0:	0802f4c4 	.word	0x0802f4c4
 800e4b4:	0800e5f1 	.word	0x0800e5f1
 800e4b8:	20000ae8 	.word	0x20000ae8

0800e4bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08a      	sub	sp, #40	; 0x28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
 800e4c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d10a      	bne.n	800e4ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	623b      	str	r3, [r7, #32]
}
 800e4e6:	bf00      	nop
 800e4e8:	e7fe      	b.n	800e4e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e4ea:	4b1a      	ldr	r3, [pc, #104]	; (800e554 <xTimerGenericCommand+0x98>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d02a      	beq.n	800e548 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	2b05      	cmp	r3, #5
 800e502:	dc18      	bgt.n	800e536 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e504:	f7ff fdb4 	bl	800e070 <xTaskGetSchedulerState>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	d109      	bne.n	800e522 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e50e:	4b11      	ldr	r3, [pc, #68]	; (800e554 <xTimerGenericCommand+0x98>)
 800e510:	6818      	ldr	r0, [r3, #0]
 800e512:	f107 0110 	add.w	r1, r7, #16
 800e516:	2300      	movs	r3, #0
 800e518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e51a:	f7fe f8e9 	bl	800c6f0 <xQueueGenericSend>
 800e51e:	6278      	str	r0, [r7, #36]	; 0x24
 800e520:	e012      	b.n	800e548 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e522:	4b0c      	ldr	r3, [pc, #48]	; (800e554 <xTimerGenericCommand+0x98>)
 800e524:	6818      	ldr	r0, [r3, #0]
 800e526:	f107 0110 	add.w	r1, r7, #16
 800e52a:	2300      	movs	r3, #0
 800e52c:	2200      	movs	r2, #0
 800e52e:	f7fe f8df 	bl	800c6f0 <xQueueGenericSend>
 800e532:	6278      	str	r0, [r7, #36]	; 0x24
 800e534:	e008      	b.n	800e548 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e536:	4b07      	ldr	r3, [pc, #28]	; (800e554 <xTimerGenericCommand+0x98>)
 800e538:	6818      	ldr	r0, [r3, #0]
 800e53a:	f107 0110 	add.w	r1, r7, #16
 800e53e:	2300      	movs	r3, #0
 800e540:	683a      	ldr	r2, [r7, #0]
 800e542:	f7fe f9d3 	bl	800c8ec <xQueueGenericSendFromISR>
 800e546:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3728      	adds	r7, #40	; 0x28
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	20000ae4 	.word	0x20000ae4

0800e558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af02      	add	r7, sp, #8
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e562:	4b22      	ldr	r3, [pc, #136]	; (800e5ec <prvProcessExpiredTimer+0x94>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	68db      	ldr	r3, [r3, #12]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	3304      	adds	r3, #4
 800e570:	4618      	mov	r0, r3
 800e572:	f7fd feeb 	bl	800c34c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e57c:	f003 0304 	and.w	r3, r3, #4
 800e580:	2b00      	cmp	r3, #0
 800e582:	d022      	beq.n	800e5ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	699a      	ldr	r2, [r3, #24]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	18d1      	adds	r1, r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	6978      	ldr	r0, [r7, #20]
 800e592:	f000 f8d1 	bl	800e738 <prvInsertTimerInActiveList>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d01f      	beq.n	800e5dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e59c:	2300      	movs	r3, #0
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	2100      	movs	r1, #0
 800e5a6:	6978      	ldr	r0, [r7, #20]
 800e5a8:	f7ff ff88 	bl	800e4bc <xTimerGenericCommand>
 800e5ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d113      	bne.n	800e5dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f3bf 8f4f 	dsb	sy
 800e5c4:	60fb      	str	r3, [r7, #12]
}
 800e5c6:	bf00      	nop
 800e5c8:	e7fe      	b.n	800e5c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5d0:	f023 0301 	bic.w	r3, r3, #1
 800e5d4:	b2da      	uxtb	r2, r3
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	6a1b      	ldr	r3, [r3, #32]
 800e5e0:	6978      	ldr	r0, [r7, #20]
 800e5e2:	4798      	blx	r3
}
 800e5e4:	bf00      	nop
 800e5e6:	3718      	adds	r7, #24
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	20000adc 	.word	0x20000adc

0800e5f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5f8:	f107 0308 	add.w	r3, r7, #8
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f000 f857 	bl	800e6b0 <prvGetNextExpireTime>
 800e602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	4619      	mov	r1, r3
 800e608:	68f8      	ldr	r0, [r7, #12]
 800e60a:	f000 f803 	bl	800e614 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e60e:	f000 f8d5 	bl	800e7bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e612:	e7f1      	b.n	800e5f8 <prvTimerTask+0x8>

0800e614 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e61e:	f7ff f929 	bl	800d874 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e622:	f107 0308 	add.w	r3, r7, #8
 800e626:	4618      	mov	r0, r3
 800e628:	f000 f866 	bl	800e6f8 <prvSampleTimeNow>
 800e62c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d130      	bne.n	800e696 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d10a      	bne.n	800e650 <prvProcessTimerOrBlockTask+0x3c>
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d806      	bhi.n	800e650 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e642:	f7ff f925 	bl	800d890 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e646:	68f9      	ldr	r1, [r7, #12]
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7ff ff85 	bl	800e558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e64e:	e024      	b.n	800e69a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d008      	beq.n	800e668 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e656:	4b13      	ldr	r3, [pc, #76]	; (800e6a4 <prvProcessTimerOrBlockTask+0x90>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d101      	bne.n	800e664 <prvProcessTimerOrBlockTask+0x50>
 800e660:	2301      	movs	r3, #1
 800e662:	e000      	b.n	800e666 <prvProcessTimerOrBlockTask+0x52>
 800e664:	2300      	movs	r3, #0
 800e666:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e668:	4b0f      	ldr	r3, [pc, #60]	; (800e6a8 <prvProcessTimerOrBlockTask+0x94>)
 800e66a:	6818      	ldr	r0, [r3, #0]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	1ad3      	subs	r3, r2, r3
 800e672:	683a      	ldr	r2, [r7, #0]
 800e674:	4619      	mov	r1, r3
 800e676:	f7fe fe6d 	bl	800d354 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e67a:	f7ff f909 	bl	800d890 <xTaskResumeAll>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10a      	bne.n	800e69a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e684:	4b09      	ldr	r3, [pc, #36]	; (800e6ac <prvProcessTimerOrBlockTask+0x98>)
 800e686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e68a:	601a      	str	r2, [r3, #0]
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	f3bf 8f6f 	isb	sy
}
 800e694:	e001      	b.n	800e69a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e696:	f7ff f8fb 	bl	800d890 <xTaskResumeAll>
}
 800e69a:	bf00      	nop
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	20000ae0 	.word	0x20000ae0
 800e6a8:	20000ae4 	.word	0x20000ae4
 800e6ac:	e000ed04 	.word	0xe000ed04

0800e6b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b085      	sub	sp, #20
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e6b8:	4b0e      	ldr	r3, [pc, #56]	; (800e6f4 <prvGetNextExpireTime+0x44>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d101      	bne.n	800e6c6 <prvGetNextExpireTime+0x16>
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	e000      	b.n	800e6c8 <prvGetNextExpireTime+0x18>
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d105      	bne.n	800e6e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6d4:	4b07      	ldr	r3, [pc, #28]	; (800e6f4 <prvGetNextExpireTime+0x44>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	60fb      	str	r3, [r7, #12]
 800e6de:	e001      	b.n	800e6e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3714      	adds	r7, #20
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	20000adc 	.word	0x20000adc

0800e6f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e700:	f7ff f964 	bl	800d9cc <xTaskGetTickCount>
 800e704:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e706:	4b0b      	ldr	r3, [pc, #44]	; (800e734 <prvSampleTimeNow+0x3c>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	68fa      	ldr	r2, [r7, #12]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d205      	bcs.n	800e71c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e710:	f000 f936 	bl	800e980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	601a      	str	r2, [r3, #0]
 800e71a:	e002      	b.n	800e722 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2200      	movs	r2, #0
 800e720:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e722:	4a04      	ldr	r2, [pc, #16]	; (800e734 <prvSampleTimeNow+0x3c>)
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e728:	68fb      	ldr	r3, [r7, #12]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3710      	adds	r7, #16
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20000aec 	.word	0x20000aec

0800e738 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
 800e744:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	68fa      	ldr	r2, [r7, #12]
 800e754:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d812      	bhi.n	800e784 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	1ad2      	subs	r2, r2, r3
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	699b      	ldr	r3, [r3, #24]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d302      	bcc.n	800e772 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e76c:	2301      	movs	r3, #1
 800e76e:	617b      	str	r3, [r7, #20]
 800e770:	e01b      	b.n	800e7aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e772:	4b10      	ldr	r3, [pc, #64]	; (800e7b4 <prvInsertTimerInActiveList+0x7c>)
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	3304      	adds	r3, #4
 800e77a:	4619      	mov	r1, r3
 800e77c:	4610      	mov	r0, r2
 800e77e:	f7fd fdac 	bl	800c2da <vListInsert>
 800e782:	e012      	b.n	800e7aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d206      	bcs.n	800e79a <prvInsertTimerInActiveList+0x62>
 800e78c:	68ba      	ldr	r2, [r7, #8]
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	429a      	cmp	r2, r3
 800e792:	d302      	bcc.n	800e79a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e794:	2301      	movs	r3, #1
 800e796:	617b      	str	r3, [r7, #20]
 800e798:	e007      	b.n	800e7aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e79a:	4b07      	ldr	r3, [pc, #28]	; (800e7b8 <prvInsertTimerInActiveList+0x80>)
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	4610      	mov	r0, r2
 800e7a6:	f7fd fd98 	bl	800c2da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e7aa:	697b      	ldr	r3, [r7, #20]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	20000ae0 	.word	0x20000ae0
 800e7b8:	20000adc 	.word	0x20000adc

0800e7bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08e      	sub	sp, #56	; 0x38
 800e7c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e7c2:	e0ca      	b.n	800e95a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	da18      	bge.n	800e7fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e7ca:	1d3b      	adds	r3, r7, #4
 800e7cc:	3304      	adds	r3, #4
 800e7ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10a      	bne.n	800e7ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	61fb      	str	r3, [r7, #28]
}
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7f2:	6850      	ldr	r0, [r2, #4]
 800e7f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7f6:	6892      	ldr	r2, [r2, #8]
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	f2c0 80aa 	blt.w	800e958 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d004      	beq.n	800e81a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e812:	3304      	adds	r3, #4
 800e814:	4618      	mov	r0, r3
 800e816:	f7fd fd99 	bl	800c34c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e81a:	463b      	mov	r3, r7
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7ff ff6b 	bl	800e6f8 <prvSampleTimeNow>
 800e822:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2b09      	cmp	r3, #9
 800e828:	f200 8097 	bhi.w	800e95a <prvProcessReceivedCommands+0x19e>
 800e82c:	a201      	add	r2, pc, #4	; (adr r2, 800e834 <prvProcessReceivedCommands+0x78>)
 800e82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e832:	bf00      	nop
 800e834:	0800e85d 	.word	0x0800e85d
 800e838:	0800e85d 	.word	0x0800e85d
 800e83c:	0800e85d 	.word	0x0800e85d
 800e840:	0800e8d1 	.word	0x0800e8d1
 800e844:	0800e8e5 	.word	0x0800e8e5
 800e848:	0800e92f 	.word	0x0800e92f
 800e84c:	0800e85d 	.word	0x0800e85d
 800e850:	0800e85d 	.word	0x0800e85d
 800e854:	0800e8d1 	.word	0x0800e8d1
 800e858:	0800e8e5 	.word	0x0800e8e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e862:	f043 0301 	orr.w	r3, r3, #1
 800e866:	b2da      	uxtb	r2, r3
 800e868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	699b      	ldr	r3, [r3, #24]
 800e874:	18d1      	adds	r1, r2, r3
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e87c:	f7ff ff5c 	bl	800e738 <prvInsertTimerInActiveList>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d069      	beq.n	800e95a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e888:	6a1b      	ldr	r3, [r3, #32]
 800e88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e88c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e894:	f003 0304 	and.w	r3, r3, #4
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d05e      	beq.n	800e95a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e89c:	68ba      	ldr	r2, [r7, #8]
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	699b      	ldr	r3, [r3, #24]
 800e8a2:	441a      	add	r2, r3
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	9300      	str	r3, [sp, #0]
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ae:	f7ff fe05 	bl	800e4bc <xTimerGenericCommand>
 800e8b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d14f      	bne.n	800e95a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	61bb      	str	r3, [r7, #24]
}
 800e8cc:	bf00      	nop
 800e8ce:	e7fe      	b.n	800e8ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8d6:	f023 0301 	bic.w	r3, r3, #1
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e8e2:	e03a      	b.n	800e95a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8ea:	f043 0301 	orr.w	r3, r3, #1
 800e8ee:	b2da      	uxtb	r2, r3
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fe:	699b      	ldr	r3, [r3, #24]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10a      	bne.n	800e91a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	617b      	str	r3, [r7, #20]
}
 800e916:	bf00      	nop
 800e918:	e7fe      	b.n	800e918 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	699a      	ldr	r2, [r3, #24]
 800e91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e920:	18d1      	adds	r1, r2, r3
 800e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e928:	f7ff ff06 	bl	800e738 <prvInsertTimerInActiveList>
					break;
 800e92c:	e015      	b.n	800e95a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e934:	f003 0302 	and.w	r3, r3, #2
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d103      	bne.n	800e944 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e93c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e93e:	f000 fbdf 	bl	800f100 <vPortFree>
 800e942:	e00a      	b.n	800e95a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e94a:	f023 0301 	bic.w	r3, r3, #1
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e956:	e000      	b.n	800e95a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e958:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e95a:	4b08      	ldr	r3, [pc, #32]	; (800e97c <prvProcessReceivedCommands+0x1c0>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	1d39      	adds	r1, r7, #4
 800e960:	2200      	movs	r2, #0
 800e962:	4618      	mov	r0, r3
 800e964:	f7fe f8ea 	bl	800cb3c <xQueueReceive>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f47f af2a 	bne.w	800e7c4 <prvProcessReceivedCommands+0x8>
	}
}
 800e970:	bf00      	nop
 800e972:	bf00      	nop
 800e974:	3730      	adds	r7, #48	; 0x30
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	20000ae4 	.word	0x20000ae4

0800e980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b088      	sub	sp, #32
 800e984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e986:	e048      	b.n	800ea1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e988:	4b2d      	ldr	r3, [pc, #180]	; (800ea40 <prvSwitchTimerLists+0xc0>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e992:	4b2b      	ldr	r3, [pc, #172]	; (800ea40 <prvSwitchTimerLists+0xc0>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	3304      	adds	r3, #4
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7fd fcd3 	bl	800c34c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6a1b      	ldr	r3, [r3, #32]
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9b4:	f003 0304 	and.w	r3, r3, #4
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d02e      	beq.n	800ea1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	699b      	ldr	r3, [r3, #24]
 800e9c0:	693a      	ldr	r2, [r7, #16]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d90e      	bls.n	800e9ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9da:	4b19      	ldr	r3, [pc, #100]	; (800ea40 <prvSwitchTimerLists+0xc0>)
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	3304      	adds	r3, #4
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	f7fd fc78 	bl	800c2da <vListInsert>
 800e9ea:	e016      	b.n	800ea1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	693a      	ldr	r2, [r7, #16]
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f7ff fd60 	bl	800e4bc <xTimerGenericCommand>
 800e9fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10a      	bne.n	800ea1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	603b      	str	r3, [r7, #0]
}
 800ea16:	bf00      	nop
 800ea18:	e7fe      	b.n	800ea18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea1a:	4b09      	ldr	r3, [pc, #36]	; (800ea40 <prvSwitchTimerLists+0xc0>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d1b1      	bne.n	800e988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ea24:	4b06      	ldr	r3, [pc, #24]	; (800ea40 <prvSwitchTimerLists+0xc0>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ea2a:	4b06      	ldr	r3, [pc, #24]	; (800ea44 <prvSwitchTimerLists+0xc4>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a04      	ldr	r2, [pc, #16]	; (800ea40 <prvSwitchTimerLists+0xc0>)
 800ea30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ea32:	4a04      	ldr	r2, [pc, #16]	; (800ea44 <prvSwitchTimerLists+0xc4>)
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	6013      	str	r3, [r2, #0]
}
 800ea38:	bf00      	nop
 800ea3a:	3718      	adds	r7, #24
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	20000adc 	.word	0x20000adc
 800ea44:	20000ae0 	.word	0x20000ae0

0800ea48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ea4e:	f000 f969 	bl	800ed24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ea52:	4b15      	ldr	r3, [pc, #84]	; (800eaa8 <prvCheckForValidListAndQueue+0x60>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d120      	bne.n	800ea9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea5a:	4814      	ldr	r0, [pc, #80]	; (800eaac <prvCheckForValidListAndQueue+0x64>)
 800ea5c:	f7fd fbec 	bl	800c238 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea60:	4813      	ldr	r0, [pc, #76]	; (800eab0 <prvCheckForValidListAndQueue+0x68>)
 800ea62:	f7fd fbe9 	bl	800c238 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea66:	4b13      	ldr	r3, [pc, #76]	; (800eab4 <prvCheckForValidListAndQueue+0x6c>)
 800ea68:	4a10      	ldr	r2, [pc, #64]	; (800eaac <prvCheckForValidListAndQueue+0x64>)
 800ea6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea6c:	4b12      	ldr	r3, [pc, #72]	; (800eab8 <prvCheckForValidListAndQueue+0x70>)
 800ea6e:	4a10      	ldr	r2, [pc, #64]	; (800eab0 <prvCheckForValidListAndQueue+0x68>)
 800ea70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea72:	2300      	movs	r3, #0
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	4b11      	ldr	r3, [pc, #68]	; (800eabc <prvCheckForValidListAndQueue+0x74>)
 800ea78:	4a11      	ldr	r2, [pc, #68]	; (800eac0 <prvCheckForValidListAndQueue+0x78>)
 800ea7a:	2110      	movs	r1, #16
 800ea7c:	200a      	movs	r0, #10
 800ea7e:	f7fd fcf7 	bl	800c470 <xQueueGenericCreateStatic>
 800ea82:	4603      	mov	r3, r0
 800ea84:	4a08      	ldr	r2, [pc, #32]	; (800eaa8 <prvCheckForValidListAndQueue+0x60>)
 800ea86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea88:	4b07      	ldr	r3, [pc, #28]	; (800eaa8 <prvCheckForValidListAndQueue+0x60>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d005      	beq.n	800ea9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea90:	4b05      	ldr	r3, [pc, #20]	; (800eaa8 <prvCheckForValidListAndQueue+0x60>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	490b      	ldr	r1, [pc, #44]	; (800eac4 <prvCheckForValidListAndQueue+0x7c>)
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fe fc08 	bl	800d2ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea9c:	f000 f972 	bl	800ed84 <vPortExitCritical>
}
 800eaa0:	bf00      	nop
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	20000ae4 	.word	0x20000ae4
 800eaac:	20000ab4 	.word	0x20000ab4
 800eab0:	20000ac8 	.word	0x20000ac8
 800eab4:	20000adc 	.word	0x20000adc
 800eab8:	20000ae0 	.word	0x20000ae0
 800eabc:	20000b90 	.word	0x20000b90
 800eac0:	20000af0 	.word	0x20000af0
 800eac4:	0802f4cc 	.word	0x0802f4cc

0800eac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	3b04      	subs	r3, #4
 800ead8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	3b04      	subs	r3, #4
 800eae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	f023 0201 	bic.w	r2, r3, #1
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	3b04      	subs	r3, #4
 800eaf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eaf8:	4a0c      	ldr	r2, [pc, #48]	; (800eb2c <pxPortInitialiseStack+0x64>)
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	3b14      	subs	r3, #20
 800eb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	3b04      	subs	r3, #4
 800eb0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f06f 0202 	mvn.w	r2, #2
 800eb16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	3b20      	subs	r3, #32
 800eb1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3714      	adds	r7, #20
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr
 800eb2c:	0800eb31 	.word	0x0800eb31

0800eb30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eb30:	b480      	push	{r7}
 800eb32:	b085      	sub	sp, #20
 800eb34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eb36:	2300      	movs	r3, #0
 800eb38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eb3a:	4b12      	ldr	r3, [pc, #72]	; (800eb84 <prvTaskExitError+0x54>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb42:	d00a      	beq.n	800eb5a <prvTaskExitError+0x2a>
	__asm volatile
 800eb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	60fb      	str	r3, [r7, #12]
}
 800eb56:	bf00      	nop
 800eb58:	e7fe      	b.n	800eb58 <prvTaskExitError+0x28>
	__asm volatile
 800eb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5e:	f383 8811 	msr	BASEPRI, r3
 800eb62:	f3bf 8f6f 	isb	sy
 800eb66:	f3bf 8f4f 	dsb	sy
 800eb6a:	60bb      	str	r3, [r7, #8]
}
 800eb6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eb6e:	bf00      	nop
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d0fc      	beq.n	800eb70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb76:	bf00      	nop
 800eb78:	bf00      	nop
 800eb7a:	3714      	adds	r7, #20
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr
 800eb84:	20000014 	.word	0x20000014
	...

0800eb90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eb90:	4b07      	ldr	r3, [pc, #28]	; (800ebb0 <pxCurrentTCBConst2>)
 800eb92:	6819      	ldr	r1, [r3, #0]
 800eb94:	6808      	ldr	r0, [r1, #0]
 800eb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9a:	f380 8809 	msr	PSP, r0
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	f04f 0000 	mov.w	r0, #0
 800eba6:	f380 8811 	msr	BASEPRI, r0
 800ebaa:	4770      	bx	lr
 800ebac:	f3af 8000 	nop.w

0800ebb0 <pxCurrentTCBConst2>:
 800ebb0:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ebb4:	bf00      	nop
 800ebb6:	bf00      	nop

0800ebb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ebb8:	4808      	ldr	r0, [pc, #32]	; (800ebdc <prvPortStartFirstTask+0x24>)
 800ebba:	6800      	ldr	r0, [r0, #0]
 800ebbc:	6800      	ldr	r0, [r0, #0]
 800ebbe:	f380 8808 	msr	MSP, r0
 800ebc2:	f04f 0000 	mov.w	r0, #0
 800ebc6:	f380 8814 	msr	CONTROL, r0
 800ebca:	b662      	cpsie	i
 800ebcc:	b661      	cpsie	f
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	df00      	svc	0
 800ebd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ebda:	bf00      	nop
 800ebdc:	e000ed08 	.word	0xe000ed08

0800ebe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ebe6:	4b46      	ldr	r3, [pc, #280]	; (800ed00 <xPortStartScheduler+0x120>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4a46      	ldr	r2, [pc, #280]	; (800ed04 <xPortStartScheduler+0x124>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d10a      	bne.n	800ec06 <xPortStartScheduler+0x26>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	613b      	str	r3, [r7, #16]
}
 800ec02:	bf00      	nop
 800ec04:	e7fe      	b.n	800ec04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ec06:	4b3e      	ldr	r3, [pc, #248]	; (800ed00 <xPortStartScheduler+0x120>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4a3f      	ldr	r2, [pc, #252]	; (800ed08 <xPortStartScheduler+0x128>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d10a      	bne.n	800ec26 <xPortStartScheduler+0x46>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	60fb      	str	r3, [r7, #12]
}
 800ec22:	bf00      	nop
 800ec24:	e7fe      	b.n	800ec24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ec26:	4b39      	ldr	r3, [pc, #228]	; (800ed0c <xPortStartScheduler+0x12c>)
 800ec28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	22ff      	movs	r2, #255	; 0xff
 800ec36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec40:	78fb      	ldrb	r3, [r7, #3]
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ec48:	b2da      	uxtb	r2, r3
 800ec4a:	4b31      	ldr	r3, [pc, #196]	; (800ed10 <xPortStartScheduler+0x130>)
 800ec4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec4e:	4b31      	ldr	r3, [pc, #196]	; (800ed14 <xPortStartScheduler+0x134>)
 800ec50:	2207      	movs	r2, #7
 800ec52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec54:	e009      	b.n	800ec6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ec56:	4b2f      	ldr	r3, [pc, #188]	; (800ed14 <xPortStartScheduler+0x134>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	3b01      	subs	r3, #1
 800ec5c:	4a2d      	ldr	r2, [pc, #180]	; (800ed14 <xPortStartScheduler+0x134>)
 800ec5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec60:	78fb      	ldrb	r3, [r7, #3]
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	005b      	lsls	r3, r3, #1
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec6a:	78fb      	ldrb	r3, [r7, #3]
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec72:	2b80      	cmp	r3, #128	; 0x80
 800ec74:	d0ef      	beq.n	800ec56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec76:	4b27      	ldr	r3, [pc, #156]	; (800ed14 <xPortStartScheduler+0x134>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f1c3 0307 	rsb	r3, r3, #7
 800ec7e:	2b04      	cmp	r3, #4
 800ec80:	d00a      	beq.n	800ec98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ec82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec86:	f383 8811 	msr	BASEPRI, r3
 800ec8a:	f3bf 8f6f 	isb	sy
 800ec8e:	f3bf 8f4f 	dsb	sy
 800ec92:	60bb      	str	r3, [r7, #8]
}
 800ec94:	bf00      	nop
 800ec96:	e7fe      	b.n	800ec96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec98:	4b1e      	ldr	r3, [pc, #120]	; (800ed14 <xPortStartScheduler+0x134>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	021b      	lsls	r3, r3, #8
 800ec9e:	4a1d      	ldr	r2, [pc, #116]	; (800ed14 <xPortStartScheduler+0x134>)
 800eca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eca2:	4b1c      	ldr	r3, [pc, #112]	; (800ed14 <xPortStartScheduler+0x134>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ecaa:	4a1a      	ldr	r2, [pc, #104]	; (800ed14 <xPortStartScheduler+0x134>)
 800ecac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	b2da      	uxtb	r2, r3
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ecb6:	4b18      	ldr	r3, [pc, #96]	; (800ed18 <xPortStartScheduler+0x138>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4a17      	ldr	r2, [pc, #92]	; (800ed18 <xPortStartScheduler+0x138>)
 800ecbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ecc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ecc2:	4b15      	ldr	r3, [pc, #84]	; (800ed18 <xPortStartScheduler+0x138>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4a14      	ldr	r2, [pc, #80]	; (800ed18 <xPortStartScheduler+0x138>)
 800ecc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ecce:	f000 f8dd 	bl	800ee8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ecd2:	4b12      	ldr	r3, [pc, #72]	; (800ed1c <xPortStartScheduler+0x13c>)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ecd8:	f000 f8fc 	bl	800eed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ecdc:	4b10      	ldr	r3, [pc, #64]	; (800ed20 <xPortStartScheduler+0x140>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a0f      	ldr	r2, [pc, #60]	; (800ed20 <xPortStartScheduler+0x140>)
 800ece2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ece6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ece8:	f7ff ff66 	bl	800ebb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ecec:	f7fe ff4a 	bl	800db84 <vTaskSwitchContext>
	prvTaskExitError();
 800ecf0:	f7ff ff1e 	bl	800eb30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3718      	adds	r7, #24
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	e000ed00 	.word	0xe000ed00
 800ed04:	410fc271 	.word	0x410fc271
 800ed08:	410fc270 	.word	0x410fc270
 800ed0c:	e000e400 	.word	0xe000e400
 800ed10:	20000be0 	.word	0x20000be0
 800ed14:	20000be4 	.word	0x20000be4
 800ed18:	e000ed20 	.word	0xe000ed20
 800ed1c:	20000014 	.word	0x20000014
 800ed20:	e000ef34 	.word	0xe000ef34

0800ed24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ed24:	b480      	push	{r7}
 800ed26:	b083      	sub	sp, #12
 800ed28:	af00      	add	r7, sp, #0
	__asm volatile
 800ed2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2e:	f383 8811 	msr	BASEPRI, r3
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	607b      	str	r3, [r7, #4]
}
 800ed3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ed3e:	4b0f      	ldr	r3, [pc, #60]	; (800ed7c <vPortEnterCritical+0x58>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	3301      	adds	r3, #1
 800ed44:	4a0d      	ldr	r2, [pc, #52]	; (800ed7c <vPortEnterCritical+0x58>)
 800ed46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ed48:	4b0c      	ldr	r3, [pc, #48]	; (800ed7c <vPortEnterCritical+0x58>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d10f      	bne.n	800ed70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ed50:	4b0b      	ldr	r3, [pc, #44]	; (800ed80 <vPortEnterCritical+0x5c>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00a      	beq.n	800ed70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ed5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5e:	f383 8811 	msr	BASEPRI, r3
 800ed62:	f3bf 8f6f 	isb	sy
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	603b      	str	r3, [r7, #0]
}
 800ed6c:	bf00      	nop
 800ed6e:	e7fe      	b.n	800ed6e <vPortEnterCritical+0x4a>
	}
}
 800ed70:	bf00      	nop
 800ed72:	370c      	adds	r7, #12
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	20000014 	.word	0x20000014
 800ed80:	e000ed04 	.word	0xe000ed04

0800ed84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ed8a:	4b12      	ldr	r3, [pc, #72]	; (800edd4 <vPortExitCritical+0x50>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10a      	bne.n	800eda8 <vPortExitCritical+0x24>
	__asm volatile
 800ed92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	607b      	str	r3, [r7, #4]
}
 800eda4:	bf00      	nop
 800eda6:	e7fe      	b.n	800eda6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eda8:	4b0a      	ldr	r3, [pc, #40]	; (800edd4 <vPortExitCritical+0x50>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	3b01      	subs	r3, #1
 800edae:	4a09      	ldr	r2, [pc, #36]	; (800edd4 <vPortExitCritical+0x50>)
 800edb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800edb2:	4b08      	ldr	r3, [pc, #32]	; (800edd4 <vPortExitCritical+0x50>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d105      	bne.n	800edc6 <vPortExitCritical+0x42>
 800edba:	2300      	movs	r3, #0
 800edbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	f383 8811 	msr	BASEPRI, r3
}
 800edc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800edc6:	bf00      	nop
 800edc8:	370c      	adds	r7, #12
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	20000014 	.word	0x20000014
	...

0800ede0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ede0:	f3ef 8009 	mrs	r0, PSP
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	4b15      	ldr	r3, [pc, #84]	; (800ee40 <pxCurrentTCBConst>)
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	f01e 0f10 	tst.w	lr, #16
 800edf0:	bf08      	it	eq
 800edf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800edf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfa:	6010      	str	r0, [r2, #0]
 800edfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ee00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ee04:	f380 8811 	msr	BASEPRI, r0
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	f3bf 8f6f 	isb	sy
 800ee10:	f7fe feb8 	bl	800db84 <vTaskSwitchContext>
 800ee14:	f04f 0000 	mov.w	r0, #0
 800ee18:	f380 8811 	msr	BASEPRI, r0
 800ee1c:	bc09      	pop	{r0, r3}
 800ee1e:	6819      	ldr	r1, [r3, #0]
 800ee20:	6808      	ldr	r0, [r1, #0]
 800ee22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee26:	f01e 0f10 	tst.w	lr, #16
 800ee2a:	bf08      	it	eq
 800ee2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee30:	f380 8809 	msr	PSP, r0
 800ee34:	f3bf 8f6f 	isb	sy
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop
 800ee3c:	f3af 8000 	nop.w

0800ee40 <pxCurrentTCBConst>:
 800ee40:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ee44:	bf00      	nop
 800ee46:	bf00      	nop

0800ee48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	607b      	str	r3, [r7, #4]
}
 800ee60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ee62:	f7fe fdd5 	bl	800da10 <xTaskIncrementTick>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d003      	beq.n	800ee74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ee6c:	4b06      	ldr	r3, [pc, #24]	; (800ee88 <xPortSysTickHandler+0x40>)
 800ee6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee72:	601a      	str	r2, [r3, #0]
 800ee74:	2300      	movs	r3, #0
 800ee76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	f383 8811 	msr	BASEPRI, r3
}
 800ee7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ee80:	bf00      	nop
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	e000ed04 	.word	0xe000ed04

0800ee8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ee90:	4b0b      	ldr	r3, [pc, #44]	; (800eec0 <vPortSetupTimerInterrupt+0x34>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee96:	4b0b      	ldr	r3, [pc, #44]	; (800eec4 <vPortSetupTimerInterrupt+0x38>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee9c:	4b0a      	ldr	r3, [pc, #40]	; (800eec8 <vPortSetupTimerInterrupt+0x3c>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a0a      	ldr	r2, [pc, #40]	; (800eecc <vPortSetupTimerInterrupt+0x40>)
 800eea2:	fba2 2303 	umull	r2, r3, r2, r3
 800eea6:	099b      	lsrs	r3, r3, #6
 800eea8:	4a09      	ldr	r2, [pc, #36]	; (800eed0 <vPortSetupTimerInterrupt+0x44>)
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eeae:	4b04      	ldr	r3, [pc, #16]	; (800eec0 <vPortSetupTimerInterrupt+0x34>)
 800eeb0:	2207      	movs	r2, #7
 800eeb2:	601a      	str	r2, [r3, #0]
}
 800eeb4:	bf00      	nop
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	e000e010 	.word	0xe000e010
 800eec4:	e000e018 	.word	0xe000e018
 800eec8:	20000008 	.word	0x20000008
 800eecc:	10624dd3 	.word	0x10624dd3
 800eed0:	e000e014 	.word	0xe000e014

0800eed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eee4 <vPortEnableVFP+0x10>
 800eed8:	6801      	ldr	r1, [r0, #0]
 800eeda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eede:	6001      	str	r1, [r0, #0]
 800eee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eee2:	bf00      	nop
 800eee4:	e000ed88 	.word	0xe000ed88

0800eee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eeee:	f3ef 8305 	mrs	r3, IPSR
 800eef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2b0f      	cmp	r3, #15
 800eef8:	d914      	bls.n	800ef24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eefa:	4a17      	ldr	r2, [pc, #92]	; (800ef58 <vPortValidateInterruptPriority+0x70>)
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	4413      	add	r3, r2
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ef04:	4b15      	ldr	r3, [pc, #84]	; (800ef5c <vPortValidateInterruptPriority+0x74>)
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	7afa      	ldrb	r2, [r7, #11]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d20a      	bcs.n	800ef24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ef0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	607b      	str	r3, [r7, #4]
}
 800ef20:	bf00      	nop
 800ef22:	e7fe      	b.n	800ef22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ef24:	4b0e      	ldr	r3, [pc, #56]	; (800ef60 <vPortValidateInterruptPriority+0x78>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ef2c:	4b0d      	ldr	r3, [pc, #52]	; (800ef64 <vPortValidateInterruptPriority+0x7c>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d90a      	bls.n	800ef4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ef34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef38:	f383 8811 	msr	BASEPRI, r3
 800ef3c:	f3bf 8f6f 	isb	sy
 800ef40:	f3bf 8f4f 	dsb	sy
 800ef44:	603b      	str	r3, [r7, #0]
}
 800ef46:	bf00      	nop
 800ef48:	e7fe      	b.n	800ef48 <vPortValidateInterruptPriority+0x60>
	}
 800ef4a:	bf00      	nop
 800ef4c:	3714      	adds	r7, #20
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr
 800ef56:	bf00      	nop
 800ef58:	e000e3f0 	.word	0xe000e3f0
 800ef5c:	20000be0 	.word	0x20000be0
 800ef60:	e000ed0c 	.word	0xe000ed0c
 800ef64:	20000be4 	.word	0x20000be4

0800ef68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b08a      	sub	sp, #40	; 0x28
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ef70:	2300      	movs	r3, #0
 800ef72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ef74:	f7fe fc7e 	bl	800d874 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ef78:	4b5b      	ldr	r3, [pc, #364]	; (800f0e8 <pvPortMalloc+0x180>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d101      	bne.n	800ef84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ef80:	f000 f920 	bl	800f1c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef84:	4b59      	ldr	r3, [pc, #356]	; (800f0ec <pvPortMalloc+0x184>)
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4013      	ands	r3, r2
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f040 8093 	bne.w	800f0b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d01d      	beq.n	800efd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ef98:	2208      	movs	r2, #8
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4413      	add	r3, r2
 800ef9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f003 0307 	and.w	r3, r3, #7
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d014      	beq.n	800efd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f023 0307 	bic.w	r3, r3, #7
 800efb0:	3308      	adds	r3, #8
 800efb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f003 0307 	and.w	r3, r3, #7
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00a      	beq.n	800efd4 <pvPortMalloc+0x6c>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	617b      	str	r3, [r7, #20]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d06e      	beq.n	800f0b8 <pvPortMalloc+0x150>
 800efda:	4b45      	ldr	r3, [pc, #276]	; (800f0f0 <pvPortMalloc+0x188>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d869      	bhi.n	800f0b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800efe4:	4b43      	ldr	r3, [pc, #268]	; (800f0f4 <pvPortMalloc+0x18c>)
 800efe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800efe8:	4b42      	ldr	r3, [pc, #264]	; (800f0f4 <pvPortMalloc+0x18c>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800efee:	e004      	b.n	800effa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800effa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	429a      	cmp	r2, r3
 800f002:	d903      	bls.n	800f00c <pvPortMalloc+0xa4>
 800f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d1f1      	bne.n	800eff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f00c:	4b36      	ldr	r3, [pc, #216]	; (800f0e8 <pvPortMalloc+0x180>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f012:	429a      	cmp	r2, r3
 800f014:	d050      	beq.n	800f0b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f016:	6a3b      	ldr	r3, [r7, #32]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2208      	movs	r2, #8
 800f01c:	4413      	add	r3, r2
 800f01e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	685a      	ldr	r2, [r3, #4]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	1ad2      	subs	r2, r2, r3
 800f030:	2308      	movs	r3, #8
 800f032:	005b      	lsls	r3, r3, #1
 800f034:	429a      	cmp	r2, r3
 800f036:	d91f      	bls.n	800f078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4413      	add	r3, r2
 800f03e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	f003 0307 	and.w	r3, r3, #7
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00a      	beq.n	800f060 <pvPortMalloc+0xf8>
	__asm volatile
 800f04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04e:	f383 8811 	msr	BASEPRI, r3
 800f052:	f3bf 8f6f 	isb	sy
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	613b      	str	r3, [r7, #16]
}
 800f05c:	bf00      	nop
 800f05e:	e7fe      	b.n	800f05e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	685a      	ldr	r2, [r3, #4]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	1ad2      	subs	r2, r2, r3
 800f068:	69bb      	ldr	r3, [r7, #24]
 800f06a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f072:	69b8      	ldr	r0, [r7, #24]
 800f074:	f000 f908 	bl	800f288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f078:	4b1d      	ldr	r3, [pc, #116]	; (800f0f0 <pvPortMalloc+0x188>)
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	4a1b      	ldr	r2, [pc, #108]	; (800f0f0 <pvPortMalloc+0x188>)
 800f084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f086:	4b1a      	ldr	r3, [pc, #104]	; (800f0f0 <pvPortMalloc+0x188>)
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	4b1b      	ldr	r3, [pc, #108]	; (800f0f8 <pvPortMalloc+0x190>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d203      	bcs.n	800f09a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f092:	4b17      	ldr	r3, [pc, #92]	; (800f0f0 <pvPortMalloc+0x188>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4a18      	ldr	r2, [pc, #96]	; (800f0f8 <pvPortMalloc+0x190>)
 800f098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09c:	685a      	ldr	r2, [r3, #4]
 800f09e:	4b13      	ldr	r3, [pc, #76]	; (800f0ec <pvPortMalloc+0x184>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	431a      	orrs	r2, r3
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f0ae:	4b13      	ldr	r3, [pc, #76]	; (800f0fc <pvPortMalloc+0x194>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	4a11      	ldr	r2, [pc, #68]	; (800f0fc <pvPortMalloc+0x194>)
 800f0b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f0b8:	f7fe fbea 	bl	800d890 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	f003 0307 	and.w	r3, r3, #7
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00a      	beq.n	800f0dc <pvPortMalloc+0x174>
	__asm volatile
 800f0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ca:	f383 8811 	msr	BASEPRI, r3
 800f0ce:	f3bf 8f6f 	isb	sy
 800f0d2:	f3bf 8f4f 	dsb	sy
 800f0d6:	60fb      	str	r3, [r7, #12]
}
 800f0d8:	bf00      	nop
 800f0da:	e7fe      	b.n	800f0da <pvPortMalloc+0x172>
	return pvReturn;
 800f0dc:	69fb      	ldr	r3, [r7, #28]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3728      	adds	r7, #40	; 0x28
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20007ab8 	.word	0x20007ab8
 800f0ec:	20007acc 	.word	0x20007acc
 800f0f0:	20007abc 	.word	0x20007abc
 800f0f4:	20007ab0 	.word	0x20007ab0
 800f0f8:	20007ac0 	.word	0x20007ac0
 800f0fc:	20007ac4 	.word	0x20007ac4

0800f100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d04d      	beq.n	800f1ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f112:	2308      	movs	r3, #8
 800f114:	425b      	negs	r3, r3
 800f116:	697a      	ldr	r2, [r7, #20]
 800f118:	4413      	add	r3, r2
 800f11a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	685a      	ldr	r2, [r3, #4]
 800f124:	4b24      	ldr	r3, [pc, #144]	; (800f1b8 <vPortFree+0xb8>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4013      	ands	r3, r2
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d10a      	bne.n	800f144 <vPortFree+0x44>
	__asm volatile
 800f12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f132:	f383 8811 	msr	BASEPRI, r3
 800f136:	f3bf 8f6f 	isb	sy
 800f13a:	f3bf 8f4f 	dsb	sy
 800f13e:	60fb      	str	r3, [r7, #12]
}
 800f140:	bf00      	nop
 800f142:	e7fe      	b.n	800f142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00a      	beq.n	800f162 <vPortFree+0x62>
	__asm volatile
 800f14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f150:	f383 8811 	msr	BASEPRI, r3
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	60bb      	str	r3, [r7, #8]
}
 800f15e:	bf00      	nop
 800f160:	e7fe      	b.n	800f160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	685a      	ldr	r2, [r3, #4]
 800f166:	4b14      	ldr	r3, [pc, #80]	; (800f1b8 <vPortFree+0xb8>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4013      	ands	r3, r2
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d01e      	beq.n	800f1ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d11a      	bne.n	800f1ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	685a      	ldr	r2, [r3, #4]
 800f17c:	4b0e      	ldr	r3, [pc, #56]	; (800f1b8 <vPortFree+0xb8>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	43db      	mvns	r3, r3
 800f182:	401a      	ands	r2, r3
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f188:	f7fe fb74 	bl	800d874 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	685a      	ldr	r2, [r3, #4]
 800f190:	4b0a      	ldr	r3, [pc, #40]	; (800f1bc <vPortFree+0xbc>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4413      	add	r3, r2
 800f196:	4a09      	ldr	r2, [pc, #36]	; (800f1bc <vPortFree+0xbc>)
 800f198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f19a:	6938      	ldr	r0, [r7, #16]
 800f19c:	f000 f874 	bl	800f288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f1a0:	4b07      	ldr	r3, [pc, #28]	; (800f1c0 <vPortFree+0xc0>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	4a06      	ldr	r2, [pc, #24]	; (800f1c0 <vPortFree+0xc0>)
 800f1a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f1aa:	f7fe fb71 	bl	800d890 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f1ae:	bf00      	nop
 800f1b0:	3718      	adds	r7, #24
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	20007acc 	.word	0x20007acc
 800f1bc:	20007abc 	.word	0x20007abc
 800f1c0:	20007ac8 	.word	0x20007ac8

0800f1c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b085      	sub	sp, #20
 800f1c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f1ca:	f646 63c8 	movw	r3, #28360	; 0x6ec8
 800f1ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f1d0:	4b27      	ldr	r3, [pc, #156]	; (800f270 <prvHeapInit+0xac>)
 800f1d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f003 0307 	and.w	r3, r3, #7
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00c      	beq.n	800f1f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	3307      	adds	r3, #7
 800f1e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f023 0307 	bic.w	r3, r3, #7
 800f1ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f1ec:	68ba      	ldr	r2, [r7, #8]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	1ad3      	subs	r3, r2, r3
 800f1f2:	4a1f      	ldr	r2, [pc, #124]	; (800f270 <prvHeapInit+0xac>)
 800f1f4:	4413      	add	r3, r2
 800f1f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f1fc:	4a1d      	ldr	r2, [pc, #116]	; (800f274 <prvHeapInit+0xb0>)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f202:	4b1c      	ldr	r3, [pc, #112]	; (800f274 <prvHeapInit+0xb0>)
 800f204:	2200      	movs	r2, #0
 800f206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	4413      	add	r3, r2
 800f20e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f210:	2208      	movs	r2, #8
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	1a9b      	subs	r3, r3, r2
 800f216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f023 0307 	bic.w	r3, r3, #7
 800f21e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	4a15      	ldr	r2, [pc, #84]	; (800f278 <prvHeapInit+0xb4>)
 800f224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f226:	4b14      	ldr	r3, [pc, #80]	; (800f278 <prvHeapInit+0xb4>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2200      	movs	r2, #0
 800f22c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f22e:	4b12      	ldr	r3, [pc, #72]	; (800f278 <prvHeapInit+0xb4>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	2200      	movs	r2, #0
 800f234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	1ad2      	subs	r2, r2, r3
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f244:	4b0c      	ldr	r3, [pc, #48]	; (800f278 <prvHeapInit+0xb4>)
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	4a0a      	ldr	r2, [pc, #40]	; (800f27c <prvHeapInit+0xb8>)
 800f252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	4a09      	ldr	r2, [pc, #36]	; (800f280 <prvHeapInit+0xbc>)
 800f25a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f25c:	4b09      	ldr	r3, [pc, #36]	; (800f284 <prvHeapInit+0xc0>)
 800f25e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f262:	601a      	str	r2, [r3, #0]
}
 800f264:	bf00      	nop
 800f266:	3714      	adds	r7, #20
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr
 800f270:	20000be8 	.word	0x20000be8
 800f274:	20007ab0 	.word	0x20007ab0
 800f278:	20007ab8 	.word	0x20007ab8
 800f27c:	20007ac0 	.word	0x20007ac0
 800f280:	20007abc 	.word	0x20007abc
 800f284:	20007acc 	.word	0x20007acc

0800f288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f290:	4b28      	ldr	r3, [pc, #160]	; (800f334 <prvInsertBlockIntoFreeList+0xac>)
 800f292:	60fb      	str	r3, [r7, #12]
 800f294:	e002      	b.n	800f29c <prvInsertBlockIntoFreeList+0x14>
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	60fb      	str	r3, [r7, #12]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d8f7      	bhi.n	800f296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	68ba      	ldr	r2, [r7, #8]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d108      	bne.n	800f2ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	685a      	ldr	r2, [r3, #4]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	441a      	add	r2, r3
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	441a      	add	r2, r3
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d118      	bne.n	800f310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	4b15      	ldr	r3, [pc, #84]	; (800f338 <prvInsertBlockIntoFreeList+0xb0>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d00d      	beq.n	800f306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	685a      	ldr	r2, [r3, #4]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	441a      	add	r2, r3
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	601a      	str	r2, [r3, #0]
 800f304:	e008      	b.n	800f318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f306:	4b0c      	ldr	r3, [pc, #48]	; (800f338 <prvInsertBlockIntoFreeList+0xb0>)
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	601a      	str	r2, [r3, #0]
 800f30e:	e003      	b.n	800f318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d002      	beq.n	800f326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f326:	bf00      	nop
 800f328:	3714      	adds	r7, #20
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	20007ab0 	.word	0x20007ab0
 800f338:	20007ab8 	.word	0x20007ab8

0800f33c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800f340:	f007 fa58 	bl	80167f4 <touchgfx_init>
}
 800f344:	bf00      	nop
 800f346:	bd80      	pop	{r7, pc}

0800f348 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800f350:	f007 fa7a 	bl	8016848 <touchgfx_taskEntry>
}
 800f354:	bf00      	nop
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
    {
 800f364:	4a04      	ldr	r2, [pc, #16]	; (800f378 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	601a      	str	r2, [r3, #0]
    }
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4618      	mov	r0, r3
 800f36e:	370c      	adds	r7, #12
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	08030198 	.word	0x08030198

0800f37c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
    }
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7ff ffe9 	bl	800f35c <_ZN8touchgfx12FontProviderD1Ev>
 800f38a:	2104      	movs	r1, #4
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f01e f922 	bl	802d5d6 <_ZdlPvj>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f3a8:	887b      	ldrh	r3, [r7, #2]
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d010      	beq.n	800f3d0 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	dc13      	bgt.n	800f3da <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d002      	beq.n	800f3bc <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d005      	beq.n	800f3c6 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f3ba:	e00e      	b.n	800f3da <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::SENSOR_VALUES:
        // bahnschrift_55_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f3bc:	f005 f9fe 	bl	80147bc <_ZN17TypedTextDatabase8getFontsEv>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	e00a      	b.n	800f3dc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_LABEL:
        // bahnschrift_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f3c6:	f005 f9f9 	bl	80147bc <_ZN17TypedTextDatabase8getFontsEv>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	e005      	b.n	800f3dc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_UNIT:
        // bahnschrift_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f3d0:	f005 f9f4 	bl	80147bc <_ZN17TypedTextDatabase8getFontsEv>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	e000      	b.n	800f3dc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f3da:	2300      	movs	r3, #0
    }
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3708      	adds	r7, #8
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SENSOR_LABEL = 1;  // bahnschrift_20_4bpp
    static const touchgfx::FontId SENSOR_UNIT = 1;   // bahnschrift_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	4a05      	ldr	r2, [pc, #20]	; (800f404 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7ff ffb1 	bl	800f35c <_ZN8touchgfx12FontProviderD1Ev>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3708      	adds	r7, #8
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	08030184 	.word	0x08030184

0800f408 <_ZN23ApplicationFontProviderD0Ev>:
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff ffe7 	bl	800f3e4 <_ZN23ApplicationFontProviderD1Ev>
 800f416:	2104      	movs	r1, #4
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f01e f8dc 	bl	802d5d6 <_ZdlPvj>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4618      	mov	r0, r3
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
    {
 800f430:	4a04      	ldr	r2, [pc, #16]	; (800f444 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	601a      	str	r2, [r3, #0]
    }
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4618      	mov	r0, r3
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	08030724 	.word	0x08030724

0800f448 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
    }
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7ff ffe9 	bl	800f428 <_ZN8touchgfx4FontD1Ev>
 800f456:	2110      	movs	r1, #16
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f01e f8bc 	bl	802d5d6 <_ZdlPvj>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4618      	mov	r0, r3
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f468:	b590      	push	{r4, r7, lr}
 800f46a:	b087      	sub	sp, #28
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	460b      	mov	r3, r1
 800f472:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f474:	887b      	ldrh	r3, [r7, #2]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f47a:	2300      	movs	r3, #0
 800f47c:	e010      	b.n	800f4a0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f47e:	2300      	movs	r3, #0
 800f480:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f482:	2300      	movs	r3, #0
 800f484:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	3308      	adds	r3, #8
 800f48c:	681c      	ldr	r4, [r3, #0]
 800f48e:	f107 030f 	add.w	r3, r7, #15
 800f492:	f107 0210 	add.w	r2, r7, #16
 800f496:	8879      	ldrh	r1, [r7, #2]
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	47a0      	blx	r4
 800f49c:	6178      	str	r0, [r7, #20]
        return glyph;
 800f49e:	697b      	ldr	r3, [r7, #20]
    }
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	371c      	adds	r7, #28
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd90      	pop	{r4, r7, pc}

0800f4a8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	895b      	ldrh	r3, [r3, #10]
    }
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	899b      	ldrh	r3, [r3, #12]
    }
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	889b      	ldrh	r3, [r3, #4]
    }
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	370c      	adds	r7, #12
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr

0800f4f0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	889a      	ldrh	r2, [r3, #4]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	799b      	ldrb	r3, [r3, #6]
 800f500:	b29b      	uxth	r3, r3
 800f502:	4413      	add	r3, r2
 800f504:	b29b      	uxth	r3, r3
    }
 800f506:	4618      	mov	r0, r3
 800f508:	370c      	adds	r7, #12
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr

0800f512 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f512:	b480      	push	{r7}
 800f514:	b083      	sub	sp, #12
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	79db      	ldrb	r3, [r3, #7]
 800f51e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f522:	b2db      	uxtb	r3, r3
    }
 800f524:	4618      	mov	r0, r3
 800f526:	370c      	adds	r7, #12
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800f530:	b480      	push	{r7}
 800f532:	b083      	sub	sp, #12
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	79db      	ldrb	r3, [r3, #7]
 800f53c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f540:	b2db      	uxtb	r3, r3
    }
 800f542:	4618      	mov	r0, r3
 800f544:	370c      	adds	r7, #12
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
	...

0800f550 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	4a05      	ldr	r2, [pc, #20]	; (800f570 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	601a      	str	r2, [r3, #0]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff ff61 	bl	800f428 <_ZN8touchgfx4FontD1Ev>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4618      	mov	r0, r3
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	08032548 	.word	0x08032548

0800f574 <_ZN8touchgfx9ConstFontD0Ev>:
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f7ff ffe7 	bl	800f550 <_ZN8touchgfx9ConstFontD1Ev>
 800f582:	2118      	movs	r1, #24
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f01e f826 	bl	802d5d6 <_ZdlPvj>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4618      	mov	r0, r3
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	4a05      	ldr	r2, [pc, #20]	; (800f5b4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	601a      	str	r2, [r3, #0]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7ff ffd3 	bl	800f550 <_ZN8touchgfx9ConstFontD1Ev>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3708      	adds	r7, #8
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	080301bc 	.word	0x080301bc

0800f5b8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff ffe7 	bl	800f594 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f5c6:	2128      	movs	r1, #40	; 0x28
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f01e f804 	bl	802d5d6 <_ZdlPvj>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
    {
 800f5e0:	4a04      	ldr	r2, [pc, #16]	; (800f5f4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	601a      	str	r2, [r3, #0]
    }
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr
 800f5f4:	080301ac 	.word	0x080301ac

0800f5f8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
    }
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7ff ffe9 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
 800f606:	2108      	movs	r1, #8
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f01d ffe4 	bl	802d5d6 <_ZdlPvj>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4618      	mov	r0, r3
 800f612:	3708      	adds	r7, #8
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800f618:	b480      	push	{r7}
 800f61a:	b083      	sub	sp, #12
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6a1b      	ldr	r3, [r3, #32]
    }
 800f624:	4618      	mov	r0, r3
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800f63c:	4618      	mov	r0, r3
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800f648:	b580      	push	{r7, lr}
 800f64a:	b08c      	sub	sp, #48	; 0x30
 800f64c:	af08      	add	r7, sp, #32
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	4611      	mov	r1, r2
 800f654:	461a      	mov	r2, r3
 800f656:	460b      	mov	r3, r1
 800f658:	80fb      	strh	r3, [r7, #6]
 800f65a:	4613      	mov	r3, r2
 800f65c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	88b9      	ldrh	r1, [r7, #4]
 800f662:	88fa      	ldrh	r2, [r7, #6]
 800f664:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f666:	9306      	str	r3, [sp, #24]
 800f668:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f66a:	9305      	str	r3, [sp, #20]
 800f66c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f676:	9303      	str	r3, [sp, #12]
 800f678:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f67c:	9302      	str	r3, [sp, #8]
 800f67e:	7f3b      	ldrb	r3, [r7, #28]
 800f680:	9301      	str	r3, [sp, #4]
 800f682:	7e3b      	ldrb	r3, [r7, #24]
 800f684:	9300      	str	r3, [sp, #0]
 800f686:	460b      	mov	r3, r1
 800f688:	68b9      	ldr	r1, [r7, #8]
 800f68a:	f00d ff19 	bl	801d4c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800f68e:	4a0a      	ldr	r2, [pc, #40]	; (800f6b8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	601a      	str	r2, [r3, #0]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f698:	619a      	str	r2, [r3, #24]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f69e:	61da      	str	r2, [r3, #28]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6a4:	621a      	str	r2, [r3, #32]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6aa:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	080301bc 	.word	0x080301bc

0800f6bc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b085      	sub	sp, #20
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	699b      	ldr	r3, [r3, #24]
 800f6ca:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	889b      	ldrh	r3, [r3, #4]
 800f6d0:	0adb      	lsrs	r3, r3, #11
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	4413      	add	r3, r2
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4413      	add	r3, r2
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3714      	adds	r7, #20
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800f6ee:	b480      	push	{r7}
 800f6f0:	b089      	sub	sp, #36	; 0x24
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	60f8      	str	r0, [r7, #12]
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	607a      	str	r2, [r7, #4]
 800f6fa:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d003      	beq.n	800f70a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	7b1b      	ldrb	r3, [r3, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d101      	bne.n	800f70e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800f70a:	2300      	movs	r3, #0
 800f70c:	e030      	b.n	800f770 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	69da      	ldr	r2, [r3, #28]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	7b5b      	ldrb	r3, [r3, #13]
 800f71a:	021b      	lsls	r3, r3, #8
 800f71c:	b21b      	sxth	r3, r3
 800f71e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f722:	b219      	sxth	r1, r3
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	7adb      	ldrb	r3, [r3, #11]
 800f728:	b21b      	sxth	r3, r3
 800f72a:	430b      	orrs	r3, r1
 800f72c:	b21b      	sxth	r3, r3
 800f72e:	b29b      	uxth	r3, r3
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	4413      	add	r3, r2
 800f734:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	7b1b      	ldrb	r3, [r3, #12]
 800f73a:	837b      	strh	r3, [r7, #26]
 800f73c:	8b7b      	ldrh	r3, [r7, #26]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d015      	beq.n	800f76e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	881b      	ldrh	r3, [r3, #0]
 800f746:	897a      	ldrh	r2, [r7, #10]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d103      	bne.n	800f754 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800f752:	e00d      	b.n	800f770 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	881b      	ldrh	r3, [r3, #0]
 800f758:	897a      	ldrh	r2, [r7, #10]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d306      	bcc.n	800f76c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800f75e:	8b7b      	ldrh	r3, [r7, #26]
 800f760:	3b01      	subs	r3, #1
 800f762:	837b      	strh	r3, [r7, #26]
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	3304      	adds	r3, #4
 800f768:	61fb      	str	r3, [r7, #28]
 800f76a:	e7e7      	b.n	800f73c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800f76c:	bf00      	nop
        }
    }
    return 0;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3724      	adds	r7, #36	; 0x24
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp()
{
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800f77c:	b580      	push	{r7, lr}
 800f77e:	af00      	add	r7, sp, #0
 800f780:	4801      	ldr	r0, [pc, #4]	; (800f788 <__tcf_0+0xc>)
 800f782:	f7ff ff07 	bl	800f594 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f786:	bd80      	pop	{r7, pc}
 800f788:	20007ad0 	.word	0x20007ad0

0800f78c <_Z27getFont_bahnschrift_20_4bppv>:
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08c      	sub	sp, #48	; 0x30
 800f790:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800f792:	4b1f      	ldr	r3, [pc, #124]	; (800f810 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	f3bf 8f5b 	dmb	ish
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	f003 0301 	and.w	r3, r3, #1
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	bf0c      	ite	eq
 800f7a4:	2301      	moveq	r3, #1
 800f7a6:	2300      	movne	r3, #0
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d02c      	beq.n	800f808 <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800f7ae:	4818      	ldr	r0, [pc, #96]	; (800f810 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800f7b0:	f01d ff13 	bl	802d5da <__cxa_guard_acquire>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	bf14      	ite	ne
 800f7ba:	2301      	movne	r3, #1
 800f7bc:	2300      	moveq	r3, #0
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d021      	beq.n	800f808 <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	930a      	str	r3, [sp, #40]	; 0x28
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	9308      	str	r3, [sp, #32]
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	9307      	str	r3, [sp, #28]
 800f7d4:	4b0f      	ldr	r3, [pc, #60]	; (800f814 <_Z27getFont_bahnschrift_20_4bppv+0x88>)
 800f7d6:	9306      	str	r3, [sp, #24]
 800f7d8:	4b0f      	ldr	r3, [pc, #60]	; (800f818 <_Z27getFont_bahnschrift_20_4bppv+0x8c>)
 800f7da:	9305      	str	r3, [sp, #20]
 800f7dc:	2301      	movs	r3, #1
 800f7de:	9304      	str	r3, [sp, #16]
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	9303      	str	r3, [sp, #12]
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	9302      	str	r3, [sp, #8]
 800f7e8:	2304      	movs	r3, #4
 800f7ea:	9301      	str	r3, [sp, #4]
 800f7ec:	2304      	movs	r3, #4
 800f7ee:	9300      	str	r3, [sp, #0]
 800f7f0:	2314      	movs	r3, #20
 800f7f2:	2246      	movs	r2, #70	; 0x46
 800f7f4:	4909      	ldr	r1, [pc, #36]	; (800f81c <_Z27getFont_bahnschrift_20_4bppv+0x90>)
 800f7f6:	480a      	ldr	r0, [pc, #40]	; (800f820 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
 800f7f8:	f7ff ff26 	bl	800f648 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f7fc:	4804      	ldr	r0, [pc, #16]	; (800f810 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800f7fe:	f01d fef8 	bl	802d5f2 <__cxa_guard_release>
 800f802:	4808      	ldr	r0, [pc, #32]	; (800f824 <_Z27getFont_bahnschrift_20_4bppv+0x98>)
 800f804:	f01e fd24 	bl	802e250 <atexit>
    return bahnschrift_20_4bpp;
 800f808:	4b05      	ldr	r3, [pc, #20]	; (800f820 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	20007af8 	.word	0x20007af8
 800f814:	0803d27c 	.word	0x0803d27c
 800f818:	0803d284 	.word	0x0803d284
 800f81c:	0803cad4 	.word	0x0803cad4
 800f820:	20007ad0 	.word	0x20007ad0
 800f824:	0800f77d 	.word	0x0800f77d

0800f828 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_55_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_55_4bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_55_4bpp()
{
    static touchgfx::GeneratedFont bahnschrift_55_4bpp(glyphs_bahnschrift_55_4bpp, 70, 55, 11, 4, 1, 1, 1, unicodes_bahnschrift_55_4bpp, kerning_bahnschrift_55_4bpp, 0, 0, 0, 0);
 800f828:	b580      	push	{r7, lr}
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	4801      	ldr	r0, [pc, #4]	; (800f834 <__tcf_0+0xc>)
 800f82e:	f7ff feb1 	bl	800f594 <_ZN8touchgfx13GeneratedFontD1Ev>
 800f832:	bd80      	pop	{r7, pc}
 800f834:	20007afc 	.word	0x20007afc

0800f838 <_Z27getFont_bahnschrift_55_4bppv>:
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b08c      	sub	sp, #48	; 0x30
 800f83c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_55_4bpp(glyphs_bahnschrift_55_4bpp, 70, 55, 11, 4, 1, 1, 1, unicodes_bahnschrift_55_4bpp, kerning_bahnschrift_55_4bpp, 0, 0, 0, 0);
 800f83e:	4b1f      	ldr	r3, [pc, #124]	; (800f8bc <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	f3bf 8f5b 	dmb	ish
 800f846:	b2db      	uxtb	r3, r3
 800f848:	f003 0301 	and.w	r3, r3, #1
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	bf0c      	ite	eq
 800f850:	2301      	moveq	r3, #1
 800f852:	2300      	movne	r3, #0
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b00      	cmp	r3, #0
 800f858:	d02c      	beq.n	800f8b4 <_Z27getFont_bahnschrift_55_4bppv+0x7c>
 800f85a:	4818      	ldr	r0, [pc, #96]	; (800f8bc <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800f85c:	f01d febd 	bl	802d5da <__cxa_guard_acquire>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	bf14      	ite	ne
 800f866:	2301      	movne	r3, #1
 800f868:	2300      	moveq	r3, #0
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d021      	beq.n	800f8b4 <_Z27getFont_bahnschrift_55_4bppv+0x7c>
 800f870:	2300      	movs	r3, #0
 800f872:	930a      	str	r3, [sp, #40]	; 0x28
 800f874:	2300      	movs	r3, #0
 800f876:	9309      	str	r3, [sp, #36]	; 0x24
 800f878:	2300      	movs	r3, #0
 800f87a:	9308      	str	r3, [sp, #32]
 800f87c:	2300      	movs	r3, #0
 800f87e:	9307      	str	r3, [sp, #28]
 800f880:	4b0f      	ldr	r3, [pc, #60]	; (800f8c0 <_Z27getFont_bahnschrift_55_4bppv+0x88>)
 800f882:	9306      	str	r3, [sp, #24]
 800f884:	4b0f      	ldr	r3, [pc, #60]	; (800f8c4 <_Z27getFont_bahnschrift_55_4bppv+0x8c>)
 800f886:	9305      	str	r3, [sp, #20]
 800f888:	2301      	movs	r3, #1
 800f88a:	9304      	str	r3, [sp, #16]
 800f88c:	2301      	movs	r3, #1
 800f88e:	9303      	str	r3, [sp, #12]
 800f890:	2301      	movs	r3, #1
 800f892:	9302      	str	r3, [sp, #8]
 800f894:	2304      	movs	r3, #4
 800f896:	9301      	str	r3, [sp, #4]
 800f898:	230b      	movs	r3, #11
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	2337      	movs	r3, #55	; 0x37
 800f89e:	2246      	movs	r2, #70	; 0x46
 800f8a0:	4909      	ldr	r1, [pc, #36]	; (800f8c8 <_Z27getFont_bahnschrift_55_4bppv+0x90>)
 800f8a2:	480a      	ldr	r0, [pc, #40]	; (800f8cc <_Z27getFont_bahnschrift_55_4bppv+0x94>)
 800f8a4:	f7ff fed0 	bl	800f648 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800f8a8:	4804      	ldr	r0, [pc, #16]	; (800f8bc <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800f8aa:	f01d fea2 	bl	802d5f2 <__cxa_guard_release>
 800f8ae:	4808      	ldr	r0, [pc, #32]	; (800f8d0 <_Z27getFont_bahnschrift_55_4bppv+0x98>)
 800f8b0:	f01e fcce 	bl	802e250 <atexit>
    return bahnschrift_55_4bpp;
 800f8b4:	4b05      	ldr	r3, [pc, #20]	; (800f8cc <_Z27getFont_bahnschrift_55_4bppv+0x94>)
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	20007b24 	.word	0x20007b24
 800f8c0:	0803d280 	.word	0x0803d280
 800f8c4:	0803d288 	.word	0x0803d288
 800f8c8:	0803cea8 	.word	0x0803cea8
 800f8cc:	20007afc 	.word	0x20007afc
 800f8d0:	0800f829 	.word	0x0800f829

0800f8d4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
    {
    }
 800f8f6:	bf00      	nop
 800f8f8:	370c      	adds	r7, #12
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr

0800f902 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f902:	b480      	push	{r7}
 800f904:	b083      	sub	sp, #12
 800f906:	af00      	add	r7, sp, #0
 800f908:	6078      	str	r0, [r7, #4]
 800f90a:	6039      	str	r1, [r7, #0]
    {
    }
 800f90c:	bf00      	nop
 800f90e:	370c      	adds	r7, #12
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr

0800f918 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f918:	b480      	push	{r7}
 800f91a:	b083      	sub	sp, #12
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
    {
    }
 800f922:	bf00      	nop
 800f924:	370c      	adds	r7, #12
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr

0800f92e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800f92e:	b480      	push	{r7}
 800f930:	b083      	sub	sp, #12
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
 800f936:	460b      	mov	r3, r1
 800f938:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f93a:	bf00      	nop
 800f93c:	370c      	adds	r7, #12
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr

0800f946 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800f946:	b480      	push	{r7}
 800f948:	b083      	sub	sp, #12
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
    {
    }
 800f94e:	bf00      	nop
 800f950:	370c      	adds	r7, #12
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr

0800f95a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800f95a:	b480      	push	{r7}
 800f95c:	b083      	sub	sp, #12
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
    {
    }
 800f962:	bf00      	nop
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
	...

0800f970 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
    {
 800f978:	4a04      	ldr	r2, [pc, #16]	; (800f98c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	601a      	str	r2, [r3, #0]
    }
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4618      	mov	r0, r3
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	08030314 	.word	0x08030314

0800f990 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800f990:	b580      	push	{r7, lr}
 800f992:	b082      	sub	sp, #8
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
    }
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f7ff ffe9 	bl	800f970 <_ZN8touchgfx15UIEventListenerD1Ev>
 800f99e:	2104      	movs	r1, #4
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f01d fe18 	bl	802d5d6 <_ZdlPvj>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800f9b0:	b480      	push	{r7}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	70fb      	strb	r3, [r7, #3]
    {
    }
 800f9bc:	bf00      	nop
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	683a      	ldr	r2, [r7, #0]
 800f9d6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800f9da:	6810      	ldr	r0, [r2, #0]
 800f9dc:	6851      	ldr	r1, [r2, #4]
 800f9de:	c303      	stmia	r3!, {r0, r1}
    }
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
    {
 800f9f4:	4a04      	ldr	r2, [pc, #16]	; (800fa08 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	601a      	str	r2, [r3, #0]
    }
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	080302fc 	.word	0x080302fc

0800fa0c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
    }
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f7ff ffe9 	bl	800f9ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800fa1a:	2104      	movs	r1, #4
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f01d fdda 	bl	802d5d6 <_ZdlPvj>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4618      	mov	r0, r3
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fa2c:	b480      	push	{r7}
 800fa2e:	af00      	add	r7, sp, #0
    {
        return instance;
 800fa30:	4b03      	ldr	r3, [pc, #12]	; (800fa40 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800fa32:	681b      	ldr	r3, [r3, #0]
    }
 800fa34:	4618      	mov	r0, r3
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
 800fa3e:	bf00      	nop
 800fa40:	20009820 	.word	0x20009820

0800fa44 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800fa44:	b480      	push	{r7}
 800fa46:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800fa48:	4b0b      	ldr	r3, [pc, #44]	; (800fa78 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d008      	beq.n	800fa66 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800fa54:	4b08      	ldr	r3, [pc, #32]	; (800fa78 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d003      	beq.n	800fa66 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800fa5e:	4b06      	ldr	r3, [pc, #24]	; (800fa78 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa64:	e002      	b.n	800fa6c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800fa66:	4b04      	ldr	r3, [pc, #16]	; (800fa78 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	689b      	ldr	r3, [r3, #8]
    }
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	20009820 	.word	0x20009820

0800fa7c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800fa7c:	b480      	push	{r7}
 800fa7e:	b083      	sub	sp, #12
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800fa84:	4a07      	ldr	r2, [pc, #28]	; (800faa4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	601a      	str	r2, [r3, #0]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	605a      	str	r2, [r3, #4]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2200      	movs	r2, #0
 800fa94:	721a      	strb	r2, [r3, #8]
    {
    }
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	370c      	adds	r7, #12
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	080302d8 	.word	0x080302d8

0800faa8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800faa8:	b480      	push	{r7}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
    {
 800fab0:	4a04      	ldr	r2, [pc, #16]	; (800fac4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	601a      	str	r2, [r3, #0]
    }
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4618      	mov	r0, r3
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	080302d8 	.word	0x080302d8

0800fac8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
    }
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7ff ffe9 	bl	800faa8 <_ZN8touchgfx10TransitionD1Ev>
 800fad6:	210c      	movs	r1, #12
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f01d fd7c 	bl	802d5d6 <_ZdlPvj>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4618      	mov	r0, r3
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
    {
    }
 800faf0:	bf00      	nop
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
    {
    }
 800fb04:	bf00      	nop
 800fb06:	370c      	adds	r7, #12
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr

0800fb10 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800fb10:	b480      	push	{r7}
 800fb12:	b083      	sub	sp, #12
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
    {
    }
 800fb18:	bf00      	nop
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800fb2c:	f00c fc54 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 800fb30:	4603      	mov	r3, r0
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	3230      	adds	r2, #48	; 0x30
 800fb36:	6812      	ldr	r2, [r2, #0]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	4790      	blx	r2
    }
 800fb3c:	bf00      	nop
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	683a      	ldr	r2, [r7, #0]
 800fb52:	605a      	str	r2, [r3, #4]
    }
 800fb54:	bf00      	nop
 800fb56:	370c      	adds	r7, #12
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	4a05      	ldr	r2, [pc, #20]	; (800fb80 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7ff fefd 	bl	800f970 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	08032284 	.word	0x08032284

0800fb84 <_ZN8touchgfx11ApplicationD0Ev>:
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7ff ffe7 	bl	800fb60 <_ZN8touchgfx11ApplicationD1Ev>
 800fb92:	f44f 719c 	mov.w	r1, #312	; 0x138
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f01d fd1d 	bl	802d5d6 <_ZdlPvj>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
	...

0800fba8 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f00c fc78 	bl	801c4a8 <_ZN8touchgfx11ApplicationC1Ev>
 800fbb8:	4a09      	ldr	r2, [pc, #36]	; (800fbe0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	601a      	str	r2, [r3, #0]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4a04      	ldr	r2, [pc, #16]	; (800fbe4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800fbd2:	6013      	str	r3, [r2, #0]
    }
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	08030294 	.word	0x08030294
 800fbe4:	2000986c 	.word	0x2000986c

0800fbe8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 f804 	bl	800fbfe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800fbf6:	bf00      	nop
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b082      	sub	sp, #8
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00f      	beq.n	800fc30 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	330c      	adds	r3, #12
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	4610      	mov	r0, r2
 800fc24:	4798      	blx	r3
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d001      	beq.n	800fc30 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e000      	b.n	800fc32 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800fc30:	2300      	movs	r3, #0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00e      	beq.n	800fc54 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	3308      	adds	r3, #8
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4610      	mov	r0, r2
 800fc4a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800fc54:	bf00      	nop
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	683a      	ldr	r2, [r7, #0]
 800fc6a:	601a      	str	r2, [r3, #0]
    }
 800fc6c:	bf00      	nop
 800fc6e:	370c      	adds	r7, #12
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	4a05      	ldr	r2, [pc, #20]	; (800fc98 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff ff69 	bl	800fb60 <_ZN8touchgfx11ApplicationD1Ev>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4618      	mov	r0, r3
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	08030294 	.word	0x08030294

0800fc9c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f7ff ffe7 	bl	800fc78 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fcaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f01d fc91 	bl	802d5d6 <_ZdlPvj>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
	...

0800fcc0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	4a08      	ldr	r2, [pc, #32]	; (800fcec <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	601a      	str	r2, [r3, #0]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f000 fabf 	bl	8010258 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7ff ffcb 	bl	800fc78 <_ZN8touchgfx14MVPApplicationD1Ev>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4618      	mov	r0, r3
 800fce6:	3708      	adds	r7, #8
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	08030238 	.word	0x08030238

0800fcf0 <_ZN23FrontendApplicationBaseD0Ev>:
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff ffe1 	bl	800fcc0 <_ZN23FrontendApplicationBaseD1Ev>
 800fcfe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f01d fc67 	bl	802d5d6 <_ZdlPvj>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3708      	adds	r7, #8
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800fd12:	b480      	push	{r7}
 800fd14:	b083      	sub	sp, #12
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	721a      	strb	r2, [r3, #8]
    }
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	683a      	ldr	r2, [r7, #0]
 800fd3a:	605a      	str	r2, [r3, #4]
    }
 800fd3c:	bf00      	nop
 800fd3e:	370c      	adds	r7, #12
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr

0800fd48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7ff ff26 	bl	800fba8 <_ZN8touchgfx14MVPApplicationC1Ev>
 800fd5c:	4a13      	ldr	r2, [pc, #76]	; (800fdac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	601a      	str	r2, [r3, #0]
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f000 f89f 	bl	800feac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800fd7e:	f7ff fe55 	bl	800fa2c <_ZN8touchgfx3HAL11getInstanceEv>
 800fd82:	4603      	mov	r3, r0
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	3208      	adds	r2, #8
 800fd88:	6812      	ldr	r2, [r2, #0]
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800fd90:	2000      	movs	r0, #0
 800fd92:	f004 fc9b 	bl	80146cc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800fd96:	f7ff fe55 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f014 fe1e 	bl	80249de <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	08030238 	.word	0x08030238

0800fdb0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800fdb0:	b480      	push	{r7}
 800fdb2:	b083      	sub	sp, #12
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	4611      	mov	r1, r2
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7ff ffe9 	bl	800fdb0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	685a      	ldr	r2, [r3, #4]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	605a      	str	r2, [r3, #4]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	683a      	ldr	r2, [r7, #0]
 800fdea:	3308      	adds	r3, #8
 800fdec:	3208      	adds	r2, #8
 800fdee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdf2:	e883 0003 	stmia.w	r3, {r0, r1}
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800fe00:	b590      	push	{r4, r7, lr}
 800fe02:	b089      	sub	sp, #36	; 0x24
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800fe0e:	4b10      	ldr	r3, [pc, #64]	; (800fe50 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800fe10:	61bb      	str	r3, [r7, #24]
 800fe12:	2300      	movs	r3, #0
 800fe14:	61fb      	str	r3, [r7, #28]
 800fe16:	f107 0008 	add.w	r0, r7, #8
 800fe1a:	f107 0318 	add.w	r3, r7, #24
 800fe1e:	cb0c      	ldmia	r3, {r2, r3}
 800fe20:	6879      	ldr	r1, [r7, #4]
 800fe22:	f000 f85f 	bl	800fee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800fe26:	f107 0308 	add.w	r3, r7, #8
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f7ff ffcb 	bl	800fdc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800fe32:	f107 0308 	add.w	r3, r7, #8
 800fe36:	4618      	mov	r0, r3
 800fe38:	f000 fa0e 	bl	8010258 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800fe48:	bf00      	nop
 800fe4a:	3724      	adds	r7, #36	; 0x24
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd90      	pop	{r4, r7, pc}
 800fe50:	0800fe55 	.word	0x0800fe55

0800fe54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b084      	sub	sp, #16
 800fe58:	af02      	add	r7, sp, #8
 800fe5a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fe68:	461a      	mov	r2, r3
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fe70:	9300      	str	r3, [sp, #0]
 800fe72:	4b04      	ldr	r3, [pc, #16]	; (800fe84 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800fe74:	4804      	ldr	r0, [pc, #16]	; (800fe88 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800fe76:	f000 f867 	bl	800ff48 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800fe7a:	bf00      	nop
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}
 800fe82:	bf00      	nop
 800fe84:	20009860 	.word	0x20009860
 800fe88:	2000985c 	.word	0x2000985c

0800fe8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	4a04      	ldr	r2, [pc, #16]	; (800fea8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	601a      	str	r2, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr
 800fea8:	080302fc 	.word	0x080302fc

0800feac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7ff ffe8 	bl	800fe8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800febc:	4a08      	ldr	r2, [pc, #32]	; (800fee0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	601a      	str	r2, [r3, #0]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	605a      	str	r2, [r3, #4]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2200      	movs	r2, #0
 800fecc:	609a      	str	r2, [r3, #8]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2200      	movs	r2, #0
 800fed2:	60da      	str	r2, [r3, #12]
    {
    }
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	4618      	mov	r0, r3
 800fed8:	3708      	adds	r7, #8
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	0803027c 	.word	0x0803027c

0800fee4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	4639      	mov	r1, r7
 800fef0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7ff ffc8 	bl	800fe8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800fefc:	4a08      	ldr	r2, [pc, #32]	; (800ff20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	601a      	str	r2, [r3, #0]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	68ba      	ldr	r2, [r7, #8]
 800ff06:	605a      	str	r2, [r3, #4]
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	3308      	adds	r3, #8
 800ff0c:	463a      	mov	r2, r7
 800ff0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff12:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3710      	adds	r7, #16
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	0803027c 	.word	0x0803027c

0800ff24 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff fda4 	bl	800fa7c <_ZN8touchgfx10TransitionC1Ev>
 800ff34:	4a03      	ldr	r2, [pc, #12]	; (800ff44 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	601a      	str	r2, [r3, #0]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	08030214 	.word	0x08030214

0800ff48 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ff48:	b590      	push	{r4, r7, lr}
 800ff4a:	b08f      	sub	sp, #60	; 0x3c
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	607a      	str	r2, [r7, #4]
 800ff54:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	689a      	ldr	r2, [r3, #8]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	3320      	adds	r3, #32
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4610      	mov	r0, r2
 800ff66:	4798      	blx	r3
 800ff68:	4603      	mov	r3, r0
 800ff6a:	f640 6203 	movw	r2, #3587	; 0xe03
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d805      	bhi.n	800ff7e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ff72:	4b7f      	ldr	r3, [pc, #508]	; (8010170 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800ff74:	4a7f      	ldr	r2, [pc, #508]	; (8010174 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ff76:	21a3      	movs	r1, #163	; 0xa3
 800ff78:	487f      	ldr	r0, [pc, #508]	; (8010178 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ff7a:	f01e f94b 	bl	802e214 <__assert_func>
 800ff7e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	3320      	adds	r3, #32
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	4610      	mov	r0, r2
 800ff90:	4798      	blx	r3
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b0f      	cmp	r3, #15
 800ff96:	d805      	bhi.n	800ffa4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800ff98:	4b78      	ldr	r3, [pc, #480]	; (801017c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800ff9a:	4a76      	ldr	r2, [pc, #472]	; (8010174 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ff9c:	21a4      	movs	r1, #164	; 0xa4
 800ff9e:	4876      	ldr	r0, [pc, #472]	; (8010178 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ffa0:	f01e f938 	bl	802e214 <__assert_func>
 800ffa4:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	68da      	ldr	r2, [r3, #12]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	3320      	adds	r3, #32
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4610      	mov	r0, r2
 800ffb6:	4798      	blx	r3
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b0b      	cmp	r3, #11
 800ffbc:	d805      	bhi.n	800ffca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800ffbe:	4b70      	ldr	r3, [pc, #448]	; (8010180 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800ffc0:	4a6c      	ldr	r2, [pc, #432]	; (8010174 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800ffc2:	21a5      	movs	r1, #165	; 0xa5
 800ffc4:	486c      	ldr	r0, [pc, #432]	; (8010178 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800ffc6:	f01e f925 	bl	802e214 <__assert_func>
 800ffca:	bf00      	nop
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	62bb      	str	r3, [r7, #40]	; 0x28
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	627b      	str	r3, [r7, #36]	; 0x24
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800ffd8:	f00c f9fe 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f00c fa48 	bl	801c474 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800ffe4:	6a3b      	ldr	r3, [r7, #32]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d008      	beq.n	800fffe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800ffec:	6a3b      	ldr	r3, [r7, #32]
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	6a3b      	ldr	r3, [r7, #32]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	330c      	adds	r3, #12
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4610      	mov	r0, r2
 800fffc:	4798      	blx	r3
    if (*currentTrans)
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d007      	beq.n	8010016 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 8010006:	6a3b      	ldr	r3, [r7, #32]
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	6a3b      	ldr	r3, [r7, #32]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4610      	mov	r0, r2
 8010014:	4798      	blx	r3
    if (*currentScreen)
 8010016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d008      	beq.n	8010030 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 801001e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	3314      	adds	r3, #20
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4610      	mov	r0, r2
 801002e:	4798      	blx	r3
    if (*currentPresenter)
 8010030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d008      	beq.n	801004a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8010038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003a:	681a      	ldr	r2, [r3, #0]
 801003c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	3304      	adds	r3, #4
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4610      	mov	r0, r2
 8010048:	4798      	blx	r3
    if (*currentScreen)
 801004a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d007      	beq.n	8010062 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8010052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4610      	mov	r0, r2
 8010060:	4798      	blx	r3
    if (*currentPresenter)
 8010062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d008      	beq.n	801007c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 801006a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	3308      	adds	r3, #8
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4610      	mov	r0, r2
 801007a:	4798      	blx	r3
}
 801007c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	2100      	movs	r1, #0
 8010084:	4618      	mov	r0, r3
 8010086:	f000 f87d 	bl	8010184 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801008a:	4603      	mov	r3, r0
 801008c:	4619      	mov	r1, r3
 801008e:	200c      	movs	r0, #12
 8010090:	f7ff fc20 	bl	800f8d4 <_ZnwjPv>
 8010094:	4604      	mov	r4, r0
 8010096:	4620      	mov	r0, r4
 8010098:	f7ff ff44 	bl	800ff24 <_ZN8touchgfx12NoTransitionC1Ev>
 801009c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	2100      	movs	r1, #0
 80100a4:	4618      	mov	r0, r3
 80100a6:	f000 f880 	bl	80101aa <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80100aa:	4603      	mov	r3, r0
 80100ac:	4619      	mov	r1, r3
 80100ae:	f640 6004 	movw	r0, #3588	; 0xe04
 80100b2:	f7ff fc0f 	bl	800f8d4 <_ZnwjPv>
 80100b6:	4604      	mov	r4, r0
 80100b8:	4620      	mov	r0, r4
 80100ba:	f004 fd3b 	bl	8014b34 <_ZN11Screen1ViewC1Ev>
 80100be:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	2100      	movs	r1, #0
 80100c6:	4618      	mov	r0, r3
 80100c8:	f000 f882 	bl	80101d0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 80100cc:	4603      	mov	r3, r0
 80100ce:	4619      	mov	r1, r3
 80100d0:	2010      	movs	r0, #16
 80100d2:	f7ff fbff 	bl	800f8d4 <_ZnwjPv>
 80100d6:	4604      	mov	r4, r0
 80100d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100da:	4620      	mov	r0, r4
 80100dc:	f004 fcae 	bl	8014a3c <_ZN16Screen1PresenterC1ER11Screen1View>
 80100e0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100e6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80100ec:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100f2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80100f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d002      	beq.n	8010100 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80100fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fc:	3304      	adds	r3, #4
 80100fe:	e000      	b.n	8010102 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8010100:	2300      	movs	r3, #0
 8010102:	4619      	mov	r1, r3
 8010104:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010106:	f7ff fda9 	bl	800fc5c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	3304      	adds	r3, #4
 801010e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010110:	4618      	mov	r0, r3
 8010112:	f7ff fe0b 	bl	800fd2c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8010116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801011a:	4618      	mov	r0, r3
 801011c:	f000 f86b 	bl	80101f6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8010120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010122:	61fb      	str	r3, [r7, #28]
 8010124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010126:	61bb      	str	r3, [r7, #24]
 8010128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	330c      	adds	r3, #12
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	69f8      	ldr	r0, [r7, #28]
 8010136:	4798      	blx	r3
    newPresenter->activate();
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	69b8      	ldr	r0, [r7, #24]
 8010140:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010142:	6979      	ldr	r1, [r7, #20]
 8010144:	69f8      	ldr	r0, [r7, #28]
 8010146:	f00d fe05 	bl	801dd54 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	3310      	adds	r3, #16
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	6978      	ldr	r0, [r7, #20]
 8010154:	4798      	blx	r3
    newTransition->invalidate();
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3314      	adds	r3, #20
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	6978      	ldr	r0, [r7, #20]
 8010160:	4798      	blx	r3
}
 8010162:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010166:	4618      	mov	r0, r3
 8010168:	373c      	adds	r7, #60	; 0x3c
 801016a:	46bd      	mov	sp, r7
 801016c:	bd90      	pop	{r4, r7, pc}
 801016e:	bf00      	nop
 8010170:	0802f4d4 	.word	0x0802f4d4
 8010174:	0802f564 	.word	0x0802f564
 8010178:	0802f668 	.word	0x0802f668
 801017c:	0802f6ac 	.word	0x0802f6ac
 8010180:	0802f750 	.word	0x0802f750

08010184 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	460b      	mov	r3, r1
 801018e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	3324      	adds	r3, #36	; 0x24
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	887a      	ldrh	r2, [r7, #2]
 801019a:	4611      	mov	r1, r2
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	4798      	blx	r3
 80101a0:	4603      	mov	r3, r0
    }
 80101a2:	4618      	mov	r0, r3
 80101a4:	3708      	adds	r7, #8
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b082      	sub	sp, #8
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	460b      	mov	r3, r1
 80101b4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3324      	adds	r3, #36	; 0x24
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	887a      	ldrh	r2, [r7, #2]
 80101c0:	4611      	mov	r1, r2
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	4798      	blx	r3
 80101c6:	4603      	mov	r3, r0
    }
 80101c8:	4618      	mov	r0, r3
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	460b      	mov	r3, r1
 80101da:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	3324      	adds	r3, #36	; 0x24
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	887a      	ldrh	r2, [r7, #2]
 80101e6:	4611      	mov	r1, r2
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	4798      	blx	r3
 80101ec:	4603      	mov	r3, r0
    }
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80101f6:	b480      	push	{r7}
 80101f8:	b083      	sub	sp, #12
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
 80101fe:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010206:	bf00      	nop
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
	...

08010214 <_ZN8touchgfx12NoTransitionD1Ev>:
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	4a05      	ldr	r2, [pc, #20]	; (8010234 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	601a      	str	r2, [r3, #0]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	4618      	mov	r0, r3
 8010226:	f7ff fc3f 	bl	800faa8 <_ZN8touchgfx10TransitionD1Ev>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4618      	mov	r0, r3
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	08030214 	.word	0x08030214

08010238 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7ff ffe7 	bl	8010214 <_ZN8touchgfx12NoTransitionD1Ev>
 8010246:	210c      	movs	r1, #12
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f01d f9c4 	bl	802d5d6 <_ZdlPvj>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	4618      	mov	r0, r3
 8010252:	3708      	adds	r7, #8
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	4a05      	ldr	r2, [pc, #20]	; (8010278 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	601a      	str	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4618      	mov	r0, r3
 801026a:	f7ff fbbf 	bl	800f9ec <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}
 8010278:	0803027c 	.word	0x0803027c

0801027c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7ff ffe7 	bl	8010258 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801028a:	2110      	movs	r1, #16
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f01d f9a2 	bl	802d5d6 <_ZdlPvj>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	4618      	mov	r0, r3
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	68d2      	ldr	r2, [r2, #12]
 80102ac:	1052      	asrs	r2, r2, #1
 80102ae:	1899      	adds	r1, r3, r2
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	68db      	ldr	r3, [r3, #12]
 80102b4:	f003 0301 	and.w	r3, r3, #1
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d102      	bne.n	80102c2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	689b      	ldr	r3, [r3, #8]
 80102c0:	e00a      	b.n	80102d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	68d2      	ldr	r2, [r2, #12]
 80102ca:	1052      	asrs	r2, r2, #1
 80102cc:	4413      	add	r3, r2
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	6892      	ldr	r2, [r2, #8]
 80102d4:	4413      	add	r3, r2
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4608      	mov	r0, r1
 80102da:	4798      	blx	r3
    }
 80102dc:	bf00      	nop
 80102de:	3708      	adds	r7, #8
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80102e4:	b480      	push	{r7}
 80102e6:	b083      	sub	sp, #12
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d010      	beq.n	8010316 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	689b      	ldr	r3, [r3, #8]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d107      	bne.n	801030c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	68db      	ldr	r3, [r3, #12]
 8010300:	f003 0301 	and.w	r3, r3, #1
 8010304:	2b00      	cmp	r3, #0
 8010306:	d101      	bne.n	801030c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010308:	2301      	movs	r3, #1
 801030a:	e000      	b.n	801030e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 801030c:	2300      	movs	r3, #0
 801030e:	2b01      	cmp	r3, #1
 8010310:	d001      	beq.n	8010316 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010312:	2301      	movs	r3, #1
 8010314:	e000      	b.n	8010318 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8010316:	2300      	movs	r3, #0
    }
 8010318:	4618      	mov	r0, r3
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8010324:	b480      	push	{r7}
 8010326:	b083      	sub	sp, #12
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
        : color(0)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	601a      	str	r2, [r3, #0]
    {
    }
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4618      	mov	r0, r3
 8010336:	370c      	adds	r7, #12
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr

08010340 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 8010340:	b480      	push	{r7}
 8010342:	b083      	sub	sp, #12
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
        : color(col)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	683a      	ldr	r2, [r7, #0]
 801034e:	601a      	str	r2, [r3, #0]
    {
    }
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	4618      	mov	r0, r3
 8010354:	370c      	adds	r7, #12
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr

0801035e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801035e:	b480      	push	{r7}
 8010360:	b083      	sub	sp, #12
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	801a      	strh	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	805a      	strh	r2, [r3, #2]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	809a      	strh	r2, [r3, #4]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	80da      	strh	r2, [r3, #6]
    {
    }
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4618      	mov	r0, r3
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr

0801038c <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 801038c:	b480      	push	{r7}
 801038e:	b083      	sub	sp, #12
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	791b      	ldrb	r3, [r3, #4]
    }
 8010398:	4618      	mov	r0, r3
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	460b      	mov	r3, r1
 80103ae:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	887a      	ldrh	r2, [r7, #2]
 80103b4:	801a      	strh	r2, [r3, #0]
    {
    }
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80103cc:	4a14      	ldr	r2, [pc, #80]	; (8010420 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	601a      	str	r2, [r3, #0]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	3304      	adds	r3, #4
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7ff ffc1 	bl	801035e <_ZN8touchgfx4RectC1Ev>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	330c      	adds	r3, #12
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff ffbc 	bl	801035e <_ZN8touchgfx4RectC1Ev>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	615a      	str	r2, [r3, #20]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	619a      	str	r2, [r3, #24]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2200      	movs	r2, #0
 80103f6:	61da      	str	r2, [r3, #28]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	841a      	strh	r2, [r3, #32]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	845a      	strh	r2, [r3, #34]	; 0x22
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4618      	mov	r0, r3
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	080324e4 	.word	0x080324e4

08010424 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
    {
 801042c:	4a04      	ldr	r2, [pc, #16]	; (8010440 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	601a      	str	r2, [r3, #0]
    }
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	370c      	adds	r7, #12
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr
 8010440:	080324e4 	.word	0x080324e4

08010444 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
    }
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f7ff ffe9 	bl	8010424 <_ZN8touchgfx8DrawableD1Ev>
 8010452:	2128      	movs	r1, #40	; 0x28
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f01d f8be 	bl	802d5d6 <_ZdlPvj>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4618      	mov	r0, r3
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8010464:	b480      	push	{r7}
 8010466:	b083      	sub	sp, #12
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801046c:	2300      	movs	r3, #0
    }
 801046e:	4618      	mov	r0, r3
 8010470:	370c      	adds	r7, #12
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr

0801047a <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 801047a:	b580      	push	{r7, lr}
 801047c:	b084      	sub	sp, #16
 801047e:	af00      	add	r7, sp, #0
 8010480:	60f8      	str	r0, [r7, #12]
 8010482:	4608      	mov	r0, r1
 8010484:	4611      	mov	r1, r2
 8010486:	461a      	mov	r2, r3
 8010488:	4603      	mov	r3, r0
 801048a:	817b      	strh	r3, [r7, #10]
 801048c:	460b      	mov	r3, r1
 801048e:	813b      	strh	r3, [r7, #8]
 8010490:	4613      	mov	r3, r2
 8010492:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010494:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010498:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801049c:	4619      	mov	r1, r3
 801049e:	68f8      	ldr	r0, [r7, #12]
 80104a0:	f000 f82a 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80104a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80104a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104ac:	4619      	mov	r1, r3
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f000 f87e 	bl	80105b0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80104b4:	bf00      	nop
 80104b6:	3710      	adds	r7, #16
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	460b      	mov	r3, r1
 80104c6:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	887a      	ldrh	r2, [r7, #2]
 80104cc:	809a      	strh	r2, [r3, #4]
    }
 80104ce:	bf00      	nop
 80104d0:	370c      	adds	r7, #12
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr

080104da <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 80104da:	b480      	push	{r7}
 80104dc:	b083      	sub	sp, #12
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
 80104e2:	460b      	mov	r3, r1
 80104e4:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	887a      	ldrh	r2, [r7, #2]
 80104ea:	80da      	strh	r2, [r3, #6]
    }
 80104ec:	bf00      	nop
 80104ee:	370c      	adds	r7, #12
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	460b      	mov	r3, r1
 8010502:	807b      	strh	r3, [r7, #2]
 8010504:	4613      	mov	r3, r2
 8010506:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	332c      	adds	r3, #44	; 0x2c
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010514:	4611      	mov	r1, r2
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	4798      	blx	r3
        setY(y);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	3330      	adds	r3, #48	; 0x30
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010526:	4611      	mov	r1, r2
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	4798      	blx	r3
    }
 801052c:	bf00      	nop
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	460b      	mov	r3, r1
 801053e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	887a      	ldrh	r2, [r7, #2]
 8010544:	811a      	strh	r2, [r3, #8]
    }
 8010546:	bf00      	nop
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8010552:	b480      	push	{r7}
 8010554:	b083      	sub	sp, #12
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	460b      	mov	r3, r1
 801055c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	887a      	ldrh	r2, [r7, #2]
 8010562:	815a      	strh	r2, [r3, #10]
    }
 8010564:	bf00      	nop
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
    {
    }
 8010578:	bf00      	nop
 801057a:	370c      	adds	r7, #12
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr

08010584 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010584:	b480      	push	{r7}
 8010586:	b083      	sub	sp, #12
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
    {
    }
 801058e:	bf00      	nop
 8010590:	370c      	adds	r7, #12
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr

0801059a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 801059a:	b480      	push	{r7}
 801059c:	b083      	sub	sp, #12
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]
    {
    }
 80105a4:	bf00      	nop
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	807b      	strh	r3, [r7, #2]
 80105bc:	4613      	mov	r3, r2
 80105be:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	3334      	adds	r3, #52	; 0x34
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80105cc:	4611      	mov	r1, r2
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	4798      	blx	r3
        setHeight(height);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	3338      	adds	r3, #56	; 0x38
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80105de:	4611      	mov	r1, r2
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	4798      	blx	r3
    }
 80105e4:	bf00      	nop
 80105e6:	3708      	adds	r7, #8
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
    {
    }
 80105f6:	bf00      	nop
 80105f8:	370c      	adds	r7, #12
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr

08010602 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8010602:	b480      	push	{r7}
 8010604:	b083      	sub	sp, #12
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
    {
    }
 801060a:	bf00      	nop
 801060c:	370c      	adds	r7, #12
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr

08010616 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8010616:	b480      	push	{r7}
 8010618:	b083      	sub	sp, #12
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
 801061e:	460b      	mov	r3, r1
 8010620:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	78fa      	ldrb	r2, [r7, #3]
 8010626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 801062a:	bf00      	nop
 801062c:	370c      	adds	r7, #12
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr

08010636 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010636:	b480      	push	{r7}
 8010638:	b083      	sub	sp, #12
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010644:	4618      	mov	r0, r3
 8010646:	370c      	adds	r7, #12
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 801065e:	4618      	mov	r0, r3
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr

0801066a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801066a:	b580      	push	{r7, lr}
 801066c:	b082      	sub	sp, #8
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
 8010672:	460b      	mov	r3, r1
 8010674:	807b      	strh	r3, [r7, #2]
 8010676:	4613      	mov	r3, r2
 8010678:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	3350      	adds	r3, #80	; 0x50
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	8879      	ldrh	r1, [r7, #2]
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801068a:	b292      	uxth	r2, r2
 801068c:	1a8a      	subs	r2, r1, r2
 801068e:	b292      	uxth	r2, r2
 8010690:	b210      	sxth	r0, r2
 8010692:	8839      	ldrh	r1, [r7, #0]
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801069a:	b292      	uxth	r2, r2
 801069c:	1a8a      	subs	r2, r1, r2
 801069e:	b292      	uxth	r2, r2
 80106a0:	b212      	sxth	r2, r2
 80106a2:	4601      	mov	r1, r0
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	4798      	blx	r3
    }
 80106a8:	bf00      	nop
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106be:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106c6:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106ce:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80106d0:	bf00      	nop
 80106d2:	370c      	adds	r7, #12
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr

080106dc <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	60b9      	str	r1, [r7, #8]
 80106e6:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f7ff ffe1 	bl	80106b0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	68fa      	ldr	r2, [r7, #12]
 80106fa:	601a      	str	r2, [r3, #0]
    }
 80106fc:	bf00      	nop
 80106fe:	3710      	adds	r7, #16
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	4618      	mov	r0, r3
 8010710:	f7ff fe58 	bl	80103c4 <_ZN8touchgfx8DrawableC1Ev>
 8010714:	4a05      	ldr	r2, [pc, #20]	; (801072c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	601a      	str	r2, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	4618      	mov	r0, r3
 8010724:	3708      	adds	r7, #8
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	08030fb8 	.word	0x08030fb8

08010730 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8010730:	b480      	push	{r7}
 8010732:	b083      	sub	sp, #12
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 801073c:	4618      	mov	r0, r3
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr

08010748 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
    {
 8010750:	4a06      	ldr	r2, [pc, #24]	; (801076c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	3304      	adds	r3, #4
 801075a:	4618      	mov	r0, r3
 801075c:	f000 f9b6 	bl	8010acc <_ZN8touchgfx9ContainerD1Ev>
    }
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4618      	mov	r0, r3
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	080325dc 	.word	0x080325dc

08010770 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
    }
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f7ff ffe5 	bl	8010748 <_ZN8touchgfx6ScreenD1Ev>
 801077e:	213c      	movs	r1, #60	; 0x3c
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f01c ff28 	bl	802d5d6 <_ZdlPvj>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	4618      	mov	r0, r3
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8010790:	b480      	push	{r7}
 8010792:	b083      	sub	sp, #12
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
    {
    }
 8010798:	bf00      	nop
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr

080107a4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
    {
    }
 80107ac:	bf00      	nop
 80107ae:	370c      	adds	r7, #12
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr

080107b8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
    {
    }
 80107c0:	bf00      	nop
 80107c2:	370c      	adds	r7, #12
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
    {
    }
 80107d4:	bf00      	nop
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80107e0:	b480      	push	{r7}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	460b      	mov	r3, r1
 80107ea:	70fb      	strb	r3, [r7, #3]
    {
    }
 80107ec:	bf00      	nop
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	3304      	adds	r3, #4
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	4618      	mov	r0, r3
 801080a:	f006 fe45 	bl	8017498 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801080e:	bf00      	nop
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010816:	b580      	push	{r7, lr}
 8010818:	b084      	sub	sp, #16
 801081a:	af00      	add	r7, sp, #0
 801081c:	60f8      	str	r0, [r7, #12]
 801081e:	607b      	str	r3, [r7, #4]
 8010820:	460b      	mov	r3, r1
 8010822:	817b      	strh	r3, [r7, #10]
 8010824:	4613      	mov	r3, r2
 8010826:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	4618      	mov	r0, r3
 801082c:	f7ff ff03 	bl	8010636 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d008      	beq.n	8010848 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	4618      	mov	r0, r3
 801083a:	f7ff ff09 	bl	8010650 <_ZNK8touchgfx8Drawable11isTouchableEv>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d001      	beq.n	8010848 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010844:	2301      	movs	r3, #1
 8010846:	e000      	b.n	801084a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010848:	2300      	movs	r3, #0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d002      	beq.n	8010854 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801084e:	68fa      	ldr	r2, [r7, #12]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	601a      	str	r2, [r3, #0]
        }
    }
 8010854:	bf00      	nop
 8010856:	3710      	adds	r7, #16
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	f7ff fdac 	bl	80103c4 <_ZN8touchgfx8DrawableC1Ev>
 801086c:	4a03      	ldr	r2, [pc, #12]	; (801087c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	601a      	str	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4618      	mov	r0, r3
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	0803056c 	.word	0x0803056c

08010880 <_ZN8touchgfx6WidgetD1Ev>:
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	4a05      	ldr	r2, [pc, #20]	; (80108a0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	601a      	str	r2, [r3, #0]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4618      	mov	r0, r3
 8010892:	f7ff fdc7 	bl	8010424 <_ZN8touchgfx8DrawableD1Ev>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	0803056c 	.word	0x0803056c

080108a4 <_ZN8touchgfx6WidgetD0Ev>:
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7ff ffe7 	bl	8010880 <_ZN8touchgfx6WidgetD1Ev>
 80108b2:	2128      	movs	r1, #40	; 0x28
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f01c fe8e 	bl	802d5d6 <_ZdlPvj>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	4618      	mov	r0, r3
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	4618      	mov	r0, r3
 80108d0:	2326      	movs	r3, #38	; 0x26
 80108d2:	461a      	mov	r2, r3
 80108d4:	2100      	movs	r1, #0
 80108d6:	f01d fe2b 	bl	802e530 <memset>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	f7ff ffbd 	bl	801085c <_ZN8touchgfx6WidgetC1Ev>
 80108e2:	4a09      	ldr	r2, [pc, #36]	; (8010908 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	601a      	str	r2, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	22ff      	movs	r2, #255	; 0xff
 80108ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	3328      	adds	r3, #40	; 0x28
 80108f4:	2100      	movs	r1, #0
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7ff fd22 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	4618      	mov	r0, r3
 8010900:	3708      	adds	r7, #8
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	08031e34 	.word	0x08031e34

0801090c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	683a      	ldr	r2, [r7, #0]
 801091a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801091c:	bf00      	nop
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	460b      	mov	r3, r1
 8010932:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	78fa      	ldrb	r2, [r7, #3]
 8010938:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 801093c:	bf00      	nop
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4618      	mov	r0, r3
 8010956:	2326      	movs	r3, #38	; 0x26
 8010958:	461a      	mov	r2, r3
 801095a:	2100      	movs	r1, #0
 801095c:	f01d fde8 	bl	802e530 <memset>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	4618      	mov	r0, r3
 8010964:	f7ff ff7a 	bl	801085c <_ZN8touchgfx6WidgetC1Ev>
 8010968:	4a09      	ldr	r2, [pc, #36]	; (8010990 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	683a      	ldr	r2, [r7, #0]
 8010972:	8812      	ldrh	r2, [r2, #0]
 8010974:	84da      	strh	r2, [r3, #38]	; 0x26
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	22ff      	movs	r2, #255	; 0xff
 801097a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 801097e:	6839      	ldr	r1, [r7, #0]
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f00a f820 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4618      	mov	r0, r3
 801098a:	3708      	adds	r7, #8
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	08032108 	.word	0x08032108

08010994 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	460b      	mov	r3, r1
 801099e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80109a0:	4a06      	ldr	r2, [pc, #24]	; (80109bc <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	601a      	str	r2, [r3, #0]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	887a      	ldrh	r2, [r7, #2]
 80109aa:	809a      	strh	r2, [r3, #4]
    }
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	4618      	mov	r0, r3
 80109b0:	370c      	adds	r7, #12
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop
 80109bc:	080301ac 	.word	0x080301ac

080109c0 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	4618      	mov	r0, r3
 80109cc:	2326      	movs	r3, #38	; 0x26
 80109ce:	461a      	mov	r2, r3
 80109d0:	2100      	movs	r1, #0
 80109d2:	f01d fdad 	bl	802e530 <memset>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4618      	mov	r0, r3
 80109da:	f7ff ff3f 	bl	801085c <_ZN8touchgfx6WidgetC1Ev>
 80109de:	4a14      	ldr	r2, [pc, #80]	; (8010a30 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	601a      	str	r2, [r3, #0]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	3328      	adds	r3, #40	; 0x28
 80109e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7ff ffd1 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	3330      	adds	r3, #48	; 0x30
 80109f6:	2100      	movs	r1, #0
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7ff fca1 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2200      	movs	r2, #0
 8010a02:	869a      	strh	r2, [r3, #52]	; 0x34
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	22ff      	movs	r2, #255	; 0xff
 8010a08:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2200      	movs	r2, #0
 8010a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4618      	mov	r0, r3
 8010a28:	3708      	adds	r7, #8
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	08031d8c 	.word	0x08031d8c

08010a34 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	4a08      	ldr	r2, [pc, #32]	; (8010a60 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	601a      	str	r2, [r3, #0]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	3328      	adds	r3, #40	; 0x28
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7fe fdc6 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7ff ff16 	bl	8010880 <_ZN8touchgfx6WidgetD1Ev>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	4618      	mov	r0, r3
 8010a58:	3708      	adds	r7, #8
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	08031d8c 	.word	0x08031d8c

08010a64 <_ZN8touchgfx8TextAreaD0Ev>:
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f7ff ffe1 	bl	8010a34 <_ZN8touchgfx8TextAreaD1Ev>
 8010a72:	213c      	movs	r1, #60	; 0x3c
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f01c fdae 	bl	802d5d6 <_ZdlPvj>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3708      	adds	r7, #8
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7ff ff96 	bl	80109c0 <_ZN8touchgfx8TextAreaC1Ev>
 8010a94:	4a05      	ldr	r2, [pc, #20]	; (8010aac <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	08031ffc 	.word	0x08031ffc

08010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010ab0:	b480      	push	{r7}
 8010ab2:	b083      	sub	sp, #12
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010ac0:	bf00      	nop
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	4a05      	ldr	r2, [pc, #20]	; (8010aec <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	601a      	str	r2, [r3, #0]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7ff fca1 	bl	8010424 <_ZN8touchgfx8DrawableD1Ev>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	08030fb8 	.word	0x08030fb8

08010af0 <_ZN8touchgfx9ContainerD0Ev>:
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f7ff ffe7 	bl	8010acc <_ZN8touchgfx9ContainerD1Ev>
 8010afe:	212c      	movs	r1, #44	; 0x2c
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f01c fd68 	bl	802d5d6 <_ZdlPvj>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7ff fdf2 	bl	8010704 <_ZN8touchgfx9ContainerC1Ev>
 8010b20:	4a0b      	ldr	r2, [pc, #44]	; (8010b50 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	601a      	str	r2, [r3, #0]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	22ff      	movs	r2, #255	; 0xff
 8010b32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2101      	movs	r1, #1
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7ff fd68 	bl	8010616 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3708      	adds	r7, #8
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}
 8010b50:	080304d4 	.word	0x080304d4

08010b54 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	78fa      	ldrb	r2, [r7, #3]
 8010b64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	3388      	adds	r3, #136	; 0x88
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	4798      	blx	r3
    }
 8010b74:	bf00      	nop
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	370c      	adds	r7, #12
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr

08010b96 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:

    /** @copydoc Image::setAlpha() */
    void setAlpha(uint8_t newAlpha)
 8010b96:	b580      	push	{r7, lr}
 8010b98:	b082      	sub	sp, #8
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
 8010b9e:	460b      	mov	r3, r1
 8010ba0:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	78fa      	ldrb	r2, [r7, #3]
 8010ba6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	338c      	adds	r3, #140	; 0x8c
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	4798      	blx	r3
    }
 8010bb6:	bf00      	nop
 8010bb8:	3708      	adds	r7, #8
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 8010bbe:	b480      	push	{r7}
 8010bc0:	b083      	sub	sp, #12
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 8010bcc:	4618      	mov	r0, r3
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00d      	beq.n	8010c04 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	330c      	adds	r3, #12
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4610      	mov	r0, r2
 8010bf8:	4798      	blx	r3
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d001      	beq.n	8010c04 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 8010c00:	2301      	movs	r3, #1
 8010c02:	e000      	b.n	8010c06 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 8010c04:	2300      	movs	r3, #0
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d009      	beq.n	8010c1e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	3308      	adds	r3, #8
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6879      	ldr	r1, [r7, #4]
 8010c1a:	4610      	mov	r0, r2
 8010c1c:	4798      	blx	r3
        }
    }
 8010c1e:	bf00      	nop
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 8010c26:	b480      	push	{r7}
 8010c28:	b083      	sub	sp, #12
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
    {
    }
 8010c2e:	bf00      	nop
 8010c30:	370c      	adds	r7, #12
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr

08010c3a <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 8010c3a:	b480      	push	{r7}
 8010c3c:	b083      	sub	sp, #12
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
    {
    }
 8010c42:	bf00      	nop
 8010c44:	370c      	adds	r7, #12
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr
	...

08010c50 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	4a05      	ldr	r2, [pc, #20]	; (8010c70 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	601a      	str	r2, [r3, #0]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7ff fe0d 	bl	8010880 <_ZN8touchgfx6WidgetD1Ev>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	08032108 	.word	0x08032108

08010c74 <_ZN8touchgfx5ImageD0Ev>:
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f7ff ffe7 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8010c82:	212c      	movs	r1, #44	; 0x2c
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f01c fca6 	bl	802d5d6 <_ZdlPvj>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	4a05      	ldr	r2, [pc, #20]	; (8010cb4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	601a      	str	r2, [r3, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff fdeb 	bl	8010880 <_ZN8touchgfx6WidgetD1Ev>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4618      	mov	r0, r3
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	08031e34 	.word	0x08031e34

08010cb8 <_ZN8touchgfx3BoxD0Ev>:
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f7ff ffe7 	bl	8010c94 <_ZN8touchgfx3BoxD1Ev>
 8010cc6:	212c      	movs	r1, #44	; 0x2c
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f01c fc84 	bl	802d5d6 <_ZdlPvj>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7ff fdee 	bl	80108c4 <_ZN8touchgfx3BoxC1Ev>
 8010ce8:	4a08      	ldr	r2, [pc, #32]	; (8010d0c <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	601a      	str	r2, [r3, #0]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	332c      	adds	r3, #44	; 0x2c
 8010cf2:	2100      	movs	r1, #0
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7ff fb23 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	4618      	mov	r0, r3
 8010d04:	3708      	adds	r7, #8
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	080320a4 	.word	0x080320a4

08010d10 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	683a      	ldr	r2, [r7, #0]
 8010d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8010d20:	bf00      	nop
 8010d22:	370c      	adds	r7, #12
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr

08010d2c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	460b      	mov	r3, r1
 8010d36:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	887a      	ldrh	r2, [r7, #2]
 8010d3c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8010d3e:	bf00      	nop
 8010d40:	370c      	adds	r7, #12
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr

08010d4a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010d4a:	b580      	push	{r7, lr}
 8010d4c:	b084      	sub	sp, #16
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	6078      	str	r0, [r7, #4]
 8010d52:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7ff ff10 	bl	8010b7c <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8010d60:	6838      	ldr	r0, [r7, #0]
 8010d62:	f7ff fb13 	bl	801038c <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	bf0c      	ite	eq
 8010d6c:	2301      	moveq	r3, #1
 8010d6e:	2300      	movne	r3, #0
 8010d70:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8010d72:	7bbb      	ldrb	r3, [r7, #14]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d005      	beq.n	8010d84 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8010d78:	7bfb      	ldrb	r3, [r7, #15]
 8010d7a:	f083 0301 	eor.w	r3, r3, #1
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d108      	bne.n	8010d96 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8010d84:	7bbb      	ldrb	r3, [r7, #14]
 8010d86:	f083 0301 	eor.w	r3, r3, #1
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00f      	beq.n	8010db0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 8010d90:	7bfb      	ldrb	r3, [r7, #15]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00c      	beq.n	8010db0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	7bba      	ldrb	r2, [r7, #14]
 8010d9a:	4611      	mov	r1, r2
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7ff fed9 	bl	8010b54 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	3314      	adds	r3, #20
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	4610      	mov	r0, r2
 8010dae:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8010db0:	7bfb      	ldrb	r3, [r7, #15]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d007      	beq.n	8010dc6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 8010db6:	6838      	ldr	r0, [r7, #0]
 8010db8:	f7ff fae8 	bl	801038c <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d101      	bne.n	8010dc6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e000      	b.n	8010dc8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d006      	beq.n	8010dda <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	3384      	adds	r3, #132	; 0x84
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4610      	mov	r0, r2
 8010dd8:	4798      	blx	r3
        }
    }
 8010dda:	bf00      	nop
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
	...

08010de4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	4a05      	ldr	r2, [pc, #20]	; (8010e04 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	601a      	str	r2, [r3, #0]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7ff fe69 	bl	8010acc <_ZN8touchgfx9ContainerD1Ev>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	080304d4 	.word	0x080304d4

08010e08 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f7ff ffe7 	bl	8010de4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8010e16:	2134      	movs	r1, #52	; 0x34
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f01c fbdc 	bl	802d5d6 <_ZdlPvj>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4618      	mov	r0, r3
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	4a05      	ldr	r2, [pc, #20]	; (8010e48 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	601a      	str	r2, [r3, #0]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7ff fc85 	bl	8010748 <_ZN8touchgfx6ScreenD1Ev>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	4618      	mov	r0, r3
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	08030408 	.word	0x08030408

08010e4c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7ff ffe7 	bl	8010e28 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8010e5a:	2140      	movs	r1, #64	; 0x40
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f01c fbba 	bl	802d5d6 <_ZdlPvj>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4618      	mov	r0, r3
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	4a7b      	ldr	r2, [pc, #492]	; (8011064 <_ZN15Screen1ViewBaseD1Ev+0x1f8>)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	601a      	str	r2, [r3, #0]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f603 234c 	addw	r3, r3, #2636	; 0xa4c
 8010e80:	4618      	mov	r0, r3
 8010e82:	f003 f9b1 	bl	80141e8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7ff fedf 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f003 fa81 	bl	80143a0 <_ZN8touchgfx5GaugeD1Ev>
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f003 f9c7 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f003 f9c1 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f003 f9bb 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f003 f9b5 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f003 f9af 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f003 f9a9 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8010eec:	4618      	mov	r0, r3
 8010eee:	f003 f9a3 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f003 f99d 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8010f04:	4618      	mov	r0, r3
 8010f06:	f003 f997 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8010f10:	4618      	mov	r0, r3
 8010f12:	f003 f991 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f003 f98b 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f003 f985 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8010f34:	4618      	mov	r0, r3
 8010f36:	f003 f97f 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8010f40:	4618      	mov	r0, r3
 8010f42:	f003 f979 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f003 f973 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f003 f96d 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010f64:	4618      	mov	r0, r3
 8010f66:	f003 f967 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8010f70:	4618      	mov	r0, r3
 8010f72:	f003 f961 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f003 f95b 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f003 f955 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8010f94:	4618      	mov	r0, r3
 8010f96:	f003 f94f 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f003 f949 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010fac:	4618      	mov	r0, r3
 8010fae:	f003 f943 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f003 f93d 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7ff fe43 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7ff fe3d 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7ff fe37 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7ff fe31 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7ff fe2b 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011000:	4618      	mov	r0, r3
 8011002:	f7ff fe25 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801100c:	4618      	mov	r0, r3
 801100e:	f7ff fe1f 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011018:	4618      	mov	r0, r3
 801101a:	f7ff fe19 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	33f0      	adds	r3, #240	; 0xf0
 8011022:	4618      	mov	r0, r3
 8011024:	f7ff fe14 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	33c4      	adds	r3, #196	; 0xc4
 801102c:	4618      	mov	r0, r3
 801102e:	f7ff fe0f 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	3398      	adds	r3, #152	; 0x98
 8011036:	4618      	mov	r0, r3
 8011038:	f7ff fe0a 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	336c      	adds	r3, #108	; 0x6c
 8011040:	4618      	mov	r0, r3
 8011042:	f7ff fe27 	bl	8010c94 <_ZN8touchgfx3BoxD1Ev>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	3340      	adds	r3, #64	; 0x40
 801104a:	4618      	mov	r0, r3
 801104c:	f7ff fe22 	bl	8010c94 <_ZN8touchgfx3BoxD1Ev>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4618      	mov	r0, r3
 8011054:	f7ff fee8 	bl	8010e28 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4618      	mov	r0, r3
 801105c:	3708      	adds	r7, #8
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	0803033c 	.word	0x0803033c

08011068 <_ZN15Screen1ViewBaseD0Ev>:
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f7ff fefb 	bl	8010e6c <_ZN15Screen1ViewBaseD1Ev>
 8011076:	f640 6104 	movw	r1, #3588	; 0xe04
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f01c faab 	bl	802d5d6 <_ZdlPvj>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	4618      	mov	r0, r3
 8011084:	3708      	adds	r7, #8
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
	...

0801108c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 801108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011090:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 8011094:	af02      	add	r7, sp, #8
 8011096:	1d3b      	adds	r3, r7, #4
 8011098:	6018      	str	r0, [r3, #0]
 801109a:	1d3b      	adds	r3, r7, #4
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	4618      	mov	r0, r3
 80110a0:	f002 ff74 	bl	8013f8c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80110a4:	4ae5      	ldr	r2, [pc, #916]	; (801143c <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
 80110a6:	1d3b      	adds	r3, r7, #4
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	601a      	str	r2, [r3, #0]
 80110ac:	1d3b      	adds	r3, r7, #4
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	3340      	adds	r3, #64	; 0x40
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7ff fc06 	bl	80108c4 <_ZN8touchgfx3BoxC1Ev>
 80110b8:	1d3b      	adds	r3, r7, #4
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	336c      	adds	r3, #108	; 0x6c
 80110be:	4618      	mov	r0, r3
 80110c0:	f7ff fc00 	bl	80108c4 <_ZN8touchgfx3BoxC1Ev>
 80110c4:	1d3b      	adds	r3, r7, #4
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80110cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80110d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7ff f965 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80110da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80110de:	4619      	mov	r1, r3
 80110e0:	4620      	mov	r0, r4
 80110e2:	f7ff fc31 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80110e6:	1d3b      	adds	r3, r7, #4
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 80110ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80110f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7ff f954 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80110fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011100:	4619      	mov	r1, r3
 8011102:	4620      	mov	r0, r4
 8011104:	f7ff fc20 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011108:	1d3b      	adds	r3, r7, #4
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8011110:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011114:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011118:	4618      	mov	r0, r3
 801111a:	f7ff f943 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 801111e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8011122:	4619      	mov	r1, r3
 8011124:	4620      	mov	r0, r4
 8011126:	f7ff fc0f 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801112a:	1d3b      	adds	r3, r7, #4
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 8011132:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011136:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801113a:	4618      	mov	r0, r3
 801113c:	f7ff f932 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 8011140:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011144:	4619      	mov	r1, r3
 8011146:	4620      	mov	r0, r4
 8011148:	f7ff fbfe 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801114c:	1d3b      	adds	r3, r7, #4
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 8011154:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011158:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801115c:	4618      	mov	r0, r3
 801115e:	f7ff f921 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 8011162:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011166:	4619      	mov	r1, r3
 8011168:	4620      	mov	r0, r4
 801116a:	f7ff fbed 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801116e:	1d3b      	adds	r3, r7, #4
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011176:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801117a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801117e:	4618      	mov	r0, r3
 8011180:	f7ff f910 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 8011184:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011188:	4619      	mov	r1, r3
 801118a:	4620      	mov	r0, r4
 801118c:	f7ff fbdc 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011190:	1d3b      	adds	r3, r7, #4
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8011198:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801119c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7ff f8ff 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80111a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80111aa:	4619      	mov	r1, r3
 80111ac:	4620      	mov	r0, r4
 80111ae:	f7ff fbcb 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80111b2:	1d3b      	adds	r3, r7, #4
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80111ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80111be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7ff f8ee 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80111c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80111cc:	4619      	mov	r1, r3
 80111ce:	4620      	mov	r0, r4
 80111d0:	f7ff fbba 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80111d4:	1d3b      	adds	r3, r7, #4
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 80111dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80111e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff f8dd 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80111ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80111ee:	4619      	mov	r1, r3
 80111f0:	4620      	mov	r0, r4
 80111f2:	f7ff fba9 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80111f6:	1d3b      	adds	r3, r7, #4
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f503 7409 	add.w	r4, r3, #548	; 0x224
 80111fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011202:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011206:	4618      	mov	r0, r3
 8011208:	f7ff f8cc 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 801120c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011210:	4619      	mov	r1, r3
 8011212:	4620      	mov	r0, r4
 8011214:	f7ff fb98 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011218:	1d3b      	adds	r3, r7, #4
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8011220:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011224:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011228:	4618      	mov	r0, r3
 801122a:	f7ff f8bb 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 801122e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011232:	4619      	mov	r1, r3
 8011234:	4620      	mov	r0, r4
 8011236:	f7ff fb87 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801123a:	1d3b      	adds	r3, r7, #4
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8011242:	4618      	mov	r0, r3
 8011244:	f7ff fc1e 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011248:	1d3b      	adds	r3, r7, #4
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8011250:	4618      	mov	r0, r3
 8011252:	f7ff fc17 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011256:	1d3b      	adds	r3, r7, #4
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 801125e:	4618      	mov	r0, r3
 8011260:	f7ff fc10 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011264:	1d3b      	adds	r3, r7, #4
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 801126c:	4618      	mov	r0, r3
 801126e:	f7ff fc09 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011272:	1d3b      	adds	r3, r7, #4
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 801127a:	4618      	mov	r0, r3
 801127c:	f7ff fc02 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011280:	1d3b      	adds	r3, r7, #4
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011288:	4618      	mov	r0, r3
 801128a:	f7ff fbfb 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801128e:	1d3b      	adds	r3, r7, #4
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8011296:	4618      	mov	r0, r3
 8011298:	f7ff fbf4 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801129c:	1d3b      	adds	r3, r7, #4
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff fbed 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112aa:	1d3b      	adds	r3, r7, #4
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7ff fbe6 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112b8:	1d3b      	adds	r3, r7, #4
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ff fbdf 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112c6:	1d3b      	adds	r3, r7, #4
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7ff fbd8 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112d4:	1d3b      	adds	r3, r7, #4
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80112dc:	4618      	mov	r0, r3
 80112de:	f7ff fbd1 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112e2:	1d3b      	adds	r3, r7, #4
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7ff fbca 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112f0:	1d3b      	adds	r3, r7, #4
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7ff fbc3 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112fe:	1d3b      	adds	r3, r7, #4
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8011306:	4618      	mov	r0, r3
 8011308:	f7ff fbbc 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801130c:	1d3b      	adds	r3, r7, #4
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8011314:	4618      	mov	r0, r3
 8011316:	f7ff fbb5 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801131a:	1d3b      	adds	r3, r7, #4
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8011322:	4618      	mov	r0, r3
 8011324:	f7ff fbae 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011328:	1d3b      	adds	r3, r7, #4
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8011330:	4618      	mov	r0, r3
 8011332:	f7ff fba7 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011336:	1d3b      	adds	r3, r7, #4
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 801133e:	4618      	mov	r0, r3
 8011340:	f7ff fba0 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011344:	1d3b      	adds	r3, r7, #4
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 801134c:	4618      	mov	r0, r3
 801134e:	f7ff fb99 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011352:	1d3b      	adds	r3, r7, #4
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 801135a:	4618      	mov	r0, r3
 801135c:	f7ff fb92 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011360:	1d3b      	adds	r3, r7, #4
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8011368:	4618      	mov	r0, r3
 801136a:	f7ff fb8b 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801136e:	1d3b      	adds	r3, r7, #4
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8011376:	4618      	mov	r0, r3
 8011378:	f7ff fb84 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801137c:	1d3b      	adds	r3, r7, #4
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8011384:	4618      	mov	r0, r3
 8011386:	f7ff fb7d 	bl	8010a84 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801138a:	1d3b      	adds	r3, r7, #4
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011392:	4618      	mov	r0, r3
 8011394:	f009 f842 	bl	801a41c <_ZN8touchgfx5GaugeC1Ev>
 8011398:	1d3b      	adds	r3, r7, #4
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 80113a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80113a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fe fffb 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80113ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80113b2:	4619      	mov	r1, r3
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7ff fac7 	bl	8010948 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80113ba:	1d3b      	adds	r3, r7, #4
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f603 234c 	addw	r3, r3, #2636	; 0xa4c
 80113c2:	4618      	mov	r0, r3
 80113c4:	f002 fe4e 	bl	8014064 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
{

    __background.setPosition(0, 0, 1024, 600);
 80113c8:	1d3b      	adds	r3, r7, #4
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80113d0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80113d4:	9300      	str	r3, [sp, #0]
 80113d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113da:	2200      	movs	r2, #0
 80113dc:	2100      	movs	r1, #0
 80113de:	f7ff f84c 	bl	801047a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80113e2:	1d3b      	adds	r3, r7, #4
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80113ea:	f207 23c9 	addw	r3, r7, #713	; 0x2c9
 80113ee:	2200      	movs	r2, #0
 80113f0:	701a      	strb	r2, [r3, #0]
 80113f2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80113f6:	2200      	movs	r2, #0
 80113f8:	701a      	strb	r2, [r3, #0]
 80113fa:	f207 23c7 	addw	r3, r7, #711	; 0x2c7
 80113fe:	2200      	movs	r2, #0
 8011400:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8011402:	f207 23c9 	addw	r3, r7, #713	; 0x2c9
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	041b      	lsls	r3, r3, #16
 801140a:	461a      	mov	r2, r3
 801140c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	021b      	lsls	r3, r3, #8
 8011414:	431a      	orrs	r2, r3
 8011416:	f207 23c7 	addw	r3, r7, #711	; 0x2c7
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	4313      	orrs	r3, r2
 801141e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011422:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8011426:	4611      	mov	r1, r2
 8011428:	4618      	mov	r0, r3
 801142a:	f7fe ff89 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 801142e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4619      	mov	r1, r3
 8011436:	4620      	mov	r0, r4
 8011438:	e002      	b.n	8011440 <_ZN15Screen1ViewBaseC1Ev+0x3b4>
 801143a:	bf00      	nop
 801143c:	0803033c 	.word	0x0803033c
 8011440:	f7ff fa64 	bl	801090c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(1, 0, 1024, 600);
 8011444:	1d3b      	adds	r3, r7, #4
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 801144c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8011450:	9300      	str	r3, [sp, #0]
 8011452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011456:	2200      	movs	r2, #0
 8011458:	2101      	movs	r1, #1
 801145a:	f7ff f80e 	bl	801047a <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(43, 43, 43));
 801145e:	1d3b      	adds	r3, r7, #4
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8011466:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801146a:	222b      	movs	r2, #43	; 0x2b
 801146c:	701a      	strb	r2, [r3, #0]
 801146e:	f207 23cb 	addw	r3, r7, #715	; 0x2cb
 8011472:	222b      	movs	r2, #43	; 0x2b
 8011474:	701a      	strb	r2, [r3, #0]
 8011476:	f207 23ca 	addw	r3, r7, #714	; 0x2ca
 801147a:	222b      	movs	r2, #43	; 0x2b
 801147c:	701a      	strb	r2, [r3, #0]
 801147e:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	041b      	lsls	r3, r3, #16
 8011486:	461a      	mov	r2, r3
 8011488:	f207 23cb 	addw	r3, r7, #715	; 0x2cb
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	021b      	lsls	r3, r3, #8
 8011490:	431a      	orrs	r2, r3
 8011492:	f207 23ca 	addw	r3, r7, #714	; 0x2ca
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	4313      	orrs	r3, r2
 801149a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801149e:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80114a2:	4611      	mov	r1, r2
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7fe ff4b 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 80114aa:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4619      	mov	r1, r3
 80114b2:	4620      	mov	r0, r4
 80114b4:	f7ff fa2a 	bl	801090c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(112, 60);
 80114b8:	1d3b      	adds	r3, r7, #4
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3398      	adds	r3, #152	; 0x98
 80114be:	223c      	movs	r2, #60	; 0x3c
 80114c0:	2170      	movs	r1, #112	; 0x70
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7ff f818 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_RACE_ID));
 80114c8:	1d3b      	adds	r3, r7, #4
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80114d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80114d4:	210e      	movs	r1, #14
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7fe ff64 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80114dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80114e0:	4619      	mov	r1, r3
 80114e2:	4620      	mov	r0, r4
 80114e4:	f009 fa6f 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLeft.setXY(314, 87);
 80114e8:	1d3b      	adds	r3, r7, #4
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	33c4      	adds	r3, #196	; 0xc4
 80114ee:	2257      	movs	r2, #87	; 0x57
 80114f0:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fe ffff 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indLeft.setBitmap(touchgfx::Bitmap(BITMAP_INDLEFT_ID));
 80114fa:	1d3b      	adds	r3, r7, #4
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8011502:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011506:	2108      	movs	r1, #8
 8011508:	4618      	mov	r0, r3
 801150a:	f7fe ff4b 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 801150e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011512:	4619      	mov	r1, r3
 8011514:	4620      	mov	r0, r4
 8011516:	f009 fa56 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indRight.setXY(673, 86);
 801151a:	1d3b      	adds	r3, r7, #4
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	33f0      	adds	r3, #240	; 0xf0
 8011520:	2256      	movs	r2, #86	; 0x56
 8011522:	f240 21a1 	movw	r1, #673	; 0x2a1
 8011526:	4618      	mov	r0, r3
 8011528:	f7fe ffe6 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indRight.setBitmap(touchgfx::Bitmap(BITMAP_INDRIGHT_ID));
 801152c:	1d3b      	adds	r3, r7, #4
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8011534:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011538:	210c      	movs	r1, #12
 801153a:	4618      	mov	r0, r3
 801153c:	f7fe ff32 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 8011540:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011544:	4619      	mov	r1, r3
 8011546:	4620      	mov	r0, r4
 8011548:	f009 fa3d 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indHigh.setXY(394, 282);
 801154c:	1d3b      	adds	r3, r7, #4
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011554:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8011558:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 801155c:	4618      	mov	r0, r3
 801155e:	f7fe ffcb 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indHigh.setBitmap(touchgfx::Bitmap(BITMAP_INDHIGH_ID));
 8011562:	1d3b      	adds	r3, r7, #4
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 801156a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801156e:	2107      	movs	r1, #7
 8011570:	4618      	mov	r0, r3
 8011572:	f7fe ff17 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 8011576:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801157a:	4619      	mov	r1, r3
 801157c:	4620      	mov	r0, r4
 801157e:	f009 fa22 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indFuel.setXY(563, 210);
 8011582:	1d3b      	adds	r3, r7, #4
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801158a:	22d2      	movs	r2, #210	; 0xd2
 801158c:	f240 2133 	movw	r1, #563	; 0x233
 8011590:	4618      	mov	r0, r3
 8011592:	f7fe ffb1 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indFuel.setBitmap(touchgfx::Bitmap(BITMAP_INDFUEL_ID));
 8011596:	1d3b      	adds	r3, r7, #4
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 801159e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80115a2:	2106      	movs	r1, #6
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7fe fefd 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80115aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80115ae:	4619      	mov	r1, r3
 80115b0:	4620      	mov	r0, r4
 80115b2:	f009 fa08 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indOil.setXY(410, 341);
 80115b6:	1d3b      	adds	r3, r7, #4
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80115be:	f240 1255 	movw	r2, #341	; 0x155
 80115c2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fe ff96 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indOil.setBitmap(touchgfx::Bitmap(BITMAP_INDOIL_ID));
 80115cc:	1d3b      	adds	r3, r7, #4
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 80115d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80115d8:	210a      	movs	r1, #10
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fe fee2 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80115e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80115e4:	4619      	mov	r1, r3
 80115e6:	4620      	mov	r0, r4
 80115e8:	f009 f9ed 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indBatt.setXY(425, 212);
 80115ec:	1d3b      	adds	r3, r7, #4
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80115f4:	22d4      	movs	r2, #212	; 0xd4
 80115f6:	f240 11a9 	movw	r1, #425	; 0x1a9
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fe ff7c 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indBatt.setBitmap(touchgfx::Bitmap(BITMAP_INDBATT_ID));
 8011600:	1d3b      	adds	r3, r7, #4
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8011608:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801160c:	2103      	movs	r1, #3
 801160e:	4618      	mov	r0, r3
 8011610:	f7fe fec8 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 8011614:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011618:	4619      	mov	r1, r3
 801161a:	4620      	mov	r0, r4
 801161c:	f009 f9d3 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indPark.setXY(496, 183);
 8011620:	1d3b      	adds	r3, r7, #4
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011628:	22b7      	movs	r2, #183	; 0xb7
 801162a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 801162e:	4618      	mov	r0, r3
 8011630:	f7fe ff62 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indPark.setBitmap(touchgfx::Bitmap(BITMAP_INDPARK_ID));
 8011634:	1d3b      	adds	r3, r7, #4
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 801163c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011640:	210b      	movs	r1, #11
 8011642:	4618      	mov	r0, r3
 8011644:	f7fe feae 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 8011648:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801164c:	4619      	mov	r1, r3
 801164e:	4620      	mov	r0, r4
 8011650:	f009 f9b9 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indDTC.setXY(495, 229);
 8011654:	1d3b      	adds	r3, r7, #4
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801165c:	22e5      	movs	r2, #229	; 0xe5
 801165e:	f240 11ef 	movw	r1, #495	; 0x1ef
 8011662:	4618      	mov	r0, r3
 8011664:	f7fe ff48 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indDTC.setBitmap(touchgfx::Bitmap(BITMAP_INDDTC_ID));
 8011668:	1d3b      	adds	r3, r7, #4
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8011670:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011674:	2104      	movs	r1, #4
 8011676:	4618      	mov	r0, r3
 8011678:	f7fe fe94 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 801167c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011680:	4619      	mov	r1, r3
 8011682:	4620      	mov	r0, r4
 8011684:	f009 f99f 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indECT.setXY(451, 374);
 8011688:	1d3b      	adds	r3, r7, #4
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011690:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8011694:	f240 11c3 	movw	r1, #451	; 0x1c3
 8011698:	4618      	mov	r0, r3
 801169a:	f7fe ff2d 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indECT.setBitmap(touchgfx::Bitmap(BITMAP_INDECT_ID));
 801169e:	1d3b      	adds	r3, r7, #4
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f503 7409 	add.w	r4, r3, #548	; 0x224
 80116a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80116aa:	2105      	movs	r1, #5
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fe fe79 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80116b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80116b6:	4619      	mov	r1, r3
 80116b8:	4620      	mov	r0, r4
 80116ba:	f009 f984 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLow.setXY(452, 284);
 80116be:	1d3b      	adds	r3, r7, #4
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80116c6:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80116ca:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fe ff12 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    indLow.setBitmap(touchgfx::Bitmap(BITMAP_INDLOW_ID));
 80116d4:	1d3b      	adds	r3, r7, #4
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f503 7414 	add.w	r4, r3, #592	; 0x250
 80116dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80116e0:	2109      	movs	r1, #9
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fe fe5e 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 80116e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80116ec:	4619      	mov	r1, r3
 80116ee:	4620      	mov	r0, r4
 80116f0:	f009 f969 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    map_value.setXY(859, 85);
 80116f4:	1d3b      	adds	r3, r7, #4
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80116fc:	2255      	movs	r2, #85	; 0x55
 80116fe:	f240 315b 	movw	r1, #859	; 0x35b
 8011702:	4618      	mov	r0, r3
 8011704:	f7fe fef8 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    map_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011708:	1d3b      	adds	r3, r7, #4
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 8011710:	f207 23cf 	addw	r3, r7, #719	; 0x2cf
 8011714:	22ff      	movs	r2, #255	; 0xff
 8011716:	701a      	strb	r2, [r3, #0]
 8011718:	f207 23ce 	addw	r3, r7, #718	; 0x2ce
 801171c:	22ff      	movs	r2, #255	; 0xff
 801171e:	701a      	strb	r2, [r3, #0]
 8011720:	f207 23cd 	addw	r3, r7, #717	; 0x2cd
 8011724:	22ff      	movs	r2, #255	; 0xff
 8011726:	701a      	strb	r2, [r3, #0]
 8011728:	f207 23cf 	addw	r3, r7, #719	; 0x2cf
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	041b      	lsls	r3, r3, #16
 8011730:	461a      	mov	r2, r3
 8011732:	f207 23ce 	addw	r3, r7, #718	; 0x2ce
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	021b      	lsls	r3, r3, #8
 801173a:	431a      	orrs	r2, r3
 801173c:	f207 23cd 	addw	r3, r7, #717	; 0x2cd
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	4313      	orrs	r3, r2
 8011744:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011748:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801174c:	4611      	mov	r1, r2
 801174e:	4618      	mov	r0, r3
 8011750:	f7fe fdf6 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8011754:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	461a      	mov	r2, r3
 801175c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8011760:	601c      	str	r4, [r3, #0]
 8011762:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011766:	601a      	str	r2, [r3, #0]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8011768:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8011772:	6812      	ldr	r2, [r2, #0]
 8011774:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011776:	bf00      	nop
    map_value.setLinespacing(0);
 8011778:	1d3b      	adds	r3, r7, #4
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8011780:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8011784:	601a      	str	r2, [r3, #0]
 8011786:	f207 23d6 	addw	r3, r7, #726	; 0x2d6
 801178a:	2200      	movs	r2, #0
 801178c:	801a      	strh	r2, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 801178e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f207 22d6 	addw	r2, r7, #726	; 0x2d6
 8011798:	8812      	ldrh	r2, [r2, #0]
 801179a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801179c:	bf00      	nop
    Unicode::snprintf(map_valueBuffer, MAP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1H44).getText());
 801179e:	1d3b      	adds	r3, r7, #4
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 80117a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80117aa:	2119      	movs	r1, #25
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7ff f8f1 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80117b2:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80117b6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80117ba:	601a      	str	r2, [r3, #0]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80117bc:	4bc5      	ldr	r3, [pc, #788]	; (8011ad4 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d105      	bne.n	80117d0 <_ZN15Screen1ViewBaseC1Ev+0x744>
 80117c4:	4bc4      	ldr	r3, [pc, #784]	; (8011ad8 <_ZN15Screen1ViewBaseC1Ev+0xa4c>)
 80117c6:	4ac5      	ldr	r2, [pc, #788]	; (8011adc <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 80117c8:	21ae      	movs	r1, #174	; 0xae
 80117ca:	48c5      	ldr	r0, [pc, #788]	; (8011ae0 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 80117cc:	f01c fd22 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80117d0:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	889a      	ldrh	r2, [r3, #4]
 80117d8:	4bc2      	ldr	r3, [pc, #776]	; (8011ae4 <_ZN15Screen1ViewBaseC1Ev+0xa58>)
 80117da:	881b      	ldrh	r3, [r3, #0]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d305      	bcc.n	80117ec <_ZN15Screen1ViewBaseC1Ev+0x760>
 80117e0:	4bc1      	ldr	r3, [pc, #772]	; (8011ae8 <_ZN15Screen1ViewBaseC1Ev+0xa5c>)
 80117e2:	4abe      	ldr	r2, [pc, #760]	; (8011adc <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 80117e4:	21af      	movs	r1, #175	; 0xaf
 80117e6:	48be      	ldr	r0, [pc, #760]	; (8011ae0 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 80117e8:	f01c fd14 	bl	802e214 <__assert_func>
    }
 80117ec:	bf00      	nop
        return texts->getText(typedTextId);
 80117ee:	4bbf      	ldr	r3, [pc, #764]	; (8011aec <_ZN15Screen1ViewBaseC1Ev+0xa60>)
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80117f6:	889b      	ldrh	r3, [r3, #4]
 80117f8:	4619      	mov	r1, r3
 80117fa:	4610      	mov	r0, r2
 80117fc:	f002 ffbc 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8011800:	4603      	mov	r3, r0
 8011802:	bf00      	nop
 8011804:	4aba      	ldr	r2, [pc, #744]	; (8011af0 <_ZN15Screen1ViewBaseC1Ev+0xa64>)
 8011806:	2120      	movs	r1, #32
 8011808:	4620      	mov	r0, r4
 801180a:	f00d ff4f 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801180e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8011812:	4618      	mov	r0, r3
 8011814:	f7fd fee0 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    map_value.setWildcard(map_valueBuffer);
 8011818:	1d3b      	adds	r3, r7, #4
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8011820:	1d3b      	adds	r3, r7, #4
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8011828:	4619      	mov	r1, r3
 801182a:	4610      	mov	r0, r2
 801182c:	f7ff f940 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_value.resizeToCurrentText();
 8011830:	1d3b      	adds	r3, r7, #4
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8011838:	4618      	mov	r0, r3
 801183a:	f008 fcdd 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LQYM));
 801183e:	1d3b      	adds	r3, r7, #4
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 8011846:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801184a:	2117      	movs	r1, #23
 801184c:	4618      	mov	r0, r3
 801184e:	f7ff f8a1 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011852:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011856:	4619      	mov	r1, r3
 8011858:	4620      	mov	r0, r4
 801185a:	f008 fcea 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801185e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8011862:	4618      	mov	r0, r3
 8011864:	f7fd feb8 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    map_label.setXY(808, 142);
 8011868:	1d3b      	adds	r3, r7, #4
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8011870:	228e      	movs	r2, #142	; 0x8e
 8011872:	f44f 714a 	mov.w	r1, #808	; 0x328
 8011876:	4618      	mov	r0, r3
 8011878:	f7fe fe3e 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    map_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801187c:	1d3b      	adds	r3, r7, #4
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8011884:	f207 23e3 	addw	r3, r7, #739	; 0x2e3
 8011888:	22ff      	movs	r2, #255	; 0xff
 801188a:	701a      	strb	r2, [r3, #0]
 801188c:	f207 23e2 	addw	r3, r7, #738	; 0x2e2
 8011890:	22ff      	movs	r2, #255	; 0xff
 8011892:	701a      	strb	r2, [r3, #0]
 8011894:	f207 23e1 	addw	r3, r7, #737	; 0x2e1
 8011898:	22ff      	movs	r2, #255	; 0xff
 801189a:	701a      	strb	r2, [r3, #0]
 801189c:	f207 23e3 	addw	r3, r7, #739	; 0x2e3
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	041b      	lsls	r3, r3, #16
 80118a4:	461a      	mov	r2, r3
 80118a6:	f207 23e2 	addw	r3, r7, #738	; 0x2e2
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	021b      	lsls	r3, r3, #8
 80118ae:	431a      	orrs	r2, r3
 80118b0:	f207 23e1 	addw	r3, r7, #737	; 0x2e1
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80118bc:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80118c0:	4611      	mov	r1, r2
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7fe fd3c 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 80118c8:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	461a      	mov	r2, r3
 80118d0:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80118d4:	601c      	str	r4, [r3, #0]
 80118d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80118da:	601a      	str	r2, [r3, #0]
        this->color = color;
 80118dc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80118e6:	6812      	ldr	r2, [r2, #0]
 80118e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80118ea:	bf00      	nop
    map_label.setLinespacing(0);
 80118ec:	1d3b      	adds	r3, r7, #4
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 80118f4:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80118f8:	601a      	str	r2, [r3, #0]
 80118fa:	f207 23ea 	addw	r3, r7, #746	; 0x2ea
 80118fe:	2200      	movs	r2, #0
 8011900:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011902:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	f207 22ea 	addw	r2, r7, #746	; 0x2ea
 801190c:	8812      	ldrh	r2, [r2, #0]
 801190e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011910:	bf00      	nop
    Unicode::snprintf(map_labelBuffer, MAP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_FXL2).getText());
 8011912:	1d3b      	adds	r3, r7, #4
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	f603 3404 	addw	r4, r3, #2820	; 0xb04
 801191a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801191e:	211a      	movs	r1, #26
 8011920:	4618      	mov	r0, r3
 8011922:	f7ff f837 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011926:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801192a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801192e:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011930:	4b68      	ldr	r3, [pc, #416]	; (8011ad4 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d105      	bne.n	8011944 <_ZN15Screen1ViewBaseC1Ev+0x8b8>
 8011938:	4b67      	ldr	r3, [pc, #412]	; (8011ad8 <_ZN15Screen1ViewBaseC1Ev+0xa4c>)
 801193a:	4a68      	ldr	r2, [pc, #416]	; (8011adc <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 801193c:	21ae      	movs	r1, #174	; 0xae
 801193e:	4868      	ldr	r0, [pc, #416]	; (8011ae0 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 8011940:	f01c fc68 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011944:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	889a      	ldrh	r2, [r3, #4]
 801194c:	4b65      	ldr	r3, [pc, #404]	; (8011ae4 <_ZN15Screen1ViewBaseC1Ev+0xa58>)
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	429a      	cmp	r2, r3
 8011952:	d305      	bcc.n	8011960 <_ZN15Screen1ViewBaseC1Ev+0x8d4>
 8011954:	4b64      	ldr	r3, [pc, #400]	; (8011ae8 <_ZN15Screen1ViewBaseC1Ev+0xa5c>)
 8011956:	4a61      	ldr	r2, [pc, #388]	; (8011adc <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 8011958:	21af      	movs	r1, #175	; 0xaf
 801195a:	4861      	ldr	r0, [pc, #388]	; (8011ae0 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 801195c:	f01c fc5a 	bl	802e214 <__assert_func>
    }
 8011960:	bf00      	nop
        return texts->getText(typedTextId);
 8011962:	4b62      	ldr	r3, [pc, #392]	; (8011aec <_ZN15Screen1ViewBaseC1Ev+0xa60>)
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801196a:	889b      	ldrh	r3, [r3, #4]
 801196c:	4619      	mov	r1, r3
 801196e:	4610      	mov	r0, r2
 8011970:	f002 ff02 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8011974:	4603      	mov	r3, r0
 8011976:	bf00      	nop
 8011978:	4a5d      	ldr	r2, [pc, #372]	; (8011af0 <_ZN15Screen1ViewBaseC1Ev+0xa64>)
 801197a:	210a      	movs	r1, #10
 801197c:	4620      	mov	r0, r4
 801197e:	f00d fe95 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011982:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8011986:	4618      	mov	r0, r3
 8011988:	f7fd fe26 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    map_label.setWildcard(map_labelBuffer);
 801198c:	1d3b      	adds	r3, r7, #4
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8011994:	1d3b      	adds	r3, r7, #4
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f603 3304 	addw	r3, r3, #2820	; 0xb04
 801199c:	4619      	mov	r1, r3
 801199e:	4610      	mov	r0, r2
 80119a0:	f7ff f886 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_label.resizeToCurrentText();
 80119a4:	1d3b      	adds	r3, r7, #4
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80119ac:	4618      	mov	r0, r3
 80119ae:	f008 fc23 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W2NZ));
 80119b2:	1d3b      	adds	r3, r7, #4
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 80119ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80119be:	2115      	movs	r1, #21
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fe ffe7 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80119c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80119ca:	4619      	mov	r1, r3
 80119cc:	4620      	mov	r0, r4
 80119ce:	f008 fc30 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80119d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fd fdfe 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    map_units.setXY(722, 142);
 80119dc:	1d3b      	adds	r3, r7, #4
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80119e4:	228e      	movs	r2, #142	; 0x8e
 80119e6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fe fd84 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    map_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80119f0:	1d3b      	adds	r3, r7, #4
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 80119f8:	f207 23f7 	addw	r3, r7, #759	; 0x2f7
 80119fc:	22ff      	movs	r2, #255	; 0xff
 80119fe:	701a      	strb	r2, [r3, #0]
 8011a00:	f207 23f6 	addw	r3, r7, #758	; 0x2f6
 8011a04:	22ff      	movs	r2, #255	; 0xff
 8011a06:	701a      	strb	r2, [r3, #0]
 8011a08:	f207 23f5 	addw	r3, r7, #757	; 0x2f5
 8011a0c:	22ff      	movs	r2, #255	; 0xff
 8011a0e:	701a      	strb	r2, [r3, #0]
 8011a10:	f207 23f7 	addw	r3, r7, #759	; 0x2f7
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	041b      	lsls	r3, r3, #16
 8011a18:	461a      	mov	r2, r3
 8011a1a:	f207 23f6 	addw	r3, r7, #758	; 0x2f6
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	021b      	lsls	r3, r3, #8
 8011a22:	431a      	orrs	r2, r3
 8011a24:	f207 23f5 	addw	r3, r7, #757	; 0x2f5
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011a30:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8011a34:	4611      	mov	r1, r2
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fe fc82 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8011a3c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	461a      	mov	r2, r3
 8011a44:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011a48:	601c      	str	r4, [r3, #0]
 8011a4a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011a4e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011a50:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011a5a:	6812      	ldr	r2, [r2, #0]
 8011a5c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011a5e:	bf00      	nop
    map_units.setLinespacing(0);
 8011a60:	1d3b      	adds	r3, r7, #4
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8011a68:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	f207 23fe 	addw	r3, r7, #766	; 0x2fe
 8011a72:	2200      	movs	r2, #0
 8011a74:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011a76:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f207 22fe 	addw	r2, r7, #766	; 0x2fe
 8011a80:	8812      	ldrh	r2, [r2, #0]
 8011a82:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011a84:	bf00      	nop
    Unicode::snprintf(map_unitsBuffer, MAP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_13X6).getText());
 8011a86:	1d3b      	adds	r3, r7, #4
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	f603 3418 	addw	r4, r3, #2840	; 0xb18
 8011a8e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011a92:	2118      	movs	r1, #24
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fe ff7d 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011a9a:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8011a9e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8011aa2:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011aa4:	4b0b      	ldr	r3, [pc, #44]	; (8011ad4 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d105      	bne.n	8011ab8 <_ZN15Screen1ViewBaseC1Ev+0xa2c>
 8011aac:	4b0a      	ldr	r3, [pc, #40]	; (8011ad8 <_ZN15Screen1ViewBaseC1Ev+0xa4c>)
 8011aae:	4a0b      	ldr	r2, [pc, #44]	; (8011adc <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 8011ab0:	21ae      	movs	r1, #174	; 0xae
 8011ab2:	480b      	ldr	r0, [pc, #44]	; (8011ae0 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 8011ab4:	f01c fbae 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011ab8:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	889a      	ldrh	r2, [r3, #4]
 8011ac0:	4b08      	ldr	r3, [pc, #32]	; (8011ae4 <_ZN15Screen1ViewBaseC1Ev+0xa58>)
 8011ac2:	881b      	ldrh	r3, [r3, #0]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d315      	bcc.n	8011af4 <_ZN15Screen1ViewBaseC1Ev+0xa68>
 8011ac8:	4b07      	ldr	r3, [pc, #28]	; (8011ae8 <_ZN15Screen1ViewBaseC1Ev+0xa5c>)
 8011aca:	4a04      	ldr	r2, [pc, #16]	; (8011adc <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 8011acc:	21af      	movs	r1, #175	; 0xaf
 8011ace:	4804      	ldr	r0, [pc, #16]	; (8011ae0 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 8011ad0:	f01c fba0 	bl	802e214 <__assert_func>
 8011ad4:	20009870 	.word	0x20009870
 8011ad8:	0802f7f4 	.word	0x0802f7f4
 8011adc:	0802f838 	.word	0x0802f838
 8011ae0:	0802f868 	.word	0x0802f868
 8011ae4:	20009874 	.word	0x20009874
 8011ae8:	0802f8ac 	.word	0x0802f8ac
 8011aec:	2000987c 	.word	0x2000987c
 8011af0:	0802f900 	.word	0x0802f900
    }
 8011af4:	bf00      	nop
        return texts->getText(typedTextId);
 8011af6:	4bba      	ldr	r3, [pc, #744]	; (8011de0 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011af8:	681a      	ldr	r2, [r3, #0]
 8011afa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011afe:	889b      	ldrh	r3, [r3, #4]
 8011b00:	4619      	mov	r1, r3
 8011b02:	4610      	mov	r0, r2
 8011b04:	f002 fe38 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	bf00      	nop
 8011b0c:	4ab5      	ldr	r2, [pc, #724]	; (8011de4 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011b0e:	210a      	movs	r1, #10
 8011b10:	4620      	mov	r0, r4
 8011b12:	f00d fdcb 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011b16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fd fd5c 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    map_units.setWildcard(map_unitsBuffer);
 8011b20:	1d3b      	adds	r3, r7, #4
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8011b28:	1d3b      	adds	r3, r7, #4
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 8011b30:	4619      	mov	r1, r3
 8011b32:	4610      	mov	r0, r2
 8011b34:	f7fe ffbc 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_units.resizeToCurrentText();
 8011b38:	1d3b      	adds	r3, r7, #4
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011b40:	4618      	mov	r0, r3
 8011b42:	f008 fb59 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G76O));
 8011b46:	1d3b      	adds	r3, r7, #4
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 8011b4e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8011b52:	2116      	movs	r1, #22
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7fe ff1d 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011b5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8011b5e:	4619      	mov	r1, r3
 8011b60:	4620      	mov	r0, r4
 8011b62:	f008 fb66 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011b66:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fd fd34 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    batt_value.setXY(859, 201);
 8011b70:	1d3b      	adds	r3, r7, #4
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011b78:	22c9      	movs	r2, #201	; 0xc9
 8011b7a:	f240 315b 	movw	r1, #859	; 0x35b
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7fe fcba 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    batt_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011b84:	1d3b      	adds	r3, r7, #4
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f503 744f 	add.w	r4, r3, #828	; 0x33c
 8011b8c:	f207 330b 	addw	r3, r7, #779	; 0x30b
 8011b90:	22ff      	movs	r2, #255	; 0xff
 8011b92:	701a      	strb	r2, [r3, #0]
 8011b94:	f207 330a 	addw	r3, r7, #778	; 0x30a
 8011b98:	22ff      	movs	r2, #255	; 0xff
 8011b9a:	701a      	strb	r2, [r3, #0]
 8011b9c:	f207 3309 	addw	r3, r7, #777	; 0x309
 8011ba0:	22ff      	movs	r2, #255	; 0xff
 8011ba2:	701a      	strb	r2, [r3, #0]
 8011ba4:	f207 330b 	addw	r3, r7, #779	; 0x30b
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	041b      	lsls	r3, r3, #16
 8011bac:	461a      	mov	r2, r3
 8011bae:	f207 330a 	addw	r3, r7, #778	; 0x30a
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	021b      	lsls	r3, r3, #8
 8011bb6:	431a      	orrs	r2, r3
 8011bb8:	f207 3309 	addw	r3, r7, #777	; 0x309
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	4313      	orrs	r3, r2
 8011bc0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011bc4:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8011bc8:	4611      	mov	r1, r2
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fe fbb8 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8011bd0:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8011bdc:	601c      	str	r4, [r3, #0]
 8011bde:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011be2:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011be4:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011bee:	6812      	ldr	r2, [r2, #0]
 8011bf0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011bf2:	bf00      	nop
    batt_value.setLinespacing(0);
 8011bf4:	1d3b      	adds	r3, r7, #4
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8011bfc:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8011c00:	601a      	str	r2, [r3, #0]
 8011c02:	f207 3312 	addw	r3, r7, #786	; 0x312
 8011c06:	2200      	movs	r2, #0
 8011c08:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011c0a:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f207 3212 	addw	r2, r7, #786	; 0x312
 8011c14:	8812      	ldrh	r2, [r2, #0]
 8011c16:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011c18:	bf00      	nop
    Unicode::snprintf(batt_valueBuffer, BATT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_TSMP).getText());
 8011c1a:	1d3b      	adds	r3, r7, #4
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f603 342c 	addw	r4, r3, #2860	; 0xb2c
 8011c22:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8011c26:	211f      	movs	r1, #31
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7fe feb3 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011c2e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8011c32:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8011c36:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011c38:	4b6b      	ldr	r3, [pc, #428]	; (8011de8 <_ZN15Screen1ViewBaseC1Ev+0xd5c>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d105      	bne.n	8011c4c <_ZN15Screen1ViewBaseC1Ev+0xbc0>
 8011c40:	4b6a      	ldr	r3, [pc, #424]	; (8011dec <_ZN15Screen1ViewBaseC1Ev+0xd60>)
 8011c42:	4a6b      	ldr	r2, [pc, #428]	; (8011df0 <_ZN15Screen1ViewBaseC1Ev+0xd64>)
 8011c44:	21ae      	movs	r1, #174	; 0xae
 8011c46:	486b      	ldr	r0, [pc, #428]	; (8011df4 <_ZN15Screen1ViewBaseC1Ev+0xd68>)
 8011c48:	f01c fae4 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011c4c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	889a      	ldrh	r2, [r3, #4]
 8011c54:	4b68      	ldr	r3, [pc, #416]	; (8011df8 <_ZN15Screen1ViewBaseC1Ev+0xd6c>)
 8011c56:	881b      	ldrh	r3, [r3, #0]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d305      	bcc.n	8011c68 <_ZN15Screen1ViewBaseC1Ev+0xbdc>
 8011c5c:	4b67      	ldr	r3, [pc, #412]	; (8011dfc <_ZN15Screen1ViewBaseC1Ev+0xd70>)
 8011c5e:	4a64      	ldr	r2, [pc, #400]	; (8011df0 <_ZN15Screen1ViewBaseC1Ev+0xd64>)
 8011c60:	21af      	movs	r1, #175	; 0xaf
 8011c62:	4864      	ldr	r0, [pc, #400]	; (8011df4 <_ZN15Screen1ViewBaseC1Ev+0xd68>)
 8011c64:	f01c fad6 	bl	802e214 <__assert_func>
    }
 8011c68:	bf00      	nop
        return texts->getText(typedTextId);
 8011c6a:	4b5d      	ldr	r3, [pc, #372]	; (8011de0 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8011c72:	889b      	ldrh	r3, [r3, #4]
 8011c74:	4619      	mov	r1, r3
 8011c76:	4610      	mov	r0, r2
 8011c78:	f002 fd7e 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	bf00      	nop
 8011c80:	4a58      	ldr	r2, [pc, #352]	; (8011de4 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011c82:	2120      	movs	r1, #32
 8011c84:	4620      	mov	r0, r4
 8011c86:	f00d fd11 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011c8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fd fca2 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    batt_value.setWildcard(batt_valueBuffer);
 8011c94:	1d3b      	adds	r3, r7, #4
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8011c9c:	1d3b      	adds	r3, r7, #4
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	f603 332c 	addw	r3, r3, #2860	; 0xb2c
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	4610      	mov	r0, r2
 8011ca8:	f7fe ff02 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_value.resizeToCurrentText();
 8011cac:	1d3b      	adds	r3, r7, #4
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f008 fa9f 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_391O));
 8011cba:	1d3b      	adds	r3, r7, #4
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	f503 744f 	add.w	r4, r3, #828	; 0x33c
 8011cc2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8011cc6:	2114      	movs	r1, #20
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7fe fe63 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011cce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f008 faac 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011cda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fd fc7a 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    batt_label.setXY(821, 258);
 8011ce4:	1d3b      	adds	r3, r7, #4
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011cec:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011cf0:	f240 3135 	movw	r1, #821	; 0x335
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fe fbff 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    batt_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011cfa:	1d3b      	adds	r3, r7, #4
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8011d02:	f207 331f 	addw	r3, r7, #799	; 0x31f
 8011d06:	22ff      	movs	r2, #255	; 0xff
 8011d08:	701a      	strb	r2, [r3, #0]
 8011d0a:	f207 331e 	addw	r3, r7, #798	; 0x31e
 8011d0e:	22ff      	movs	r2, #255	; 0xff
 8011d10:	701a      	strb	r2, [r3, #0]
 8011d12:	f207 331d 	addw	r3, r7, #797	; 0x31d
 8011d16:	22ff      	movs	r2, #255	; 0xff
 8011d18:	701a      	strb	r2, [r3, #0]
 8011d1a:	f207 331f 	addw	r3, r7, #799	; 0x31f
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	041b      	lsls	r3, r3, #16
 8011d22:	461a      	mov	r2, r3
 8011d24:	f207 331e 	addw	r3, r7, #798	; 0x31e
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	021b      	lsls	r3, r3, #8
 8011d2c:	431a      	orrs	r2, r3
 8011d2e:	f207 331d 	addw	r3, r7, #797	; 0x31d
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	4313      	orrs	r3, r2
 8011d36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011d3a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8011d3e:	4611      	mov	r1, r2
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7fe fafd 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8011d46:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8011d52:	601c      	str	r4, [r3, #0]
 8011d54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011d58:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011d5a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011d64:	6812      	ldr	r2, [r2, #0]
 8011d66:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011d68:	bf00      	nop
    batt_label.setLinespacing(0);
 8011d6a:	1d3b      	adds	r3, r7, #4
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 8011d72:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8011d76:	601a      	str	r2, [r3, #0]
 8011d78:	f207 3326 	addw	r3, r7, #806	; 0x326
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011d80:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	f207 3226 	addw	r2, r7, #806	; 0x326
 8011d8a:	8812      	ldrh	r2, [r2, #0]
 8011d8c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011d8e:	bf00      	nop
    Unicode::snprintf(batt_labelBuffer, BATT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RUP7).getText());
 8011d90:	1d3b      	adds	r3, r7, #4
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f603 346c 	addw	r4, r3, #2924	; 0xb6c
 8011d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d9c:	2123      	movs	r1, #35	; 0x23
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7fe fdf8 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011da4:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8011da8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8011dac:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011dae:	4b0e      	ldr	r3, [pc, #56]	; (8011de8 <_ZN15Screen1ViewBaseC1Ev+0xd5c>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d105      	bne.n	8011dc2 <_ZN15Screen1ViewBaseC1Ev+0xd36>
 8011db6:	4b0d      	ldr	r3, [pc, #52]	; (8011dec <_ZN15Screen1ViewBaseC1Ev+0xd60>)
 8011db8:	4a0d      	ldr	r2, [pc, #52]	; (8011df0 <_ZN15Screen1ViewBaseC1Ev+0xd64>)
 8011dba:	21ae      	movs	r1, #174	; 0xae
 8011dbc:	480d      	ldr	r0, [pc, #52]	; (8011df4 <_ZN15Screen1ViewBaseC1Ev+0xd68>)
 8011dbe:	f01c fa29 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011dc2:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	889a      	ldrh	r2, [r3, #4]
 8011dca:	4b0b      	ldr	r3, [pc, #44]	; (8011df8 <_ZN15Screen1ViewBaseC1Ev+0xd6c>)
 8011dcc:	881b      	ldrh	r3, [r3, #0]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d316      	bcc.n	8011e00 <_ZN15Screen1ViewBaseC1Ev+0xd74>
 8011dd2:	4b0a      	ldr	r3, [pc, #40]	; (8011dfc <_ZN15Screen1ViewBaseC1Ev+0xd70>)
 8011dd4:	4a06      	ldr	r2, [pc, #24]	; (8011df0 <_ZN15Screen1ViewBaseC1Ev+0xd64>)
 8011dd6:	21af      	movs	r1, #175	; 0xaf
 8011dd8:	4806      	ldr	r0, [pc, #24]	; (8011df4 <_ZN15Screen1ViewBaseC1Ev+0xd68>)
 8011dda:	f01c fa1b 	bl	802e214 <__assert_func>
 8011dde:	bf00      	nop
 8011de0:	2000987c 	.word	0x2000987c
 8011de4:	0802f900 	.word	0x0802f900
 8011de8:	20009870 	.word	0x20009870
 8011dec:	0802f7f4 	.word	0x0802f7f4
 8011df0:	0802f838 	.word	0x0802f838
 8011df4:	0802f868 	.word	0x0802f868
 8011df8:	20009874 	.word	0x20009874
 8011dfc:	0802f8ac 	.word	0x0802f8ac
    }
 8011e00:	bf00      	nop
        return texts->getText(typedTextId);
 8011e02:	4bba      	ldr	r3, [pc, #744]	; (80120ec <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e0a:	889b      	ldrh	r3, [r3, #4]
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	4610      	mov	r0, r2
 8011e10:	f002 fcb2 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8011e14:	4603      	mov	r3, r0
 8011e16:	bf00      	nop
 8011e18:	4ab5      	ldr	r2, [pc, #724]	; (80120f0 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 8011e1a:	210a      	movs	r1, #10
 8011e1c:	4620      	mov	r0, r4
 8011e1e:	f00d fc45 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7fd fbd6 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    batt_label.setWildcard(batt_labelBuffer);
 8011e2c:	1d3b      	adds	r3, r7, #4
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 8011e34:	1d3b      	adds	r3, r7, #4
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f603 336c 	addw	r3, r3, #2924	; 0xb6c
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	4610      	mov	r0, r2
 8011e40:	f7fe fe36 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_label.resizeToCurrentText();
 8011e44:	1d3b      	adds	r3, r7, #4
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f008 f9d3 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4QE0));
 8011e52:	1d3b      	adds	r3, r7, #4
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8011e5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e5e:	2113      	movs	r1, #19
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7fe fd97 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011e66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f008 f9e0 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011e72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fd fbae 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    batt_units.setXY(762, 258);
 8011e7c:	1d3b      	adds	r3, r7, #4
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011e84:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011e88:	f240 21fa 	movw	r1, #762	; 0x2fa
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7fe fb33 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    batt_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011e92:	1d3b      	adds	r3, r7, #4
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8011e9a:	f207 3333 	addw	r3, r7, #819	; 0x333
 8011e9e:	22ff      	movs	r2, #255	; 0xff
 8011ea0:	701a      	strb	r2, [r3, #0]
 8011ea2:	f207 3332 	addw	r3, r7, #818	; 0x332
 8011ea6:	22ff      	movs	r2, #255	; 0xff
 8011ea8:	701a      	strb	r2, [r3, #0]
 8011eaa:	f207 3331 	addw	r3, r7, #817	; 0x331
 8011eae:	22ff      	movs	r2, #255	; 0xff
 8011eb0:	701a      	strb	r2, [r3, #0]
 8011eb2:	f207 3333 	addw	r3, r7, #819	; 0x333
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	041b      	lsls	r3, r3, #16
 8011eba:	461a      	mov	r2, r3
 8011ebc:	f207 3332 	addw	r3, r7, #818	; 0x332
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	021b      	lsls	r3, r3, #8
 8011ec4:	431a      	orrs	r2, r3
 8011ec6:	f207 3331 	addw	r3, r7, #817	; 0x331
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011ed2:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8011ed6:	4611      	mov	r1, r2
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fe fa31 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8011ede:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8011eea:	601c      	str	r4, [r3, #0]
 8011eec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011ef0:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011ef2:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011efc:	6812      	ldr	r2, [r2, #0]
 8011efe:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011f00:	bf00      	nop
    batt_units.setLinespacing(0);
 8011f02:	1d3b      	adds	r3, r7, #4
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8011f0a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8011f0e:	601a      	str	r2, [r3, #0]
 8011f10:	f207 333a 	addw	r3, r7, #826	; 0x33a
 8011f14:	2200      	movs	r2, #0
 8011f16:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011f18:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	f207 323a 	addw	r2, r7, #826	; 0x33a
 8011f22:	8812      	ldrh	r2, [r2, #0]
 8011f24:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011f26:	bf00      	nop
    Unicode::snprintf(batt_unitsBuffer, BATT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_F7I8).getText());
 8011f28:	1d3b      	adds	r3, r7, #4
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f503 6438 	add.w	r4, r3, #2944	; 0xb80
 8011f30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011f34:	2122      	movs	r1, #34	; 0x22
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7fe fd2c 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011f3c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8011f40:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8011f44:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011f46:	4b6b      	ldr	r3, [pc, #428]	; (80120f4 <_ZN15Screen1ViewBaseC1Ev+0x1068>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d105      	bne.n	8011f5a <_ZN15Screen1ViewBaseC1Ev+0xece>
 8011f4e:	4b6a      	ldr	r3, [pc, #424]	; (80120f8 <_ZN15Screen1ViewBaseC1Ev+0x106c>)
 8011f50:	4a6a      	ldr	r2, [pc, #424]	; (80120fc <_ZN15Screen1ViewBaseC1Ev+0x1070>)
 8011f52:	21ae      	movs	r1, #174	; 0xae
 8011f54:	486a      	ldr	r0, [pc, #424]	; (8012100 <_ZN15Screen1ViewBaseC1Ev+0x1074>)
 8011f56:	f01c f95d 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011f5a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	889a      	ldrh	r2, [r3, #4]
 8011f62:	4b68      	ldr	r3, [pc, #416]	; (8012104 <_ZN15Screen1ViewBaseC1Ev+0x1078>)
 8011f64:	881b      	ldrh	r3, [r3, #0]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d305      	bcc.n	8011f76 <_ZN15Screen1ViewBaseC1Ev+0xeea>
 8011f6a:	4b67      	ldr	r3, [pc, #412]	; (8012108 <_ZN15Screen1ViewBaseC1Ev+0x107c>)
 8011f6c:	4a63      	ldr	r2, [pc, #396]	; (80120fc <_ZN15Screen1ViewBaseC1Ev+0x1070>)
 8011f6e:	21af      	movs	r1, #175	; 0xaf
 8011f70:	4863      	ldr	r0, [pc, #396]	; (8012100 <_ZN15Screen1ViewBaseC1Ev+0x1074>)
 8011f72:	f01c f94f 	bl	802e214 <__assert_func>
    }
 8011f76:	bf00      	nop
        return texts->getText(typedTextId);
 8011f78:	4b5c      	ldr	r3, [pc, #368]	; (80120ec <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011f80:	889b      	ldrh	r3, [r3, #4]
 8011f82:	4619      	mov	r1, r3
 8011f84:	4610      	mov	r0, r2
 8011f86:	f002 fbf7 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	bf00      	nop
 8011f8e:	4a58      	ldr	r2, [pc, #352]	; (80120f0 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 8011f90:	210a      	movs	r1, #10
 8011f92:	4620      	mov	r0, r4
 8011f94:	f00d fb8a 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011f98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fd fb1b 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    batt_units.setWildcard(batt_unitsBuffer);
 8011fa2:	1d3b      	adds	r3, r7, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8011faa:	1d3b      	adds	r3, r7, #4
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	4610      	mov	r0, r2
 8011fb6:	f7fe fd7b 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_units.resizeToCurrentText();
 8011fba:	1d3b      	adds	r3, r7, #4
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f008 f918 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6YBF));
 8011fc8:	1d3b      	adds	r3, r7, #4
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8011fd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8011fd4:	2112      	movs	r1, #18
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fe fcdc 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8011fdc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f008 f925 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011fe8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7fd faf3 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    tps_value.setXY(859, 318);
 8011ff2:	1d3b      	adds	r3, r7, #4
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8011ffa:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8011ffe:	f240 315b 	movw	r1, #859	; 0x35b
 8012002:	4618      	mov	r0, r3
 8012004:	f7fe fa78 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    tps_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012008:	1d3b      	adds	r3, r7, #4
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 8012010:	f207 3347 	addw	r3, r7, #839	; 0x347
 8012014:	22ff      	movs	r2, #255	; 0xff
 8012016:	701a      	strb	r2, [r3, #0]
 8012018:	f207 3346 	addw	r3, r7, #838	; 0x346
 801201c:	22ff      	movs	r2, #255	; 0xff
 801201e:	701a      	strb	r2, [r3, #0]
 8012020:	f207 3345 	addw	r3, r7, #837	; 0x345
 8012024:	22ff      	movs	r2, #255	; 0xff
 8012026:	701a      	strb	r2, [r3, #0]
 8012028:	f207 3347 	addw	r3, r7, #839	; 0x347
 801202c:	781b      	ldrb	r3, [r3, #0]
 801202e:	041b      	lsls	r3, r3, #16
 8012030:	461a      	mov	r2, r3
 8012032:	f207 3346 	addw	r3, r7, #838	; 0x346
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	021b      	lsls	r3, r3, #8
 801203a:	431a      	orrs	r2, r3
 801203c:	f207 3345 	addw	r3, r7, #837	; 0x345
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	4313      	orrs	r3, r2
 8012044:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012048:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801204c:	4611      	mov	r1, r2
 801204e:	4618      	mov	r0, r3
 8012050:	f7fe f976 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8012054:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	461a      	mov	r2, r3
 801205c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8012060:	601c      	str	r4, [r3, #0]
 8012062:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012066:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012068:	f507 7352 	add.w	r3, r7, #840	; 0x348
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012072:	6812      	ldr	r2, [r2, #0]
 8012074:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012076:	bf00      	nop
    tps_value.setLinespacing(0);
 8012078:	1d3b      	adds	r3, r7, #4
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 8012080:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8012084:	601a      	str	r2, [r3, #0]
 8012086:	f207 334e 	addw	r3, r7, #846	; 0x34e
 801208a:	2200      	movs	r2, #0
 801208c:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801208e:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f207 324e 	addw	r2, r7, #846	; 0x34e
 8012098:	8812      	ldrh	r2, [r2, #0]
 801209a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801209c:	bf00      	nop
    Unicode::snprintf(tps_valueBuffer, TPS_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_AYOA).getText());
 801209e:	1d3b      	adds	r3, r7, #4
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	f603 3494 	addw	r4, r3, #2964	; 0xb94
 80120a6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80120aa:	2120      	movs	r1, #32
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7fe fc71 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80120b2:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80120b6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80120ba:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80120bc:	4b0d      	ldr	r3, [pc, #52]	; (80120f4 <_ZN15Screen1ViewBaseC1Ev+0x1068>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d105      	bne.n	80120d0 <_ZN15Screen1ViewBaseC1Ev+0x1044>
 80120c4:	4b0c      	ldr	r3, [pc, #48]	; (80120f8 <_ZN15Screen1ViewBaseC1Ev+0x106c>)
 80120c6:	4a0d      	ldr	r2, [pc, #52]	; (80120fc <_ZN15Screen1ViewBaseC1Ev+0x1070>)
 80120c8:	21ae      	movs	r1, #174	; 0xae
 80120ca:	480d      	ldr	r0, [pc, #52]	; (8012100 <_ZN15Screen1ViewBaseC1Ev+0x1074>)
 80120cc:	f01c f8a2 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80120d0:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	889a      	ldrh	r2, [r3, #4]
 80120d8:	4b0a      	ldr	r3, [pc, #40]	; (8012104 <_ZN15Screen1ViewBaseC1Ev+0x1078>)
 80120da:	881b      	ldrh	r3, [r3, #0]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d315      	bcc.n	801210c <_ZN15Screen1ViewBaseC1Ev+0x1080>
 80120e0:	4b09      	ldr	r3, [pc, #36]	; (8012108 <_ZN15Screen1ViewBaseC1Ev+0x107c>)
 80120e2:	4a06      	ldr	r2, [pc, #24]	; (80120fc <_ZN15Screen1ViewBaseC1Ev+0x1070>)
 80120e4:	21af      	movs	r1, #175	; 0xaf
 80120e6:	4806      	ldr	r0, [pc, #24]	; (8012100 <_ZN15Screen1ViewBaseC1Ev+0x1074>)
 80120e8:	f01c f894 	bl	802e214 <__assert_func>
 80120ec:	2000987c 	.word	0x2000987c
 80120f0:	0802f900 	.word	0x0802f900
 80120f4:	20009870 	.word	0x20009870
 80120f8:	0802f7f4 	.word	0x0802f7f4
 80120fc:	0802f838 	.word	0x0802f838
 8012100:	0802f868 	.word	0x0802f868
 8012104:	20009874 	.word	0x20009874
 8012108:	0802f8ac 	.word	0x0802f8ac
    }
 801210c:	bf00      	nop
        return texts->getText(typedTextId);
 801210e:	4bba      	ldr	r3, [pc, #744]	; (80123f8 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012116:	889b      	ldrh	r3, [r3, #4]
 8012118:	4619      	mov	r1, r3
 801211a:	4610      	mov	r0, r2
 801211c:	f002 fb2c 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8012120:	4603      	mov	r3, r0
 8012122:	bf00      	nop
 8012124:	4ab5      	ldr	r2, [pc, #724]	; (80123fc <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 8012126:	2120      	movs	r1, #32
 8012128:	4620      	mov	r0, r4
 801212a:	f00d fabf 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801212e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012132:	4618      	mov	r0, r3
 8012134:	f7fd fa50 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    tps_value.setWildcard(tps_valueBuffer);
 8012138:	1d3b      	adds	r3, r7, #4
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 8012140:	1d3b      	adds	r3, r7, #4
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8012148:	4619      	mov	r1, r3
 801214a:	4610      	mov	r0, r2
 801214c:	f7fe fcb0 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_value.resizeToCurrentText();
 8012150:	1d3b      	adds	r3, r7, #4
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8012158:	4618      	mov	r0, r3
 801215a:	f008 f84d 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MP7X));
 801215e:	1d3b      	adds	r3, r7, #4
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 8012166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801216a:	2111      	movs	r1, #17
 801216c:	4618      	mov	r0, r3
 801216e:	f7fe fc11 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012176:	4619      	mov	r1, r3
 8012178:	4620      	mov	r0, r4
 801217a:	f008 f85a 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801217e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012182:	4618      	mov	r0, r3
 8012184:	f7fd fa28 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    tps_label.setXY(808, 377);
 8012188:	1d3b      	adds	r3, r7, #4
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8012190:	f240 1279 	movw	r2, #377	; 0x179
 8012194:	f44f 714a 	mov.w	r1, #808	; 0x328
 8012198:	4618      	mov	r0, r3
 801219a:	f7fe f9ad 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    tps_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801219e:	1d3b      	adds	r3, r7, #4
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f203 443c 	addw	r4, r3, #1084	; 0x43c
 80121a6:	f207 335b 	addw	r3, r7, #859	; 0x35b
 80121aa:	22ff      	movs	r2, #255	; 0xff
 80121ac:	701a      	strb	r2, [r3, #0]
 80121ae:	f207 335a 	addw	r3, r7, #858	; 0x35a
 80121b2:	22ff      	movs	r2, #255	; 0xff
 80121b4:	701a      	strb	r2, [r3, #0]
 80121b6:	f207 3359 	addw	r3, r7, #857	; 0x359
 80121ba:	22ff      	movs	r2, #255	; 0xff
 80121bc:	701a      	strb	r2, [r3, #0]
 80121be:	f207 335b 	addw	r3, r7, #859	; 0x35b
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	041b      	lsls	r3, r3, #16
 80121c6:	461a      	mov	r2, r3
 80121c8:	f207 335a 	addw	r3, r7, #858	; 0x35a
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	021b      	lsls	r3, r3, #8
 80121d0:	431a      	orrs	r2, r3
 80121d2:	f207 3359 	addw	r3, r7, #857	; 0x359
 80121d6:	781b      	ldrb	r3, [r3, #0]
 80121d8:	4313      	orrs	r3, r2
 80121da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80121de:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80121e2:	4611      	mov	r1, r2
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7fe f8ab 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 80121ea:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	461a      	mov	r2, r3
 80121f2:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80121f6:	601c      	str	r4, [r3, #0]
 80121f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80121fc:	601a      	str	r2, [r3, #0]
        this->color = color;
 80121fe:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012208:	6812      	ldr	r2, [r2, #0]
 801220a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801220c:	bf00      	nop
    tps_label.setLinespacing(0);
 801220e:	1d3b      	adds	r3, r7, #4
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 8012216:	f507 7359 	add.w	r3, r7, #868	; 0x364
 801221a:	601a      	str	r2, [r3, #0]
 801221c:	f207 3362 	addw	r3, r7, #866	; 0x362
 8012220:	2200      	movs	r2, #0
 8012222:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8012224:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	f207 3262 	addw	r2, r7, #866	; 0x362
 801222e:	8812      	ldrh	r2, [r2, #0]
 8012230:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012232:	bf00      	nop
    Unicode::snprintf(tps_labelBuffer, TPS_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VMJT).getText());
 8012234:	1d3b      	adds	r3, r7, #4
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f603 34d4 	addw	r4, r3, #3028	; 0xbd4
 801223c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012240:	2125      	movs	r1, #37	; 0x25
 8012242:	4618      	mov	r0, r3
 8012244:	f7fe fba6 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012248:	f507 735a 	add.w	r3, r7, #872	; 0x368
 801224c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8012250:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012252:	4b6b      	ldr	r3, [pc, #428]	; (8012400 <_ZN15Screen1ViewBaseC1Ev+0x1374>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d105      	bne.n	8012266 <_ZN15Screen1ViewBaseC1Ev+0x11da>
 801225a:	4b6a      	ldr	r3, [pc, #424]	; (8012404 <_ZN15Screen1ViewBaseC1Ev+0x1378>)
 801225c:	4a6a      	ldr	r2, [pc, #424]	; (8012408 <_ZN15Screen1ViewBaseC1Ev+0x137c>)
 801225e:	21ae      	movs	r1, #174	; 0xae
 8012260:	486a      	ldr	r0, [pc, #424]	; (801240c <_ZN15Screen1ViewBaseC1Ev+0x1380>)
 8012262:	f01b ffd7 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012266:	f507 735a 	add.w	r3, r7, #872	; 0x368
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	889a      	ldrh	r2, [r3, #4]
 801226e:	4b68      	ldr	r3, [pc, #416]	; (8012410 <_ZN15Screen1ViewBaseC1Ev+0x1384>)
 8012270:	881b      	ldrh	r3, [r3, #0]
 8012272:	429a      	cmp	r2, r3
 8012274:	d305      	bcc.n	8012282 <_ZN15Screen1ViewBaseC1Ev+0x11f6>
 8012276:	4b67      	ldr	r3, [pc, #412]	; (8012414 <_ZN15Screen1ViewBaseC1Ev+0x1388>)
 8012278:	4a63      	ldr	r2, [pc, #396]	; (8012408 <_ZN15Screen1ViewBaseC1Ev+0x137c>)
 801227a:	21af      	movs	r1, #175	; 0xaf
 801227c:	4863      	ldr	r0, [pc, #396]	; (801240c <_ZN15Screen1ViewBaseC1Ev+0x1380>)
 801227e:	f01b ffc9 	bl	802e214 <__assert_func>
    }
 8012282:	bf00      	nop
        return texts->getText(typedTextId);
 8012284:	4b5c      	ldr	r3, [pc, #368]	; (80123f8 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801228c:	889b      	ldrh	r3, [r3, #4]
 801228e:	4619      	mov	r1, r3
 8012290:	4610      	mov	r0, r2
 8012292:	f002 fa71 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8012296:	4603      	mov	r3, r0
 8012298:	bf00      	nop
 801229a:	4a58      	ldr	r2, [pc, #352]	; (80123fc <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 801229c:	210a      	movs	r1, #10
 801229e:	4620      	mov	r0, r4
 80122a0:	f00d fa04 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80122a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7fd f995 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    tps_label.setWildcard(tps_labelBuffer);
 80122ae:	1d3b      	adds	r3, r7, #4
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 80122b6:	1d3b      	adds	r3, r7, #4
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	f603 33d4 	addw	r3, r3, #3028	; 0xbd4
 80122be:	4619      	mov	r1, r3
 80122c0:	4610      	mov	r0, r2
 80122c2:	f7fe fbf5 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_label.resizeToCurrentText();
 80122c6:	1d3b      	adds	r3, r7, #4
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 80122ce:	4618      	mov	r0, r3
 80122d0:	f007 ff92 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_L5WH));
 80122d4:	1d3b      	adds	r3, r7, #4
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f203 443c 	addw	r4, r3, #1084	; 0x43c
 80122dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80122e0:	210f      	movs	r1, #15
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7fe fb56 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80122e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80122ec:	4619      	mov	r1, r3
 80122ee:	4620      	mov	r0, r4
 80122f0:	f007 ff9f 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80122f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fd f96d 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    tps_units.setXY(750, 377);
 80122fe:	1d3b      	adds	r3, r7, #4
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8012306:	f240 1279 	movw	r2, #377	; 0x179
 801230a:	f240 21ee 	movw	r1, #750	; 0x2ee
 801230e:	4618      	mov	r0, r3
 8012310:	f7fe f8f2 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    tps_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012314:	1d3b      	adds	r3, r7, #4
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 801231c:	f207 336f 	addw	r3, r7, #879	; 0x36f
 8012320:	22ff      	movs	r2, #255	; 0xff
 8012322:	701a      	strb	r2, [r3, #0]
 8012324:	f207 336e 	addw	r3, r7, #878	; 0x36e
 8012328:	22ff      	movs	r2, #255	; 0xff
 801232a:	701a      	strb	r2, [r3, #0]
 801232c:	f207 336d 	addw	r3, r7, #877	; 0x36d
 8012330:	22ff      	movs	r2, #255	; 0xff
 8012332:	701a      	strb	r2, [r3, #0]
 8012334:	f207 336f 	addw	r3, r7, #879	; 0x36f
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	041b      	lsls	r3, r3, #16
 801233c:	461a      	mov	r2, r3
 801233e:	f207 336e 	addw	r3, r7, #878	; 0x36e
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	021b      	lsls	r3, r3, #8
 8012346:	431a      	orrs	r2, r3
 8012348:	f207 336d 	addw	r3, r7, #877	; 0x36d
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	4313      	orrs	r3, r2
 8012350:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012354:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8012358:	4611      	mov	r1, r2
 801235a:	4618      	mov	r0, r3
 801235c:	f7fd fff0 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8012360:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	461a      	mov	r2, r3
 8012368:	f507 735c 	add.w	r3, r7, #880	; 0x370
 801236c:	601c      	str	r4, [r3, #0]
 801236e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012372:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012374:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801237e:	6812      	ldr	r2, [r2, #0]
 8012380:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012382:	bf00      	nop
    tps_units.setLinespacing(0);
 8012384:	1d3b      	adds	r3, r7, #4
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f203 427c 	addw	r2, r3, #1148	; 0x47c
 801238c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8012390:	601a      	str	r2, [r3, #0]
 8012392:	f207 3376 	addw	r3, r7, #886	; 0x376
 8012396:	2200      	movs	r2, #0
 8012398:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801239a:	f507 735e 	add.w	r3, r7, #888	; 0x378
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	f207 3276 	addw	r2, r7, #886	; 0x376
 80123a4:	8812      	ldrh	r2, [r2, #0]
 80123a6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80123a8:	bf00      	nop
    Unicode::snprintf(tps_unitsBuffer, TPS_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L3HM).getText());
 80123aa:	1d3b      	adds	r3, r7, #4
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f603 34e8 	addw	r4, r3, #3048	; 0xbe8
 80123b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80123b6:	2124      	movs	r1, #36	; 0x24
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7fe faeb 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80123be:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80123c2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80123c6:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80123c8:	4b0d      	ldr	r3, [pc, #52]	; (8012400 <_ZN15Screen1ViewBaseC1Ev+0x1374>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d105      	bne.n	80123dc <_ZN15Screen1ViewBaseC1Ev+0x1350>
 80123d0:	4b0c      	ldr	r3, [pc, #48]	; (8012404 <_ZN15Screen1ViewBaseC1Ev+0x1378>)
 80123d2:	4a0d      	ldr	r2, [pc, #52]	; (8012408 <_ZN15Screen1ViewBaseC1Ev+0x137c>)
 80123d4:	21ae      	movs	r1, #174	; 0xae
 80123d6:	480d      	ldr	r0, [pc, #52]	; (801240c <_ZN15Screen1ViewBaseC1Ev+0x1380>)
 80123d8:	f01b ff1c 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80123dc:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	889a      	ldrh	r2, [r3, #4]
 80123e4:	4b0a      	ldr	r3, [pc, #40]	; (8012410 <_ZN15Screen1ViewBaseC1Ev+0x1384>)
 80123e6:	881b      	ldrh	r3, [r3, #0]
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d315      	bcc.n	8012418 <_ZN15Screen1ViewBaseC1Ev+0x138c>
 80123ec:	4b09      	ldr	r3, [pc, #36]	; (8012414 <_ZN15Screen1ViewBaseC1Ev+0x1388>)
 80123ee:	4a06      	ldr	r2, [pc, #24]	; (8012408 <_ZN15Screen1ViewBaseC1Ev+0x137c>)
 80123f0:	21af      	movs	r1, #175	; 0xaf
 80123f2:	4806      	ldr	r0, [pc, #24]	; (801240c <_ZN15Screen1ViewBaseC1Ev+0x1380>)
 80123f4:	f01b ff0e 	bl	802e214 <__assert_func>
 80123f8:	2000987c 	.word	0x2000987c
 80123fc:	0802f900 	.word	0x0802f900
 8012400:	20009870 	.word	0x20009870
 8012404:	0802f7f4 	.word	0x0802f7f4
 8012408:	0802f838 	.word	0x0802f838
 801240c:	0802f868 	.word	0x0802f868
 8012410:	20009874 	.word	0x20009874
 8012414:	0802f8ac 	.word	0x0802f8ac
    }
 8012418:	bf00      	nop
        return texts->getText(typedTextId);
 801241a:	4bba      	ldr	r3, [pc, #744]	; (8012704 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 801241c:	681a      	ldr	r2, [r3, #0]
 801241e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8012422:	889b      	ldrh	r3, [r3, #4]
 8012424:	4619      	mov	r1, r3
 8012426:	4610      	mov	r0, r2
 8012428:	f002 f9a6 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 801242c:	4603      	mov	r3, r0
 801242e:	bf00      	nop
 8012430:	4ab5      	ldr	r2, [pc, #724]	; (8012708 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 8012432:	210a      	movs	r1, #10
 8012434:	4620      	mov	r0, r4
 8012436:	f00d f939 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801243a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801243e:	4618      	mov	r0, r3
 8012440:	f7fd f8ca 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    tps_units.setWildcard(tps_unitsBuffer);
 8012444:	1d3b      	adds	r3, r7, #4
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	f203 427c 	addw	r2, r3, #1148	; 0x47c
 801244c:	1d3b      	adds	r3, r7, #4
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f603 33e8 	addw	r3, r3, #3048	; 0xbe8
 8012454:	4619      	mov	r1, r3
 8012456:	4610      	mov	r0, r2
 8012458:	f7fe fb2a 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_units.resizeToCurrentText();
 801245c:	1d3b      	adds	r3, r7, #4
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8012464:	4618      	mov	r0, r3
 8012466:	f007 fec7 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RPXE));
 801246a:	1d3b      	adds	r3, r7, #4
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 8012472:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8012476:	2110      	movs	r1, #16
 8012478:	4618      	mov	r0, r3
 801247a:	f7fe fa8b 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 801247e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8012482:	4619      	mov	r1, r3
 8012484:	4620      	mov	r0, r4
 8012486:	f007 fed4 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801248a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801248e:	4618      	mov	r0, r3
 8012490:	f7fd f8a2 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_value.setXY(859, 430);
 8012494:	1d3b      	adds	r3, r7, #4
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 801249c:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80124a0:	f240 315b 	movw	r1, #859	; 0x35b
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7fe f827 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80124aa:	1d3b      	adds	r3, r7, #4
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	f203 44bc 	addw	r4, r3, #1212	; 0x4bc
 80124b2:	f207 3383 	addw	r3, r7, #899	; 0x383
 80124b6:	22ff      	movs	r2, #255	; 0xff
 80124b8:	701a      	strb	r2, [r3, #0]
 80124ba:	f207 3382 	addw	r3, r7, #898	; 0x382
 80124be:	22ff      	movs	r2, #255	; 0xff
 80124c0:	701a      	strb	r2, [r3, #0]
 80124c2:	f207 3381 	addw	r3, r7, #897	; 0x381
 80124c6:	22ff      	movs	r2, #255	; 0xff
 80124c8:	701a      	strb	r2, [r3, #0]
 80124ca:	f207 3383 	addw	r3, r7, #899	; 0x383
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	041b      	lsls	r3, r3, #16
 80124d2:	461a      	mov	r2, r3
 80124d4:	f207 3382 	addw	r3, r7, #898	; 0x382
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	021b      	lsls	r3, r3, #8
 80124dc:	431a      	orrs	r2, r3
 80124de:	f207 3381 	addw	r3, r7, #897	; 0x381
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	4313      	orrs	r3, r2
 80124e6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80124ea:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80124ee:	4611      	mov	r1, r2
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fd ff25 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 80124f6:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	461a      	mov	r2, r3
 80124fe:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8012502:	601c      	str	r4, [r3, #0]
 8012504:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012508:	601a      	str	r2, [r3, #0]
        this->color = color;
 801250a:	f507 7361 	add.w	r3, r7, #900	; 0x384
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012514:	6812      	ldr	r2, [r2, #0]
 8012516:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012518:	bf00      	nop
    lambda_value.setLinespacing(0);
 801251a:	1d3b      	adds	r3, r7, #4
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	f203 42bc 	addw	r2, r3, #1212	; 0x4bc
 8012522:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8012526:	601a      	str	r2, [r3, #0]
 8012528:	f207 338a 	addw	r3, r7, #906	; 0x38a
 801252c:	2200      	movs	r2, #0
 801252e:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8012530:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	f207 328a 	addw	r2, r7, #906	; 0x38a
 801253a:	8812      	ldrh	r2, [r2, #0]
 801253c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801253e:	bf00      	nop
    Unicode::snprintf(lambda_valueBuffer, LAMBDA_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_2H8W).getText());
 8012540:	1d3b      	adds	r3, r7, #4
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f603 34fc 	addw	r4, r3, #3068	; 0xbfc
 8012548:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801254c:	2121      	movs	r1, #33	; 0x21
 801254e:	4618      	mov	r0, r3
 8012550:	f7fe fa20 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012554:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8012558:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801255c:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801255e:	4b6b      	ldr	r3, [pc, #428]	; (801270c <_ZN15Screen1ViewBaseC1Ev+0x1680>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d105      	bne.n	8012572 <_ZN15Screen1ViewBaseC1Ev+0x14e6>
 8012566:	4b6a      	ldr	r3, [pc, #424]	; (8012710 <_ZN15Screen1ViewBaseC1Ev+0x1684>)
 8012568:	4a6a      	ldr	r2, [pc, #424]	; (8012714 <_ZN15Screen1ViewBaseC1Ev+0x1688>)
 801256a:	21ae      	movs	r1, #174	; 0xae
 801256c:	486a      	ldr	r0, [pc, #424]	; (8012718 <_ZN15Screen1ViewBaseC1Ev+0x168c>)
 801256e:	f01b fe51 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012572:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	889a      	ldrh	r2, [r3, #4]
 801257a:	4b68      	ldr	r3, [pc, #416]	; (801271c <_ZN15Screen1ViewBaseC1Ev+0x1690>)
 801257c:	881b      	ldrh	r3, [r3, #0]
 801257e:	429a      	cmp	r2, r3
 8012580:	d305      	bcc.n	801258e <_ZN15Screen1ViewBaseC1Ev+0x1502>
 8012582:	4b67      	ldr	r3, [pc, #412]	; (8012720 <_ZN15Screen1ViewBaseC1Ev+0x1694>)
 8012584:	4a63      	ldr	r2, [pc, #396]	; (8012714 <_ZN15Screen1ViewBaseC1Ev+0x1688>)
 8012586:	21af      	movs	r1, #175	; 0xaf
 8012588:	4863      	ldr	r0, [pc, #396]	; (8012718 <_ZN15Screen1ViewBaseC1Ev+0x168c>)
 801258a:	f01b fe43 	bl	802e214 <__assert_func>
    }
 801258e:	bf00      	nop
        return texts->getText(typedTextId);
 8012590:	4b5c      	ldr	r3, [pc, #368]	; (8012704 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012598:	889b      	ldrh	r3, [r3, #4]
 801259a:	4619      	mov	r1, r3
 801259c:	4610      	mov	r0, r2
 801259e:	f002 f8eb 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 80125a2:	4603      	mov	r3, r0
 80125a4:	bf00      	nop
 80125a6:	4a58      	ldr	r2, [pc, #352]	; (8012708 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 80125a8:	2120      	movs	r1, #32
 80125aa:	4620      	mov	r0, r4
 80125ac:	f00d f87e 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80125b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fd f80f 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_value.setWildcard(lambda_valueBuffer);
 80125ba:	1d3b      	adds	r3, r7, #4
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f203 42bc 	addw	r2, r3, #1212	; 0x4bc
 80125c2:	1d3b      	adds	r3, r7, #4
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80125ca:	4619      	mov	r1, r3
 80125cc:	4610      	mov	r0, r2
 80125ce:	f7fe fa6f 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_value.resizeToCurrentText();
 80125d2:	1d3b      	adds	r3, r7, #4
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80125da:	4618      	mov	r0, r3
 80125dc:	f007 fe0c 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TLZY));
 80125e0:	1d3b      	adds	r3, r7, #4
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f203 44bc 	addw	r4, r3, #1212	; 0x4bc
 80125e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80125ec:	210e      	movs	r1, #14
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fe f9d0 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80125f4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80125f8:	4619      	mov	r1, r3
 80125fa:	4620      	mov	r0, r4
 80125fc:	f007 fe19 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012600:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012604:	4618      	mov	r0, r3
 8012606:	f7fc ffe7 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_label.setXY(799, 495);
 801260a:	1d3b      	adds	r3, r7, #4
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8012612:	f240 12ef 	movw	r2, #495	; 0x1ef
 8012616:	f240 311f 	movw	r1, #799	; 0x31f
 801261a:	4618      	mov	r0, r3
 801261c:	f7fd ff6c 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012620:	1d3b      	adds	r3, r7, #4
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 8012628:	f207 3397 	addw	r3, r7, #919	; 0x397
 801262c:	22ff      	movs	r2, #255	; 0xff
 801262e:	701a      	strb	r2, [r3, #0]
 8012630:	f207 3396 	addw	r3, r7, #918	; 0x396
 8012634:	22ff      	movs	r2, #255	; 0xff
 8012636:	701a      	strb	r2, [r3, #0]
 8012638:	f207 3395 	addw	r3, r7, #917	; 0x395
 801263c:	22ff      	movs	r2, #255	; 0xff
 801263e:	701a      	strb	r2, [r3, #0]
 8012640:	f207 3397 	addw	r3, r7, #919	; 0x397
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	041b      	lsls	r3, r3, #16
 8012648:	461a      	mov	r2, r3
 801264a:	f207 3396 	addw	r3, r7, #918	; 0x396
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	021b      	lsls	r3, r3, #8
 8012652:	431a      	orrs	r2, r3
 8012654:	f207 3395 	addw	r3, r7, #917	; 0x395
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	4313      	orrs	r3, r2
 801265c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012660:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8012664:	4611      	mov	r1, r2
 8012666:	4618      	mov	r0, r3
 8012668:	f7fd fe6a 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 801266c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	461a      	mov	r2, r3
 8012674:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8012678:	601c      	str	r4, [r3, #0]
 801267a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801267e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012680:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801268a:	6812      	ldr	r2, [r2, #0]
 801268c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801268e:	bf00      	nop
    lambda_label.setLinespacing(0);
 8012690:	1d3b      	adds	r3, r7, #4
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 8012698:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 801269c:	601a      	str	r2, [r3, #0]
 801269e:	f207 339e 	addw	r3, r7, #926	; 0x39e
 80126a2:	2200      	movs	r2, #0
 80126a4:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80126a6:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f207 329e 	addw	r2, r7, #926	; 0x39e
 80126b0:	8812      	ldrh	r2, [r2, #0]
 80126b2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80126b4:	bf00      	nop
    Unicode::snprintf(lambda_labelBuffer, LAMBDA_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JQKX).getText());
 80126b6:	1d3b      	adds	r3, r7, #4
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f603 443c 	addw	r4, r3, #3132	; 0xc3c
 80126be:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80126c2:	2127      	movs	r1, #39	; 0x27
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7fe f965 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80126ca:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80126ce:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80126d2:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80126d4:	4b0d      	ldr	r3, [pc, #52]	; (801270c <_ZN15Screen1ViewBaseC1Ev+0x1680>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d105      	bne.n	80126e8 <_ZN15Screen1ViewBaseC1Ev+0x165c>
 80126dc:	4b0c      	ldr	r3, [pc, #48]	; (8012710 <_ZN15Screen1ViewBaseC1Ev+0x1684>)
 80126de:	4a0d      	ldr	r2, [pc, #52]	; (8012714 <_ZN15Screen1ViewBaseC1Ev+0x1688>)
 80126e0:	21ae      	movs	r1, #174	; 0xae
 80126e2:	480d      	ldr	r0, [pc, #52]	; (8012718 <_ZN15Screen1ViewBaseC1Ev+0x168c>)
 80126e4:	f01b fd96 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80126e8:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	889a      	ldrh	r2, [r3, #4]
 80126f0:	4b0a      	ldr	r3, [pc, #40]	; (801271c <_ZN15Screen1ViewBaseC1Ev+0x1690>)
 80126f2:	881b      	ldrh	r3, [r3, #0]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	d315      	bcc.n	8012724 <_ZN15Screen1ViewBaseC1Ev+0x1698>
 80126f8:	4b09      	ldr	r3, [pc, #36]	; (8012720 <_ZN15Screen1ViewBaseC1Ev+0x1694>)
 80126fa:	4a06      	ldr	r2, [pc, #24]	; (8012714 <_ZN15Screen1ViewBaseC1Ev+0x1688>)
 80126fc:	21af      	movs	r1, #175	; 0xaf
 80126fe:	4806      	ldr	r0, [pc, #24]	; (8012718 <_ZN15Screen1ViewBaseC1Ev+0x168c>)
 8012700:	f01b fd88 	bl	802e214 <__assert_func>
 8012704:	2000987c 	.word	0x2000987c
 8012708:	0802f900 	.word	0x0802f900
 801270c:	20009870 	.word	0x20009870
 8012710:	0802f7f4 	.word	0x0802f7f4
 8012714:	0802f838 	.word	0x0802f838
 8012718:	0802f868 	.word	0x0802f868
 801271c:	20009874 	.word	0x20009874
 8012720:	0802f8ac 	.word	0x0802f8ac
    }
 8012724:	bf00      	nop
        return texts->getText(typedTextId);
 8012726:	4bb2      	ldr	r3, [pc, #712]	; (80129f0 <_ZN15Screen1ViewBaseC1Ev+0x1964>)
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801272e:	889b      	ldrh	r3, [r3, #4]
 8012730:	4619      	mov	r1, r3
 8012732:	4610      	mov	r0, r2
 8012734:	f002 f820 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8012738:	4603      	mov	r3, r0
 801273a:	bf00      	nop
 801273c:	4aad      	ldr	r2, [pc, #692]	; (80129f4 <_ZN15Screen1ViewBaseC1Ev+0x1968>)
 801273e:	210a      	movs	r1, #10
 8012740:	4620      	mov	r0, r4
 8012742:	f00c ffb3 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012746:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801274a:	4618      	mov	r0, r3
 801274c:	f7fc ff44 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_label.setWildcard(lambda_labelBuffer);
 8012750:	1d3b      	adds	r3, r7, #4
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 8012758:	1d3b      	adds	r3, r7, #4
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	f603 433c 	addw	r3, r3, #3132	; 0xc3c
 8012760:	4619      	mov	r1, r3
 8012762:	4610      	mov	r0, r2
 8012764:	f7fe f9a4 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_label.resizeToCurrentText();
 8012768:	1d3b      	adds	r3, r7, #4
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8012770:	4618      	mov	r0, r3
 8012772:	f007 fd41 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLOQ));
 8012776:	1d3b      	adds	r3, r7, #4
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 801277e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8012782:	210d      	movs	r1, #13
 8012784:	4618      	mov	r0, r3
 8012786:	f7fe f905 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 801278a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801278e:	4619      	mov	r1, r3
 8012790:	4620      	mov	r0, r4
 8012792:	f007 fd4e 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012796:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801279a:	4618      	mov	r0, r3
 801279c:	f7fc ff1c 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_units.setXY(648, 495);
 80127a0:	1d3b      	adds	r3, r7, #4
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80127a8:	f240 12ef 	movw	r2, #495	; 0x1ef
 80127ac:	f44f 7122 	mov.w	r1, #648	; 0x288
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7fd fea1 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80127b6:	1d3b      	adds	r3, r7, #4
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f203 543c 	addw	r4, r3, #1340	; 0x53c
 80127be:	f207 33ab 	addw	r3, r7, #939	; 0x3ab
 80127c2:	22ff      	movs	r2, #255	; 0xff
 80127c4:	701a      	strb	r2, [r3, #0]
 80127c6:	f207 33aa 	addw	r3, r7, #938	; 0x3aa
 80127ca:	22ff      	movs	r2, #255	; 0xff
 80127cc:	701a      	strb	r2, [r3, #0]
 80127ce:	f207 33a9 	addw	r3, r7, #937	; 0x3a9
 80127d2:	22ff      	movs	r2, #255	; 0xff
 80127d4:	701a      	strb	r2, [r3, #0]
 80127d6:	f207 33ab 	addw	r3, r7, #939	; 0x3ab
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	041b      	lsls	r3, r3, #16
 80127de:	461a      	mov	r2, r3
 80127e0:	f207 33aa 	addw	r3, r7, #938	; 0x3aa
 80127e4:	781b      	ldrb	r3, [r3, #0]
 80127e6:	021b      	lsls	r3, r3, #8
 80127e8:	431a      	orrs	r2, r3
 80127ea:	f207 33a9 	addw	r3, r7, #937	; 0x3a9
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	4313      	orrs	r3, r2
 80127f2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80127f6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80127fa:	4611      	mov	r1, r2
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7fd fd9f 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8012802:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	461a      	mov	r2, r3
 801280a:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 801280e:	601c      	str	r4, [r3, #0]
 8012810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012814:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012816:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012820:	6812      	ldr	r2, [r2, #0]
 8012822:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012824:	bf00      	nop
    lambda_units.setLinespacing(0);
 8012826:	1d3b      	adds	r3, r7, #4
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	f203 523c 	addw	r2, r3, #1340	; 0x53c
 801282e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8012832:	601a      	str	r2, [r3, #0]
 8012834:	f207 33b2 	addw	r3, r7, #946	; 0x3b2
 8012838:	2200      	movs	r2, #0
 801283a:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801283c:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	f207 32b2 	addw	r2, r7, #946	; 0x3b2
 8012846:	8812      	ldrh	r2, [r2, #0]
 8012848:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801284a:	bf00      	nop
    Unicode::snprintf(lambda_unitsBuffer, LAMBDA_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_J843).getText());
 801284c:	1d3b      	adds	r3, r7, #4
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	f503 6445 	add.w	r4, r3, #3152	; 0xc50
 8012854:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012858:	2126      	movs	r1, #38	; 0x26
 801285a:	4618      	mov	r0, r3
 801285c:	f7fe f89a 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012860:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012864:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8012868:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801286a:	4b63      	ldr	r3, [pc, #396]	; (80129f8 <_ZN15Screen1ViewBaseC1Ev+0x196c>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d105      	bne.n	801287e <_ZN15Screen1ViewBaseC1Ev+0x17f2>
 8012872:	4b62      	ldr	r3, [pc, #392]	; (80129fc <_ZN15Screen1ViewBaseC1Ev+0x1970>)
 8012874:	4a62      	ldr	r2, [pc, #392]	; (8012a00 <_ZN15Screen1ViewBaseC1Ev+0x1974>)
 8012876:	21ae      	movs	r1, #174	; 0xae
 8012878:	4862      	ldr	r0, [pc, #392]	; (8012a04 <_ZN15Screen1ViewBaseC1Ev+0x1978>)
 801287a:	f01b fccb 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801287e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	889a      	ldrh	r2, [r3, #4]
 8012886:	4b60      	ldr	r3, [pc, #384]	; (8012a08 <_ZN15Screen1ViewBaseC1Ev+0x197c>)
 8012888:	881b      	ldrh	r3, [r3, #0]
 801288a:	429a      	cmp	r2, r3
 801288c:	d305      	bcc.n	801289a <_ZN15Screen1ViewBaseC1Ev+0x180e>
 801288e:	4b5f      	ldr	r3, [pc, #380]	; (8012a0c <_ZN15Screen1ViewBaseC1Ev+0x1980>)
 8012890:	4a5b      	ldr	r2, [pc, #364]	; (8012a00 <_ZN15Screen1ViewBaseC1Ev+0x1974>)
 8012892:	21af      	movs	r1, #175	; 0xaf
 8012894:	485b      	ldr	r0, [pc, #364]	; (8012a04 <_ZN15Screen1ViewBaseC1Ev+0x1978>)
 8012896:	f01b fcbd 	bl	802e214 <__assert_func>
    }
 801289a:	bf00      	nop
        return texts->getText(typedTextId);
 801289c:	4b54      	ldr	r3, [pc, #336]	; (80129f0 <_ZN15Screen1ViewBaseC1Ev+0x1964>)
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80128a4:	889b      	ldrh	r3, [r3, #4]
 80128a6:	4619      	mov	r1, r3
 80128a8:	4610      	mov	r0, r2
 80128aa:	f001 ff65 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 80128ae:	4603      	mov	r3, r0
 80128b0:	bf00      	nop
 80128b2:	4a50      	ldr	r2, [pc, #320]	; (80129f4 <_ZN15Screen1ViewBaseC1Ev+0x1968>)
 80128b4:	210a      	movs	r1, #10
 80128b6:	4620      	mov	r0, r4
 80128b8:	f00c fef8 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80128bc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7fc fe89 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_units.setWildcard(lambda_unitsBuffer);
 80128c6:	1d3b      	adds	r3, r7, #4
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f203 523c 	addw	r2, r3, #1340	; 0x53c
 80128ce:	1d3b      	adds	r3, r7, #4
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	f503 6345 	add.w	r3, r3, #3152	; 0xc50
 80128d6:	4619      	mov	r1, r3
 80128d8:	4610      	mov	r0, r2
 80128da:	f7fe f8e9 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_units.resizeToCurrentText();
 80128de:	1d3b      	adds	r3, r7, #4
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80128e6:	4618      	mov	r0, r3
 80128e8:	f007 fc86 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KCKH));
 80128ec:	1d3b      	adds	r3, r7, #4
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f203 543c 	addw	r4, r3, #1340	; 0x53c
 80128f4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80128f8:	210c      	movs	r1, #12
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fe f84a 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012900:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012904:	4619      	mov	r1, r3
 8012906:	4620      	mov	r0, r4
 8012908:	f007 fc93 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801290c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8012910:	4618      	mov	r0, r3
 8012912:	f7fc fe61 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    ect_value.setXY(136, 76);
 8012916:	1d3b      	adds	r3, r7, #4
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 801291e:	224c      	movs	r2, #76	; 0x4c
 8012920:	2188      	movs	r1, #136	; 0x88
 8012922:	4618      	mov	r0, r3
 8012924:	f7fd fde8 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    ect_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012928:	1d3b      	adds	r3, r7, #4
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 8012930:	23ff      	movs	r3, #255	; 0xff
 8012932:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
 8012936:	23ff      	movs	r3, #255	; 0xff
 8012938:	f887 33be 	strb.w	r3, [r7, #958]	; 0x3be
 801293c:	23ff      	movs	r3, #255	; 0xff
 801293e:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
 8012942:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 8012946:	041b      	lsls	r3, r3, #16
 8012948:	461a      	mov	r2, r3
 801294a:	f897 33be 	ldrb.w	r3, [r7, #958]	; 0x3be
 801294e:	021b      	lsls	r3, r3, #8
 8012950:	431a      	orrs	r2, r3
 8012952:	f897 33bd 	ldrb.w	r3, [r7, #957]	; 0x3bd
 8012956:	4313      	orrs	r3, r2
 8012958:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801295c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8012960:	4611      	mov	r1, r2
 8012962:	4618      	mov	r0, r3
 8012964:	f7fd fcec 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8012968:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	461a      	mov	r2, r3
 8012970:	f8c7 43c0 	str.w	r4, [r7, #960]	; 0x3c0
 8012974:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012978:	601a      	str	r2, [r3, #0]
        this->color = color;
 801297a:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 801297e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012982:	6812      	ldr	r2, [r2, #0]
 8012984:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012986:	bf00      	nop
    ect_value.setLinespacing(0);
 8012988:	1d3b      	adds	r3, r7, #4
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012990:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8012994:	2300      	movs	r3, #0
 8012996:	f8a7 33c6 	strh.w	r3, [r7, #966]	; 0x3c6
        linespace = space;
 801299a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 801299e:	f8b7 23c6 	ldrh.w	r2, [r7, #966]	; 0x3c6
 80129a2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80129a4:	bf00      	nop
    Unicode::snprintf(ect_valueBuffer, ECT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JIWC).getText());
 80129a6:	1d3b      	adds	r3, r7, #4
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	f603 4464 	addw	r4, r3, #3172	; 0xc64
 80129ae:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80129b2:	211b      	movs	r1, #27
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7fd ffed 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80129ba:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80129be:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80129c2:	4b0d      	ldr	r3, [pc, #52]	; (80129f8 <_ZN15Screen1ViewBaseC1Ev+0x196c>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d105      	bne.n	80129d6 <_ZN15Screen1ViewBaseC1Ev+0x194a>
 80129ca:	4b0c      	ldr	r3, [pc, #48]	; (80129fc <_ZN15Screen1ViewBaseC1Ev+0x1970>)
 80129cc:	4a0c      	ldr	r2, [pc, #48]	; (8012a00 <_ZN15Screen1ViewBaseC1Ev+0x1974>)
 80129ce:	21ae      	movs	r1, #174	; 0xae
 80129d0:	480c      	ldr	r0, [pc, #48]	; (8012a04 <_ZN15Screen1ViewBaseC1Ev+0x1978>)
 80129d2:	f01b fc1f 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80129d6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80129da:	889a      	ldrh	r2, [r3, #4]
 80129dc:	4b0a      	ldr	r3, [pc, #40]	; (8012a08 <_ZN15Screen1ViewBaseC1Ev+0x197c>)
 80129de:	881b      	ldrh	r3, [r3, #0]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d315      	bcc.n	8012a10 <_ZN15Screen1ViewBaseC1Ev+0x1984>
 80129e4:	4b09      	ldr	r3, [pc, #36]	; (8012a0c <_ZN15Screen1ViewBaseC1Ev+0x1980>)
 80129e6:	4a06      	ldr	r2, [pc, #24]	; (8012a00 <_ZN15Screen1ViewBaseC1Ev+0x1974>)
 80129e8:	21af      	movs	r1, #175	; 0xaf
 80129ea:	4806      	ldr	r0, [pc, #24]	; (8012a04 <_ZN15Screen1ViewBaseC1Ev+0x1978>)
 80129ec:	f01b fc12 	bl	802e214 <__assert_func>
 80129f0:	2000987c 	.word	0x2000987c
 80129f4:	0802f900 	.word	0x0802f900
 80129f8:	20009870 	.word	0x20009870
 80129fc:	0802f7f4 	.word	0x0802f7f4
 8012a00:	0802f838 	.word	0x0802f838
 8012a04:	0802f868 	.word	0x0802f868
 8012a08:	20009874 	.word	0x20009874
 8012a0c:	0802f8ac 	.word	0x0802f8ac
    }
 8012a10:	bf00      	nop
        return texts->getText(typedTextId);
 8012a12:	4baa      	ldr	r3, [pc, #680]	; (8012cbc <_ZN15Screen1ViewBaseC1Ev+0x1c30>)
 8012a14:	681a      	ldr	r2, [r3, #0]
 8012a16:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012a1a:	889b      	ldrh	r3, [r3, #4]
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	4610      	mov	r0, r2
 8012a20:	f001 feaa 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8012a24:	4603      	mov	r3, r0
 8012a26:	bf00      	nop
 8012a28:	4aa5      	ldr	r2, [pc, #660]	; (8012cc0 <_ZN15Screen1ViewBaseC1Ev+0x1c34>)
 8012a2a:	2120      	movs	r1, #32
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	f00c fe3d 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012a32:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7fc fdce 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    ect_value.setWildcard(ect_valueBuffer);
 8012a3c:	1d3b      	adds	r3, r7, #4
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f203 527c 	addw	r2, r3, #1404	; 0x57c
 8012a44:	1d3b      	adds	r3, r7, #4
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	f603 4364 	addw	r3, r3, #3172	; 0xc64
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	4610      	mov	r0, r2
 8012a50:	f7fe f82e 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_value.resizeToCurrentText();
 8012a54:	1d3b      	adds	r3, r7, #4
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f007 fbcb 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LD25));
 8012a62:	1d3b      	adds	r3, r7, #4
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 8012a6a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012a6e:	2100      	movs	r1, #0
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7fd ff8f 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012a76:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f007 fbd8 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012a82:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fc fda6 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    ect_label.setXY(140, 140);
 8012a8c:	1d3b      	adds	r3, r7, #4
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012a94:	228c      	movs	r2, #140	; 0x8c
 8012a96:	218c      	movs	r1, #140	; 0x8c
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fd fd2d 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    ect_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012a9e:	1d3b      	adds	r3, r7, #4
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f203 54bc 	addw	r4, r3, #1468	; 0x5bc
 8012aa6:	23ff      	movs	r3, #255	; 0xff
 8012aa8:	f887 33d3 	strb.w	r3, [r7, #979]	; 0x3d3
 8012aac:	23ff      	movs	r3, #255	; 0xff
 8012aae:	f887 33d2 	strb.w	r3, [r7, #978]	; 0x3d2
 8012ab2:	23ff      	movs	r3, #255	; 0xff
 8012ab4:	f887 33d1 	strb.w	r3, [r7, #977]	; 0x3d1
 8012ab8:	f897 33d3 	ldrb.w	r3, [r7, #979]	; 0x3d3
 8012abc:	041b      	lsls	r3, r3, #16
 8012abe:	461a      	mov	r2, r3
 8012ac0:	f897 33d2 	ldrb.w	r3, [r7, #978]	; 0x3d2
 8012ac4:	021b      	lsls	r3, r3, #8
 8012ac6:	431a      	orrs	r2, r3
 8012ac8:	f897 33d1 	ldrb.w	r3, [r7, #977]	; 0x3d1
 8012acc:	4313      	orrs	r3, r2
 8012ace:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012ad2:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7fd fc31 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8012ade:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	f8c7 43d4 	str.w	r4, [r7, #980]	; 0x3d4
 8012aea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012aee:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012af0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8012af4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012af8:	6812      	ldr	r2, [r2, #0]
 8012afa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012afc:	bf00      	nop
    ect_label.setLinespacing(0);
 8012afe:	1d3b      	adds	r3, r7, #4
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012b06:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	f8a7 33da 	strh.w	r3, [r7, #986]	; 0x3da
        linespace = space;
 8012b10:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8012b14:	f8b7 23da 	ldrh.w	r2, [r7, #986]	; 0x3da
 8012b18:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012b1a:	bf00      	nop
    Unicode::snprintf(ect_labelBuffer, ECT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_P413).getText());
 8012b1c:	1d3b      	adds	r3, r7, #4
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	f603 44a4 	addw	r4, r3, #3236	; 0xca4
 8012b24:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012b28:	212e      	movs	r1, #46	; 0x2e
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fd ff32 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012b30:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012b34:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012b38:	4b62      	ldr	r3, [pc, #392]	; (8012cc4 <_ZN15Screen1ViewBaseC1Ev+0x1c38>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d105      	bne.n	8012b4c <_ZN15Screen1ViewBaseC1Ev+0x1ac0>
 8012b40:	4b61      	ldr	r3, [pc, #388]	; (8012cc8 <_ZN15Screen1ViewBaseC1Ev+0x1c3c>)
 8012b42:	4a62      	ldr	r2, [pc, #392]	; (8012ccc <_ZN15Screen1ViewBaseC1Ev+0x1c40>)
 8012b44:	21ae      	movs	r1, #174	; 0xae
 8012b46:	4862      	ldr	r0, [pc, #392]	; (8012cd0 <_ZN15Screen1ViewBaseC1Ev+0x1c44>)
 8012b48:	f01b fb64 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012b4c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8012b50:	889a      	ldrh	r2, [r3, #4]
 8012b52:	4b60      	ldr	r3, [pc, #384]	; (8012cd4 <_ZN15Screen1ViewBaseC1Ev+0x1c48>)
 8012b54:	881b      	ldrh	r3, [r3, #0]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d305      	bcc.n	8012b66 <_ZN15Screen1ViewBaseC1Ev+0x1ada>
 8012b5a:	4b5f      	ldr	r3, [pc, #380]	; (8012cd8 <_ZN15Screen1ViewBaseC1Ev+0x1c4c>)
 8012b5c:	4a5b      	ldr	r2, [pc, #364]	; (8012ccc <_ZN15Screen1ViewBaseC1Ev+0x1c40>)
 8012b5e:	21af      	movs	r1, #175	; 0xaf
 8012b60:	485b      	ldr	r0, [pc, #364]	; (8012cd0 <_ZN15Screen1ViewBaseC1Ev+0x1c44>)
 8012b62:	f01b fb57 	bl	802e214 <__assert_func>
    }
 8012b66:	bf00      	nop
        return texts->getText(typedTextId);
 8012b68:	4b54      	ldr	r3, [pc, #336]	; (8012cbc <_ZN15Screen1ViewBaseC1Ev+0x1c30>)
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012b70:	889b      	ldrh	r3, [r3, #4]
 8012b72:	4619      	mov	r1, r3
 8012b74:	4610      	mov	r0, r2
 8012b76:	f001 fdff 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	bf00      	nop
 8012b7e:	4a50      	ldr	r2, [pc, #320]	; (8012cc0 <_ZN15Screen1ViewBaseC1Ev+0x1c34>)
 8012b80:	210a      	movs	r1, #10
 8012b82:	4620      	mov	r0, r4
 8012b84:	f00c fd92 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012b88:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fc fd23 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    ect_label.setWildcard(ect_labelBuffer);
 8012b92:	1d3b      	adds	r3, r7, #4
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f203 52bc 	addw	r2, r3, #1468	; 0x5bc
 8012b9a:	1d3b      	adds	r3, r7, #4
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	4610      	mov	r0, r2
 8012ba6:	f7fd ff83 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_label.resizeToCurrentText();
 8012baa:	1d3b      	adds	r3, r7, #4
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f007 fb20 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4T7D));
 8012bb8:	1d3b      	adds	r3, r7, #4
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	f203 54bc 	addw	r4, r3, #1468	; 0x5bc
 8012bc0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012bc4:	2101      	movs	r1, #1
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fd fee4 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012bcc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012bd0:	4619      	mov	r1, r3
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	f007 fb2d 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012bd8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7fc fcfb 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    ect_units.setXY(243, 142);
 8012be2:	1d3b      	adds	r3, r7, #4
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012bea:	228e      	movs	r2, #142	; 0x8e
 8012bec:	21f3      	movs	r1, #243	; 0xf3
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fd fc82 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    ect_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012bf4:	1d3b      	adds	r3, r7, #4
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	f203 54fc 	addw	r4, r3, #1532	; 0x5fc
 8012bfc:	23ff      	movs	r3, #255	; 0xff
 8012bfe:	f887 33e7 	strb.w	r3, [r7, #999]	; 0x3e7
 8012c02:	23ff      	movs	r3, #255	; 0xff
 8012c04:	f887 33e6 	strb.w	r3, [r7, #998]	; 0x3e6
 8012c08:	23ff      	movs	r3, #255	; 0xff
 8012c0a:	f887 33e5 	strb.w	r3, [r7, #997]	; 0x3e5
 8012c0e:	f897 33e7 	ldrb.w	r3, [r7, #999]	; 0x3e7
 8012c12:	041b      	lsls	r3, r3, #16
 8012c14:	461a      	mov	r2, r3
 8012c16:	f897 33e6 	ldrb.w	r3, [r7, #998]	; 0x3e6
 8012c1a:	021b      	lsls	r3, r3, #8
 8012c1c:	431a      	orrs	r2, r3
 8012c1e:	f897 33e5 	ldrb.w	r3, [r7, #997]	; 0x3e5
 8012c22:	4313      	orrs	r3, r2
 8012c24:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012c28:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8012c2c:	4611      	mov	r1, r2
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fd fb86 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8012c34:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 8012c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012c44:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012c46:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8012c4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012c4e:	6812      	ldr	r2, [r2, #0]
 8012c50:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012c52:	bf00      	nop
    ect_units.setLinespacing(0);
 8012c54:	1d3b      	adds	r3, r7, #4
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012c5c:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8012c60:	2300      	movs	r3, #0
 8012c62:	f8a7 33ee 	strh.w	r3, [r7, #1006]	; 0x3ee
        linespace = space;
 8012c66:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8012c6a:	f8b7 23ee 	ldrh.w	r2, [r7, #1006]	; 0x3ee
 8012c6e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012c70:	bf00      	nop
    Unicode::snprintf(ect_unitsBuffer, ECT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NFMY).getText());
 8012c72:	1d3b      	adds	r3, r7, #4
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f603 44b8 	addw	r4, r3, #3256	; 0xcb8
 8012c7a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012c7e:	212f      	movs	r1, #47	; 0x2f
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7fd fe87 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012c86:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012c8a:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012c8e:	4b0d      	ldr	r3, [pc, #52]	; (8012cc4 <_ZN15Screen1ViewBaseC1Ev+0x1c38>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d105      	bne.n	8012ca2 <_ZN15Screen1ViewBaseC1Ev+0x1c16>
 8012c96:	4b0c      	ldr	r3, [pc, #48]	; (8012cc8 <_ZN15Screen1ViewBaseC1Ev+0x1c3c>)
 8012c98:	4a0c      	ldr	r2, [pc, #48]	; (8012ccc <_ZN15Screen1ViewBaseC1Ev+0x1c40>)
 8012c9a:	21ae      	movs	r1, #174	; 0xae
 8012c9c:	480c      	ldr	r0, [pc, #48]	; (8012cd0 <_ZN15Screen1ViewBaseC1Ev+0x1c44>)
 8012c9e:	f01b fab9 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012ca2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8012ca6:	889a      	ldrh	r2, [r3, #4]
 8012ca8:	4b0a      	ldr	r3, [pc, #40]	; (8012cd4 <_ZN15Screen1ViewBaseC1Ev+0x1c48>)
 8012caa:	881b      	ldrh	r3, [r3, #0]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d315      	bcc.n	8012cdc <_ZN15Screen1ViewBaseC1Ev+0x1c50>
 8012cb0:	4b09      	ldr	r3, [pc, #36]	; (8012cd8 <_ZN15Screen1ViewBaseC1Ev+0x1c4c>)
 8012cb2:	4a06      	ldr	r2, [pc, #24]	; (8012ccc <_ZN15Screen1ViewBaseC1Ev+0x1c40>)
 8012cb4:	21af      	movs	r1, #175	; 0xaf
 8012cb6:	4806      	ldr	r0, [pc, #24]	; (8012cd0 <_ZN15Screen1ViewBaseC1Ev+0x1c44>)
 8012cb8:	f01b faac 	bl	802e214 <__assert_func>
 8012cbc:	2000987c 	.word	0x2000987c
 8012cc0:	0802f900 	.word	0x0802f900
 8012cc4:	20009870 	.word	0x20009870
 8012cc8:	0802f7f4 	.word	0x0802f7f4
 8012ccc:	0802f838 	.word	0x0802f838
 8012cd0:	0802f868 	.word	0x0802f868
 8012cd4:	20009874 	.word	0x20009874
 8012cd8:	0802f8ac 	.word	0x0802f8ac
    }
 8012cdc:	bf00      	nop
        return texts->getText(typedTextId);
 8012cde:	4bab      	ldr	r3, [pc, #684]	; (8012f8c <_ZN15Screen1ViewBaseC1Ev+0x1f00>)
 8012ce0:	681a      	ldr	r2, [r3, #0]
 8012ce2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012ce6:	889b      	ldrh	r3, [r3, #4]
 8012ce8:	4619      	mov	r1, r3
 8012cea:	4610      	mov	r0, r2
 8012cec:	f001 fd44 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	bf00      	nop
 8012cf4:	4aa6      	ldr	r2, [pc, #664]	; (8012f90 <_ZN15Screen1ViewBaseC1Ev+0x1f04>)
 8012cf6:	210a      	movs	r1, #10
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f00c fcd7 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012cfe:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7fc fc68 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    ect_units.setWildcard(ect_unitsBuffer);
 8012d08:	1d3b      	adds	r3, r7, #4
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	f203 52fc 	addw	r2, r3, #1532	; 0x5fc
 8012d10:	1d3b      	adds	r3, r7, #4
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8012d18:	4619      	mov	r1, r3
 8012d1a:	4610      	mov	r0, r2
 8012d1c:	f7fd fec8 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_units.resizeToCurrentText();
 8012d20:	1d3b      	adds	r3, r7, #4
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f007 fa65 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ERKY));
 8012d2e:	1d3b      	adds	r3, r7, #4
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	f203 54fc 	addw	r4, r3, #1532	; 0x5fc
 8012d36:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8012d3a:	2102      	movs	r1, #2
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7fd fe29 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012d42:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8012d46:	4619      	mov	r1, r3
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f007 fa72 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012d4e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7fc fc40 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    iat_value.setXY(137, 192);
 8012d58:	1d3b      	adds	r3, r7, #4
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012d60:	22c0      	movs	r2, #192	; 0xc0
 8012d62:	2189      	movs	r1, #137	; 0x89
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fd fbc7 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    iat_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012d6a:	1d3b      	adds	r3, r7, #4
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8012d72:	23ff      	movs	r3, #255	; 0xff
 8012d74:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
 8012d78:	23ff      	movs	r3, #255	; 0xff
 8012d7a:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
 8012d7e:	23ff      	movs	r3, #255	; 0xff
 8012d80:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
 8012d84:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 8012d88:	041b      	lsls	r3, r3, #16
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8012d90:	021b      	lsls	r3, r3, #8
 8012d92:	431a      	orrs	r2, r3
 8012d94:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012d9e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8012da2:	4611      	mov	r1, r2
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7fd facb 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8012daa:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	461a      	mov	r2, r3
 8012db2:	f8c7 43fc 	str.w	r4, [r7, #1020]	; 0x3fc
 8012db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dba:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012dbc:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8012dc0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012dc4:	6812      	ldr	r2, [r2, #0]
 8012dc6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012dc8:	bf00      	nop
    iat_value.setLinespacing(0);
 8012dca:	1d3b      	adds	r3, r7, #4
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012dd2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
        linespace = space;
 8012ddc:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8012de0:	f8b7 2402 	ldrh.w	r2, [r7, #1026]	; 0x402
 8012de4:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012de6:	bf00      	nop
    Unicode::snprintf(iat_valueBuffer, IAT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_H85L).getText());
 8012de8:	1d3b      	adds	r3, r7, #4
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f603 44cc 	addw	r4, r3, #3276	; 0xccc
 8012df0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012df4:	211c      	movs	r1, #28
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fd fdcc 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012dfc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012e00:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012e04:	4b63      	ldr	r3, [pc, #396]	; (8012f94 <_ZN15Screen1ViewBaseC1Ev+0x1f08>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d105      	bne.n	8012e18 <_ZN15Screen1ViewBaseC1Ev+0x1d8c>
 8012e0c:	4b62      	ldr	r3, [pc, #392]	; (8012f98 <_ZN15Screen1ViewBaseC1Ev+0x1f0c>)
 8012e0e:	4a63      	ldr	r2, [pc, #396]	; (8012f9c <_ZN15Screen1ViewBaseC1Ev+0x1f10>)
 8012e10:	21ae      	movs	r1, #174	; 0xae
 8012e12:	4863      	ldr	r0, [pc, #396]	; (8012fa0 <_ZN15Screen1ViewBaseC1Ev+0x1f14>)
 8012e14:	f01b f9fe 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012e18:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8012e1c:	889a      	ldrh	r2, [r3, #4]
 8012e1e:	4b61      	ldr	r3, [pc, #388]	; (8012fa4 <_ZN15Screen1ViewBaseC1Ev+0x1f18>)
 8012e20:	881b      	ldrh	r3, [r3, #0]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d305      	bcc.n	8012e32 <_ZN15Screen1ViewBaseC1Ev+0x1da6>
 8012e26:	4b60      	ldr	r3, [pc, #384]	; (8012fa8 <_ZN15Screen1ViewBaseC1Ev+0x1f1c>)
 8012e28:	4a5c      	ldr	r2, [pc, #368]	; (8012f9c <_ZN15Screen1ViewBaseC1Ev+0x1f10>)
 8012e2a:	21af      	movs	r1, #175	; 0xaf
 8012e2c:	485c      	ldr	r0, [pc, #368]	; (8012fa0 <_ZN15Screen1ViewBaseC1Ev+0x1f14>)
 8012e2e:	f01b f9f1 	bl	802e214 <__assert_func>
    }
 8012e32:	bf00      	nop
        return texts->getText(typedTextId);
 8012e34:	4b55      	ldr	r3, [pc, #340]	; (8012f8c <_ZN15Screen1ViewBaseC1Ev+0x1f00>)
 8012e36:	681a      	ldr	r2, [r3, #0]
 8012e38:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012e3c:	889b      	ldrh	r3, [r3, #4]
 8012e3e:	4619      	mov	r1, r3
 8012e40:	4610      	mov	r0, r2
 8012e42:	f001 fc99 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8012e46:	4603      	mov	r3, r0
 8012e48:	bf00      	nop
 8012e4a:	4a51      	ldr	r2, [pc, #324]	; (8012f90 <_ZN15Screen1ViewBaseC1Ev+0x1f04>)
 8012e4c:	2120      	movs	r1, #32
 8012e4e:	4620      	mov	r0, r4
 8012e50:	f00c fc2c 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012e54:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7fc fbbd 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    iat_value.setWildcard(iat_valueBuffer);
 8012e5e:	1d3b      	adds	r3, r7, #4
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f203 623c 	addw	r2, r3, #1596	; 0x63c
 8012e66:	1d3b      	adds	r3, r7, #4
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f603 43cc 	addw	r3, r3, #3276	; 0xccc
 8012e6e:	4619      	mov	r1, r3
 8012e70:	4610      	mov	r0, r2
 8012e72:	f7fd fe1d 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_value.resizeToCurrentText();
 8012e76:	1d3b      	adds	r3, r7, #4
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f007 f9ba 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z15X));
 8012e84:	1d3b      	adds	r3, r7, #4
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8012e8c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8012e90:	2103      	movs	r1, #3
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fd fd7e 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012e98:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	f007 f9c7 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012ea4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7fc fb95 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    iat_label.setXY(141, 256);
 8012eae:	1d3b      	adds	r3, r7, #4
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8012eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012eba:	218d      	movs	r1, #141	; 0x8d
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7fd fb1b 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    iat_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012ec2:	1d3b      	adds	r3, r7, #4
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8012eca:	23ff      	movs	r3, #255	; 0xff
 8012ecc:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8012ed0:	23ff      	movs	r3, #255	; 0xff
 8012ed2:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e
 8012ed6:	23ff      	movs	r3, #255	; 0xff
 8012ed8:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d
 8012edc:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8012ee0:	041b      	lsls	r3, r3, #16
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 8012ee8:	021b      	lsls	r3, r3, #8
 8012eea:	431a      	orrs	r2, r3
 8012eec:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8012ef0:	4313      	orrs	r3, r2
 8012ef2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012ef6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8012efa:	4611      	mov	r1, r2
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7fd fa1f 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8012f02:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	461a      	mov	r2, r3
 8012f0a:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 8012f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f12:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012f14:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8012f18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012f1c:	6812      	ldr	r2, [r2, #0]
 8012f1e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012f20:	bf00      	nop
    iat_label.setLinespacing(0);
 8012f22:	1d3b      	adds	r3, r7, #4
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8012f2a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8012f2e:	2300      	movs	r3, #0
 8012f30:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
        linespace = space;
 8012f34:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8012f38:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8012f3c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012f3e:	bf00      	nop
    Unicode::snprintf(iat_labelBuffer, IAT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_K94Y).getText());
 8012f40:	1d3b      	adds	r3, r7, #4
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	f603 540c 	addw	r4, r3, #3340	; 0xd0c
 8012f48:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8012f4c:	212d      	movs	r1, #45	; 0x2d
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7fd fd20 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8012f54:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8012f58:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012f5c:	4b0d      	ldr	r3, [pc, #52]	; (8012f94 <_ZN15Screen1ViewBaseC1Ev+0x1f08>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d105      	bne.n	8012f70 <_ZN15Screen1ViewBaseC1Ev+0x1ee4>
 8012f64:	4b0c      	ldr	r3, [pc, #48]	; (8012f98 <_ZN15Screen1ViewBaseC1Ev+0x1f0c>)
 8012f66:	4a0d      	ldr	r2, [pc, #52]	; (8012f9c <_ZN15Screen1ViewBaseC1Ev+0x1f10>)
 8012f68:	21ae      	movs	r1, #174	; 0xae
 8012f6a:	480d      	ldr	r0, [pc, #52]	; (8012fa0 <_ZN15Screen1ViewBaseC1Ev+0x1f14>)
 8012f6c:	f01b f952 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012f70:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8012f74:	889a      	ldrh	r2, [r3, #4]
 8012f76:	4b0b      	ldr	r3, [pc, #44]	; (8012fa4 <_ZN15Screen1ViewBaseC1Ev+0x1f18>)
 8012f78:	881b      	ldrh	r3, [r3, #0]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d316      	bcc.n	8012fac <_ZN15Screen1ViewBaseC1Ev+0x1f20>
 8012f7e:	4b0a      	ldr	r3, [pc, #40]	; (8012fa8 <_ZN15Screen1ViewBaseC1Ev+0x1f1c>)
 8012f80:	4a06      	ldr	r2, [pc, #24]	; (8012f9c <_ZN15Screen1ViewBaseC1Ev+0x1f10>)
 8012f82:	21af      	movs	r1, #175	; 0xaf
 8012f84:	4806      	ldr	r0, [pc, #24]	; (8012fa0 <_ZN15Screen1ViewBaseC1Ev+0x1f14>)
 8012f86:	f01b f945 	bl	802e214 <__assert_func>
 8012f8a:	bf00      	nop
 8012f8c:	2000987c 	.word	0x2000987c
 8012f90:	0802f900 	.word	0x0802f900
 8012f94:	20009870 	.word	0x20009870
 8012f98:	0802f7f4 	.word	0x0802f7f4
 8012f9c:	0802f838 	.word	0x0802f838
 8012fa0:	0802f868 	.word	0x0802f868
 8012fa4:	20009874 	.word	0x20009874
 8012fa8:	0802f8ac 	.word	0x0802f8ac
    }
 8012fac:	bf00      	nop
        return texts->getText(typedTextId);
 8012fae:	4bab      	ldr	r3, [pc, #684]	; (801325c <_ZN15Screen1ViewBaseC1Ev+0x21d0>)
 8012fb0:	681a      	ldr	r2, [r3, #0]
 8012fb2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8012fb6:	889b      	ldrh	r3, [r3, #4]
 8012fb8:	4619      	mov	r1, r3
 8012fba:	4610      	mov	r0, r2
 8012fbc:	f001 fbdc 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	bf00      	nop
 8012fc4:	4aa6      	ldr	r2, [pc, #664]	; (8013260 <_ZN15Screen1ViewBaseC1Ev+0x21d4>)
 8012fc6:	210a      	movs	r1, #10
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f00c fb6f 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012fce:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7fc fb00 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    iat_label.setWildcard(iat_labelBuffer);
 8012fd8:	1d3b      	adds	r3, r7, #4
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	f203 627c 	addw	r2, r3, #1660	; 0x67c
 8012fe0:	1d3b      	adds	r3, r7, #4
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	f603 530c 	addw	r3, r3, #3340	; 0xd0c
 8012fe8:	4619      	mov	r1, r3
 8012fea:	4610      	mov	r0, r2
 8012fec:	f7fd fd60 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_label.resizeToCurrentText();
 8012ff0:	1d3b      	adds	r3, r7, #4
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f007 f8fd 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S5UQ));
 8012ffe:	1d3b      	adds	r3, r7, #4
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8013006:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801300a:	2105      	movs	r1, #5
 801300c:	4618      	mov	r0, r3
 801300e:	f7fd fcc1 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8013012:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013016:	4619      	mov	r1, r3
 8013018:	4620      	mov	r0, r4
 801301a:	f007 f90a 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801301e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013022:	4618      	mov	r0, r3
 8013024:	f7fc fad8 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    iat_units.setXY(221, 256);
 8013028:	1d3b      	adds	r3, r7, #4
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8013030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013034:	21dd      	movs	r1, #221	; 0xdd
 8013036:	4618      	mov	r0, r3
 8013038:	f7fd fa5e 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    iat_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801303c:	1d3b      	adds	r3, r7, #4
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f203 64bc 	addw	r4, r3, #1724	; 0x6bc
 8013044:	23ff      	movs	r3, #255	; 0xff
 8013046:	f887 3423 	strb.w	r3, [r7, #1059]	; 0x423
 801304a:	23ff      	movs	r3, #255	; 0xff
 801304c:	f887 3422 	strb.w	r3, [r7, #1058]	; 0x422
 8013050:	23ff      	movs	r3, #255	; 0xff
 8013052:	f887 3421 	strb.w	r3, [r7, #1057]	; 0x421
 8013056:	f897 3423 	ldrb.w	r3, [r7, #1059]	; 0x423
 801305a:	041b      	lsls	r3, r3, #16
 801305c:	461a      	mov	r2, r3
 801305e:	f897 3422 	ldrb.w	r3, [r7, #1058]	; 0x422
 8013062:	021b      	lsls	r3, r3, #8
 8013064:	431a      	orrs	r2, r3
 8013066:	f897 3421 	ldrb.w	r3, [r7, #1057]	; 0x421
 801306a:	4313      	orrs	r3, r2
 801306c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013070:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8013074:	4611      	mov	r1, r2
 8013076:	4618      	mov	r0, r3
 8013078:	f7fd f962 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 801307c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	461a      	mov	r2, r3
 8013084:	f8c7 4424 	str.w	r4, [r7, #1060]	; 0x424
 8013088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801308c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801308e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8013092:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013096:	6812      	ldr	r2, [r2, #0]
 8013098:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801309a:	bf00      	nop
    iat_units.setLinespacing(0);
 801309c:	1d3b      	adds	r3, r7, #4
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 80130a4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80130a8:	2300      	movs	r3, #0
 80130aa:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
        linespace = space;
 80130ae:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80130b2:	f8b7 242a 	ldrh.w	r2, [r7, #1066]	; 0x42a
 80130b6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80130b8:	bf00      	nop
    Unicode::snprintf(iat_unitsBuffer, IAT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_S9CZ).getText());
 80130ba:	1d3b      	adds	r3, r7, #4
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f503 6452 	add.w	r4, r3, #3360	; 0xd20
 80130c2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80130c6:	212c      	movs	r1, #44	; 0x2c
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7fd fc63 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80130ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80130d2:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80130d6:	4b63      	ldr	r3, [pc, #396]	; (8013264 <_ZN15Screen1ViewBaseC1Ev+0x21d8>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d105      	bne.n	80130ea <_ZN15Screen1ViewBaseC1Ev+0x205e>
 80130de:	4b62      	ldr	r3, [pc, #392]	; (8013268 <_ZN15Screen1ViewBaseC1Ev+0x21dc>)
 80130e0:	4a62      	ldr	r2, [pc, #392]	; (801326c <_ZN15Screen1ViewBaseC1Ev+0x21e0>)
 80130e2:	21ae      	movs	r1, #174	; 0xae
 80130e4:	4862      	ldr	r0, [pc, #392]	; (8013270 <_ZN15Screen1ViewBaseC1Ev+0x21e4>)
 80130e6:	f01b f895 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80130ea:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80130ee:	889a      	ldrh	r2, [r3, #4]
 80130f0:	4b60      	ldr	r3, [pc, #384]	; (8013274 <_ZN15Screen1ViewBaseC1Ev+0x21e8>)
 80130f2:	881b      	ldrh	r3, [r3, #0]
 80130f4:	429a      	cmp	r2, r3
 80130f6:	d305      	bcc.n	8013104 <_ZN15Screen1ViewBaseC1Ev+0x2078>
 80130f8:	4b5f      	ldr	r3, [pc, #380]	; (8013278 <_ZN15Screen1ViewBaseC1Ev+0x21ec>)
 80130fa:	4a5c      	ldr	r2, [pc, #368]	; (801326c <_ZN15Screen1ViewBaseC1Ev+0x21e0>)
 80130fc:	21af      	movs	r1, #175	; 0xaf
 80130fe:	485c      	ldr	r0, [pc, #368]	; (8013270 <_ZN15Screen1ViewBaseC1Ev+0x21e4>)
 8013100:	f01b f888 	bl	802e214 <__assert_func>
    }
 8013104:	bf00      	nop
        return texts->getText(typedTextId);
 8013106:	4b55      	ldr	r3, [pc, #340]	; (801325c <_ZN15Screen1ViewBaseC1Ev+0x21d0>)
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801310e:	889b      	ldrh	r3, [r3, #4]
 8013110:	4619      	mov	r1, r3
 8013112:	4610      	mov	r0, r2
 8013114:	f001 fb30 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8013118:	4603      	mov	r3, r0
 801311a:	bf00      	nop
 801311c:	4a50      	ldr	r2, [pc, #320]	; (8013260 <_ZN15Screen1ViewBaseC1Ev+0x21d4>)
 801311e:	210a      	movs	r1, #10
 8013120:	4620      	mov	r0, r4
 8013122:	f00c fac3 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013126:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801312a:	4618      	mov	r0, r3
 801312c:	f7fc fa54 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    iat_units.setWildcard(iat_unitsBuffer);
 8013130:	1d3b      	adds	r3, r7, #4
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	f203 62bc 	addw	r2, r3, #1724	; 0x6bc
 8013138:	1d3b      	adds	r3, r7, #4
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8013140:	4619      	mov	r1, r3
 8013142:	4610      	mov	r0, r2
 8013144:	f7fd fcb4 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_units.resizeToCurrentText();
 8013148:	1d3b      	adds	r3, r7, #4
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8013150:	4618      	mov	r0, r3
 8013152:	f007 f851 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XBZK));
 8013156:	1d3b      	adds	r3, r7, #4
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	f203 64bc 	addw	r4, r3, #1724	; 0x6bc
 801315e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8013162:	2104      	movs	r1, #4
 8013164:	4618      	mov	r0, r3
 8013166:	f7fd fc15 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 801316a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801316e:	4619      	mov	r1, r3
 8013170:	4620      	mov	r0, r4
 8013172:	f007 f85e 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013176:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801317a:	4618      	mov	r0, r3
 801317c:	f7fc fa2c 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_value.setXY(137, 310);
 8013180:	1d3b      	adds	r3, r7, #4
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8013188:	f44f 729b 	mov.w	r2, #310	; 0x136
 801318c:	2189      	movs	r1, #137	; 0x89
 801318e:	4618      	mov	r0, r3
 8013190:	f7fd f9b2 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013194:	1d3b      	adds	r3, r7, #4
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 801319c:	23ff      	movs	r3, #255	; 0xff
 801319e:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
 80131a2:	23ff      	movs	r3, #255	; 0xff
 80131a4:	f887 3436 	strb.w	r3, [r7, #1078]	; 0x436
 80131a8:	23ff      	movs	r3, #255	; 0xff
 80131aa:	f887 3435 	strb.w	r3, [r7, #1077]	; 0x435
 80131ae:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 80131b2:	041b      	lsls	r3, r3, #16
 80131b4:	461a      	mov	r2, r3
 80131b6:	f897 3436 	ldrb.w	r3, [r7, #1078]	; 0x436
 80131ba:	021b      	lsls	r3, r3, #8
 80131bc:	431a      	orrs	r2, r3
 80131be:	f897 3435 	ldrb.w	r3, [r7, #1077]	; 0x435
 80131c2:	4313      	orrs	r3, r2
 80131c4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80131c8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80131cc:	4611      	mov	r1, r2
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7fd f8b6 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 80131d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	461a      	mov	r2, r3
 80131dc:	f8c7 4438 	str.w	r4, [r7, #1080]	; 0x438
 80131e0:	f107 0320 	add.w	r3, r7, #32
 80131e4:	601a      	str	r2, [r3, #0]
        this->color = color;
 80131e6:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80131ea:	f107 0220 	add.w	r2, r7, #32
 80131ee:	6812      	ldr	r2, [r2, #0]
 80131f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80131f2:	bf00      	nop
    oilp_value.setLinespacing(0);
 80131f4:	1d3b      	adds	r3, r7, #4
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 80131fc:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8013200:	2300      	movs	r3, #0
 8013202:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        linespace = space;
 8013206:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 801320a:	f8b7 243e 	ldrh.w	r2, [r7, #1086]	; 0x43e
 801320e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013210:	bf00      	nop
    Unicode::snprintf(oilp_valueBuffer, OILP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DHUY).getText());
 8013212:	1d3b      	adds	r3, r7, #4
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	f603 5434 	addw	r4, r3, #3380	; 0xd34
 801321a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801321e:	211d      	movs	r1, #29
 8013220:	4618      	mov	r0, r3
 8013222:	f7fd fbb7 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8013226:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801322a:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801322e:	4b0d      	ldr	r3, [pc, #52]	; (8013264 <_ZN15Screen1ViewBaseC1Ev+0x21d8>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d105      	bne.n	8013242 <_ZN15Screen1ViewBaseC1Ev+0x21b6>
 8013236:	4b0c      	ldr	r3, [pc, #48]	; (8013268 <_ZN15Screen1ViewBaseC1Ev+0x21dc>)
 8013238:	4a0c      	ldr	r2, [pc, #48]	; (801326c <_ZN15Screen1ViewBaseC1Ev+0x21e0>)
 801323a:	21ae      	movs	r1, #174	; 0xae
 801323c:	480c      	ldr	r0, [pc, #48]	; (8013270 <_ZN15Screen1ViewBaseC1Ev+0x21e4>)
 801323e:	f01a ffe9 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013242:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8013246:	889a      	ldrh	r2, [r3, #4]
 8013248:	4b0a      	ldr	r3, [pc, #40]	; (8013274 <_ZN15Screen1ViewBaseC1Ev+0x21e8>)
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	429a      	cmp	r2, r3
 801324e:	d315      	bcc.n	801327c <_ZN15Screen1ViewBaseC1Ev+0x21f0>
 8013250:	4b09      	ldr	r3, [pc, #36]	; (8013278 <_ZN15Screen1ViewBaseC1Ev+0x21ec>)
 8013252:	4a06      	ldr	r2, [pc, #24]	; (801326c <_ZN15Screen1ViewBaseC1Ev+0x21e0>)
 8013254:	21af      	movs	r1, #175	; 0xaf
 8013256:	4806      	ldr	r0, [pc, #24]	; (8013270 <_ZN15Screen1ViewBaseC1Ev+0x21e4>)
 8013258:	f01a ffdc 	bl	802e214 <__assert_func>
 801325c:	2000987c 	.word	0x2000987c
 8013260:	0802f900 	.word	0x0802f900
 8013264:	20009870 	.word	0x20009870
 8013268:	0802f7f4 	.word	0x0802f7f4
 801326c:	0802f838 	.word	0x0802f838
 8013270:	0802f868 	.word	0x0802f868
 8013274:	20009874 	.word	0x20009874
 8013278:	0802f8ac 	.word	0x0802f8ac
    }
 801327c:	bf00      	nop
        return texts->getText(typedTextId);
 801327e:	4bab      	ldr	r3, [pc, #684]	; (801352c <_ZN15Screen1ViewBaseC1Ev+0x24a0>)
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8013286:	889b      	ldrh	r3, [r3, #4]
 8013288:	4619      	mov	r1, r3
 801328a:	4610      	mov	r0, r2
 801328c:	f001 fa74 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8013290:	4603      	mov	r3, r0
 8013292:	bf00      	nop
 8013294:	4aa6      	ldr	r2, [pc, #664]	; (8013530 <_ZN15Screen1ViewBaseC1Ev+0x24a4>)
 8013296:	2120      	movs	r1, #32
 8013298:	4620      	mov	r0, r4
 801329a:	f00c fa07 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801329e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7fc f998 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_value.setWildcard(oilp_valueBuffer);
 80132a8:	1d3b      	adds	r3, r7, #4
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f203 62fc 	addw	r2, r3, #1788	; 0x6fc
 80132b0:	1d3b      	adds	r3, r7, #4
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	f603 5334 	addw	r3, r3, #3380	; 0xd34
 80132b8:	4619      	mov	r1, r3
 80132ba:	4610      	mov	r0, r2
 80132bc:	f7fd fbf8 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_value.resizeToCurrentText();
 80132c0:	1d3b      	adds	r3, r7, #4
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 80132c8:	4618      	mov	r0, r3
 80132ca:	f006 ff95 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GFHB));
 80132ce:	1d3b      	adds	r3, r7, #4
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 80132d6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80132da:	2106      	movs	r1, #6
 80132dc:	4618      	mov	r0, r3
 80132de:	f7fd fb59 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80132e2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80132e6:	4619      	mov	r1, r3
 80132e8:	4620      	mov	r0, r4
 80132ea:	f006 ffa2 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80132ee:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fc f970 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_label.setXY(140, 376);
 80132f8:	1d3b      	adds	r3, r7, #4
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013300:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8013304:	218c      	movs	r1, #140	; 0x8c
 8013306:	4618      	mov	r0, r3
 8013308:	f7fd f8f6 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801330c:	1d3b      	adds	r3, r7, #4
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 8013314:	23ff      	movs	r3, #255	; 0xff
 8013316:	f887 344b 	strb.w	r3, [r7, #1099]	; 0x44b
 801331a:	23ff      	movs	r3, #255	; 0xff
 801331c:	f887 344a 	strb.w	r3, [r7, #1098]	; 0x44a
 8013320:	23ff      	movs	r3, #255	; 0xff
 8013322:	f887 3449 	strb.w	r3, [r7, #1097]	; 0x449
 8013326:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 801332a:	041b      	lsls	r3, r3, #16
 801332c:	461a      	mov	r2, r3
 801332e:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8013332:	021b      	lsls	r3, r3, #8
 8013334:	431a      	orrs	r2, r3
 8013336:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 801333a:	4313      	orrs	r3, r2
 801333c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013340:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8013344:	4611      	mov	r1, r2
 8013346:	4618      	mov	r0, r3
 8013348:	f7fc fffa 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 801334c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	461a      	mov	r2, r3
 8013354:	f8c7 444c 	str.w	r4, [r7, #1100]	; 0x44c
 8013358:	f107 031c 	add.w	r3, r7, #28
 801335c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801335e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8013362:	f107 021c 	add.w	r2, r7, #28
 8013366:	6812      	ldr	r2, [r2, #0]
 8013368:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801336a:	bf00      	nop
    oilp_label.setLinespacing(0);
 801336c:	1d3b      	adds	r3, r7, #4
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013374:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8013378:	2300      	movs	r3, #0
 801337a:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
        linespace = space;
 801337e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8013382:	f8b7 2452 	ldrh.w	r2, [r7, #1106]	; 0x452
 8013386:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013388:	bf00      	nop
    Unicode::snprintf(oilp_labelBuffer, OILP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9VHS).getText());
 801338a:	1d3b      	adds	r3, r7, #4
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	f603 5474 	addw	r4, r3, #3444	; 0xd74
 8013392:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013396:	212b      	movs	r1, #43	; 0x2b
 8013398:	4618      	mov	r0, r3
 801339a:	f7fd fafb 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 801339e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80133a2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80133a6:	4b63      	ldr	r3, [pc, #396]	; (8013534 <_ZN15Screen1ViewBaseC1Ev+0x24a8>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d105      	bne.n	80133ba <_ZN15Screen1ViewBaseC1Ev+0x232e>
 80133ae:	4b62      	ldr	r3, [pc, #392]	; (8013538 <_ZN15Screen1ViewBaseC1Ev+0x24ac>)
 80133b0:	4a62      	ldr	r2, [pc, #392]	; (801353c <_ZN15Screen1ViewBaseC1Ev+0x24b0>)
 80133b2:	21ae      	movs	r1, #174	; 0xae
 80133b4:	4862      	ldr	r0, [pc, #392]	; (8013540 <_ZN15Screen1ViewBaseC1Ev+0x24b4>)
 80133b6:	f01a ff2d 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80133ba:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80133be:	889a      	ldrh	r2, [r3, #4]
 80133c0:	4b60      	ldr	r3, [pc, #384]	; (8013544 <_ZN15Screen1ViewBaseC1Ev+0x24b8>)
 80133c2:	881b      	ldrh	r3, [r3, #0]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d305      	bcc.n	80133d4 <_ZN15Screen1ViewBaseC1Ev+0x2348>
 80133c8:	4b5f      	ldr	r3, [pc, #380]	; (8013548 <_ZN15Screen1ViewBaseC1Ev+0x24bc>)
 80133ca:	4a5c      	ldr	r2, [pc, #368]	; (801353c <_ZN15Screen1ViewBaseC1Ev+0x24b0>)
 80133cc:	21af      	movs	r1, #175	; 0xaf
 80133ce:	485c      	ldr	r0, [pc, #368]	; (8013540 <_ZN15Screen1ViewBaseC1Ev+0x24b4>)
 80133d0:	f01a ff20 	bl	802e214 <__assert_func>
    }
 80133d4:	bf00      	nop
        return texts->getText(typedTextId);
 80133d6:	4b55      	ldr	r3, [pc, #340]	; (801352c <_ZN15Screen1ViewBaseC1Ev+0x24a0>)
 80133d8:	681a      	ldr	r2, [r3, #0]
 80133da:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80133de:	889b      	ldrh	r3, [r3, #4]
 80133e0:	4619      	mov	r1, r3
 80133e2:	4610      	mov	r0, r2
 80133e4:	f001 f9c8 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 80133e8:	4603      	mov	r3, r0
 80133ea:	bf00      	nop
 80133ec:	4a50      	ldr	r2, [pc, #320]	; (8013530 <_ZN15Screen1ViewBaseC1Ev+0x24a4>)
 80133ee:	210a      	movs	r1, #10
 80133f0:	4620      	mov	r0, r4
 80133f2:	f00c f95b 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80133f6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7fc f8ec 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_label.setWildcard(oilp_labelBuffer);
 8013400:	1d3b      	adds	r3, r7, #4
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f203 723c 	addw	r2, r3, #1852	; 0x73c
 8013408:	1d3b      	adds	r3, r7, #4
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f603 5374 	addw	r3, r3, #3444	; 0xd74
 8013410:	4619      	mov	r1, r3
 8013412:	4610      	mov	r0, r2
 8013414:	f7fd fb4c 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_label.resizeToCurrentText();
 8013418:	1d3b      	adds	r3, r7, #4
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013420:	4618      	mov	r0, r3
 8013422:	f006 fee9 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BVOP));
 8013426:	1d3b      	adds	r3, r7, #4
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 801342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013432:	2108      	movs	r1, #8
 8013434:	4618      	mov	r0, r3
 8013436:	f7fd faad 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 801343a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801343e:	4619      	mov	r1, r3
 8013440:	4620      	mov	r0, r4
 8013442:	f006 fef6 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801344a:	4618      	mov	r0, r3
 801344c:	f7fc f8c4 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_units.setXY(230, 377);
 8013450:	1d3b      	adds	r3, r7, #4
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013458:	f240 1279 	movw	r2, #377	; 0x179
 801345c:	21e6      	movs	r1, #230	; 0xe6
 801345e:	4618      	mov	r0, r3
 8013460:	f7fd f84a 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013464:	1d3b      	adds	r3, r7, #4
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 801346c:	23ff      	movs	r3, #255	; 0xff
 801346e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8013472:	23ff      	movs	r3, #255	; 0xff
 8013474:	f887 345e 	strb.w	r3, [r7, #1118]	; 0x45e
 8013478:	23ff      	movs	r3, #255	; 0xff
 801347a:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
 801347e:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8013482:	041b      	lsls	r3, r3, #16
 8013484:	461a      	mov	r2, r3
 8013486:	f897 345e 	ldrb.w	r3, [r7, #1118]	; 0x45e
 801348a:	021b      	lsls	r3, r3, #8
 801348c:	431a      	orrs	r2, r3
 801348e:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 8013492:	4313      	orrs	r3, r2
 8013494:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013498:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801349c:	4611      	mov	r1, r2
 801349e:	4618      	mov	r0, r3
 80134a0:	f7fc ff4e 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 80134a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	461a      	mov	r2, r3
 80134ac:	f8c7 4460 	str.w	r4, [r7, #1120]	; 0x460
 80134b0:	f107 0318 	add.w	r3, r7, #24
 80134b4:	601a      	str	r2, [r3, #0]
        this->color = color;
 80134b6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80134ba:	f107 0218 	add.w	r2, r7, #24
 80134be:	6812      	ldr	r2, [r2, #0]
 80134c0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80134c2:	bf00      	nop
    oilp_units.setLinespacing(0);
 80134c4:	1d3b      	adds	r3, r7, #4
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80134cc:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80134d0:	2300      	movs	r3, #0
 80134d2:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
        linespace = space;
 80134d6:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80134da:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 80134de:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80134e0:	bf00      	nop
    Unicode::snprintf(oilp_unitsBuffer, OILP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9IGG).getText());
 80134e2:	1d3b      	adds	r3, r7, #4
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f603 5488 	addw	r4, r3, #3464	; 0xd88
 80134ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80134ee:	212a      	movs	r1, #42	; 0x2a
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7fd fa4f 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80134f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80134fa:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80134fe:	4b0d      	ldr	r3, [pc, #52]	; (8013534 <_ZN15Screen1ViewBaseC1Ev+0x24a8>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d105      	bne.n	8013512 <_ZN15Screen1ViewBaseC1Ev+0x2486>
 8013506:	4b0c      	ldr	r3, [pc, #48]	; (8013538 <_ZN15Screen1ViewBaseC1Ev+0x24ac>)
 8013508:	4a0c      	ldr	r2, [pc, #48]	; (801353c <_ZN15Screen1ViewBaseC1Ev+0x24b0>)
 801350a:	21ae      	movs	r1, #174	; 0xae
 801350c:	480c      	ldr	r0, [pc, #48]	; (8013540 <_ZN15Screen1ViewBaseC1Ev+0x24b4>)
 801350e:	f01a fe81 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013512:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8013516:	889a      	ldrh	r2, [r3, #4]
 8013518:	4b0a      	ldr	r3, [pc, #40]	; (8013544 <_ZN15Screen1ViewBaseC1Ev+0x24b8>)
 801351a:	881b      	ldrh	r3, [r3, #0]
 801351c:	429a      	cmp	r2, r3
 801351e:	d315      	bcc.n	801354c <_ZN15Screen1ViewBaseC1Ev+0x24c0>
 8013520:	4b09      	ldr	r3, [pc, #36]	; (8013548 <_ZN15Screen1ViewBaseC1Ev+0x24bc>)
 8013522:	4a06      	ldr	r2, [pc, #24]	; (801353c <_ZN15Screen1ViewBaseC1Ev+0x24b0>)
 8013524:	21af      	movs	r1, #175	; 0xaf
 8013526:	4806      	ldr	r0, [pc, #24]	; (8013540 <_ZN15Screen1ViewBaseC1Ev+0x24b4>)
 8013528:	f01a fe74 	bl	802e214 <__assert_func>
 801352c:	2000987c 	.word	0x2000987c
 8013530:	0802f900 	.word	0x0802f900
 8013534:	20009870 	.word	0x20009870
 8013538:	0802f7f4 	.word	0x0802f7f4
 801353c:	0802f838 	.word	0x0802f838
 8013540:	0802f868 	.word	0x0802f868
 8013544:	20009874 	.word	0x20009874
 8013548:	0802f8ac 	.word	0x0802f8ac
    }
 801354c:	bf00      	nop
        return texts->getText(typedTextId);
 801354e:	4bab      	ldr	r3, [pc, #684]	; (80137fc <_ZN15Screen1ViewBaseC1Ev+0x2770>)
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013556:	889b      	ldrh	r3, [r3, #4]
 8013558:	4619      	mov	r1, r3
 801355a:	4610      	mov	r0, r2
 801355c:	f001 f90c 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8013560:	4603      	mov	r3, r0
 8013562:	bf00      	nop
 8013564:	4aa6      	ldr	r2, [pc, #664]	; (8013800 <_ZN15Screen1ViewBaseC1Ev+0x2774>)
 8013566:	210a      	movs	r1, #10
 8013568:	4620      	mov	r0, r4
 801356a:	f00c f89f 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801356e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013572:	4618      	mov	r0, r3
 8013574:	f7fc f830 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_units.setWildcard(oilp_unitsBuffer);
 8013578:	1d3b      	adds	r3, r7, #4
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f203 727c 	addw	r2, r3, #1916	; 0x77c
 8013580:	1d3b      	adds	r3, r7, #4
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f603 5388 	addw	r3, r3, #3464	; 0xd88
 8013588:	4619      	mov	r1, r3
 801358a:	4610      	mov	r0, r2
 801358c:	f7fd fa90 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_units.resizeToCurrentText();
 8013590:	1d3b      	adds	r3, r7, #4
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013598:	4618      	mov	r0, r3
 801359a:	f006 fe2d 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_R7A4));
 801359e:	1d3b      	adds	r3, r7, #4
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 80135a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80135aa:	2107      	movs	r1, #7
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7fd f9f1 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80135b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80135b6:	4619      	mov	r1, r3
 80135b8:	4620      	mov	r0, r4
 80135ba:	f006 fe3a 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80135be:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7fc f808 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_value.setXY(137, 428);
 80135c8:	1d3b      	adds	r3, r7, #4
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80135d0:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80135d4:	2189      	movs	r1, #137	; 0x89
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7fc ff8e 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80135dc:	1d3b      	adds	r3, r7, #4
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 80135e4:	23ff      	movs	r3, #255	; 0xff
 80135e6:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
 80135ea:	23ff      	movs	r3, #255	; 0xff
 80135ec:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
 80135f0:	23ff      	movs	r3, #255	; 0xff
 80135f2:	f887 3471 	strb.w	r3, [r7, #1137]	; 0x471
 80135f6:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80135fa:	041b      	lsls	r3, r3, #16
 80135fc:	461a      	mov	r2, r3
 80135fe:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 8013602:	021b      	lsls	r3, r3, #8
 8013604:	431a      	orrs	r2, r3
 8013606:	f897 3471 	ldrb.w	r3, [r7, #1137]	; 0x471
 801360a:	4313      	orrs	r3, r2
 801360c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013610:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8013614:	4611      	mov	r1, r2
 8013616:	4618      	mov	r0, r3
 8013618:	f7fc fe92 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 801361c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	461a      	mov	r2, r3
 8013624:	f8c7 4474 	str.w	r4, [r7, #1140]	; 0x474
 8013628:	f107 0314 	add.w	r3, r7, #20
 801362c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801362e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013632:	f107 0214 	add.w	r2, r7, #20
 8013636:	6812      	ldr	r2, [r2, #0]
 8013638:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801363a:	bf00      	nop
    fuelp_value.setLinespacing(0);
 801363c:	1d3b      	adds	r3, r7, #4
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013644:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8013648:	2300      	movs	r3, #0
 801364a:	f8a7 347a 	strh.w	r3, [r7, #1146]	; 0x47a
        linespace = space;
 801364e:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8013652:	f8b7 247a 	ldrh.w	r2, [r7, #1146]	; 0x47a
 8013656:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013658:	bf00      	nop
    Unicode::snprintf(fuelp_valueBuffer, FUELP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_C87O).getText());
 801365a:	1d3b      	adds	r3, r7, #4
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	f603 549c 	addw	r4, r3, #3484	; 0xd9c
 8013662:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013666:	211e      	movs	r1, #30
 8013668:	4618      	mov	r0, r3
 801366a:	f7fd f993 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 801366e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013672:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013676:	4b63      	ldr	r3, [pc, #396]	; (8013804 <_ZN15Screen1ViewBaseC1Ev+0x2778>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d105      	bne.n	801368a <_ZN15Screen1ViewBaseC1Ev+0x25fe>
 801367e:	4b62      	ldr	r3, [pc, #392]	; (8013808 <_ZN15Screen1ViewBaseC1Ev+0x277c>)
 8013680:	4a62      	ldr	r2, [pc, #392]	; (801380c <_ZN15Screen1ViewBaseC1Ev+0x2780>)
 8013682:	21ae      	movs	r1, #174	; 0xae
 8013684:	4862      	ldr	r0, [pc, #392]	; (8013810 <_ZN15Screen1ViewBaseC1Ev+0x2784>)
 8013686:	f01a fdc5 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801368a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 801368e:	889a      	ldrh	r2, [r3, #4]
 8013690:	4b60      	ldr	r3, [pc, #384]	; (8013814 <_ZN15Screen1ViewBaseC1Ev+0x2788>)
 8013692:	881b      	ldrh	r3, [r3, #0]
 8013694:	429a      	cmp	r2, r3
 8013696:	d305      	bcc.n	80136a4 <_ZN15Screen1ViewBaseC1Ev+0x2618>
 8013698:	4b5f      	ldr	r3, [pc, #380]	; (8013818 <_ZN15Screen1ViewBaseC1Ev+0x278c>)
 801369a:	4a5c      	ldr	r2, [pc, #368]	; (801380c <_ZN15Screen1ViewBaseC1Ev+0x2780>)
 801369c:	21af      	movs	r1, #175	; 0xaf
 801369e:	485c      	ldr	r0, [pc, #368]	; (8013810 <_ZN15Screen1ViewBaseC1Ev+0x2784>)
 80136a0:	f01a fdb8 	bl	802e214 <__assert_func>
    }
 80136a4:	bf00      	nop
        return texts->getText(typedTextId);
 80136a6:	4b55      	ldr	r3, [pc, #340]	; (80137fc <_ZN15Screen1ViewBaseC1Ev+0x2770>)
 80136a8:	681a      	ldr	r2, [r3, #0]
 80136aa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80136ae:	889b      	ldrh	r3, [r3, #4]
 80136b0:	4619      	mov	r1, r3
 80136b2:	4610      	mov	r0, r2
 80136b4:	f001 f860 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 80136b8:	4603      	mov	r3, r0
 80136ba:	bf00      	nop
 80136bc:	4a50      	ldr	r2, [pc, #320]	; (8013800 <_ZN15Screen1ViewBaseC1Ev+0x2774>)
 80136be:	2120      	movs	r1, #32
 80136c0:	4620      	mov	r0, r4
 80136c2:	f00b fff3 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80136c6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7fb ff84 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_value.setWildcard(fuelp_valueBuffer);
 80136d0:	1d3b      	adds	r3, r7, #4
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 80136d8:	1d3b      	adds	r3, r7, #4
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f603 539c 	addw	r3, r3, #3484	; 0xd9c
 80136e0:	4619      	mov	r1, r3
 80136e2:	4610      	mov	r0, r2
 80136e4:	f7fd f9e4 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_value.resizeToCurrentText();
 80136e8:	1d3b      	adds	r3, r7, #4
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80136f0:	4618      	mov	r0, r3
 80136f2:	f006 fd81 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0AFA));
 80136f6:	1d3b      	adds	r3, r7, #4
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 80136fe:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8013702:	2109      	movs	r1, #9
 8013704:	4618      	mov	r0, r3
 8013706:	f7fd f945 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 801370a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801370e:	4619      	mov	r1, r3
 8013710:	4620      	mov	r0, r4
 8013712:	f006 fd8e 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013716:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801371a:	4618      	mov	r0, r3
 801371c:	f7fb ff5c 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_label.setXY(140, 497);
 8013720:	1d3b      	adds	r3, r7, #4
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8013728:	f240 12f1 	movw	r2, #497	; 0x1f1
 801372c:	218c      	movs	r1, #140	; 0x8c
 801372e:	4618      	mov	r0, r3
 8013730:	f7fc fee2 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013734:	1d3b      	adds	r3, r7, #4
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f203 74fc 	addw	r4, r3, #2044	; 0x7fc
 801373c:	23ff      	movs	r3, #255	; 0xff
 801373e:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
 8013742:	23ff      	movs	r3, #255	; 0xff
 8013744:	f887 3486 	strb.w	r3, [r7, #1158]	; 0x486
 8013748:	23ff      	movs	r3, #255	; 0xff
 801374a:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
 801374e:	f897 3487 	ldrb.w	r3, [r7, #1159]	; 0x487
 8013752:	041b      	lsls	r3, r3, #16
 8013754:	461a      	mov	r2, r3
 8013756:	f897 3486 	ldrb.w	r3, [r7, #1158]	; 0x486
 801375a:	021b      	lsls	r3, r3, #8
 801375c:	431a      	orrs	r2, r3
 801375e:	f897 3485 	ldrb.w	r3, [r7, #1157]	; 0x485
 8013762:	4313      	orrs	r3, r2
 8013764:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013768:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801376c:	4611      	mov	r1, r2
 801376e:	4618      	mov	r0, r3
 8013770:	f7fc fde6 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8013774:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	461a      	mov	r2, r3
 801377c:	f8c7 4488 	str.w	r4, [r7, #1160]	; 0x488
 8013780:	f107 0310 	add.w	r3, r7, #16
 8013784:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013786:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 801378a:	f107 0210 	add.w	r2, r7, #16
 801378e:	6812      	ldr	r2, [r2, #0]
 8013790:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013792:	bf00      	nop
    fuelp_label.setLinespacing(0);
 8013794:	1d3b      	adds	r3, r7, #4
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 801379c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 80137a0:	2300      	movs	r3, #0
 80137a2:	f8a7 348e 	strh.w	r3, [r7, #1166]	; 0x48e
        linespace = space;
 80137a6:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80137aa:	f8b7 248e 	ldrh.w	r2, [r7, #1166]	; 0x48e
 80137ae:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80137b0:	bf00      	nop
    Unicode::snprintf(fuelp_labelBuffer, FUELP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4VJ9).getText());
 80137b2:	1d3b      	adds	r3, r7, #4
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f603 54dc 	addw	r4, r3, #3548	; 0xddc
 80137ba:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80137be:	2129      	movs	r1, #41	; 0x29
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7fd f8e7 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80137c6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80137ca:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80137ce:	4b0d      	ldr	r3, [pc, #52]	; (8013804 <_ZN15Screen1ViewBaseC1Ev+0x2778>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d105      	bne.n	80137e2 <_ZN15Screen1ViewBaseC1Ev+0x2756>
 80137d6:	4b0c      	ldr	r3, [pc, #48]	; (8013808 <_ZN15Screen1ViewBaseC1Ev+0x277c>)
 80137d8:	4a0c      	ldr	r2, [pc, #48]	; (801380c <_ZN15Screen1ViewBaseC1Ev+0x2780>)
 80137da:	21ae      	movs	r1, #174	; 0xae
 80137dc:	480c      	ldr	r0, [pc, #48]	; (8013810 <_ZN15Screen1ViewBaseC1Ev+0x2784>)
 80137de:	f01a fd19 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80137e2:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80137e6:	889a      	ldrh	r2, [r3, #4]
 80137e8:	4b0a      	ldr	r3, [pc, #40]	; (8013814 <_ZN15Screen1ViewBaseC1Ev+0x2788>)
 80137ea:	881b      	ldrh	r3, [r3, #0]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d315      	bcc.n	801381c <_ZN15Screen1ViewBaseC1Ev+0x2790>
 80137f0:	4b09      	ldr	r3, [pc, #36]	; (8013818 <_ZN15Screen1ViewBaseC1Ev+0x278c>)
 80137f2:	4a06      	ldr	r2, [pc, #24]	; (801380c <_ZN15Screen1ViewBaseC1Ev+0x2780>)
 80137f4:	21af      	movs	r1, #175	; 0xaf
 80137f6:	4806      	ldr	r0, [pc, #24]	; (8013810 <_ZN15Screen1ViewBaseC1Ev+0x2784>)
 80137f8:	f01a fd0c 	bl	802e214 <__assert_func>
 80137fc:	2000987c 	.word	0x2000987c
 8013800:	0802f900 	.word	0x0802f900
 8013804:	20009870 	.word	0x20009870
 8013808:	0802f7f4 	.word	0x0802f7f4
 801380c:	0802f838 	.word	0x0802f838
 8013810:	0802f868 	.word	0x0802f868
 8013814:	20009874 	.word	0x20009874
 8013818:	0802f8ac 	.word	0x0802f8ac
    }
 801381c:	bf00      	nop
        return texts->getText(typedTextId);
 801381e:	4b56      	ldr	r3, [pc, #344]	; (8013978 <_ZN15Screen1ViewBaseC1Ev+0x28ec>)
 8013820:	681a      	ldr	r2, [r3, #0]
 8013822:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013826:	889b      	ldrh	r3, [r3, #4]
 8013828:	4619      	mov	r1, r3
 801382a:	4610      	mov	r0, r2
 801382c:	f000 ffa4 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8013830:	4603      	mov	r3, r0
 8013832:	bf00      	nop
 8013834:	4a51      	ldr	r2, [pc, #324]	; (801397c <_ZN15Screen1ViewBaseC1Ev+0x28f0>)
 8013836:	210a      	movs	r1, #10
 8013838:	4620      	mov	r0, r4
 801383a:	f00b ff37 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801383e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013842:	4618      	mov	r0, r3
 8013844:	f7fb fec8 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_label.setWildcard(fuelp_labelBuffer);
 8013848:	1d3b      	adds	r3, r7, #4
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	f203 72fc 	addw	r2, r3, #2044	; 0x7fc
 8013850:	1d3b      	adds	r3, r7, #4
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8013858:	4619      	mov	r1, r3
 801385a:	4610      	mov	r0, r2
 801385c:	f7fd f928 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_label.resizeToCurrentText();
 8013860:	1d3b      	adds	r3, r7, #4
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8013868:	4618      	mov	r0, r3
 801386a:	f006 fcc5 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MPLH));
 801386e:	1d3b      	adds	r3, r7, #4
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f203 74fc 	addw	r4, r3, #2044	; 0x7fc
 8013876:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801387a:	210b      	movs	r1, #11
 801387c:	4618      	mov	r0, r3
 801387e:	f7fd f889 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8013882:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8013886:	4619      	mov	r1, r3
 8013888:	4620      	mov	r0, r4
 801388a:	f006 fcd2 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801388e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8013892:	4618      	mov	r0, r3
 8013894:	f7fb fea0 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_units.setXY(304, 497);
 8013898:	1d3b      	adds	r3, r7, #4
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80138a0:	f240 12f1 	movw	r2, #497	; 0x1f1
 80138a4:	f44f 7198 	mov.w	r1, #304	; 0x130
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7fc fe25 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80138ae:	1d3b      	adds	r3, r7, #4
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f603 043c 	addw	r4, r3, #2108	; 0x83c
 80138b6:	23ff      	movs	r3, #255	; 0xff
 80138b8:	f887 349b 	strb.w	r3, [r7, #1179]	; 0x49b
 80138bc:	23ff      	movs	r3, #255	; 0xff
 80138be:	f887 349a 	strb.w	r3, [r7, #1178]	; 0x49a
 80138c2:	23ff      	movs	r3, #255	; 0xff
 80138c4:	f887 3499 	strb.w	r3, [r7, #1177]	; 0x499
 80138c8:	f897 349b 	ldrb.w	r3, [r7, #1179]	; 0x49b
 80138cc:	041b      	lsls	r3, r3, #16
 80138ce:	461a      	mov	r2, r3
 80138d0:	f897 349a 	ldrb.w	r3, [r7, #1178]	; 0x49a
 80138d4:	021b      	lsls	r3, r3, #8
 80138d6:	431a      	orrs	r2, r3
 80138d8:	f897 3499 	ldrb.w	r3, [r7, #1177]	; 0x499
 80138dc:	4313      	orrs	r3, r2
 80138de:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80138e2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80138e6:	4611      	mov	r1, r2
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fc fd29 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 80138ee:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	461a      	mov	r2, r3
 80138f6:	f8c7 449c 	str.w	r4, [r7, #1180]	; 0x49c
 80138fa:	f107 030c 	add.w	r3, r7, #12
 80138fe:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013900:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8013904:	f107 020c 	add.w	r2, r7, #12
 8013908:	6812      	ldr	r2, [r2, #0]
 801390a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801390c:	bf00      	nop
    fuelp_units.setLinespacing(0);
 801390e:	1d3b      	adds	r3, r7, #4
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013916:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 801391a:	2300      	movs	r3, #0
 801391c:	f8a7 34a2 	strh.w	r3, [r7, #1186]	; 0x4a2
        linespace = space;
 8013920:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	; 0x4a4
 8013924:	f8b7 24a2 	ldrh.w	r2, [r7, #1186]	; 0x4a2
 8013928:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801392a:	bf00      	nop
    Unicode::snprintf(fuelp_unitsBuffer, FUELP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L52U).getText());
 801392c:	1d3b      	adds	r3, r7, #4
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	f503 645f 	add.w	r4, r3, #3568	; 0xdf0
 8013934:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8013938:	2128      	movs	r1, #40	; 0x28
 801393a:	4618      	mov	r0, r3
 801393c:	f7fd f82a 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 8013940:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8013944:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013948:	4b0d      	ldr	r3, [pc, #52]	; (8013980 <_ZN15Screen1ViewBaseC1Ev+0x28f4>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d105      	bne.n	801395c <_ZN15Screen1ViewBaseC1Ev+0x28d0>
 8013950:	4b0c      	ldr	r3, [pc, #48]	; (8013984 <_ZN15Screen1ViewBaseC1Ev+0x28f8>)
 8013952:	4a0d      	ldr	r2, [pc, #52]	; (8013988 <_ZN15Screen1ViewBaseC1Ev+0x28fc>)
 8013954:	21ae      	movs	r1, #174	; 0xae
 8013956:	480d      	ldr	r0, [pc, #52]	; (801398c <_ZN15Screen1ViewBaseC1Ev+0x2900>)
 8013958:	f01a fc5c 	bl	802e214 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801395c:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8013960:	889a      	ldrh	r2, [r3, #4]
 8013962:	4b0b      	ldr	r3, [pc, #44]	; (8013990 <_ZN15Screen1ViewBaseC1Ev+0x2904>)
 8013964:	881b      	ldrh	r3, [r3, #0]
 8013966:	429a      	cmp	r2, r3
 8013968:	d316      	bcc.n	8013998 <_ZN15Screen1ViewBaseC1Ev+0x290c>
 801396a:	4b0a      	ldr	r3, [pc, #40]	; (8013994 <_ZN15Screen1ViewBaseC1Ev+0x2908>)
 801396c:	4a06      	ldr	r2, [pc, #24]	; (8013988 <_ZN15Screen1ViewBaseC1Ev+0x28fc>)
 801396e:	21af      	movs	r1, #175	; 0xaf
 8013970:	4806      	ldr	r0, [pc, #24]	; (801398c <_ZN15Screen1ViewBaseC1Ev+0x2900>)
 8013972:	f01a fc4f 	bl	802e214 <__assert_func>
 8013976:	bf00      	nop
 8013978:	2000987c 	.word	0x2000987c
 801397c:	0802f900 	.word	0x0802f900
 8013980:	20009870 	.word	0x20009870
 8013984:	0802f7f4 	.word	0x0802f7f4
 8013988:	0802f838 	.word	0x0802f838
 801398c:	0802f868 	.word	0x0802f868
 8013990:	20009874 	.word	0x20009874
 8013994:	0802f8ac 	.word	0x0802f8ac
    }
 8013998:	bf00      	nop
        return texts->getText(typedTextId);
 801399a:	4be2      	ldr	r3, [pc, #904]	; (8013d24 <_ZN15Screen1ViewBaseC1Ev+0x2c98>)
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80139a2:	889b      	ldrh	r3, [r3, #4]
 80139a4:	4619      	mov	r1, r3
 80139a6:	4610      	mov	r0, r2
 80139a8:	f000 fee6 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 80139ac:	4603      	mov	r3, r0
 80139ae:	bf00      	nop
 80139b0:	4add      	ldr	r2, [pc, #884]	; (8013d28 <_ZN15Screen1ViewBaseC1Ev+0x2c9c>)
 80139b2:	210a      	movs	r1, #10
 80139b4:	4620      	mov	r0, r4
 80139b6:	f00b fe79 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80139ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80139be:	4618      	mov	r0, r3
 80139c0:	f7fb fe0a 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_units.setWildcard(fuelp_unitsBuffer);
 80139c4:	1d3b      	adds	r3, r7, #4
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f603 023c 	addw	r2, r3, #2108	; 0x83c
 80139cc:	1d3b      	adds	r3, r7, #4
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	f503 635f 	add.w	r3, r3, #3568	; 0xdf0
 80139d4:	4619      	mov	r1, r3
 80139d6:	4610      	mov	r0, r2
 80139d8:	f7fd f86a 	bl	8010ab0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_units.resizeToCurrentText();
 80139dc:	1d3b      	adds	r3, r7, #4
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80139e4:	4618      	mov	r0, r3
 80139e6:	f006 fc07 	bl	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_INAE));
 80139ea:	1d3b      	adds	r3, r7, #4
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	f603 043c 	addw	r4, r3, #2108	; 0x83c
 80139f2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80139f6:	210a      	movs	r1, #10
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7fc ffcb 	bl	8010994 <_ZN8touchgfx9TypedTextC1Et>
 80139fe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8013a02:	4619      	mov	r1, r3
 8013a04:	4620      	mov	r0, r4
 8013a06:	f006 fc14 	bl	801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013a0a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7fb fde2 	bl	800f5d8 <_ZN8touchgfx9TypedTextD1Ev>

    gauge1.setPosition(285, 60, 480, 480);
 8013a14:	1d3b      	adds	r3, r7, #4
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013a1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013a20:	9300      	str	r3, [sp, #0]
 8013a22:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013a26:	223c      	movs	r2, #60	; 0x3c
 8013a28:	f240 111d 	movw	r1, #285	; 0x11d
 8013a2c:	f7fc fd25 	bl	801047a <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(240, 236);
 8013a30:	1d3b      	adds	r3, r7, #4
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013a38:	22ec      	movs	r2, #236	; 0xec
 8013a3a:	21f0      	movs	r1, #240	; 0xf0
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f006 fd98 	bl	801a572 <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(0, 240);
 8013a42:	1d3b      	adds	r3, r7, #4
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013a4a:	22f0      	movs	r2, #240	; 0xf0
 8013a4c:	2100      	movs	r1, #0
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f006 fe14 	bl	801a67c <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 8000);
 8013a54:	1d3b      	adds	r3, r7, #4
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	9300      	str	r3, [sp, #0]
 8013a60:	2300      	movs	r3, #0
 8013a62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013a66:	2100      	movs	r1, #0
 8013a68:	f003 fb9e 	bl	80171a8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(0);
 8013a6c:	1d3b      	adds	r3, r7, #4
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013a74:	2100      	movs	r1, #0
 8013a76:	4618      	mov	r0, r3
 8013a78:	f006 fdaa 	bl	801a5d0 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_NEEDEL_ID, 13, 13);
 8013a7c:	1d3b      	adds	r3, r7, #4
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013a84:	230d      	movs	r3, #13
 8013a86:	220d      	movs	r2, #13
 8013a88:	210d      	movs	r1, #13
 8013a8a:	f006 fd5d 	bl	801a548 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8013a8e:	1d3b      	adds	r3, r7, #4
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013a96:	2101      	movs	r1, #1
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f006 fcf7 	bl	801a48c <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
 8013a9e:	1d3b      	adds	r3, r7, #4
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013aa6:	2100      	movs	r1, #0
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f006 fcf2 	bl	801a492 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    image2.setXY(635, 259);
 8013aae:	1d3b      	adds	r3, r7, #4
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013ab6:	f240 1203 	movw	r2, #259	; 0x103
 8013aba:	f240 217b 	movw	r1, #635	; 0x27b
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fc fd1a 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDUINO1_ID));
 8013ac4:	1d3b      	adds	r3, r7, #4
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8013acc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8013ad0:	2110      	movs	r1, #16
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7fc fc66 	bl	80103a4 <_ZN8touchgfx6BitmapC1Et>
 8013ad8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8013adc:	4619      	mov	r1, r3
 8013ade:	4620      	mov	r0, r4
 8013ae0:	f006 ff71 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    flexButton1.setBoxWithBorderPosition(0, 0, 173, 480);
 8013ae4:	1d3b      	adds	r3, r7, #4
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f603 204c 	addw	r0, r3, #2636	; 0xa4c
 8013aec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013af0:	9300      	str	r3, [sp, #0]
 8013af2:	23ad      	movs	r3, #173	; 0xad
 8013af4:	2200      	movs	r2, #0
 8013af6:	2100      	movs	r1, #0
 8013af8:	f000 faf4 	bl	80140e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton1.setBorderSize(5);
 8013afc:	1d3b      	adds	r3, r7, #4
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	f603 234c 	addw	r3, r3, #2636	; 0xa4c
 8013b04:	2105      	movs	r1, #5
 8013b06:	4618      	mov	r0, r3
 8013b08:	f000 fb0c 	bl	8014124 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8013b0c:	1d3b      	adds	r3, r7, #4
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	f603 244c 	addw	r4, r3, #2636	; 0xa4c
 8013b14:	2300      	movs	r3, #0
 8013b16:	f887 34ae 	strb.w	r3, [r7, #1198]	; 0x4ae
 8013b1a:	2366      	movs	r3, #102	; 0x66
 8013b1c:	f887 34ad 	strb.w	r3, [r7, #1197]	; 0x4ad
 8013b20:	2399      	movs	r3, #153	; 0x99
 8013b22:	f887 34ac 	strb.w	r3, [r7, #1196]	; 0x4ac
 8013b26:	f897 34ae 	ldrb.w	r3, [r7, #1198]	; 0x4ae
 8013b2a:	041b      	lsls	r3, r3, #16
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	f897 34ad 	ldrb.w	r3, [r7, #1197]	; 0x4ad
 8013b32:	021b      	lsls	r3, r3, #8
 8013b34:	431a      	orrs	r2, r3
 8013b36:	f897 34ac 	ldrb.w	r3, [r7, #1196]	; 0x4ac
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013b40:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8013b44:	4611      	mov	r1, r2
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fc fbfa 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8013b4c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	461d      	mov	r5, r3
 8013b54:	2300      	movs	r3, #0
 8013b56:	f887 34b1 	strb.w	r3, [r7, #1201]	; 0x4b1
 8013b5a:	2399      	movs	r3, #153	; 0x99
 8013b5c:	f887 34b0 	strb.w	r3, [r7, #1200]	; 0x4b0
 8013b60:	23cc      	movs	r3, #204	; 0xcc
 8013b62:	f887 34af 	strb.w	r3, [r7, #1199]	; 0x4af
 8013b66:	f897 34b1 	ldrb.w	r3, [r7, #1201]	; 0x4b1
 8013b6a:	041b      	lsls	r3, r3, #16
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	f897 34b0 	ldrb.w	r3, [r7, #1200]	; 0x4b0
 8013b72:	021b      	lsls	r3, r3, #8
 8013b74:	431a      	orrs	r2, r3
 8013b76:	f897 34af 	ldrb.w	r3, [r7, #1199]	; 0x4af
 8013b7a:	4313      	orrs	r3, r2
 8013b7c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013b80:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8013b84:	4611      	mov	r1, r2
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7fc fbda 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8013b8c:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	461e      	mov	r6, r3
 8013b94:	2300      	movs	r3, #0
 8013b96:	f887 34b4 	strb.w	r3, [r7, #1204]	; 0x4b4
 8013b9a:	2333      	movs	r3, #51	; 0x33
 8013b9c:	f887 34b3 	strb.w	r3, [r7, #1203]	; 0x4b3
 8013ba0:	2366      	movs	r3, #102	; 0x66
 8013ba2:	f887 34b2 	strb.w	r3, [r7, #1202]	; 0x4b2
 8013ba6:	f897 34b4 	ldrb.w	r3, [r7, #1204]	; 0x4b4
 8013baa:	041b      	lsls	r3, r3, #16
 8013bac:	461a      	mov	r2, r3
 8013bae:	f897 34b3 	ldrb.w	r3, [r7, #1203]	; 0x4b3
 8013bb2:	021b      	lsls	r3, r3, #8
 8013bb4:	431a      	orrs	r2, r3
 8013bb6:	f897 34b2 	ldrb.w	r3, [r7, #1202]	; 0x4b2
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8013bc4:	4611      	mov	r1, r2
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7fc fbba 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8013bcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	4698      	mov	r8, r3
 8013bd4:	2333      	movs	r3, #51	; 0x33
 8013bd6:	f887 34b7 	strb.w	r3, [r7, #1207]	; 0x4b7
 8013bda:	2366      	movs	r3, #102	; 0x66
 8013bdc:	f887 34b6 	strb.w	r3, [r7, #1206]	; 0x4b6
 8013be0:	2399      	movs	r3, #153	; 0x99
 8013be2:	f887 34b5 	strb.w	r3, [r7, #1205]	; 0x4b5
 8013be6:	f897 34b7 	ldrb.w	r3, [r7, #1207]	; 0x4b7
 8013bea:	041b      	lsls	r3, r3, #16
 8013bec:	461a      	mov	r2, r3
 8013bee:	f897 34b6 	ldrb.w	r3, [r7, #1206]	; 0x4b6
 8013bf2:	021b      	lsls	r3, r3, #8
 8013bf4:	431a      	orrs	r2, r3
 8013bf6:	f897 34b5 	ldrb.w	r3, [r7, #1205]	; 0x4b5
 8013bfa:	4313      	orrs	r3, r2
 8013bfc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013c00:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8013c04:	4611      	mov	r1, r2
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7fc fb9a 	bl	8010340 <_ZN8touchgfx9colortypeC1Em>
 8013c0c:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	4643      	mov	r3, r8
 8013c16:	4632      	mov	r2, r6
 8013c18:	4629      	mov	r1, r5
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	f000 fa94 	bl	8014148 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton1.setPosition(112, 60, 173, 480);
 8013c20:	1d3b      	adds	r3, r7, #4
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	f603 204c 	addw	r0, r3, #2636	; 0xa4c
 8013c28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013c2c:	9300      	str	r3, [sp, #0]
 8013c2e:	23ad      	movs	r3, #173	; 0xad
 8013c30:	223c      	movs	r2, #60	; 0x3c
 8013c32:	2170      	movs	r1, #112	; 0x70
 8013c34:	f7fc fc21 	bl	801047a <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton1.setAlpha(0);
 8013c38:	1d3b      	adds	r3, r7, #4
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f603 234c 	addw	r3, r3, #2636	; 0xa4c
 8013c40:	2100      	movs	r1, #0
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fc ffa7 	bl	8010b96 <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>

    add(__background);
 8013c48:	1d3b      	adds	r3, r7, #4
 8013c4a:	681a      	ldr	r2, [r3, #0]
 8013c4c:	1d3b      	adds	r3, r7, #4
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	3340      	adds	r3, #64	; 0x40
 8013c52:	4619      	mov	r1, r3
 8013c54:	4610      	mov	r0, r2
 8013c56:	f7fc fdcf 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8013c5a:	1d3b      	adds	r3, r7, #4
 8013c5c:	681a      	ldr	r2, [r3, #0]
 8013c5e:	1d3b      	adds	r3, r7, #4
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	336c      	adds	r3, #108	; 0x6c
 8013c64:	4619      	mov	r1, r3
 8013c66:	4610      	mov	r0, r2
 8013c68:	f7fc fdc6 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8013c6c:	1d3b      	adds	r3, r7, #4
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	1d3b      	adds	r3, r7, #4
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	3398      	adds	r3, #152	; 0x98
 8013c76:	4619      	mov	r1, r3
 8013c78:	4610      	mov	r0, r2
 8013c7a:	f7fc fdbd 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLeft);
 8013c7e:	1d3b      	adds	r3, r7, #4
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	1d3b      	adds	r3, r7, #4
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	33c4      	adds	r3, #196	; 0xc4
 8013c88:	4619      	mov	r1, r3
 8013c8a:	4610      	mov	r0, r2
 8013c8c:	f7fc fdb4 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indRight);
 8013c90:	1d3b      	adds	r3, r7, #4
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	1d3b      	adds	r3, r7, #4
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	33f0      	adds	r3, #240	; 0xf0
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	4610      	mov	r0, r2
 8013c9e:	f7fc fdab 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indHigh);
 8013ca2:	1d3b      	adds	r3, r7, #4
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	1d3b      	adds	r3, r7, #4
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013cae:	4619      	mov	r1, r3
 8013cb0:	4610      	mov	r0, r2
 8013cb2:	f7fc fda1 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indFuel);
 8013cb6:	1d3b      	adds	r3, r7, #4
 8013cb8:	681a      	ldr	r2, [r3, #0]
 8013cba:	1d3b      	adds	r3, r7, #4
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	4610      	mov	r0, r2
 8013cc6:	f7fc fd97 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indOil);
 8013cca:	1d3b      	adds	r3, r7, #4
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	1d3b      	adds	r3, r7, #4
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	4610      	mov	r0, r2
 8013cda:	f7fc fd8d 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indBatt);
 8013cde:	1d3b      	adds	r3, r7, #4
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	1d3b      	adds	r3, r7, #4
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8013cea:	4619      	mov	r1, r3
 8013cec:	4610      	mov	r0, r2
 8013cee:	f7fc fd83 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indPark);
 8013cf2:	1d3b      	adds	r3, r7, #4
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	1d3b      	adds	r3, r7, #4
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013cfe:	4619      	mov	r1, r3
 8013d00:	4610      	mov	r0, r2
 8013d02:	f7fc fd79 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indDTC);
 8013d06:	1d3b      	adds	r3, r7, #4
 8013d08:	681a      	ldr	r2, [r3, #0]
 8013d0a:	1d3b      	adds	r3, r7, #4
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013d12:	4619      	mov	r1, r3
 8013d14:	4610      	mov	r0, r2
 8013d16:	f7fc fd6f 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indECT);
 8013d1a:	1d3b      	adds	r3, r7, #4
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	1d3b      	adds	r3, r7, #4
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	e003      	b.n	8013d2c <_ZN15Screen1ViewBaseC1Ev+0x2ca0>
 8013d24:	2000987c 	.word	0x2000987c
 8013d28:	0802f900 	.word	0x0802f900
 8013d2c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8013d30:	4619      	mov	r1, r3
 8013d32:	4610      	mov	r0, r2
 8013d34:	f7fc fd60 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLow);
 8013d38:	1d3b      	adds	r3, r7, #4
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	1d3b      	adds	r3, r7, #4
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8013d44:	4619      	mov	r1, r3
 8013d46:	4610      	mov	r0, r2
 8013d48:	f7fc fd56 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_value);
 8013d4c:	1d3b      	adds	r3, r7, #4
 8013d4e:	681a      	ldr	r2, [r3, #0]
 8013d50:	1d3b      	adds	r3, r7, #4
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8013d58:	4619      	mov	r1, r3
 8013d5a:	4610      	mov	r0, r2
 8013d5c:	f7fc fd4c 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_label);
 8013d60:	1d3b      	adds	r3, r7, #4
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	1d3b      	adds	r3, r7, #4
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	4610      	mov	r0, r2
 8013d70:	f7fc fd42 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_units);
 8013d74:	1d3b      	adds	r3, r7, #4
 8013d76:	681a      	ldr	r2, [r3, #0]
 8013d78:	1d3b      	adds	r3, r7, #4
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8013d80:	4619      	mov	r1, r3
 8013d82:	4610      	mov	r0, r2
 8013d84:	f7fc fd38 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_value);
 8013d88:	1d3b      	adds	r3, r7, #4
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	1d3b      	adds	r3, r7, #4
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8013d94:	4619      	mov	r1, r3
 8013d96:	4610      	mov	r0, r2
 8013d98:	f7fc fd2e 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_label);
 8013d9c:	1d3b      	adds	r3, r7, #4
 8013d9e:	681a      	ldr	r2, [r3, #0]
 8013da0:	1d3b      	adds	r3, r7, #4
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8013da8:	4619      	mov	r1, r3
 8013daa:	4610      	mov	r0, r2
 8013dac:	f7fc fd24 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_units);
 8013db0:	1d3b      	adds	r3, r7, #4
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	1d3b      	adds	r3, r7, #4
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	4610      	mov	r0, r2
 8013dc0:	f7fc fd1a 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_value);
 8013dc4:	1d3b      	adds	r3, r7, #4
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	1d3b      	adds	r3, r7, #4
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8013dd0:	4619      	mov	r1, r3
 8013dd2:	4610      	mov	r0, r2
 8013dd4:	f7fc fd10 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_label);
 8013dd8:	1d3b      	adds	r3, r7, #4
 8013dda:	681a      	ldr	r2, [r3, #0]
 8013ddc:	1d3b      	adds	r3, r7, #4
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8013de4:	4619      	mov	r1, r3
 8013de6:	4610      	mov	r0, r2
 8013de8:	f7fc fd06 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_units);
 8013dec:	1d3b      	adds	r3, r7, #4
 8013dee:	681a      	ldr	r2, [r3, #0]
 8013df0:	1d3b      	adds	r3, r7, #4
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8013df8:	4619      	mov	r1, r3
 8013dfa:	4610      	mov	r0, r2
 8013dfc:	f7fc fcfc 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_value);
 8013e00:	1d3b      	adds	r3, r7, #4
 8013e02:	681a      	ldr	r2, [r3, #0]
 8013e04:	1d3b      	adds	r3, r7, #4
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	4610      	mov	r0, r2
 8013e10:	f7fc fcf2 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_label);
 8013e14:	1d3b      	adds	r3, r7, #4
 8013e16:	681a      	ldr	r2, [r3, #0]
 8013e18:	1d3b      	adds	r3, r7, #4
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8013e20:	4619      	mov	r1, r3
 8013e22:	4610      	mov	r0, r2
 8013e24:	f7fc fce8 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_units);
 8013e28:	1d3b      	adds	r3, r7, #4
 8013e2a:	681a      	ldr	r2, [r3, #0]
 8013e2c:	1d3b      	adds	r3, r7, #4
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8013e34:	4619      	mov	r1, r3
 8013e36:	4610      	mov	r0, r2
 8013e38:	f7fc fcde 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_value);
 8013e3c:	1d3b      	adds	r3, r7, #4
 8013e3e:	681a      	ldr	r2, [r3, #0]
 8013e40:	1d3b      	adds	r3, r7, #4
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8013e48:	4619      	mov	r1, r3
 8013e4a:	4610      	mov	r0, r2
 8013e4c:	f7fc fcd4 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_label);
 8013e50:	1d3b      	adds	r3, r7, #4
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	1d3b      	adds	r3, r7, #4
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8013e5c:	4619      	mov	r1, r3
 8013e5e:	4610      	mov	r0, r2
 8013e60:	f7fc fcca 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_units);
 8013e64:	1d3b      	adds	r3, r7, #4
 8013e66:	681a      	ldr	r2, [r3, #0]
 8013e68:	1d3b      	adds	r3, r7, #4
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8013e70:	4619      	mov	r1, r3
 8013e72:	4610      	mov	r0, r2
 8013e74:	f7fc fcc0 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_value);
 8013e78:	1d3b      	adds	r3, r7, #4
 8013e7a:	681a      	ldr	r2, [r3, #0]
 8013e7c:	1d3b      	adds	r3, r7, #4
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8013e84:	4619      	mov	r1, r3
 8013e86:	4610      	mov	r0, r2
 8013e88:	f7fc fcb6 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_label);
 8013e8c:	1d3b      	adds	r3, r7, #4
 8013e8e:	681a      	ldr	r2, [r3, #0]
 8013e90:	1d3b      	adds	r3, r7, #4
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8013e98:	4619      	mov	r1, r3
 8013e9a:	4610      	mov	r0, r2
 8013e9c:	f7fc fcac 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_units);
 8013ea0:	1d3b      	adds	r3, r7, #4
 8013ea2:	681a      	ldr	r2, [r3, #0]
 8013ea4:	1d3b      	adds	r3, r7, #4
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8013eac:	4619      	mov	r1, r3
 8013eae:	4610      	mov	r0, r2
 8013eb0:	f7fc fca2 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_value);
 8013eb4:	1d3b      	adds	r3, r7, #4
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	1d3b      	adds	r3, r7, #4
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	4610      	mov	r0, r2
 8013ec4:	f7fc fc98 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_label);
 8013ec8:	1d3b      	adds	r3, r7, #4
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	1d3b      	adds	r3, r7, #4
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	4610      	mov	r0, r2
 8013ed8:	f7fc fc8e 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_units);
 8013edc:	1d3b      	adds	r3, r7, #4
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	1d3b      	adds	r3, r7, #4
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013ee8:	4619      	mov	r1, r3
 8013eea:	4610      	mov	r0, r2
 8013eec:	f7fc fc84 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_value);
 8013ef0:	1d3b      	adds	r3, r7, #4
 8013ef2:	681a      	ldr	r2, [r3, #0]
 8013ef4:	1d3b      	adds	r3, r7, #4
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013efc:	4619      	mov	r1, r3
 8013efe:	4610      	mov	r0, r2
 8013f00:	f7fc fc7a 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_label);
 8013f04:	1d3b      	adds	r3, r7, #4
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	1d3b      	adds	r3, r7, #4
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8013f10:	4619      	mov	r1, r3
 8013f12:	4610      	mov	r0, r2
 8013f14:	f7fc fc70 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_units);
 8013f18:	1d3b      	adds	r3, r7, #4
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	1d3b      	adds	r3, r7, #4
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013f24:	4619      	mov	r1, r3
 8013f26:	4610      	mov	r0, r2
 8013f28:	f7fc fc66 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gauge1);
 8013f2c:	1d3b      	adds	r3, r7, #4
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	1d3b      	adds	r3, r7, #4
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013f38:	4619      	mov	r1, r3
 8013f3a:	4610      	mov	r0, r2
 8013f3c:	f7fc fc5c 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 8013f40:	1d3b      	adds	r3, r7, #4
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	1d3b      	adds	r3, r7, #4
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	4610      	mov	r0, r2
 8013f50:	f7fc fc52 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(flexButton1);
 8013f54:	1d3b      	adds	r3, r7, #4
 8013f56:	681a      	ldr	r2, [r3, #0]
 8013f58:	1d3b      	adds	r3, r7, #4
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	f603 234c 	addw	r3, r3, #2636	; 0xa4c
 8013f60:	4619      	mov	r1, r3
 8013f62:	4610      	mov	r0, r2
 8013f64:	f7fc fc48 	bl	80107f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013f68:	1d3b      	adds	r3, r7, #4
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 8013f72:	46bd      	mov	sp, r7
 8013f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f78 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8013f78:	b480      	push	{r7}
 8013f7a:	b083      	sub	sp, #12
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]

}
 8013f80:	bf00      	nop
 8013f82:	370c      	adds	r7, #12
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr

08013f8c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	4618      	mov	r0, r3
 8013f98:	f009 fd30 	bl	801d9fc <_ZN8touchgfx6ScreenC1Ev>
 8013f9c:	4a05      	ldr	r2, [pc, #20]	; (8013fb4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	601a      	str	r2, [r3, #0]
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	4618      	mov	r0, r3
 8013fac:	3708      	adds	r7, #8
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	08030408 	.word	0x08030408

08013fb8 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7fc fda4 	bl	8010b10 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8013fc8:	4a03      	ldr	r2, [pc, #12]	; (8013fd8 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	601a      	str	r2, [r3, #0]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3708      	adds	r7, #8
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	0803043c 	.word	0x0803043c

08013fdc <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	4a05      	ldr	r2, [pc, #20]	; (8013ffc <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	601a      	str	r2, [r3, #0]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7fc fef9 	bl	8010de4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	0803043c 	.word	0x0803043c

08014000 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f7ff ffe7 	bl	8013fdc <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 801400e:	2134      	movs	r1, #52	; 0x34
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f019 fae0 	bl	802d5d6 <_ZdlPvj>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	4618      	mov	r0, r3
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
 8014028:	4a05      	ldr	r2, [pc, #20]	; (8014040 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	601a      	str	r2, [r3, #0]
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	4618      	mov	r0, r3
 8014032:	f7fc fe2f 	bl	8010c94 <_ZN8touchgfx3BoxD1Ev>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	4618      	mov	r0, r3
 801403a:	3708      	adds	r7, #8
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	080320a4 	.word	0x080320a4

08014044 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f7ff ffe7 	bl	8014020 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8014052:	2134      	movs	r1, #52	; 0x34
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f019 fabe 	bl	802d5d6 <_ZdlPvj>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	4618      	mov	r0, r3
 801405e:	3708      	adds	r7, #8
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
 */
template <class T>
class BoxWithBorderButtonStyle : public T
{
public:
    BoxWithBorderButtonStyle()
 8014064:	b580      	push	{r7, lr}
 8014066:	b082      	sub	sp, #8
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	4618      	mov	r0, r3
 8014070:	2334      	movs	r3, #52	; 0x34
 8014072:	461a      	mov	r2, r3
 8014074:	2100      	movs	r1, #0
 8014076:	f01a fa5b 	bl	802e530 <memset>
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	4618      	mov	r0, r3
 801407e:	f7ff ff9b 	bl	8013fb8 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 8014082:	4a17      	ldr	r2, [pc, #92]	; (80140e0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	601a      	str	r2, [r3, #0]
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	3334      	adds	r3, #52	; 0x34
 801408c:	4618      	mov	r0, r3
 801408e:	f7fc fe23 	bl	8010cd8 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	3368      	adds	r3, #104	; 0x68
 8014096:	4618      	mov	r0, r3
 8014098:	f7fc f944 	bl	8010324 <_ZN8touchgfx9colortypeC1Ev>
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	336c      	adds	r3, #108	; 0x6c
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7fc f93f 	bl	8010324 <_ZN8touchgfx9colortypeC1Ev>
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	3370      	adds	r3, #112	; 0x70
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7fc f93a 	bl	8010324 <_ZN8touchgfx9colortypeC1Ev>
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	3374      	adds	r3, #116	; 0x74
 80140b4:	4618      	mov	r0, r3
 80140b6:	f7fc f935 	bl	8010324 <_ZN8touchgfx9colortypeC1Ev>
    {
        borderBox.setXY(0, 0);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	3334      	adds	r3, #52	; 0x34
 80140be:	2200      	movs	r2, #0
 80140c0:	2100      	movs	r1, #0
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7fc fa18 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 80140c8:	687a      	ldr	r2, [r7, #4]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	3334      	adds	r3, #52	; 0x34
 80140ce:	4619      	mov	r1, r3
 80140d0:	4610      	mov	r0, r2
 80140d2:	f003 f9e1 	bl	8017498 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	4618      	mov	r0, r3
 80140da:	3708      	adds	r7, #8
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}
 80140e0:	08030370 	.word	0x08030370

080140e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80140e4:	b590      	push	{r4, r7, lr}
 80140e6:	b087      	sub	sp, #28
 80140e8:	af02      	add	r7, sp, #8
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	4608      	mov	r0, r1
 80140ee:	4611      	mov	r1, r2
 80140f0:	461a      	mov	r2, r3
 80140f2:	4603      	mov	r3, r0
 80140f4:	817b      	strh	r3, [r7, #10]
 80140f6:	460b      	mov	r3, r1
 80140f8:	813b      	strh	r3, [r7, #8]
 80140fa:	4613      	mov	r3, r2
 80140fc:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8014104:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8014108:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801410c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8014110:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014114:	9300      	str	r3, [sp, #0]
 8014116:	4623      	mov	r3, r4
 8014118:	f7fc f9af 	bl	801047a <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 801411c:	bf00      	nop
 801411e:	3714      	adds	r7, #20
 8014120:	46bd      	mov	sp, r7
 8014122:	bd90      	pop	{r4, r7, pc}

08014124 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	460b      	mov	r3, r1
 801412e:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	3334      	adds	r3, #52	; 0x34
 8014134:	78fa      	ldrb	r2, [r7, #3]
 8014136:	b292      	uxth	r2, r2
 8014138:	4611      	mov	r1, r2
 801413a:	4618      	mov	r0, r3
 801413c:	f7fc fdf6 	bl	8010d2c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 8014140:	bf00      	nop
 8014142:	3708      	adds	r7, #8
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}

08014148 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8014148:	b580      	push	{r7, lr}
 801414a:	b084      	sub	sp, #16
 801414c:	af00      	add	r7, sp, #0
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	607a      	str	r2, [r7, #4]
 8014154:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	68ba      	ldr	r2, [r7, #8]
 801415a:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	687a      	ldr	r2, [r7, #4]
 8014160:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	683a      	ldr	r2, [r7, #0]
 8014166:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	69ba      	ldr	r2, [r7, #24]
 801416c:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	3388      	adds	r3, #136	; 0x88
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	68f8      	ldr	r0, [r7, #12]
 8014178:	4798      	blx	r3
    }
 801417a:	bf00      	nop
 801417c:	3710      	adds	r7, #16
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}

08014182 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 8014182:	b590      	push	{r4, r7, lr}
 8014184:	b083      	sub	sp, #12
 8014186:	af00      	add	r7, sp, #0
 8014188:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	4618      	mov	r0, r3
 8014194:	f7fc fcf2 	bl	8010b7c <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8014198:	4603      	mov	r3, r0
 801419a:	2b00      	cmp	r3, #0
 801419c:	d002      	beq.n	80141a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	336c      	adds	r3, #108	; 0x6c
 80141a2:	e001      	b.n	80141a8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	3368      	adds	r3, #104	; 0x68
 80141a8:	6819      	ldr	r1, [r3, #0]
 80141aa:	4620      	mov	r0, r4
 80141ac:	f7fc fbae 	bl	801090c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fc fcdf 	bl	8010b7c <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d002      	beq.n	80141ca <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	3374      	adds	r3, #116	; 0x74
 80141c8:	e001      	b.n	80141ce <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	3370      	adds	r3, #112	; 0x70
 80141ce:	6819      	ldr	r1, [r3, #0]
 80141d0:	4620      	mov	r0, r4
 80141d2:	f7fc fd9d 	bl	8010d10 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fc fd24 	bl	8010c26 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 80141de:	bf00      	nop
 80141e0:	370c      	adds	r7, #12
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd90      	pop	{r4, r7, pc}
	...

080141e8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	4a08      	ldr	r2, [pc, #32]	; (8014214 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	601a      	str	r2, [r3, #0]
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	3334      	adds	r3, #52	; 0x34
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7ff ff10 	bl	8014020 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	4618      	mov	r0, r3
 8014204:	f7ff feea 	bl	8013fdc <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	4618      	mov	r0, r3
 801420c:	3708      	adds	r7, #8
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	08030370 	.word	0x08030370

08014218 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f7ff ffe1 	bl	80141e8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8014226:	2178      	movs	r1, #120	; 0x78
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f019 f9d4 	bl	802d5d6 <_ZdlPvj>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	4618      	mov	r0, r3
 8014232:	3708      	adds	r7, #8
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	4a05      	ldr	r2, [pc, #20]	; (8014258 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	601a      	str	r2, [r3, #0]
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	4618      	mov	r0, r3
 801424a:	f7fc fbf3 	bl	8010a34 <_ZN8touchgfx8TextAreaD1Ev>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4618      	mov	r0, r3
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}
 8014258:	08031ffc 	.word	0x08031ffc

0801425c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 801425c:	b580      	push	{r7, lr}
 801425e:	b082      	sub	sp, #8
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f7ff ffe7 	bl	8014238 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801426a:	2140      	movs	r1, #64	; 0x40
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f019 f9b2 	bl	802d5d6 <_ZdlPvj>
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	4618      	mov	r0, r3
 8014276:	3708      	adds	r7, #8
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}

0801427c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	4a0a      	ldr	r2, [pc, #40]	; (80142b0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	601a      	str	r2, [r3, #0]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	3358      	adds	r3, #88	; 0x58
 801428e:	4618      	mov	r0, r3
 8014290:	f7fc fc1c 	bl	8010acc <_ZN8touchgfx9ContainerD1Ev>
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	332c      	adds	r3, #44	; 0x2c
 8014298:	4618      	mov	r0, r3
 801429a:	f7fc fcd9 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7fc fc13 	bl	8010acc <_ZN8touchgfx9ContainerD1Ev>
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	4618      	mov	r0, r3
 80142aa:	3708      	adds	r7, #8
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}
 80142b0:	08030dc4 	.word	0x08030dc4

080142b4 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f7ff ffdd 	bl	801427c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80142c2:	21b4      	movs	r1, #180	; 0xb4
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f019 f986 	bl	802d5d6 <_ZdlPvj>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	4618      	mov	r0, r3
 80142ce:	3708      	adds	r7, #8
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}

080142d4 <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	4a05      	ldr	r2, [pc, #20]	; (80142f4 <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	601a      	str	r2, [r3, #0]
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7fc fcb3 	bl	8010c50 <_ZN8touchgfx5ImageD1Ev>
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	4618      	mov	r0, r3
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	08031bbc 	.word	0x08031bbc

080142f8 <_ZN8touchgfx13TextureMapperD0Ev>:
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	f7ff ffe7 	bl	80142d4 <_ZN8touchgfx13TextureMapperD1Ev>
 8014306:	2190      	movs	r1, #144	; 0x90
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f019 f964 	bl	802d5d6 <_ZdlPvj>
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	4618      	mov	r0, r3
 8014312:	3708      	adds	r7, #8
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	4a05      	ldr	r2, [pc, #20]	; (8014338 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	601a      	str	r2, [r3, #0]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	4618      	mov	r0, r3
 801432a:	f7fc faa9 	bl	8010880 <_ZN8touchgfx6WidgetD1Ev>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	4618      	mov	r0, r3
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}
 8014338:	08031af0 	.word	0x08031af0

0801433c <_ZN8touchgfx12CanvasWidgetD0Ev>:
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7ff ffe7 	bl	8014318 <_ZN8touchgfx12CanvasWidgetD1Ev>
 801434a:	2130      	movs	r1, #48	; 0x30
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f019 f942 	bl	802d5d6 <_ZdlPvj>
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	4618      	mov	r0, r3
 8014356:	3708      	adds	r7, #8
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}

0801435c <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&amp;x, &amp;y); // Will return (1, 1)
 *            circle.getRadius(&amp;r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
 8014364:	4a05      	ldr	r2, [pc, #20]	; (801437c <_ZN8touchgfx6CircleD1Ev+0x20>)
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	601a      	str	r2, [r3, #0]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	4618      	mov	r0, r3
 801436e:	f7ff ffd3 	bl	8014318 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	4618      	mov	r0, r3
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}
 801437c:	08031a10 	.word	0x08031a10

08014380 <_ZN8touchgfx6CircleD0Ev>:
 8014380:	b580      	push	{r7, lr}
 8014382:	b082      	sub	sp, #8
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f7ff ffe7 	bl	801435c <_ZN8touchgfx6CircleD1Ev>
 801438e:	214c      	movs	r1, #76	; 0x4c
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f019 f920 	bl	802d5d6 <_ZdlPvj>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	4618      	mov	r0, r3
 801439a:	3708      	adds	r7, #8
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	4a0b      	ldr	r2, [pc, #44]	; (80143d8 <_ZN8touchgfx5GaugeD1Ev+0x38>)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	601a      	str	r2, [r3, #0]
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7ff ffd1 	bl	801435c <_ZN8touchgfx6CircleD1Ev>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	33b4      	adds	r3, #180	; 0xb4
 80143be:	4618      	mov	r0, r3
 80143c0:	f7ff ff88 	bl	80142d4 <_ZN8touchgfx13TextureMapperD1Ev>
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7ff ff58 	bl	801427c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	4618      	mov	r0, r3
 80143d0:	3708      	adds	r7, #8
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}
 80143d6:	bf00      	nop
 80143d8:	08031edc 	.word	0x08031edc

080143dc <_ZN8touchgfx5GaugeD0Ev>:
 80143dc:	b580      	push	{r7, lr}
 80143de:	b082      	sub	sp, #8
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f7ff ffdb 	bl	80143a0 <_ZN8touchgfx5GaugeD1Ev>
 80143ea:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f019 f8f1 	bl	802d5d6 <_ZdlPvj>
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	4618      	mov	r0, r3
 80143f8:	3708      	adds	r7, #8
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}

080143fe <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 80143fe:	b590      	push	{r4, r7, lr}
 8014400:	b083      	sub	sp, #12
 8014402:	af00      	add	r7, sp, #0
 8014404:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	4618      	mov	r0, r3
 8014410:	f7fc fbd5 	bl	8010bbe <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8014414:	4603      	mov	r3, r0
 8014416:	4619      	mov	r1, r3
 8014418:	4620      	mov	r0, r4
 801441a:	f7fc fa85 	bl	8010928 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	4618      	mov	r0, r3
 8014422:	f7fc fc0a 	bl	8010c3a <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8014426:	bf00      	nop
 8014428:	370c      	adds	r7, #12
 801442a:	46bd      	mov	sp, r7
 801442c:	bd90      	pop	{r4, r7, pc}
	...

08014430 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8014430:	b480      	push	{r7}
 8014432:	af00      	add	r7, sp, #0
    return bitmap_database;
 8014434:	4b02      	ldr	r3, [pc, #8]	; (8014440 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8014436:	4618      	mov	r0, r3
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr
 8014440:	080305c8 	.word	0x080305c8

08014444 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8014444:	b480      	push	{r7}
 8014446:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014448:	2311      	movs	r3, #17
}
 801444a:	4618      	mov	r0, r3
 801444c:	46bd      	mov	sp, r7
 801444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014452:	4770      	bx	lr

08014454 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8014454:	b480      	push	{r7}
 8014456:	b085      	sub	sp, #20
 8014458:	af00      	add	r7, sp, #0
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	460b      	mov	r3, r1
 801445e:	607a      	str	r2, [r7, #4]
 8014460:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8014462:	2300      	movs	r3, #0
    }
 8014464:	4618      	mov	r0, r3
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8014470:	b480      	push	{r7}
 8014472:	b083      	sub	sp, #12
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8014478:	2300      	movs	r3, #0
    }
 801447a:	4618      	mov	r0, r3
 801447c:	370c      	adds	r7, #12
 801447e:	46bd      	mov	sp, r7
 8014480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014484:	4770      	bx	lr

08014486 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8014486:	b480      	push	{r7}
 8014488:	b083      	sub	sp, #12
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801448e:	2300      	movs	r3, #0
    }
 8014490:	4618      	mov	r0, r3
 8014492:	370c      	adds	r7, #12
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr

0801449c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801449c:	b480      	push	{r7}
 801449e:	b085      	sub	sp, #20
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	60f8      	str	r0, [r7, #12]
 80144a4:	60b9      	str	r1, [r7, #8]
 80144a6:	4613      	mov	r3, r2
 80144a8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80144aa:	4a07      	ldr	r2, [pc, #28]	; (80144c8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	6013      	str	r3, [r2, #0]
        fonts = f;
 80144b0:	4a06      	ldr	r2, [pc, #24]	; (80144cc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80144b2:	68bb      	ldr	r3, [r7, #8]
 80144b4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80144b6:	4a06      	ldr	r2, [pc, #24]	; (80144d0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80144b8:	88fb      	ldrh	r3, [r7, #6]
 80144ba:	8013      	strh	r3, [r2, #0]
    }
 80144bc:	bf00      	nop
 80144be:	3714      	adds	r7, #20
 80144c0:	46bd      	mov	sp, r7
 80144c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c6:	4770      	bx	lr
 80144c8:	20009870 	.word	0x20009870
 80144cc:	20009878 	.word	0x20009878
 80144d0:	20009874 	.word	0x20009874

080144d4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80144d4:	b40e      	push	{r1, r2, r3}
 80144d6:	b580      	push	{r7, lr}
 80144d8:	b085      	sub	sp, #20
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80144de:	f107 0320 	add.w	r3, r7, #32
 80144e2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	69fa      	ldr	r2, [r7, #28]
 80144e8:	2100      	movs	r1, #0
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f008 fe1e 	bl	801d12c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80144f0:	4603      	mov	r3, r0
 80144f2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80144f4:	89fb      	ldrh	r3, [r7, #14]
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3714      	adds	r7, #20
 80144fa:	46bd      	mov	sp, r7
 80144fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014500:	b003      	add	sp, #12
 8014502:	4770      	bx	lr

08014504 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8014504:	b40c      	push	{r2, r3}
 8014506:	b580      	push	{r7, lr}
 8014508:	b084      	sub	sp, #16
 801450a:	af00      	add	r7, sp, #0
 801450c:	6078      	str	r0, [r7, #4]
 801450e:	460b      	mov	r3, r1
 8014510:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8014512:	f107 031c 	add.w	r3, r7, #28
 8014516:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8014518:	78f9      	ldrb	r1, [r7, #3]
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	69ba      	ldr	r2, [r7, #24]
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f008 fe04 	bl	801d12c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8014524:	4603      	mov	r3, r0
 8014526:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8014528:	89fb      	ldrh	r3, [r7, #14]
}
 801452a:	4618      	mov	r0, r3
 801452c:	3710      	adds	r7, #16
 801452e:	46bd      	mov	sp, r7
 8014530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014534:	b002      	add	sp, #8
 8014536:	4770      	bx	lr

08014538 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b08a      	sub	sp, #40	; 0x28
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	460b      	mov	r3, r1
 8014542:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014548:	2b00      	cmp	r3, #0
 801454a:	d016      	beq.n	801457a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	3322      	adds	r3, #34	; 0x22
 8014550:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8014552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014554:	8adb      	ldrh	r3, [r3, #22]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d105      	bne.n	8014566 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801455a:	4b43      	ldr	r3, [pc, #268]	; (8014668 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801455c:	4a43      	ldr	r2, [pc, #268]	; (801466c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801455e:	21c0      	movs	r1, #192	; 0xc0
 8014560:	4843      	ldr	r0, [pc, #268]	; (8014670 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014562:	f019 fe57 	bl	802e214 <__assert_func>
            return buffer[pos];
 8014566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014568:	8a9b      	ldrh	r3, [r3, #20]
 801456a:	461a      	mov	r2, r3
 801456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801456e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d001      	beq.n	801457a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014576:	2301      	movs	r3, #1
 8014578:	e000      	b.n	801457c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801457a:	2300      	movs	r3, #0
 801457c:	2b00      	cmp	r3, #0
 801457e:	d06a      	beq.n	8014656 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f00a f983 	bl	801e88c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	3322      	adds	r3, #34	; 0x22
 801458a:	623b      	str	r3, [r7, #32]
 801458c:	2301      	movs	r3, #1
 801458e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8014590:	6a3b      	ldr	r3, [r7, #32]
 8014592:	8adb      	ldrh	r3, [r3, #22]
 8014594:	8bfa      	ldrh	r2, [r7, #30]
 8014596:	429a      	cmp	r2, r3
 8014598:	d305      	bcc.n	80145a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801459a:	4b36      	ldr	r3, [pc, #216]	; (8014674 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801459c:	4a36      	ldr	r2, [pc, #216]	; (8014678 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801459e:	21c5      	movs	r1, #197	; 0xc5
 80145a0:	4833      	ldr	r0, [pc, #204]	; (8014670 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80145a2:	f019 fe37 	bl	802e214 <__assert_func>
            const uint16_t index = pos + offset;
 80145a6:	6a3b      	ldr	r3, [r7, #32]
 80145a8:	8a9a      	ldrh	r2, [r3, #20]
 80145aa:	8bfb      	ldrh	r3, [r7, #30]
 80145ac:	4413      	add	r3, r2
 80145ae:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80145b0:	8bbb      	ldrh	r3, [r7, #28]
 80145b2:	2b09      	cmp	r3, #9
 80145b4:	d801      	bhi.n	80145ba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80145b6:	8bbb      	ldrh	r3, [r7, #28]
 80145b8:	e001      	b.n	80145be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80145ba:	8bbb      	ldrh	r3, [r7, #28]
 80145bc:	3b0a      	subs	r3, #10
 80145be:	6a3a      	ldr	r2, [r7, #32]
 80145c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145c4:	f640 123f 	movw	r2, #2367	; 0x93f
 80145c8:	4293      	cmp	r3, r2
 80145ca:	bf0c      	ite	eq
 80145cc:	2301      	moveq	r3, #1
 80145ce:	2300      	movne	r3, #0
 80145d0:	b2db      	uxtb	r3, r3
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d03f      	beq.n	8014656 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	3322      	adds	r3, #34	; 0x22
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	3222      	adds	r2, #34	; 0x22
 80145de:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80145e0:	68ba      	ldr	r2, [r7, #8]
 80145e2:	8ad2      	ldrh	r2, [r2, #22]
 80145e4:	2a00      	cmp	r2, #0
 80145e6:	d105      	bne.n	80145f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80145e8:	4b1f      	ldr	r3, [pc, #124]	; (8014668 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80145ea:	4a20      	ldr	r2, [pc, #128]	; (801466c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80145ec:	21c0      	movs	r1, #192	; 0xc0
 80145ee:	4820      	ldr	r0, [pc, #128]	; (8014670 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80145f0:	f019 fe10 	bl	802e214 <__assert_func>
            return buffer[pos];
 80145f4:	68ba      	ldr	r2, [r7, #8]
 80145f6:	8a92      	ldrh	r2, [r2, #20]
 80145f8:	4611      	mov	r1, r2
 80145fa:	68ba      	ldr	r2, [r7, #8]
 80145fc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8014600:	613b      	str	r3, [r7, #16]
 8014602:	4613      	mov	r3, r2
 8014604:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	8adb      	ldrh	r3, [r3, #22]
 801460a:	2b01      	cmp	r3, #1
 801460c:	d806      	bhi.n	801461c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 801460e:	4b1b      	ldr	r3, [pc, #108]	; (801467c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8014610:	4a1b      	ldr	r2, [pc, #108]	; (8014680 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8014612:	f240 110d 	movw	r1, #269	; 0x10d
 8014616:	4816      	ldr	r0, [pc, #88]	; (8014670 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014618:	f019 fdfc 	bl	802e214 <__assert_func>
            const uint16_t index = pos + 1;
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	8a9b      	ldrh	r3, [r3, #20]
 8014620:	3301      	adds	r3, #1
 8014622:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8014624:	89bb      	ldrh	r3, [r7, #12]
 8014626:	2b09      	cmp	r3, #9
 8014628:	d801      	bhi.n	801462e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801462a:	89bb      	ldrh	r3, [r7, #12]
 801462c:	e000      	b.n	8014630 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801462e:	2300      	movs	r3, #0
 8014630:	693a      	ldr	r2, [r7, #16]
 8014632:	89f9      	ldrh	r1, [r7, #14]
 8014634:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8014638:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	3322      	adds	r3, #34	; 0x22
 801463e:	61bb      	str	r3, [r7, #24]
 8014640:	f640 133f 	movw	r3, #2367	; 0x93f
 8014644:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	8a9b      	ldrh	r3, [r3, #20]
 801464a:	4619      	mov	r1, r3
 801464c:	69bb      	ldr	r3, [r7, #24]
 801464e:	8afa      	ldrh	r2, [r7, #22]
 8014650:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8014654:	bf00      	nop
        }
    }
    return getNextChar();
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f009 fffc 	bl	801e654 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801465c:	4603      	mov	r3, r0
}
 801465e:	4618      	mov	r0, r3
 8014660:	3728      	adds	r7, #40	; 0x28
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
 8014666:	bf00      	nop
 8014668:	0802f904 	.word	0x0802f904
 801466c:	0802f910 	.word	0x0802f910
 8014670:	0802f9bc 	.word	0x0802f9bc
 8014674:	0802fa04 	.word	0x0802fa04
 8014678:	0802fa14 	.word	0x0802fa14
 801467c:	0802fae8 	.word	0x0802fae8
 8014680:	0802faf4 	.word	0x0802faf4

08014684 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b082      	sub	sp, #8
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f009 ff99 	bl	801e5c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8014692:	bf00      	nop
 8014694:	3708      	adds	r7, #8
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}

0801469a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801469a:	b580      	push	{r7, lr}
 801469c:	b088      	sub	sp, #32
 801469e:	af02      	add	r7, sp, #8
 80146a0:	60f8      	str	r0, [r7, #12]
 80146a2:	1d38      	adds	r0, r7, #4
 80146a4:	e880 0006 	stmia.w	r0, {r1, r2}
 80146a8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80146aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80146ae:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80146b0:	1d39      	adds	r1, r7, #4
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	9301      	str	r3, [sp, #4]
 80146b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b8:	9300      	str	r3, [sp, #0]
 80146ba:	6a3b      	ldr	r3, [r7, #32]
 80146bc:	683a      	ldr	r2, [r7, #0]
 80146be:	68f8      	ldr	r0, [r7, #12]
 80146c0:	f007 fa11 	bl	801bae6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80146c4:	bf00      	nop
 80146c6:	3718      	adds	r7, #24
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}

080146cc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80146cc:	b590      	push	{r4, r7, lr}
 80146ce:	b085      	sub	sp, #20
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	4603      	mov	r3, r0
 80146d4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80146d6:	2300      	movs	r3, #0
 80146d8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80146da:	88fb      	ldrh	r3, [r7, #6]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d127      	bne.n	8014730 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80146e0:	88fb      	ldrh	r3, [r7, #6]
 80146e2:	4a1e      	ldr	r2, [pc, #120]	; (801475c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80146e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d016      	beq.n	801471a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80146ec:	88fb      	ldrh	r3, [r7, #6]
 80146ee:	4a1b      	ldr	r2, [pc, #108]	; (801475c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80146f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146f4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	68ba      	ldr	r2, [r7, #8]
 80146fc:	4413      	add	r3, r2
 80146fe:	4a18      	ldr	r2, [pc, #96]	; (8014760 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014700:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	68ba      	ldr	r2, [r7, #8]
 8014708:	4413      	add	r3, r2
 801470a:	4a16      	ldr	r2, [pc, #88]	; (8014764 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801470c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	689b      	ldr	r3, [r3, #8]
 8014712:	68ba      	ldr	r2, [r7, #8]
 8014714:	4413      	add	r3, r2
 8014716:	60fb      	str	r3, [r7, #12]
 8014718:	e00a      	b.n	8014730 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801471a:	4b11      	ldr	r3, [pc, #68]	; (8014760 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801471c:	4a12      	ldr	r2, [pc, #72]	; (8014768 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801471e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8014720:	4a12      	ldr	r2, [pc, #72]	; (801476c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8014722:	4b10      	ldr	r3, [pc, #64]	; (8014764 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014724:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8014726:	88fb      	ldrh	r3, [r7, #6]
 8014728:	4a11      	ldr	r2, [pc, #68]	; (8014770 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801472a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801472e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d00d      	beq.n	8014752 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8014736:	4a0f      	ldr	r2, [pc, #60]	; (8014774 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8014738:	88fb      	ldrh	r3, [r7, #6]
 801473a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801473c:	f000 f83e 	bl	80147bc <_ZN17TypedTextDatabase8getFontsEv>
 8014740:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8014742:	f000 f833 	bl	80147ac <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8014746:	4603      	mov	r3, r0
 8014748:	461a      	mov	r2, r3
 801474a:	4621      	mov	r1, r4
 801474c:	68f8      	ldr	r0, [r7, #12]
 801474e:	f7ff fea5 	bl	801449c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8014752:	bf00      	nop
 8014754:	3714      	adds	r7, #20
 8014756:	46bd      	mov	sp, r7
 8014758:	bd90      	pop	{r4, r7, pc}
 801475a:	bf00      	nop
 801475c:	20007b28 	.word	0x20007b28
 8014760:	20007b30 	.word	0x20007b30
 8014764:	20007b34 	.word	0x20007b34
 8014768:	080ad27c 	.word	0x080ad27c
 801476c:	080ad1bc 	.word	0x080ad1bc
 8014770:	080ad2f8 	.word	0x080ad2f8
 8014774:	20007b2c 	.word	0x20007b2c

08014778 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8014778:	b480      	push	{r7}
 801477a:	b083      	sub	sp, #12
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	460b      	mov	r3, r1
 8014782:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8014784:	4b07      	ldr	r3, [pc, #28]	; (80147a4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8014786:	681a      	ldr	r2, [r3, #0]
 8014788:	4b07      	ldr	r3, [pc, #28]	; (80147a8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801478a:	6819      	ldr	r1, [r3, #0]
 801478c:	887b      	ldrh	r3, [r7, #2]
 801478e:	009b      	lsls	r3, r3, #2
 8014790:	440b      	add	r3, r1
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	005b      	lsls	r3, r3, #1
 8014796:	4413      	add	r3, r2
}
 8014798:	4618      	mov	r0, r3
 801479a:	370c      	adds	r7, #12
 801479c:	46bd      	mov	sp, r7
 801479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a2:	4770      	bx	lr
 80147a4:	20007b30 	.word	0x20007b30
 80147a8:	20007b34 	.word	0x20007b34

080147ac <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80147ac:	b480      	push	{r7}
 80147ae:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80147b0:	2330      	movs	r3, #48	; 0x30
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	46bd      	mov	sp, r7
 80147b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ba:	4770      	bx	lr

080147bc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80147bc:	b480      	push	{r7}
 80147be:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80147c0:	4b02      	ldr	r3, [pc, #8]	; (80147cc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80147c2:	4618      	mov	r0, r3
 80147c4:	46bd      	mov	sp, r7
 80147c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ca:	4770      	bx	lr
 80147cc:	20007b38 	.word	0x20007b38

080147d0 <_Z41__static_initialization_and_destruction_0ii>:
    case 1:
        touchgfx_fonts[1] = &(getFont_bahnschrift_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	6039      	str	r1, [r7, #0]
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2b01      	cmp	r3, #1
 80147de:	d10e      	bne.n	80147fe <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80147e6:	4293      	cmp	r3, r2
 80147e8:	d109      	bne.n	80147fe <_Z41__static_initialization_and_destruction_0ii+0x2e>
    &(getFont_bahnschrift_55_4bpp()),
 80147ea:	f7fb f825 	bl	800f838 <_Z27getFont_bahnschrift_55_4bppv>
 80147ee:	4603      	mov	r3, r0
};
 80147f0:	4a05      	ldr	r2, [pc, #20]	; (8014808 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80147f2:	6013      	str	r3, [r2, #0]
    &(getFont_bahnschrift_20_4bpp())
 80147f4:	f7fa ffca 	bl	800f78c <_Z27getFont_bahnschrift_20_4bppv>
 80147f8:	4603      	mov	r3, r0
};
 80147fa:	4a03      	ldr	r2, [pc, #12]	; (8014808 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80147fc:	6053      	str	r3, [r2, #4]
} // namespace TypedTextDatabase
 80147fe:	bf00      	nop
 8014800:	3708      	adds	r7, #8
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	20007b38 	.word	0x20007b38

0801480c <_GLOBAL__sub_I_touchgfx_fonts>:
 801480c:	b580      	push	{r7, lr}
 801480e:	af00      	add	r7, sp, #0
 8014810:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014814:	2001      	movs	r0, #1
 8014816:	f7ff ffdb 	bl	80147d0 <_Z41__static_initialization_and_destruction_0ii>
 801481a:	bd80      	pop	{r7, pc}

0801481c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	4a05      	ldr	r2, [pc, #20]	; (801483c <_ZN19FrontendApplicationD1Ev+0x20>)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	601a      	str	r2, [r3, #0]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	4618      	mov	r0, r3
 801482e:	f7fb fa47 	bl	800fcc0 <_ZN23FrontendApplicationBaseD1Ev>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	4618      	mov	r0, r3
 8014836:	3708      	adds	r7, #8
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}
 801483c:	08030778 	.word	0x08030778

08014840 <_ZN19FrontendApplicationD0Ev>:
 8014840:	b580      	push	{r7, lr}
 8014842:	b082      	sub	sp, #8
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f7ff ffe7 	bl	801481c <_ZN19FrontendApplicationD1Ev>
 801484e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f018 febf 	bl	802d5d6 <_ZdlPvj>
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	4618      	mov	r0, r3
 801485c:	3708      	adds	r7, #8
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}

08014862 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8014862:	b580      	push	{r7, lr}
 8014864:	b082      	sub	sp, #8
 8014866:	af00      	add	r7, sp, #0
 8014868:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8014870:	4618      	mov	r0, r3
 8014872:	f000 f82d 	bl	80148d0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	4618      	mov	r0, r3
 801487a:	f007 fca3 	bl	801c1c4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801487e:	bf00      	nop
 8014880:	3708      	adds	r7, #8
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
	...

08014888 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8014888:	b580      	push	{r7, lr}
 801488a:	b084      	sub	sp, #16
 801488c:	af00      	add	r7, sp, #0
 801488e:	60f8      	str	r0, [r7, #12]
 8014890:	60b9      	str	r1, [r7, #8]
 8014892:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	687a      	ldr	r2, [r7, #4]
 8014898:	68b9      	ldr	r1, [r7, #8]
 801489a:	4618      	mov	r0, r3
 801489c:	f7fb fa54 	bl	800fd48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80148a0:	4a03      	ldr	r2, [pc, #12]	; (80148b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	601a      	str	r2, [r3, #0]
{

}
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	4618      	mov	r0, r3
 80148aa:	3710      	adds	r7, #16
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	08030778 	.word	0x08030778

080148b4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80148b4:	b480      	push	{r7}
 80148b6:	b083      	sub	sp, #12
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2200      	movs	r2, #0
 80148c0:	601a      	str	r2, [r3, #0]
{

}
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	4618      	mov	r0, r3
 80148c6:	370c      	adds	r7, #12
 80148c8:	46bd      	mov	sp, r7
 80148ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ce:	4770      	bx	lr

080148d0 <_ZN5Model4tickEv>:

void Model::tick()
{
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]

}
 80148d8:	bf00      	nop
 80148da:	370c      	adds	r7, #12
 80148dc:	46bd      	mov	sp, r7
 80148de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e2:	4770      	bx	lr

080148e4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80148e4:	b480      	push	{r7}
 80148e6:	b083      	sub	sp, #12
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
    {
    }
 80148ec:	bf00      	nop
 80148ee:	370c      	adds	r7, #12
 80148f0:	46bd      	mov	sp, r7
 80148f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f6:	4770      	bx	lr

080148f8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80148f8:	b480      	push	{r7}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
    {
    }
 8014900:	bf00      	nop
 8014902:	370c      	adds	r7, #12
 8014904:	46bd      	mov	sp, r7
 8014906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490a:	4770      	bx	lr

0801490c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 801490c:	b480      	push	{r7}
 801490e:	b083      	sub	sp, #12
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
    {
 8014914:	4a04      	ldr	r2, [pc, #16]	; (8014928 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	601a      	str	r2, [r3, #0]
    }
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	4618      	mov	r0, r3
 801491e:	370c      	adds	r7, #12
 8014920:	46bd      	mov	sp, r7
 8014922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014926:	4770      	bx	lr
 8014928:	080307f4 	.word	0x080307f4

0801492c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801492c:	b580      	push	{r7, lr}
 801492e:	b082      	sub	sp, #8
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
    }
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f7ff ffe9 	bl	801490c <_ZN8touchgfx9PresenterD1Ev>
 801493a:	2104      	movs	r1, #4
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f018 fe4a 	bl	802d5d6 <_ZdlPvj>
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	4618      	mov	r0, r3
 8014946:	3708      	adds	r7, #8
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 801494c:	b480      	push	{r7}
 801494e:	b083      	sub	sp, #12
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
    {
 8014954:	4a04      	ldr	r2, [pc, #16]	; (8014968 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	601a      	str	r2, [r3, #0]
    }
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	4618      	mov	r0, r3
 801495e:	370c      	adds	r7, #12
 8014960:	46bd      	mov	sp, r7
 8014962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014966:	4770      	bx	lr
 8014968:	080307f4 	.word	0x080307f4

0801496c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	4a06      	ldr	r2, [pc, #24]	; (8014990 <_ZN13ModelListenerC1Ev+0x24>)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	601a      	str	r2, [r3, #0]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2200      	movs	r2, #0
 801497e:	605a      	str	r2, [r3, #4]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	4618      	mov	r0, r3
 8014984:	370c      	adds	r7, #12
 8014986:	46bd      	mov	sp, r7
 8014988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498c:	4770      	bx	lr
 801498e:	bf00      	nop
 8014990:	080307e4 	.word	0x080307e4

08014994 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8014994:	b480      	push	{r7}
 8014996:	b083      	sub	sp, #12
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	4a04      	ldr	r2, [pc, #16]	; (80149b0 <_ZN13ModelListenerD1Ev+0x1c>)
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	601a      	str	r2, [r3, #0]
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	4618      	mov	r0, r3
 80149a6:	370c      	adds	r7, #12
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr
 80149b0:	080307e4 	.word	0x080307e4

080149b4 <_ZN13ModelListenerD0Ev>:
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f7ff ffe9 	bl	8014994 <_ZN13ModelListenerD1Ev>
 80149c2:	2108      	movs	r1, #8
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f018 fe06 	bl	802d5d6 <_ZdlPvj>
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	4618      	mov	r0, r3
 80149ce:	3708      	adds	r7, #8
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}

080149d4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b082      	sub	sp, #8
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	4a09      	ldr	r2, [pc, #36]	; (8014a04 <_ZN16Screen1PresenterD1Ev+0x30>)
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	601a      	str	r2, [r3, #0]
 80149e2:	4a09      	ldr	r2, [pc, #36]	; (8014a08 <_ZN16Screen1PresenterD1Ev+0x34>)
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	605a      	str	r2, [r3, #4]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	3304      	adds	r3, #4
 80149ec:	4618      	mov	r0, r3
 80149ee:	f7ff ffd1 	bl	8014994 <_ZN13ModelListenerD1Ev>
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7ff ff89 	bl	801490c <_ZN8touchgfx9PresenterD1Ev>
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	4618      	mov	r0, r3
 80149fe:	3708      	adds	r7, #8
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}
 8014a04:	080307bc 	.word	0x080307bc
 8014a08:	080307d4 	.word	0x080307d4

08014a0c <_ZThn4_N16Screen1PresenterD1Ev>:
 8014a0c:	f1a0 0004 	sub.w	r0, r0, #4
 8014a10:	e7e0      	b.n	80149d4 <_ZN16Screen1PresenterD1Ev>
 8014a12:	bf00      	nop

08014a14 <_ZN16Screen1PresenterD0Ev>:
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f7ff ffd9 	bl	80149d4 <_ZN16Screen1PresenterD1Ev>
 8014a22:	2110      	movs	r1, #16
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f018 fdd6 	bl	802d5d6 <_ZdlPvj>
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	3708      	adds	r7, #8
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}

08014a34 <_ZThn4_N16Screen1PresenterD0Ev>:
 8014a34:	f1a0 0004 	sub.w	r0, r0, #4
 8014a38:	e7ec      	b.n	8014a14 <_ZN16Screen1PresenterD0Ev>
	...

08014a3c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	6039      	str	r1, [r7, #0]
    : view(v)
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7ff ff7f 	bl	801494c <_ZN8touchgfx9PresenterC1Ev>
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	3304      	adds	r3, #4
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7ff ff8a 	bl	801496c <_ZN13ModelListenerC1Ev>
 8014a58:	4a06      	ldr	r2, [pc, #24]	; (8014a74 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	601a      	str	r2, [r3, #0]
 8014a5e:	4a06      	ldr	r2, [pc, #24]	; (8014a78 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	605a      	str	r2, [r3, #4]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	683a      	ldr	r2, [r7, #0]
 8014a68:	60da      	str	r2, [r3, #12]
{

}
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	3708      	adds	r7, #8
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd80      	pop	{r7, pc}
 8014a74:	080307bc 	.word	0x080307bc
 8014a78:	080307d4 	.word	0x080307d4

08014a7c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b083      	sub	sp, #12
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]

}
 8014a84:	bf00      	nop
 8014a86:	370c      	adds	r7, #12
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8e:	4770      	bx	lr

08014a90 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8014a90:	b480      	push	{r7}
 8014a92:	b083      	sub	sp, #12
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]

}
 8014a98:	bf00      	nop
 8014a9a:	370c      	adds	r7, #12
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     * @return pointer to the first element in the buffer where the formatted string is
     *         placed.
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	60f8      	str	r0, [r7, #12]
 8014aac:	460b      	mov	r3, r1
 8014aae:	607a      	str	r2, [r7, #4]
 8014ab0:	ed87 0a00 	vstr	s0, [r7]
 8014ab4:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8014ab6:	463b      	mov	r3, r7
 8014ab8:	8979      	ldrh	r1, [r7, #10]
 8014aba:	687a      	ldr	r2, [r7, #4]
 8014abc:	68f8      	ldr	r0, [r7, #12]
 8014abe:	f00a ffb5 	bl	801fa2c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8014ac2:	4603      	mov	r3, r0
    }
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3710      	adds	r7, #16
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}

08014acc <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8014acc:	b480      	push	{r7}
 8014ace:	b083      	sub	sp, #12
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	78fa      	ldrb	r2, [r7, #3]
 8014adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8014ae0:	bf00      	nop
 8014ae2:	370c      	adds	r7, #12
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr

08014aec <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b082      	sub	sp, #8
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	4a05      	ldr	r2, [pc, #20]	; (8014b0c <_ZN11Screen1ViewD1Ev+0x20>)
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	601a      	str	r2, [r3, #0]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7fc f9b5 	bl	8010e6c <_ZN15Screen1ViewBaseD1Ev>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	4618      	mov	r0, r3
 8014b06:	3708      	adds	r7, #8
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	0803080c 	.word	0x0803080c

08014b10 <_ZN11Screen1ViewD0Ev>:
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f7ff ffe7 	bl	8014aec <_ZN11Screen1ViewD1Ev>
 8014b1e:	f640 6104 	movw	r1, #3588	; 0xe04
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f018 fd57 	bl	802d5d6 <_ZdlPvj>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	3708      	adds	r7, #8
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
	...

08014b34 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

#include "main.h"
#include "extern.h"

Screen1View::Screen1View() {
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7fc faa4 	bl	801108c <_ZN15Screen1ViewBaseC1Ev>
 8014b44:	4a03      	ldr	r2, [pc, #12]	; (8014b54 <_ZN11Screen1ViewC1Ev+0x20>)
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	601a      	str	r2, [r3, #0]

}
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	3708      	adds	r7, #8
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bd80      	pop	{r7, pc}
 8014b54:	0803080c 	.word	0x0803080c

08014b58 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen() {
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b088      	sub	sp, #32
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7ff fa08 	bl	8013f78 <_ZN15Screen1ViewBase11setupScreenEv>

	Unicode::UnicodeChar buffer[10];

	//.................UNITS.................

	Unicode::strncpy(buffer, "BAR", 10);
 8014b68:	f107 030c 	add.w	r3, r7, #12
 8014b6c:	220a      	movs	r2, #10
 8014b6e:	49d7      	ldr	r1, [pc, #860]	; (8014ecc <_ZN11Screen1View11setupScreenEv+0x374>)
 8014b70:	4618      	mov	r0, r3
 8014b72:	f00a fa34 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_unitsBuffer, 10, "%s", buffer);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	f603 3018 	addw	r0, r3, #2840	; 0xb18
 8014b7c:	f107 030c 	add.w	r3, r7, #12
 8014b80:	4ad3      	ldr	r2, [pc, #844]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b82:	210a      	movs	r1, #10
 8014b84:	f00a fd92 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f005 fb5a 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f008 fbe7 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "Lambda", 10);
 8014ba0:	f107 030c 	add.w	r3, r7, #12
 8014ba4:	220a      	movs	r2, #10
 8014ba6:	49cb      	ldr	r1, [pc, #812]	; (8014ed4 <_ZN11Screen1View11setupScreenEv+0x37c>)
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f00a fa18 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_unitsBuffer, 10, "%s", buffer);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f503 6045 	add.w	r0, r3, #3152	; 0xc50
 8014bb4:	f107 030c 	add.w	r3, r7, #12
 8014bb8:	4ac5      	ldr	r2, [pc, #788]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014bba:	210a      	movs	r1, #10
 8014bbc:	f00a fd76 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f005 fb3e 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f008 fbcb 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 8014bd8:	f107 030c 	add.w	r3, r7, #12
 8014bdc:	220a      	movs	r2, #10
 8014bde:	49bb      	ldr	r1, [pc, #748]	; (8014ecc <_ZN11Screen1View11setupScreenEv+0x374>)
 8014be0:	4618      	mov	r0, r3
 8014be2:	f00a f9fc 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_unitsBuffer, 10, "%s", buffer);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	f603 5088 	addw	r0, r3, #3464	; 0xd88
 8014bec:	f107 030c 	add.w	r3, r7, #12
 8014bf0:	4ab7      	ldr	r2, [pc, #732]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014bf2:	210a      	movs	r1, #10
 8014bf4:	f00a fd5a 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f005 fb22 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	f008 fbaf 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 8014c10:	f107 030c 	add.w	r3, r7, #12
 8014c14:	220a      	movs	r2, #10
 8014c16:	49ad      	ldr	r1, [pc, #692]	; (8014ecc <_ZN11Screen1View11setupScreenEv+0x374>)
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f00a f9e0 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_unitsBuffer, 10, "%s", buffer);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f503 605f 	add.w	r0, r3, #3568	; 0xdf0
 8014c24:	f107 030c 	add.w	r3, r7, #12
 8014c28:	4aa9      	ldr	r2, [pc, #676]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014c2a:	210a      	movs	r1, #10
 8014c2c:	f00a fd3e 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c36:	4618      	mov	r0, r3
 8014c38:	f005 fb06 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c42:	4618      	mov	r0, r3
 8014c44:	f008 fb93 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 8014c48:	f107 030c 	add.w	r3, r7, #12
 8014c4c:	220a      	movs	r2, #10
 8014c4e:	49a2      	ldr	r1, [pc, #648]	; (8014ed8 <_ZN11Screen1View11setupScreenEv+0x380>)
 8014c50:	4618      	mov	r0, r3
 8014c52:	f00a f9c4 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_unitsBuffer, 10, "%s", buffer);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f603 40b8 	addw	r0, r3, #3256	; 0xcb8
 8014c5c:	f107 030c 	add.w	r3, r7, #12
 8014c60:	4a9b      	ldr	r2, [pc, #620]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014c62:	210a      	movs	r1, #10
 8014c64:	f00a fd22 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f005 faea 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f008 fb77 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 8014c80:	f107 030c 	add.w	r3, r7, #12
 8014c84:	220a      	movs	r2, #10
 8014c86:	4994      	ldr	r1, [pc, #592]	; (8014ed8 <_ZN11Screen1View11setupScreenEv+0x380>)
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f00a f9a8 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_unitsBuffer, 10, "%s", buffer);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f503 6052 	add.w	r0, r3, #3360	; 0xd20
 8014c94:	f107 030c 	add.w	r3, r7, #12
 8014c98:	4a8d      	ldr	r2, [pc, #564]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014c9a:	210a      	movs	r1, #10
 8014c9c:	f00a fd06 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f005 face 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f008 fb5b 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "V", 10);
 8014cb8:	f107 030c 	add.w	r3, r7, #12
 8014cbc:	220a      	movs	r2, #10
 8014cbe:	4987      	ldr	r1, [pc, #540]	; (8014edc <_ZN11Screen1View11setupScreenEv+0x384>)
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f00a f98c 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_unitsBuffer, 10, "%s", buffer);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	f503 6038 	add.w	r0, r3, #2944	; 0xb80
 8014ccc:	f107 030c 	add.w	r3, r7, #12
 8014cd0:	4a7f      	ldr	r2, [pc, #508]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014cd2:	210a      	movs	r1, #10
 8014cd4:	f00a fcea 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f005 fab2 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014cea:	4618      	mov	r0, r3
 8014cec:	f008 fb3f 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "%", 10);
 8014cf0:	f107 030c 	add.w	r3, r7, #12
 8014cf4:	220a      	movs	r2, #10
 8014cf6:	497a      	ldr	r1, [pc, #488]	; (8014ee0 <_ZN11Screen1View11setupScreenEv+0x388>)
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	f00a f970 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_unitsBuffer, 10, "%s", buffer);
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f603 30e8 	addw	r0, r3, #3048	; 0xbe8
 8014d04:	f107 030c 	add.w	r3, r7, #12
 8014d08:	4a71      	ldr	r2, [pc, #452]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014d0a:	210a      	movs	r1, #10
 8014d0c:	f00a fcce 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014d16:	4618      	mov	r0, r3
 8014d18:	f005 fa96 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014d22:	4618      	mov	r0, r3
 8014d24:	f008 fb23 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	//.................LABELS.................

	Unicode::strncpy(buffer, "MAP", 10);
 8014d28:	f107 030c 	add.w	r3, r7, #12
 8014d2c:	220a      	movs	r2, #10
 8014d2e:	496d      	ldr	r1, [pc, #436]	; (8014ee4 <_ZN11Screen1View11setupScreenEv+0x38c>)
 8014d30:	4618      	mov	r0, r3
 8014d32:	f00a f954 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_labelBuffer, 10, "%s", buffer);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f603 3004 	addw	r0, r3, #2820	; 0xb04
 8014d3c:	f107 030c 	add.w	r3, r7, #12
 8014d40:	4a63      	ldr	r2, [pc, #396]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014d42:	210a      	movs	r1, #10
 8014d44:	f00a fcb2 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f005 fa7a 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f008 fb07 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "AFP", 10);
 8014d60:	f107 030c 	add.w	r3, r7, #12
 8014d64:	220a      	movs	r2, #10
 8014d66:	4960      	ldr	r1, [pc, #384]	; (8014ee8 <_ZN11Screen1View11setupScreenEv+0x390>)
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f00a f938 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_labelBuffer, 10, "%s", buffer);
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f603 403c 	addw	r0, r3, #3132	; 0xc3c
 8014d74:	f107 030c 	add.w	r3, r7, #12
 8014d78:	4a55      	ldr	r2, [pc, #340]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014d7a:	210a      	movs	r1, #10
 8014d7c:	f00a fc96 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014d86:	4618      	mov	r0, r3
 8014d88:	f005 fa5e 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8014d92:	4618      	mov	r0, r3
 8014d94:	f008 faeb 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "OIL P", 10);
 8014d98:	f107 030c 	add.w	r3, r7, #12
 8014d9c:	220a      	movs	r2, #10
 8014d9e:	4953      	ldr	r1, [pc, #332]	; (8014eec <_ZN11Screen1View11setupScreenEv+0x394>)
 8014da0:	4618      	mov	r0, r3
 8014da2:	f00a f91c 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_labelBuffer, 10, "%s", buffer);
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f603 5074 	addw	r0, r3, #3444	; 0xd74
 8014dac:	f107 030c 	add.w	r3, r7, #12
 8014db0:	4a47      	ldr	r2, [pc, #284]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014db2:	210a      	movs	r1, #10
 8014db4:	f00a fc7a 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f005 fa42 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f008 facf 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "FUEL P", 10);
 8014dd0:	f107 030c 	add.w	r3, r7, #12
 8014dd4:	220a      	movs	r2, #10
 8014dd6:	4946      	ldr	r1, [pc, #280]	; (8014ef0 <_ZN11Screen1View11setupScreenEv+0x398>)
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f00a f900 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_labelBuffer, 10, "%s", buffer);
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f603 50dc 	addw	r0, r3, #3548	; 0xddc
 8014de4:	f107 030c 	add.w	r3, r7, #12
 8014de8:	4a39      	ldr	r2, [pc, #228]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014dea:	210a      	movs	r1, #10
 8014dec:	f00a fc5e 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014df6:	4618      	mov	r0, r3
 8014df8:	f005 fa26 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014e02:	4618      	mov	r0, r3
 8014e04:	f008 fab3 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "ECT", 10);
 8014e08:	f107 030c 	add.w	r3, r7, #12
 8014e0c:	220a      	movs	r2, #10
 8014e0e:	4939      	ldr	r1, [pc, #228]	; (8014ef4 <_ZN11Screen1View11setupScreenEv+0x39c>)
 8014e10:	4618      	mov	r0, r3
 8014e12:	f00a f8e4 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_labelBuffer, 10, "%s", buffer);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f603 40a4 	addw	r0, r3, #3236	; 0xca4
 8014e1c:	f107 030c 	add.w	r3, r7, #12
 8014e20:	4a2b      	ldr	r2, [pc, #172]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014e22:	210a      	movs	r1, #10
 8014e24:	f00a fc42 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f005 fa0a 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f008 fa97 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "IAT", 10);
 8014e40:	f107 030c 	add.w	r3, r7, #12
 8014e44:	220a      	movs	r2, #10
 8014e46:	492c      	ldr	r1, [pc, #176]	; (8014ef8 <_ZN11Screen1View11setupScreenEv+0x3a0>)
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f00a f8c8 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_labelBuffer, 10, "%s", buffer);
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	f603 500c 	addw	r0, r3, #3340	; 0xd0c
 8014e54:	f107 030c 	add.w	r3, r7, #12
 8014e58:	4a1d      	ldr	r2, [pc, #116]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014e5a:	210a      	movs	r1, #10
 8014e5c:	f00a fc26 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014e66:	4618      	mov	r0, r3
 8014e68:	f005 f9ee 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014e72:	4618      	mov	r0, r3
 8014e74:	f008 fa7b 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BATTERY", 10);
 8014e78:	f107 030c 	add.w	r3, r7, #12
 8014e7c:	220a      	movs	r2, #10
 8014e7e:	491f      	ldr	r1, [pc, #124]	; (8014efc <_ZN11Screen1View11setupScreenEv+0x3a4>)
 8014e80:	4618      	mov	r0, r3
 8014e82:	f00a f8ac 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_labelBuffer, 10, "%s", buffer);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f603 306c 	addw	r0, r3, #2924	; 0xb6c
 8014e8c:	f107 030c 	add.w	r3, r7, #12
 8014e90:	4a0f      	ldr	r2, [pc, #60]	; (8014ed0 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014e92:	210a      	movs	r1, #10
 8014e94:	f00a fc0a 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f005 f9d2 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f008 fa5f 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "TPS", 10);
 8014eb0:	f107 030c 	add.w	r3, r7, #12
 8014eb4:	220a      	movs	r2, #10
 8014eb6:	4912      	ldr	r1, [pc, #72]	; (8014f00 <_ZN11Screen1View11setupScreenEv+0x3a8>)
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f00a f890 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_labelBuffer, 10, "%s", buffer);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f603 30d4 	addw	r0, r3, #3028	; 0xbd4
 8014ec4:	f107 030c 	add.w	r3, r7, #12
 8014ec8:	e01c      	b.n	8014f04 <_ZN11Screen1View11setupScreenEv+0x3ac>
 8014eca:	bf00      	nop
 8014ecc:	0802fba8 	.word	0x0802fba8
 8014ed0:	0802fbac 	.word	0x0802fbac
 8014ed4:	0802fbb0 	.word	0x0802fbb0
 8014ed8:	0802fbb8 	.word	0x0802fbb8
 8014edc:	0802fbbc 	.word	0x0802fbbc
 8014ee0:	0802fbc0 	.word	0x0802fbc0
 8014ee4:	0802fbc4 	.word	0x0802fbc4
 8014ee8:	0802fbc8 	.word	0x0802fbc8
 8014eec:	0802fbcc 	.word	0x0802fbcc
 8014ef0:	0802fbd4 	.word	0x0802fbd4
 8014ef4:	0802fbdc 	.word	0x0802fbdc
 8014ef8:	0802fbe0 	.word	0x0802fbe0
 8014efc:	0802fbe4 	.word	0x0802fbe4
 8014f00:	0802fbec 	.word	0x0802fbec
 8014f04:	4a09      	ldr	r2, [pc, #36]	; (8014f2c <_ZN11Screen1View11setupScreenEv+0x3d4>)
 8014f06:	210a      	movs	r1, #10
 8014f08:	f00a fbd0 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014f12:	4618      	mov	r0, r3
 8014f14:	f005 f998 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f008 fa25 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8014f24:	bf00      	nop
 8014f26:	3720      	adds	r7, #32
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}
 8014f2c:	0802fbac 	.word	0x0802fbac

08014f30 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen() {
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7fb fc3c 	bl	80107b8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014f40:	bf00      	nop
 8014f42:	3708      	adds	r7, #8
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent() {
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b08a      	sub	sp, #40	; 0x28
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
	Unicode::UnicodeChar buffer[16];

	map_value.invalidate();
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014f56:	4618      	mov	r0, r3
 8014f58:	f008 fa09 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.MAP * PSI_TO_BAR));
 8014f5c:	4bd1      	ldr	r3, [pc, #836]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f5e:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014f62:	ee07 3a90 	vmov	s15, r3
 8014f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f6a:	ed9f 7acf 	vldr	s14, [pc, #828]	; 80152a8 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f72:	f107 0308 	add.w	r3, r7, #8
 8014f76:	eeb0 0a67 	vmov.f32	s0, s15
 8014f7a:	4acc      	ldr	r2, [pc, #816]	; (80152ac <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014f7c:	2110      	movs	r1, #16
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f7ff fd90 	bl	8014aa4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(map_valueBuffer, 16, "%s", buffer);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f603 20c4 	addw	r0, r3, #2756	; 0xac4
 8014f8a:	f107 0308 	add.w	r3, r7, #8
 8014f8e:	4ac8      	ldr	r2, [pc, #800]	; (80152b0 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014f90:	2110      	movs	r1, #16
 8014f92:	f00a fb8b 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_value.resizeToCurrentTextWithAlignment();
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f005 f953 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_value.invalidate();
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f008 f9e0 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	batt_value.invalidate();
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f008 f9da 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f", (Current_Status.BATT / 100.00f));
 8014fba:	4bba      	ldr	r3, [pc, #744]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014fbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8014fc0:	ee07 3a90 	vmov	s15, r3
 8014fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fc8:	eddf 6aba 	vldr	s13, [pc, #744]	; 80152b4 <_ZN11Screen1View15handleTickEventEv+0x36c>
 8014fcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014fd0:	f107 0308 	add.w	r3, r7, #8
 8014fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8014fd8:	4ab4      	ldr	r2, [pc, #720]	; (80152ac <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014fda:	2110      	movs	r1, #16
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7ff fd61 	bl	8014aa4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(batt_valueBuffer, 16, "%s", buffer);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	f603 302c 	addw	r0, r3, #2860	; 0xb2c
 8014fe8:	f107 0308 	add.w	r3, r7, #8
 8014fec:	4ab0      	ldr	r2, [pc, #704]	; (80152b0 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014fee:	2110      	movs	r1, #16
 8014ff0:	f00a fb5c 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	batt_value.resizeToCurrentTextWithAlignment();
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f005 f924 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	batt_value.invalidate();
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8015006:	4618      	mov	r0, r3
 8015008:	f008 f9b1 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	tps_value.invalidate();
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8015012:	4618      	mov	r0, r3
 8015014:	f008 f9ab 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(tps_valueBuffer, 16, "%d", (Current_Status.TPS / 10));
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f603 3094 	addw	r0, r3, #2964	; 0xb94
 801501e:	4ba1      	ldr	r3, [pc, #644]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8015024:	4aa4      	ldr	r2, [pc, #656]	; (80152b8 <_ZN11Screen1View15handleTickEventEv+0x370>)
 8015026:	fba2 2303 	umull	r2, r3, r2, r3
 801502a:	08db      	lsrs	r3, r3, #3
 801502c:	b29b      	uxth	r3, r3
 801502e:	4aa3      	ldr	r2, [pc, #652]	; (80152bc <_ZN11Screen1View15handleTickEventEv+0x374>)
 8015030:	2110      	movs	r1, #16
 8015032:	f00a fb3b 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	tps_value.resizeToCurrentTextWithAlignment();
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 801503c:	4618      	mov	r0, r3
 801503e:	f005 f903 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	tps_value.invalidate();
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8015048:	4618      	mov	r0, r3
 801504a:	f008 f990 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	lambda_value.invalidate();
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8015054:	4618      	mov	r0, r3
 8015056:	f008 f98a 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f",
			(Current_Status.LAMBDA1 * AFR_TO_LAMBDA / 100.00f));
 801505a:	4b92      	ldr	r3, [pc, #584]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 801505c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801505e:	ee07 3a90 	vmov	s15, r3
 8015062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015066:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80152c0 <_ZN11Screen1View15handleTickEventEv+0x378>
 801506a:	ee67 7a87 	vmul.f32	s15, s15, s14
	Unicode::snprintfFloat(buffer, 16, "%.2f",
 801506e:	eddf 6a91 	vldr	s13, [pc, #580]	; 80152b4 <_ZN11Screen1View15handleTickEventEv+0x36c>
 8015072:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8015076:	f107 0308 	add.w	r3, r7, #8
 801507a:	eeb0 0a47 	vmov.f32	s0, s14
 801507e:	4a91      	ldr	r2, [pc, #580]	; (80152c4 <_ZN11Screen1View15handleTickEventEv+0x37c>)
 8015080:	2110      	movs	r1, #16
 8015082:	4618      	mov	r0, r3
 8015084:	f7ff fd0e 	bl	8014aa4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(lambda_valueBuffer, 16, "%s", buffer);
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f603 30fc 	addw	r0, r3, #3068	; 0xbfc
 801508e:	f107 0308 	add.w	r3, r7, #8
 8015092:	4a87      	ldr	r2, [pc, #540]	; (80152b0 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8015094:	2110      	movs	r1, #16
 8015096:	f00a fb09 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	lambda_value.resizeToCurrentTextWithAlignment();
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80150a0:	4618      	mov	r0, r3
 80150a2:	f005 f8d1 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_value.invalidate();
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80150ac:	4618      	mov	r0, r3
 80150ae:	f008 f95e 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	ect_value.invalidate();
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80150b8:	4618      	mov	r0, r3
 80150ba:	f008 f958 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(ect_valueBuffer, 16, "%d", Current_Status.ECT - 50);
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f603 4064 	addw	r0, r3, #3172	; 0xc64
 80150c4:	4b77      	ldr	r3, [pc, #476]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 80150c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80150ca:	3b32      	subs	r3, #50	; 0x32
 80150cc:	4a7b      	ldr	r2, [pc, #492]	; (80152bc <_ZN11Screen1View15handleTickEventEv+0x374>)
 80150ce:	2110      	movs	r1, #16
 80150d0:	f00a faec 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ect_value.resizeToCurrentTextWithAlignment();
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80150da:	4618      	mov	r0, r3
 80150dc:	f005 f8b4 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ect_value.invalidate();
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80150e6:	4618      	mov	r0, r3
 80150e8:	f008 f941 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	iat_value.invalidate();
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 80150f2:	4618      	mov	r0, r3
 80150f4:	f008 f93b 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(iat_valueBuffer, 16, "%d", Current_Status.IAT - 50);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f603 40cc 	addw	r0, r3, #3276	; 0xccc
 80150fe:	4b69      	ldr	r3, [pc, #420]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015100:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015104:	3b32      	subs	r3, #50	; 0x32
 8015106:	4a6d      	ldr	r2, [pc, #436]	; (80152bc <_ZN11Screen1View15handleTickEventEv+0x374>)
 8015108:	2110      	movs	r1, #16
 801510a:	f00a facf 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	iat_value.resizeToCurrentTextWithAlignment();
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8015114:	4618      	mov	r0, r3
 8015116:	f005 f897 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	iat_value.invalidate();
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8015120:	4618      	mov	r0, r3
 8015122:	f008 f924 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	oilp_value.invalidate();
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 801512c:	4618      	mov	r0, r3
 801512e:	f008 f91e 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.OILP * PSI_TO_BAR));
 8015132:	4b5c      	ldr	r3, [pc, #368]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015134:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015138:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 801513c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015140:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80152a8 <_ZN11Screen1View15handleTickEventEv+0x360>
 8015144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015148:	f107 0308 	add.w	r3, r7, #8
 801514c:	eeb0 0a67 	vmov.f32	s0, s15
 8015150:	4a56      	ldr	r2, [pc, #344]	; (80152ac <_ZN11Screen1View15handleTickEventEv+0x364>)
 8015152:	2110      	movs	r1, #16
 8015154:	4618      	mov	r0, r3
 8015156:	f7ff fca5 	bl	8014aa4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(oilp_valueBuffer, 16, "%s", buffer);
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f603 5034 	addw	r0, r3, #3380	; 0xd34
 8015160:	f107 0308 	add.w	r3, r7, #8
 8015164:	4a52      	ldr	r2, [pc, #328]	; (80152b0 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8015166:	2110      	movs	r1, #16
 8015168:	f00a faa0 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_value.resizeToCurrentTextWithAlignment();
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8015172:	4618      	mov	r0, r3
 8015174:	f005 f868 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_value.invalidate();
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 801517e:	4618      	mov	r0, r3
 8015180:	f008 f8f5 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	fuelp_value.invalidate();
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801518a:	4618      	mov	r0, r3
 801518c:	f008 f8ef 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.FUELP * PSI_TO_BAR));
 8015190:	4b44      	ldr	r3, [pc, #272]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015192:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8015196:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 801519a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801519e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80152a8 <_ZN11Screen1View15handleTickEventEv+0x360>
 80151a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80151a6:	f107 0308 	add.w	r3, r7, #8
 80151aa:	eeb0 0a67 	vmov.f32	s0, s15
 80151ae:	4a3f      	ldr	r2, [pc, #252]	; (80152ac <_ZN11Screen1View15handleTickEventEv+0x364>)
 80151b0:	2110      	movs	r1, #16
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7ff fc76 	bl	8014aa4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(fuelp_valueBuffer, 16, "%s", buffer);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f603 509c 	addw	r0, r3, #3484	; 0xd9c
 80151be:	f107 0308 	add.w	r3, r7, #8
 80151c2:	4a3b      	ldr	r2, [pc, #236]	; (80152b0 <_ZN11Screen1View15handleTickEventEv+0x368>)
 80151c4:	2110      	movs	r1, #16
 80151c6:	f00a fa71 	bl	801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_value.resizeToCurrentTextWithAlignment();
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80151d0:	4618      	mov	r0, r3
 80151d2:	f005 f839 	bl	801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_value.invalidate();
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80151dc:	4618      	mov	r0, r3
 80151de:	f008 f8c6 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indLeft.setVisible(Current_Status.IND_LEFT);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80151e8:	4b2e      	ldr	r3, [pc, #184]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 80151ea:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	bf14      	ite	ne
 80151f2:	2301      	movne	r3, #1
 80151f4:	2300      	moveq	r3, #0
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	4619      	mov	r1, r3
 80151fa:	4610      	mov	r0, r2
 80151fc:	f7ff fc66 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indLeft.invalidate();
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	33c4      	adds	r3, #196	; 0xc4
 8015204:	4618      	mov	r0, r3
 8015206:	f008 f8b2 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indHigh.setVisible(Current_Status.IND_HIGH);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8015210:	4b24      	ldr	r3, [pc, #144]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015212:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8015216:	2b00      	cmp	r3, #0
 8015218:	bf14      	ite	ne
 801521a:	2301      	movne	r3, #1
 801521c:	2300      	moveq	r3, #0
 801521e:	b2db      	uxtb	r3, r3
 8015220:	4619      	mov	r1, r3
 8015222:	4610      	mov	r0, r2
 8015224:	f7ff fc52 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indHigh.invalidate();
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801522e:	4618      	mov	r0, r3
 8015230:	f008 f89d 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indFuel.setVisible(Current_Status.IND_FUEL);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 801523a:	4b1a      	ldr	r3, [pc, #104]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 801523c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8015240:	2b00      	cmp	r3, #0
 8015242:	bf14      	ite	ne
 8015244:	2301      	movne	r3, #1
 8015246:	2300      	moveq	r3, #0
 8015248:	b2db      	uxtb	r3, r3
 801524a:	4619      	mov	r1, r3
 801524c:	4610      	mov	r0, r2
 801524e:	f7ff fc3d 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indFuel.invalidate();
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8015258:	4618      	mov	r0, r3
 801525a:	f008 f888 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indOil.setVisible(Current_Status.IND_OIL);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8015264:	4b0f      	ldr	r3, [pc, #60]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015266:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 801526a:	2b00      	cmp	r3, #0
 801526c:	bf14      	ite	ne
 801526e:	2301      	movne	r3, #1
 8015270:	2300      	moveq	r3, #0
 8015272:	b2db      	uxtb	r3, r3
 8015274:	4619      	mov	r1, r3
 8015276:	4610      	mov	r0, r2
 8015278:	f7ff fc28 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indOil.invalidate();
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8015282:	4618      	mov	r0, r3
 8015284:	f008 f873 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indBatt.setVisible(Current_Status.IND_BATT);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 801528e:	4b05      	ldr	r3, [pc, #20]	; (80152a4 <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8015290:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8015294:	2b00      	cmp	r3, #0
 8015296:	bf14      	ite	ne
 8015298:	2301      	movne	r3, #1
 801529a:	2300      	moveq	r3, #0
 801529c:	b2db      	uxtb	r3, r3
 801529e:	4619      	mov	r1, r3
 80152a0:	4610      	mov	r0, r2
 80152a2:	e011      	b.n	80152c8 <_ZN11Screen1View15handleTickEventEv+0x380>
 80152a4:	2000a57c 	.word	0x2000a57c
 80152a8:	3d8d3466 	.word	0x3d8d3466
 80152ac:	0802fbf0 	.word	0x0802fbf0
 80152b0:	0802fbac 	.word	0x0802fbac
 80152b4:	42c80000 	.word	0x42c80000
 80152b8:	cccccccd 	.word	0xcccccccd
 80152bc:	0802fbf8 	.word	0x0802fbf8
 80152c0:	416b3333 	.word	0x416b3333
 80152c4:	0802fbfc 	.word	0x0802fbfc
 80152c8:	f7ff fc00 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indBatt.invalidate();
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80152d2:	4618      	mov	r0, r3
 80152d4:	f008 f84b 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indPark.setVisible(Current_Status.IND_PARK);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f503 72e6 	add.w	r2, r3, #460	; 0x1cc
 80152de:	4b39      	ldr	r3, [pc, #228]	; (80153c4 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 80152e0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	bf14      	ite	ne
 80152e8:	2301      	movne	r3, #1
 80152ea:	2300      	moveq	r3, #0
 80152ec:	b2db      	uxtb	r3, r3
 80152ee:	4619      	mov	r1, r3
 80152f0:	4610      	mov	r0, r2
 80152f2:	f7ff fbeb 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indPark.invalidate();
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80152fc:	4618      	mov	r0, r3
 80152fe:	f008 f836 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indDTC.setVisible(Current_Status.IND_DTC);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8015308:	4b2e      	ldr	r3, [pc, #184]	; (80153c4 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 801530a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 801530e:	2b00      	cmp	r3, #0
 8015310:	bf14      	ite	ne
 8015312:	2301      	movne	r3, #1
 8015314:	2300      	moveq	r3, #0
 8015316:	b2db      	uxtb	r3, r3
 8015318:	4619      	mov	r1, r3
 801531a:	4610      	mov	r0, r2
 801531c:	f7ff fbd6 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indDTC.invalidate();
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8015326:	4618      	mov	r0, r3
 8015328:	f008 f821 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indECT.setVisible(Current_Status.IND_ECT);
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f503 7209 	add.w	r2, r3, #548	; 0x224
 8015332:	4b24      	ldr	r3, [pc, #144]	; (80153c4 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015334:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8015338:	2b00      	cmp	r3, #0
 801533a:	bf14      	ite	ne
 801533c:	2301      	movne	r3, #1
 801533e:	2300      	moveq	r3, #0
 8015340:	b2db      	uxtb	r3, r3
 8015342:	4619      	mov	r1, r3
 8015344:	4610      	mov	r0, r2
 8015346:	f7ff fbc1 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indECT.invalidate();
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8015350:	4618      	mov	r0, r3
 8015352:	f008 f80c 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indLow.setVisible(Current_Status.IND_LOW);
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f503 7214 	add.w	r2, r3, #592	; 0x250
 801535c:	4b19      	ldr	r3, [pc, #100]	; (80153c4 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 801535e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8015362:	2b00      	cmp	r3, #0
 8015364:	bf14      	ite	ne
 8015366:	2301      	movne	r3, #1
 8015368:	2300      	moveq	r3, #0
 801536a:	b2db      	uxtb	r3, r3
 801536c:	4619      	mov	r1, r3
 801536e:	4610      	mov	r0, r2
 8015370:	f7ff fbac 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indLow.invalidate();
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801537a:	4618      	mov	r0, r3
 801537c:	f007 fff7 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	indRight.setVisible(Current_Status.IND_RIGHT);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8015386:	4b0f      	ldr	r3, [pc, #60]	; (80153c4 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015388:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 801538c:	2b00      	cmp	r3, #0
 801538e:	bf14      	ite	ne
 8015390:	2301      	movne	r3, #1
 8015392:	2300      	moveq	r3, #0
 8015394:	b2db      	uxtb	r3, r3
 8015396:	4619      	mov	r1, r3
 8015398:	4610      	mov	r0, r2
 801539a:	f7ff fb97 	bl	8014acc <_ZN8touchgfx8Drawable10setVisibleEb>
	indRight.invalidate();
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	33f0      	adds	r3, #240	; 0xf0
 80153a2:	4618      	mov	r0, r3
 80153a4:	f007 ffe3 	bl	801d36e <_ZNK8touchgfx8Drawable10invalidateEv>

	gauge1.updateValue(Current_Status.RPM, 0);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 80153ae:	4a05      	ldr	r2, [pc, #20]	; (80153c4 <_ZN11Screen1View15handleTickEventEv+0x47c>)
 80153b0:	8812      	ldrh	r2, [r2, #0]
 80153b2:	4611      	mov	r1, r2
 80153b4:	2200      	movs	r2, #0
 80153b6:	4618      	mov	r0, r3
 80153b8:	f001 fe91 	bl	80170de <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
	//gauge1.set
	//gauge1.invalidate();

}
 80153bc:	bf00      	nop
 80153be:	3728      	adds	r7, #40	; 0x28
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}
 80153c4:	2000a57c 	.word	0x2000a57c

080153c8 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80153c8:	b480      	push	{r7}
 80153ca:	b083      	sub	sp, #12
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
    {
 80153d0:	4a04      	ldr	r2, [pc, #16]	; (80153e4 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	601a      	str	r2, [r3, #0]
    }
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	4618      	mov	r0, r3
 80153da:	370c      	adds	r7, #12
 80153dc:	46bd      	mov	sp, r7
 80153de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e2:	4770      	bx	lr
 80153e4:	08030858 	.word	0x08030858

080153e8 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
    }
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f7ff ffe9 	bl	80153c8 <_ZN8touchgfx15TouchControllerD1Ev>
 80153f6:	2104      	movs	r1, #4
 80153f8:	6878      	ldr	r0, [r7, #4]
 80153fa:	f018 f8ec 	bl	802d5d6 <_ZdlPvj>
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	4618      	mov	r0, r3
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}

08015408 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8015408:	b480      	push	{r7}
 801540a:	b083      	sub	sp, #12
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8015410:	bf00      	nop
 8015412:	370c      	adds	r7, #12
 8015414:	46bd      	mov	sp, r7
 8015416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541a:	4770      	bx	lr

0801541c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801541c:	b480      	push	{r7}
 801541e:	b085      	sub	sp, #20
 8015420:	af00      	add	r7, sp, #0
 8015422:	60f8      	str	r0, [r7, #12]
 8015424:	60b9      	str	r1, [r7, #8]
 8015426:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8015428:	2300      	movs	r3, #0
}
 801542a:	4618      	mov	r0, r3
 801542c:	3714      	adds	r7, #20
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr
	...

08015438 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	4a05      	ldr	r2, [pc, #20]	; (8015458 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	601a      	str	r2, [r3, #0]
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	4618      	mov	r0, r3
 801544a:	f7ff ffbd 	bl	80153c8 <_ZN8touchgfx15TouchControllerD1Ev>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	4618      	mov	r0, r3
 8015452:	3708      	adds	r7, #8
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}
 8015458:	08030840 	.word	0x08030840

0801545c <_ZN20STM32TouchControllerD0Ev>:
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f7ff ffe7 	bl	8015438 <_ZN20STM32TouchControllerD1Ev>
 801546a:	2104      	movs	r1, #4
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f018 f8b2 	bl	802d5d6 <_ZdlPvj>
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	4618      	mov	r0, r3
 8015476:	3708      	adds	r7, #8
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801547c:	b480      	push	{r7}
 801547e:	b083      	sub	sp, #12
 8015480:	af00      	add	r7, sp, #0
 8015482:	4603      	mov	r3, r0
 8015484:	71fb      	strb	r3, [r7, #7]

}
 8015486:	bf00      	nop
 8015488:	370c      	adds	r7, #12
 801548a:	46bd      	mov	sp, r7
 801548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015490:	4770      	bx	lr

08015492 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8015492:	b480      	push	{r7}
 8015494:	b083      	sub	sp, #12
 8015496:	af00      	add	r7, sp, #0
 8015498:	4603      	mov	r3, r0
 801549a:	71fb      	strb	r3, [r7, #7]

}
 801549c:	bf00      	nop
 801549e:	370c      	adds	r7, #12
 80154a0:	46bd      	mov	sp, r7
 80154a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a6:	4770      	bx	lr

080154a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80154a8:	b480      	push	{r7}
 80154aa:	b083      	sub	sp, #12
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	4603      	mov	r3, r0
 80154b0:	71fb      	strb	r3, [r7, #7]

}
 80154b2:	bf00      	nop
 80154b4:	370c      	adds	r7, #12
 80154b6:	46bd      	mov	sp, r7
 80154b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154bc:	4770      	bx	lr
	...

080154c0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80154c0:	b480      	push	{r7}
 80154c2:	b083      	sub	sp, #12
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
    {
 80154c8:	4a04      	ldr	r2, [pc, #16]	; (80154dc <_ZN8touchgfx3HALD1Ev+0x1c>)
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	601a      	str	r2, [r3, #0]
    }
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	4618      	mov	r0, r3
 80154d2:	370c      	adds	r7, #12
 80154d4:	46bd      	mov	sp, r7
 80154d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154da:	4770      	bx	lr
 80154dc:	080312e0 	.word	0x080312e0

080154e0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b082      	sub	sp, #8
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
    }
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f7ff ffe9 	bl	80154c0 <_ZN8touchgfx3HALD1Ev>
 80154ee:	217c      	movs	r1, #124	; 0x7c
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f018 f870 	bl	802d5d6 <_ZdlPvj>
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	4618      	mov	r0, r3
 80154fa:	3708      	adds	r7, #8
 80154fc:	46bd      	mov	sp, r7
 80154fe:	bd80      	pop	{r7, pc}

08015500 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8015500:	b480      	push	{r7}
 8015502:	b083      	sub	sp, #12
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	460b      	mov	r3, r1
 801550a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	78fa      	ldrb	r2, [r7, #3]
 8015510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2201      	movs	r2, #1
 8015518:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 801551c:	bf00      	nop
 801551e:	370c      	adds	r7, #12
 8015520:	46bd      	mov	sp, r7
 8015522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015526:	4770      	bx	lr

08015528 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8015528:	b580      	push	{r7, lr}
 801552a:	b082      	sub	sp, #8
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
 8015530:	460b      	mov	r3, r1
 8015532:	807b      	strh	r3, [r7, #2]
 8015534:	4613      	mov	r3, r2
 8015536:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8015538:	4b0c      	ldr	r3, [pc, #48]	; (801556c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 801553a:	881b      	ldrh	r3, [r3, #0]
 801553c:	887a      	ldrh	r2, [r7, #2]
 801553e:	429a      	cmp	r2, r3
 8015540:	d304      	bcc.n	801554c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8015542:	4b0b      	ldr	r3, [pc, #44]	; (8015570 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8015544:	881b      	ldrh	r3, [r3, #0]
 8015546:	883a      	ldrh	r2, [r7, #0]
 8015548:	429a      	cmp	r2, r3
 801554a:	d205      	bcs.n	8015558 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 801554c:	4b09      	ldr	r3, [pc, #36]	; (8015574 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 801554e:	4a0a      	ldr	r2, [pc, #40]	; (8015578 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8015550:	219e      	movs	r1, #158	; 0x9e
 8015552:	480a      	ldr	r0, [pc, #40]	; (801557c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8015554:	f018 fe5e 	bl	802e214 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8015558:	4a09      	ldr	r2, [pc, #36]	; (8015580 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 801555a:	887b      	ldrh	r3, [r7, #2]
 801555c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 801555e:	4a09      	ldr	r2, [pc, #36]	; (8015584 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8015560:	883b      	ldrh	r3, [r7, #0]
 8015562:	8013      	strh	r3, [r2, #0]
    }
 8015564:	bf00      	nop
 8015566:	3708      	adds	r7, #8
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}
 801556c:	20009814 	.word	0x20009814
 8015570:	20009816 	.word	0x20009816
 8015574:	0802fc04 	.word	0x0802fc04
 8015578:	0802fc68 	.word	0x0802fc68
 801557c:	0802fcac 	.word	0x0802fcac
 8015580:	2000981a 	.word	0x2000981a
 8015584:	2000981c 	.word	0x2000981c

08015588 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8015588:	b580      	push	{r7, lr}
 801558a:	b082      	sub	sp, #8
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8015596:	2b00      	cmp	r3, #0
 8015598:	d009      	beq.n	80155ae <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	685a      	ldr	r2, [r3, #4]
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	4610      	mov	r0, r2
 80155a8:	4798      	blx	r3
 80155aa:	4603      	mov	r3, r0
 80155ac:	e000      	b.n	80155b0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80155ae:	2300      	movs	r3, #0
    }
 80155b0:	4618      	mov	r0, r3
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b082      	sub	sp, #8
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f003 f821 	bl	8018608 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	33a4      	adds	r3, #164	; 0xa4
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	6878      	ldr	r0, [r7, #4]
 80155d0:	4798      	blx	r3
    }
 80155d2:	bf00      	nop
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}

080155da <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80155da:	b480      	push	{r7}
 80155dc:	b083      	sub	sp, #12
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
 80155e2:	6039      	str	r1, [r7, #0]
    {
        return false;
 80155e4:	2300      	movs	r3, #0
    }
 80155e6:	4618      	mov	r0, r3
 80155e8:	370c      	adds	r7, #12
 80155ea:	46bd      	mov	sp, r7
 80155ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f0:	4770      	bx	lr
	...

080155f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]
 8015600:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8015602:	68bb      	ldr	r3, [r7, #8]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d106      	bne.n	8015616 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015608:	4b11      	ldr	r3, [pc, #68]	; (8015650 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801560a:	4a12      	ldr	r2, [pc, #72]	; (8015654 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801560c:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8015610:	4811      	ldr	r0, [pc, #68]	; (8015658 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8015612:	f018 fdff 	bl	802e214 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	68ba      	ldr	r2, [r7, #8]
 801561a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	687a      	ldr	r2, [r7, #4]
 8015620:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	683a      	ldr	r2, [r7, #0]
 8015626:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2b00      	cmp	r3, #0
 801562c:	bf14      	ite	ne
 801562e:	2301      	movne	r3, #1
 8015630:	2300      	moveq	r3, #0
 8015632:	b2da      	uxtb	r2, r3
 8015634:	4b09      	ldr	r3, [pc, #36]	; (801565c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8015636:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	2b00      	cmp	r3, #0
 801563c:	bf14      	ite	ne
 801563e:	2301      	movne	r3, #1
 8015640:	2300      	moveq	r3, #0
 8015642:	b2da      	uxtb	r2, r3
 8015644:	4b06      	ldr	r3, [pc, #24]	; (8015660 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8015646:	701a      	strb	r2, [r3, #0]
    }
 8015648:	bf00      	nop
 801564a:	3710      	adds	r7, #16
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}
 8015650:	0802fcf0 	.word	0x0802fcf0
 8015654:	0802fd28 	.word	0x0802fd28
 8015658:	0802fcac 	.word	0x0802fcac
 801565c:	2000981e 	.word	0x2000981e
 8015660:	2000981f 	.word	0x2000981f

08015664 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8015664:	b480      	push	{r7}
 8015666:	b083      	sub	sp, #12
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801566c:	2300      	movs	r3, #0
    }
 801566e:	4618      	mov	r0, r3
 8015670:	370c      	adds	r7, #12
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr

0801567a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 801567a:	b580      	push	{r7, lr}
 801567c:	b082      	sub	sp, #8
 801567e:	af00      	add	r7, sp, #0
 8015680:	6078      	str	r0, [r7, #4]
 8015682:	460b      	mov	r3, r1
 8015684:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801568a:	2b00      	cmp	r3, #0
 801568c:	d004      	beq.n	8015698 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015692:	887a      	ldrh	r2, [r7, #2]
 8015694:	4610      	mov	r0, r2
 8015696:	4798      	blx	r3
        }
    }
 8015698:	bf00      	nop
 801569a:	3708      	adds	r7, #8
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}

080156a0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80156a0:	b480      	push	{r7}
 80156a2:	b083      	sub	sp, #12
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80156a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80156ac:	4618      	mov	r0, r3
 80156ae:	370c      	adds	r7, #12
 80156b0:	46bd      	mov	sp, r7
 80156b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b6:	4770      	bx	lr

080156b8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	685a      	ldr	r2, [r3, #4]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	685b      	ldr	r3, [r3, #4]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	3318      	adds	r3, #24
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	4610      	mov	r0, r2
 80156d0:	4798      	blx	r3
 80156d2:	4603      	mov	r3, r0
    }
 80156d4:	4618      	mov	r0, r3
 80156d6:	3708      	adds	r7, #8
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}

080156dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80156dc:	b480      	push	{r7}
 80156de:	b085      	sub	sp, #20
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80156f0:	429a      	cmp	r2, r3
 80156f2:	d011      	beq.n	8015718 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80156f4:	4b14      	ldr	r3, [pc, #80]	; (8015748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d11e      	bne.n	801573a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80156fc:	4b13      	ldr	r3, [pc, #76]	; (801574c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80156fe:	881b      	ldrh	r3, [r3, #0]
 8015700:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8015702:	4b13      	ldr	r3, [pc, #76]	; (8015750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8015704:	881a      	ldrh	r2, [r3, #0]
 8015706:	4b11      	ldr	r3, [pc, #68]	; (801574c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8015708:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801570a:	4a11      	ldr	r2, [pc, #68]	; (8015750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801570c:	89bb      	ldrh	r3, [r7, #12]
 801570e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8015710:	4b0d      	ldr	r3, [pc, #52]	; (8015748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8015712:	2201      	movs	r2, #1
 8015714:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8015716:	e010      	b.n	801573a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8015718:	4b0b      	ldr	r3, [pc, #44]	; (8015748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801571a:	781b      	ldrb	r3, [r3, #0]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d00c      	beq.n	801573a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8015720:	4b0a      	ldr	r3, [pc, #40]	; (801574c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8015722:	881b      	ldrh	r3, [r3, #0]
 8015724:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8015726:	4b0a      	ldr	r3, [pc, #40]	; (8015750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8015728:	881a      	ldrh	r2, [r3, #0]
 801572a:	4b08      	ldr	r3, [pc, #32]	; (801574c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801572c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 801572e:	4a08      	ldr	r2, [pc, #32]	; (8015750 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8015730:	89fb      	ldrh	r3, [r7, #14]
 8015732:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8015734:	4b04      	ldr	r3, [pc, #16]	; (8015748 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8015736:	2200      	movs	r2, #0
 8015738:	701a      	strb	r2, [r3, #0]
    }
 801573a:	bf00      	nop
 801573c:	3714      	adds	r7, #20
 801573e:	46bd      	mov	sp, r7
 8015740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015744:	4770      	bx	lr
 8015746:	bf00      	nop
 8015748:	20009818 	.word	0x20009818
 801574c:	20009816 	.word	0x20009816
 8015750:	20009814 	.word	0x20009814

08015754 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8015754:	b480      	push	{r7}
 8015756:	b083      	sub	sp, #12
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
    {
    }
 801575c:	bf00      	nop
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr

08015768 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
    {
    }
 8015770:	bf00      	nop
 8015772:	370c      	adds	r7, #12
 8015774:	46bd      	mov	sp, r7
 8015776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577a:	4770      	bx	lr

0801577c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801577c:	b580      	push	{r7, lr}
 801577e:	b082      	sub	sp, #8
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	4618      	mov	r0, r3
 8015788:	f002 f8da 	bl	8017940 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801578c:	bf00      	nop
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8015794:	b580      	push	{r7, lr}
 8015796:	b082      	sub	sp, #8
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	4a05      	ldr	r2, [pc, #20]	; (80157b4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	601a      	str	r2, [r3, #0]
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7ff fe8b 	bl	80154c0 <_ZN8touchgfx3HALD1Ev>
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	4618      	mov	r0, r3
 80157ae:	3708      	adds	r7, #8
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}
 80157b4:	08030a88 	.word	0x08030a88

080157b8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f7ff ffe7 	bl	8015794 <_ZN20TouchGFXGeneratedHALD1Ev>
 80157c6:	217c      	movs	r1, #124	; 0x7c
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f017 ff04 	bl	802d5d6 <_ZdlPvj>
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	4618      	mov	r0, r3
 80157d2:	3708      	adds	r7, #8
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80157d8:	b580      	push	{r7, lr}
 80157da:	b082      	sub	sp, #8
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	4618      	mov	r0, r3
 80157e4:	f7ff ffca 	bl	801577c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80157e8:	bf00      	nop
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}

080157f0 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	4618      	mov	r0, r3
 80157fc:	f001 fa8c 	bl	8016d18 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8015800:	bf00      	nop
 8015802:	3708      	adds	r7, #8
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	4618      	mov	r0, r3
 8015814:	f001 fb18 	bl	8016e48 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8015818:	4603      	mov	r3, r0
}
 801581a:	4618      	mov	r0, r3
 801581c:	3708      	adds	r7, #8
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}

08015822 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8015822:	b580      	push	{r7, lr}
 8015824:	b082      	sub	sp, #8
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
 801582a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6839      	ldr	r1, [r7, #0]
 8015830:	4618      	mov	r0, r3
 8015832:	f001 fb17 	bl	8016e64 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8015836:	bf00      	nop
 8015838:	3708      	adds	r7, #8
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}

0801583e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801583e:	b580      	push	{r7, lr}
 8015840:	b082      	sub	sp, #8
 8015842:	af00      	add	r7, sp, #0
 8015844:	6078      	str	r0, [r7, #4]
 8015846:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	6839      	ldr	r1, [r7, #0]
 801584c:	4618      	mov	r0, r3
 801584e:	f001 fb1f 	bl	8016e90 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8015852:	bf00      	nop
 8015854:	3708      	adds	r7, #8
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}

0801585a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801585a:	b580      	push	{r7, lr}
 801585c:	b084      	sub	sp, #16
 801585e:	af00      	add	r7, sp, #0
 8015860:	60f8      	str	r0, [r7, #12]
 8015862:	60b9      	str	r1, [r7, #8]
 8015864:	607a      	str	r2, [r7, #4]
 8015866:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8015868:	68f8      	ldr	r0, [r7, #12]
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	687a      	ldr	r2, [r7, #4]
 801586e:	68b9      	ldr	r1, [r7, #8]
 8015870:	f001 fb1c 	bl	8016eac <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8015874:	4603      	mov	r3, r0
}
 8015876:	4618      	mov	r0, r3
 8015878:	3710      	adds	r7, #16
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}

0801587e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801587e:	b580      	push	{r7, lr}
 8015880:	b082      	sub	sp, #8
 8015882:	af00      	add	r7, sp, #0
 8015884:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	4618      	mov	r0, r3
 801588a:	f001 fa69 	bl	8016d60 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801588e:	bf00      	nop
 8015890:	3708      	adds	r7, #8
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}

08015896 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8015896:	b580      	push	{r7, lr}
 8015898:	b082      	sub	sp, #8
 801589a:	af00      	add	r7, sp, #0
 801589c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	4618      	mov	r0, r3
 80158a2:	f001 fa6d 	bl	8016d80 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80158a6:	bf00      	nop
 80158a8:	3708      	adds	r7, #8
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}

080158ae <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80158ae:	b580      	push	{r7, lr}
 80158b0:	b082      	sub	sp, #8
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	4618      	mov	r0, r3
 80158ba:	f001 fa6f 	bl	8016d9c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80158be:	bf00      	nop
 80158c0:	3708      	adds	r7, #8
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}

080158c6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80158c6:	b580      	push	{r7, lr}
 80158c8:	b082      	sub	sp, #8
 80158ca:	af00      	add	r7, sp, #0
 80158cc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	4618      	mov	r0, r3
 80158d2:	f001 fa71 	bl	8016db8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80158d6:	bf00      	nop
 80158d8:	3708      	adds	r7, #8
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}
	...

080158e0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	4a05      	ldr	r2, [pc, #20]	; (8015900 <_ZN11TouchGFXHALD1Ev+0x20>)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	601a      	str	r2, [r3, #0]
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7ff ff4f 	bl	8015794 <_ZN20TouchGFXGeneratedHALD1Ev>
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	4618      	mov	r0, r3
 80158fa:	3708      	adds	r7, #8
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	08030870 	.word	0x08030870

08015904 <_ZN11TouchGFXHALD0Ev>:
 8015904:	b580      	push	{r7, lr}
 8015906:	b082      	sub	sp, #8
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f7ff ffe7 	bl	80158e0 <_ZN11TouchGFXHALD1Ev>
 8015912:	217c      	movs	r1, #124	; 0x7c
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f017 fe5e 	bl	802d5d6 <_ZdlPvj>
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	4618      	mov	r0, r3
 801591e:	3708      	adds	r7, #8
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8015924:	b580      	push	{r7, lr}
 8015926:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8015928:	2200      	movs	r2, #0
 801592a:	2101      	movs	r1, #1
 801592c:	2001      	movs	r0, #1
 801592e:	f7f6 f9fd 	bl	800bd2c <osSemaphoreNew>
 8015932:	4603      	mov	r3, r0
 8015934:	4a0f      	ldr	r2, [pc, #60]	; (8015974 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8015936:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8015938:	4b0e      	ldr	r3, [pc, #56]	; (8015974 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d105      	bne.n	801594c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8015940:	4b0d      	ldr	r3, [pc, #52]	; (8015978 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8015942:	4a0e      	ldr	r2, [pc, #56]	; (801597c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015944:	2128      	movs	r1, #40	; 0x28
 8015946:	480e      	ldr	r0, [pc, #56]	; (8015980 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015948:	f018 fc64 	bl	802e214 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 801594c:	2200      	movs	r2, #0
 801594e:	2104      	movs	r1, #4
 8015950:	2001      	movs	r0, #1
 8015952:	f7f6 fb0b 	bl	800bf6c <osMessageQueueNew>
 8015956:	4603      	mov	r3, r0
 8015958:	4a0a      	ldr	r2, [pc, #40]	; (8015984 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801595a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 801595c:	4b09      	ldr	r3, [pc, #36]	; (8015984 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d105      	bne.n	8015970 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8015964:	4b08      	ldr	r3, [pc, #32]	; (8015988 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8015966:	4a05      	ldr	r2, [pc, #20]	; (801597c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8015968:	212c      	movs	r1, #44	; 0x2c
 801596a:	4805      	ldr	r0, [pc, #20]	; (8015980 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801596c:	f018 fc52 	bl	802e214 <__assert_func>
}
 8015970:	bf00      	nop
 8015972:	bd80      	pop	{r7, pc}
 8015974:	20007b40 	.word	0x20007b40
 8015978:	0802fd78 	.word	0x0802fd78
 801597c:	0802fdc4 	.word	0x0802fdc4
 8015980:	0802fdf4 	.word	0x0802fdf4
 8015984:	20007b44 	.word	0x20007b44
 8015988:	0802fe20 	.word	0x0802fe20

0801598c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801598c:	b580      	push	{r7, lr}
 801598e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8015990:	4b04      	ldr	r3, [pc, #16]	; (80159a4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f04f 31ff 	mov.w	r1, #4294967295
 8015998:	4618      	mov	r0, r3
 801599a:	f7f6 fa51 	bl	800be40 <osSemaphoreAcquire>
}
 801599e:	bf00      	nop
 80159a0:	bd80      	pop	{r7, pc}
 80159a2:	bf00      	nop
 80159a4:	20007b40 	.word	0x20007b40

080159a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80159ac:	4b03      	ldr	r3, [pc, #12]	; (80159bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7f6 fa97 	bl	800bee4 <osSemaphoreRelease>
}
 80159b6:	bf00      	nop
 80159b8:	bd80      	pop	{r7, pc}
 80159ba:	bf00      	nop
 80159bc:	20007b40 	.word	0x20007b40

080159c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80159c4:	4b03      	ldr	r3, [pc, #12]	; (80159d4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	2100      	movs	r1, #0
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7f6 fa38 	bl	800be40 <osSemaphoreAcquire>
}
 80159d0:	bf00      	nop
 80159d2:	bd80      	pop	{r7, pc}
 80159d4:	20007b40 	.word	0x20007b40

080159d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80159dc:	4b03      	ldr	r3, [pc, #12]	; (80159ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7f6 fa7f 	bl	800bee4 <osSemaphoreRelease>
}
 80159e6:	bf00      	nop
 80159e8:	bd80      	pop	{r7, pc}
 80159ea:	bf00      	nop
 80159ec:	20007b40 	.word	0x20007b40

080159f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80159f4:	4b04      	ldr	r3, [pc, #16]	; (8015a08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80159f6:	6818      	ldr	r0, [r3, #0]
 80159f8:	2300      	movs	r3, #0
 80159fa:	2200      	movs	r2, #0
 80159fc:	4903      	ldr	r1, [pc, #12]	; (8015a0c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80159fe:	f7f6 fb29 	bl	800c054 <osMessageQueuePut>
}
 8015a02:	bf00      	nop
 8015a04:	bd80      	pop	{r7, pc}
 8015a06:	bf00      	nop
 8015a08:	20007b44 	.word	0x20007b44
 8015a0c:	20000018 	.word	0x20000018

08015a10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b082      	sub	sp, #8
 8015a14:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8015a16:	4b09      	ldr	r3, [pc, #36]	; (8015a3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8015a18:	6818      	ldr	r0, [r3, #0]
 8015a1a:	1d39      	adds	r1, r7, #4
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	2200      	movs	r2, #0
 8015a20:	f7f6 fb78 	bl	800c114 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8015a24:	4b05      	ldr	r3, [pc, #20]	; (8015a3c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8015a26:	6818      	ldr	r0, [r3, #0]
 8015a28:	1d39      	adds	r1, r7, #4
 8015a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a2e:	2200      	movs	r2, #0
 8015a30:	f7f6 fb70 	bl	800c114 <osMessageQueueGet>
}
 8015a34:	bf00      	nop
 8015a36:	3708      	adds	r7, #8
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}
 8015a3c:	20007b44 	.word	0x20007b44

08015a40 <__NVIC_EnableIRQ>:
{
 8015a40:	b480      	push	{r7}
 8015a42:	b083      	sub	sp, #12
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	4603      	mov	r3, r0
 8015a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	db0b      	blt.n	8015a6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015a52:	79fb      	ldrb	r3, [r7, #7]
 8015a54:	f003 021f 	and.w	r2, r3, #31
 8015a58:	4907      	ldr	r1, [pc, #28]	; (8015a78 <__NVIC_EnableIRQ+0x38>)
 8015a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a5e:	095b      	lsrs	r3, r3, #5
 8015a60:	2001      	movs	r0, #1
 8015a62:	fa00 f202 	lsl.w	r2, r0, r2
 8015a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015a6a:	bf00      	nop
 8015a6c:	370c      	adds	r7, #12
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a74:	4770      	bx	lr
 8015a76:	bf00      	nop
 8015a78:	e000e100 	.word	0xe000e100

08015a7c <__NVIC_DisableIRQ>:
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b083      	sub	sp, #12
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	4603      	mov	r3, r0
 8015a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	db12      	blt.n	8015ab4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015a8e:	79fb      	ldrb	r3, [r7, #7]
 8015a90:	f003 021f 	and.w	r2, r3, #31
 8015a94:	490a      	ldr	r1, [pc, #40]	; (8015ac0 <__NVIC_DisableIRQ+0x44>)
 8015a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a9a:	095b      	lsrs	r3, r3, #5
 8015a9c:	2001      	movs	r0, #1
 8015a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8015aa2:	3320      	adds	r3, #32
 8015aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8015aa8:	f3bf 8f4f 	dsb	sy
}
 8015aac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015aae:	f3bf 8f6f 	isb	sy
}
 8015ab2:	bf00      	nop
}
 8015ab4:	bf00      	nop
 8015ab6:	370c      	adds	r7, #12
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015abe:	4770      	bx	lr
 8015ac0:	e000e100 	.word	0xe000e100

08015ac4 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8015ac4:	b480      	push	{r7}
 8015ac6:	b083      	sub	sp, #12
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
        return color;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	681b      	ldr	r3, [r3, #0]
    }
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	370c      	adds	r7, #12
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ada:	4770      	bx	lr

08015adc <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8015adc:	b480      	push	{r7}
 8015ade:	b083      	sub	sp, #12
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
    {
 8015ae4:	4a04      	ldr	r2, [pc, #16]	; (8015af8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	601a      	str	r2, [r3, #0]
    }
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	4618      	mov	r0, r3
 8015aee:	370c      	adds	r7, #12
 8015af0:	46bd      	mov	sp, r7
 8015af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af6:	4770      	bx	lr
 8015af8:	08030990 	.word	0x08030990

08015afc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
    }
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f7ff ffe9 	bl	8015adc <_ZN8touchgfx9DMA_QueueD1Ev>
 8015b0a:	2104      	movs	r1, #4
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f017 fd62 	bl	802d5d6 <_ZdlPvj>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	4618      	mov	r0, r3
 8015b16:	3708      	adds	r7, #8
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}

08015b1c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	3344      	adds	r3, #68	; 0x44
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	4798      	blx	r3
    }
 8015b30:	bf00      	nop
 8015b32:	3708      	adds	r7, #8
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
    {
 8015b40:	4a04      	ldr	r2, [pc, #16]	; (8015b54 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	601a      	str	r2, [r3, #0]
    }
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	4618      	mov	r0, r3
 8015b4a:	370c      	adds	r7, #12
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b52:	4770      	bx	lr
 8015b54:	08031838 	.word	0x08031838

08015b58 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
    }
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	f7ff ffe9 	bl	8015b38 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8015b66:	210c      	movs	r1, #12
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f017 fd34 	bl	802d5d6 <_ZdlPvj>
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	4618      	mov	r0, r3
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8015b78:	b480      	push	{r7}
 8015b7a:	b083      	sub	sp, #12
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8015b82:	4a09      	ldr	r2, [pc, #36]	; (8015ba8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	601a      	str	r2, [r3, #0]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	683a      	ldr	r2, [r7, #0]
 8015b8c:	605a      	str	r2, [r3, #4]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2200      	movs	r2, #0
 8015b92:	721a      	strb	r2, [r3, #8]
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	2200      	movs	r2, #0
 8015b98:	725a      	strb	r2, [r3, #9]
    {
    }
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	370c      	adds	r7, #12
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr
 8015ba8:	08031838 	.word	0x08031838

08015bac <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8015bac:	b480      	push	{r7}
 8015bae:	b083      	sub	sp, #12
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8015bb4:	2301      	movs	r3, #1
    }
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	370c      	adds	r7, #12
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc0:	4770      	bx	lr

08015bc2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8015bc2:	b580      	push	{r7, lr}
 8015bc4:	b082      	sub	sp, #8
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8015bca:	687a      	ldr	r2, [r7, #4]
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	3328      	adds	r3, #40	; 0x28
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	4610      	mov	r0, r2
 8015bd6:	4798      	blx	r3
    }
 8015bd8:	bf00      	nop
 8015bda:	3708      	adds	r7, #8
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b082      	sub	sp, #8
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	685a      	ldr	r2, [r3, #4]
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	685b      	ldr	r3, [r3, #4]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	3314      	adds	r3, #20
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	4610      	mov	r0, r2
 8015bf8:	4798      	blx	r3
    }
 8015bfa:	bf00      	nop
 8015bfc:	3708      	adds	r7, #8
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}

08015c02 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8015c02:	b580      	push	{r7, lr}
 8015c04:	b082      	sub	sp, #8
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8015c0a:	f7f9 ff0f 	bl	800fa2c <_ZN8touchgfx3HAL11getInstanceEv>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	4618      	mov	r0, r3
 8015c12:	f7ff ffe5 	bl	8015be0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8015c16:	bf00      	nop
 8015c18:	3708      	adds	r7, #8
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}

08015c1e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8015c1e:	b580      	push	{r7, lr}
 8015c20:	b082      	sub	sp, #8
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	330c      	adds	r3, #12
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7fa fb7a 	bl	8010324 <_ZN8touchgfx9colortypeC1Ev>
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	4618      	mov	r0, r3
 8015c34:	3708      	adds	r7, #8
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
	...

08015c3c <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8015c3c:	b5b0      	push	{r4, r5, r7, lr}
 8015c3e:	b082      	sub	sp, #8
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	330c      	adds	r3, #12
 8015c4a:	4619      	mov	r1, r3
 8015c4c:	4610      	mov	r0, r2
 8015c4e:	f7ff ff93 	bl	8015b78 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8015c52:	4a0e      	ldr	r2, [pc, #56]	; (8015c8c <_ZN8STM32DMAC1Ev+0x50>)
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	601a      	str	r2, [r3, #0]
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f103 000c 	add.w	r0, r3, #12
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	3320      	adds	r3, #32
 8015c62:	2260      	movs	r2, #96	; 0x60
 8015c64:	4619      	mov	r1, r3
 8015c66:	f002 fe01 	bl	801886c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	3320      	adds	r3, #32
 8015c6e:	245f      	movs	r4, #95	; 0x5f
 8015c70:	461d      	mov	r5, r3
 8015c72:	2c00      	cmp	r4, #0
 8015c74:	db05      	blt.n	8015c82 <_ZN8STM32DMAC1Ev+0x46>
 8015c76:	4628      	mov	r0, r5
 8015c78:	f7ff ffd1 	bl	8015c1e <_ZN8touchgfx6BlitOpC1Ev>
 8015c7c:	3520      	adds	r5, #32
 8015c7e:	3c01      	subs	r4, #1
 8015c80:	e7f7      	b.n	8015c72 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	4618      	mov	r0, r3
 8015c86:	3708      	adds	r7, #8
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8015c8c:	08030940 	.word	0x08030940

08015c90 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b082      	sub	sp, #8
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	4a09      	ldr	r2, [pc, #36]	; (8015cc0 <_ZN8STM32DMAD1Ev+0x30>)
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8015c9e:	205a      	movs	r0, #90	; 0x5a
 8015ca0:	f7ff feec 	bl	8015a7c <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	330c      	adds	r3, #12
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f000 fac3 	bl	8016234 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7ff ff41 	bl	8015b38 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3708      	adds	r7, #8
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}
 8015cc0:	08030940 	.word	0x08030940

08015cc4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
}
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f7ff ffdf 	bl	8015c90 <_ZN8STM32DMAD1Ev>
 8015cd2:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	f017 fc7d 	bl	802d5d6 <_ZdlPvj>
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3708      	adds	r7, #8
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}
	...

08015ce8 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b084      	sub	sp, #16
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	60fb      	str	r3, [r7, #12]
 8015cf4:	4b10      	ldr	r3, [pc, #64]	; (8015d38 <_ZN8STM32DMA10initializeEv+0x50>)
 8015cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015cf8:	4a0f      	ldr	r2, [pc, #60]	; (8015d38 <_ZN8STM32DMA10initializeEv+0x50>)
 8015cfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8015d00:	4b0d      	ldr	r3, [pc, #52]	; (8015d38 <_ZN8STM32DMA10initializeEv+0x50>)
 8015d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015d08:	60fb      	str	r3, [r7, #12]
 8015d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8015d0c:	4b0a      	ldr	r3, [pc, #40]	; (8015d38 <_ZN8STM32DMA10initializeEv+0x50>)
 8015d0e:	691b      	ldr	r3, [r3, #16]
 8015d10:	4a09      	ldr	r2, [pc, #36]	; (8015d38 <_ZN8STM32DMA10initializeEv+0x50>)
 8015d12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015d16:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8015d18:	4b07      	ldr	r3, [pc, #28]	; (8015d38 <_ZN8STM32DMA10initializeEv+0x50>)
 8015d1a:	691b      	ldr	r3, [r3, #16]
 8015d1c:	4a06      	ldr	r2, [pc, #24]	; (8015d38 <_ZN8STM32DMA10initializeEv+0x50>)
 8015d1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8015d22:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8015d24:	4b05      	ldr	r3, [pc, #20]	; (8015d3c <_ZN8STM32DMA10initializeEv+0x54>)
 8015d26:	4a06      	ldr	r2, [pc, #24]	; (8015d40 <_ZN8STM32DMA10initializeEv+0x58>)
 8015d28:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015d2a:	205a      	movs	r0, #90	; 0x5a
 8015d2c:	f7ff fe88 	bl	8015a40 <__NVIC_EnableIRQ>
}
 8015d30:	bf00      	nop
 8015d32:	3710      	adds	r7, #16
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	40023800 	.word	0x40023800
 8015d3c:	2000b0b8 	.word	0x2000b0b8
 8015d40:	08015c03 	.word	0x08015c03

08015d44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b084      	sub	sp, #16
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	460b      	mov	r3, r1
 8015d4e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015d50:	2300      	movs	r3, #0
 8015d52:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015d54:	78fb      	ldrb	r3, [r7, #3]
 8015d56:	2b0b      	cmp	r3, #11
 8015d58:	d826      	bhi.n	8015da8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8015d5a:	a201      	add	r2, pc, #4	; (adr r2, 8015d60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d60:	08015d9d 	.word	0x08015d9d
 8015d64:	08015d97 	.word	0x08015d97
 8015d68:	08015d91 	.word	0x08015d91
 8015d6c:	08015da9 	.word	0x08015da9
 8015d70:	08015da9 	.word	0x08015da9
 8015d74:	08015da9 	.word	0x08015da9
 8015d78:	08015da9 	.word	0x08015da9
 8015d7c:	08015da3 	.word	0x08015da3
 8015d80:	08015da3 	.word	0x08015da3
 8015d84:	08015da3 	.word	0x08015da3
 8015d88:	08015da3 	.word	0x08015da3
 8015d8c:	08015da3 	.word	0x08015da3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015d90:	2300      	movs	r3, #0
 8015d92:	60fb      	str	r3, [r7, #12]
        break;
 8015d94:	e00e      	b.n	8015db4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8015d96:	2301      	movs	r3, #1
 8015d98:	60fb      	str	r3, [r7, #12]
        break;
 8015d9a:	e00b      	b.n	8015db4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8015d9c:	2302      	movs	r3, #2
 8015d9e:	60fb      	str	r3, [r7, #12]
        break;
 8015da0:	e008      	b.n	8015db4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8015da2:	2305      	movs	r3, #5
 8015da4:	60fb      	str	r3, [r7, #12]
        break;
 8015da6:	e005      	b.n	8015db4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015da8:	4b05      	ldr	r3, [pc, #20]	; (8015dc0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8015daa:	4a06      	ldr	r2, [pc, #24]	; (8015dc4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8015dac:	2166      	movs	r1, #102	; 0x66
 8015dae:	4806      	ldr	r0, [pc, #24]	; (8015dc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8015db0:	f018 fa30 	bl	802e214 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015db4:	68fb      	ldr	r3, [r7, #12]
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3710      	adds	r7, #16
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	0802fe64 	.word	0x0802fe64
 8015dc4:	0802fe80 	.word	0x0802fe80
 8015dc8:	0802fecc 	.word	0x0802fecc

08015dcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b084      	sub	sp, #16
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
 8015dd4:	460b      	mov	r3, r1
 8015dd6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015ddc:	78fb      	ldrb	r3, [r7, #3]
 8015dde:	2b0a      	cmp	r3, #10
 8015de0:	d821      	bhi.n	8015e26 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8015de2:	a201      	add	r2, pc, #4	; (adr r2, 8015de8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015de8:	08015e21 	.word	0x08015e21
 8015dec:	08015e1b 	.word	0x08015e1b
 8015df0:	08015e15 	.word	0x08015e15
 8015df4:	08015e27 	.word	0x08015e27
 8015df8:	08015e27 	.word	0x08015e27
 8015dfc:	08015e27 	.word	0x08015e27
 8015e00:	08015e27 	.word	0x08015e27
 8015e04:	08015e1b 	.word	0x08015e1b
 8015e08:	08015e1b 	.word	0x08015e1b
 8015e0c:	08015e1b 	.word	0x08015e1b
 8015e10:	08015e1b 	.word	0x08015e1b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015e14:	2300      	movs	r3, #0
 8015e16:	60fb      	str	r3, [r7, #12]
        break;
 8015e18:	e00b      	b.n	8015e32 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	60fb      	str	r3, [r7, #12]
        break;
 8015e1e:	e008      	b.n	8015e32 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8015e20:	2302      	movs	r3, #2
 8015e22:	60fb      	str	r3, [r7, #12]
        break;
 8015e24:	e005      	b.n	8015e32 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015e26:	4b05      	ldr	r3, [pc, #20]	; (8015e3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8015e28:	4a05      	ldr	r2, [pc, #20]	; (8015e40 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8015e2a:	2187      	movs	r1, #135	; 0x87
 8015e2c:	4805      	ldr	r0, [pc, #20]	; (8015e44 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8015e2e:	f018 f9f1 	bl	802e214 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015e32:	68fb      	ldr	r3, [r7, #12]
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3710      	adds	r7, #16
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	0802fe64 	.word	0x0802fe64
 8015e40:	0802fef8 	.word	0x0802fef8
 8015e44:	0802fecc 	.word	0x0802fecc

08015e48 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8015e48:	b480      	push	{r7}
 8015e4a:	b083      	sub	sp, #12
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8015e50:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8015e54:	4618      	mov	r0, r3
 8015e56:	370c      	adds	r7, #12
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5e:	4770      	bx	lr

08015e60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8015e60:	b590      	push	{r4, r7, lr}
 8015e62:	b089      	sub	sp, #36	; 0x24
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
 8015e68:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	7f5b      	ldrb	r3, [r3, #29]
 8015e6e:	4619      	mov	r1, r3
 8015e70:	6878      	ldr	r0, [r7, #4]
 8015e72:	f7ff ff67 	bl	8015d44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015e76:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015e78:	683b      	ldr	r3, [r7, #0]
 8015e7a:	7f9b      	ldrb	r3, [r3, #30]
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f7ff ff60 	bl	8015d44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015e84:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	7f9b      	ldrb	r3, [r3, #30]
 8015e8a:	4619      	mov	r1, r3
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f7ff ff9d 	bl	8015dcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015e92:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	8b5b      	ldrh	r3, [r3, #26]
 8015e98:	461a      	mov	r2, r3
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	8a9b      	ldrh	r3, [r3, #20]
 8015e9e:	1ad2      	subs	r2, r2, r3
 8015ea0:	4b99      	ldr	r3, [pc, #612]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	8b5b      	ldrh	r3, [r3, #26]
 8015ea8:	461a      	mov	r2, r3
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	8a9b      	ldrh	r3, [r3, #20]
 8015eae:	1ad2      	subs	r2, r2, r3
 8015eb0:	4b95      	ldr	r3, [pc, #596]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015eb2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	8b1b      	ldrh	r3, [r3, #24]
 8015eb8:	461a      	mov	r2, r3
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	8a9b      	ldrh	r3, [r3, #20]
 8015ebe:	1ad2      	subs	r2, r2, r3
 8015ec0:	4b91      	ldr	r3, [pc, #580]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ec2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8015ec4:	4a90      	ldr	r2, [pc, #576]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	8adb      	ldrh	r3, [r3, #22]
 8015ece:	461a      	mov	r2, r3
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	8a9b      	ldrh	r3, [r3, #20]
 8015ed4:	041b      	lsls	r3, r3, #16
 8015ed6:	431a      	orrs	r2, r3
 8015ed8:	4b8b      	ldr	r3, [pc, #556]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015eda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015edc:	683b      	ldr	r3, [r7, #0]
 8015ede:	691a      	ldr	r2, [r3, #16]
 8015ee0:	4b89      	ldr	r3, [pc, #548]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ee2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	685a      	ldr	r2, [r3, #4]
 8015ee8:	4b87      	ldr	r3, [pc, #540]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015eea:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015ef4:	d037      	beq.n	8015f66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8015ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015efa:	f200 80e8 	bhi.w	80160ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f02:	d014      	beq.n	8015f2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8015f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f08:	f200 80e1 	bhi.w	80160ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015f0c:	2b80      	cmp	r3, #128	; 0x80
 8015f0e:	d05b      	beq.n	8015fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8015f10:	2b80      	cmp	r3, #128	; 0x80
 8015f12:	f200 80dc 	bhi.w	80160ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015f16:	2b40      	cmp	r3, #64	; 0x40
 8015f18:	f000 80c4 	beq.w	80160a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8015f1c:	2b40      	cmp	r3, #64	; 0x40
 8015f1e:	f200 80d6 	bhi.w	80160ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015f22:	2b04      	cmp	r3, #4
 8015f24:	d03b      	beq.n	8015f9e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8015f26:	2b20      	cmp	r3, #32
 8015f28:	f000 80bc 	beq.w	80160a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8015f2c:	e0cf      	b.n	80160ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	7f1b      	ldrb	r3, [r3, #28]
 8015f32:	061b      	lsls	r3, r3, #24
 8015f34:	4a74      	ldr	r2, [pc, #464]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f3a:	f043 030a 	orr.w	r3, r3, #10
 8015f3e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	330c      	adds	r3, #12
 8015f44:	4c70      	ldr	r4, [pc, #448]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7ff fdbc 	bl	8015ac4 <_ZNK8touchgfx9colortypecvmEv>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015f50:	4a6d      	ldr	r2, [pc, #436]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	691a      	ldr	r2, [r3, #16]
 8015f5a:	4b6b      	ldr	r3, [pc, #428]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f5c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015f5e:	4b6a      	ldr	r3, [pc, #424]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f60:	4a6a      	ldr	r2, [pc, #424]	; (801610c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015f62:	601a      	str	r2, [r3, #0]
        break;
 8015f64:	e0cc      	b.n	8016100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	7f1b      	ldrb	r3, [r3, #28]
 8015f6a:	061b      	lsls	r3, r3, #24
 8015f6c:	4a66      	ldr	r2, [pc, #408]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f72:	f043 0309 	orr.w	r3, r3, #9
 8015f76:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015f78:	683b      	ldr	r3, [r7, #0]
 8015f7a:	330c      	adds	r3, #12
 8015f7c:	4c62      	ldr	r4, [pc, #392]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7ff fda0 	bl	8015ac4 <_ZNK8touchgfx9colortypecvmEv>
 8015f84:	4603      	mov	r3, r0
 8015f86:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015f88:	4a5f      	ldr	r2, [pc, #380]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f8a:	697b      	ldr	r3, [r7, #20]
 8015f8c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	691a      	ldr	r2, [r3, #16]
 8015f92:	4b5d      	ldr	r3, [pc, #372]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f94:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015f96:	4b5c      	ldr	r3, [pc, #368]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015f98:	4a5c      	ldr	r2, [pc, #368]	; (801610c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015f9a:	601a      	str	r2, [r3, #0]
        break;
 8015f9c:	e0b0      	b.n	8016100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	7f1b      	ldrb	r3, [r3, #28]
 8015fa2:	061b      	lsls	r3, r3, #24
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	69bb      	ldr	r3, [r7, #24]
 8015fa8:	4313      	orrs	r3, r2
 8015faa:	4a57      	ldr	r2, [pc, #348]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015fb0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015fb2:	4a55      	ldr	r2, [pc, #340]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	691a      	ldr	r2, [r3, #16]
 8015fbc:	4b52      	ldr	r3, [pc, #328]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015fbe:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015fc0:	4b51      	ldr	r3, [pc, #324]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015fc2:	4a52      	ldr	r2, [pc, #328]	; (801610c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015fc4:	601a      	str	r2, [r3, #0]
        break;
 8015fc6:	e09b      	b.n	8016100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8015fc8:	2301      	movs	r3, #1
 8015fca:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	689b      	ldr	r3, [r3, #8]
 8015fd0:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	1d1a      	adds	r2, r3, #4
 8015fd6:	4b4c      	ldr	r3, [pc, #304]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015fd8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	7f1b      	ldrb	r3, [r3, #28]
 8015fde:	061b      	lsls	r3, r3, #24
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	69bb      	ldr	r3, [r7, #24]
 8015fe4:	4313      	orrs	r3, r2
 8015fe6:	4a48      	ldr	r2, [pc, #288]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015fec:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015fee:	4a46      	ldr	r2, [pc, #280]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	691a      	ldr	r2, [r3, #16]
 8015ff8:	4b43      	ldr	r3, [pc, #268]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ffa:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	881b      	ldrh	r3, [r3, #0]
 8016000:	b2db      	uxtb	r3, r3
 8016002:	2b00      	cmp	r3, #0
 8016004:	d002      	beq.n	801600c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8016006:	2b01      	cmp	r3, #1
 8016008:	d00f      	beq.n	801602a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 801600a:	e024      	b.n	8016056 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 801600c:	4b3e      	ldr	r3, [pc, #248]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801600e:	69db      	ldr	r3, [r3, #28]
 8016010:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016014:	f023 0310 	bic.w	r3, r3, #16
 8016018:	68fa      	ldr	r2, [r7, #12]
 801601a:	8852      	ldrh	r2, [r2, #2]
 801601c:	3a01      	subs	r2, #1
 801601e:	0212      	lsls	r2, r2, #8
 8016020:	4611      	mov	r1, r2
 8016022:	4a39      	ldr	r2, [pc, #228]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8016024:	430b      	orrs	r3, r1
 8016026:	61d3      	str	r3, [r2, #28]
                break;
 8016028:	e01c      	b.n	8016064 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	7f1b      	ldrb	r3, [r3, #28]
 801602e:	2bff      	cmp	r3, #255	; 0xff
 8016030:	d101      	bne.n	8016036 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                  blend = false;
 8016032:	2300      	movs	r3, #0
 8016034:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8016036:	4b34      	ldr	r3, [pc, #208]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8016038:	69db      	ldr	r3, [r3, #28]
 801603a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801603e:	f023 0310 	bic.w	r3, r3, #16
 8016042:	68fa      	ldr	r2, [r7, #12]
 8016044:	8852      	ldrh	r2, [r2, #2]
 8016046:	3a01      	subs	r2, #1
 8016048:	0212      	lsls	r2, r2, #8
 801604a:	4313      	orrs	r3, r2
 801604c:	4a2e      	ldr	r2, [pc, #184]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801604e:	f043 0310 	orr.w	r3, r3, #16
 8016052:	61d3      	str	r3, [r2, #28]
                break;
 8016054:	e006      	b.n	8016064 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8016056:	4b2e      	ldr	r3, [pc, #184]	; (8016110 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8016058:	4a2e      	ldr	r2, [pc, #184]	; (8016114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 801605a:	f240 1111 	movw	r1, #273	; 0x111
 801605e:	482e      	ldr	r0, [pc, #184]	; (8016118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8016060:	f018 f8d8 	bl	802e214 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8016064:	4b28      	ldr	r3, [pc, #160]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8016066:	69db      	ldr	r3, [r3, #28]
 8016068:	4a27      	ldr	r2, [pc, #156]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801606a:	f043 0320 	orr.w	r3, r3, #32
 801606e:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8016070:	4b25      	ldr	r3, [pc, #148]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8016072:	69db      	ldr	r3, [r3, #28]
 8016074:	f003 0320 	and.w	r3, r3, #32
 8016078:	2b00      	cmp	r3, #0
 801607a:	bf14      	ite	ne
 801607c:	2301      	movne	r3, #1
 801607e:	2300      	moveq	r3, #0
 8016080:	b2db      	uxtb	r3, r3
 8016082:	2b00      	cmp	r3, #0
 8016084:	d000      	beq.n	8016088 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8016086:	e7f3      	b.n	8016070 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8016088:	4b1f      	ldr	r3, [pc, #124]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801608a:	2210      	movs	r2, #16
 801608c:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 801608e:	7ffb      	ldrb	r3, [r7, #31]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d003      	beq.n	801609c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8016094:	4b1c      	ldr	r3, [pc, #112]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8016096:	4a1d      	ldr	r2, [pc, #116]	; (801610c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8016098:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 801609a:	e031      	b.n	8016100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 801609c:	4b1a      	ldr	r3, [pc, #104]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801609e:	4a1f      	ldr	r2, [pc, #124]	; (801611c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80160a0:	601a      	str	r2, [r3, #0]
      break;
 80160a2:	e02d      	b.n	8016100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	7f1b      	ldrb	r3, [r3, #28]
 80160a8:	061b      	lsls	r3, r3, #24
 80160aa:	461a      	mov	r2, r3
 80160ac:	69bb      	ldr	r3, [r7, #24]
 80160ae:	4313      	orrs	r3, r2
 80160b0:	4a15      	ldr	r2, [pc, #84]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80160b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80160b6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80160b8:	4a13      	ldr	r2, [pc, #76]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80160ba:	697b      	ldr	r3, [r7, #20]
 80160bc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	691a      	ldr	r2, [r3, #16]
 80160c2:	4b11      	ldr	r3, [pc, #68]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80160c4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80160c6:	4b10      	ldr	r3, [pc, #64]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80160c8:	4a10      	ldr	r2, [pc, #64]	; (801610c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80160ca:	601a      	str	r2, [r3, #0]
        break;
 80160cc:	e018      	b.n	8016100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	7f1b      	ldrb	r3, [r3, #28]
 80160d2:	061b      	lsls	r3, r3, #24
 80160d4:	461a      	mov	r2, r3
 80160d6:	69bb      	ldr	r3, [r7, #24]
 80160d8:	4313      	orrs	r3, r2
 80160da:	4a0b      	ldr	r2, [pc, #44]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80160dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80160e0:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	7f5a      	ldrb	r2, [r3, #29]
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	7f9b      	ldrb	r3, [r3, #30]
 80160ea:	429a      	cmp	r2, r3
 80160ec:	d003      	beq.n	80160f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80160ee:	4b06      	ldr	r3, [pc, #24]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80160f0:	4a0a      	ldr	r2, [pc, #40]	; (801611c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80160f2:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80160f4:	e003      	b.n	80160fe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80160f6:	4b04      	ldr	r3, [pc, #16]	; (8016108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80160f8:	f240 2201 	movw	r2, #513	; 0x201
 80160fc:	601a      	str	r2, [r3, #0]
        break;
 80160fe:	bf00      	nop
    }
}
 8016100:	bf00      	nop
 8016102:	3724      	adds	r7, #36	; 0x24
 8016104:	46bd      	mov	sp, r7
 8016106:	bd90      	pop	{r4, r7, pc}
 8016108:	4002b000 	.word	0x4002b000
 801610c:	00020201 	.word	0x00020201
 8016110:	0802ff44 	.word	0x0802ff44
 8016114:	0802ff60 	.word	0x0802ff60
 8016118:	0802fecc 	.word	0x0802fecc
 801611c:	00010201 	.word	0x00010201

08016120 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8016120:	b590      	push	{r4, r7, lr}
 8016122:	b085      	sub	sp, #20
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
 8016128:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	7f9b      	ldrb	r3, [r3, #30]
 801612e:	4619      	mov	r1, r3
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f7ff fe4b 	bl	8015dcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8016136:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8016138:	4a3b      	ldr	r2, [pc, #236]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	8adb      	ldrh	r3, [r3, #22]
 8016142:	461a      	mov	r2, r3
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	8a9b      	ldrh	r3, [r3, #20]
 8016148:	041b      	lsls	r3, r3, #16
 801614a:	431a      	orrs	r2, r3
 801614c:	4b36      	ldr	r3, [pc, #216]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801614e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016150:	683b      	ldr	r3, [r7, #0]
 8016152:	691a      	ldr	r2, [r3, #16]
 8016154:	4b34      	ldr	r3, [pc, #208]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8016156:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016158:	683b      	ldr	r3, [r7, #0]
 801615a:	8b5b      	ldrh	r3, [r3, #26]
 801615c:	461a      	mov	r2, r3
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	8a9b      	ldrh	r3, [r3, #20]
 8016162:	1ad2      	subs	r2, r2, r3
 8016164:	4b30      	ldr	r3, [pc, #192]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8016166:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8016168:	683b      	ldr	r3, [r7, #0]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	2b08      	cmp	r3, #8
 801616e:	d12f      	bne.n	80161d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	8b5b      	ldrh	r3, [r3, #26]
 8016174:	461a      	mov	r2, r3
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	8a9b      	ldrh	r3, [r3, #20]
 801617a:	1ad2      	subs	r2, r2, r3
 801617c:	4b2a      	ldr	r3, [pc, #168]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801617e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	8b5b      	ldrh	r3, [r3, #26]
 8016184:	461a      	mov	r2, r3
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	8a9b      	ldrh	r3, [r3, #20]
 801618a:	1ad2      	subs	r2, r2, r3
 801618c:	4b26      	ldr	r3, [pc, #152]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801618e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8016190:	4a25      	ldr	r2, [pc, #148]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	7f1b      	ldrb	r3, [r3, #28]
 801619a:	061b      	lsls	r3, r3, #24
 801619c:	4a22      	ldr	r2, [pc, #136]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801619e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80161a2:	f043 0309 	orr.w	r3, r3, #9
 80161a6:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	330c      	adds	r3, #12
 80161ac:	4c1e      	ldr	r4, [pc, #120]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7ff fc88 	bl	8015ac4 <_ZNK8touchgfx9colortypecvmEv>
 80161b4:	4603      	mov	r3, r0
 80161b6:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	691a      	ldr	r2, [r3, #16]
 80161bc:	4b1a      	ldr	r3, [pc, #104]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80161be:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	691a      	ldr	r2, [r3, #16]
 80161c4:	4b18      	ldr	r3, [pc, #96]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80161c6:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80161c8:	4b17      	ldr	r3, [pc, #92]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80161ca:	4a18      	ldr	r2, [pc, #96]	; (801622c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80161cc:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80161ce:	e027      	b.n	8016220 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80161d0:	4a15      	ldr	r2, [pc, #84]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80161d6:	4b14      	ldr	r3, [pc, #80]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80161d8:	2200      	movs	r2, #0
 80161da:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	330c      	adds	r3, #12
 80161e0:	4618      	mov	r0, r3
 80161e2:	f7ff fc6f 	bl	8015ac4 <_ZNK8touchgfx9colortypecvmEv>
 80161e6:	4603      	mov	r3, r0
 80161e8:	0a1b      	lsrs	r3, r3, #8
 80161ea:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 80161ee:	683b      	ldr	r3, [r7, #0]
 80161f0:	330c      	adds	r3, #12
 80161f2:	4618      	mov	r0, r3
 80161f4:	f7ff fc66 	bl	8015ac4 <_ZNK8touchgfx9colortypecvmEv>
 80161f8:	4603      	mov	r3, r0
 80161fa:	095b      	lsrs	r3, r3, #5
 80161fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016200:	431c      	orrs	r4, r3
 8016202:	683b      	ldr	r3, [r7, #0]
 8016204:	330c      	adds	r3, #12
 8016206:	4618      	mov	r0, r3
 8016208:	f7ff fc5c 	bl	8015ac4 <_ZNK8touchgfx9colortypecvmEv>
 801620c:	4603      	mov	r3, r0
 801620e:	08db      	lsrs	r3, r3, #3
 8016210:	f003 031f 	and.w	r3, r3, #31
 8016214:	4a04      	ldr	r2, [pc, #16]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8016216:	4323      	orrs	r3, r4
 8016218:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 801621a:	4b03      	ldr	r3, [pc, #12]	; (8016228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801621c:	4a04      	ldr	r2, [pc, #16]	; (8016230 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 801621e:	601a      	str	r2, [r3, #0]
}
 8016220:	bf00      	nop
 8016222:	3714      	adds	r7, #20
 8016224:	46bd      	mov	sp, r7
 8016226:	bd90      	pop	{r4, r7, pc}
 8016228:	4002b000 	.word	0x4002b000
 801622c:	00020201 	.word	0x00020201
 8016230:	00030201 	.word	0x00030201

08016234 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8016234:	b580      	push	{r7, lr}
 8016236:	b082      	sub	sp, #8
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	4a05      	ldr	r2, [pc, #20]	; (8016254 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	601a      	str	r2, [r3, #0]
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	4618      	mov	r0, r3
 8016246:	f7ff fc49 	bl	8015adc <_ZN8touchgfx9DMA_QueueD1Ev>
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	4618      	mov	r0, r3
 801624e:	3708      	adds	r7, #8
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}
 8016254:	08031888 	.word	0x08031888

08016258 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016258:	b580      	push	{r7, lr}
 801625a:	b082      	sub	sp, #8
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f7ff ffe7 	bl	8016234 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016266:	2114      	movs	r1, #20
 8016268:	6878      	ldr	r0, [r7, #4]
 801626a:	f017 f9b4 	bl	802d5d6 <_ZdlPvj>
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	4618      	mov	r0, r3
 8016272:	3708      	adds	r7, #8
 8016274:	46bd      	mov	sp, r7
 8016276:	bd80      	pop	{r7, pc}

08016278 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8016278:	b480      	push	{r7}
 801627a:	b083      	sub	sp, #12
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
        texts = t;
 8016280:	4a04      	ldr	r2, [pc, #16]	; (8016294 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	6013      	str	r3, [r2, #0]
    }
 8016286:	bf00      	nop
 8016288:	370c      	adds	r7, #12
 801628a:	46bd      	mov	sp, r7
 801628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016290:	4770      	bx	lr
 8016292:	bf00      	nop
 8016294:	2000987c 	.word	0x2000987c

08016298 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8016298:	b480      	push	{r7}
 801629a:	b085      	sub	sp, #20
 801629c:	af00      	add	r7, sp, #0
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	607a      	str	r2, [r7, #4]
 80162a4:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80162a6:	4a0b      	ldr	r2, [pc, #44]	; (80162d4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	601a      	str	r2, [r3, #0]
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	68ba      	ldr	r2, [r7, #8]
 80162b0:	605a      	str	r2, [r3, #4]
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	687a      	ldr	r2, [r7, #4]
 80162b6:	609a      	str	r2, [r3, #8]
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	683a      	ldr	r2, [r7, #0]
 80162bc:	60da      	str	r2, [r3, #12]
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	69ba      	ldr	r2, [r7, #24]
 80162c2:	611a      	str	r2, [r3, #16]
    {
    }
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	4618      	mov	r0, r3
 80162c8:	3714      	adds	r7, #20
 80162ca:	46bd      	mov	sp, r7
 80162cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	08030a78 	.word	0x08030a78

080162d8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80162d8:	b480      	push	{r7}
 80162da:	b083      	sub	sp, #12
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
    {
 80162e0:	4a04      	ldr	r2, [pc, #16]	; (80162f4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	601a      	str	r2, [r3, #0]
    }
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	4618      	mov	r0, r3
 80162ea:	370c      	adds	r7, #12
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr
 80162f4:	08030a78 	.word	0x08030a78

080162f8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b082      	sub	sp, #8
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
    }
 8016300:	6878      	ldr	r0, [r7, #4]
 8016302:	f7ff ffe9 	bl	80162d8 <_ZN8touchgfx7MVPHeapD1Ev>
 8016306:	2114      	movs	r1, #20
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f017 f964 	bl	802d5d6 <_ZdlPvj>
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	4618      	mov	r0, r3
 8016312:	3708      	adds	r7, #8
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8016318:	b480      	push	{r7}
 801631a:	b083      	sub	sp, #12
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
    {
 8016320:	4a04      	ldr	r2, [pc, #16]	; (8016334 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	601a      	str	r2, [r3, #0]
    }
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	4618      	mov	r0, r3
 801632a:	370c      	adds	r7, #12
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr
 8016334:	08032170 	.word	0x08032170

08016338 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8016338:	b580      	push	{r7, lr}
 801633a:	b082      	sub	sp, #8
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
    }
 8016340:	6878      	ldr	r0, [r7, #4]
 8016342:	f7ff ffe9 	bl	8016318 <_ZN8touchgfx3LCDD1Ev>
 8016346:	2108      	movs	r1, #8
 8016348:	6878      	ldr	r0, [r7, #4]
 801634a:	f017 f944 	bl	802d5d6 <_ZdlPvj>
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	4618      	mov	r0, r3
 8016352:	3708      	adds	r7, #8
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}

08016358 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8016358:	b480      	push	{r7}
 801635a:	b083      	sub	sp, #12
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2200      	movs	r2, #0
 8016364:	801a      	strh	r2, [r3, #0]
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2200      	movs	r2, #0
 801636a:	805a      	strh	r2, [r3, #2]
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2200      	movs	r2, #0
 8016370:	809a      	strh	r2, [r3, #4]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2200      	movs	r2, #0
 8016376:	80da      	strh	r2, [r3, #6]
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2200      	movs	r2, #0
 801637c:	811a      	strh	r2, [r3, #8]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2200      	movs	r2, #0
 8016382:	815a      	strh	r2, [r3, #10]
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2200      	movs	r2, #0
 8016388:	819a      	strh	r2, [r3, #12]
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2200      	movs	r2, #0
 801638e:	739a      	strb	r2, [r3, #14]
        {
        }
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	4618      	mov	r0, r3
 8016394:	370c      	adds	r7, #12
 8016396:	46bd      	mov	sp, r7
 8016398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639c:	4770      	bx	lr

0801639e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801639e:	b580      	push	{r7, lr}
 80163a0:	b082      	sub	sp, #8
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	4618      	mov	r0, r3
 80163aa:	f7ff ffd5 	bl	8016358 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2200      	movs	r2, #0
 80163b2:	611a      	str	r2, [r3, #16]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2200      	movs	r2, #0
 80163b8:	829a      	strh	r2, [r3, #20]
    {
    }
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	4618      	mov	r0, r3
 80163be:	3708      	adds	r7, #8
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b084      	sub	sp, #16
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	60f8      	str	r0, [r7, #12]
 80163cc:	60b9      	str	r1, [r7, #8]
 80163ce:	607a      	str	r2, [r7, #4]
 80163d0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80163d2:	4a55      	ldr	r2, [pc, #340]	; (8016528 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	601a      	str	r2, [r3, #0]
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	68ba      	ldr	r2, [r7, #8]
 80163dc:	605a      	str	r2, [r3, #4]
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	609a      	str	r2, [r3, #8]
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	683a      	ldr	r2, [r7, #0]
 80163e8:	60da      	str	r2, [r3, #12]
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2200      	movs	r2, #0
 80163ee:	611a      	str	r2, [r3, #16]
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2200      	movs	r2, #0
 80163f4:	615a      	str	r2, [r3, #20]
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	2200      	movs	r2, #0
 80163fa:	619a      	str	r2, [r3, #24]
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	331c      	adds	r3, #28
 8016400:	4618      	mov	r0, r3
 8016402:	f7ff ffcc 	bl	801639e <_ZN8touchgfx8GesturesC1Ev>
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2200      	movs	r2, #0
 801640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	2200      	movs	r2, #0
 8016412:	639a      	str	r2, [r3, #56]	; 0x38
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2200      	movs	r2, #0
 8016418:	63da      	str	r2, [r3, #60]	; 0x3c
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	2200      	movs	r2, #0
 801641e:	641a      	str	r2, [r3, #64]	; 0x40
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	2200      	movs	r2, #0
 8016424:	645a      	str	r2, [r3, #68]	; 0x44
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	2200      	movs	r2, #0
 801642a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	2201      	movs	r2, #1
 8016432:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	2200      	movs	r2, #0
 801643a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	2200      	movs	r2, #0
 8016442:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	2200      	movs	r2, #0
 801644a:	64da      	str	r2, [r3, #76]	; 0x4c
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	3350      	adds	r3, #80	; 0x50
 8016450:	4618      	mov	r0, r3
 8016452:	f7f9 ff84 	bl	801035e <_ZN8touchgfx4RectC1Ev>
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	2200      	movs	r2, #0
 801645a:	659a      	str	r2, [r3, #88]	; 0x58
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	2200      	movs	r2, #0
 8016460:	65da      	str	r2, [r3, #92]	; 0x5c
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	2200      	movs	r2, #0
 8016466:	661a      	str	r2, [r3, #96]	; 0x60
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	2201      	movs	r2, #1
 801646c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2200      	movs	r2, #0
 8016474:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	2200      	movs	r2, #0
 801647c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	2201      	movs	r2, #1
 8016484:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	2200      	movs	r2, #0
 801648c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2200      	movs	r2, #0
 8016494:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	2200      	movs	r2, #0
 801649c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2200      	movs	r2, #0
 80164a4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	2200      	movs	r2, #0
 80164ac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	2200      	movs	r2, #0
 80164b4:	671a      	str	r2, [r3, #112]	; 0x70
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	2200      	movs	r2, #0
 80164ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	2200      	movs	r2, #0
 80164c2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	2200      	movs	r2, #0
 80164ca:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	2201      	movs	r2, #1
 80164d2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	2201      	movs	r2, #1
 80164da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80164de:	4a13      	ldr	r2, [pc, #76]	; (801652c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80164e4:	4a12      	ldr	r2, [pc, #72]	; (8016530 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80164e6:	8b3b      	ldrh	r3, [r7, #24]
 80164e8:	8013      	strh	r3, [r2, #0]
 80164ea:	4b11      	ldr	r3, [pc, #68]	; (8016530 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80164ec:	881a      	ldrh	r2, [r3, #0]
 80164ee:	4b11      	ldr	r3, [pc, #68]	; (8016534 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80164f0:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80164f2:	4a11      	ldr	r2, [pc, #68]	; (8016538 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80164f4:	8bbb      	ldrh	r3, [r7, #28]
 80164f6:	8013      	strh	r3, [r2, #0]
 80164f8:	4b0f      	ldr	r3, [pc, #60]	; (8016538 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80164fa:	881a      	ldrh	r2, [r3, #0]
 80164fc:	4b0f      	ldr	r3, [pc, #60]	; (801653c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80164fe:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8016500:	4b0f      	ldr	r3, [pc, #60]	; (8016540 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8016502:	2200      	movs	r2, #0
 8016504:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8016506:	8b3a      	ldrh	r2, [r7, #24]
 8016508:	8bbb      	ldrh	r3, [r7, #28]
 801650a:	429a      	cmp	r2, r3
 801650c:	bf34      	ite	cc
 801650e:	2301      	movcc	r3, #1
 8016510:	2300      	movcs	r3, #0
 8016512:	b2db      	uxtb	r3, r3
 8016514:	461a      	mov	r2, r3
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	4618      	mov	r0, r3
 8016520:	3710      	adds	r7, #16
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}
 8016526:	bf00      	nop
 8016528:	080312e0 	.word	0x080312e0
 801652c:	20009820 	.word	0x20009820
 8016530:	20009814 	.word	0x20009814
 8016534:	2000981a 	.word	0x2000981a
 8016538:	20009816 	.word	0x20009816
 801653c:	2000981c 	.word	0x2000981c
 8016540:	20009818 	.word	0x20009818

08016544 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	4618      	mov	r0, r3
 8016552:	f7f9 fc55 	bl	800fe00 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8016556:	bf00      	nop
 8016558:	3708      	adds	r7, #8
 801655a:	46bd      	mov	sp, r7
 801655c:	bd80      	pop	{r7, pc}
	...

08016560 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8016560:	b580      	push	{r7, lr}
 8016562:	b086      	sub	sp, #24
 8016564:	af02      	add	r7, sp, #8
 8016566:	60f8      	str	r0, [r7, #12]
 8016568:	60b9      	str	r1, [r7, #8]
 801656a:	607a      	str	r2, [r7, #4]
 801656c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801656e:	68f8      	ldr	r0, [r7, #12]
 8016570:	69bb      	ldr	r3, [r7, #24]
 8016572:	9300      	str	r3, [sp, #0]
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	687a      	ldr	r2, [r7, #4]
 8016578:	68b9      	ldr	r1, [r7, #8]
 801657a:	f7ff fe8d 	bl	8016298 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801657e:	4a04      	ldr	r2, [pc, #16]	; (8016590 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	601a      	str	r2, [r3, #0]
    {

    }
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	4618      	mov	r0, r3
 8016588:	3710      	adds	r7, #16
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	08030a64 	.word	0x08030a64

08016594 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016594:	b580      	push	{r7, lr}
 8016596:	af00      	add	r7, sp, #0
 8016598:	4801      	ldr	r0, [pc, #4]	; (80165a0 <__tcf_0+0xc>)
 801659a:	f000 f95f 	bl	801685c <_ZN12FrontendHeapD1Ev>
 801659e:	bd80      	pop	{r7, pc}
 80165a0:	20007b48 	.word	0x20007b48

080165a4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80165a4:	b580      	push	{r7, lr}
 80165a6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80165a8:	4b12      	ldr	r3, [pc, #72]	; (80165f4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80165aa:	781b      	ldrb	r3, [r3, #0]
 80165ac:	f3bf 8f5b 	dmb	ish
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	f003 0301 	and.w	r3, r3, #1
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	bf0c      	ite	eq
 80165ba:	2301      	moveq	r3, #1
 80165bc:	2300      	movne	r3, #0
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d013      	beq.n	80165ec <_ZN12FrontendHeap11getInstanceEv+0x48>
 80165c4:	480b      	ldr	r0, [pc, #44]	; (80165f4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80165c6:	f017 f808 	bl	802d5da <__cxa_guard_acquire>
 80165ca:	4603      	mov	r3, r0
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	bf14      	ite	ne
 80165d0:	2301      	movne	r3, #1
 80165d2:	2300      	moveq	r3, #0
 80165d4:	b2db      	uxtb	r3, r3
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d008      	beq.n	80165ec <_ZN12FrontendHeap11getInstanceEv+0x48>
 80165da:	4807      	ldr	r0, [pc, #28]	; (80165f8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80165dc:	f000 f868 	bl	80166b0 <_ZN12FrontendHeapC1Ev>
 80165e0:	4804      	ldr	r0, [pc, #16]	; (80165f4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80165e2:	f017 f806 	bl	802d5f2 <__cxa_guard_release>
 80165e6:	4805      	ldr	r0, [pc, #20]	; (80165fc <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80165e8:	f017 fe32 	bl	802e250 <atexit>
        return instance;
 80165ec:	4b02      	ldr	r3, [pc, #8]	; (80165f8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80165ee:	4618      	mov	r0, r3
 80165f0:	bd80      	pop	{r7, pc}
 80165f2:	bf00      	nop
 80165f4:	20008af0 	.word	0x20008af0
 80165f8:	20007b48 	.word	0x20007b48
 80165fc:	08016595 	.word	0x08016595

08016600 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8016600:	b580      	push	{r7, lr}
 8016602:	b082      	sub	sp, #8
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
 8016608:	4a05      	ldr	r2, [pc, #20]	; (8016620 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	601a      	str	r2, [r3, #0]
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	4618      	mov	r0, r3
 8016612:	f7ff fe61 	bl	80162d8 <_ZN8touchgfx7MVPHeapD1Ev>
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	4618      	mov	r0, r3
 801661a:	3708      	adds	r7, #8
 801661c:	46bd      	mov	sp, r7
 801661e:	bd80      	pop	{r7, pc}
 8016620:	08030a64 	.word	0x08030a64

08016624 <_ZN16FrontendHeapBaseD0Ev>:
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6878      	ldr	r0, [r7, #4]
 801662e:	f7ff ffe7 	bl	8016600 <_ZN16FrontendHeapBaseD1Ev>
 8016632:	2114      	movs	r1, #20
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f016 ffce 	bl	802d5d6 <_ZdlPvj>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	4618      	mov	r0, r3
 801663e:	3708      	adds	r7, #8
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}

08016644 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	4618      	mov	r0, r3
 8016650:	f000 fd04 	bl	801705c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016654:	4a03      	ldr	r2, [pc, #12]	; (8016664 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	601a      	str	r2, [r3, #0]
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	4618      	mov	r0, r3
 801665e:	3708      	adds	r7, #8
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}
 8016664:	08030a30 	.word	0x08030a30

08016668 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	4618      	mov	r0, r3
 8016674:	f000 fcf2 	bl	801705c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016678:	4a03      	ldr	r2, [pc, #12]	; (8016688 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	601a      	str	r2, [r3, #0]
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	4618      	mov	r0, r3
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	080309fc 	.word	0x080309fc

0801668c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 801668c:	b580      	push	{r7, lr}
 801668e:	b082      	sub	sp, #8
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	4618      	mov	r0, r3
 8016698:	f000 fce0 	bl	801705c <_ZN8touchgfx17AbstractPartitionC1Ev>
 801669c:	4a03      	ldr	r2, [pc, #12]	; (80166ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	601a      	str	r2, [r3, #0]
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	4618      	mov	r0, r3
 80166a6:	3708      	adds	r7, #8
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	080309c8 	.word	0x080309c8

080166b0 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80166b0:	b590      	push	{r4, r7, lr}
 80166b2:	b085      	sub	sp, #20
 80166b4:	af02      	add	r7, sp, #8
 80166b6:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f103 0114 	add.w	r1, r3, #20
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f603 6438 	addw	r4, r3, #3640	; 0xe38
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
                     app(model, *this)
 80166d2:	9300      	str	r3, [sp, #0]
 80166d4:	4623      	mov	r3, r4
 80166d6:	f7ff ff43 	bl	8016560 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80166da:	4a18      	ldr	r2, [pc, #96]	; (801673c <_ZN12FrontendHeapC1Ev+0x8c>)
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	601a      	str	r2, [r3, #0]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	3314      	adds	r3, #20
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7ff ffad 	bl	8016644 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	332c      	adds	r3, #44	; 0x2c
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7ff ffba 	bl	8016668 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f603 6338 	addw	r3, r3, #3640	; 0xe38
 80166fa:	4618      	mov	r0, r3
 80166fc:	f7ff ffc6 	bl	801668c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f603 604c 	addw	r0, r3, #3660	; 0xe4c
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 801670c:	687a      	ldr	r2, [r7, #4]
 801670e:	4619      	mov	r1, r3
 8016710:	f7fe f8ba 	bl	8014888 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 801671a:	4618      	mov	r0, r3
 801671c:	f7fe f8ca 	bl	80148b4 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8016720:	687a      	ldr	r2, [r7, #4]
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8016728:	4619      	mov	r1, r3
 801672a:	4610      	mov	r0, r2
 801672c:	f7ff ff0a 	bl	8016544 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	4618      	mov	r0, r3
 8016734:	370c      	adds	r7, #12
 8016736:	46bd      	mov	sp, r7
 8016738:	bd90      	pop	{r4, r7, pc}
 801673a:	bf00      	nop
 801673c:	080309b4 	.word	0x080309b4

08016740 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8016740:	b580      	push	{r7, lr}
 8016742:	b086      	sub	sp, #24
 8016744:	af02      	add	r7, sp, #8
 8016746:	60f8      	str	r0, [r7, #12]
 8016748:	60b9      	str	r1, [r7, #8]
 801674a:	607a      	str	r2, [r7, #4]
 801674c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801674e:	68f8      	ldr	r0, [r7, #12]
 8016750:	8bbb      	ldrh	r3, [r7, #28]
 8016752:	9301      	str	r3, [sp, #4]
 8016754:	8b3b      	ldrh	r3, [r7, #24]
 8016756:	9300      	str	r3, [sp, #0]
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	687a      	ldr	r2, [r7, #4]
 801675c:	68b9      	ldr	r1, [r7, #8]
 801675e:	f7ff fe31 	bl	80163c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8016762:	4a04      	ldr	r2, [pc, #16]	; (8016774 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	601a      	str	r2, [r3, #0]
    }
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	4618      	mov	r0, r3
 801676c:	3710      	adds	r7, #16
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
 8016772:	bf00      	nop
 8016774:	08030a88 	.word	0x08030a88

08016778 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8016778:	b580      	push	{r7, lr}
 801677a:	b086      	sub	sp, #24
 801677c:	af02      	add	r7, sp, #8
 801677e:	60f8      	str	r0, [r7, #12]
 8016780:	60b9      	str	r1, [r7, #8]
 8016782:	607a      	str	r2, [r7, #4]
 8016784:	603b      	str	r3, [r7, #0]
 8016786:	68f8      	ldr	r0, [r7, #12]
 8016788:	8bbb      	ldrh	r3, [r7, #28]
 801678a:	9301      	str	r3, [sp, #4]
 801678c:	8b3b      	ldrh	r3, [r7, #24]
 801678e:	9300      	str	r3, [sp, #0]
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	687a      	ldr	r2, [r7, #4]
 8016794:	68b9      	ldr	r1, [r7, #8]
 8016796:	f7ff ffd3 	bl	8016740 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801679a:	4a04      	ldr	r2, [pc, #16]	; (80167ac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	601a      	str	r2, [r3, #0]
    }
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	4618      	mov	r0, r3
 80167a4:	3710      	adds	r7, #16
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}
 80167aa:	bf00      	nop
 80167ac:	08030870 	.word	0x08030870

080167b0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80167b0:	b480      	push	{r7}
 80167b2:	b083      	sub	sp, #12
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
 80167b8:	4a04      	ldr	r2, [pc, #16]	; (80167cc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	601a      	str	r2, [r3, #0]
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	4618      	mov	r0, r3
 80167c2:	370c      	adds	r7, #12
 80167c4:	46bd      	mov	sp, r7
 80167c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ca:	4770      	bx	lr
 80167cc:	08030858 	.word	0x08030858

080167d0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	4618      	mov	r0, r3
 80167dc:	f7ff ffe8 	bl	80167b0 <_ZN8touchgfx15TouchControllerC1Ev>
 80167e0:	4a03      	ldr	r2, [pc, #12]	; (80167f0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	601a      	str	r2, [r3, #0]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	4618      	mov	r0, r3
 80167ea:	3708      	adds	r7, #8
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bd80      	pop	{r7, pc}
 80167f0:	08030840 	.word	0x08030840

080167f4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 1024, 600);

void touchgfx_init()
{
 80167f4:	b590      	push	{r4, r7, lr}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80167fa:	f7fd fe19 	bl	8014430 <_ZN14BitmapDatabase11getInstanceEv>
 80167fe:	4604      	mov	r4, r0
 8016800:	f7fd fe20 	bl	8014444 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8016804:	4603      	mov	r3, r0
 8016806:	4619      	mov	r1, r3
 8016808:	2300      	movs	r3, #0
 801680a:	9300      	str	r3, [sp, #0]
 801680c:	2300      	movs	r3, #0
 801680e:	2200      	movs	r2, #0
 8016810:	4620      	mov	r0, r4
 8016812:	f009 f9d3 	bl	801fbbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8016816:	4809      	ldr	r0, [pc, #36]	; (801683c <touchgfx_init+0x48>)
 8016818:	f7ff fd2e 	bl	8016278 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 801681c:	2000      	movs	r0, #0
 801681e:	f7fd ff55 	bl	80146cc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8016822:	4807      	ldr	r0, [pc, #28]	; (8016840 <touchgfx_init+0x4c>)
 8016824:	f009 f90c 	bl	801fa40 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8016828:	f7ff febc 	bl	80165a4 <_ZN12FrontendHeap11getInstanceEv>
 801682c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801682e:	4805      	ldr	r0, [pc, #20]	; (8016844 <touchgfx_init+0x50>)
 8016830:	f7fe ffde 	bl	80157f0 <_ZN11TouchGFXHAL10initializeEv>
}
 8016834:	bf00      	nop
 8016836:	370c      	adds	r7, #12
 8016838:	46bd      	mov	sp, r7
 801683a:	bd90      	pop	{r4, r7, pc}
 801683c:	20009790 	.word	0x20009790
 8016840:	2000001c 	.word	0x2000001c
 8016844:	20009794 	.word	0x20009794

08016848 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8016848:	b580      	push	{r7, lr}
 801684a:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 801684c:	4802      	ldr	r0, [pc, #8]	; (8016858 <touchgfx_taskEntry+0x10>)
 801684e:	f001 f8de 	bl	8017a0e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8016852:	bf00      	nop
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	20009794 	.word	0x20009794

0801685c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801685c:	b580      	push	{r7, lr}
 801685e:	b082      	sub	sp, #8
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	4a10      	ldr	r2, [pc, #64]	; (80168a8 <_ZN12FrontendHeapD1Ev+0x4c>)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	601a      	str	r2, [r3, #0]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f603 634c 	addw	r3, r3, #3660	; 0xe4c
 8016870:	4618      	mov	r0, r3
 8016872:	f7fd ffd3 	bl	801481c <_ZN19FrontendApplicationD1Ev>
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f603 6338 	addw	r3, r3, #3640	; 0xe38
 801687c:	4618      	mov	r0, r3
 801687e:	f000 f827 	bl	80168d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	332c      	adds	r3, #44	; 0x2c
 8016886:	4618      	mov	r0, r3
 8016888:	f000 f844 	bl	8016914 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	3314      	adds	r3, #20
 8016890:	4618      	mov	r0, r3
 8016892:	f000 f863 	bl	801695c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	4618      	mov	r0, r3
 801689a:	f7ff feb1 	bl	8016600 <_ZN16FrontendHeapBaseD1Ev>
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	4618      	mov	r0, r3
 80168a2:	3708      	adds	r7, #8
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	080309b4 	.word	0x080309b4

080168ac <_ZN12FrontendHeapD0Ev>:
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f7ff ffd1 	bl	801685c <_ZN12FrontendHeapD1Ev>
 80168ba:	f640 71a8 	movw	r1, #4008	; 0xfa8
 80168be:	6878      	ldr	r0, [r7, #4]
 80168c0:	f016 fe89 	bl	802d5d6 <_ZdlPvj>
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	4618      	mov	r0, r3
 80168c8:	3708      	adds	r7, #8
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}
	...

080168d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
 80168d8:	4a05      	ldr	r2, [pc, #20]	; (80168f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	601a      	str	r2, [r3, #0]
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	4618      	mov	r0, r3
 80168e2:	f000 fbb9 	bl	8017058 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	4618      	mov	r0, r3
 80168ea:	3708      	adds	r7, #8
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	080309c8 	.word	0x080309c8

080168f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f7ff ffe7 	bl	80168d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016902:	2114      	movs	r1, #20
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f016 fe66 	bl	802d5d6 <_ZdlPvj>
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	4618      	mov	r0, r3
 801690e:	3708      	adds	r7, #8
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}

08016914 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016914:	b580      	push	{r7, lr}
 8016916:	b082      	sub	sp, #8
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
 801691c:	4a05      	ldr	r2, [pc, #20]	; (8016934 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	601a      	str	r2, [r3, #0]
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	4618      	mov	r0, r3
 8016926:	f000 fb97 	bl	8017058 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	4618      	mov	r0, r3
 801692e:	3708      	adds	r7, #8
 8016930:	46bd      	mov	sp, r7
 8016932:	bd80      	pop	{r7, pc}
 8016934:	080309fc 	.word	0x080309fc

08016938 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
 8016940:	6878      	ldr	r0, [r7, #4]
 8016942:	f7ff ffe7 	bl	8016914 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016946:	f640 610c 	movw	r1, #3596	; 0xe0c
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f016 fe43 	bl	802d5d6 <_ZdlPvj>
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	4618      	mov	r0, r3
 8016954:	3708      	adds	r7, #8
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}
	...

0801695c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	4a05      	ldr	r2, [pc, #20]	; (801697c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	601a      	str	r2, [r3, #0]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	4618      	mov	r0, r3
 801696e:	f000 fb73 	bl	8017058 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	4618      	mov	r0, r3
 8016976:	3708      	adds	r7, #8
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}
 801697c:	08030a30 	.word	0x08030a30

08016980 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
 8016988:	6878      	ldr	r0, [r7, #4]
 801698a:	f7ff ffe7 	bl	801695c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801698e:	2118      	movs	r1, #24
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f016 fe20 	bl	802d5d6 <_ZdlPvj>
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	4618      	mov	r0, r3
 801699a:	3708      	adds	r7, #8
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}

080169a0 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	4a05      	ldr	r2, [pc, #20]	; (80169c0 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	601a      	str	r2, [r3, #0]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7ff fcb1 	bl	8016318 <_ZN8touchgfx3LCDD1Ev>
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	4618      	mov	r0, r3
 80169ba:	3708      	adds	r7, #8
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}
 80169c0:	08033450 	.word	0x08033450

080169c4 <_ZN8touchgfx8LCD16bppD0Ev>:
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b082      	sub	sp, #8
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
 80169cc:	6878      	ldr	r0, [r7, #4]
 80169ce:	f7ff ffe7 	bl	80169a0 <_ZN8touchgfx8LCD16bppD1Ev>
 80169d2:	2178      	movs	r1, #120	; 0x78
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f016 fdfe 	bl	802d5d6 <_ZdlPvj>
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	4618      	mov	r0, r3
 80169de:	3708      	adds	r7, #8
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}

080169e4 <_Z41__static_initialization_and_destruction_0ii>:
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b084      	sub	sp, #16
 80169e8:	af02      	add	r7, sp, #8
 80169ea:	6078      	str	r0, [r7, #4]
 80169ec:	6039      	str	r1, [r7, #0]
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2b01      	cmp	r3, #1
 80169f2:	d119      	bne.n	8016a28 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169fa:	4293      	cmp	r3, r2
 80169fc:	d114      	bne.n	8016a28 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80169fe:	4818      	ldr	r0, [pc, #96]	; (8016a60 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016a00:	f7ff fee6 	bl	80167d0 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8016a04:	4817      	ldr	r0, [pc, #92]	; (8016a64 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016a06:	f7ff f919 	bl	8015c3c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8016a0a:	4817      	ldr	r0, [pc, #92]	; (8016a68 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016a0c:	f00c f99c 	bl	8022d48 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 1024, 600);
 8016a10:	f44f 7316 	mov.w	r3, #600	; 0x258
 8016a14:	9301      	str	r3, [sp, #4]
 8016a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a1a:	9300      	str	r3, [sp, #0]
 8016a1c:	4b10      	ldr	r3, [pc, #64]	; (8016a60 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016a1e:	4a12      	ldr	r2, [pc, #72]	; (8016a68 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016a20:	4910      	ldr	r1, [pc, #64]	; (8016a64 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016a22:	4812      	ldr	r0, [pc, #72]	; (8016a6c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8016a24:	f7ff fea8 	bl	8016778 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d113      	bne.n	8016a56 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a34:	4293      	cmp	r3, r2
 8016a36:	d10e      	bne.n	8016a56 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8016a38:	480c      	ldr	r0, [pc, #48]	; (8016a6c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8016a3a:	f7fe ff51 	bl	80158e0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8016a3e:	480c      	ldr	r0, [pc, #48]	; (8016a70 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8016a40:	f7f8 fcd0 	bl	800f3e4 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8016a44:	4808      	ldr	r0, [pc, #32]	; (8016a68 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016a46:	f7ff ffab 	bl	80169a0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8016a4a:	4806      	ldr	r0, [pc, #24]	; (8016a64 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016a4c:	f7ff f920 	bl	8015c90 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8016a50:	4803      	ldr	r0, [pc, #12]	; (8016a60 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016a52:	f7fe fcf1 	bl	8015438 <_ZN20STM32TouchControllerD1Ev>
}
 8016a56:	bf00      	nop
 8016a58:	3708      	adds	r7, #8
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	20008af4 	.word	0x20008af4
 8016a64:	20008af8 	.word	0x20008af8
 8016a68:	20009718 	.word	0x20009718
 8016a6c:	20009794 	.word	0x20009794
 8016a70:	2000001c 	.word	0x2000001c

08016a74 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8016a74:	b480      	push	{r7}
 8016a76:	b083      	sub	sp, #12
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8016a7c:	2301      	movs	r3, #1
    }
 8016a7e:	4618      	mov	r0, r3
 8016a80:	370c      	adds	r7, #12
 8016a82:	46bd      	mov	sp, r7
 8016a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a88:	4770      	bx	lr

08016a8a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8016a8a:	b480      	push	{r7}
 8016a8c:	b083      	sub	sp, #12
 8016a8e:	af00      	add	r7, sp, #0
 8016a90:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8016a92:	230c      	movs	r3, #12
    }
 8016a94:	4618      	mov	r0, r3
 8016a96:	370c      	adds	r7, #12
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr

08016aa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8016aa0:	b480      	push	{r7}
 8016aa2:	b083      	sub	sp, #12
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
 8016aa8:	460b      	mov	r3, r1
 8016aaa:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016aac:	887a      	ldrh	r2, [r7, #2]
 8016aae:	4613      	mov	r3, r2
 8016ab0:	005b      	lsls	r3, r3, #1
 8016ab2:	4413      	add	r3, r2
 8016ab4:	009b      	lsls	r3, r3, #2
 8016ab6:	3308      	adds	r3, #8
 8016ab8:	687a      	ldr	r2, [r7, #4]
 8016aba:	4413      	add	r3, r2
    }
 8016abc:	4618      	mov	r0, r3
 8016abe:	370c      	adds	r7, #12
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr

08016ac8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8016ac8:	b480      	push	{r7}
 8016aca:	b083      	sub	sp, #12
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
 8016ad0:	460b      	mov	r3, r1
 8016ad2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016ad4:	887a      	ldrh	r2, [r7, #2]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	005b      	lsls	r3, r3, #1
 8016ada:	4413      	add	r3, r2
 8016adc:	009b      	lsls	r3, r3, #2
 8016ade:	3308      	adds	r3, #8
 8016ae0:	687a      	ldr	r2, [r7, #4]
 8016ae2:	4413      	add	r3, r2
    }
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	370c      	adds	r7, #12
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aee:	4770      	bx	lr

08016af0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8016af0:	b480      	push	{r7}
 8016af2:	b083      	sub	sp, #12
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8016af8:	2301      	movs	r3, #1
    }
 8016afa:	4618      	mov	r0, r3
 8016afc:	370c      	adds	r7, #12
 8016afe:	46bd      	mov	sp, r7
 8016b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b04:	4770      	bx	lr

08016b06 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8016b06:	b480      	push	{r7}
 8016b08:	b083      	sub	sp, #12
 8016b0a:	af00      	add	r7, sp, #0
 8016b0c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016b0e:	f640 6304 	movw	r3, #3588	; 0xe04
    }
 8016b12:	4618      	mov	r0, r3
 8016b14:	370c      	adds	r7, #12
 8016b16:	46bd      	mov	sp, r7
 8016b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1c:	4770      	bx	lr

08016b1e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8016b1e:	b480      	push	{r7}
 8016b20:	b083      	sub	sp, #12
 8016b22:	af00      	add	r7, sp, #0
 8016b24:	6078      	str	r0, [r7, #4]
 8016b26:	460b      	mov	r3, r1
 8016b28:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016b2a:	887b      	ldrh	r3, [r7, #2]
 8016b2c:	f640 6204 	movw	r2, #3588	; 0xe04
 8016b30:	fb02 f303 	mul.w	r3, r2, r3
 8016b34:	3308      	adds	r3, #8
 8016b36:	687a      	ldr	r2, [r7, #4]
 8016b38:	4413      	add	r3, r2
    }
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	370c      	adds	r7, #12
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b44:	4770      	bx	lr

08016b46 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8016b46:	b480      	push	{r7}
 8016b48:	b083      	sub	sp, #12
 8016b4a:	af00      	add	r7, sp, #0
 8016b4c:	6078      	str	r0, [r7, #4]
 8016b4e:	460b      	mov	r3, r1
 8016b50:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016b52:	887b      	ldrh	r3, [r7, #2]
 8016b54:	f640 6204 	movw	r2, #3588	; 0xe04
 8016b58:	fb02 f303 	mul.w	r3, r2, r3
 8016b5c:	3308      	adds	r3, #8
 8016b5e:	687a      	ldr	r2, [r7, #4]
 8016b60:	4413      	add	r3, r2
    }
 8016b62:	4618      	mov	r0, r3
 8016b64:	370c      	adds	r7, #12
 8016b66:	46bd      	mov	sp, r7
 8016b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6c:	4770      	bx	lr

08016b6e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8016b6e:	b480      	push	{r7}
 8016b70:	b083      	sub	sp, #12
 8016b72:	af00      	add	r7, sp, #0
 8016b74:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8016b76:	2301      	movs	r3, #1
    }
 8016b78:	4618      	mov	r0, r3
 8016b7a:	370c      	adds	r7, #12
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b82:	4770      	bx	lr

08016b84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8016b84:	b480      	push	{r7}
 8016b86:	b083      	sub	sp, #12
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016b8c:	2310      	movs	r3, #16
    }
 8016b8e:	4618      	mov	r0, r3
 8016b90:	370c      	adds	r7, #12
 8016b92:	46bd      	mov	sp, r7
 8016b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b98:	4770      	bx	lr

08016b9a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8016b9a:	b480      	push	{r7}
 8016b9c:	b083      	sub	sp, #12
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
 8016ba2:	460b      	mov	r3, r1
 8016ba4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016ba6:	887b      	ldrh	r3, [r7, #2]
 8016ba8:	011b      	lsls	r3, r3, #4
 8016baa:	3308      	adds	r3, #8
 8016bac:	687a      	ldr	r2, [r7, #4]
 8016bae:	4413      	add	r3, r2
    }
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	370c      	adds	r7, #12
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bba:	4770      	bx	lr

08016bbc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8016bbc:	b480      	push	{r7}
 8016bbe:	b083      	sub	sp, #12
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8016bc8:	887b      	ldrh	r3, [r7, #2]
 8016bca:	011b      	lsls	r3, r3, #4
 8016bcc:	3308      	adds	r3, #8
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	4413      	add	r3, r2
    }
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	370c      	adds	r7, #12
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bdc:	4770      	bx	lr

08016bde <_GLOBAL__sub_I_touchgfx_init>:
 8016bde:	b580      	push	{r7, lr}
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016be6:	2001      	movs	r0, #1
 8016be8:	f7ff fefc 	bl	80169e4 <_Z41__static_initialization_and_destruction_0ii>
 8016bec:	bd80      	pop	{r7, pc}

08016bee <_GLOBAL__sub_D_touchgfx_init>:
 8016bee:	b580      	push	{r7, lr}
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016bf6:	2000      	movs	r0, #0
 8016bf8:	f7ff fef4 	bl	80169e4 <_Z41__static_initialization_and_destruction_0ii>
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b082      	sub	sp, #8
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	3320      	adds	r3, #32
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	4798      	blx	r3
    }
 8016c12:	bf00      	nop
 8016c14:	3708      	adds	r7, #8
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}

08016c1a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8016c1a:	b480      	push	{r7}
 8016c1c:	b083      	sub	sp, #12
 8016c1e:	af00      	add	r7, sp, #0
 8016c20:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8016c28:	3301      	adds	r3, #1
 8016c2a:	b2da      	uxtb	r2, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8016c32:	bf00      	nop
 8016c34:	370c      	adds	r7, #12
 8016c36:	46bd      	mov	sp, r7
 8016c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3c:	4770      	bx	lr
	...

08016c40 <__NVIC_EnableIRQ>:
{
 8016c40:	b480      	push	{r7}
 8016c42:	b083      	sub	sp, #12
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	4603      	mov	r3, r0
 8016c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	db0b      	blt.n	8016c6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016c52:	79fb      	ldrb	r3, [r7, #7]
 8016c54:	f003 021f 	and.w	r2, r3, #31
 8016c58:	4907      	ldr	r1, [pc, #28]	; (8016c78 <__NVIC_EnableIRQ+0x38>)
 8016c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c5e:	095b      	lsrs	r3, r3, #5
 8016c60:	2001      	movs	r0, #1
 8016c62:	fa00 f202 	lsl.w	r2, r0, r2
 8016c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016c6a:	bf00      	nop
 8016c6c:	370c      	adds	r7, #12
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c74:	4770      	bx	lr
 8016c76:	bf00      	nop
 8016c78:	e000e100 	.word	0xe000e100

08016c7c <__NVIC_DisableIRQ>:
{
 8016c7c:	b480      	push	{r7}
 8016c7e:	b083      	sub	sp, #12
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	4603      	mov	r3, r0
 8016c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	db12      	blt.n	8016cb4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016c8e:	79fb      	ldrb	r3, [r7, #7]
 8016c90:	f003 021f 	and.w	r2, r3, #31
 8016c94:	490a      	ldr	r1, [pc, #40]	; (8016cc0 <__NVIC_DisableIRQ+0x44>)
 8016c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c9a:	095b      	lsrs	r3, r3, #5
 8016c9c:	2001      	movs	r0, #1
 8016c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8016ca2:	3320      	adds	r3, #32
 8016ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016ca8:	f3bf 8f4f 	dsb	sy
}
 8016cac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016cae:	f3bf 8f6f 	isb	sy
}
 8016cb2:	bf00      	nop
}
 8016cb4:	bf00      	nop
 8016cb6:	370c      	adds	r7, #12
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbe:	4770      	bx	lr
 8016cc0:	e000e100 	.word	0xe000e100

08016cc4 <__NVIC_SetPriority>:
{
 8016cc4:	b480      	push	{r7}
 8016cc6:	b083      	sub	sp, #12
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	4603      	mov	r3, r0
 8016ccc:	6039      	str	r1, [r7, #0]
 8016cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	db0a      	blt.n	8016cee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016cd8:	683b      	ldr	r3, [r7, #0]
 8016cda:	b2da      	uxtb	r2, r3
 8016cdc:	490c      	ldr	r1, [pc, #48]	; (8016d10 <__NVIC_SetPriority+0x4c>)
 8016cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ce2:	0112      	lsls	r2, r2, #4
 8016ce4:	b2d2      	uxtb	r2, r2
 8016ce6:	440b      	add	r3, r1
 8016ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016cec:	e00a      	b.n	8016d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016cee:	683b      	ldr	r3, [r7, #0]
 8016cf0:	b2da      	uxtb	r2, r3
 8016cf2:	4908      	ldr	r1, [pc, #32]	; (8016d14 <__NVIC_SetPriority+0x50>)
 8016cf4:	79fb      	ldrb	r3, [r7, #7]
 8016cf6:	f003 030f 	and.w	r3, r3, #15
 8016cfa:	3b04      	subs	r3, #4
 8016cfc:	0112      	lsls	r2, r2, #4
 8016cfe:	b2d2      	uxtb	r2, r2
 8016d00:	440b      	add	r3, r1
 8016d02:	761a      	strb	r2, [r3, #24]
}
 8016d04:	bf00      	nop
 8016d06:	370c      	adds	r7, #12
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0e:	4770      	bx	lr
 8016d10:	e000e100 	.word	0xe000e100
 8016d14:	e000ed00 	.word	0xe000ed00

08016d18 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8016d18:	b5b0      	push	{r4, r5, r7, lr}
 8016d1a:	b082      	sub	sp, #8
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f000 fe61 	bl	80179ea <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8016d28:	687d      	ldr	r5, [r7, #4]
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	3360      	adds	r3, #96	; 0x60
 8016d30:	681c      	ldr	r4, [r3, #0]
 8016d32:	f005 fb51 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 8016d36:	4603      	mov	r3, r0
 8016d38:	4619      	mov	r1, r3
 8016d3a:	4628      	mov	r0, r5
 8016d3c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD012C000, (void*)0);
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	3384      	adds	r3, #132	; 0x84
 8016d46:	681c      	ldr	r4, [r3, #0]
 8016d48:	2300      	movs	r3, #0
 8016d4a:	4a04      	ldr	r2, [pc, #16]	; (8016d5c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8016d4c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8016d50:	47a0      	blx	r4
}
 8016d52:	bf00      	nop
 8016d54:	3708      	adds	r7, #8
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bdb0      	pop	{r4, r5, r7, pc}
 8016d5a:	bf00      	nop
 8016d5c:	d012c000 	.word	0xd012c000

08016d60 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b082      	sub	sp, #8
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8016d68:	2109      	movs	r1, #9
 8016d6a:	205a      	movs	r0, #90	; 0x5a
 8016d6c:	f7ff ffaa 	bl	8016cc4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016d70:	2109      	movs	r1, #9
 8016d72:	2058      	movs	r0, #88	; 0x58
 8016d74:	f7ff ffa6 	bl	8016cc4 <__NVIC_SetPriority>
}
 8016d78:	bf00      	nop
 8016d7a:	3708      	adds	r7, #8
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	bd80      	pop	{r7, pc}

08016d80 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b082      	sub	sp, #8
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016d88:	205a      	movs	r0, #90	; 0x5a
 8016d8a:	f7ff ff59 	bl	8016c40 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8016d8e:	2058      	movs	r0, #88	; 0x58
 8016d90:	f7ff ff56 	bl	8016c40 <__NVIC_EnableIRQ>
}
 8016d94:	bf00      	nop
 8016d96:	3708      	adds	r7, #8
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}

08016d9c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b082      	sub	sp, #8
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016da4:	205a      	movs	r0, #90	; 0x5a
 8016da6:	f7ff ff69 	bl	8016c7c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8016daa:	2058      	movs	r0, #88	; 0x58
 8016dac:	f7ff ff66 	bl	8016c7c <__NVIC_DisableIRQ>
}
 8016db0:	bf00      	nop
 8016db2:	3708      	adds	r7, #8
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8016db8:	b480      	push	{r7}
 8016dba:	b083      	sub	sp, #12
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016dc0:	4b11      	ldr	r3, [pc, #68]	; (8016e08 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016dc2:	68db      	ldr	r3, [r3, #12]
 8016dc4:	b29b      	uxth	r3, r3
 8016dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016dca:	b29b      	uxth	r3, r3
 8016dcc:	3b01      	subs	r3, #1
 8016dce:	b29a      	uxth	r2, r3
 8016dd0:	4b0e      	ldr	r3, [pc, #56]	; (8016e0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016dd2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016dd4:	4b0c      	ldr	r3, [pc, #48]	; (8016e08 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016dd6:	691b      	ldr	r3, [r3, #16]
 8016dd8:	b29b      	uxth	r3, r3
 8016dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016dde:	b29b      	uxth	r3, r3
 8016de0:	3b01      	subs	r3, #1
 8016de2:	b29a      	uxth	r2, r3
 8016de4:	4b0a      	ldr	r3, [pc, #40]	; (8016e10 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8016de6:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8016de8:	4b08      	ldr	r3, [pc, #32]	; (8016e0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016dea:	881a      	ldrh	r2, [r3, #0]
 8016dec:	4b06      	ldr	r3, [pc, #24]	; (8016e08 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016dee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016df0:	4b05      	ldr	r3, [pc, #20]	; (8016e08 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016df4:	4a04      	ldr	r2, [pc, #16]	; (8016e08 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016df6:	f043 0301 	orr.w	r3, r3, #1
 8016dfa:	6353      	str	r3, [r2, #52]	; 0x34
}
 8016dfc:	bf00      	nop
 8016dfe:	370c      	adds	r7, #12
 8016e00:	46bd      	mov	sp, r7
 8016e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e06:	4770      	bx	lr
 8016e08:	40016800 	.word	0x40016800
 8016e0c:	20009810 	.word	0x20009810
 8016e10:	20009812 	.word	0x20009812

08016e14 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b082      	sub	sp, #8
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f000 fdca 	bl	80179b8 <_ZN8touchgfx3HAL10beginFrameEv>
 8016e24:	4603      	mov	r3, r0
}
 8016e26:	4618      	mov	r0, r3
 8016e28:	3708      	adds	r7, #8
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	bd80      	pop	{r7, pc}

08016e2e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8016e2e:	b580      	push	{r7, lr}
 8016e30:	b082      	sub	sp, #8
 8016e32:	af00      	add	r7, sp, #0
 8016e34:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f000 fdc9 	bl	80179d0 <_ZN8touchgfx3HAL8endFrameEv>

}
 8016e3e:	bf00      	nop
 8016e40:	3708      	adds	r7, #8
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bd80      	pop	{r7, pc}
	...

08016e48 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b083      	sub	sp, #12
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016e50:	4b03      	ldr	r3, [pc, #12]	; (8016e60 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8016e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016e54:	4618      	mov	r0, r3
 8016e56:	370c      	adds	r7, #12
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5e:	4770      	bx	lr
 8016e60:	40016884 	.word	0x40016884

08016e64 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016e64:	b480      	push	{r7}
 8016e66:	b083      	sub	sp, #12
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	6078      	str	r0, [r7, #4]
 8016e6c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016e6e:	4a06      	ldr	r2, [pc, #24]	; (8016e88 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016e74:	4b05      	ldr	r3, [pc, #20]	; (8016e8c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8016e76:	2201      	movs	r2, #1
 8016e78:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016e7a:	bf00      	nop
 8016e7c:	370c      	adds	r7, #12
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e84:	4770      	bx	lr
 8016e86:	bf00      	nop
 8016e88:	40016884 	.word	0x40016884
 8016e8c:	40016800 	.word	0x40016800

08016e90 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b082      	sub	sp, #8
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
 8016e98:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	6839      	ldr	r1, [r7, #0]
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f000 fd54 	bl	801794c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016ea4:	bf00      	nop
 8016ea6:	3708      	adds	r7, #8
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}

08016eac <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b084      	sub	sp, #16
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	60f8      	str	r0, [r7, #12]
 8016eb4:	60b9      	str	r1, [r7, #8]
 8016eb6:	607a      	str	r2, [r7, #4]
 8016eb8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8016eba:	68f8      	ldr	r0, [r7, #12]
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	687a      	ldr	r2, [r7, #4]
 8016ec0:	68b9      	ldr	r1, [r7, #8]
 8016ec2:	f000 feae 	bl	8017c22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8016ec6:	4603      	mov	r3, r0
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3710      	adds	r7, #16
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8016ed8:	4b1a      	ldr	r3, [pc, #104]	; (8016f44 <HAL_LTDC_LineEventCallback+0x74>)
 8016eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016edc:	4a1a      	ldr	r2, [pc, #104]	; (8016f48 <HAL_LTDC_LineEventCallback+0x78>)
 8016ede:	8812      	ldrh	r2, [r2, #0]
 8016ee0:	4293      	cmp	r3, r2
 8016ee2:	bf0c      	ite	eq
 8016ee4:	2301      	moveq	r3, #1
 8016ee6:	2300      	movne	r3, #0
 8016ee8:	b2db      	uxtb	r3, r3
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d017      	beq.n	8016f1e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8016eee:	4b17      	ldr	r3, [pc, #92]	; (8016f4c <HAL_LTDC_LineEventCallback+0x7c>)
 8016ef0:	881b      	ldrh	r3, [r3, #0]
 8016ef2:	4619      	mov	r1, r3
 8016ef4:	6878      	ldr	r0, [r7, #4]
 8016ef6:	f7ef ffe5 	bl	8006ec4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8016efa:	f7f8 fd97 	bl	800fa2c <_ZN8touchgfx3HAL11getInstanceEv>
 8016efe:	4603      	mov	r3, r0
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7ff fe8a 	bl	8016c1a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8016f06:	f7fe fd73 	bl	80159f0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8016f0a:	f7f8 fd8f 	bl	800fa2c <_ZN8touchgfx3HAL11getInstanceEv>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	4618      	mov	r0, r3
 8016f12:	f001 fb79 	bl	8018608 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8016f16:	2000      	movs	r0, #0
 8016f18:	f7fe fab0 	bl	801547c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8016f1c:	e00e      	b.n	8016f3c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8016f1e:	4b0a      	ldr	r3, [pc, #40]	; (8016f48 <HAL_LTDC_LineEventCallback+0x78>)
 8016f20:	881b      	ldrh	r3, [r3, #0]
 8016f22:	4619      	mov	r1, r3
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f7ef ffcd 	bl	8006ec4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8016f2a:	2000      	movs	r0, #0
 8016f2c:	f7fe fab1 	bl	8015492 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8016f30:	f7f8 fd7c 	bl	800fa2c <_ZN8touchgfx3HAL11getInstanceEv>
 8016f34:	4603      	mov	r3, r0
 8016f36:	4618      	mov	r0, r3
 8016f38:	f7ff fe61 	bl	8016bfe <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8016f3c:	bf00      	nop
 8016f3e:	3708      	adds	r7, #8
 8016f40:	46bd      	mov	sp, r7
 8016f42:	bd80      	pop	{r7, pc}
 8016f44:	40016800 	.word	0x40016800
 8016f48:	20009810 	.word	0x20009810
 8016f4c:	20009812 	.word	0x20009812

08016f50 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016f50:	8880      	ldrh	r0, [r0, #4]
 8016f52:	4770      	bx	lr

08016f54 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016f54:	2300      	movs	r3, #0
 8016f56:	8083      	strh	r3, [r0, #4]
 8016f58:	4770      	bx	lr
	...

08016f5c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f5e:	6803      	ldr	r3, [r0, #0]
 8016f60:	4605      	mov	r5, r0
 8016f62:	460e      	mov	r6, r1
 8016f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f66:	2100      	movs	r1, #0
 8016f68:	4798      	blx	r3
 8016f6a:	682b      	ldr	r3, [r5, #0]
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	6a1b      	ldr	r3, [r3, #32]
 8016f70:	4628      	mov	r0, r5
 8016f72:	4798      	blx	r3
 8016f74:	88ab      	ldrh	r3, [r5, #4]
 8016f76:	1b34      	subs	r4, r6, r4
 8016f78:	b2a4      	uxth	r4, r4
 8016f7a:	fbb4 f4f0 	udiv	r4, r4, r0
 8016f7e:	42a3      	cmp	r3, r4
 8016f80:	d805      	bhi.n	8016f8e <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016f82:	4b0e      	ldr	r3, [pc, #56]	; (8016fbc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016f84:	4a0e      	ldr	r2, [pc, #56]	; (8016fc0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016f86:	211e      	movs	r1, #30
 8016f88:	480e      	ldr	r0, [pc, #56]	; (8016fc4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8016f8a:	f017 f943 	bl	802e214 <__assert_func>
 8016f8e:	682b      	ldr	r3, [r5, #0]
 8016f90:	2100      	movs	r1, #0
 8016f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f94:	4628      	mov	r0, r5
 8016f96:	4798      	blx	r3
 8016f98:	682b      	ldr	r3, [r5, #0]
 8016f9a:	4607      	mov	r7, r0
 8016f9c:	6a1b      	ldr	r3, [r3, #32]
 8016f9e:	4628      	mov	r0, r5
 8016fa0:	4798      	blx	r3
 8016fa2:	1bf3      	subs	r3, r6, r7
 8016fa4:	b29b      	uxth	r3, r3
 8016fa6:	fbb3 f2f0 	udiv	r2, r3, r0
 8016faa:	fb02 3010 	mls	r0, r2, r0, r3
 8016fae:	b118      	cbz	r0, 8016fb8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016fb0:	4b05      	ldr	r3, [pc, #20]	; (8016fc8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016fb2:	4a03      	ldr	r2, [pc, #12]	; (8016fc0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016fb4:	211f      	movs	r1, #31
 8016fb6:	e7e7      	b.n	8016f88 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016fb8:	4620      	mov	r0, r4
 8016fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fbc:	08030b50 	.word	0x08030b50
 8016fc0:	08030cbe 	.word	0x08030cbe
 8016fc4:	08030b65 	.word	0x08030b65
 8016fc8:	08030b93 	.word	0x08030b93

08016fcc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016fcc:	b538      	push	{r3, r4, r5, lr}
 8016fce:	6803      	ldr	r3, [r0, #0]
 8016fd0:	6a1b      	ldr	r3, [r3, #32]
 8016fd2:	460d      	mov	r5, r1
 8016fd4:	4604      	mov	r4, r0
 8016fd6:	4798      	blx	r3
 8016fd8:	4285      	cmp	r5, r0
 8016fda:	d905      	bls.n	8016fe8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016fdc:	4b0c      	ldr	r3, [pc, #48]	; (8017010 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016fde:	4a0d      	ldr	r2, [pc, #52]	; (8017014 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016fe0:	2130      	movs	r1, #48	; 0x30
 8016fe2:	480d      	ldr	r0, [pc, #52]	; (8017018 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016fe4:	f017 f916 	bl	802e214 <__assert_func>
 8016fe8:	6823      	ldr	r3, [r4, #0]
 8016fea:	88a5      	ldrh	r5, [r4, #4]
 8016fec:	69db      	ldr	r3, [r3, #28]
 8016fee:	4620      	mov	r0, r4
 8016ff0:	4798      	blx	r3
 8016ff2:	4285      	cmp	r5, r0
 8016ff4:	d303      	bcc.n	8016ffe <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016ff6:	4b09      	ldr	r3, [pc, #36]	; (801701c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016ff8:	4a06      	ldr	r2, [pc, #24]	; (8017014 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016ffa:	2131      	movs	r1, #49	; 0x31
 8016ffc:	e7f1      	b.n	8016fe2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016ffe:	6823      	ldr	r3, [r4, #0]
 8017000:	88a1      	ldrh	r1, [r4, #4]
 8017002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017004:	4620      	mov	r0, r4
 8017006:	4798      	blx	r3
 8017008:	88a3      	ldrh	r3, [r4, #4]
 801700a:	3301      	adds	r3, #1
 801700c:	80a3      	strh	r3, [r4, #4]
 801700e:	bd38      	pop	{r3, r4, r5, pc}
 8017010:	08030c0d 	.word	0x08030c0d
 8017014:	08030d01 	.word	0x08030d01
 8017018:	08030b65 	.word	0x08030b65
 801701c:	08030c24 	.word	0x08030c24

08017020 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017020:	b570      	push	{r4, r5, r6, lr}
 8017022:	6803      	ldr	r3, [r0, #0]
 8017024:	6a1b      	ldr	r3, [r3, #32]
 8017026:	4616      	mov	r6, r2
 8017028:	4604      	mov	r4, r0
 801702a:	460d      	mov	r5, r1
 801702c:	4798      	blx	r3
 801702e:	4286      	cmp	r6, r0
 8017030:	d905      	bls.n	801703e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8017032:	4b06      	ldr	r3, [pc, #24]	; (801704c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8017034:	4a06      	ldr	r2, [pc, #24]	; (8017050 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8017036:	4807      	ldr	r0, [pc, #28]	; (8017054 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8017038:	213a      	movs	r1, #58	; 0x3a
 801703a:	f017 f8eb 	bl	802e214 <__assert_func>
 801703e:	6823      	ldr	r3, [r4, #0]
 8017040:	4629      	mov	r1, r5
 8017042:	4620      	mov	r0, r4
 8017044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801704a:	4718      	bx	r3
 801704c:	08030c0d 	.word	0x08030c0d
 8017050:	08030c74 	.word	0x08030c74
 8017054:	08030b65 	.word	0x08030b65

08017058 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017058:	4770      	bx	lr
	...

0801705c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801705c:	4a02      	ldr	r2, [pc, #8]	; (8017068 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801705e:	6002      	str	r2, [r0, #0]
 8017060:	2200      	movs	r2, #0
 8017062:	8082      	strh	r2, [r0, #4]
 8017064:	4770      	bx	lr
 8017066:	bf00      	nop
 8017068:	08030c48 	.word	0x08030c48

0801706c <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 801706c:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8017070:	4770      	bx	lr

08017072 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8017072:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8017076:	4770      	bx	lr

08017078 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8017078:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 801707c:	4770      	bx	lr

0801707e <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801707e:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8017082:	4770      	bx	lr

08017084 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8017084:	b510      	push	{r4, lr}
 8017086:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 801708a:	600c      	str	r4, [r1, #0]
 801708c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017090:	6011      	str	r1, [r2, #0]
 8017092:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8017096:	801a      	strh	r2, [r3, #0]
 8017098:	9b02      	ldr	r3, [sp, #8]
 801709a:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 801709e:	801a      	strh	r2, [r3, #0]
 80170a0:	bd10      	pop	{r4, pc}

080170a2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 80170a2:	b510      	push	{r4, lr}
 80170a4:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 80170a8:	600c      	str	r4, [r1, #0]
 80170aa:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80170ae:	6011      	str	r1, [r2, #0]
 80170b0:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 80170b4:	801a      	strh	r2, [r3, #0]
 80170b6:	bd10      	pop	{r4, pc}

080170b8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 80170b8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80170bc:	600b      	str	r3, [r1, #0]
 80170be:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80170c2:	6013      	str	r3, [r2, #0]
 80170c4:	4770      	bx	lr

080170c6 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 80170c6:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 80170ca:	4770      	bx	lr

080170cc <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80170cc:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 80170d0:	4770      	bx	lr

080170d2 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 80170d2:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 80170d6:	4770      	bx	lr

080170d8 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 80170d8:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 80170dc:	4770      	bx	lr

080170de <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80170de:	b570      	push	{r4, r5, r6, lr}
 80170e0:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80170e4:	428d      	cmp	r5, r1
 80170e6:	bfb8      	it	lt
 80170e8:	460d      	movlt	r5, r1
 80170ea:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80170ee:	428d      	cmp	r5, r1
 80170f0:	4604      	mov	r4, r0
 80170f2:	bfa8      	it	ge
 80170f4:	460d      	movge	r5, r1
 80170f6:	4616      	mov	r6, r2
 80170f8:	b99a      	cbnz	r2, 8017122 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 80170fa:	6803      	ldr	r3, [r0, #0]
 80170fc:	4629      	mov	r1, r5
 80170fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017102:	4798      	blx	r3
 8017104:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017108:	b358      	cbz	r0, 8017162 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 801710a:	6803      	ldr	r3, [r0, #0]
 801710c:	68db      	ldr	r3, [r3, #12]
 801710e:	4798      	blx	r3
 8017110:	b338      	cbz	r0, 8017162 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017112:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017116:	6803      	ldr	r3, [r0, #0]
 8017118:	4621      	mov	r1, r4
 801711a:	689b      	ldr	r3, [r3, #8]
 801711c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017120:	4718      	bx	r3
 8017122:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8017126:	2b00      	cmp	r3, #0
 8017128:	dd07      	ble.n	801713a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 801712a:	f005 f955 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 801712e:	4621      	mov	r1, r4
 8017130:	f005 f98a 	bl	801c448 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017134:	2300      	movs	r3, #0
 8017136:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 801713a:	6823      	ldr	r3, [r4, #0]
 801713c:	4620      	mov	r0, r4
 801713e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017142:	4798      	blx	r3
 8017144:	2300      	movs	r3, #0
 8017146:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 801714a:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 801714e:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8017152:	f005 f941 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 8017156:	4621      	mov	r1, r4
 8017158:	f005 f944 	bl	801c3e4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801715c:	2301      	movs	r3, #1
 801715e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8017162:	bd70      	pop	{r4, r5, r6, pc}

08017164 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017164:	b510      	push	{r4, lr}
 8017166:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801716a:	4299      	cmp	r1, r3
 801716c:	bfb8      	it	lt
 801716e:	4619      	movlt	r1, r3
 8017170:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8017174:	4299      	cmp	r1, r3
 8017176:	bfa8      	it	ge
 8017178:	4619      	movge	r1, r3
 801717a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 801717e:	428b      	cmp	r3, r1
 8017180:	4604      	mov	r4, r0
 8017182:	d010      	beq.n	80171a6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017184:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8017188:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 801718c:	b158      	cbz	r0, 80171a6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801718e:	6803      	ldr	r3, [r0, #0]
 8017190:	68db      	ldr	r3, [r3, #12]
 8017192:	4798      	blx	r3
 8017194:	b138      	cbz	r0, 80171a6 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017196:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801719a:	6803      	ldr	r3, [r0, #0]
 801719c:	4621      	mov	r1, r4
 801719e:	689b      	ldr	r3, [r3, #8]
 80171a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171a4:	4718      	bx	r3
 80171a6:	bd10      	pop	{r4, pc}

080171a8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 80171a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171ac:	4291      	cmp	r1, r2
 80171ae:	4604      	mov	r4, r0
 80171b0:	460e      	mov	r6, r1
 80171b2:	4615      	mov	r5, r2
 80171b4:	4698      	mov	r8, r3
 80171b6:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80171ba:	db05      	blt.n	80171c8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 80171bc:	4b11      	ldr	r3, [pc, #68]	; (8017204 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 80171be:	4a12      	ldr	r2, [pc, #72]	; (8017208 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 80171c0:	214b      	movs	r1, #75	; 0x4b
 80171c2:	4812      	ldr	r0, [pc, #72]	; (801720c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 80171c4:	f017 f826 	bl	802e214 <__assert_func>
 80171c8:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 80171cc:	6803      	ldr	r3, [r0, #0]
 80171ce:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80171d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80171d6:	4798      	blx	r3
 80171d8:	f1b8 0f00 	cmp.w	r8, #0
 80171dc:	d10c      	bne.n	80171f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 80171de:	1bad      	subs	r5, r5, r6
 80171e0:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 80171e4:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 80171e8:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 80171ec:	42bb      	cmp	r3, r7
 80171ee:	d806      	bhi.n	80171fe <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 80171f0:	4b07      	ldr	r3, [pc, #28]	; (8017210 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 80171f2:	4a05      	ldr	r2, [pc, #20]	; (8017208 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 80171f4:	2158      	movs	r1, #88	; 0x58
 80171f6:	e7e4      	b.n	80171c2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 80171f8:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 80171fc:	e7f2      	b.n	80171e4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 80171fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017202:	bf00      	nop
 8017204:	08030d3f 	.word	0x08030d3f
 8017208:	08030e8c 	.word	0x08030e8c
 801720c:	08030d49 	.word	0x08030d49
 8017210:	08030da0 	.word	0x08030da0

08017214 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8017214:	b570      	push	{r4, r5, r6, lr}
 8017216:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 801721a:	4604      	mov	r4, r0
 801721c:	b3a3      	cbz	r3, 8017288 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 801721e:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8017222:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8017226:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 801722a:	3001      	adds	r0, #1
 801722c:	1ad2      	subs	r2, r2, r3
 801722e:	b212      	sxth	r2, r2
 8017230:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8017234:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017238:	2100      	movs	r1, #0
 801723a:	b280      	uxth	r0, r0
 801723c:	47a8      	blx	r5
 801723e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8017242:	6823      	ldr	r3, [r4, #0]
 8017244:	4401      	add	r1, r0
 8017246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801724a:	4620      	mov	r0, r4
 801724c:	4798      	blx	r3
 801724e:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8017252:	429a      	cmp	r2, r3
 8017254:	db18      	blt.n	8017288 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017256:	2500      	movs	r5, #0
 8017258:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801725c:	f005 f8bc 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 8017260:	4621      	mov	r1, r4
 8017262:	f005 f8f1 	bl	801c448 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017266:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 801726a:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 801726e:	b158      	cbz	r0, 8017288 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017270:	6803      	ldr	r3, [r0, #0]
 8017272:	68db      	ldr	r3, [r3, #12]
 8017274:	4798      	blx	r3
 8017276:	b138      	cbz	r0, 8017288 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017278:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 801727c:	6803      	ldr	r3, [r0, #0]
 801727e:	4621      	mov	r1, r4
 8017280:	689b      	ldr	r3, [r3, #8]
 8017282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017286:	4718      	bx	r3
 8017288:	bd70      	pop	{r4, r5, r6, pc}

0801728a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 801728a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801728c:	4604      	mov	r4, r0
 801728e:	460d      	mov	r5, r1
 8017290:	b1a9      	cbz	r1, 80172be <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8017292:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8017296:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 801729a:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 801729e:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 80172a2:	ab01      	add	r3, sp, #4
 80172a4:	1a12      	subs	r2, r2, r0
 80172a6:	1b89      	subs	r1, r1, r6
 80172a8:	1a38      	subs	r0, r7, r0
 80172aa:	f006 fa27 	bl	801d6fc <_ZN8touchgfx6muldivElllRl>
 80172ae:	4629      	mov	r1, r5
 80172b0:	ab01      	add	r3, sp, #4
 80172b2:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 80172b6:	4430      	add	r0, r6
 80172b8:	f006 fa20 	bl	801d6fc <_ZN8touchgfx6muldivElllRl>
 80172bc:	b285      	uxth	r5, r0
 80172be:	4628      	mov	r0, r5
 80172c0:	b003      	add	sp, #12
 80172c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080172c4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80172c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c8:	4604      	mov	r4, r0
 80172ca:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 80172ce:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 80172d2:	460e      	mov	r6, r1
 80172d4:	4615      	mov	r5, r2
 80172d6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80172da:	4619      	mov	r1, r3
 80172dc:	463a      	mov	r2, r7
 80172de:	3058      	adds	r0, #88	; 0x58
 80172e0:	4698      	mov	r8, r3
 80172e2:	f7f9 f965 	bl	80105b0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80172e6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80172ea:	4446      	add	r6, r8
 80172ec:	42b3      	cmp	r3, r6
 80172ee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80172f2:	bfb8      	it	lt
 80172f4:	8126      	strhlt	r6, [r4, #8]
 80172f6:	443d      	add	r5, r7
 80172f8:	42ab      	cmp	r3, r5
 80172fa:	bfb8      	it	lt
 80172fc:	8165      	strhlt	r5, [r4, #10]
 80172fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017302 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8017302:	b510      	push	{r4, lr}
 8017304:	4604      	mov	r4, r0
 8017306:	302c      	adds	r0, #44	; 0x2c
 8017308:	f003 fb5d 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801730c:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8017310:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8017314:	4620      	mov	r0, r4
 8017316:	f7f9 f94b 	bl	80105b0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801731a:	bd10      	pop	{r4, pc}

0801731c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 801731c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801731e:	4604      	mov	r4, r0
 8017320:	4626      	mov	r6, r4
 8017322:	2500      	movs	r5, #0
 8017324:	f7f9 f84e 	bl	80103c4 <_ZN8touchgfx8DrawableC1Ev>
 8017328:	4b23      	ldr	r3, [pc, #140]	; (80173b8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 801732a:	62a5      	str	r5, [r4, #40]	; 0x28
 801732c:	f846 3b2c 	str.w	r3, [r6], #44
 8017330:	2226      	movs	r2, #38	; 0x26
 8017332:	4629      	mov	r1, r5
 8017334:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017338:	4630      	mov	r0, r6
 801733a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801733e:	f017 f8f7 	bl	802e530 <memset>
 8017342:	4630      	mov	r0, r6
 8017344:	f7f9 f83e 	bl	80103c4 <_ZN8touchgfx8DrawableC1Ev>
 8017348:	a902      	add	r1, sp, #8
 801734a:	4b1c      	ldr	r3, [pc, #112]	; (80173bc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 801734c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801734e:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8017352:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017356:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 801735a:	4630      	mov	r0, r6
 801735c:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017360:	f003 fb31 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017364:	4638      	mov	r0, r7
 8017366:	f7f9 f82d 	bl	80103c4 <_ZN8touchgfx8DrawableC1Ev>
 801736a:	4b15      	ldr	r3, [pc, #84]	; (80173c0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 801736c:	65a3      	str	r3, [r4, #88]	; 0x58
 801736e:	2364      	movs	r3, #100	; 0x64
 8017370:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8017374:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8017378:	4b12      	ldr	r3, [pc, #72]	; (80173c4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 801737a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801737e:	4629      	mov	r1, r5
 8017380:	4630      	mov	r0, r6
 8017382:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8017386:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 801738a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 801738e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017392:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8017396:	f7f9 f891 	bl	80104bc <_ZN8touchgfx8Drawable4setXEs>
 801739a:	4629      	mov	r1, r5
 801739c:	4630      	mov	r0, r6
 801739e:	f7f9 f89c 	bl	80104da <_ZN8touchgfx8Drawable4setYEs>
 80173a2:	4631      	mov	r1, r6
 80173a4:	4620      	mov	r0, r4
 80173a6:	f000 f877 	bl	8017498 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80173aa:	4620      	mov	r0, r4
 80173ac:	4639      	mov	r1, r7
 80173ae:	f000 f873 	bl	8017498 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80173b2:	4620      	mov	r0, r4
 80173b4:	b003      	add	sp, #12
 80173b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173b8:	08030dc4 	.word	0x08030dc4
 80173bc:	08032108 	.word	0x08032108
 80173c0:	08030fb8 	.word	0x08030fb8
 80173c4:	0801dd61 	.word	0x0801dd61

080173c8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80173c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80173ca:	2000      	movs	r0, #0
 80173cc:	b12b      	cbz	r3, 80173da <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80173ce:	b920      	cbnz	r0, 80173da <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80173d0:	1a5a      	subs	r2, r3, r1
 80173d2:	4250      	negs	r0, r2
 80173d4:	4150      	adcs	r0, r2
 80173d6:	699b      	ldr	r3, [r3, #24]
 80173d8:	e7f8      	b.n	80173cc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80173da:	4770      	bx	lr

080173dc <_ZN8touchgfx9Container9removeAllEv>:
 80173dc:	2200      	movs	r2, #0
 80173de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80173e0:	b123      	cbz	r3, 80173ec <_ZN8touchgfx9Container9removeAllEv+0x10>
 80173e2:	6999      	ldr	r1, [r3, #24]
 80173e4:	6281      	str	r1, [r0, #40]	; 0x28
 80173e6:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80173ea:	e7f8      	b.n	80173de <_ZN8touchgfx9Container9removeAllEv+0x2>
 80173ec:	4770      	bx	lr

080173ee <_ZN8touchgfx9Container6unlinkEv>:
 80173ee:	2300      	movs	r3, #0
 80173f0:	6283      	str	r3, [r0, #40]	; 0x28
 80173f2:	4770      	bx	lr

080173f4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80173f4:	2200      	movs	r2, #0
 80173f6:	8002      	strh	r2, [r0, #0]
 80173f8:	8042      	strh	r2, [r0, #2]
 80173fa:	8082      	strh	r2, [r0, #4]
 80173fc:	80c2      	strh	r2, [r0, #6]
 80173fe:	4770      	bx	lr

08017400 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017400:	b570      	push	{r4, r5, r6, lr}
 8017402:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017404:	460d      	mov	r5, r1
 8017406:	4616      	mov	r6, r2
 8017408:	b13c      	cbz	r4, 801741a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801740a:	6823      	ldr	r3, [r4, #0]
 801740c:	4620      	mov	r0, r4
 801740e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017410:	4632      	mov	r2, r6
 8017412:	4629      	mov	r1, r5
 8017414:	4798      	blx	r3
 8017416:	69a4      	ldr	r4, [r4, #24]
 8017418:	e7f6      	b.n	8017408 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801741a:	bd70      	pop	{r4, r5, r6, pc}

0801741c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801741c:	b538      	push	{r3, r4, r5, lr}
 801741e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017420:	460d      	mov	r5, r1
 8017422:	b134      	cbz	r4, 8017432 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017424:	682b      	ldr	r3, [r5, #0]
 8017426:	4621      	mov	r1, r4
 8017428:	689b      	ldr	r3, [r3, #8]
 801742a:	4628      	mov	r0, r5
 801742c:	4798      	blx	r3
 801742e:	69a4      	ldr	r4, [r4, #24]
 8017430:	e7f7      	b.n	8017422 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017432:	bd38      	pop	{r3, r4, r5, pc}

08017434 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017434:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017436:	b19b      	cbz	r3, 8017460 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017438:	428b      	cmp	r3, r1
 801743a:	d109      	bne.n	8017450 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801743c:	699a      	ldr	r2, [r3, #24]
 801743e:	2100      	movs	r1, #0
 8017440:	6159      	str	r1, [r3, #20]
 8017442:	6282      	str	r2, [r0, #40]	; 0x28
 8017444:	b902      	cbnz	r2, 8017448 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017446:	4770      	bx	lr
 8017448:	6199      	str	r1, [r3, #24]
 801744a:	4770      	bx	lr
 801744c:	4613      	mov	r3, r2
 801744e:	b13a      	cbz	r2, 8017460 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017450:	699a      	ldr	r2, [r3, #24]
 8017452:	428a      	cmp	r2, r1
 8017454:	d1fa      	bne.n	801744c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017456:	698a      	ldr	r2, [r1, #24]
 8017458:	619a      	str	r2, [r3, #24]
 801745a:	2300      	movs	r3, #0
 801745c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017460:	4770      	bx	lr

08017462 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017462:	b410      	push	{r4}
 8017464:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017466:	4604      	mov	r4, r0
 8017468:	b92b      	cbnz	r3, 8017476 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801746a:	6803      	ldr	r3, [r0, #0]
 801746c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017472:	4611      	mov	r1, r2
 8017474:	4718      	bx	r3
 8017476:	b941      	cbnz	r1, 801748a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017478:	6193      	str	r3, [r2, #24]
 801747a:	6282      	str	r2, [r0, #40]	; 0x28
 801747c:	6154      	str	r4, [r2, #20]
 801747e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017482:	4770      	bx	lr
 8017484:	4603      	mov	r3, r0
 8017486:	2800      	cmp	r0, #0
 8017488:	d0f9      	beq.n	801747e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801748a:	4299      	cmp	r1, r3
 801748c:	6998      	ldr	r0, [r3, #24]
 801748e:	d1f9      	bne.n	8017484 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017490:	6190      	str	r0, [r2, #24]
 8017492:	618a      	str	r2, [r1, #24]
 8017494:	e7f2      	b.n	801747c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017498 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017498:	4288      	cmp	r0, r1
 801749a:	b508      	push	{r3, lr}
 801749c:	d105      	bne.n	80174aa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801749e:	4b11      	ldr	r3, [pc, #68]	; (80174e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80174a0:	4a11      	ldr	r2, [pc, #68]	; (80174e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80174a2:	2123      	movs	r1, #35	; 0x23
 80174a4:	4811      	ldr	r0, [pc, #68]	; (80174ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80174a6:	f016 feb5 	bl	802e214 <__assert_func>
 80174aa:	694b      	ldr	r3, [r1, #20]
 80174ac:	b11b      	cbz	r3, 80174b6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80174ae:	4b10      	ldr	r3, [pc, #64]	; (80174f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80174b0:	4a0d      	ldr	r2, [pc, #52]	; (80174e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80174b2:	2124      	movs	r1, #36	; 0x24
 80174b4:	e7f6      	b.n	80174a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80174b6:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80174ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80174bc:	b913      	cbnz	r3, 80174c4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80174be:	6281      	str	r1, [r0, #40]	; 0x28
 80174c0:	bd08      	pop	{r3, pc}
 80174c2:	4613      	mov	r3, r2
 80174c4:	699a      	ldr	r2, [r3, #24]
 80174c6:	b12a      	cbz	r2, 80174d4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80174c8:	428b      	cmp	r3, r1
 80174ca:	d1fa      	bne.n	80174c2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80174cc:	4b09      	ldr	r3, [pc, #36]	; (80174f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80174ce:	4a06      	ldr	r2, [pc, #24]	; (80174e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80174d0:	2135      	movs	r1, #53	; 0x35
 80174d2:	e7e7      	b.n	80174a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80174d4:	428b      	cmp	r3, r1
 80174d6:	d103      	bne.n	80174e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80174d8:	4b06      	ldr	r3, [pc, #24]	; (80174f4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80174da:	4a03      	ldr	r2, [pc, #12]	; (80174e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80174dc:	2138      	movs	r1, #56	; 0x38
 80174de:	e7e1      	b.n	80174a4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80174e0:	6199      	str	r1, [r3, #24]
 80174e2:	e7ed      	b.n	80174c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80174e4:	08030ee5 	.word	0x08030ee5
 80174e8:	0803103c 	.word	0x0803103c
 80174ec:	08030f11 	.word	0x08030f11
 80174f0:	08030f44 	.word	0x08030f44
 80174f4:	08030f7a 	.word	0x08030f7a

080174f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80174f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174fc:	461f      	mov	r7, r3
 80174fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8017502:	460d      	mov	r5, r1
 8017504:	4616      	mov	r6, r2
 8017506:	b103      	cbz	r3, 801750a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017508:	6038      	str	r0, [r7, #0]
 801750a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801750c:	b314      	cbz	r4, 8017554 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801750e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017512:	b1eb      	cbz	r3, 8017550 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017514:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017518:	428d      	cmp	r5, r1
 801751a:	db19      	blt.n	8017550 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801751c:	8923      	ldrh	r3, [r4, #8]
 801751e:	b289      	uxth	r1, r1
 8017520:	440b      	add	r3, r1
 8017522:	b21b      	sxth	r3, r3
 8017524:	429d      	cmp	r5, r3
 8017526:	da13      	bge.n	8017550 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017528:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801752c:	4296      	cmp	r6, r2
 801752e:	db0f      	blt.n	8017550 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017530:	8963      	ldrh	r3, [r4, #10]
 8017532:	b292      	uxth	r2, r2
 8017534:	4413      	add	r3, r2
 8017536:	b21b      	sxth	r3, r3
 8017538:	429e      	cmp	r6, r3
 801753a:	da09      	bge.n	8017550 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801753c:	6823      	ldr	r3, [r4, #0]
 801753e:	1ab2      	subs	r2, r6, r2
 8017540:	1a69      	subs	r1, r5, r1
 8017542:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017546:	b212      	sxth	r2, r2
 8017548:	463b      	mov	r3, r7
 801754a:	b209      	sxth	r1, r1
 801754c:	4620      	mov	r0, r4
 801754e:	47c0      	blx	r8
 8017550:	69a4      	ldr	r4, [r4, #24]
 8017552:	e7db      	b.n	801750c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017558 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801755c:	4c6e      	ldr	r4, [pc, #440]	; (8017718 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801755e:	b0a1      	sub	sp, #132	; 0x84
 8017560:	6824      	ldr	r4, [r4, #0]
 8017562:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8017564:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8017568:	9303      	str	r3, [sp, #12]
 801756a:	2400      	movs	r4, #0
 801756c:	802c      	strh	r4, [r5, #0]
 801756e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8017570:	802c      	strh	r4, [r5, #0]
 8017572:	601c      	str	r4, [r3, #0]
 8017574:	4606      	mov	r6, r0
 8017576:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801757a:	f7ff ffbd 	bl	80174f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801757e:	f1b9 0f03 	cmp.w	r9, #3
 8017582:	f340 80c2 	ble.w	801770a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8017586:	4631      	mov	r1, r6
 8017588:	a80c      	add	r0, sp, #48	; 0x30
 801758a:	f005 ff87 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801758e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017592:	9306      	str	r3, [sp, #24]
 8017594:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017598:	9307      	str	r3, [sp, #28]
 801759a:	9b03      	ldr	r3, [sp, #12]
 801759c:	f8d3 a000 	ldr.w	sl, [r3]
 80175a0:	f1ba 0f00 	cmp.w	sl, #0
 80175a4:	f000 80b4 	beq.w	8017710 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 80175a8:	4651      	mov	r1, sl
 80175aa:	a810      	add	r0, sp, #64	; 0x40
 80175ac:	f005 ff76 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80175b0:	9b01      	ldr	r3, [sp, #4]
 80175b2:	9a06      	ldr	r2, [sp, #24]
 80175b4:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80175b8:	189d      	adds	r5, r3, r2
 80175ba:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80175be:	9a07      	ldr	r2, [sp, #28]
 80175c0:	2002      	movs	r0, #2
 80175c2:	fb91 f1f0 	sdiv	r1, r1, r0
 80175c6:	4419      	add	r1, r3
 80175c8:	1a6d      	subs	r5, r5, r1
 80175ca:	9b02      	ldr	r3, [sp, #8]
 80175cc:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80175d0:	4413      	add	r3, r2
 80175d2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80175d6:	fb92 f2f0 	sdiv	r2, r2, r0
 80175da:	440a      	add	r2, r1
 80175dc:	1a9b      	subs	r3, r3, r2
 80175de:	435b      	muls	r3, r3
 80175e0:	fb05 3505 	mla	r5, r5, r5, r3
 80175e4:	4f4d      	ldr	r7, [pc, #308]	; (801771c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 80175e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80175e8:	ac10      	add	r4, sp, #64	; 0x40
 80175ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80175ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80175ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80175f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80175f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80175f4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80175f8:	f1b9 0f0c 	cmp.w	r9, #12
 80175fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017600:	f04f 0303 	mov.w	r3, #3
 8017604:	bfc8      	it	gt
 8017606:	4698      	movgt	r8, r3
 8017608:	f8cd 9000 	str.w	r9, [sp]
 801760c:	f04f 0400 	mov.w	r4, #0
 8017610:	bfdc      	itt	le
 8017612:	f109 32ff 	addle.w	r2, r9, #4294967295
 8017616:	fb92 f8f3 	sdivle	r8, r2, r3
 801761a:	1c63      	adds	r3, r4, #1
 801761c:	aa10      	add	r2, sp, #64	; 0x40
 801761e:	f004 0401 	and.w	r4, r4, #1
 8017622:	9308      	str	r3, [sp, #32]
 8017624:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017628:	9b00      	ldr	r3, [sp, #0]
 801762a:	fb93 f3f8 	sdiv	r3, r3, r8
 801762e:	b29b      	uxth	r3, r3
 8017630:	3404      	adds	r4, #4
 8017632:	f04f 0b00 	mov.w	fp, #0
 8017636:	9304      	str	r3, [sp, #16]
 8017638:	9a04      	ldr	r2, [sp, #16]
 801763a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801763e:	fb13 f302 	smulbb	r3, r3, r2
 8017642:	9a01      	ldr	r2, [sp, #4]
 8017644:	b29b      	uxth	r3, r3
 8017646:	1899      	adds	r1, r3, r2
 8017648:	9305      	str	r3, [sp, #20]
 801764a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801764e:	b209      	sxth	r1, r1
 8017650:	4299      	cmp	r1, r3
 8017652:	db4d      	blt.n	80176f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017654:	8932      	ldrh	r2, [r6, #8]
 8017656:	4413      	add	r3, r2
 8017658:	b21b      	sxth	r3, r3
 801765a:	4299      	cmp	r1, r3
 801765c:	da48      	bge.n	80176f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801765e:	9b04      	ldr	r3, [sp, #16]
 8017660:	6827      	ldr	r7, [r4, #0]
 8017662:	fb17 f703 	smulbb	r7, r7, r3
 8017666:	9b02      	ldr	r3, [sp, #8]
 8017668:	b2bf      	uxth	r7, r7
 801766a:	18fa      	adds	r2, r7, r3
 801766c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017670:	b212      	sxth	r2, r2
 8017672:	429a      	cmp	r2, r3
 8017674:	db3c      	blt.n	80176f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017676:	8970      	ldrh	r0, [r6, #10]
 8017678:	4403      	add	r3, r0
 801767a:	b21b      	sxth	r3, r3
 801767c:	429a      	cmp	r2, r3
 801767e:	da37      	bge.n	80176f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017680:	2300      	movs	r3, #0
 8017682:	930b      	str	r3, [sp, #44]	; 0x2c
 8017684:	4630      	mov	r0, r6
 8017686:	ab0b      	add	r3, sp, #44	; 0x2c
 8017688:	f7ff ff36 	bl	80174f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801768c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801768e:	b37a      	cbz	r2, 80176f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017690:	4552      	cmp	r2, sl
 8017692:	d02d      	beq.n	80176f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017694:	4611      	mov	r1, r2
 8017696:	a80e      	add	r0, sp, #56	; 0x38
 8017698:	9209      	str	r2, [sp, #36]	; 0x24
 801769a:	f005 feff 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801769e:	9a06      	ldr	r2, [sp, #24]
 80176a0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80176a4:	9b01      	ldr	r3, [sp, #4]
 80176a6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80176aa:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80176ae:	4413      	add	r3, r2
 80176b0:	f04f 0e02 	mov.w	lr, #2
 80176b4:	fb91 f1fe 	sdiv	r1, r1, lr
 80176b8:	4401      	add	r1, r0
 80176ba:	1a58      	subs	r0, r3, r1
 80176bc:	9a07      	ldr	r2, [sp, #28]
 80176be:	9b02      	ldr	r3, [sp, #8]
 80176c0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80176c4:	fb9c fcfe 	sdiv	ip, ip, lr
 80176c8:	4413      	add	r3, r2
 80176ca:	448c      	add	ip, r1
 80176cc:	eba3 030c 	sub.w	r3, r3, ip
 80176d0:	435b      	muls	r3, r3
 80176d2:	fb00 3300 	mla	r3, r0, r0, r3
 80176d6:	42ab      	cmp	r3, r5
 80176d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176da:	d208      	bcs.n	80176ee <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80176dc:	9803      	ldr	r0, [sp, #12]
 80176de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80176e0:	6001      	str	r1, [r0, #0]
 80176e2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80176e4:	9805      	ldr	r0, [sp, #20]
 80176e6:	8008      	strh	r0, [r1, #0]
 80176e8:	992b      	ldr	r1, [sp, #172]	; 0xac
 80176ea:	461d      	mov	r5, r3
 80176ec:	800f      	strh	r7, [r1, #0]
 80176ee:	4692      	mov	sl, r2
 80176f0:	f10b 0b01 	add.w	fp, fp, #1
 80176f4:	f1bb 0f04 	cmp.w	fp, #4
 80176f8:	f104 0408 	add.w	r4, r4, #8
 80176fc:	d19c      	bne.n	8017638 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80176fe:	9b00      	ldr	r3, [sp, #0]
 8017700:	9c08      	ldr	r4, [sp, #32]
 8017702:	444b      	add	r3, r9
 8017704:	4544      	cmp	r4, r8
 8017706:	9300      	str	r3, [sp, #0]
 8017708:	d187      	bne.n	801761a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801770a:	b021      	add	sp, #132	; 0x84
 801770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017710:	f04f 35ff 	mov.w	r5, #4294967295
 8017714:	e766      	b.n	80175e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8017716:	bf00      	nop
 8017718:	20009820 	.word	0x20009820
 801771c:	0802ffa0 	.word	0x0802ffa0

08017720 <_ZN8touchgfx4RectaNERKS0_>:
 8017720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017724:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017728:	888c      	ldrh	r4, [r1, #4]
 801772a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801772e:	443c      	add	r4, r7
 8017730:	b2a4      	uxth	r4, r4
 8017732:	fa0f f884 	sxth.w	r8, r4
 8017736:	45c1      	cmp	r9, r8
 8017738:	da2f      	bge.n	801779a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801773a:	8882      	ldrh	r2, [r0, #4]
 801773c:	444a      	add	r2, r9
 801773e:	b292      	uxth	r2, r2
 8017740:	fa0f fe82 	sxth.w	lr, r2
 8017744:	4577      	cmp	r7, lr
 8017746:	da28      	bge.n	801779a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017748:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801774c:	88cb      	ldrh	r3, [r1, #6]
 801774e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017752:	442b      	add	r3, r5
 8017754:	b21b      	sxth	r3, r3
 8017756:	429e      	cmp	r6, r3
 8017758:	da1f      	bge.n	801779a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801775a:	88c3      	ldrh	r3, [r0, #6]
 801775c:	4433      	add	r3, r6
 801775e:	b29b      	uxth	r3, r3
 8017760:	fa0f fc83 	sxth.w	ip, r3
 8017764:	4565      	cmp	r5, ip
 8017766:	da18      	bge.n	801779a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017768:	454f      	cmp	r7, r9
 801776a:	bfb8      	it	lt
 801776c:	464f      	movlt	r7, r9
 801776e:	42b5      	cmp	r5, r6
 8017770:	bfb8      	it	lt
 8017772:	4635      	movlt	r5, r6
 8017774:	45f0      	cmp	r8, lr
 8017776:	bfd8      	it	le
 8017778:	4622      	movle	r2, r4
 801777a:	1bd2      	subs	r2, r2, r7
 801777c:	8082      	strh	r2, [r0, #4]
 801777e:	884a      	ldrh	r2, [r1, #2]
 8017780:	88c9      	ldrh	r1, [r1, #6]
 8017782:	8007      	strh	r7, [r0, #0]
 8017784:	440a      	add	r2, r1
 8017786:	b292      	uxth	r2, r2
 8017788:	b211      	sxth	r1, r2
 801778a:	458c      	cmp	ip, r1
 801778c:	bfa8      	it	ge
 801778e:	4613      	movge	r3, r2
 8017790:	1b5b      	subs	r3, r3, r5
 8017792:	80c3      	strh	r3, [r0, #6]
 8017794:	8045      	strh	r5, [r0, #2]
 8017796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801779a:	2300      	movs	r3, #0
 801779c:	8003      	strh	r3, [r0, #0]
 801779e:	8043      	strh	r3, [r0, #2]
 80177a0:	8083      	strh	r3, [r0, #4]
 80177a2:	80c3      	strh	r3, [r0, #6]
 80177a4:	e7f7      	b.n	8017796 <_ZN8touchgfx4RectaNERKS0_+0x76>

080177a6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80177a6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	dd06      	ble.n	80177bc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80177ae:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80177b2:	2800      	cmp	r0, #0
 80177b4:	bfcc      	ite	gt
 80177b6:	2000      	movgt	r0, #0
 80177b8:	2001      	movle	r0, #1
 80177ba:	4770      	bx	lr
 80177bc:	2001      	movs	r0, #1
 80177be:	4770      	bx	lr

080177c0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80177c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c4:	2300      	movs	r3, #0
 80177c6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80177c8:	8003      	strh	r3, [r0, #0]
 80177ca:	4604      	mov	r4, r0
 80177cc:	8043      	strh	r3, [r0, #2]
 80177ce:	8083      	strh	r3, [r0, #4]
 80177d0:	80c3      	strh	r3, [r0, #6]
 80177d2:	2d00      	cmp	r5, #0
 80177d4:	d040      	beq.n	8017858 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80177d6:	1d28      	adds	r0, r5, #4
 80177d8:	f7ff ffe5 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80177dc:	b988      	cbnz	r0, 8017802 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80177de:	4620      	mov	r0, r4
 80177e0:	f7ff ffe1 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80177e4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80177e8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80177ec:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80177f0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80177f4:	b138      	cbz	r0, 8017806 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80177f6:	8022      	strh	r2, [r4, #0]
 80177f8:	8063      	strh	r3, [r4, #2]
 80177fa:	f8a4 e004 	strh.w	lr, [r4, #4]
 80177fe:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017802:	69ad      	ldr	r5, [r5, #24]
 8017804:	e7e5      	b.n	80177d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017806:	f9b4 0000 	ldrsh.w	r0, [r4]
 801780a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801780e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017812:	4290      	cmp	r0, r2
 8017814:	4607      	mov	r7, r0
 8017816:	bfa8      	it	ge
 8017818:	4617      	movge	r7, r2
 801781a:	4472      	add	r2, lr
 801781c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017820:	8027      	strh	r7, [r4, #0]
 8017822:	4299      	cmp	r1, r3
 8017824:	460e      	mov	r6, r1
 8017826:	4440      	add	r0, r8
 8017828:	bfa8      	it	ge
 801782a:	461e      	movge	r6, r3
 801782c:	4471      	add	r1, lr
 801782e:	4463      	add	r3, ip
 8017830:	b200      	sxth	r0, r0
 8017832:	b212      	sxth	r2, r2
 8017834:	b209      	sxth	r1, r1
 8017836:	b21b      	sxth	r3, r3
 8017838:	4290      	cmp	r0, r2
 801783a:	bfac      	ite	ge
 801783c:	ebc7 0200 	rsbge	r2, r7, r0
 8017840:	ebc7 0202 	rsblt	r2, r7, r2
 8017844:	4299      	cmp	r1, r3
 8017846:	bfac      	ite	ge
 8017848:	ebc6 0301 	rsbge	r3, r6, r1
 801784c:	ebc6 0303 	rsblt	r3, r6, r3
 8017850:	8066      	strh	r6, [r4, #2]
 8017852:	80a2      	strh	r2, [r4, #4]
 8017854:	80e3      	strh	r3, [r4, #6]
 8017856:	e7d4      	b.n	8017802 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017858:	4620      	mov	r0, r4
 801785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801785e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801785e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017862:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017866:	b383      	cbz	r3, 80178ca <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017868:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801786a:	b374      	cbz	r4, 80178ca <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801786c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017870:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017874:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017878:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801787c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017880:	b303      	cbz	r3, 80178c4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017882:	4668      	mov	r0, sp
 8017884:	1d21      	adds	r1, r4, #4
 8017886:	f8ad 5000 	strh.w	r5, [sp]
 801788a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801788e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017892:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017896:	f7ff ff43 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801789a:	4668      	mov	r0, sp
 801789c:	f7ff ff83 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80178a0:	b980      	cbnz	r0, 80178c4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80178a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80178a6:	88a2      	ldrh	r2, [r4, #4]
 80178a8:	1a9b      	subs	r3, r3, r2
 80178aa:	f8ad 3000 	strh.w	r3, [sp]
 80178ae:	88e2      	ldrh	r2, [r4, #6]
 80178b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80178b4:	1a9b      	subs	r3, r3, r2
 80178b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80178ba:	6823      	ldr	r3, [r4, #0]
 80178bc:	4669      	mov	r1, sp
 80178be:	689b      	ldr	r3, [r3, #8]
 80178c0:	4620      	mov	r0, r4
 80178c2:	4798      	blx	r3
 80178c4:	69a4      	ldr	r4, [r4, #24]
 80178c6:	2c00      	cmp	r4, #0
 80178c8:	d1d8      	bne.n	801787c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80178ca:	b002      	add	sp, #8
 80178cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080178d0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80178d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178d2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80178d6:	460d      	mov	r5, r1
 80178d8:	4616      	mov	r6, r2
 80178da:	b323      	cbz	r3, 8017926 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80178dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80178de:	b314      	cbz	r4, 8017926 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80178e0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80178e4:	b1eb      	cbz	r3, 8017922 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80178e6:	6828      	ldr	r0, [r5, #0]
 80178e8:	6869      	ldr	r1, [r5, #4]
 80178ea:	466b      	mov	r3, sp
 80178ec:	c303      	stmia	r3!, {r0, r1}
 80178ee:	4668      	mov	r0, sp
 80178f0:	1d21      	adds	r1, r4, #4
 80178f2:	f7ff ff15 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 80178f6:	4668      	mov	r0, sp
 80178f8:	f7ff ff55 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80178fc:	b988      	cbnz	r0, 8017922 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80178fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8017902:	88a2      	ldrh	r2, [r4, #4]
 8017904:	1a9b      	subs	r3, r3, r2
 8017906:	f8ad 3000 	strh.w	r3, [sp]
 801790a:	88e2      	ldrh	r2, [r4, #6]
 801790c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017910:	1a9b      	subs	r3, r3, r2
 8017912:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017916:	6823      	ldr	r3, [r4, #0]
 8017918:	4632      	mov	r2, r6
 801791a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801791c:	4669      	mov	r1, sp
 801791e:	4620      	mov	r0, r4
 8017920:	4798      	blx	r3
 8017922:	69a4      	ldr	r4, [r4, #24]
 8017924:	e7db      	b.n	80178de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017926:	b002      	add	sp, #8
 8017928:	bd70      	pop	{r4, r5, r6, pc}

0801792a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801792a:	b513      	push	{r0, r1, r4, lr}
 801792c:	6803      	ldr	r3, [r0, #0]
 801792e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8017932:	2300      	movs	r3, #0
 8017934:	e9cd 3300 	strd	r3, r3, [sp]
 8017938:	466b      	mov	r3, sp
 801793a:	47a0      	blx	r4
 801793c:	b002      	add	sp, #8
 801793e:	bd10      	pop	{r4, pc}

08017940 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017940:	2301      	movs	r3, #1
 8017942:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017946:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801794a:	4770      	bx	lr

0801794c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801794c:	2301      	movs	r3, #1
 801794e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017952:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017956:	4770      	bx	lr

08017958 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017958:	6843      	ldr	r3, [r0, #4]
 801795a:	2201      	movs	r2, #1
 801795c:	725a      	strb	r2, [r3, #9]
 801795e:	6840      	ldr	r0, [r0, #4]
 8017960:	6803      	ldr	r3, [r0, #0]
 8017962:	691b      	ldr	r3, [r3, #16]
 8017964:	4718      	bx	r3

08017966 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017966:	6840      	ldr	r0, [r0, #4]
 8017968:	6803      	ldr	r3, [r0, #0]
 801796a:	689b      	ldr	r3, [r3, #8]
 801796c:	4718      	bx	r3

0801796e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801796e:	b530      	push	{r4, r5, lr}
 8017970:	b08b      	sub	sp, #44	; 0x2c
 8017972:	6804      	ldr	r4, [r0, #0]
 8017974:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017978:	9509      	str	r5, [sp, #36]	; 0x24
 801797a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801797e:	9508      	str	r5, [sp, #32]
 8017980:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8017984:	9507      	str	r5, [sp, #28]
 8017986:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801798a:	9506      	str	r5, [sp, #24]
 801798c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017990:	9505      	str	r5, [sp, #20]
 8017992:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8017996:	9504      	str	r5, [sp, #16]
 8017998:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801799c:	9503      	str	r5, [sp, #12]
 801799e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80179a2:	9502      	str	r5, [sp, #8]
 80179a4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80179a8:	e9cd 3500 	strd	r3, r5, [sp]
 80179ac:	4613      	mov	r3, r2
 80179ae:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80179b0:	2200      	movs	r2, #0
 80179b2:	47a0      	blx	r4
 80179b4:	b00b      	add	sp, #44	; 0x2c
 80179b6:	bd30      	pop	{r4, r5, pc}

080179b8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80179b8:	4b04      	ldr	r3, [pc, #16]	; (80179cc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	b123      	cbz	r3, 80179c8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80179be:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80179c2:	f080 0001 	eor.w	r0, r0, #1
 80179c6:	4770      	bx	lr
 80179c8:	2001      	movs	r0, #1
 80179ca:	4770      	bx	lr
 80179cc:	2000981e 	.word	0x2000981e

080179d0 <_ZN8touchgfx3HAL8endFrameEv>:
 80179d0:	b510      	push	{r4, lr}
 80179d2:	4604      	mov	r4, r0
 80179d4:	6840      	ldr	r0, [r0, #4]
 80179d6:	6803      	ldr	r3, [r0, #0]
 80179d8:	689b      	ldr	r3, [r3, #8]
 80179da:	4798      	blx	r3
 80179dc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80179e0:	b113      	cbz	r3, 80179e8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80179e2:	2301      	movs	r3, #1
 80179e4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80179e8:	bd10      	pop	{r4, pc}

080179ea <_ZN8touchgfx3HAL10initializeEv>:
 80179ea:	b510      	push	{r4, lr}
 80179ec:	4604      	mov	r4, r0
 80179ee:	f7fd ff99 	bl	8015924 <_ZN8touchgfx10OSWrappers10initializeEv>
 80179f2:	6860      	ldr	r0, [r4, #4]
 80179f4:	6803      	ldr	r3, [r0, #0]
 80179f6:	68db      	ldr	r3, [r3, #12]
 80179f8:	4798      	blx	r3
 80179fa:	68e0      	ldr	r0, [r4, #12]
 80179fc:	6803      	ldr	r3, [r0, #0]
 80179fe:	689b      	ldr	r3, [r3, #8]
 8017a00:	4798      	blx	r3
 8017a02:	6823      	ldr	r3, [r4, #0]
 8017a04:	4620      	mov	r0, r4
 8017a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a0c:	4718      	bx	r3

08017a0e <_ZN8touchgfx3HAL9taskEntryEv>:
 8017a0e:	b508      	push	{r3, lr}
 8017a10:	6803      	ldr	r3, [r0, #0]
 8017a12:	4604      	mov	r4, r0
 8017a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017a16:	4798      	blx	r3
 8017a18:	6823      	ldr	r3, [r4, #0]
 8017a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	4798      	blx	r3
 8017a20:	f7fd fff6 	bl	8015a10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8017a24:	6823      	ldr	r3, [r4, #0]
 8017a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a28:	e7f8      	b.n	8017a1c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08017a2c <_ZN8touchgfx3HAL4tickEv>:
 8017a2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017a2e:	6803      	ldr	r3, [r0, #0]
 8017a30:	4d5c      	ldr	r5, [pc, #368]	; (8017ba4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017a36:	4604      	mov	r4, r0
 8017a38:	4798      	blx	r3
 8017a3a:	2800      	cmp	r0, #0
 8017a3c:	f000 8097 	beq.w	8017b6e <_ZN8touchgfx3HAL4tickEv+0x142>
 8017a40:	2001      	movs	r0, #1
 8017a42:	f7fd fd1b 	bl	801547c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017a46:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017a4a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017a4e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017a52:	2600      	movs	r6, #0
 8017a54:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017a58:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017a5c:	b133      	cbz	r3, 8017a6c <_ZN8touchgfx3HAL4tickEv+0x40>
 8017a5e:	6823      	ldr	r3, [r4, #0]
 8017a60:	4620      	mov	r0, r4
 8017a62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017a66:	4798      	blx	r3
 8017a68:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017a6c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017a70:	6862      	ldr	r2, [r4, #4]
 8017a72:	f083 0301 	eor.w	r3, r3, #1
 8017a76:	7253      	strb	r3, [r2, #9]
 8017a78:	2601      	movs	r6, #1
 8017a7a:	702e      	strb	r6, [r5, #0]
 8017a7c:	f004 fcac 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 8017a80:	6803      	ldr	r3, [r0, #0]
 8017a82:	4631      	mov	r1, r6
 8017a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a86:	4798      	blx	r3
 8017a88:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017a8c:	b90b      	cbnz	r3, 8017a92 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017a8e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017a92:	f004 fca1 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 8017a96:	6803      	ldr	r3, [r0, #0]
 8017a98:	695b      	ldr	r3, [r3, #20]
 8017a9a:	4798      	blx	r3
 8017a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a9e:	6803      	ldr	r3, [r0, #0]
 8017aa0:	691b      	ldr	r3, [r3, #16]
 8017aa2:	4798      	blx	r3
 8017aa4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017aa8:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017aac:	3b01      	subs	r3, #1
 8017aae:	b2db      	uxtb	r3, r3
 8017ab0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017ab4:	b10a      	cbz	r2, 8017aba <_ZN8touchgfx3HAL4tickEv+0x8e>
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d1eb      	bne.n	8017a92 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017aba:	4a3b      	ldr	r2, [pc, #236]	; (8017ba8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017abc:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017ac0:	7813      	ldrb	r3, [r2, #0]
 8017ac2:	3301      	adds	r3, #1
 8017ac4:	b25b      	sxtb	r3, r3
 8017ac6:	4299      	cmp	r1, r3
 8017ac8:	7013      	strb	r3, [r2, #0]
 8017aca:	dc10      	bgt.n	8017aee <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017acc:	68e0      	ldr	r0, [r4, #12]
 8017ace:	2300      	movs	r3, #0
 8017ad0:	7013      	strb	r3, [r2, #0]
 8017ad2:	6803      	ldr	r3, [r0, #0]
 8017ad4:	aa03      	add	r2, sp, #12
 8017ad6:	68db      	ldr	r3, [r3, #12]
 8017ad8:	a902      	add	r1, sp, #8
 8017ada:	4798      	blx	r3
 8017adc:	6823      	ldr	r3, [r4, #0]
 8017ade:	2800      	cmp	r0, #0
 8017ae0:	d051      	beq.n	8017b86 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8017ae2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017ae6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017aea:	4620      	mov	r0, r4
 8017aec:	4798      	blx	r3
 8017aee:	6960      	ldr	r0, [r4, #20]
 8017af0:	2300      	movs	r3, #0
 8017af2:	f88d 3007 	strb.w	r3, [sp, #7]
 8017af6:	b158      	cbz	r0, 8017b10 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8017af8:	6803      	ldr	r3, [r0, #0]
 8017afa:	f10d 0107 	add.w	r1, sp, #7
 8017afe:	68db      	ldr	r3, [r3, #12]
 8017b00:	4798      	blx	r3
 8017b02:	b128      	cbz	r0, 8017b10 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8017b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b06:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017b0a:	6803      	ldr	r3, [r0, #0]
 8017b0c:	68db      	ldr	r3, [r3, #12]
 8017b0e:	4798      	blx	r3
 8017b10:	f104 001c 	add.w	r0, r4, #28
 8017b14:	f013 ffe0 	bl	802bad8 <_ZN8touchgfx8Gestures4tickEv>
 8017b18:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8017b1c:	b30b      	cbz	r3, 8017b62 <_ZN8touchgfx3HAL4tickEv+0x136>
 8017b1e:	6920      	ldr	r0, [r4, #16]
 8017b20:	6803      	ldr	r3, [r0, #0]
 8017b22:	691b      	ldr	r3, [r3, #16]
 8017b24:	4798      	blx	r3
 8017b26:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017b28:	4606      	mov	r6, r0
 8017b2a:	b903      	cbnz	r3, 8017b2e <_ZN8touchgfx3HAL4tickEv+0x102>
 8017b2c:	6720      	str	r0, [r4, #112]	; 0x70
 8017b2e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017b30:	4a1e      	ldr	r2, [pc, #120]	; (8017bac <_ZN8touchgfx3HAL4tickEv+0x180>)
 8017b32:	1af3      	subs	r3, r6, r3
 8017b34:	4293      	cmp	r3, r2
 8017b36:	d914      	bls.n	8017b62 <_ZN8touchgfx3HAL4tickEv+0x136>
 8017b38:	6920      	ldr	r0, [r4, #16]
 8017b3a:	6803      	ldr	r3, [r0, #0]
 8017b3c:	699b      	ldr	r3, [r3, #24]
 8017b3e:	4798      	blx	r3
 8017b40:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017b42:	2264      	movs	r2, #100	; 0x64
 8017b44:	1af3      	subs	r3, r6, r3
 8017b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8017b4e:	2800      	cmp	r0, #0
 8017b50:	dc1e      	bgt.n	8017b90 <_ZN8touchgfx3HAL4tickEv+0x164>
 8017b52:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8017b56:	6920      	ldr	r0, [r4, #16]
 8017b58:	6803      	ldr	r3, [r0, #0]
 8017b5a:	2100      	movs	r1, #0
 8017b5c:	69db      	ldr	r3, [r3, #28]
 8017b5e:	4798      	blx	r3
 8017b60:	6726      	str	r6, [r4, #112]	; 0x70
 8017b62:	f004 fc39 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 8017b66:	6803      	ldr	r3, [r0, #0]
 8017b68:	2100      	movs	r1, #0
 8017b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b6c:	4798      	blx	r3
 8017b6e:	6823      	ldr	r3, [r4, #0]
 8017b70:	4620      	mov	r0, r4
 8017b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017b76:	4798      	blx	r3
 8017b78:	2001      	movs	r0, #1
 8017b7a:	f7fd fc8a 	bl	8015492 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017b7e:	2300      	movs	r3, #0
 8017b80:	702b      	strb	r3, [r5, #0]
 8017b82:	b004      	add	sp, #16
 8017b84:	bd70      	pop	{r4, r5, r6, pc}
 8017b86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	4798      	blx	r3
 8017b8e:	e7ae      	b.n	8017aee <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017b90:	2863      	cmp	r0, #99	; 0x63
 8017b92:	bfcb      	itete	gt
 8017b94:	2300      	movgt	r3, #0
 8017b96:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017b9a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017b9e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8017ba2:	e7d8      	b.n	8017b56 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8017ba4:	20009824 	.word	0x20009824
 8017ba8:	20009825 	.word	0x20009825
 8017bac:	05f5e100 	.word	0x05f5e100

08017bb0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017bb0:	f7fd befa 	b.w	80159a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017bb4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017bb4:	6581      	str	r1, [r0, #88]	; 0x58
 8017bb6:	301c      	adds	r0, #28
 8017bb8:	f013 bf8c 	b.w	802bad4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017bbc <_ZN8touchgfx3HAL5touchEll>:
 8017bbc:	b530      	push	{r4, r5, lr}
 8017bbe:	b087      	sub	sp, #28
 8017bc0:	4604      	mov	r4, r0
 8017bc2:	a804      	add	r0, sp, #16
 8017bc4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017bc8:	f004 f9cc 	bl	801bf64 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017bcc:	9b04      	ldr	r3, [sp, #16]
 8017bce:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017bd2:	a906      	add	r1, sp, #24
 8017bd4:	9b05      	ldr	r3, [sp, #20]
 8017bd6:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017bda:	a803      	add	r0, sp, #12
 8017bdc:	f004 fa14 	bl	801c008 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017be0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017be4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017be8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017bec:	f104 001c 	add.w	r0, r4, #28
 8017bf0:	b189      	cbz	r1, 8017c16 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017bf2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8017bf6:	9300      	str	r3, [sp, #0]
 8017bf8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017bfc:	4613      	mov	r3, r2
 8017bfe:	462a      	mov	r2, r5
 8017c00:	f013 ff78 	bl	802baf4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017c04:	b128      	cbz	r0, 8017c12 <_ZN8touchgfx3HAL5touchEll+0x56>
 8017c06:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017c0a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017c0c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017c10:	6623      	str	r3, [r4, #96]	; 0x60
 8017c12:	b007      	add	sp, #28
 8017c14:	bd30      	pop	{r4, r5, pc}
 8017c16:	f013 ffb1 	bl	802bb7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017c20:	e7f1      	b.n	8017c06 <_ZN8touchgfx3HAL5touchEll+0x4a>

08017c22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017c22:	b510      	push	{r4, lr}
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d046      	beq.n	8017cb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017c28:	ea81 0002 	eor.w	r0, r1, r2
 8017c2c:	07c4      	lsls	r4, r0, #31
 8017c2e:	d508      	bpl.n	8017c42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017c30:	440b      	add	r3, r1
 8017c32:	3a01      	subs	r2, #1
 8017c34:	428b      	cmp	r3, r1
 8017c36:	d93e      	bls.n	8017cb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017c38:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017c3c:	f801 0b01 	strb.w	r0, [r1], #1
 8017c40:	e7f8      	b.n	8017c34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017c42:	07d0      	lsls	r0, r2, #31
 8017c44:	bf42      	ittt	mi
 8017c46:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017c4a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017c4e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017c52:	2b01      	cmp	r3, #1
 8017c54:	d911      	bls.n	8017c7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017c56:	ea81 0402 	eor.w	r4, r1, r2
 8017c5a:	07a4      	lsls	r4, r4, #30
 8017c5c:	4610      	mov	r0, r2
 8017c5e:	d022      	beq.n	8017ca6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017c60:	f023 0401 	bic.w	r4, r3, #1
 8017c64:	440c      	add	r4, r1
 8017c66:	428c      	cmp	r4, r1
 8017c68:	4602      	mov	r2, r0
 8017c6a:	d904      	bls.n	8017c76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017c6c:	8812      	ldrh	r2, [r2, #0]
 8017c6e:	f821 2b02 	strh.w	r2, [r1], #2
 8017c72:	3002      	adds	r0, #2
 8017c74:	e7f7      	b.n	8017c66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017c76:	f003 0301 	and.w	r3, r3, #1
 8017c7a:	f023 0003 	bic.w	r0, r3, #3
 8017c7e:	4408      	add	r0, r1
 8017c80:	4288      	cmp	r0, r1
 8017c82:	4614      	mov	r4, r2
 8017c84:	d904      	bls.n	8017c90 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017c86:	6824      	ldr	r4, [r4, #0]
 8017c88:	f841 4b04 	str.w	r4, [r1], #4
 8017c8c:	3204      	adds	r2, #4
 8017c8e:	e7f7      	b.n	8017c80 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017c90:	f003 0303 	and.w	r3, r3, #3
 8017c94:	440b      	add	r3, r1
 8017c96:	3a01      	subs	r2, #1
 8017c98:	428b      	cmp	r3, r1
 8017c9a:	d90c      	bls.n	8017cb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017c9c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017ca0:	f801 0b01 	strb.w	r0, [r1], #1
 8017ca4:	e7f8      	b.n	8017c98 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017ca6:	0790      	lsls	r0, r2, #30
 8017ca8:	d0e7      	beq.n	8017c7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017caa:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017cae:	f821 0b02 	strh.w	r0, [r1], #2
 8017cb2:	3b02      	subs	r3, #2
 8017cb4:	e7e1      	b.n	8017c7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017cb6:	2001      	movs	r0, #1
 8017cb8:	bd10      	pop	{r4, pc}

08017cba <_ZN8touchgfx3HAL7noTouchEv>:
 8017cba:	b510      	push	{r4, lr}
 8017cbc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017cc0:	4604      	mov	r4, r0
 8017cc2:	b153      	cbz	r3, 8017cda <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017cc4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017cc8:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017ccc:	2101      	movs	r1, #1
 8017cce:	301c      	adds	r0, #28
 8017cd0:	f013 ff54 	bl	802bb7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017cda:	bd10      	pop	{r4, pc}

08017cdc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	6980      	ldr	r0, [r0, #24]
 8017ce4:	b085      	sub	sp, #20
 8017ce6:	460f      	mov	r7, r1
 8017ce8:	4690      	mov	r8, r2
 8017cea:	4699      	mov	r9, r3
 8017cec:	b930      	cbnz	r0, 8017cfc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8017cee:	4b1c      	ldr	r3, [pc, #112]	; (8017d60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8017cf0:	4a1c      	ldr	r2, [pc, #112]	; (8017d64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017cf2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8017cf6:	481c      	ldr	r0, [pc, #112]	; (8017d68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8017cf8:	f016 fa8c 	bl	802e214 <__assert_func>
 8017cfc:	ad04      	add	r5, sp, #16
 8017cfe:	2600      	movs	r6, #0
 8017d00:	f845 6d04 	str.w	r6, [r5, #-4]!
 8017d04:	6806      	ldr	r6, [r0, #0]
 8017d06:	9501      	str	r5, [sp, #4]
 8017d08:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017d0c:	9500      	str	r5, [sp, #0]
 8017d0e:	6835      	ldr	r5, [r6, #0]
 8017d10:	47a8      	blx	r5
 8017d12:	4d16      	ldr	r5, [pc, #88]	; (8017d6c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8017d14:	4606      	mov	r6, r0
 8017d16:	f8a5 9000 	strh.w	r9, [r5]
 8017d1a:	f7f7 fe93 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 8017d1e:	6803      	ldr	r3, [r0, #0]
 8017d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d22:	4798      	blx	r3
 8017d24:	2801      	cmp	r0, #1
 8017d26:	d012      	beq.n	8017d4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8017d28:	d306      	bcc.n	8017d38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8017d2a:	280d      	cmp	r0, #13
 8017d2c:	d80b      	bhi.n	8017d46 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017d2e:	4b10      	ldr	r3, [pc, #64]	; (8017d70 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017d30:	4a0c      	ldr	r2, [pc, #48]	; (8017d64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017d32:	f240 1167 	movw	r1, #359	; 0x167
 8017d36:	e7de      	b.n	8017cf6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017d38:	882b      	ldrh	r3, [r5, #0]
 8017d3a:	fb08 7203 	mla	r2, r8, r3, r7
 8017d3e:	9b03      	ldr	r3, [sp, #12]
 8017d40:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017d44:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017d46:	4630      	mov	r0, r6
 8017d48:	b005      	add	sp, #20
 8017d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d4e:	882a      	ldrh	r2, [r5, #0]
 8017d50:	9b03      	ldr	r3, [sp, #12]
 8017d52:	fb08 7202 	mla	r2, r8, r2, r7
 8017d56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017d5a:	1a9a      	subs	r2, r3, r2
 8017d5c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017d5e:	e7f2      	b.n	8017d46 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017d60:	080311e4 	.word	0x080311e4
 8017d64:	08031573 	.word	0x08031573
 8017d68:	08031229 	.word	0x08031229
 8017d6c:	2000981a 	.word	0x2000981a
 8017d70:	0803124f 	.word	0x0803124f

08017d74 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d76:	b08b      	sub	sp, #44	; 0x2c
 8017d78:	4617      	mov	r7, r2
 8017d7a:	4604      	mov	r4, r0
 8017d7c:	460e      	mov	r6, r1
 8017d7e:	461d      	mov	r5, r3
 8017d80:	f7f7 fe60 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 8017d84:	6803      	ldr	r3, [r0, #0]
 8017d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d88:	4798      	blx	r3
 8017d8a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017d8e:	9007      	str	r0, [sp, #28]
 8017d90:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017d94:	4b0d      	ldr	r3, [pc, #52]	; (8017dcc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017d96:	6822      	ldr	r2, [r4, #0]
 8017d98:	881b      	ldrh	r3, [r3, #0]
 8017d9a:	9306      	str	r3, [sp, #24]
 8017d9c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017da0:	9305      	str	r3, [sp, #20]
 8017da2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017da6:	9304      	str	r3, [sp, #16]
 8017da8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017dac:	9303      	str	r3, [sp, #12]
 8017dae:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017db2:	9302      	str	r3, [sp, #8]
 8017db4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017db8:	e9cd 5300 	strd	r5, r3, [sp]
 8017dbc:	4631      	mov	r1, r6
 8017dbe:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017dc0:	463b      	mov	r3, r7
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	47a8      	blx	r5
 8017dc8:	b00b      	add	sp, #44	; 0x2c
 8017dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dcc:	2000981a 	.word	0x2000981a

08017dd0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017dd4:	4698      	mov	r8, r3
 8017dd6:	6803      	ldr	r3, [r0, #0]
 8017dd8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017dda:	4b15      	ldr	r3, [pc, #84]	; (8017e30 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017ddc:	b08b      	sub	sp, #44	; 0x2c
 8017dde:	4617      	mov	r7, r2
 8017de0:	f8b3 9000 	ldrh.w	r9, [r3]
 8017de4:	460e      	mov	r6, r1
 8017de6:	4604      	mov	r4, r0
 8017de8:	f7f7 fe2c 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 8017dec:	6803      	ldr	r3, [r0, #0]
 8017dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017df0:	4798      	blx	r3
 8017df2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017df6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017dfa:	2302      	movs	r3, #2
 8017dfc:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8017e00:	2301      	movs	r3, #1
 8017e02:	9305      	str	r3, [sp, #20]
 8017e04:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017e08:	9304      	str	r3, [sp, #16]
 8017e0a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017e0e:	9303      	str	r3, [sp, #12]
 8017e10:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017e14:	9302      	str	r3, [sp, #8]
 8017e16:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	e9cd 8300 	strd	r8, r3, [sp]
 8017e20:	4631      	mov	r1, r6
 8017e22:	463b      	mov	r3, r7
 8017e24:	4620      	mov	r0, r4
 8017e26:	47a8      	blx	r5
 8017e28:	b00b      	add	sp, #44	; 0x2c
 8017e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e2e:	bf00      	nop
 8017e30:	2000981a 	.word	0x2000981a

08017e34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e38:	4698      	mov	r8, r3
 8017e3a:	6803      	ldr	r3, [r0, #0]
 8017e3c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017e3e:	4b11      	ldr	r3, [pc, #68]	; (8017e84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017e40:	b087      	sub	sp, #28
 8017e42:	f8b3 9000 	ldrh.w	r9, [r3]
 8017e46:	460e      	mov	r6, r1
 8017e48:	4617      	mov	r7, r2
 8017e4a:	4604      	mov	r4, r0
 8017e4c:	f7f7 fdfa 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 8017e50:	6803      	ldr	r3, [r0, #0]
 8017e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e54:	4798      	blx	r3
 8017e56:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017e5a:	f8cd 900c 	str.w	r9, [sp, #12]
 8017e5e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017e62:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017e66:	9302      	str	r3, [sp, #8]
 8017e68:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017e6c:	9301      	str	r3, [sp, #4]
 8017e6e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017e72:	9300      	str	r3, [sp, #0]
 8017e74:	463a      	mov	r2, r7
 8017e76:	4643      	mov	r3, r8
 8017e78:	4631      	mov	r1, r6
 8017e7a:	4620      	mov	r0, r4
 8017e7c:	47a8      	blx	r5
 8017e7e:	b007      	add	sp, #28
 8017e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e84:	2000981a 	.word	0x2000981a

08017e88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e8c:	4604      	mov	r4, r0
 8017e8e:	b08f      	sub	sp, #60	; 0x3c
 8017e90:	4610      	mov	r0, r2
 8017e92:	460d      	mov	r5, r1
 8017e94:	4691      	mov	r9, r2
 8017e96:	461e      	mov	r6, r3
 8017e98:	f007 fdea 	bl	801fa70 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	f000 809c 	beq.w	8017fda <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8017ea2:	6823      	ldr	r3, [r4, #0]
 8017ea4:	f8df b194 	ldr.w	fp, [pc, #404]	; 801803c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8017ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017eaa:	f8df a194 	ldr.w	sl, [pc, #404]	; 8018040 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017eae:	4f60      	ldr	r7, [pc, #384]	; (8018030 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	4798      	blx	r3
 8017eb4:	6823      	ldr	r3, [r4, #0]
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017eba:	4798      	blx	r3
 8017ebc:	f8bb 3000 	ldrh.w	r3, [fp]
 8017ec0:	9301      	str	r3, [sp, #4]
 8017ec2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017ec6:	f8ba 3000 	ldrh.w	r3, [sl]
 8017eca:	9302      	str	r3, [sp, #8]
 8017ecc:	883b      	ldrh	r3, [r7, #0]
 8017ece:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017ed2:	9303      	str	r3, [sp, #12]
 8017ed4:	4b57      	ldr	r3, [pc, #348]	; (8018034 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017ed6:	9305      	str	r3, [sp, #20]
 8017ed8:	881a      	ldrh	r2, [r3, #0]
 8017eda:	9204      	str	r2, [sp, #16]
 8017edc:	4640      	mov	r0, r8
 8017ede:	f007 fe81 	bl	801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017ee2:	8038      	strh	r0, [r7, #0]
 8017ee4:	4640      	mov	r0, r8
 8017ee6:	f007 feb7 	bl	801fc58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017eea:	9b05      	ldr	r3, [sp, #20]
 8017eec:	8018      	strh	r0, [r3, #0]
 8017eee:	4b52      	ldr	r3, [pc, #328]	; (8018038 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017ef0:	781b      	ldrb	r3, [r3, #0]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d174      	bne.n	8017fe0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8017ef6:	883b      	ldrh	r3, [r7, #0]
 8017ef8:	f8ab 3000 	strh.w	r3, [fp]
 8017efc:	f8aa 0000 	strh.w	r0, [sl]
 8017f00:	4648      	mov	r0, r9
 8017f02:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017f06:	f007 fdb3 	bl	801fa70 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017f0a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017f0e:	2200      	movs	r2, #0
 8017f10:	4611      	mov	r1, r2
 8017f12:	4628      	mov	r0, r5
 8017f14:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017f18:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017f1c:	f7f8 faec 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
 8017f20:	2301      	movs	r3, #1
 8017f22:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017f26:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017f2a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	dd5c      	ble.n	8017fec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017f32:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	dd58      	ble.n	8017fec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017f3a:	462a      	mov	r2, r5
 8017f3c:	ab0a      	add	r3, sp, #40	; 0x28
 8017f3e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017f42:	6851      	ldr	r1, [r2, #4]
 8017f44:	c303      	stmia	r3!, {r0, r1}
 8017f46:	4631      	mov	r1, r6
 8017f48:	a80a      	add	r0, sp, #40	; 0x28
 8017f4a:	f7ff fbe9 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 8017f4e:	4b38      	ldr	r3, [pc, #224]	; (8018030 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017f50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f54:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017f58:	2100      	movs	r1, #0
 8017f5a:	aa0a      	add	r2, sp, #40	; 0x28
 8017f5c:	4b35      	ldr	r3, [pc, #212]	; (8018034 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017f5e:	910c      	str	r1, [sp, #48]	; 0x30
 8017f60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f68:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017f6c:	ab08      	add	r3, sp, #32
 8017f6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017f72:	4618      	mov	r0, r3
 8017f74:	a90c      	add	r1, sp, #48	; 0x30
 8017f76:	f7ff fbd3 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 8017f7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d13c      	bne.n	8017ffa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8017f80:	2000      	movs	r0, #0
 8017f82:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017f86:	2600      	movs	r6, #0
 8017f88:	682a      	ldr	r2, [r5, #0]
 8017f8a:	696b      	ldr	r3, [r5, #20]
 8017f8c:	616e      	str	r6, [r5, #20]
 8017f8e:	9305      	str	r3, [sp, #20]
 8017f90:	6892      	ldr	r2, [r2, #8]
 8017f92:	a908      	add	r1, sp, #32
 8017f94:	4628      	mov	r0, r5
 8017f96:	4790      	blx	r2
 8017f98:	9b05      	ldr	r3, [sp, #20]
 8017f9a:	616b      	str	r3, [r5, #20]
 8017f9c:	4652      	mov	r2, sl
 8017f9e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017fa2:	4649      	mov	r1, r9
 8017fa4:	4628      	mov	r0, r5
 8017fa6:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017faa:	f7f8 faa5 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
 8017fae:	4b23      	ldr	r3, [pc, #140]	; (801803c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017fb0:	9a01      	ldr	r2, [sp, #4]
 8017fb2:	801a      	strh	r2, [r3, #0]
 8017fb4:	4b22      	ldr	r3, [pc, #136]	; (8018040 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017fb6:	9a02      	ldr	r2, [sp, #8]
 8017fb8:	801a      	strh	r2, [r3, #0]
 8017fba:	4b1d      	ldr	r3, [pc, #116]	; (8018030 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017fbc:	9a03      	ldr	r2, [sp, #12]
 8017fbe:	801a      	strh	r2, [r3, #0]
 8017fc0:	4b1c      	ldr	r3, [pc, #112]	; (8018034 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017fc2:	9a04      	ldr	r2, [sp, #16]
 8017fc4:	801a      	strh	r2, [r3, #0]
 8017fc6:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017fca:	6823      	ldr	r3, [r4, #0]
 8017fcc:	4620      	mov	r0, r4
 8017fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fd0:	4798      	blx	r3
 8017fd2:	6823      	ldr	r3, [r4, #0]
 8017fd4:	4620      	mov	r0, r4
 8017fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fd8:	4798      	blx	r3
 8017fda:	b00f      	add	sp, #60	; 0x3c
 8017fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fe0:	883b      	ldrh	r3, [r7, #0]
 8017fe2:	f8ab 0000 	strh.w	r0, [fp]
 8017fe6:	f8aa 3000 	strh.w	r3, [sl]
 8017fea:	e789      	b.n	8017f00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8017fec:	462a      	mov	r2, r5
 8017fee:	ab0a      	add	r3, sp, #40	; 0x28
 8017ff0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017ff4:	6851      	ldr	r1, [r2, #4]
 8017ff6:	c303      	stmia	r3!, {r0, r1}
 8017ff8:	e7a9      	b.n	8017f4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8017ffa:	a807      	add	r0, sp, #28
 8017ffc:	f007 ff84 	bl	801ff08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018000:	4606      	mov	r6, r0
 8018002:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018004:	6803      	ldr	r3, [r0, #0]
 8018006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018008:	4798      	blx	r3
 801800a:	4286      	cmp	r6, r0
 801800c:	d1b8      	bne.n	8017f80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 801800e:	f7f7 fd19 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 8018012:	6803      	ldr	r3, [r0, #0]
 8018014:	4606      	mov	r6, r0
 8018016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018018:	9305      	str	r3, [sp, #20]
 801801a:	a807      	add	r0, sp, #28
 801801c:	f007 ff74 	bl	801ff08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018020:	9b05      	ldr	r3, [sp, #20]
 8018022:	4601      	mov	r1, r0
 8018024:	4630      	mov	r0, r6
 8018026:	4798      	blx	r3
 8018028:	f080 0001 	eor.w	r0, r0, #1
 801802c:	b2c0      	uxtb	r0, r0
 801802e:	e7a8      	b.n	8017f82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018030:	20009814 	.word	0x20009814
 8018034:	20009816 	.word	0x20009816
 8018038:	20009818 	.word	0x20009818
 801803c:	2000981a 	.word	0x2000981a
 8018040:	2000981c 	.word	0x2000981c

08018044 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018044:	b510      	push	{r4, lr}
 8018046:	4b07      	ldr	r3, [pc, #28]	; (8018064 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018048:	781b      	ldrb	r3, [r3, #0]
 801804a:	4604      	mov	r4, r0
 801804c:	b13b      	cbz	r3, 801805e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801804e:	6803      	ldr	r3, [r0, #0]
 8018050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018052:	4798      	blx	r3
 8018054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018056:	4283      	cmp	r3, r0
 8018058:	d101      	bne.n	801805e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801805a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801805c:	bd10      	pop	{r4, pc}
 801805e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018060:	e7fc      	b.n	801805c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018062:	bf00      	nop
 8018064:	2000981e 	.word	0x2000981e

08018068 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801806c:	b088      	sub	sp, #32
 801806e:	461d      	mov	r5, r3
 8018070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018074:	2400      	movs	r4, #0
 8018076:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 801807a:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 801807e:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8018082:	9403      	str	r4, [sp, #12]
 8018084:	e9cd 3100 	strd	r3, r1, [sp]
 8018088:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801808c:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018090:	4692      	mov	sl, r2
 8018092:	4606      	mov	r6, r0
 8018094:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018098:	f8ad 3018 	strh.w	r3, [sp, #24]
 801809c:	f88d 401c 	strb.w	r4, [sp, #28]
 80180a0:	f7ff ffd0 	bl	8018044 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80180a4:	fb09 a505 	mla	r5, r9, r5, sl
 80180a8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80180ac:	9504      	str	r5, [sp, #16]
 80180ae:	f8ad 901a 	strh.w	r9, [sp, #26]
 80180b2:	f88d 401e 	strb.w	r4, [sp, #30]
 80180b6:	f88d 401d 	strb.w	r4, [sp, #29]
 80180ba:	f88d 401f 	strb.w	r4, [sp, #31]
 80180be:	f1b8 0f00 	cmp.w	r8, #0
 80180c2:	d000      	beq.n	80180c6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 80180c4:	b937      	cbnz	r7, 80180d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 80180c6:	4b0d      	ldr	r3, [pc, #52]	; (80180fc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80180c8:	4a0d      	ldr	r2, [pc, #52]	; (8018100 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80180ca:	f240 210b 	movw	r1, #523	; 0x20b
 80180ce:	480d      	ldr	r0, [pc, #52]	; (8018104 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80180d0:	f016 f8a0 	bl	802e214 <__assert_func>
 80180d4:	6833      	ldr	r3, [r6, #0]
 80180d6:	9c00      	ldr	r4, [sp, #0]
 80180d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180da:	4630      	mov	r0, r6
 80180dc:	4798      	blx	r3
 80180de:	4220      	tst	r0, r4
 80180e0:	d104      	bne.n	80180ec <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 80180e2:	4b09      	ldr	r3, [pc, #36]	; (8018108 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 80180e4:	4a06      	ldr	r2, [pc, #24]	; (8018100 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80180e6:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80180ea:	e7f0      	b.n	80180ce <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 80180ec:	6870      	ldr	r0, [r6, #4]
 80180ee:	6803      	ldr	r3, [r0, #0]
 80180f0:	4669      	mov	r1, sp
 80180f2:	685b      	ldr	r3, [r3, #4]
 80180f4:	4798      	blx	r3
 80180f6:	b008      	add	sp, #32
 80180f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180fc:	08031077 	.word	0x08031077
 8018100:	080313a8 	.word	0x080313a8
 8018104:	08031229 	.word	0x08031229
 8018108:	080310af 	.word	0x080310af

0801810c <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018110:	b089      	sub	sp, #36	; 0x24
 8018112:	2400      	movs	r4, #0
 8018114:	461d      	mov	r5, r3
 8018116:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801811a:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 801811e:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8018122:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018126:	9403      	str	r4, [sp, #12]
 8018128:	468a      	mov	sl, r1
 801812a:	4693      	mov	fp, r2
 801812c:	4606      	mov	r6, r0
 801812e:	e9cd 3400 	strd	r3, r4, [sp]
 8018132:	f7ff ff87 	bl	8018044 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018136:	fb09 b505 	mla	r5, r9, r5, fp
 801813a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801813e:	9504      	str	r5, [sp, #16]
 8018140:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018144:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018148:	f8ad 4018 	strh.w	r4, [sp, #24]
 801814c:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018150:	f8cd a00c 	str.w	sl, [sp, #12]
 8018154:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018158:	f88d 401e 	strb.w	r4, [sp, #30]
 801815c:	f88d 401f 	strb.w	r4, [sp, #31]
 8018160:	f1b8 0f00 	cmp.w	r8, #0
 8018164:	d000      	beq.n	8018168 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8018166:	b937      	cbnz	r7, 8018176 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8018168:	4b0d      	ldr	r3, [pc, #52]	; (80181a0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 801816a:	4a0e      	ldr	r2, [pc, #56]	; (80181a4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 801816c:	f240 2121 	movw	r1, #545	; 0x221
 8018170:	480d      	ldr	r0, [pc, #52]	; (80181a8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018172:	f016 f84f 	bl	802e214 <__assert_func>
 8018176:	6833      	ldr	r3, [r6, #0]
 8018178:	9c00      	ldr	r4, [sp, #0]
 801817a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801817c:	4630      	mov	r0, r6
 801817e:	4798      	blx	r3
 8018180:	4220      	tst	r0, r4
 8018182:	d104      	bne.n	801818e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8018184:	4b09      	ldr	r3, [pc, #36]	; (80181ac <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8018186:	4a07      	ldr	r2, [pc, #28]	; (80181a4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018188:	f240 2122 	movw	r1, #546	; 0x222
 801818c:	e7f0      	b.n	8018170 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 801818e:	6870      	ldr	r0, [r6, #4]
 8018190:	6803      	ldr	r3, [r0, #0]
 8018192:	4669      	mov	r1, sp
 8018194:	685b      	ldr	r3, [r3, #4]
 8018196:	4798      	blx	r3
 8018198:	b009      	add	sp, #36	; 0x24
 801819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801819e:	bf00      	nop
 80181a0:	080310f4 	.word	0x080310f4
 80181a4:	0803141e 	.word	0x0803141e
 80181a8:	08031229 	.word	0x08031229
 80181ac:	0803112c 	.word	0x0803112c

080181b0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80181b0:	b510      	push	{r4, lr}
 80181b2:	4b0b      	ldr	r3, [pc, #44]	; (80181e0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80181b4:	781b      	ldrb	r3, [r3, #0]
 80181b6:	4604      	mov	r4, r0
 80181b8:	b95b      	cbnz	r3, 80181d2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80181ba:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80181be:	2b02      	cmp	r3, #2
 80181c0:	d007      	beq.n	80181d2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80181c2:	6840      	ldr	r0, [r0, #4]
 80181c4:	f000 fb5e 	bl	8018884 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80181c8:	b118      	cbz	r0, 80181d2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80181ca:	6862      	ldr	r2, [r4, #4]
 80181cc:	7a53      	ldrb	r3, [r2, #9]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d0fc      	beq.n	80181cc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80181d2:	f7fd fbdb 	bl	801598c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80181d6:	4620      	mov	r0, r4
 80181d8:	f7ff ff34 	bl	8018044 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80181dc:	bd10      	pop	{r4, pc}
 80181de:	bf00      	nop
 80181e0:	2000981e 	.word	0x2000981e

080181e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80181e4:	b508      	push	{r3, lr}
 80181e6:	290d      	cmp	r1, #13
 80181e8:	d817      	bhi.n	801821a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80181ea:	e8df f001 	tbb	[pc, r1]
 80181ee:	090b      	.short	0x090b
 80181f0:	0d0d0d07 	.word	0x0d0d0d07
 80181f4:	1414140d 	.word	0x1414140d
 80181f8:	0d0d1414 	.word	0x0d0d1414
 80181fc:	2020      	movs	r0, #32
 80181fe:	bd08      	pop	{r3, pc}
 8018200:	2018      	movs	r0, #24
 8018202:	e7fc      	b.n	80181fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018204:	2010      	movs	r0, #16
 8018206:	e7fa      	b.n	80181fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018208:	4b05      	ldr	r3, [pc, #20]	; (8018220 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801820a:	4a06      	ldr	r2, [pc, #24]	; (8018224 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801820c:	4806      	ldr	r0, [pc, #24]	; (8018228 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801820e:	f240 2182 	movw	r1, #642	; 0x282
 8018212:	f015 ffff 	bl	802e214 <__assert_func>
 8018216:	2008      	movs	r0, #8
 8018218:	e7f1      	b.n	80181fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801821a:	2000      	movs	r0, #0
 801821c:	e7ef      	b.n	80181fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801821e:	bf00      	nop
 8018220:	080312a5 	.word	0x080312a5
 8018224:	08031749 	.word	0x08031749
 8018228:	08031229 	.word	0x08031229

0801822c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801822c:	b570      	push	{r4, r5, r6, lr}
 801822e:	460d      	mov	r5, r1
 8018230:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018234:	4616      	mov	r6, r2
 8018236:	461c      	mov	r4, r3
 8018238:	f7ff ffd4 	bl	80181e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801823c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018240:	10c0      	asrs	r0, r0, #3
 8018242:	fb06 5101 	mla	r1, r6, r1, r5
 8018246:	fb00 4001 	mla	r0, r0, r1, r4
 801824a:	bd70      	pop	{r4, r5, r6, pc}

0801824c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801824c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018250:	b08a      	sub	sp, #40	; 0x28
 8018252:	f04f 0c00 	mov.w	ip, #0
 8018256:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801825a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801825e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8018262:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8018266:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 801826a:	f8cd c014 	str.w	ip, [sp, #20]
 801826e:	2d0b      	cmp	r5, #11
 8018270:	4604      	mov	r4, r0
 8018272:	469a      	mov	sl, r3
 8018274:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018278:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801827c:	d12d      	bne.n	80182da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 801827e:	2080      	movs	r0, #128	; 0x80
 8018280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018284:	9204      	str	r2, [sp, #16]
 8018286:	4620      	mov	r0, r4
 8018288:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801828c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018290:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018294:	f8ad 701c 	strh.w	r7, [sp, #28]
 8018298:	f8ad 601e 	strh.w	r6, [sp, #30]
 801829c:	f7ff fed2 	bl	8018044 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80182a0:	e9cd 9800 	strd	r9, r8, [sp]
 80182a4:	4603      	mov	r3, r0
 80182a6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80182aa:	4651      	mov	r1, sl
 80182ac:	4620      	mov	r0, r4
 80182ae:	f7ff ffbd 	bl	801822c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80182b2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 80182b6:	9006      	str	r0, [sp, #24]
 80182b8:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 80182bc:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80182c0:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 80182c4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80182c8:	b107      	cbz	r7, 80182cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 80182ca:	b9d6      	cbnz	r6, 8018302 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 80182cc:	4b17      	ldr	r3, [pc, #92]	; (801832c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 80182ce:	4a18      	ldr	r2, [pc, #96]	; (8018330 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 80182d0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80182d4:	4817      	ldr	r0, [pc, #92]	; (8018334 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 80182d6:	f015 ff9d 	bl	802e214 <__assert_func>
 80182da:	2d02      	cmp	r5, #2
 80182dc:	d108      	bne.n	80182f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 80182de:	2bff      	cmp	r3, #255	; 0xff
 80182e0:	d104      	bne.n	80182ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 80182e2:	2800      	cmp	r0, #0
 80182e4:	bf14      	ite	ne
 80182e6:	2040      	movne	r0, #64	; 0x40
 80182e8:	2020      	moveq	r0, #32
 80182ea:	e7c9      	b.n	8018280 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80182ec:	2040      	movs	r0, #64	; 0x40
 80182ee:	e7c7      	b.n	8018280 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80182f0:	2bff      	cmp	r3, #255	; 0xff
 80182f2:	d104      	bne.n	80182fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 80182f4:	2800      	cmp	r0, #0
 80182f6:	bf14      	ite	ne
 80182f8:	2004      	movne	r0, #4
 80182fa:	2001      	moveq	r0, #1
 80182fc:	e7c0      	b.n	8018280 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80182fe:	2004      	movs	r0, #4
 8018300:	e7be      	b.n	8018280 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018302:	6823      	ldr	r3, [r4, #0]
 8018304:	9d02      	ldr	r5, [sp, #8]
 8018306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018308:	4620      	mov	r0, r4
 801830a:	4798      	blx	r3
 801830c:	4228      	tst	r0, r5
 801830e:	d104      	bne.n	801831a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8018310:	4b09      	ldr	r3, [pc, #36]	; (8018338 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8018312:	4a07      	ldr	r2, [pc, #28]	; (8018330 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018314:	f240 11d5 	movw	r1, #469	; 0x1d5
 8018318:	e7dc      	b.n	80182d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 801831a:	6860      	ldr	r0, [r4, #4]
 801831c:	6803      	ldr	r3, [r0, #0]
 801831e:	a902      	add	r1, sp, #8
 8018320:	685b      	ldr	r3, [r3, #4]
 8018322:	4798      	blx	r3
 8018324:	b00a      	add	sp, #40	; 0x28
 8018326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801832a:	bf00      	nop
 801832c:	08031077 	.word	0x08031077
 8018330:	080315d7 	.word	0x080315d7
 8018334:	08031229 	.word	0x08031229
 8018338:	080310af 	.word	0x080310af

0801833c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018340:	b08b      	sub	sp, #44	; 0x2c
 8018342:	469b      	mov	fp, r3
 8018344:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018348:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801834c:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018350:	2fff      	cmp	r7, #255	; 0xff
 8018352:	bf14      	ite	ne
 8018354:	2308      	movne	r3, #8
 8018356:	2302      	moveq	r3, #2
 8018358:	2600      	movs	r6, #0
 801835a:	4604      	mov	r4, r0
 801835c:	4689      	mov	r9, r1
 801835e:	4692      	mov	sl, r2
 8018360:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018364:	9605      	str	r6, [sp, #20]
 8018366:	f7ff fe6d 	bl	8018044 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801836a:	e9cd 8500 	strd	r8, r5, [sp]
 801836e:	4603      	mov	r3, r0
 8018370:	465a      	mov	r2, fp
 8018372:	4651      	mov	r1, sl
 8018374:	4620      	mov	r0, r4
 8018376:	f7ff ff59 	bl	801822c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801837a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801837e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018382:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018386:	f8ad 301e 	strh.w	r3, [sp, #30]
 801838a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801838e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018392:	6823      	ldr	r3, [r4, #0]
 8018394:	9006      	str	r0, [sp, #24]
 8018396:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801839a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801839e:	f8ad 6020 	strh.w	r6, [sp, #32]
 80183a2:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 80183a6:	f8cd 9014 	str.w	r9, [sp, #20]
 80183aa:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80183ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183b0:	9d02      	ldr	r5, [sp, #8]
 80183b2:	4620      	mov	r0, r4
 80183b4:	4798      	blx	r3
 80183b6:	4228      	tst	r0, r5
 80183b8:	d106      	bne.n	80183c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 80183ba:	4b07      	ldr	r3, [pc, #28]	; (80183d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 80183bc:	4a07      	ldr	r2, [pc, #28]	; (80183dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 80183be:	4808      	ldr	r0, [pc, #32]	; (80183e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 80183c0:	f240 2137 	movw	r1, #567	; 0x237
 80183c4:	f015 ff26 	bl	802e214 <__assert_func>
 80183c8:	6860      	ldr	r0, [r4, #4]
 80183ca:	6803      	ldr	r3, [r0, #0]
 80183cc:	a902      	add	r1, sp, #8
 80183ce:	685b      	ldr	r3, [r3, #4]
 80183d0:	4798      	blx	r3
 80183d2:	b00b      	add	sp, #44	; 0x2c
 80183d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183d8:	080310af 	.word	0x080310af
 80183dc:	080316ae 	.word	0x080316ae
 80183e0:	08031229 	.word	0x08031229

080183e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80183e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80183e8:	461f      	mov	r7, r3
 80183ea:	4b0b      	ldr	r3, [pc, #44]	; (8018418 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80183ec:	460d      	mov	r5, r1
 80183ee:	f8b3 8000 	ldrh.w	r8, [r3]
 80183f2:	4616      	mov	r6, r2
 80183f4:	4604      	mov	r4, r0
 80183f6:	f7f7 fb25 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 80183fa:	6803      	ldr	r3, [r0, #0]
 80183fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183fe:	4798      	blx	r3
 8018400:	463b      	mov	r3, r7
 8018402:	e9cd 8000 	strd	r8, r0, [sp]
 8018406:	4632      	mov	r2, r6
 8018408:	4629      	mov	r1, r5
 801840a:	4620      	mov	r0, r4
 801840c:	f7ff ff0e 	bl	801822c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018410:	b002      	add	sp, #8
 8018412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018416:	bf00      	nop
 8018418:	2000981a 	.word	0x2000981a

0801841c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801841c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018420:	b088      	sub	sp, #32
 8018422:	4698      	mov	r8, r3
 8018424:	2300      	movs	r3, #0
 8018426:	9303      	str	r3, [sp, #12]
 8018428:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801842c:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018430:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018434:	f8ad 6014 	strh.w	r6, [sp, #20]
 8018438:	e9cd 3100 	strd	r3, r1, [sp]
 801843c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018440:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018444:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018448:	f88d 301c 	strb.w	r3, [sp, #28]
 801844c:	4617      	mov	r7, r2
 801844e:	4604      	mov	r4, r0
 8018450:	f8ad 5016 	strh.w	r5, [sp, #22]
 8018454:	f7ff fdf6 	bl	8018044 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018458:	4642      	mov	r2, r8
 801845a:	4603      	mov	r3, r0
 801845c:	4639      	mov	r1, r7
 801845e:	4620      	mov	r0, r4
 8018460:	f7ff ffc0 	bl	80183e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018464:	4b18      	ldr	r3, [pc, #96]	; (80184c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8018466:	9004      	str	r0, [sp, #16]
 8018468:	881b      	ldrh	r3, [r3, #0]
 801846a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801846e:	f7f7 fae9 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 8018472:	6803      	ldr	r3, [r0, #0]
 8018474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018476:	4798      	blx	r3
 8018478:	f88d 001e 	strb.w	r0, [sp, #30]
 801847c:	f88d 001d 	strb.w	r0, [sp, #29]
 8018480:	b106      	cbz	r6, 8018484 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8018482:	b935      	cbnz	r5, 8018492 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8018484:	4b11      	ldr	r3, [pc, #68]	; (80184cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8018486:	4a12      	ldr	r2, [pc, #72]	; (80184d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018488:	f240 11f1 	movw	r1, #497	; 0x1f1
 801848c:	4811      	ldr	r0, [pc, #68]	; (80184d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801848e:	f015 fec1 	bl	802e214 <__assert_func>
 8018492:	6823      	ldr	r3, [r4, #0]
 8018494:	9d00      	ldr	r5, [sp, #0]
 8018496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018498:	4620      	mov	r0, r4
 801849a:	4798      	blx	r3
 801849c:	4228      	tst	r0, r5
 801849e:	d104      	bne.n	80184aa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 80184a0:	4b0d      	ldr	r3, [pc, #52]	; (80184d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 80184a2:	4a0b      	ldr	r2, [pc, #44]	; (80184d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 80184a4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80184a8:	e7f0      	b.n	801848c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 80184aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80184ac:	9303      	str	r3, [sp, #12]
 80184ae:	6860      	ldr	r0, [r4, #4]
 80184b0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80184b4:	f88d 301f 	strb.w	r3, [sp, #31]
 80184b8:	6803      	ldr	r3, [r0, #0]
 80184ba:	4669      	mov	r1, sp
 80184bc:	685b      	ldr	r3, [r3, #4]
 80184be:	4798      	blx	r3
 80184c0:	b008      	add	sp, #32
 80184c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184c6:	bf00      	nop
 80184c8:	2000981a 	.word	0x2000981a
 80184cc:	08031077 	.word	0x08031077
 80184d0:	08031483 	.word	0x08031483
 80184d4:	08031229 	.word	0x08031229
 80184d8:	080310af 	.word	0x080310af

080184dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80184dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184de:	b08b      	sub	sp, #44	; 0x2c
 80184e0:	466b      	mov	r3, sp
 80184e2:	e883 0006 	stmia.w	r3, {r1, r2}
 80184e6:	4b21      	ldr	r3, [pc, #132]	; (801856c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	4604      	mov	r4, r0
 80184ec:	b933      	cbnz	r3, 80184fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80184ee:	4b20      	ldr	r3, [pc, #128]	; (8018570 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80184f0:	4a20      	ldr	r2, [pc, #128]	; (8018574 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80184f2:	4821      	ldr	r0, [pc, #132]	; (8018578 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80184f4:	f44f 7112 	mov.w	r1, #584	; 0x248
 80184f8:	f015 fe8c 	bl	802e214 <__assert_func>
 80184fc:	2301      	movs	r3, #1
 80184fe:	9302      	str	r3, [sp, #8]
 8018500:	6803      	ldr	r3, [r0, #0]
 8018502:	f8bd 6000 	ldrh.w	r6, [sp]
 8018506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018508:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801850c:	2500      	movs	r5, #0
 801850e:	9505      	str	r5, [sp, #20]
 8018510:	4798      	blx	r3
 8018512:	463a      	mov	r2, r7
 8018514:	4631      	mov	r1, r6
 8018516:	4603      	mov	r3, r0
 8018518:	4620      	mov	r0, r4
 801851a:	f7ff ff63 	bl	80183e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801851e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018520:	9306      	str	r3, [sp, #24]
 8018522:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018526:	f8ad 301c 	strh.w	r3, [sp, #28]
 801852a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801852e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018532:	4b12      	ldr	r3, [pc, #72]	; (801857c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8018534:	9003      	str	r0, [sp, #12]
 8018536:	881b      	ldrh	r3, [r3, #0]
 8018538:	f8ad 3020 	strh.w	r3, [sp, #32]
 801853c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018540:	f7f7 fa80 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 8018544:	6803      	ldr	r3, [r0, #0]
 8018546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018548:	4798      	blx	r3
 801854a:	23ff      	movs	r3, #255	; 0xff
 801854c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018550:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018554:	6860      	ldr	r0, [r4, #4]
 8018556:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801855a:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 801855e:	6803      	ldr	r3, [r0, #0]
 8018560:	a902      	add	r1, sp, #8
 8018562:	685b      	ldr	r3, [r3, #4]
 8018564:	4798      	blx	r3
 8018566:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018568:	b00b      	add	sp, #44	; 0x2c
 801856a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801856c:	2000981f 	.word	0x2000981f
 8018570:	08031176 	.word	0x08031176
 8018574:	0803152d 	.word	0x0803152d
 8018578:	08031229 	.word	0x08031229
 801857c:	2000981a 	.word	0x2000981a

08018580 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018584:	b08a      	sub	sp, #40	; 0x28
 8018586:	466d      	mov	r5, sp
 8018588:	e885 0006 	stmia.w	r5, {r1, r2}
 801858c:	461d      	mov	r5, r3
 801858e:	2301      	movs	r3, #1
 8018590:	9302      	str	r3, [sp, #8]
 8018592:	6803      	ldr	r3, [r0, #0]
 8018594:	f8bd 7000 	ldrh.w	r7, [sp]
 8018598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801859a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801859e:	2600      	movs	r6, #0
 80185a0:	9605      	str	r6, [sp, #20]
 80185a2:	4604      	mov	r4, r0
 80185a4:	4798      	blx	r3
 80185a6:	4642      	mov	r2, r8
 80185a8:	4639      	mov	r1, r7
 80185aa:	4603      	mov	r3, r0
 80185ac:	4620      	mov	r0, r4
 80185ae:	f7ff ff19 	bl	80183e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80185b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80185b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80185ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80185be:	f8ad 301e 	strh.w	r3, [sp, #30]
 80185c2:	4b10      	ldr	r3, [pc, #64]	; (8018604 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 80185c4:	9003      	str	r0, [sp, #12]
 80185c6:	881b      	ldrh	r3, [r3, #0]
 80185c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80185cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80185d2:	9506      	str	r5, [sp, #24]
 80185d4:	f7f7 fa36 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 80185d8:	6803      	ldr	r3, [r0, #0]
 80185da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185dc:	4798      	blx	r3
 80185de:	23ff      	movs	r3, #255	; 0xff
 80185e0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80185e4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80185e8:	6860      	ldr	r0, [r4, #4]
 80185ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80185ee:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 80185f2:	6803      	ldr	r3, [r0, #0]
 80185f4:	a902      	add	r1, sp, #8
 80185f6:	685b      	ldr	r3, [r3, #4]
 80185f8:	4798      	blx	r3
 80185fa:	4628      	mov	r0, r5
 80185fc:	b00a      	add	sp, #40	; 0x28
 80185fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018602:	bf00      	nop
 8018604:	2000981a 	.word	0x2000981a

08018608 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018608:	b570      	push	{r4, r5, r6, lr}
 801860a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801860e:	4604      	mov	r4, r0
 8018610:	b19b      	cbz	r3, 801863a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018612:	2002      	movs	r0, #2
 8018614:	f7fc ff48 	bl	80154a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018618:	2300      	movs	r3, #0
 801861a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801861e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8018622:	6823      	ldr	r3, [r4, #0]
 8018624:	4620      	mov	r0, r4
 8018626:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 801862a:	f7ff fd0b 	bl	8018044 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801862e:	462b      	mov	r3, r5
 8018630:	4601      	mov	r1, r0
 8018632:	4620      	mov	r0, r4
 8018634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018638:	4718      	bx	r3
 801863a:	bd70      	pop	{r4, r5, r6, pc}

0801863c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801863c:	4770      	bx	lr

0801863e <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801863e:	4770      	bx	lr

08018640 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8018640:	2000      	movs	r0, #0
 8018642:	4770      	bx	lr

08018644 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018644:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018648:	1a13      	subs	r3, r2, r0
 801864a:	4258      	negs	r0, r3
 801864c:	4158      	adcs	r0, r3
 801864e:	4770      	bx	lr

08018650 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018650:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018654:	1a9b      	subs	r3, r3, r2
 8018656:	2b00      	cmp	r3, #0
 8018658:	bfdc      	itt	le
 801865a:	6882      	ldrle	r2, [r0, #8]
 801865c:	189b      	addle	r3, r3, r2
 801865e:	2b01      	cmp	r3, #1
 8018660:	bfcc      	ite	gt
 8018662:	2000      	movgt	r0, #0
 8018664:	2001      	movle	r0, #1
 8018666:	4770      	bx	lr

08018668 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018668:	6902      	ldr	r2, [r0, #16]
 801866a:	6840      	ldr	r0, [r0, #4]
 801866c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8018670:	4770      	bx	lr

08018672 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018672:	6803      	ldr	r3, [r0, #0]
 8018674:	691b      	ldr	r3, [r3, #16]
 8018676:	4718      	bx	r3

08018678 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8018678:	4770      	bx	lr

0801867a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801867a:	4770      	bx	lr

0801867c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801867c:	b570      	push	{r4, r5, r6, lr}
 801867e:	2301      	movs	r3, #1
 8018680:	7203      	strb	r3, [r0, #8]
 8018682:	4604      	mov	r4, r0
 8018684:	6840      	ldr	r0, [r0, #4]
 8018686:	6803      	ldr	r3, [r0, #0]
 8018688:	699b      	ldr	r3, [r3, #24]
 801868a:	4798      	blx	r3
 801868c:	6803      	ldr	r3, [r0, #0]
 801868e:	2b40      	cmp	r3, #64	; 0x40
 8018690:	4605      	mov	r5, r0
 8018692:	d039      	beq.n	8018708 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018694:	d815      	bhi.n	80186c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8018696:	2b04      	cmp	r3, #4
 8018698:	d022      	beq.n	80186e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801869a:	d808      	bhi.n	80186ae <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801869c:	2b01      	cmp	r3, #1
 801869e:	d033      	beq.n	8018708 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80186a0:	2b02      	cmp	r3, #2
 80186a2:	d108      	bne.n	80186b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 80186a4:	6823      	ldr	r3, [r4, #0]
 80186a6:	4620      	mov	r0, r4
 80186a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186aa:	4798      	blx	r3
 80186ac:	e025      	b.n	80186fa <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 80186ae:	2b08      	cmp	r3, #8
 80186b0:	d01e      	beq.n	80186f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 80186b2:	2b20      	cmp	r3, #32
 80186b4:	d028      	beq.n	8018708 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80186b6:	4b17      	ldr	r3, [pc, #92]	; (8018714 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 80186b8:	4a17      	ldr	r2, [pc, #92]	; (8018718 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80186ba:	4818      	ldr	r0, [pc, #96]	; (801871c <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80186bc:	218b      	movs	r1, #139	; 0x8b
 80186be:	f015 fda9 	bl	802e214 <__assert_func>
 80186c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80186c6:	d01f      	beq.n	8018708 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80186c8:	d804      	bhi.n	80186d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 80186ca:	2b80      	cmp	r3, #128	; 0x80
 80186cc:	d01c      	beq.n	8018708 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80186ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80186d2:	e7ef      	b.n	80186b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80186d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80186d8:	d016      	beq.n	8018708 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80186da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80186de:	e7e0      	b.n	80186a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80186e0:	6823      	ldr	r3, [r4, #0]
 80186e2:	7f01      	ldrb	r1, [r0, #28]
 80186e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186e6:	4620      	mov	r0, r4
 80186e8:	4798      	blx	r3
 80186ea:	6823      	ldr	r3, [r4, #0]
 80186ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186ee:	e006      	b.n	80186fe <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80186f0:	6823      	ldr	r3, [r4, #0]
 80186f2:	7f01      	ldrb	r1, [r0, #28]
 80186f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186f6:	4620      	mov	r0, r4
 80186f8:	4798      	blx	r3
 80186fa:	6823      	ldr	r3, [r4, #0]
 80186fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186fe:	4629      	mov	r1, r5
 8018700:	4620      	mov	r0, r4
 8018702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018706:	4718      	bx	r3
 8018708:	6823      	ldr	r3, [r4, #0]
 801870a:	4620      	mov	r0, r4
 801870c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801870e:	4798      	blx	r3
 8018710:	e7eb      	b.n	80186ea <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8018712:	bf00      	nop
 8018714:	08031792 	.word	0x08031792
 8018718:	080318a4 	.word	0x080318a4
 801871c:	080317b7 	.word	0x080317b7

08018720 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018720:	b570      	push	{r4, r5, r6, lr}
 8018722:	4604      	mov	r4, r0
 8018724:	460e      	mov	r6, r1
 8018726:	6860      	ldr	r0, [r4, #4]
 8018728:	6803      	ldr	r3, [r0, #0]
 801872a:	685b      	ldr	r3, [r3, #4]
 801872c:	4798      	blx	r3
 801872e:	2800      	cmp	r0, #0
 8018730:	d1f9      	bne.n	8018726 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018732:	4d0d      	ldr	r5, [pc, #52]	; (8018768 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8018734:	6828      	ldr	r0, [r5, #0]
 8018736:	6803      	ldr	r3, [r0, #0]
 8018738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801873a:	4798      	blx	r3
 801873c:	f7fd f940 	bl	80159c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018740:	6828      	ldr	r0, [r5, #0]
 8018742:	2101      	movs	r1, #1
 8018744:	f7ff ff7a 	bl	801863c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018748:	6860      	ldr	r0, [r4, #4]
 801874a:	6803      	ldr	r3, [r0, #0]
 801874c:	4631      	mov	r1, r6
 801874e:	689b      	ldr	r3, [r3, #8]
 8018750:	4798      	blx	r3
 8018752:	6823      	ldr	r3, [r4, #0]
 8018754:	4620      	mov	r0, r4
 8018756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018758:	4798      	blx	r3
 801875a:	6828      	ldr	r0, [r5, #0]
 801875c:	6803      	ldr	r3, [r0, #0]
 801875e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018764:	4718      	bx	r3
 8018766:	bf00      	nop
 8018768:	20009820 	.word	0x20009820

0801876c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801876c:	b508      	push	{r3, lr}
 801876e:	f7fd f90d 	bl	801598c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018776:	f7fd b917 	b.w	80159a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801877a <_ZN8touchgfx13DMA_Interface5startEv>:
 801877a:	b510      	push	{r4, lr}
 801877c:	4604      	mov	r4, r0
 801877e:	6840      	ldr	r0, [r0, #4]
 8018780:	6803      	ldr	r3, [r0, #0]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	4798      	blx	r3
 8018786:	b948      	cbnz	r0, 801879c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018788:	7a63      	ldrb	r3, [r4, #9]
 801878a:	b13b      	cbz	r3, 801879c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801878c:	7a23      	ldrb	r3, [r4, #8]
 801878e:	b92b      	cbnz	r3, 801879c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018790:	6823      	ldr	r3, [r4, #0]
 8018792:	4620      	mov	r0, r4
 8018794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801879a:	4718      	bx	r3
 801879c:	bd10      	pop	{r4, pc}
	...

080187a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80187a0:	b570      	push	{r4, r5, r6, lr}
 80187a2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80187a6:	1a9b      	subs	r3, r3, r2
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	4606      	mov	r6, r0
 80187ac:	bfdc      	itt	le
 80187ae:	6880      	ldrle	r0, [r0, #8]
 80187b0:	181b      	addle	r3, r3, r0
 80187b2:	2b01      	cmp	r3, #1
 80187b4:	dd13      	ble.n	80187de <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 80187b6:	6874      	ldr	r4, [r6, #4]
 80187b8:	460d      	mov	r5, r1
 80187ba:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 80187be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80187c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80187c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80187ca:	68f3      	ldr	r3, [r6, #12]
 80187cc:	68b2      	ldr	r2, [r6, #8]
 80187ce:	f3bf 8f5b 	dmb	ish
 80187d2:	3301      	adds	r3, #1
 80187d4:	429a      	cmp	r2, r3
 80187d6:	bfd8      	it	le
 80187d8:	1a9b      	suble	r3, r3, r2
 80187da:	60f3      	str	r3, [r6, #12]
 80187dc:	bd70      	pop	{r4, r5, r6, pc}
 80187de:	4b03      	ldr	r3, [pc, #12]	; (80187ec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 80187e0:	4a03      	ldr	r2, [pc, #12]	; (80187f0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 80187e2:	4804      	ldr	r0, [pc, #16]	; (80187f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80187e4:	2139      	movs	r1, #57	; 0x39
 80187e6:	f015 fd15 	bl	802e214 <__assert_func>
 80187ea:	bf00      	nop
 80187ec:	080317dd 	.word	0x080317dd
 80187f0:	080318d4 	.word	0x080318d4
 80187f4:	080317b7 	.word	0x080317b7

080187f8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80187f8:	b510      	push	{r4, lr}
 80187fa:	6803      	ldr	r3, [r0, #0]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	4604      	mov	r4, r0
 8018800:	4798      	blx	r3
 8018802:	b128      	cbz	r0, 8018810 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8018804:	4b07      	ldr	r3, [pc, #28]	; (8018824 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8018806:	4a08      	ldr	r2, [pc, #32]	; (8018828 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8018808:	4808      	ldr	r0, [pc, #32]	; (801882c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801880a:	213f      	movs	r1, #63	; 0x3f
 801880c:	f015 fd02 	bl	802e214 <__assert_func>
 8018810:	6923      	ldr	r3, [r4, #16]
 8018812:	68a2      	ldr	r2, [r4, #8]
 8018814:	f3bf 8f5b 	dmb	ish
 8018818:	3301      	adds	r3, #1
 801881a:	429a      	cmp	r2, r3
 801881c:	bfd8      	it	le
 801881e:	1a9b      	suble	r3, r3, r2
 8018820:	6123      	str	r3, [r4, #16]
 8018822:	bd10      	pop	{r4, pc}
 8018824:	08031800 	.word	0x08031800
 8018828:	08031922 	.word	0x08031922
 801882c:	080317b7 	.word	0x080317b7

08018830 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018830:	b570      	push	{r4, r5, r6, lr}
 8018832:	4604      	mov	r4, r0
 8018834:	6840      	ldr	r0, [r0, #4]
 8018836:	6803      	ldr	r3, [r0, #0]
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	4798      	blx	r3
 801883c:	4605      	mov	r5, r0
 801883e:	b930      	cbnz	r0, 801884e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018840:	7a23      	ldrb	r3, [r4, #8]
 8018842:	b123      	cbz	r3, 801884e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018844:	6860      	ldr	r0, [r4, #4]
 8018846:	6803      	ldr	r3, [r0, #0]
 8018848:	695b      	ldr	r3, [r3, #20]
 801884a:	4798      	blx	r3
 801884c:	7225      	strb	r5, [r4, #8]
 801884e:	6860      	ldr	r0, [r4, #4]
 8018850:	6803      	ldr	r3, [r0, #0]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	4798      	blx	r3
 8018856:	b928      	cbnz	r0, 8018864 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8018858:	6823      	ldr	r3, [r4, #0]
 801885a:	4620      	mov	r0, r4
 801885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801885e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018862:	4718      	bx	r3
 8018864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018868:	f7fd b8b6 	b.w	80159d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801886c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801886c:	b510      	push	{r4, lr}
 801886e:	4c04      	ldr	r4, [pc, #16]	; (8018880 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018870:	6082      	str	r2, [r0, #8]
 8018872:	2200      	movs	r2, #0
 8018874:	e9c0 4100 	strd	r4, r1, [r0]
 8018878:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801887c:	bd10      	pop	{r4, pc}
 801887e:	bf00      	nop
 8018880:	08031888 	.word	0x08031888

08018884 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018884:	6840      	ldr	r0, [r0, #4]
 8018886:	6803      	ldr	r3, [r0, #0]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	4718      	bx	r3

0801888c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801888c:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8018890:	4770      	bx	lr

08018892 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8018892:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8018896:	4770      	bx	lr

08018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8018898:	b507      	push	{r0, r1, r2, lr}
 801889a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801889e:	ab01      	add	r3, sp, #4
 80188a0:	6809      	ldr	r1, [r1, #0]
 80188a2:	6800      	ldr	r0, [r0, #0]
 80188a4:	f004 ff2a 	bl	801d6fc <_ZN8touchgfx6muldivElllRl>
 80188a8:	b003      	add	sp, #12
 80188aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080188b0 <_ZN8touchgfx7CWRUtil4sineEi>:
 80188b0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80188b4:	fb90 f3f2 	sdiv	r3, r0, r2
 80188b8:	fb03 0312 	mls	r3, r3, r2, r0
 80188bc:	4413      	add	r3, r2
 80188be:	fb93 f0f2 	sdiv	r0, r3, r2
 80188c2:	fb02 3010 	mls	r0, r2, r0, r3
 80188c6:	285a      	cmp	r0, #90	; 0x5a
 80188c8:	4b09      	ldr	r3, [pc, #36]	; (80188f0 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80188ca:	dc02      	bgt.n	80188d2 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80188cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80188d0:	4770      	bx	lr
 80188d2:	28b4      	cmp	r0, #180	; 0xb4
 80188d4:	dc02      	bgt.n	80188dc <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80188d6:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80188da:	e7f7      	b.n	80188cc <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80188dc:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80188e0:	bfd4      	ite	le
 80188e2:	38b4      	suble	r0, #180	; 0xb4
 80188e4:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80188e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80188ec:	4240      	negs	r0, r0
 80188ee:	4770      	bx	lr
 80188f0:	08031952 	.word	0x08031952

080188f4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 80188f4:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80188f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80188fa:	fb90 f3f2 	sdiv	r3, r0, r2
 80188fe:	fb03 0012 	mls	r0, r3, r2, r0
 8018902:	4410      	add	r0, r2
 8018904:	fb90 f4f2 	sdiv	r4, r0, r2
 8018908:	fb02 0414 	mls	r4, r2, r4, r0
 801890c:	f004 061f 	and.w	r6, r4, #31
 8018910:	1164      	asrs	r4, r4, #5
 8018912:	4620      	mov	r0, r4
 8018914:	f7ff ffcc 	bl	80188b0 <_ZN8touchgfx7CWRUtil4sineEi>
 8018918:	4605      	mov	r5, r0
 801891a:	b90e      	cbnz	r6, 8018920 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 801891c:	b002      	add	sp, #8
 801891e:	bd70      	pop	{r4, r5, r6, pc}
 8018920:	1c60      	adds	r0, r4, #1
 8018922:	f7ff ffc5 	bl	80188b0 <_ZN8touchgfx7CWRUtil4sineEi>
 8018926:	ab01      	add	r3, sp, #4
 8018928:	2220      	movs	r2, #32
 801892a:	4631      	mov	r1, r6
 801892c:	1b40      	subs	r0, r0, r5
 801892e:	f004 fee5 	bl	801d6fc <_ZN8touchgfx6muldivElllRl>
 8018932:	4428      	add	r0, r5
 8018934:	e7f2      	b.n	801891c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08018936 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8018936:	b508      	push	{r3, lr}
 8018938:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 801893c:	f7ff ffda 	bl	80188f4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018940:	bd08      	pop	{r3, pc}
	...

08018944 <_ZN8touchgfx6CircleC1Ev>:
 8018944:	b510      	push	{r4, lr}
 8018946:	4604      	mov	r4, r0
 8018948:	f000 fcde 	bl	8019308 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801894c:	4b08      	ldr	r3, [pc, #32]	; (8018970 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 801894e:	6023      	str	r3, [r4, #0]
 8018950:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8018954:	2300      	movs	r3, #0
 8018956:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 801895a:	f24b 4205 	movw	r2, #46085	; 0xb405
 801895e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8018962:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8018966:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801896a:	60a3      	str	r3, [r4, #8]
 801896c:	4620      	mov	r0, r4
 801896e:	bd10      	pop	{r4, pc}
 8018970:	08031a10 	.word	0x08031a10

08018974 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8018974:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018978:	4606      	mov	r6, r0
 801897a:	6810      	ldr	r0, [r2, #0]
 801897c:	4698      	mov	r8, r3
 801897e:	4691      	mov	r9, r2
 8018980:	460f      	mov	r7, r1
 8018982:	f7ff ffb7 	bl	80188f4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018986:	a902      	add	r1, sp, #8
 8018988:	2402      	movs	r4, #2
 801898a:	f841 0d08 	str.w	r0, [r1, #-8]!
 801898e:	4640      	mov	r0, r8
 8018990:	f7ff ff82 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018994:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8018996:	fb90 f0f4 	sdiv	r0, r0, r4
 801899a:	4405      	add	r5, r0
 801899c:	f8d9 0000 	ldr.w	r0, [r9]
 80189a0:	f7ff ffc9 	bl	8018936 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80189a4:	a902      	add	r1, sp, #8
 80189a6:	f841 0d04 	str.w	r0, [r1, #-4]!
 80189aa:	4640      	mov	r0, r8
 80189ac:	f7ff ff74 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80189b0:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80189b2:	fb90 f0f4 	sdiv	r0, r0, r4
 80189b6:	4629      	mov	r1, r5
 80189b8:	1a12      	subs	r2, r2, r0
 80189ba:	4638      	mov	r0, r7
 80189bc:	f013 fb5b 	bl	802c076 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80189c0:	b003      	add	sp, #12
 80189c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080189c6 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 80189c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80189ca:	9e08      	ldr	r6, [sp, #32]
 80189cc:	6830      	ldr	r0, [r6, #0]
 80189ce:	4698      	mov	r8, r3
 80189d0:	4615      	mov	r5, r2
 80189d2:	460f      	mov	r7, r1
 80189d4:	f7ff ff8e 	bl	80188f4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80189d8:	a902      	add	r1, sp, #8
 80189da:	2402      	movs	r4, #2
 80189dc:	f841 0d08 	str.w	r0, [r1, #-8]!
 80189e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189e2:	f7ff ff59 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80189e6:	682d      	ldr	r5, [r5, #0]
 80189e8:	fb90 f0f4 	sdiv	r0, r0, r4
 80189ec:	4405      	add	r5, r0
 80189ee:	6830      	ldr	r0, [r6, #0]
 80189f0:	f7ff ffa1 	bl	8018936 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80189f4:	a902      	add	r1, sp, #8
 80189f6:	f841 0d04 	str.w	r0, [r1, #-4]!
 80189fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80189fc:	f7ff ff4c 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a00:	f8d8 2000 	ldr.w	r2, [r8]
 8018a04:	fb90 f0f4 	sdiv	r0, r0, r4
 8018a08:	4629      	mov	r1, r5
 8018a0a:	1a12      	subs	r2, r2, r0
 8018a0c:	4638      	mov	r0, r7
 8018a0e:	f013 fac1 	bl	802bf94 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018a12:	b002      	add	sp, #8
 8018a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a18 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8018a18:	b513      	push	{r0, r1, r4, lr}
 8018a1a:	e9cd 2300 	strd	r2, r3, [sp]
 8018a1e:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8018a22:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8018a26:	f7ff ffce 	bl	80189c6 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018a2a:	b002      	add	sp, #8
 8018a2c:	bd10      	pop	{r4, pc}

08018a2e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8018a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a30:	680e      	ldr	r6, [r1, #0]
 8018a32:	681f      	ldr	r7, [r3, #0]
 8018a34:	9807      	ldr	r0, [sp, #28]
 8018a36:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8018a3a:	42be      	cmp	r6, r7
 8018a3c:	bfb8      	it	lt
 8018a3e:	601e      	strlt	r6, [r3, #0]
 8018a40:	680b      	ldr	r3, [r1, #0]
 8018a42:	6829      	ldr	r1, [r5, #0]
 8018a44:	428b      	cmp	r3, r1
 8018a46:	bfc8      	it	gt
 8018a48:	602b      	strgt	r3, [r5, #0]
 8018a4a:	6813      	ldr	r3, [r2, #0]
 8018a4c:	6821      	ldr	r1, [r4, #0]
 8018a4e:	428b      	cmp	r3, r1
 8018a50:	bfb8      	it	lt
 8018a52:	6023      	strlt	r3, [r4, #0]
 8018a54:	6813      	ldr	r3, [r2, #0]
 8018a56:	6802      	ldr	r2, [r0, #0]
 8018a58:	4293      	cmp	r3, r2
 8018a5a:	bfc8      	it	gt
 8018a5c:	6003      	strgt	r3, [r0, #0]
 8018a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018a60 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8018a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a64:	4606      	mov	r6, r0
 8018a66:	b089      	sub	sp, #36	; 0x24
 8018a68:	6808      	ldr	r0, [r1, #0]
 8018a6a:	4690      	mov	r8, r2
 8018a6c:	461f      	mov	r7, r3
 8018a6e:	4689      	mov	r9, r1
 8018a70:	f7ff ff40 	bl	80188f4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018a74:	ad08      	add	r5, sp, #32
 8018a76:	2402      	movs	r4, #2
 8018a78:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018a7c:	4640      	mov	r0, r8
 8018a7e:	4629      	mov	r1, r5
 8018a80:	f7ff ff0a 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018a84:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8018a86:	fb90 f0f4 	sdiv	r0, r0, r4
 8018a8a:	4418      	add	r0, r3
 8018a8c:	9005      	str	r0, [sp, #20]
 8018a8e:	f8d9 0000 	ldr.w	r0, [r9]
 8018a92:	f7ff ff50 	bl	8018936 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018a96:	4629      	mov	r1, r5
 8018a98:	9007      	str	r0, [sp, #28]
 8018a9a:	4640      	mov	r0, r8
 8018a9c:	f7ff fefc 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018aa0:	fb90 f0f4 	sdiv	r0, r0, r4
 8018aa4:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8018aa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018aa8:	aa08      	add	r2, sp, #32
 8018aaa:	1a24      	subs	r4, r4, r0
 8018aac:	f842 4d08 	str.w	r4, [r2, #-8]!
 8018ab0:	9302      	str	r3, [sp, #8]
 8018ab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018ab4:	9301      	str	r3, [sp, #4]
 8018ab6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ab8:	9300      	str	r3, [sp, #0]
 8018aba:	a905      	add	r1, sp, #20
 8018abc:	463b      	mov	r3, r7
 8018abe:	4630      	mov	r0, r6
 8018ac0:	f7ff ffb5 	bl	8018a2e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018ac4:	b009      	add	sp, #36	; 0x24
 8018ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018aca <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8018aca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ace:	4291      	cmp	r1, r2
 8018ad0:	b08d      	sub	sp, #52	; 0x34
 8018ad2:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8018ad6:	bfc8      	it	gt
 8018ad8:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8018adc:	461e      	mov	r6, r3
 8018ade:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018ae2:	1a9b      	subs	r3, r3, r2
 8018ae4:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018ae8:	bfa2      	ittt	ge
 8018aea:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018aee:	2200      	movge	r2, #0
 8018af0:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8018af4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8018af6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8018af8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018afc:	ad0c      	add	r5, sp, #48	; 0x30
 8018afe:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8018b02:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018b06:	f845 3d04 	str.w	r3, [r5, #-4]!
 8018b0a:	a907      	add	r1, sp, #28
 8018b0c:	4633      	mov	r3, r6
 8018b0e:	462a      	mov	r2, r5
 8018b10:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018b14:	9700      	str	r7, [sp, #0]
 8018b16:	4604      	mov	r4, r0
 8018b18:	f7ff ffa2 	bl	8018a60 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018b1c:	9b07      	ldr	r3, [sp, #28]
 8018b1e:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8018b22:	f103 0120 	add.w	r1, r3, #32
 8018b26:	fb91 f3f0 	sdiv	r3, r1, r0
 8018b2a:	fb00 1313 	mls	r3, r0, r3, r1
 8018b2e:	1ac3      	subs	r3, r0, r3
 8018b30:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8018b34:	fb93 f2f0 	sdiv	r2, r3, r0
 8018b38:	fb00 3312 	mls	r3, r0, r2, r3
 8018b3c:	440b      	add	r3, r1
 8018b3e:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8018b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b44:	9906      	ldr	r1, [sp, #24]
 8018b46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018b48:	4291      	cmp	r1, r2
 8018b4a:	db11      	blt.n	8018b70 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8018b4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018b4e:	9700      	str	r7, [sp, #0]
 8018b50:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b56:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018b5a:	4633      	mov	r3, r6
 8018b5c:	462a      	mov	r2, r5
 8018b5e:	4651      	mov	r1, sl
 8018b60:	4620      	mov	r0, r4
 8018b62:	f7ff ff7d 	bl	8018a60 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b68:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8018b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8018b6e:	e7e8      	b.n	8018b42 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8018b70:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8018b74:	4291      	cmp	r1, r2
 8018b76:	dd0c      	ble.n	8018b92 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8018b78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018b7a:	9700      	str	r7, [sp, #0]
 8018b7c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b82:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018b86:	4633      	mov	r3, r6
 8018b88:	462a      	mov	r2, r5
 8018b8a:	a906      	add	r1, sp, #24
 8018b8c:	4620      	mov	r0, r4
 8018b8e:	f7ff ff67 	bl	8018a60 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018b92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	f040 8097 	bne.w	8018cc8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8018b9a:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8018b9e:	1a52      	subs	r2, r2, r1
 8018ba0:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8018ba4:	da0a      	bge.n	8018bbc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8018ba6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018baa:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8018bae:	9700      	str	r7, [sp, #0]
 8018bb0:	4633      	mov	r3, r6
 8018bb2:	462a      	mov	r2, r5
 8018bb4:	a90a      	add	r1, sp, #40	; 0x28
 8018bb6:	4620      	mov	r0, r4
 8018bb8:	f7ff ff52 	bl	8018a60 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018bbc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8018bc0:	2bb3      	cmp	r3, #179	; 0xb3
 8018bc2:	d87e      	bhi.n	8018cc2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8018bc4:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8018bc8:	1a1b      	subs	r3, r3, r0
 8018bca:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018bce:	da78      	bge.n	8018cc2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8018bd0:	f7ff fe90 	bl	80188f4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018bd4:	ad0c      	add	r5, sp, #48	; 0x30
 8018bd6:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8018bda:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018bde:	4658      	mov	r0, fp
 8018be0:	4629      	mov	r1, r5
 8018be2:	f7ff fe59 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018be6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018be8:	18c3      	adds	r3, r0, r3
 8018bea:	9807      	ldr	r0, [sp, #28]
 8018bec:	9305      	str	r3, [sp, #20]
 8018bee:	f7ff fea2 	bl	8018936 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018bf2:	4629      	mov	r1, r5
 8018bf4:	900b      	str	r0, [sp, #44]	; 0x2c
 8018bf6:	4658      	mov	r0, fp
 8018bf8:	f7ff fe4e 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018bfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018bfe:	9a05      	ldr	r2, [sp, #20]
 8018c00:	9700      	str	r7, [sp, #0]
 8018c02:	1a1b      	subs	r3, r3, r0
 8018c04:	f04f 0a02 	mov.w	sl, #2
 8018c08:	9304      	str	r3, [sp, #16]
 8018c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018c0c:	fb93 f3fa 	sdiv	r3, r3, sl
 8018c10:	1ad2      	subs	r2, r2, r3
 8018c12:	920a      	str	r2, [sp, #40]	; 0x28
 8018c14:	9a04      	ldr	r2, [sp, #16]
 8018c16:	1ad3      	subs	r3, r2, r3
 8018c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c1a:	462a      	mov	r2, r5
 8018c1c:	4633      	mov	r3, r6
 8018c1e:	a90a      	add	r1, sp, #40	; 0x28
 8018c20:	4620      	mov	r0, r4
 8018c22:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018c26:	f7ff ff02 	bl	8018a2e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018c2a:	9a05      	ldr	r2, [sp, #20]
 8018c2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018c2e:	fb93 f3fa 	sdiv	r3, r3, sl
 8018c32:	189a      	adds	r2, r3, r2
 8018c34:	920a      	str	r2, [sp, #40]	; 0x28
 8018c36:	9a04      	ldr	r2, [sp, #16]
 8018c38:	9700      	str	r7, [sp, #0]
 8018c3a:	4413      	add	r3, r2
 8018c3c:	a90a      	add	r1, sp, #40	; 0x28
 8018c3e:	462a      	mov	r2, r5
 8018c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c42:	4620      	mov	r0, r4
 8018c44:	4633      	mov	r3, r6
 8018c46:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018c4a:	f7ff fef0 	bl	8018a2e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018c4e:	9806      	ldr	r0, [sp, #24]
 8018c50:	f7ff fe50 	bl	80188f4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018c54:	4629      	mov	r1, r5
 8018c56:	900b      	str	r0, [sp, #44]	; 0x2c
 8018c58:	4658      	mov	r0, fp
 8018c5a:	f7ff fe1d 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018c5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018c60:	18c3      	adds	r3, r0, r3
 8018c62:	9806      	ldr	r0, [sp, #24]
 8018c64:	9304      	str	r3, [sp, #16]
 8018c66:	f7ff fe66 	bl	8018936 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018c6a:	4629      	mov	r1, r5
 8018c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8018c6e:	4658      	mov	r0, fp
 8018c70:	f7ff fe12 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c76:	9a04      	ldr	r2, [sp, #16]
 8018c78:	9700      	str	r7, [sp, #0]
 8018c7a:	eba3 0b00 	sub.w	fp, r3, r0
 8018c7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018c80:	fb93 f3fa 	sdiv	r3, r3, sl
 8018c84:	1ad2      	subs	r2, r2, r3
 8018c86:	ebab 0303 	sub.w	r3, fp, r3
 8018c8a:	920a      	str	r2, [sp, #40]	; 0x28
 8018c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c8e:	462a      	mov	r2, r5
 8018c90:	4633      	mov	r3, r6
 8018c92:	a90a      	add	r1, sp, #40	; 0x28
 8018c94:	4620      	mov	r0, r4
 8018c96:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018c9a:	f7ff fec8 	bl	8018a2e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018c9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018ca0:	fb93 fafa 	sdiv	sl, r3, sl
 8018ca4:	9b04      	ldr	r3, [sp, #16]
 8018ca6:	9700      	str	r7, [sp, #0]
 8018ca8:	4453      	add	r3, sl
 8018caa:	930a      	str	r3, [sp, #40]	; 0x28
 8018cac:	eb0a 030b 	add.w	r3, sl, fp
 8018cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8018cb2:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018cb6:	4633      	mov	r3, r6
 8018cb8:	462a      	mov	r2, r5
 8018cba:	a90a      	add	r1, sp, #40	; 0x28
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	f7ff feb6 	bl	8018a2e <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018cc2:	b00d      	add	sp, #52	; 0x34
 8018cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018cca:	9700      	str	r7, [sp, #0]
 8018ccc:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8018cd2:	462a      	mov	r2, r5
 8018cd4:	4633      	mov	r3, r6
 8018cd6:	a907      	add	r1, sp, #28
 8018cd8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018cdc:	4620      	mov	r0, r4
 8018cde:	f7ff febf 	bl	8018a60 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018ce2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018ce4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018ce6:	9700      	str	r7, [sp, #0]
 8018ce8:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018cec:	930b      	str	r3, [sp, #44]	; 0x2c
 8018cee:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018cf2:	4633      	mov	r3, r6
 8018cf4:	462a      	mov	r2, r5
 8018cf6:	a906      	add	r1, sp, #24
 8018cf8:	e75d      	b.n	8018bb6 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08018cfa <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8018cfa:	b530      	push	{r4, r5, lr}
 8018cfc:	4604      	mov	r4, r0
 8018cfe:	4608      	mov	r0, r1
 8018d00:	4611      	mov	r1, r2
 8018d02:	461a      	mov	r2, r3
 8018d04:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018d08:	b089      	sub	sp, #36	; 0x24
 8018d0a:	015b      	lsls	r3, r3, #5
 8018d0c:	9304      	str	r3, [sp, #16]
 8018d0e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018d12:	2500      	movs	r5, #0
 8018d14:	015b      	lsls	r3, r3, #5
 8018d16:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8018d1a:	ab07      	add	r3, sp, #28
 8018d1c:	9302      	str	r3, [sp, #8]
 8018d1e:	ab06      	add	r3, sp, #24
 8018d20:	9301      	str	r3, [sp, #4]
 8018d22:	ab05      	add	r3, sp, #20
 8018d24:	9300      	str	r3, [sp, #0]
 8018d26:	ab04      	add	r3, sp, #16
 8018d28:	9505      	str	r5, [sp, #20]
 8018d2a:	f7ff fece 	bl	8018aca <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8018d2e:	2520      	movs	r5, #32
 8018d30:	9a04      	ldr	r2, [sp, #16]
 8018d32:	9805      	ldr	r0, [sp, #20]
 8018d34:	fb92 f2f5 	sdiv	r2, r2, r5
 8018d38:	fb90 f0f5 	sdiv	r0, r0, r5
 8018d3c:	b292      	uxth	r2, r2
 8018d3e:	3002      	adds	r0, #2
 8018d40:	1a80      	subs	r0, r0, r2
 8018d42:	9b06      	ldr	r3, [sp, #24]
 8018d44:	9907      	ldr	r1, [sp, #28]
 8018d46:	fb93 f3f5 	sdiv	r3, r3, r5
 8018d4a:	fb91 f1f5 	sdiv	r1, r1, r5
 8018d4e:	b29b      	uxth	r3, r3
 8018d50:	3102      	adds	r1, #2
 8018d52:	1ac9      	subs	r1, r1, r3
 8018d54:	3a01      	subs	r2, #1
 8018d56:	3b01      	subs	r3, #1
 8018d58:	80a0      	strh	r0, [r4, #4]
 8018d5a:	4620      	mov	r0, r4
 8018d5c:	8022      	strh	r2, [r4, #0]
 8018d5e:	8063      	strh	r3, [r4, #2]
 8018d60:	80e1      	strh	r1, [r4, #6]
 8018d62:	b009      	add	sp, #36	; 0x24
 8018d64:	bd30      	pop	{r4, r5, pc}

08018d66 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8018d66:	b510      	push	{r4, lr}
 8018d68:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8018d6c:	4604      	mov	r4, r0
 8018d6e:	f7ff ffc4 	bl	8018cfa <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018d72:	4620      	mov	r0, r4
 8018d74:	bd10      	pop	{r4, pc}

08018d76 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8018d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d78:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8018d7c:	4606      	mov	r6, r0
 8018d7e:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 8018d82:	6813      	ldr	r3, [r2, #0]
 8018d84:	42a5      	cmp	r5, r4
 8018d86:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8018d8a:	da2b      	bge.n	8018de4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8018d8c:	42a3      	cmp	r3, r4
 8018d8e:	dd14      	ble.n	8018dba <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8018d90:	b168      	cbz	r0, 8018dae <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018d92:	4267      	negs	r7, r4
 8018d94:	fb97 f2f0 	sdiv	r2, r7, r0
 8018d98:	fb00 7212 	mls	r2, r0, r2, r7
 8018d9c:	1a82      	subs	r2, r0, r2
 8018d9e:	fb92 f7f0 	sdiv	r7, r2, r0
 8018da2:	fb00 2017 	mls	r0, r0, r7, r2
 8018da6:	1a24      	subs	r4, r4, r0
 8018da8:	42ac      	cmp	r4, r5
 8018daa:	bfb8      	it	lt
 8018dac:	462c      	movlt	r4, r5
 8018dae:	4630      	mov	r0, r6
 8018db0:	4622      	mov	r2, r4
 8018db2:	f7ff ffa2 	bl	8018cfa <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018db6:	4630      	mov	r0, r6
 8018db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dba:	42ab      	cmp	r3, r5
 8018dbc:	dd0e      	ble.n	8018ddc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8018dbe:	b168      	cbz	r0, 8018ddc <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8018dc0:	425f      	negs	r7, r3
 8018dc2:	fb97 f2f0 	sdiv	r2, r7, r0
 8018dc6:	fb00 7212 	mls	r2, r0, r2, r7
 8018dca:	1a82      	subs	r2, r0, r2
 8018dcc:	fb92 f7f0 	sdiv	r7, r2, r0
 8018dd0:	fb00 2017 	mls	r0, r0, r7, r2
 8018dd4:	1a1b      	subs	r3, r3, r0
 8018dd6:	42ab      	cmp	r3, r5
 8018dd8:	bfb8      	it	lt
 8018dda:	462b      	movlt	r3, r5
 8018ddc:	4622      	mov	r2, r4
 8018dde:	461c      	mov	r4, r3
 8018de0:	4613      	mov	r3, r2
 8018de2:	e7e4      	b.n	8018dae <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018de4:	42a3      	cmp	r3, r4
 8018de6:	da10      	bge.n	8018e0a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8018de8:	b148      	cbz	r0, 8018dfe <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8018dea:	fb94 f2f0 	sdiv	r2, r4, r0
 8018dee:	fb00 4212 	mls	r2, r0, r2, r4
 8018df2:	1a82      	subs	r2, r0, r2
 8018df4:	fb92 f7f0 	sdiv	r7, r2, r0
 8018df8:	fb00 2017 	mls	r0, r0, r7, r2
 8018dfc:	4404      	add	r4, r0
 8018dfe:	42a5      	cmp	r5, r4
 8018e00:	bfa8      	it	ge
 8018e02:	4625      	movge	r5, r4
 8018e04:	461c      	mov	r4, r3
 8018e06:	462b      	mov	r3, r5
 8018e08:	e7d1      	b.n	8018dae <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018e0a:	42ab      	cmp	r3, r5
 8018e0c:	dacf      	bge.n	8018dae <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018e0e:	2800      	cmp	r0, #0
 8018e10:	d0cd      	beq.n	8018dae <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018e12:	fb93 f2f0 	sdiv	r2, r3, r0
 8018e16:	fb00 3212 	mls	r2, r0, r2, r3
 8018e1a:	1a82      	subs	r2, r0, r2
 8018e1c:	fb92 f7f0 	sdiv	r7, r2, r0
 8018e20:	fb00 2017 	mls	r0, r0, r7, r2
 8018e24:	4403      	add	r3, r0
 8018e26:	42ab      	cmp	r3, r5
 8018e28:	bfa8      	it	ge
 8018e2a:	462b      	movge	r3, r5
 8018e2c:	e7bf      	b.n	8018dae <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08018e2e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8018e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e32:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8018e34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8018e36:	b0ba      	sub	sp, #232	; 0xe8
 8018e38:	429a      	cmp	r2, r3
 8018e3a:	9303      	str	r3, [sp, #12]
 8018e3c:	9204      	str	r2, [sp, #16]
 8018e3e:	bfb8      	it	lt
 8018e40:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8018e44:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8018e48:	1a9b      	subs	r3, r3, r2
 8018e4a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018e4e:	bfa2      	ittt	ge
 8018e50:	2200      	movge	r2, #0
 8018e52:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018e56:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8018e5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018e5c:	4604      	mov	r4, r0
 8018e5e:	460f      	mov	r7, r1
 8018e60:	ae0a      	add	r6, sp, #40	; 0x28
 8018e62:	2a00      	cmp	r2, #0
 8018e64:	d131      	bne.n	8018eca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8018e66:	463a      	mov	r2, r7
 8018e68:	4621      	mov	r1, r4
 8018e6a:	a80b      	add	r0, sp, #44	; 0x2c
 8018e6c:	f012 ff38 	bl	802bce0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018e70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018e72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018e74:	9205      	str	r2, [sp, #20]
 8018e76:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8018e7a:	9306      	str	r3, [sp, #24]
 8018e7c:	dc6d      	bgt.n	8018f5a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x12c>
 8018e7e:	9b03      	ldr	r3, [sp, #12]
 8018e80:	9307      	str	r3, [sp, #28]
 8018e82:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018e86:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8018e8a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8018e90:	aa07      	add	r2, sp, #28
 8018e92:	4633      	mov	r3, r6
 8018e94:	a90b      	add	r1, sp, #44	; 0x2c
 8018e96:	4620      	mov	r0, r4
 8018e98:	016d      	lsls	r5, r5, #5
 8018e9a:	f7ff fd6b 	bl	8018974 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018e9e:	9f07      	ldr	r7, [sp, #28]
 8018ea0:	2d00      	cmp	r5, #0
 8018ea2:	d163      	bne.n	8018f6c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x13e>
 8018ea4:	3720      	adds	r7, #32
 8018ea6:	9a04      	ldr	r2, [sp, #16]
 8018ea8:	9b06      	ldr	r3, [sp, #24]
 8018eaa:	4639      	mov	r1, r7
 8018eac:	4291      	cmp	r1, r2
 8018eae:	442f      	add	r7, r5
 8018eb0:	dc69      	bgt.n	8018f86 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x158>
 8018eb2:	9a05      	ldr	r2, [sp, #20]
 8018eb4:	9107      	str	r1, [sp, #28]
 8018eb6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018eba:	930a      	str	r3, [sp, #40]	; 0x28
 8018ebc:	aa07      	add	r2, sp, #28
 8018ebe:	4633      	mov	r3, r6
 8018ec0:	a90b      	add	r1, sp, #44	; 0x2c
 8018ec2:	4620      	mov	r0, r4
 8018ec4:	f7ff fda8 	bl	8018a18 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018ec8:	e7ed      	b.n	8018ea6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8018eca:	f9b1 c000 	ldrsh.w	ip, [r1]
 8018ece:	88bd      	ldrh	r5, [r7, #4]
 8018ed0:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8018ed4:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8018ed8:	4465      	add	r5, ip
 8018eda:	b22d      	sxth	r5, r5
 8018edc:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8018ee0:	2d00      	cmp	r5, #0
 8018ee2:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8018ee6:	bfb8      	it	lt
 8018ee8:	426d      	neglt	r5, r5
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	bfb8      	it	lt
 8018eee:	425b      	neglt	r3, r3
 8018ef0:	429d      	cmp	r5, r3
 8018ef2:	bfb8      	it	lt
 8018ef4:	461d      	movlt	r5, r3
 8018ef6:	88fb      	ldrh	r3, [r7, #6]
 8018ef8:	4403      	add	r3, r0
 8018efa:	b21b      	sxth	r3, r3
 8018efc:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8018f06:	bfb8      	it	lt
 8018f08:	425b      	neglt	r3, r3
 8018f0a:	2900      	cmp	r1, #0
 8018f0c:	bfb8      	it	lt
 8018f0e:	4249      	neglt	r1, r1
 8018f10:	428b      	cmp	r3, r1
 8018f12:	bfb8      	it	lt
 8018f14:	460b      	movlt	r3, r1
 8018f16:	115b      	asrs	r3, r3, #5
 8018f18:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8018f1c:	116d      	asrs	r5, r5, #5
 8018f1e:	3301      	adds	r3, #1
 8018f20:	435b      	muls	r3, r3
 8018f22:	3501      	adds	r5, #1
 8018f24:	fb05 3505 	mla	r5, r5, r5, r3
 8018f28:	3001      	adds	r0, #1
 8018f2a:	2302      	movs	r3, #2
 8018f2c:	fb92 f2f3 	sdiv	r2, r2, r3
 8018f30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018f32:	1040      	asrs	r0, r0, #1
 8018f34:	1a9a      	subs	r2, r3, r2
 8018f36:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018f3a:	920a      	str	r2, [sp, #40]	; 0x28
 8018f3c:	f7ff fcb8 	bl	80188b0 <_ZN8touchgfx7CWRUtil4sineEi>
 8018f40:	a90b      	add	r1, sp, #44	; 0x2c
 8018f42:	900b      	str	r0, [sp, #44]	; 0x2c
 8018f44:	4630      	mov	r0, r6
 8018f46:	f7ff fca7 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018f4a:	2320      	movs	r3, #32
 8018f4c:	fb90 f0f3 	sdiv	r0, r0, r3
 8018f50:	4340      	muls	r0, r0
 8018f52:	42a8      	cmp	r0, r5
 8018f54:	dd87      	ble.n	8018e66 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8018f56:	2401      	movs	r4, #1
 8018f58:	e037      	b.n	8018fca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19c>
 8018f5a:	2102      	movs	r1, #2
 8018f5c:	fb93 f3f1 	sdiv	r3, r3, r1
 8018f60:	4413      	add	r3, r2
 8018f62:	9306      	str	r3, [sp, #24]
 8018f64:	fb93 f3f1 	sdiv	r3, r3, r1
 8018f68:	9305      	str	r3, [sp, #20]
 8018f6a:	e788      	b.n	8018e7e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8018f6c:	f107 0320 	add.w	r3, r7, #32
 8018f70:	fb93 f7f5 	sdiv	r7, r3, r5
 8018f74:	fb05 3717 	mls	r7, r5, r7, r3
 8018f78:	1bea      	subs	r2, r5, r7
 8018f7a:	fb92 f7f5 	sdiv	r7, r2, r5
 8018f7e:	fb05 2717 	mls	r7, r5, r7, r2
 8018f82:	441f      	add	r7, r3
 8018f84:	e78f      	b.n	8018ea6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8018f86:	9907      	ldr	r1, [sp, #28]
 8018f88:	428a      	cmp	r2, r1
 8018f8a:	dd09      	ble.n	8018fa0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 8018f8c:	9a05      	ldr	r2, [sp, #20]
 8018f8e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018f92:	930a      	str	r3, [sp, #40]	; 0x28
 8018f94:	aa04      	add	r2, sp, #16
 8018f96:	4633      	mov	r3, r6
 8018f98:	a90b      	add	r1, sp, #44	; 0x2c
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	f7ff fd3c 	bl	8018a18 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018fa0:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8018fa4:	9a06      	ldr	r2, [sp, #24]
 8018fa6:	1ac3      	subs	r3, r0, r3
 8018fa8:	b99a      	cbnz	r2, 8018fd2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a4>
 8018faa:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018fae:	da04      	bge.n	8018fba <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018fb0:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8018fb4:	a80b      	add	r0, sp, #44	; 0x2c
 8018fb6:	f012 ffed 	bl	802bf94 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018fba:	21ff      	movs	r1, #255	; 0xff
 8018fbc:	a80b      	add	r0, sp, #44	; 0x2c
 8018fbe:	f013 f95e 	bl	802c27e <_ZN8touchgfx6Canvas6renderEh>
 8018fc2:	4604      	mov	r4, r0
 8018fc4:	a80b      	add	r0, sp, #44	; 0x2c
 8018fc6:	f013 f999 	bl	802c2fc <_ZN8touchgfx6CanvasD1Ev>
 8018fca:	4620      	mov	r0, r4
 8018fcc:	b03a      	add	sp, #232	; 0xe8
 8018fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fd2:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8018fd6:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018fda:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8018fde:	da2b      	bge.n	8019038 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8018fe0:	f7ff fc88 	bl	80188f4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018fe4:	4631      	mov	r1, r6
 8018fe6:	900a      	str	r0, [sp, #40]	; 0x28
 8018fe8:	a805      	add	r0, sp, #20
 8018fea:	f7ff fc55 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018fee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018ff0:	4418      	add	r0, r3
 8018ff2:	9008      	str	r0, [sp, #32]
 8018ff4:	9804      	ldr	r0, [sp, #16]
 8018ff6:	f7ff fc9e 	bl	8018936 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018ffa:	4631      	mov	r1, r6
 8018ffc:	900a      	str	r0, [sp, #40]	; 0x28
 8018ffe:	a805      	add	r0, sp, #20
 8019000:	f7ff fc4a 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019004:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019006:	1a18      	subs	r0, r3, r0
 8019008:	9b04      	ldr	r3, [sp, #16]
 801900a:	9009      	str	r0, [sp, #36]	; 0x24
 801900c:	443b      	add	r3, r7
 801900e:	930a      	str	r3, [sp, #40]	; 0x28
 8019010:	f10d 0818 	add.w	r8, sp, #24
 8019014:	9b04      	ldr	r3, [sp, #16]
 8019016:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019018:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 801901c:	4293      	cmp	r3, r2
 801901e:	dd0b      	ble.n	8019038 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8019020:	ab09      	add	r3, sp, #36	; 0x24
 8019022:	e9cd 6800 	strd	r6, r8, [sp]
 8019026:	aa08      	add	r2, sp, #32
 8019028:	a90b      	add	r1, sp, #44	; 0x2c
 801902a:	4620      	mov	r0, r4
 801902c:	f7ff fccb 	bl	80189c6 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8019030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019032:	443b      	add	r3, r7
 8019034:	930a      	str	r3, [sp, #40]	; 0x28
 8019036:	e7ed      	b.n	8019014 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e6>
 8019038:	9a04      	ldr	r2, [sp, #16]
 801903a:	9b07      	ldr	r3, [sp, #28]
 801903c:	429a      	cmp	r2, r3
 801903e:	dd0a      	ble.n	8019056 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x228>
 8019040:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019044:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019048:	930a      	str	r3, [sp, #40]	; 0x28
 801904a:	aa04      	add	r2, sp, #16
 801904c:	4633      	mov	r3, r6
 801904e:	a90b      	add	r1, sp, #44	; 0x2c
 8019050:	4620      	mov	r0, r4
 8019052:	f7ff fce1 	bl	8018a18 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019056:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801905a:	9b03      	ldr	r3, [sp, #12]
 801905c:	4642      	mov	r2, r8
 801905e:	429a      	cmp	r2, r3
 8019060:	eba8 0805 	sub.w	r8, r8, r5
 8019064:	db0c      	blt.n	8019080 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x252>
 8019066:	9207      	str	r2, [sp, #28]
 8019068:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801906c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019070:	930a      	str	r3, [sp, #40]	; 0x28
 8019072:	aa07      	add	r2, sp, #28
 8019074:	4633      	mov	r3, r6
 8019076:	a90b      	add	r1, sp, #44	; 0x2c
 8019078:	4620      	mov	r0, r4
 801907a:	f7ff fccd 	bl	8018a18 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801907e:	e7ec      	b.n	801905a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8019080:	9a07      	ldr	r2, [sp, #28]
 8019082:	4293      	cmp	r3, r2
 8019084:	da0a      	bge.n	801909c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x26e>
 8019086:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801908a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801908e:	930a      	str	r3, [sp, #40]	; 0x28
 8019090:	aa03      	add	r2, sp, #12
 8019092:	4633      	mov	r3, r6
 8019094:	a90b      	add	r1, sp, #44	; 0x2c
 8019096:	4620      	mov	r0, r4
 8019098:	f7ff fcbe 	bl	8018a18 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801909c:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 80190a0:	1a1b      	subs	r3, r3, r0
 80190a2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80190a6:	da88      	bge.n	8018fba <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 80190a8:	f7ff fc24 	bl	80188f4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80190ac:	4631      	mov	r1, r6
 80190ae:	900a      	str	r0, [sp, #40]	; 0x28
 80190b0:	a805      	add	r0, sp, #20
 80190b2:	f7ff fbf1 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80190b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80190b8:	4418      	add	r0, r3
 80190ba:	9008      	str	r0, [sp, #32]
 80190bc:	9803      	ldr	r0, [sp, #12]
 80190be:	f7ff fc3a 	bl	8018936 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80190c2:	4631      	mov	r1, r6
 80190c4:	900a      	str	r0, [sp, #40]	; 0x28
 80190c6:	a805      	add	r0, sp, #20
 80190c8:	f7ff fbe6 	bl	8018898 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80190cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80190ce:	1a18      	subs	r0, r3, r0
 80190d0:	9b03      	ldr	r3, [sp, #12]
 80190d2:	9009      	str	r0, [sp, #36]	; 0x24
 80190d4:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 80190d8:	443b      	add	r3, r7
 80190da:	930a      	str	r3, [sp, #40]	; 0x28
 80190dc:	ad06      	add	r5, sp, #24
 80190de:	9a03      	ldr	r2, [sp, #12]
 80190e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190e2:	429a      	cmp	r2, r3
 80190e4:	f77f af69 	ble.w	8018fba <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 80190e8:	ab09      	add	r3, sp, #36	; 0x24
 80190ea:	e9cd 6500 	strd	r6, r5, [sp]
 80190ee:	aa08      	add	r2, sp, #32
 80190f0:	a90b      	add	r1, sp, #44	; 0x2c
 80190f2:	4620      	mov	r0, r4
 80190f4:	f7ff fc67 	bl	80189c6 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80190f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190fa:	443b      	add	r3, r7
 80190fc:	930a      	str	r3, [sp, #40]	; 0x28
 80190fe:	e7ee      	b.n	80190de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b0>

08019100 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8019100:	6281      	str	r1, [r0, #40]	; 0x28
 8019102:	4770      	bx	lr

08019104 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8019104:	b510      	push	{r4, lr}
 8019106:	2200      	movs	r2, #0
 8019108:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801910c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8019110:	8002      	strh	r2, [r0, #0]
 8019112:	8042      	strh	r2, [r0, #2]
 8019114:	8084      	strh	r4, [r0, #4]
 8019116:	80c1      	strh	r1, [r0, #6]
 8019118:	bd10      	pop	{r4, pc}

0801911a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801911a:	2200      	movs	r2, #0
 801911c:	8002      	strh	r2, [r0, #0]
 801911e:	8042      	strh	r2, [r0, #2]
 8019120:	8082      	strh	r2, [r0, #4]
 8019122:	80c2      	strh	r2, [r0, #6]
 8019124:	4770      	bx	lr
	...

08019128 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8019128:	b508      	push	{r3, lr}
 801912a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801912c:	b928      	cbnz	r0, 801913a <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801912e:	4b03      	ldr	r3, [pc, #12]	; (801913c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8019130:	4a03      	ldr	r2, [pc, #12]	; (8019140 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8019132:	4804      	ldr	r0, [pc, #16]	; (8019144 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8019134:	2126      	movs	r1, #38	; 0x26
 8019136:	f015 f86d 	bl	802e214 <__assert_func>
 801913a:	bd08      	pop	{r3, pc}
 801913c:	08031a84 	.word	0x08031a84
 8019140:	08031b64 	.word	0x08031b64
 8019144:	08031aab 	.word	0x08031aab

08019148 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019148:	b510      	push	{r4, lr}
 801914a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801914e:	888a      	ldrh	r2, [r1, #4]
 8019150:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019154:	4422      	add	r2, r4
 8019156:	b212      	sxth	r2, r2
 8019158:	4293      	cmp	r3, r2
 801915a:	da15      	bge.n	8019188 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801915c:	8882      	ldrh	r2, [r0, #4]
 801915e:	4413      	add	r3, r2
 8019160:	b21b      	sxth	r3, r3
 8019162:	429c      	cmp	r4, r3
 8019164:	da10      	bge.n	8019188 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019166:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801916a:	88c9      	ldrh	r1, [r1, #6]
 801916c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019170:	4419      	add	r1, r3
 8019172:	b209      	sxth	r1, r1
 8019174:	428a      	cmp	r2, r1
 8019176:	da07      	bge.n	8019188 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019178:	88c0      	ldrh	r0, [r0, #6]
 801917a:	4410      	add	r0, r2
 801917c:	b200      	sxth	r0, r0
 801917e:	4283      	cmp	r3, r0
 8019180:	bfac      	ite	ge
 8019182:	2000      	movge	r0, #0
 8019184:	2001      	movlt	r0, #1
 8019186:	bd10      	pop	{r4, pc}
 8019188:	2000      	movs	r0, #0
 801918a:	e7fc      	b.n	8019186 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801918c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801918c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019190:	4604      	mov	r4, r0
 8019192:	b08b      	sub	sp, #44	; 0x2c
 8019194:	6808      	ldr	r0, [r1, #0]
 8019196:	6849      	ldr	r1, [r1, #4]
 8019198:	ab04      	add	r3, sp, #16
 801919a:	c303      	stmia	r3!, {r0, r1}
 801919c:	4b37      	ldr	r3, [pc, #220]	; (801927c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 801919e:	781b      	ldrb	r3, [r3, #0]
 80191a0:	2b01      	cmp	r3, #1
 80191a2:	6823      	ldr	r3, [r4, #0]
 80191a4:	4621      	mov	r1, r4
 80191a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80191a8:	a806      	add	r0, sp, #24
 80191aa:	bf1f      	itttt	ne
 80191ac:	f10d 090e 	addne.w	r9, sp, #14
 80191b0:	ae05      	addne	r6, sp, #20
 80191b2:	f10d 0516 	addne.w	r5, sp, #22
 80191b6:	f10d 0812 	addne.w	r8, sp, #18
 80191ba:	bf01      	itttt	eq
 80191bc:	f10d 0916 	addeq.w	r9, sp, #22
 80191c0:	f10d 060e 	addeq.w	r6, sp, #14
 80191c4:	ad05      	addeq	r5, sp, #20
 80191c6:	f10d 0810 	addeq.w	r8, sp, #16
 80191ca:	4798      	blx	r3
 80191cc:	f04f 0a00 	mov.w	sl, #0
 80191d0:	f647 7bff 	movw	fp, #32767	; 0x7fff
 80191d4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80191d8:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d042      	beq.n	8019266 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 80191e0:	4293      	cmp	r3, r2
 80191e2:	bfa8      	it	ge
 80191e4:	4613      	movge	r3, r2
 80191e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80191ea:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80191ee:	2f00      	cmp	r7, #0
 80191f0:	dd21      	ble.n	8019236 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 80191f2:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80191f6:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80191fa:	f9b6 2000 	ldrsh.w	r2, [r6]
 80191fe:	f9b9 3000 	ldrsh.w	r3, [r9]
 8019202:	f8ad 0020 	strh.w	r0, [sp, #32]
 8019206:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801920a:	a808      	add	r0, sp, #32
 801920c:	a906      	add	r1, sp, #24
 801920e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8019212:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019216:	f7ff ff97 	bl	8019148 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801921a:	9001      	str	r0, [sp, #4]
 801921c:	b1d0      	cbz	r0, 8019254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801921e:	6822      	ldr	r2, [r4, #0]
 8019220:	a908      	add	r1, sp, #32
 8019222:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8019224:	4620      	mov	r0, r4
 8019226:	4790      	blx	r2
 8019228:	b9a0      	cbnz	r0, 8019254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801922a:	9b01      	ldr	r3, [sp, #4]
 801922c:	107f      	asrs	r7, r7, #1
 801922e:	f8ad 700e 	strh.w	r7, [sp, #14]
 8019232:	469a      	mov	sl, r3
 8019234:	e7d9      	b.n	80191ea <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8019236:	d10d      	bne.n	8019254 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8019238:	2301      	movs	r3, #1
 801923a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801923e:	f8b8 2000 	ldrh.w	r2, [r8]
 8019242:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8019246:	440a      	add	r2, r1
 8019248:	f8a8 2000 	strh.w	r2, [r8]
 801924c:	882b      	ldrh	r3, [r5, #0]
 801924e:	1a5b      	subs	r3, r3, r1
 8019250:	802b      	strh	r3, [r5, #0]
 8019252:	e7bf      	b.n	80191d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8019254:	f1ba 0f00 	cmp.w	sl, #0
 8019258:	d0f1      	beq.n	801923e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 801925a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 801925e:	455b      	cmp	r3, fp
 8019260:	bf08      	it	eq
 8019262:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8019264:	e7eb      	b.n	801923e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8019266:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801926a:	429a      	cmp	r2, r3
 801926c:	bf04      	itt	eq
 801926e:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8019272:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8019274:	b00b      	add	sp, #44	; 0x2c
 8019276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801927a:	bf00      	nop
 801927c:	20009818 	.word	0x20009818

08019280 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8019280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019282:	6803      	ldr	r3, [r0, #0]
 8019284:	b085      	sub	sp, #20
 8019286:	4604      	mov	r4, r0
 8019288:	4601      	mov	r1, r0
 801928a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801928c:	4668      	mov	r0, sp
 801928e:	4798      	blx	r3
 8019290:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8019294:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8019298:	f8ad 600c 	strh.w	r6, [sp, #12]
 801929c:	2300      	movs	r3, #0
 801929e:	a902      	add	r1, sp, #8
 80192a0:	4668      	mov	r0, sp
 80192a2:	9302      	str	r3, [sp, #8]
 80192a4:	f8ad 500e 	strh.w	r5, [sp, #14]
 80192a8:	f7ff ff4e 	bl	8019148 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80192ac:	b340      	cbz	r0, 8019300 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 80192ae:	f9bd 2000 	ldrsh.w	r2, [sp]
 80192b2:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 80192b6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80192ba:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80192be:	443a      	add	r2, r7
 80192c0:	b292      	uxth	r2, r2
 80192c2:	b217      	sxth	r7, r2
 80192c4:	42be      	cmp	r6, r7
 80192c6:	bfd8      	it	le
 80192c8:	b2b2      	uxthle	r2, r6
 80192ca:	1a12      	subs	r2, r2, r0
 80192cc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80192d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80192d4:	f8ad 0000 	strh.w	r0, [sp]
 80192d8:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 80192dc:	4413      	add	r3, r2
 80192de:	b29b      	uxth	r3, r3
 80192e0:	b21a      	sxth	r2, r3
 80192e2:	4295      	cmp	r5, r2
 80192e4:	bfd8      	it	le
 80192e6:	b2ab      	uxthle	r3, r5
 80192e8:	1a5b      	subs	r3, r3, r1
 80192ea:	f8ad 3006 	strh.w	r3, [sp, #6]
 80192ee:	f8ad 1002 	strh.w	r1, [sp, #2]
 80192f2:	6823      	ldr	r3, [r4, #0]
 80192f4:	4669      	mov	r1, sp
 80192f6:	691b      	ldr	r3, [r3, #16]
 80192f8:	4620      	mov	r0, r4
 80192fa:	4798      	blx	r3
 80192fc:	b005      	add	sp, #20
 80192fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019300:	e9cd 0000 	strd	r0, r0, [sp]
 8019304:	e7f5      	b.n	80192f2 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08019308 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8019308:	2200      	movs	r2, #0
 801930a:	8082      	strh	r2, [r0, #4]
 801930c:	80c2      	strh	r2, [r0, #6]
 801930e:	8102      	strh	r2, [r0, #8]
 8019310:	8142      	strh	r2, [r0, #10]
 8019312:	8182      	strh	r2, [r0, #12]
 8019314:	81c2      	strh	r2, [r0, #14]
 8019316:	8202      	strh	r2, [r0, #16]
 8019318:	8242      	strh	r2, [r0, #18]
 801931a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801931e:	61c2      	str	r2, [r0, #28]
 8019320:	8402      	strh	r2, [r0, #32]
 8019322:	8442      	strh	r2, [r0, #34]	; 0x22
 8019324:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8019328:	2101      	movs	r1, #1
 801932a:	6282      	str	r2, [r0, #40]	; 0x28
 801932c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019330:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8019334:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019336:	4903      	ldr	r1, [pc, #12]	; (8019344 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 8019338:	6001      	str	r1, [r0, #0]
 801933a:	22ff      	movs	r2, #255	; 0xff
 801933c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8019340:	4770      	bx	lr
 8019342:	bf00      	nop
 8019344:	08031af0 	.word	0x08031af0

08019348 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8019348:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801934c:	4770      	bx	lr

0801934e <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 801934e:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8019352:	4770      	bx	lr

08019354 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8019354:	6802      	ldr	r2, [r0, #0]
 8019356:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801935a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801935c:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8019360:	4710      	bx	r2

08019362 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8019362:	6802      	ldr	r2, [r0, #0]
 8019364:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 8019368:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801936a:	eef0 0a40 	vmov.f32	s1, s0
 801936e:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8019372:	4710      	bx	r2

08019374 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8019374:	6802      	ldr	r2, [r0, #0]
 8019376:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801937a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801937c:	eeb0 1a40 	vmov.f32	s2, s0
 8019380:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8019384:	4710      	bx	r2

08019386 <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8019386:	6802      	ldr	r2, [r0, #0]
 8019388:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801938c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801938e:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8019392:	4710      	bx	r2

08019394 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8019394:	6802      	ldr	r2, [r0, #0]
 8019396:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801939a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801939c:	eef0 0a40 	vmov.f32	s1, s0
 80193a0:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80193a4:	4710      	bx	r2

080193a6 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 80193a6:	6802      	ldr	r2, [r0, #0]
 80193a8:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80193ac:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80193ae:	eeb0 1a40 	vmov.f32	s2, s0
 80193b2:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80193b6:	4710      	bx	r2

080193b8 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 80193b8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80193bc:	4770      	bx	lr

080193be <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 80193be:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 80193c2:	4770      	bx	lr

080193c4 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 80193c4:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 80193c8:	4770      	bx	lr

080193ca <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 80193ca:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 80193ce:	4770      	bx	lr

080193d0 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 80193d0:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 80193d4:	4770      	bx	lr

080193d6 <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 80193d6:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 80193da:	4770      	bx	lr

080193dc <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 80193dc:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 80193e0:	4770      	bx	lr

080193e2 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 80193e2:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 80193e6:	4770      	bx	lr

080193e8 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 80193e8:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 80193ec:	4770      	bx	lr

080193ee <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 80193ee:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 80193f2:	4770      	bx	lr

080193f4 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 80193f4:	ee07 2a90 	vmov	s15, r2
 80193f8:	6803      	ldr	r3, [r0, #0]
 80193fa:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80193fe:	ee07 1a90 	vmov	s15, r1
 8019402:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8019406:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801940a:	4718      	bx	r3

0801940c <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 801940c:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8019410:	4770      	bx	lr

08019412 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8019412:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8019416:	4770      	bx	lr

08019418 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8019418:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 801941c:	4770      	bx	lr

0801941e <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 801941e:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 8019422:	4770      	bx	lr

08019424 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8019424:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 8019428:	4770      	bx	lr

0801942a <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 801942a:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 801942e:	4770      	bx	lr

08019430 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8019430:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 8019434:	4770      	bx	lr

08019436 <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8019436:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 801943a:	4770      	bx	lr

0801943c <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 801943c:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 8019440:	4770      	bx	lr

08019442 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8019442:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 8019446:	4770      	bx	lr

08019448 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8019448:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 801944c:	4770      	bx	lr

0801944e <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 801944e:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 8019452:	4770      	bx	lr

08019454 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8019454:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 8019458:	4770      	bx	lr

0801945a <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 801945a:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 801945e:	4770      	bx	lr

08019460 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8019460:	2200      	movs	r2, #0
 8019462:	8002      	strh	r2, [r0, #0]
 8019464:	8042      	strh	r2, [r0, #2]
 8019466:	8082      	strh	r2, [r0, #4]
 8019468:	80c2      	strh	r2, [r0, #6]
 801946a:	4770      	bx	lr

0801946c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 801946c:	b538      	push	{r3, r4, r5, lr}
 801946e:	2500      	movs	r5, #0
 8019470:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8019474:	2301      	movs	r3, #1
 8019476:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 801947a:	4b1f      	ldr	r3, [pc, #124]	; (80194f8 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 801947c:	8085      	strh	r5, [r0, #4]
 801947e:	80c5      	strh	r5, [r0, #6]
 8019480:	8105      	strh	r5, [r0, #8]
 8019482:	8145      	strh	r5, [r0, #10]
 8019484:	8185      	strh	r5, [r0, #12]
 8019486:	81c5      	strh	r5, [r0, #14]
 8019488:	8205      	strh	r5, [r0, #16]
 801948a:	8245      	strh	r5, [r0, #18]
 801948c:	61c5      	str	r5, [r0, #28]
 801948e:	8405      	strh	r5, [r0, #32]
 8019490:	8445      	strh	r5, [r0, #34]	; 0x22
 8019492:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8019496:	6003      	str	r3, [r0, #0]
 8019498:	880b      	ldrh	r3, [r1, #0]
 801949a:	84c3      	strh	r3, [r0, #38]	; 0x26
 801949c:	23ff      	movs	r3, #255	; 0xff
 801949e:	4604      	mov	r4, r0
 80194a0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80194a4:	f001 fa8f 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80194a8:	4b14      	ldr	r3, [pc, #80]	; (80194fc <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 80194aa:	6023      	str	r3, [r4, #0]
 80194ac:	2300      	movs	r3, #0
 80194ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80194b2:	4913      	ldr	r1, [pc, #76]	; (8019500 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 80194b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80194b6:	6323      	str	r3, [r4, #48]	; 0x30
 80194b8:	6363      	str	r3, [r4, #52]	; 0x34
 80194ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80194bc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80194be:	6463      	str	r3, [r4, #68]	; 0x44
 80194c0:	64a3      	str	r3, [r4, #72]	; 0x48
 80194c2:	6523      	str	r3, [r4, #80]	; 0x50
 80194c4:	6563      	str	r3, [r4, #84]	; 0x54
 80194c6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80194c8:	6623      	str	r3, [r4, #96]	; 0x60
 80194ca:	66a3      	str	r3, [r4, #104]	; 0x68
 80194cc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80194ce:	6763      	str	r3, [r4, #116]	; 0x74
 80194d0:	67a3      	str	r3, [r4, #120]	; 0x78
 80194d2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80194d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80194da:	230c      	movs	r3, #12
 80194dc:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 80194e0:	6422      	str	r2, [r4, #64]	; 0x40
 80194e2:	64e1      	str	r1, [r4, #76]	; 0x4c
 80194e4:	65a1      	str	r1, [r4, #88]	; 0x58
 80194e6:	6662      	str	r2, [r4, #100]	; 0x64
 80194e8:	6722      	str	r2, [r4, #112]	; 0x70
 80194ea:	67e2      	str	r2, [r4, #124]	; 0x7c
 80194ec:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 80194f0:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 80194f4:	4620      	mov	r0, r4
 80194f6:	bd38      	pop	{r3, r4, r5, pc}
 80194f8:	08032108 	.word	0x08032108
 80194fc:	08031bbc 	.word	0x08031bbc
 8019500:	447a0000 	.word	0x447a0000

08019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8019504:	b570      	push	{r4, r5, r6, lr}
 8019506:	ed2d 8b04 	vpush	{d8-d9}
 801950a:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 801950e:	add0      	add	r5, sp, #832	; 0x340
 8019510:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8019512:	f825 3d40 	strh.w	r3, [r5, #-64]!
 8019516:	4604      	mov	r4, r0
 8019518:	4628      	mov	r0, r5
 801951a:	f006 fb63 	bl	801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801951e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8019520:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 8019524:	4606      	mov	r6, r0
 8019526:	4628      	mov	r0, r5
 8019528:	f006 fb96 	bl	801fc58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801952c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019530:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8019534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019536:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 801953a:	9312      	str	r3, [sp, #72]	; 0x48
 801953c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019540:	1c72      	adds	r2, r6, #1
 8019542:	3001      	adds	r0, #1
 8019544:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8019548:	ee07 2a90 	vmov	s15, r2
 801954c:	ee06 0a90 	vmov	s13, r0
 8019550:	ee36 6a47 	vsub.f32	s12, s12, s14
 8019554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019558:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801955c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019560:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019564:	9316      	str	r3, [sp, #88]	; 0x58
 8019566:	931a      	str	r3, [sp, #104]	; 0x68
 8019568:	931e      	str	r3, [sp, #120]	; 0x78
 801956a:	2300      	movs	r3, #0
 801956c:	9320      	str	r3, [sp, #128]	; 0x80
 801956e:	9321      	str	r3, [sp, #132]	; 0x84
 8019570:	9322      	str	r3, [sp, #136]	; 0x88
 8019572:	9324      	str	r3, [sp, #144]	; 0x90
 8019574:	9325      	str	r3, [sp, #148]	; 0x94
 8019576:	9326      	str	r3, [sp, #152]	; 0x98
 8019578:	9328      	str	r3, [sp, #160]	; 0xa0
 801957a:	9329      	str	r3, [sp, #164]	; 0xa4
 801957c:	932a      	str	r3, [sp, #168]	; 0xa8
 801957e:	932c      	str	r3, [sp, #176]	; 0xb0
 8019580:	932d      	str	r3, [sp, #180]	; 0xb4
 8019582:	932e      	str	r3, [sp, #184]	; 0xb8
 8019584:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019588:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 801958c:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8019590:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8019594:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 8019598:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 801959c:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 80195a0:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 80195a4:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 80195a8:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 80195ac:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80195b0:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 80195b4:	a830      	add	r0, sp, #192	; 0xc0
 80195b6:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 80195ba:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 80195be:	f005 f9c3 	bl	801e948 <_ZN8touchgfx9Matrix4x4C1Ev>
 80195c2:	eeb1 0a49 	vneg.f32	s0, s18
 80195c6:	a830      	add	r0, sp, #192	; 0xc0
 80195c8:	f005 fa92 	bl	801eaf0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80195cc:	eeb1 0a68 	vneg.f32	s0, s17
 80195d0:	f005 fa9c 	bl	801eb0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80195d4:	eeb1 0a48 	vneg.f32	s0, s16
 80195d8:	f005 faa7 	bl	801eb2a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 80195dc:	a840      	add	r0, sp, #256	; 0x100
 80195de:	f005 f9b3 	bl	801e948 <_ZN8touchgfx9Matrix4x4C1Ev>
 80195e2:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80195e6:	a840      	add	r0, sp, #256	; 0x100
 80195e8:	f005 fa06 	bl	801e9f8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 80195ec:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 80195f0:	f005 fa2c 	bl	801ea4c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 80195f4:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 80195f8:	f005 fa51 	bl	801ea9e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 80195fc:	a850      	add	r0, sp, #320	; 0x140
 80195fe:	f005 f9a3 	bl	801e948 <_ZN8touchgfx9Matrix4x4C1Ev>
 8019602:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8019606:	a850      	add	r0, sp, #320	; 0x140
 8019608:	f005 fa9e 	bl	801eb48 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 801960c:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8019610:	f005 faa6 	bl	801eb60 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8019614:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8019618:	f005 faaf 	bl	801eb7a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 801961c:	a860      	add	r0, sp, #384	; 0x180
 801961e:	f005 f993 	bl	801e948 <_ZN8touchgfx9Matrix4x4C1Ev>
 8019622:	eeb0 0a49 	vmov.f32	s0, s18
 8019626:	a860      	add	r0, sp, #384	; 0x180
 8019628:	f005 fa62 	bl	801eaf0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801962c:	eeb0 0a68 	vmov.f32	s0, s17
 8019630:	f005 fa6c 	bl	801eb0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8019634:	eeb0 0a48 	vmov.f32	s0, s16
 8019638:	f005 fa77 	bl	801eb2a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 801963c:	aa50      	add	r2, sp, #320	; 0x140
 801963e:	a960      	add	r1, sp, #384	; 0x180
 8019640:	a8b0      	add	r0, sp, #704	; 0x2c0
 8019642:	f005 f99b 	bl	801e97c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019646:	4628      	mov	r0, r5
 8019648:	aa40      	add	r2, sp, #256	; 0x100
 801964a:	a9b0      	add	r1, sp, #704	; 0x2c0
 801964c:	f005 f996 	bl	801e97c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019650:	4629      	mov	r1, r5
 8019652:	aa30      	add	r2, sp, #192	; 0xc0
 8019654:	a870      	add	r0, sp, #448	; 0x1c0
 8019656:	f005 f991 	bl	801e97c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801965a:	a880      	add	r0, sp, #512	; 0x200
 801965c:	f005 f974 	bl	801e948 <_ZN8touchgfx9Matrix4x4C1Ev>
 8019660:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8019664:	a880      	add	r0, sp, #512	; 0x200
 8019666:	eeb1 0a40 	vneg.f32	s0, s0
 801966a:	f005 fa41 	bl	801eaf0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801966e:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 8019672:	a880      	add	r0, sp, #512	; 0x200
 8019674:	eeb1 0a40 	vneg.f32	s0, s0
 8019678:	f005 fa48 	bl	801eb0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801967c:	a890      	add	r0, sp, #576	; 0x240
 801967e:	f005 f963 	bl	801e948 <_ZN8touchgfx9Matrix4x4C1Ev>
 8019682:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 8019686:	a890      	add	r0, sp, #576	; 0x240
 8019688:	f005 f9a6 	bl	801e9d8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 801968c:	a8a0      	add	r0, sp, #640	; 0x280
 801968e:	f005 f95b 	bl	801e948 <_ZN8touchgfx9Matrix4x4C1Ev>
 8019692:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8019696:	a8a0      	add	r0, sp, #640	; 0x280
 8019698:	f005 fa2a 	bl	801eaf0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801969c:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 80196a0:	f005 fa34 	bl	801eb0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80196a4:	aa90      	add	r2, sp, #576	; 0x240
 80196a6:	a9a0      	add	r1, sp, #640	; 0x280
 80196a8:	a8b0      	add	r0, sp, #704	; 0x2c0
 80196aa:	f005 f967 	bl	801e97c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80196ae:	4628      	mov	r0, r5
 80196b0:	aa80      	add	r2, sp, #512	; 0x200
 80196b2:	a9b0      	add	r1, sp, #704	; 0x2c0
 80196b4:	f005 f962 	bl	801e97c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80196b8:	4629      	mov	r1, r5
 80196ba:	aa70      	add	r2, sp, #448	; 0x1c0
 80196bc:	4668      	mov	r0, sp
 80196be:	466d      	mov	r5, sp
 80196c0:	f005 f95c 	bl	801e97c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80196c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196c6:	ae70      	add	r6, sp, #448	; 0x1c0
 80196c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80196ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80196ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80196d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80196d6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80196da:	2500      	movs	r5, #0
 80196dc:	0129      	lsls	r1, r5, #4
 80196de:	ab20      	add	r3, sp, #128	; 0x80
 80196e0:	185e      	adds	r6, r3, r1
 80196e2:	ab10      	add	r3, sp, #64	; 0x40
 80196e4:	4419      	add	r1, r3
 80196e6:	a870      	add	r0, sp, #448	; 0x1c0
 80196e8:	f005 f8fe 	bl	801e8e8 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 80196ec:	3501      	adds	r5, #1
 80196ee:	2d04      	cmp	r5, #4
 80196f0:	ed86 0a00 	vstr	s0, [r6]
 80196f4:	edc6 0a01 	vstr	s1, [r6, #4]
 80196f8:	ed86 1a02 	vstr	s2, [r6, #8]
 80196fc:	edc6 1a03 	vstr	s3, [r6, #12]
 8019700:	d1ec      	bne.n	80196dc <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8019702:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8019706:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 801970a:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 801970e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019712:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 8019716:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801971a:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 801971e:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 8019722:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019726:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801972a:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 801972e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019732:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 8019736:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801973a:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 801973e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019742:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 8019746:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 801974a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801974e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019752:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 8019756:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 801975a:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 801975e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019762:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 8019766:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801976a:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 801976e:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 8019772:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019776:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801977a:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 801977e:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8019782:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 8019786:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801978a:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 801978e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019792:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8019796:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 801979a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801979e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80197a2:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 80197a6:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 80197aa:	ecbd 8b04 	vpop	{d8-d9}
 80197ae:	bd70      	pop	{r4, r5, r6, pc}

080197b0 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 80197b0:	b510      	push	{r4, lr}
 80197b2:	4604      	mov	r4, r0
 80197b4:	f001 f907 	bl	801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80197b8:	4620      	mov	r0, r4
 80197ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197be:	f7ff bea1 	b.w	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080197c2 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 80197c2:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 80197c6:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 80197ca:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 80197ce:	f7ff be99 	b.w	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080197d2 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 80197d2:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 80197d6:	f7ff be95 	b.w	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080197da <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 80197da:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 80197de:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 80197e2:	f7ff be8f 	b.w	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080197e6 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 80197e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80197ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80197ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197f2:	bfd8      	it	le
 80197f4:	eeb0 0a67 	vmovle.f32	s0, s15
 80197f8:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 80197fc:	f7ff be82 	b.w	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019800 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8019800:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 8019804:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 8019808:	f7ff be7c 	b.w	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801980c <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 801980c:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8019810:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8019814:	f7ff be76 	b.w	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019818 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8019818:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 801981c:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8019820:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 8019824:	f7ff be6e 	b.w	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019828 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 8019828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801982c:	ed2d 8b04 	vpush	{d8-d9}
 8019830:	edd1 9a1a 	vldr	s19, [r1, #104]	; 0x68
 8019834:	ed91 8a17 	vldr	s16, [r1, #92]	; 0x5c
 8019838:	ed91 9a1d 	vldr	s18, [r1, #116]	; 0x74
 801983c:	edd1 8a20 	vldr	s17, [r1, #128]	; 0x80
 8019840:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8019844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019848:	bf54      	ite	pl
 801984a:	eeb0 0a69 	vmovpl.f32	s0, s19
 801984e:	eeb0 0a48 	vmovmi.f32	s0, s16
 8019852:	eeb4 9ac0 	vcmpe.f32	s18, s0
 8019856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801985a:	bfd8      	it	le
 801985c:	eeb0 0a49 	vmovle.f32	s0, s18
 8019860:	eef4 8ac0 	vcmpe.f32	s17, s0
 8019864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019868:	bfd8      	it	le
 801986a:	eeb0 0a68 	vmovle.f32	s0, s17
 801986e:	460c      	mov	r4, r1
 8019870:	4607      	mov	r7, r0
 8019872:	f013 ff5b 	bl	802d72c <floorf>
 8019876:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801987e:	bf58      	it	pl
 8019880:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 8019884:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8019888:	bf56      	itet	pl
 801988a:	ee10 3a10 	vmovpl	r3, s0
 801988e:	2600      	movmi	r6, #0
 8019890:	b21e      	sxthpl	r6, r3
 8019892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019896:	bfd8      	it	le
 8019898:	eeb0 8a69 	vmovle.f32	s16, s19
 801989c:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80198a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198a4:	bf58      	it	pl
 80198a6:	eeb0 8a49 	vmovpl.f32	s16, s18
 80198aa:	eef4 8ac8 	vcmpe.f32	s17, s16
 80198ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198b2:	bf54      	ite	pl
 80198b4:	eeb0 0a68 	vmovpl.f32	s0, s17
 80198b8:	eeb0 0a48 	vmovmi.f32	s0, s16
 80198bc:	f013 feb4 	bl	802d628 <ceilf>
 80198c0:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80198c4:	edd4 9a1b 	vldr	s19, [r4, #108]	; 0x6c
 80198c8:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 80198cc:	ed94 9a1e 	vldr	s18, [r4, #120]	; 0x78
 80198d0:	edd4 8a21 	vldr	s17, [r4, #132]	; 0x84
 80198d4:	ee07 8a90 	vmov	s15, r8
 80198d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80198e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198e4:	bfd8      	it	le
 80198e6:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 80198ea:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80198ee:	bfdc      	itt	le
 80198f0:	ee10 3a10 	vmovle	r3, s0
 80198f4:	fa0f f883 	sxthle.w	r8, r3
 80198f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198fc:	bf54      	ite	pl
 80198fe:	eeb0 0a69 	vmovpl.f32	s0, s19
 8019902:	eeb0 0a48 	vmovmi.f32	s0, s16
 8019906:	eeb4 9ac0 	vcmpe.f32	s18, s0
 801990a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801990e:	bfd8      	it	le
 8019910:	eeb0 0a49 	vmovle.f32	s0, s18
 8019914:	eef4 8ac0 	vcmpe.f32	s17, s0
 8019918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801991c:	bfd8      	it	le
 801991e:	eeb0 0a68 	vmovle.f32	s0, s17
 8019922:	f013 ff03 	bl	802d72c <floorf>
 8019926:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801992a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801992e:	bf58      	it	pl
 8019930:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 8019934:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8019938:	bf56      	itet	pl
 801993a:	ee10 3a10 	vmovpl	r3, s0
 801993e:	2500      	movmi	r5, #0
 8019940:	b21d      	sxthpl	r5, r3
 8019942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019946:	bfd8      	it	le
 8019948:	eeb0 8a69 	vmovle.f32	s16, s19
 801994c:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8019950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019954:	bf58      	it	pl
 8019956:	eeb0 8a49 	vmovpl.f32	s16, s18
 801995a:	eef4 8ac8 	vcmpe.f32	s17, s16
 801995e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019962:	bf54      	ite	pl
 8019964:	eeb0 0a68 	vmovpl.f32	s0, s17
 8019968:	eeb0 0a48 	vmovmi.f32	s0, s16
 801996c:	f013 fe5c 	bl	802d628 <ceilf>
 8019970:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019974:	803e      	strh	r6, [r7, #0]
 8019976:	ee07 3a90 	vmov	s15, r3
 801997a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801997e:	807d      	strh	r5, [r7, #2]
 8019980:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019988:	bfd8      	it	le
 801998a:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 801998e:	eba8 0606 	sub.w	r6, r8, r6
 8019992:	bfdc      	itt	le
 8019994:	ee10 3a10 	vmovle	r3, s0
 8019998:	b21b      	sxthle	r3, r3
 801999a:	1b5d      	subs	r5, r3, r5
 801999c:	80be      	strh	r6, [r7, #4]
 801999e:	80fd      	strh	r5, [r7, #6]
 80199a0:	ecbd 8b04 	vpop	{d8-d9}
 80199a4:	4638      	mov	r0, r7
 80199a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080199aa <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 80199aa:	b510      	push	{r4, lr}
 80199ac:	ed2d 8b04 	vpush	{d8-d9}
 80199b0:	4604      	mov	r4, r0
 80199b2:	b084      	sub	sp, #16
 80199b4:	4601      	mov	r1, r0
 80199b6:	4668      	mov	r0, sp
 80199b8:	eeb0 8a40 	vmov.f32	s16, s0
 80199bc:	eef0 8a60 	vmov.f32	s17, s1
 80199c0:	eeb0 9a41 	vmov.f32	s18, s2
 80199c4:	f7ff ff30 	bl	8019828 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80199c8:	6823      	ldr	r3, [r4, #0]
 80199ca:	4669      	mov	r1, sp
 80199cc:	4620      	mov	r0, r4
 80199ce:	691b      	ldr	r3, [r3, #16]
 80199d0:	4798      	blx	r3
 80199d2:	6823      	ldr	r3, [r4, #0]
 80199d4:	eeb0 1a49 	vmov.f32	s2, s18
 80199d8:	eef0 0a68 	vmov.f32	s1, s17
 80199dc:	eeb0 0a48 	vmov.f32	s0, s16
 80199e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80199e2:	4620      	mov	r0, r4
 80199e4:	4798      	blx	r3
 80199e6:	4621      	mov	r1, r4
 80199e8:	a802      	add	r0, sp, #8
 80199ea:	f7ff ff1d 	bl	8019828 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 80199ee:	6823      	ldr	r3, [r4, #0]
 80199f0:	a902      	add	r1, sp, #8
 80199f2:	691b      	ldr	r3, [r3, #16]
 80199f4:	4620      	mov	r0, r4
 80199f6:	4798      	blx	r3
 80199f8:	b004      	add	sp, #16
 80199fa:	ecbd 8b04 	vpop	{d8-d9}
 80199fe:	bd10      	pop	{r4, pc}

08019a00 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8019a00:	b510      	push	{r4, lr}
 8019a02:	ed2d 8b02 	vpush	{d8}
 8019a06:	4604      	mov	r4, r0
 8019a08:	b084      	sub	sp, #16
 8019a0a:	4601      	mov	r1, r0
 8019a0c:	4668      	mov	r0, sp
 8019a0e:	eeb0 8a40 	vmov.f32	s16, s0
 8019a12:	f7ff ff09 	bl	8019828 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8019a16:	6823      	ldr	r3, [r4, #0]
 8019a18:	4669      	mov	r1, sp
 8019a1a:	4620      	mov	r0, r4
 8019a1c:	691b      	ldr	r3, [r3, #16]
 8019a1e:	4798      	blx	r3
 8019a20:	6823      	ldr	r3, [r4, #0]
 8019a22:	eeb0 0a48 	vmov.f32	s0, s16
 8019a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019a2a:	4620      	mov	r0, r4
 8019a2c:	4798      	blx	r3
 8019a2e:	4621      	mov	r1, r4
 8019a30:	a802      	add	r0, sp, #8
 8019a32:	f7ff fef9 	bl	8019828 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8019a36:	6823      	ldr	r3, [r4, #0]
 8019a38:	a902      	add	r1, sp, #8
 8019a3a:	691b      	ldr	r3, [r3, #16]
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	4798      	blx	r3
 8019a40:	b004      	add	sp, #16
 8019a42:	ecbd 8b02 	vpop	{d8}
 8019a46:	bd10      	pop	{r4, pc}

08019a48 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 8019a48:	4603      	mov	r3, r0
 8019a4a:	3026      	adds	r0, #38	; 0x26
 8019a4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019a50:	b90b      	cbnz	r3, 8019a56 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 8019a52:	f003 bdc8 	b.w	801d5e6 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8019a56:	f003 bdd6 	b.w	801d606 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08019a5c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8019a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a60:	ed2d 8b04 	vpush	{d8-d9}
 8019a64:	4604      	mov	r4, r0
 8019a66:	469b      	mov	fp, r3
 8019a68:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8019a6c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019a70:	f9b1 6000 	ldrsh.w	r6, [r1]
 8019a74:	8888      	ldrh	r0, [r1, #4]
 8019a76:	b0b3      	sub	sp, #204	; 0xcc
 8019a78:	4430      	add	r0, r6
 8019a7a:	b280      	uxth	r0, r0
 8019a7c:	9206      	str	r2, [sp, #24]
 8019a7e:	fa0f fe80 	sxth.w	lr, r0
 8019a82:	2200      	movs	r2, #0
 8019a84:	4596      	cmp	lr, r2
 8019a86:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 8019a8a:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 8019a8e:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 8019a92:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 8019a94:	9211      	str	r2, [sp, #68]	; 0x44
 8019a96:	f340 8129 	ble.w	8019cec <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8019a9a:	45b4      	cmp	ip, r6
 8019a9c:	f340 8126 	ble.w	8019cec <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8019aa0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019aa4:	88ca      	ldrh	r2, [r1, #6]
 8019aa6:	442a      	add	r2, r5
 8019aa8:	b292      	uxth	r2, r2
 8019aaa:	b211      	sxth	r1, r2
 8019aac:	2900      	cmp	r1, #0
 8019aae:	f340 811d 	ble.w	8019cec <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8019ab2:	42ab      	cmp	r3, r5
 8019ab4:	f340 811a 	ble.w	8019cec <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8019ab8:	45f4      	cmp	ip, lr
 8019aba:	bfb8      	it	lt
 8019abc:	fa1f f08c 	uxthlt.w	r0, ip
 8019ac0:	428b      	cmp	r3, r1
 8019ac2:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8019ac6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019aca:	bfb8      	it	lt
 8019acc:	b29a      	uxthlt	r2, r3
 8019ace:	1b80      	subs	r0, r0, r6
 8019ad0:	1b52      	subs	r2, r2, r5
 8019ad2:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8019ad6:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8019ada:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8019ade:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8019ae2:	ab11      	add	r3, sp, #68	; 0x44
 8019ae4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019ae8:	6822      	ldr	r2, [r4, #0]
 8019aea:	9307      	str	r3, [sp, #28]
 8019aec:	ad13      	add	r5, sp, #76	; 0x4c
 8019aee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019af0:	e885 0003 	stmia.w	r5, {r0, r1}
 8019af4:	4629      	mov	r1, r5
 8019af6:	4620      	mov	r0, r4
 8019af8:	4790      	blx	r2
 8019afa:	4621      	mov	r1, r4
 8019afc:	a815      	add	r0, sp, #84	; 0x54
 8019afe:	f003 fccd 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b02:	a815      	add	r0, sp, #84	; 0x54
 8019b04:	f002 faae 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b08:	9b07      	ldr	r3, [sp, #28]
 8019b0a:	1d26      	adds	r6, r4, #4
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	4631      	mov	r1, r6
 8019b10:	f002 faec 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019b14:	4628      	mov	r0, r5
 8019b16:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8019b1a:	f002 faa3 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b1e:	4628      	mov	r0, r5
 8019b20:	f006 f968 	bl	801fdf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019b24:	9007      	str	r0, [sp, #28]
 8019b26:	2800      	cmp	r0, #0
 8019b28:	f000 80db 	beq.w	8019ce2 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8019b2c:	f8db 2000 	ldr.w	r2, [fp]
 8019b30:	9209      	str	r2, [sp, #36]	; 0x24
 8019b32:	f8db 2004 	ldr.w	r2, [fp, #4]
 8019b36:	920a      	str	r2, [sp, #40]	; 0x28
 8019b38:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019b3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8019b3e:	f8db 200c 	ldr.w	r2, [fp, #12]
 8019b42:	920c      	str	r2, [sp, #48]	; 0x30
 8019b44:	f8da 2000 	ldr.w	r2, [sl]
 8019b48:	920d      	str	r2, [sp, #52]	; 0x34
 8019b4a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8019b4e:	920e      	str	r2, [sp, #56]	; 0x38
 8019b50:	f8da 2008 	ldr.w	r2, [sl, #8]
 8019b54:	920f      	str	r2, [sp, #60]	; 0x3c
 8019b56:	f8da 200c 	ldr.w	r2, [sl, #12]
 8019b5a:	9210      	str	r2, [sp, #64]	; 0x40
 8019b5c:	a90d      	add	r1, sp, #52	; 0x34
 8019b5e:	4632      	mov	r2, r6
 8019b60:	a809      	add	r0, sp, #36	; 0x24
 8019b62:	f002 faa7 	bl	801c0b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8019b66:	4632      	mov	r2, r6
 8019b68:	a90e      	add	r1, sp, #56	; 0x38
 8019b6a:	a80a      	add	r0, sp, #40	; 0x28
 8019b6c:	f002 faa2 	bl	801c0b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8019b70:	4632      	mov	r2, r6
 8019b72:	a90f      	add	r1, sp, #60	; 0x3c
 8019b74:	a80b      	add	r0, sp, #44	; 0x2c
 8019b76:	f002 fa9d 	bl	801c0b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8019b7a:	4632      	mov	r2, r6
 8019b7c:	a910      	add	r1, sp, #64	; 0x40
 8019b7e:	a80c      	add	r0, sp, #48	; 0x30
 8019b80:	f002 fa98 	bl	801c0b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8019b84:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8019b88:	edd7 4a00 	vldr	s9, [r7]
 8019b8c:	edd7 5a01 	vldr	s11, [r7, #4]
 8019b90:	ed98 4a00 	vldr	s8, [r8]
 8019b94:	ed98 5a01 	vldr	s10, [r8, #4]
 8019b98:	ed99 9a00 	vldr	s18, [r9]
 8019b9c:	ed99 8a01 	vldr	s16, [r9, #4]
 8019ba0:	edd9 8a02 	vldr	s17, [r9, #8]
 8019ba4:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8019ba8:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8019bac:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 8019bb0:	eef0 6a67 	vmov.f32	s13, s15
 8019bb4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8019bb8:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 8019bbc:	eeb0 7a67 	vmov.f32	s14, s15
 8019bc0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8019bc4:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8019bc8:	eeb0 6a67 	vmov.f32	s12, s15
 8019bcc:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019bd0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8019bd4:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 8019bd8:	ee16 6a10 	vmov	r6, s12
 8019bdc:	eeb0 6a67 	vmov.f32	s12, s15
 8019be0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019be4:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8019be8:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8019bec:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8019bf0:	68ff      	ldr	r7, [r7, #12]
 8019bf2:	9624      	str	r6, [sp, #144]	; 0x90
 8019bf4:	ee16 0a10 	vmov	r0, s12
 8019bf8:	eeb0 6a67 	vmov.f32	s12, s15
 8019bfc:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019c00:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8019c04:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 8019c08:	ee16 1a10 	vmov	r1, s12
 8019c0c:	eeb0 6a67 	vmov.f32	s12, s15
 8019c10:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019c14:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8019c18:	ee16 2a10 	vmov	r2, s12
 8019c1c:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8019c20:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8019c24:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8019c28:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8019c2c:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019c30:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8019c34:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8019c38:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8019c3c:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 8019c40:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 8019c44:	922d      	str	r2, [sp, #180]	; 0xb4
 8019c46:	4a2b      	ldr	r2, [pc, #172]	; (8019cf4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8019c48:	9b06      	ldr	r3, [sp, #24]
 8019c4a:	8812      	ldrh	r2, [r2, #0]
 8019c4c:	9317      	str	r3, [sp, #92]	; 0x5c
 8019c4e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8019c52:	9b07      	ldr	r3, [sp, #28]
 8019c54:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 8019c58:	4628      	mov	r0, r5
 8019c5a:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 8019c5e:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 8019c62:	9218      	str	r2, [sp, #96]	; 0x60
 8019c64:	9319      	str	r3, [sp, #100]	; 0x64
 8019c66:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 8019c6a:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8019c6e:	9731      	str	r7, [sp, #196]	; 0xc4
 8019c70:	f006 f8f2 	bl	801fe58 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019c74:	901a      	str	r0, [sp, #104]	; 0x68
 8019c76:	4628      	mov	r0, r5
 8019c78:	f005 ffb4 	bl	801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c7c:	901b      	str	r0, [sp, #108]	; 0x6c
 8019c7e:	4628      	mov	r0, r5
 8019c80:	f005 ffea 	bl	801fc58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c84:	901c      	str	r0, [sp, #112]	; 0x70
 8019c86:	4628      	mov	r0, r5
 8019c88:	f005 ffac 	bl	801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c8c:	eeb4 9a48 	vcmp.f32	s18, s16
 8019c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c94:	901d      	str	r0, [sp, #116]	; 0x74
 8019c96:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 8019c9a:	d107      	bne.n	8019cac <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8019c9c:	eeb4 8a68 	vcmp.f32	s16, s17
 8019ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ca8:	bf08      	it	eq
 8019caa:	461e      	moveq	r6, r3
 8019cac:	4b12      	ldr	r3, [pc, #72]	; (8019cf8 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019cb4:	b10a      	cbz	r2, 8019cba <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 8019cb6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8019cb8:	b905      	cbnz	r5, 8019cbc <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8019cba:	689d      	ldr	r5, [r3, #8]
 8019cbc:	682b      	ldr	r3, [r5, #0]
 8019cbe:	4620      	mov	r0, r4
 8019cc0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8019cc2:	f7ff fec1 	bl	8019a48 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 8019cc6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019cca:	9604      	str	r6, [sp, #16]
 8019ccc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8019cd0:	ab13      	add	r3, sp, #76	; 0x4c
 8019cd2:	9301      	str	r3, [sp, #4]
 8019cd4:	ab15      	add	r3, sp, #84	; 0x54
 8019cd6:	9300      	str	r3, [sp, #0]
 8019cd8:	aa1e      	add	r2, sp, #120	; 0x78
 8019cda:	ab19      	add	r3, sp, #100	; 0x64
 8019cdc:	a917      	add	r1, sp, #92	; 0x5c
 8019cde:	4628      	mov	r0, r5
 8019ce0:	47b8      	blx	r7
 8019ce2:	b033      	add	sp, #204	; 0xcc
 8019ce4:	ecbd 8b04 	vpop	{d8-d9}
 8019ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cec:	2300      	movs	r3, #0
 8019cee:	9312      	str	r3, [sp, #72]	; 0x48
 8019cf0:	e6f7      	b.n	8019ae2 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8019cf2:	bf00      	nop
 8019cf4:	2000981a 	.word	0x2000981a
 8019cf8:	20009820 	.word	0x20009820

08019cfc <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8019cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d00:	ed2d 8b02 	vpush	{d8}
 8019d04:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019d08:	b098      	sub	sp, #96	; 0x60
 8019d0a:	4604      	mov	r4, r0
 8019d0c:	4688      	mov	r8, r1
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d077      	beq.n	8019e02 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8019d12:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019d16:	4628      	mov	r0, r5
 8019d18:	f005 ff64 	bl	801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019d1c:	ee07 0a90 	vmov	s15, r0
 8019d20:	4628      	mov	r0, r5
 8019d22:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8019d26:	f005 ff97 	bl	801fc58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019d2a:	4b4e      	ldr	r3, [pc, #312]	; (8019e64 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8019d2c:	781b      	ldrb	r3, [r3, #0]
 8019d2e:	ee07 0a90 	vmov	s15, r0
 8019d32:	2b01      	cmp	r3, #1
 8019d34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8019d38:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019d3c:	d066      	beq.n	8019e0c <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8019d3e:	eeb0 6a47 	vmov.f32	s12, s14
 8019d42:	ee17 3a10 	vmov	r3, s14
 8019d46:	eeb0 4a48 	vmov.f32	s8, s16
 8019d4a:	eeb0 7a48 	vmov.f32	s14, s16
 8019d4e:	eef0 4a67 	vmov.f32	s9, s15
 8019d52:	eeb0 8a67 	vmov.f32	s16, s15
 8019d56:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 8019d5a:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8019d5e:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 8019d62:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 8019d66:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 8019d6a:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 8019d6e:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8019d70:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8019d72:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8019d74:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 8019d78:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8019d7c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8019d80:	ee73 1a65 	vsub.f32	s3, s6, s11
 8019d84:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8019d88:	ee32 1a45 	vsub.f32	s2, s4, s10
 8019d8c:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8019d90:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8019d94:	eee1 6a21 	vfma.f32	s13, s2, s3
 8019d98:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8019d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019da0:	dd3d      	ble.n	8019e1e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8019da2:	ed8d 5a04 	vstr	s10, [sp, #16]
 8019da6:	ed8d 2a05 	vstr	s4, [sp, #20]
 8019daa:	edcd 2a06 	vstr	s5, [sp, #24]
 8019dae:	f8cd c01c 	str.w	ip, [sp, #28]
 8019db2:	edcd 5a08 	vstr	s11, [sp, #32]
 8019db6:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 8019dba:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 8019dbe:	970b      	str	r7, [sp, #44]	; 0x2c
 8019dc0:	960c      	str	r6, [sp, #48]	; 0x30
 8019dc2:	950d      	str	r5, [sp, #52]	; 0x34
 8019dc4:	920e      	str	r2, [sp, #56]	; 0x38
 8019dc6:	900f      	str	r0, [sp, #60]	; 0x3c
 8019dc8:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8019dcc:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 8019dd0:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8019dd4:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 8019dd8:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 8019ddc:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8019de0:	9316      	str	r3, [sp, #88]	; 0x58
 8019de2:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 8019de6:	ab14      	add	r3, sp, #80	; 0x50
 8019de8:	9303      	str	r3, [sp, #12]
 8019dea:	ab10      	add	r3, sp, #64	; 0x40
 8019dec:	9302      	str	r3, [sp, #8]
 8019dee:	ab0c      	add	r3, sp, #48	; 0x30
 8019df0:	9301      	str	r3, [sp, #4]
 8019df2:	ab08      	add	r3, sp, #32
 8019df4:	9300      	str	r3, [sp, #0]
 8019df6:	2200      	movs	r2, #0
 8019df8:	ab04      	add	r3, sp, #16
 8019dfa:	4641      	mov	r1, r8
 8019dfc:	4620      	mov	r0, r4
 8019dfe:	f7ff fe2d 	bl	8019a5c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8019e02:	b018      	add	sp, #96	; 0x60
 8019e04:	ecbd 8b02 	vpop	{d8}
 8019e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e0c:	eeb0 6a48 	vmov.f32	s12, s16
 8019e10:	eef0 4a47 	vmov.f32	s9, s14
 8019e14:	ee17 3a90 	vmov	r3, s15
 8019e18:	eeb0 4a67 	vmov.f32	s8, s15
 8019e1c:	e79b      	b.n	8019d56 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8019e1e:	ed8d 5a05 	vstr	s10, [sp, #20]
 8019e22:	ed8d 2a04 	vstr	s4, [sp, #16]
 8019e26:	f8cd c018 	str.w	ip, [sp, #24]
 8019e2a:	edcd 2a07 	vstr	s5, [sp, #28]
 8019e2e:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8019e32:	ed8d 3a08 	vstr	s6, [sp, #32]
 8019e36:	970a      	str	r7, [sp, #40]	; 0x28
 8019e38:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8019e3c:	960d      	str	r6, [sp, #52]	; 0x34
 8019e3e:	950c      	str	r5, [sp, #48]	; 0x30
 8019e40:	900e      	str	r0, [sp, #56]	; 0x38
 8019e42:	920f      	str	r2, [sp, #60]	; 0x3c
 8019e44:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8019e48:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8019e4c:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8019e50:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8019e54:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8019e58:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8019e5c:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8019e60:	9317      	str	r3, [sp, #92]	; 0x5c
 8019e62:	e7c0      	b.n	8019de6 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8019e64:	20009818 	.word	0x20009818

08019e68 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8019e68:	2200      	movs	r2, #0
 8019e6a:	8002      	strh	r2, [r0, #0]
 8019e6c:	8042      	strh	r2, [r0, #2]
 8019e6e:	8082      	strh	r2, [r0, #4]
 8019e70:	80c2      	strh	r2, [r0, #6]
 8019e72:	4770      	bx	lr

08019e74 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8019e74:	b570      	push	{r4, r5, r6, lr}
 8019e76:	6803      	ldr	r3, [r0, #0]
 8019e78:	4604      	mov	r4, r0
 8019e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e7c:	4615      	mov	r5, r2
 8019e7e:	4798      	blx	r3
 8019e80:	6823      	ldr	r3, [r4, #0]
 8019e82:	4629      	mov	r1, r5
 8019e84:	4620      	mov	r0, r4
 8019e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e8c:	4718      	bx	r3
	...

08019e90 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8019e90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019e92:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019e98:	4299      	cmp	r1, r3
 8019e9a:	d029      	beq.n	8019ef0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8019e9c:	4b15      	ldr	r3, [pc, #84]	; (8019ef4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	b92b      	cbnz	r3, 8019eae <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8019ea2:	4b15      	ldr	r3, [pc, #84]	; (8019ef8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8019ea4:	4a15      	ldr	r2, [pc, #84]	; (8019efc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019ea6:	21ae      	movs	r1, #174	; 0xae
 8019ea8:	4815      	ldr	r0, [pc, #84]	; (8019f00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8019eaa:	f014 f9b3 	bl	802e214 <__assert_func>
 8019eae:	4a15      	ldr	r2, [pc, #84]	; (8019f04 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8019eb0:	8812      	ldrh	r2, [r2, #0]
 8019eb2:	428a      	cmp	r2, r1
 8019eb4:	d803      	bhi.n	8019ebe <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8019eb6:	4b14      	ldr	r3, [pc, #80]	; (8019f08 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8019eb8:	4a10      	ldr	r2, [pc, #64]	; (8019efc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019eba:	21af      	movs	r1, #175	; 0xaf
 8019ebc:	e7f4      	b.n	8019ea8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8019ebe:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019ec2:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019ec6:	4b11      	ldr	r3, [pc, #68]	; (8019f0c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8019ec8:	7854      	ldrb	r4, [r2, #1]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019ed0:	682b      	ldr	r3, [r5, #0]
 8019ed2:	69de      	ldr	r6, [r3, #28]
 8019ed4:	4b0e      	ldr	r3, [pc, #56]	; (8019f10 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8019ed6:	6818      	ldr	r0, [r3, #0]
 8019ed8:	f7fa fc4e 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 8019edc:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	4602      	mov	r2, r0
 8019ee4:	9300      	str	r3, [sp, #0]
 8019ee6:	4621      	mov	r1, r4
 8019ee8:	4628      	mov	r0, r5
 8019eea:	47b0      	blx	r6
 8019eec:	b002      	add	sp, #8
 8019eee:	bd70      	pop	{r4, r5, r6, pc}
 8019ef0:	2000      	movs	r0, #0
 8019ef2:	e7fb      	b.n	8019eec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8019ef4:	20009870 	.word	0x20009870
 8019ef8:	08031cc4 	.word	0x08031cc4
 8019efc:	08031dfc 	.word	0x08031dfc
 8019f00:	08031d06 	.word	0x08031d06
 8019f04:	20009874 	.word	0x20009874
 8019f08:	08031d2f 	.word	0x08031d2f
 8019f0c:	20009878 	.word	0x20009878
 8019f10:	2000987c 	.word	0x2000987c

08019f14 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8019f14:	b570      	push	{r4, r5, r6, lr}
 8019f16:	6803      	ldr	r3, [r0, #0]
 8019f18:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019f1a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8019f1c:	4b11      	ldr	r3, [pc, #68]	; (8019f64 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	4604      	mov	r4, r0
 8019f22:	b28d      	uxth	r5, r1
 8019f24:	b92b      	cbnz	r3, 8019f32 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8019f26:	4b10      	ldr	r3, [pc, #64]	; (8019f68 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8019f28:	4a10      	ldr	r2, [pc, #64]	; (8019f6c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019f2a:	21ae      	movs	r1, #174	; 0xae
 8019f2c:	4810      	ldr	r0, [pc, #64]	; (8019f70 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8019f2e:	f014 f971 	bl	802e214 <__assert_func>
 8019f32:	4910      	ldr	r1, [pc, #64]	; (8019f74 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019f34:	8809      	ldrh	r1, [r1, #0]
 8019f36:	4291      	cmp	r1, r2
 8019f38:	d803      	bhi.n	8019f42 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8019f3a:	4b0f      	ldr	r3, [pc, #60]	; (8019f78 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8019f3c:	4a0b      	ldr	r2, [pc, #44]	; (8019f6c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019f3e:	21af      	movs	r1, #175	; 0xaf
 8019f40:	e7f4      	b.n	8019f2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8019f42:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019f46:	4b0d      	ldr	r3, [pc, #52]	; (8019f7c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019f4e:	6803      	ldr	r3, [r0, #0]
 8019f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f52:	4798      	blx	r3
 8019f54:	1a29      	subs	r1, r5, r0
 8019f56:	4633      	mov	r3, r6
 8019f58:	4620      	mov	r0, r4
 8019f5a:	b209      	sxth	r1, r1
 8019f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f60:	4718      	bx	r3
 8019f62:	bf00      	nop
 8019f64:	20009870 	.word	0x20009870
 8019f68:	08031cc4 	.word	0x08031cc4
 8019f6c:	08031dfc 	.word	0x08031dfc
 8019f70:	08031d06 	.word	0x08031d06
 8019f74:	20009874 	.word	0x20009874
 8019f78:	08031d2f 	.word	0x08031d2f
 8019f7c:	20009878 	.word	0x20009878

08019f80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f84:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f8a:	4293      	cmp	r3, r2
 8019f8c:	b08c      	sub	sp, #48	; 0x30
 8019f8e:	4604      	mov	r4, r0
 8019f90:	4688      	mov	r8, r1
 8019f92:	d05f      	beq.n	801a054 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019f94:	4e31      	ldr	r6, [pc, #196]	; (801a05c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8019f96:	6832      	ldr	r2, [r6, #0]
 8019f98:	b92a      	cbnz	r2, 8019fa6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8019f9a:	4b31      	ldr	r3, [pc, #196]	; (801a060 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8019f9c:	4a31      	ldr	r2, [pc, #196]	; (801a064 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019f9e:	21ae      	movs	r1, #174	; 0xae
 8019fa0:	4831      	ldr	r0, [pc, #196]	; (801a068 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8019fa2:	f014 f937 	bl	802e214 <__assert_func>
 8019fa6:	4d31      	ldr	r5, [pc, #196]	; (801a06c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8019fa8:	8829      	ldrh	r1, [r5, #0]
 8019faa:	4299      	cmp	r1, r3
 8019fac:	d803      	bhi.n	8019fb6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8019fae:	4b30      	ldr	r3, [pc, #192]	; (801a070 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8019fb0:	4a2c      	ldr	r2, [pc, #176]	; (801a064 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019fb2:	21af      	movs	r1, #175	; 0xaf
 8019fb4:	e7f4      	b.n	8019fa0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8019fb6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019fba:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019fbe:	4b2d      	ldr	r3, [pc, #180]	; (801a074 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019fc6:	2a00      	cmp	r2, #0
 8019fc8:	d044      	beq.n	801a054 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019fca:	784b      	ldrb	r3, [r1, #1]
 8019fcc:	9207      	str	r2, [sp, #28]
 8019fce:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019fd2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019fd6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019fda:	4b27      	ldr	r3, [pc, #156]	; (801a078 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8019fdc:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019fe6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019fea:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8019fee:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8019ff2:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019ff6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019ff8:	f88d a020 	strb.w	sl, [sp, #32]
 8019ffc:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801a000:	9009      	str	r0, [sp, #36]	; 0x24
 801a002:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801a006:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801a00a:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801a00e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801a012:	b10a      	cbz	r2, 801a018 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 801a014:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801a016:	b907      	cbnz	r7, 801a01a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801a018:	689f      	ldr	r7, [r3, #8]
 801a01a:	f10d 0914 	add.w	r9, sp, #20
 801a01e:	4621      	mov	r1, r4
 801a020:	4648      	mov	r0, r9
 801a022:	f003 fa3b 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a026:	6833      	ldr	r3, [r6, #0]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d0b6      	beq.n	8019f9a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801a02c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a02e:	882b      	ldrh	r3, [r5, #0]
 801a030:	428b      	cmp	r3, r1
 801a032:	d9bc      	bls.n	8019fae <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 801a034:	4b11      	ldr	r3, [pc, #68]	; (801a07c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801a036:	6818      	ldr	r0, [r3, #0]
 801a038:	f7fa fb9e 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 801a03c:	2300      	movs	r3, #0
 801a03e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801a042:	ab07      	add	r3, sp, #28
 801a044:	9001      	str	r0, [sp, #4]
 801a046:	9300      	str	r3, [sp, #0]
 801a048:	e899 0006 	ldmia.w	r9, {r1, r2}
 801a04c:	4643      	mov	r3, r8
 801a04e:	4638      	mov	r0, r7
 801a050:	f7fa fb23 	bl	801469a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a054:	b00c      	add	sp, #48	; 0x30
 801a056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a05a:	bf00      	nop
 801a05c:	20009870 	.word	0x20009870
 801a060:	08031cc4 	.word	0x08031cc4
 801a064:	08031dfc 	.word	0x08031dfc
 801a068:	08031d06 	.word	0x08031d06
 801a06c:	20009874 	.word	0x20009874
 801a070:	08031d2f 	.word	0x08031d2f
 801a074:	20009878 	.word	0x20009878
 801a078:	20009820 	.word	0x20009820
 801a07c:	2000987c 	.word	0x2000987c

0801a080 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801a080:	b40e      	push	{r1, r2, r3}
 801a082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a086:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a08c:	4293      	cmp	r3, r2
 801a08e:	b09c      	sub	sp, #112	; 0x70
 801a090:	4604      	mov	r4, r0
 801a092:	d06b      	beq.n	801a16c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801a094:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801a180 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801a098:	aa26      	add	r2, sp, #152	; 0x98
 801a09a:	9202      	str	r2, [sp, #8]
 801a09c:	f8da 2000 	ldr.w	r2, [sl]
 801a0a0:	b92a      	cbnz	r2, 801a0ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801a0a2:	4b33      	ldr	r3, [pc, #204]	; (801a170 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801a0a4:	4a33      	ldr	r2, [pc, #204]	; (801a174 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801a0a6:	21ae      	movs	r1, #174	; 0xae
 801a0a8:	4833      	ldr	r0, [pc, #204]	; (801a178 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 801a0aa:	f014 f8b3 	bl	802e214 <__assert_func>
 801a0ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801a184 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 801a0b2:	f8b8 1000 	ldrh.w	r1, [r8]
 801a0b6:	4299      	cmp	r1, r3
 801a0b8:	d803      	bhi.n	801a0c2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801a0ba:	4b30      	ldr	r3, [pc, #192]	; (801a17c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 801a0bc:	4a2d      	ldr	r2, [pc, #180]	; (801a174 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801a0be:	21af      	movs	r1, #175	; 0xaf
 801a0c0:	e7f2      	b.n	801a0a8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801a0c2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801a188 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 801a0c6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a0ca:	f8d9 3000 	ldr.w	r3, [r9]
 801a0ce:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801a0d2:	682b      	ldr	r3, [r5, #0]
 801a0d4:	4628      	mov	r0, r5
 801a0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a0d8:	4798      	blx	r3
 801a0da:	4606      	mov	r6, r0
 801a0dc:	b207      	sxth	r7, r0
 801a0de:	a803      	add	r0, sp, #12
 801a0e0:	f003 fe6b 	bl	801ddba <_ZN8touchgfx12TextProviderC1Ev>
 801a0e4:	682b      	ldr	r3, [r5, #0]
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0ea:	4798      	blx	r3
 801a0ec:	682b      	ldr	r3, [r5, #0]
 801a0ee:	4683      	mov	fp, r0
 801a0f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a0f2:	4628      	mov	r0, r5
 801a0f4:	4798      	blx	r3
 801a0f6:	465b      	mov	r3, fp
 801a0f8:	9000      	str	r0, [sp, #0]
 801a0fa:	9925      	ldr	r1, [sp, #148]	; 0x94
 801a0fc:	9a02      	ldr	r2, [sp, #8]
 801a0fe:	a803      	add	r0, sp, #12
 801a100:	f003 feae 	bl	801de60 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a104:	f8da 3000 	ldr.w	r3, [sl]
 801a108:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d0c8      	beq.n	801a0a2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801a110:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801a112:	f8b8 0000 	ldrh.w	r0, [r8]
 801a116:	4290      	cmp	r0, r2
 801a118:	d9cf      	bls.n	801a0ba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801a11a:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 801a11e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801a122:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801a126:	786a      	ldrb	r2, [r5, #1]
 801a128:	8925      	ldrh	r5, [r4, #8]
 801a12a:	f8d9 3000 	ldr.w	r3, [r9]
 801a12e:	eba5 050c 	sub.w	r5, r5, ip
 801a132:	b22d      	sxth	r5, r5
 801a134:	9500      	str	r5, [sp, #0]
 801a136:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a13a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801a13e:	a803      	add	r0, sp, #12
 801a140:	f001 fcac 	bl	801ba9c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801a144:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801a148:	18b9      	adds	r1, r7, r2
 801a14a:	2900      	cmp	r1, #0
 801a14c:	b203      	sxth	r3, r0
 801a14e:	dd0b      	ble.n	801a168 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 801a150:	3b01      	subs	r3, #1
 801a152:	fb13 f302 	smulbb	r3, r3, r2
 801a156:	fb16 3300 	smlabb	r3, r6, r0, r3
 801a15a:	b21f      	sxth	r7, r3
 801a15c:	4638      	mov	r0, r7
 801a15e:	b01c      	add	sp, #112	; 0x70
 801a160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a164:	b003      	add	sp, #12
 801a166:	4770      	bx	lr
 801a168:	2b00      	cmp	r3, #0
 801a16a:	dcf7      	bgt.n	801a15c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801a16c:	2700      	movs	r7, #0
 801a16e:	e7f5      	b.n	801a15c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801a170:	08031cc4 	.word	0x08031cc4
 801a174:	08031dfc 	.word	0x08031dfc
 801a178:	08031d06 	.word	0x08031d06
 801a17c:	08031d2f 	.word	0x08031d2f
 801a180:	20009870 	.word	0x20009870
 801a184:	20009874 	.word	0x20009874
 801a188:	20009878 	.word	0x20009878

0801a18c <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801a18c:	b570      	push	{r4, r5, r6, lr}
 801a18e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a194:	4299      	cmp	r1, r3
 801a196:	4604      	mov	r4, r0
 801a198:	d01e      	beq.n	801a1d8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801a19a:	6803      	ldr	r3, [r0, #0]
 801a19c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801a19e:	4b0f      	ldr	r3, [pc, #60]	; (801a1dc <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	b92b      	cbnz	r3, 801a1b0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801a1a4:	4b0e      	ldr	r3, [pc, #56]	; (801a1e0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801a1a6:	4a0f      	ldr	r2, [pc, #60]	; (801a1e4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801a1a8:	21ae      	movs	r1, #174	; 0xae
 801a1aa:	480f      	ldr	r0, [pc, #60]	; (801a1e8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801a1ac:	f014 f832 	bl	802e214 <__assert_func>
 801a1b0:	4b0e      	ldr	r3, [pc, #56]	; (801a1ec <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801a1b2:	881b      	ldrh	r3, [r3, #0]
 801a1b4:	428b      	cmp	r3, r1
 801a1b6:	d803      	bhi.n	801a1c0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801a1b8:	4b0d      	ldr	r3, [pc, #52]	; (801a1f0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801a1ba:	4a0a      	ldr	r2, [pc, #40]	; (801a1e4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801a1bc:	21af      	movs	r1, #175	; 0xaf
 801a1be:	e7f4      	b.n	801a1aa <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801a1c0:	4b0c      	ldr	r3, [pc, #48]	; (801a1f4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801a1c2:	6818      	ldr	r0, [r3, #0]
 801a1c4:	f7fa fad8 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	4601      	mov	r1, r0
 801a1cc:	46ac      	mov	ip, r5
 801a1ce:	4620      	mov	r0, r4
 801a1d0:	461a      	mov	r2, r3
 801a1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a1d6:	4760      	bx	ip
 801a1d8:	2000      	movs	r0, #0
 801a1da:	bd70      	pop	{r4, r5, r6, pc}
 801a1dc:	20009870 	.word	0x20009870
 801a1e0:	08031cc4 	.word	0x08031cc4
 801a1e4:	08031dfc 	.word	0x08031dfc
 801a1e8:	08031d06 	.word	0x08031d06
 801a1ec:	20009874 	.word	0x20009874
 801a1f0:	08031d2f 	.word	0x08031d2f
 801a1f4:	2000987c 	.word	0x2000987c

0801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801a1f8:	b538      	push	{r3, r4, r5, lr}
 801a1fa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a1fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a200:	429a      	cmp	r2, r3
 801a202:	4604      	mov	r4, r0
 801a204:	d014      	beq.n	801a230 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801a206:	6803      	ldr	r3, [r0, #0]
 801a208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a20a:	4798      	blx	r3
 801a20c:	6823      	ldr	r3, [r4, #0]
 801a20e:	4605      	mov	r5, r0
 801a210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a212:	4620      	mov	r0, r4
 801a214:	4798      	blx	r3
 801a216:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a21a:	b22d      	sxth	r5, r5
 801a21c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801a220:	4601      	mov	r1, r0
 801a222:	bf06      	itte	eq
 801a224:	4602      	moveq	r2, r0
 801a226:	4629      	moveq	r1, r5
 801a228:	462a      	movne	r2, r5
 801a22a:	4620      	mov	r0, r4
 801a22c:	f7f6 f9c0 	bl	80105b0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a230:	bd38      	pop	{r3, r4, r5, pc}

0801a232 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801a232:	888a      	ldrh	r2, [r1, #4]
 801a234:	8582      	strh	r2, [r0, #44]	; 0x2c
 801a236:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801a23a:	b922      	cbnz	r2, 801a246 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801a23c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a240:	b90b      	cbnz	r3, 801a246 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801a242:	f7ff bfd9 	b.w	801a1f8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801a246:	4770      	bx	lr

0801a248 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>:
 801a248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a24c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801a24e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a252:	429a      	cmp	r2, r3
 801a254:	4604      	mov	r4, r0
 801a256:	d054      	beq.n	801a302 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xba>
 801a258:	4b42      	ldr	r3, [pc, #264]	; (801a364 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x11c>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	b92b      	cbnz	r3, 801a26a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x22>
 801a25e:	4b42      	ldr	r3, [pc, #264]	; (801a368 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x120>)
 801a260:	4a42      	ldr	r2, [pc, #264]	; (801a36c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 801a262:	21ae      	movs	r1, #174	; 0xae
 801a264:	4842      	ldr	r0, [pc, #264]	; (801a370 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x128>)
 801a266:	f013 ffd5 	bl	802e214 <__assert_func>
 801a26a:	4942      	ldr	r1, [pc, #264]	; (801a374 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x12c>)
 801a26c:	8809      	ldrh	r1, [r1, #0]
 801a26e:	4291      	cmp	r1, r2
 801a270:	d803      	bhi.n	801a27a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x32>
 801a272:	4b41      	ldr	r3, [pc, #260]	; (801a378 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x130>)
 801a274:	4a3d      	ldr	r2, [pc, #244]	; (801a36c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 801a276:	21af      	movs	r1, #175	; 0xaf
 801a278:	e7f4      	b.n	801a264 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x1c>
 801a27a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801a27e:	f893 9001 	ldrb.w	r9, [r3, #1]
 801a282:	6803      	ldr	r3, [r0, #0]
 801a284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a286:	4798      	blx	r3
 801a288:	6823      	ldr	r3, [r4, #0]
 801a28a:	4680      	mov	r8, r0
 801a28c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a28e:	4620      	mov	r0, r4
 801a290:	4798      	blx	r3
 801a292:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a296:	f009 0903 	and.w	r9, r9, #3
 801a29a:	4605      	mov	r5, r0
 801a29c:	b287      	uxth	r7, r0
 801a29e:	fa0f f688 	sxth.w	r6, r8
 801a2a2:	b1cb      	cbz	r3, 801a2d8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x90>
 801a2a4:	2b02      	cmp	r3, #2
 801a2a6:	d12e      	bne.n	801a306 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xbe>
 801a2a8:	f1b9 0f02 	cmp.w	r9, #2
 801a2ac:	d017      	beq.n	801a2de <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801a2ae:	8920      	ldrh	r0, [r4, #8]
 801a2b0:	88a1      	ldrh	r1, [r4, #4]
 801a2b2:	6822      	ldr	r2, [r4, #0]
 801a2b4:	f1b9 0f01 	cmp.w	r9, #1
 801a2b8:	bf13      	iteet	ne
 801a2ba:	1840      	addne	r0, r0, r1
 801a2bc:	2302      	moveq	r3, #2
 801a2be:	eba0 0008 	subeq.w	r0, r0, r8
 801a2c2:	eba0 0108 	subne.w	r1, r0, r8
 801a2c6:	bf04      	itt	eq
 801a2c8:	fb90 f3f3 	sdiveq	r3, r0, r3
 801a2cc:	18c9      	addeq	r1, r1, r3
 801a2ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801a2d0:	b209      	sxth	r1, r1
 801a2d2:	4620      	mov	r0, r4
 801a2d4:	4790      	blx	r2
 801a2d6:	e002      	b.n	801a2de <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801a2d8:	f1b9 0f00 	cmp.w	r9, #0
 801a2dc:	d1e7      	bne.n	801a2ae <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x66>
 801a2de:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a2e2:	2b02      	cmp	r3, #2
 801a2e4:	d108      	bne.n	801a2f8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb0>
 801a2e6:	88e3      	ldrh	r3, [r4, #6]
 801a2e8:	8961      	ldrh	r1, [r4, #10]
 801a2ea:	4419      	add	r1, r3
 801a2ec:	6823      	ldr	r3, [r4, #0]
 801a2ee:	1bc9      	subs	r1, r1, r7
 801a2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a2f2:	b209      	sxth	r1, r1
 801a2f4:	4620      	mov	r0, r4
 801a2f6:	4798      	blx	r3
 801a2f8:	462a      	mov	r2, r5
 801a2fa:	4631      	mov	r1, r6
 801a2fc:	4620      	mov	r0, r4
 801a2fe:	f7f6 f957 	bl	80105b0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a306:	2b01      	cmp	r3, #1
 801a308:	d112      	bne.n	801a330 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe8>
 801a30a:	f1b9 0f00 	cmp.w	r9, #0
 801a30e:	d114      	bne.n	801a33a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 801a310:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a314:	2b01      	cmp	r3, #1
 801a316:	d108      	bne.n	801a32a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe2>
 801a318:	88a3      	ldrh	r3, [r4, #4]
 801a31a:	8921      	ldrh	r1, [r4, #8]
 801a31c:	4419      	add	r1, r3
 801a31e:	6823      	ldr	r3, [r4, #0]
 801a320:	1bc9      	subs	r1, r1, r7
 801a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a324:	b209      	sxth	r1, r1
 801a326:	4620      	mov	r0, r4
 801a328:	4798      	blx	r3
 801a32a:	4632      	mov	r2, r6
 801a32c:	4629      	mov	r1, r5
 801a32e:	e7e5      	b.n	801a2fc <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb4>
 801a330:	2b03      	cmp	r3, #3
 801a332:	d102      	bne.n	801a33a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 801a334:	f1b9 0f02 	cmp.w	r9, #2
 801a338:	d0ea      	beq.n	801a310 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 801a33a:	8963      	ldrh	r3, [r4, #10]
 801a33c:	88e1      	ldrh	r1, [r4, #6]
 801a33e:	6822      	ldr	r2, [r4, #0]
 801a340:	f1b9 0f01 	cmp.w	r9, #1
 801a344:	bf0b      	itete	eq
 801a346:	2002      	moveq	r0, #2
 801a348:	185b      	addne	r3, r3, r1
 801a34a:	eba3 0308 	subeq.w	r3, r3, r8
 801a34e:	eba3 0108 	subne.w	r1, r3, r8
 801a352:	bf04      	itt	eq
 801a354:	fb93 f0f0 	sdiveq	r0, r3, r0
 801a358:	1809      	addeq	r1, r1, r0
 801a35a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801a35c:	b209      	sxth	r1, r1
 801a35e:	4620      	mov	r0, r4
 801a360:	4790      	blx	r2
 801a362:	e7d5      	b.n	801a310 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 801a364:	20009870 	.word	0x20009870
 801a368:	08031cc4 	.word	0x08031cc4
 801a36c:	08031dfc 	.word	0x08031dfc
 801a370:	08031d06 	.word	0x08031d06
 801a374:	20009874 	.word	0x20009874
 801a378:	08031d2f 	.word	0x08031d2f

0801a37c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a37c:	2300      	movs	r3, #0
 801a37e:	8083      	strh	r3, [r0, #4]
 801a380:	80c3      	strh	r3, [r0, #6]
 801a382:	8003      	strh	r3, [r0, #0]
 801a384:	8043      	strh	r3, [r0, #2]
 801a386:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801a38a:	2bff      	cmp	r3, #255	; 0xff
 801a38c:	bf01      	itttt	eq
 801a38e:	890b      	ldrheq	r3, [r1, #8]
 801a390:	8083      	strheq	r3, [r0, #4]
 801a392:	894b      	ldrheq	r3, [r1, #10]
 801a394:	80c3      	strheq	r3, [r0, #6]
 801a396:	4770      	bx	lr

0801a398 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a39a:	4604      	mov	r4, r0
 801a39c:	6808      	ldr	r0, [r1, #0]
 801a39e:	6849      	ldr	r1, [r1, #4]
 801a3a0:	466b      	mov	r3, sp
 801a3a2:	c303      	stmia	r3!, {r0, r1}
 801a3a4:	6823      	ldr	r3, [r4, #0]
 801a3a6:	4669      	mov	r1, sp
 801a3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3aa:	4620      	mov	r0, r4
 801a3ac:	4798      	blx	r3
 801a3ae:	4b08      	ldr	r3, [pc, #32]	; (801a3d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a3b6:	b10a      	cbz	r2, 801a3bc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a3b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a3ba:	b900      	cbnz	r0, 801a3be <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a3bc:	6898      	ldr	r0, [r3, #8]
 801a3be:	6803      	ldr	r3, [r0, #0]
 801a3c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a3c2:	699d      	ldr	r5, [r3, #24]
 801a3c4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a3c8:	4669      	mov	r1, sp
 801a3ca:	47a8      	blx	r5
 801a3cc:	b003      	add	sp, #12
 801a3ce:	bd30      	pop	{r4, r5, pc}
 801a3d0:	20009820 	.word	0x20009820

0801a3d4 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 801a3d4:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 801a3d8:	600b      	str	r3, [r1, #0]
 801a3da:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 801a3de:	6013      	str	r3, [r2, #0]
 801a3e0:	4770      	bx	lr

0801a3e2 <_ZN8touchgfx5Gauge8setWidthEs>:
 801a3e2:	8101      	strh	r1, [r0, #8]
 801a3e4:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 801a3e8:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 801a3ec:	4770      	bx	lr

0801a3ee <_ZN8touchgfx5Gauge9setHeightEs>:
 801a3ee:	8141      	strh	r1, [r0, #10]
 801a3f0:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 801a3f4:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 801a3f8:	4770      	bx	lr

0801a3fa <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 801a3fa:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801a3fe:	4770      	bx	lr

0801a400 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 801a400:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801a404:	4770      	bx	lr

0801a406 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801a406:	4770      	bx	lr

0801a408 <_ZN8touchgfx5Gauge8setAlphaEh>:
 801a408:	b538      	push	{r3, r4, r5, lr}
 801a40a:	4604      	mov	r4, r0
 801a40c:	460d      	mov	r5, r1
 801a40e:	f7fc fe60 	bl	80170d2 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801a412:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801a416:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
 801a41a:	bd38      	pop	{r3, r4, r5, pc}

0801a41c <_ZN8touchgfx5GaugeC1Ev>:
 801a41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a41e:	4604      	mov	r4, r0
 801a420:	4626      	mov	r6, r4
 801a422:	f7fc ff7b 	bl	801731c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801a426:	4b18      	ldr	r3, [pc, #96]	; (801a488 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 801a428:	f846 3bb4 	str.w	r3, [r6], #180
 801a42c:	a902      	add	r1, sp, #8
 801a42e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a432:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801a436:	4630      	mov	r0, r6
 801a438:	f7ff f818 	bl	801946c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801a43c:	2500      	movs	r5, #0
 801a43e:	2301      	movs	r3, #1
 801a440:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 801a444:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 801a448:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 801a44c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 801a450:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 801a454:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 801a458:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 801a45c:	4638      	mov	r0, r7
 801a45e:	f7fe fa71 	bl	8018944 <_ZN8touchgfx6CircleC1Ev>
 801a462:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801a466:	4620      	mov	r0, r4
 801a468:	f7fc ffe4 	bl	8017434 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801a46c:	4639      	mov	r1, r7
 801a46e:	4620      	mov	r0, r4
 801a470:	f7fd f812 	bl	8017498 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a474:	4620      	mov	r0, r4
 801a476:	4631      	mov	r1, r6
 801a478:	f7fd f80e 	bl	8017498 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a47c:	4620      	mov	r0, r4
 801a47e:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 801a482:	b003      	add	sp, #12
 801a484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a486:	bf00      	nop
 801a488:	08031edc 	.word	0x08031edc

0801a48c <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801a48c:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 801a490:	4770      	bx	lr

0801a492 <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801a492:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 801a496:	4770      	bx	lr

0801a498 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 801a498:	b538      	push	{r3, r4, r5, lr}
 801a49a:	8902      	ldrh	r2, [r0, #8]
 801a49c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a4a0:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 801a4a4:	4604      	mov	r4, r0
 801a4a6:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	4611      	mov	r1, r2
 801a4ae:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 801a4b2:	4628      	mov	r0, r5
 801a4b4:	f7f6 f820 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
 801a4b8:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 801a4bc:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801a4c0:	1a9b      	subs	r3, r3, r2
 801a4c2:	ee07 3a90 	vmov	s15, r3
 801a4c6:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 801a4ca:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 801a4ce:	1a9b      	subs	r3, r3, r2
 801a4d0:	ee07 3a10 	vmov	s14, r3
 801a4d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a4d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a4dc:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 801a4e0:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 801a4e4:	4628      	mov	r0, r5
 801a4e6:	f7ff f80d 	bl	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a4ea:	4b16      	ldr	r3, [pc, #88]	; (801a544 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 801a4ec:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 801a4f0:	4628      	mov	r0, r5
 801a4f2:	f7ff f807 	bl	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a4f6:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801a4fa:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 801a4fe:	ee07 3a90 	vmov	s15, r3
 801a502:	ee07 2a10 	vmov	s14, r2
 801a506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a50a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a50e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 801a512:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801a516:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 801a51a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801a51e:	4628      	mov	r0, r5
 801a520:	f7fe fff0 	bl	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a524:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801a528:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 801a52c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 801a530:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 801a534:	4628      	mov	r0, r5
 801a536:	f7fe ffe5 	bl	8019504 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a53a:	2301      	movs	r3, #1
 801a53c:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801a540:	bd38      	pop	{r3, r4, r5, pc}
 801a542:	bf00      	nop
 801a544:	43960000 	.word	0x43960000

0801a548 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 801a548:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a54a:	4604      	mov	r4, r0
 801a54c:	a802      	add	r0, sp, #8
 801a54e:	4616      	mov	r6, r2
 801a550:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801a554:	461d      	mov	r5, r3
 801a556:	4601      	mov	r1, r0
 801a558:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801a55c:	f7ff f928 	bl	80197b0 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 801a560:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 801a564:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 801a568:	4620      	mov	r0, r4
 801a56a:	f7ff ff95 	bl	801a498 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801a56e:	b002      	add	sp, #8
 801a570:	bd70      	pop	{r4, r5, r6, pc}

0801a572 <_ZN8touchgfx5Gauge9setCenterEii>:
 801a572:	b570      	push	{r4, r5, r6, lr}
 801a574:	4606      	mov	r6, r0
 801a576:	460d      	mov	r5, r1
 801a578:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 801a57c:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 801a580:	4614      	mov	r4, r2
 801a582:	f7ff ff89 	bl	801a498 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801a586:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 801a58a:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 801a58e:	1aa4      	subs	r4, r4, r2
 801a590:	1a6d      	subs	r5, r5, r1
 801a592:	0164      	lsls	r4, r4, #5
 801a594:	016d      	lsls	r5, r5, #5
 801a596:	3410      	adds	r4, #16
 801a598:	3510      	adds	r5, #16
 801a59a:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
 801a59e:	f8c6 418c 	str.w	r4, [r6, #396]	; 0x18c
 801a5a2:	bd70      	pop	{r4, r5, r6, pc}

0801a5a4 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 801a5a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a5a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801a5a8:	0149      	lsls	r1, r1, #5
 801a5aa:	4299      	cmp	r1, r3
 801a5ac:	4604      	mov	r4, r0
 801a5ae:	9101      	str	r1, [sp, #4]
 801a5b0:	d00b      	beq.n	801a5ca <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801a5b2:	4601      	mov	r1, r0
 801a5b4:	aa01      	add	r2, sp, #4
 801a5b6:	a802      	add	r0, sp, #8
 801a5b8:	f7fe fbdd 	bl	8018d76 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 801a5bc:	9b01      	ldr	r3, [sp, #4]
 801a5be:	6423      	str	r3, [r4, #64]	; 0x40
 801a5c0:	6823      	ldr	r3, [r4, #0]
 801a5c2:	a902      	add	r1, sp, #8
 801a5c4:	691b      	ldr	r3, [r3, #16]
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	4798      	blx	r3
 801a5ca:	b004      	add	sp, #16
 801a5cc:	bd10      	pop	{r4, pc}
	...

0801a5d0 <_ZN8touchgfx5Gauge8setValueEi>:
 801a5d0:	b570      	push	{r4, r5, r6, lr}
 801a5d2:	4604      	mov	r4, r0
 801a5d4:	f7fc fdc6 	bl	8017164 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801a5d8:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801a5dc:	429a      	cmp	r2, r3
 801a5de:	bfac      	ite	ge
 801a5e0:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 801a5e4:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 801a5e8:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801a5ec:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 801a5f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801a5f4:	1ac9      	subs	r1, r1, r3
 801a5f6:	2900      	cmp	r1, #0
 801a5f8:	bfb8      	it	lt
 801a5fa:	4249      	neglt	r1, r1
 801a5fc:	b289      	uxth	r1, r1
 801a5fe:	4620      	mov	r0, r4
 801a600:	f7fc fe43 	bl	801728a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801a604:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801a608:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801a60c:	eddf 6a19 	vldr	s13, [pc, #100]	; 801a674 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801a610:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801a678 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 801a614:	429a      	cmp	r2, r3
 801a616:	4605      	mov	r5, r0
 801a618:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 801a61c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801a620:	da15      	bge.n	801a64e <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 801a622:	1b5b      	subs	r3, r3, r5
 801a624:	ee07 3a90 	vmov	s15, r3
 801a628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a62c:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801a630:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801a634:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801a638:	ee21 1a07 	vmul.f32	s2, s2, s14
 801a63c:	f7ff f9b5 	bl	80199aa <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801a640:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801a644:	1b49      	subs	r1, r1, r5
 801a646:	4630      	mov	r0, r6
 801a648:	f7ff ffac 	bl	801a5a4 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 801a64c:	bd70      	pop	{r4, r5, r6, pc}
 801a64e:	442b      	add	r3, r5
 801a650:	ee07 3a90 	vmov	s15, r3
 801a654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a658:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801a65c:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801a660:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801a664:	ee21 1a07 	vmul.f32	s2, s2, s14
 801a668:	f7ff f99f 	bl	80199aa <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801a66c:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801a670:	4429      	add	r1, r5
 801a672:	e7e8      	b.n	801a646 <_ZN8touchgfx5Gauge8setValueEi+0x76>
 801a674:	43340000 	.word	0x43340000
 801a678:	40490fdb 	.word	0x40490fdb

0801a67c <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 801a67c:	4291      	cmp	r1, r2
 801a67e:	b510      	push	{r4, lr}
 801a680:	4604      	mov	r4, r0
 801a682:	d105      	bne.n	801a690 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 801a684:	4b0b      	ldr	r3, [pc, #44]	; (801a6b4 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 801a686:	4a0c      	ldr	r2, [pc, #48]	; (801a6b8 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 801a688:	480c      	ldr	r0, [pc, #48]	; (801a6bc <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 801a68a:	215e      	movs	r1, #94	; 0x5e
 801a68c:	f013 fdc2 	bl	802e214 <__assert_func>
 801a690:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 801a694:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 801a698:	0149      	lsls	r1, r1, #5
 801a69a:	0152      	lsls	r2, r2, #5
 801a69c:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
 801a6a0:	f8c0 2198 	str.w	r2, [r0, #408]	; 0x198
 801a6a4:	f7fc fd12 	bl	80170cc <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 801a6a8:	4601      	mov	r1, r0
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6b0:	f7ff bf8e 	b.w	801a5d0 <_ZN8touchgfx5Gauge8setValueEi>
 801a6b4:	08031e90 	.word	0x08031e90
 801a6b8:	08031fb8 	.word	0x08031fb8
 801a6bc:	08031ea7 	.word	0x08031ea7

0801a6c0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801a6c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a6c2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a6c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a6c8:	4299      	cmp	r1, r3
 801a6ca:	4606      	mov	r6, r0
 801a6cc:	d02a      	beq.n	801a724 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801a6ce:	4b16      	ldr	r3, [pc, #88]	; (801a728 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	b92b      	cbnz	r3, 801a6e0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801a6d4:	4b15      	ldr	r3, [pc, #84]	; (801a72c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801a6d6:	4a16      	ldr	r2, [pc, #88]	; (801a730 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801a6d8:	21ae      	movs	r1, #174	; 0xae
 801a6da:	4816      	ldr	r0, [pc, #88]	; (801a734 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801a6dc:	f013 fd9a 	bl	802e214 <__assert_func>
 801a6e0:	4a15      	ldr	r2, [pc, #84]	; (801a738 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801a6e2:	8812      	ldrh	r2, [r2, #0]
 801a6e4:	428a      	cmp	r2, r1
 801a6e6:	d803      	bhi.n	801a6f0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801a6e8:	4b14      	ldr	r3, [pc, #80]	; (801a73c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801a6ea:	4a11      	ldr	r2, [pc, #68]	; (801a730 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801a6ec:	21af      	movs	r1, #175	; 0xaf
 801a6ee:	e7f4      	b.n	801a6da <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801a6f0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801a6f4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801a6f8:	4b11      	ldr	r3, [pc, #68]	; (801a740 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801a6fa:	7854      	ldrb	r4, [r2, #1]
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801a702:	682b      	ldr	r3, [r5, #0]
 801a704:	69df      	ldr	r7, [r3, #28]
 801a706:	4b0f      	ldr	r3, [pc, #60]	; (801a744 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801a708:	6818      	ldr	r0, [r3, #0]
 801a70a:	f7fa f835 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 801a70e:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801a712:	2300      	movs	r3, #0
 801a714:	9300      	str	r3, [sp, #0]
 801a716:	4602      	mov	r2, r0
 801a718:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801a71a:	4621      	mov	r1, r4
 801a71c:	4628      	mov	r0, r5
 801a71e:	47b8      	blx	r7
 801a720:	b003      	add	sp, #12
 801a722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a724:	2000      	movs	r0, #0
 801a726:	e7fb      	b.n	801a720 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801a728:	20009870 	.word	0x20009870
 801a72c:	08031cc4 	.word	0x08031cc4
 801a730:	0803206c 	.word	0x0803206c
 801a734:	08031d06 	.word	0x08031d06
 801a738:	20009874 	.word	0x20009874
 801a73c:	08031d2f 	.word	0x08031d2f
 801a740:	20009878 	.word	0x20009878
 801a744:	2000987c 	.word	0x2000987c

0801a748 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801a748:	b570      	push	{r4, r5, r6, lr}
 801a74a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a74c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a750:	4299      	cmp	r1, r3
 801a752:	4604      	mov	r4, r0
 801a754:	d01e      	beq.n	801a794 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801a756:	6803      	ldr	r3, [r0, #0]
 801a758:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801a75a:	4b0f      	ldr	r3, [pc, #60]	; (801a798 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	b92b      	cbnz	r3, 801a76c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801a760:	4b0e      	ldr	r3, [pc, #56]	; (801a79c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801a762:	4a0f      	ldr	r2, [pc, #60]	; (801a7a0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a764:	21ae      	movs	r1, #174	; 0xae
 801a766:	480f      	ldr	r0, [pc, #60]	; (801a7a4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801a768:	f013 fd54 	bl	802e214 <__assert_func>
 801a76c:	4b0e      	ldr	r3, [pc, #56]	; (801a7a8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801a76e:	881b      	ldrh	r3, [r3, #0]
 801a770:	428b      	cmp	r3, r1
 801a772:	d803      	bhi.n	801a77c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801a774:	4b0d      	ldr	r3, [pc, #52]	; (801a7ac <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801a776:	4a0a      	ldr	r2, [pc, #40]	; (801a7a0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a778:	21af      	movs	r1, #175	; 0xaf
 801a77a:	e7f4      	b.n	801a766 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801a77c:	4b0c      	ldr	r3, [pc, #48]	; (801a7b0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801a77e:	6818      	ldr	r0, [r3, #0]
 801a780:	f7f9 fffa 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 801a784:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a786:	4601      	mov	r1, r0
 801a788:	46ac      	mov	ip, r5
 801a78a:	4620      	mov	r0, r4
 801a78c:	2300      	movs	r3, #0
 801a78e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a792:	4760      	bx	ip
 801a794:	2000      	movs	r0, #0
 801a796:	bd70      	pop	{r4, r5, r6, pc}
 801a798:	20009870 	.word	0x20009870
 801a79c:	08031cc4 	.word	0x08031cc4
 801a7a0:	0803206c 	.word	0x0803206c
 801a7a4:	08031d06 	.word	0x08031d06
 801a7a8:	20009874 	.word	0x20009874
 801a7ac:	08031d2f 	.word	0x08031d2f
 801a7b0:	2000987c 	.word	0x2000987c

0801a7b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801a7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7b8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a7ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a7be:	4293      	cmp	r3, r2
 801a7c0:	b08c      	sub	sp, #48	; 0x30
 801a7c2:	4604      	mov	r4, r0
 801a7c4:	460e      	mov	r6, r1
 801a7c6:	d05d      	beq.n	801a884 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a7c8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801a8a8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801a7cc:	f8d8 2000 	ldr.w	r2, [r8]
 801a7d0:	b92a      	cbnz	r2, 801a7de <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801a7d2:	4b2e      	ldr	r3, [pc, #184]	; (801a88c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801a7d4:	4a2e      	ldr	r2, [pc, #184]	; (801a890 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a7d6:	21ae      	movs	r1, #174	; 0xae
 801a7d8:	482e      	ldr	r0, [pc, #184]	; (801a894 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801a7da:	f013 fd1b 	bl	802e214 <__assert_func>
 801a7de:	4f2e      	ldr	r7, [pc, #184]	; (801a898 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801a7e0:	8839      	ldrh	r1, [r7, #0]
 801a7e2:	4299      	cmp	r1, r3
 801a7e4:	d803      	bhi.n	801a7ee <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801a7e6:	4b2d      	ldr	r3, [pc, #180]	; (801a89c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801a7e8:	4a29      	ldr	r2, [pc, #164]	; (801a890 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a7ea:	21af      	movs	r1, #175	; 0xaf
 801a7ec:	e7f4      	b.n	801a7d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801a7ee:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a7f2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a7f6:	4b2a      	ldr	r3, [pc, #168]	; (801a8a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a7fe:	2a00      	cmp	r2, #0
 801a800:	d040      	beq.n	801a884 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a802:	784b      	ldrb	r3, [r1, #1]
 801a804:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801a808:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801a80c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801a810:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801a814:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801a818:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a81a:	9207      	str	r2, [sp, #28]
 801a81c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801a820:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a824:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a828:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801a82c:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801a830:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801a834:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a838:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801a83c:	f88d a020 	strb.w	sl, [sp, #32]
 801a840:	9009      	str	r0, [sp, #36]	; 0x24
 801a842:	f7f5 f8ff 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 801a846:	ad05      	add	r5, sp, #20
 801a848:	4681      	mov	r9, r0
 801a84a:	4621      	mov	r1, r4
 801a84c:	4628      	mov	r0, r5
 801a84e:	f002 fe25 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a852:	f8d8 3000 	ldr.w	r3, [r8]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d0bb      	beq.n	801a7d2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801a85a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a85c:	883b      	ldrh	r3, [r7, #0]
 801a85e:	428b      	cmp	r3, r1
 801a860:	d9c1      	bls.n	801a7e6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801a862:	4b10      	ldr	r3, [pc, #64]	; (801a8a4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801a864:	6818      	ldr	r0, [r3, #0]
 801a866:	f7f9 ff87 	bl	8014778 <_ZNK8touchgfx5Texts7getTextEt>
 801a86a:	2300      	movs	r3, #0
 801a86c:	9303      	str	r3, [sp, #12]
 801a86e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a870:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801a874:	ab07      	add	r3, sp, #28
 801a876:	9300      	str	r3, [sp, #0]
 801a878:	e895 0006 	ldmia.w	r5, {r1, r2}
 801a87c:	4633      	mov	r3, r6
 801a87e:	4648      	mov	r0, r9
 801a880:	f7f9 ff0b 	bl	801469a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a884:	b00c      	add	sp, #48	; 0x30
 801a886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a88a:	bf00      	nop
 801a88c:	08031cc4 	.word	0x08031cc4
 801a890:	0803206c 	.word	0x0803206c
 801a894:	08031d06 	.word	0x08031d06
 801a898:	20009874 	.word	0x20009874
 801a89c:	08031d2f 	.word	0x08031d2f
 801a8a0:	20009878 	.word	0x20009878
 801a8a4:	2000987c 	.word	0x2000987c
 801a8a8:	20009870 	.word	0x20009870

0801a8ac <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801a8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8b0:	4604      	mov	r4, r0
 801a8b2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801a8b4:	8962      	ldrh	r2, [r4, #10]
 801a8b6:	b218      	sxth	r0, r3
 801a8b8:	460e      	mov	r6, r1
 801a8ba:	005b      	lsls	r3, r3, #1
 801a8bc:	8921      	ldrh	r1, [r4, #8]
 801a8be:	b29b      	uxth	r3, r3
 801a8c0:	1ac9      	subs	r1, r1, r3
 801a8c2:	b08e      	sub	sp, #56	; 0x38
 801a8c4:	b209      	sxth	r1, r1
 801a8c6:	1ad3      	subs	r3, r2, r3
 801a8c8:	b21b      	sxth	r3, r3
 801a8ca:	2900      	cmp	r1, #0
 801a8cc:	f8ad 0000 	strh.w	r0, [sp]
 801a8d0:	f8ad 0002 	strh.w	r0, [sp, #2]
 801a8d4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a8d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a8dc:	dd5e      	ble.n	801a99c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	dd5c      	ble.n	801a99c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801a8e2:	6830      	ldr	r0, [r6, #0]
 801a8e4:	6871      	ldr	r1, [r6, #4]
 801a8e6:	ab02      	add	r3, sp, #8
 801a8e8:	c303      	stmia	r3!, {r0, r1}
 801a8ea:	4669      	mov	r1, sp
 801a8ec:	a802      	add	r0, sp, #8
 801a8ee:	f7fc ff17 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801a8f2:	4620      	mov	r0, r4
 801a8f4:	a902      	add	r1, sp, #8
 801a8f6:	f7ff fd4f 	bl	801a398 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801a8fa:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801a8fc:	2800      	cmp	r0, #0
 801a8fe:	d05f      	beq.n	801a9c0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801a900:	8963      	ldrh	r3, [r4, #10]
 801a902:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801a906:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a90a:	1a1f      	subs	r7, r3, r0
 801a90c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 801a910:	b202      	sxth	r2, r0
 801a912:	2500      	movs	r5, #0
 801a914:	b21b      	sxth	r3, r3
 801a916:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801a91a:	1a09      	subs	r1, r1, r0
 801a91c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801a920:	9506      	str	r5, [sp, #24]
 801a922:	f8ad 201e 	strh.w	r2, [sp, #30]
 801a926:	f8ad 5020 	strh.w	r5, [sp, #32]
 801a92a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a92e:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 801a932:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a936:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a93a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a93e:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 801a942:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801a946:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a94a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a94e:	af04      	add	r7, sp, #16
 801a950:	ab06      	add	r3, sp, #24
 801a952:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a956:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a95a:	e887 0003 	stmia.w	r7, {r0, r1}
 801a95e:	4631      	mov	r1, r6
 801a960:	4638      	mov	r0, r7
 801a962:	f7fc fedd 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801a966:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	dd12      	ble.n	801a994 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801a96e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a972:	2b00      	cmp	r3, #0
 801a974:	dd0e      	ble.n	801a994 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801a976:	6823      	ldr	r3, [r4, #0]
 801a978:	4639      	mov	r1, r7
 801a97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a97c:	4620      	mov	r0, r4
 801a97e:	4798      	blx	r3
 801a980:	f7f5 f860 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 801a984:	6803      	ldr	r3, [r0, #0]
 801a986:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a988:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801a98c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a990:	4639      	mov	r1, r7
 801a992:	47c0      	blx	r8
 801a994:	3501      	adds	r5, #1
 801a996:	2d04      	cmp	r5, #4
 801a998:	d1da      	bne.n	801a950 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801a99a:	e011      	b.n	801a9c0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801a99c:	6830      	ldr	r0, [r6, #0]
 801a99e:	6871      	ldr	r1, [r6, #4]
 801a9a0:	ab06      	add	r3, sp, #24
 801a9a2:	c303      	stmia	r3!, {r0, r1}
 801a9a4:	6823      	ldr	r3, [r4, #0]
 801a9a6:	a906      	add	r1, sp, #24
 801a9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9aa:	4620      	mov	r0, r4
 801a9ac:	4798      	blx	r3
 801a9ae:	f7f5 f849 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 801a9b2:	6803      	ldr	r3, [r0, #0]
 801a9b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a9b6:	699d      	ldr	r5, [r3, #24]
 801a9b8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a9bc:	a906      	add	r1, sp, #24
 801a9be:	47a8      	blx	r5
 801a9c0:	b00e      	add	sp, #56	; 0x38
 801a9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a9c6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a9c6:	b570      	push	{r4, r5, r6, lr}
 801a9c8:	880b      	ldrh	r3, [r1, #0]
 801a9ca:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a9cc:	4604      	mov	r4, r0
 801a9ce:	4608      	mov	r0, r1
 801a9d0:	460d      	mov	r5, r1
 801a9d2:	f005 f907 	bl	801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a9d6:	4606      	mov	r6, r0
 801a9d8:	4628      	mov	r0, r5
 801a9da:	f005 f93d 	bl	801fc58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a9de:	6823      	ldr	r3, [r4, #0]
 801a9e0:	4605      	mov	r5, r0
 801a9e2:	b231      	sxth	r1, r6
 801a9e4:	4620      	mov	r0, r4
 801a9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a9e8:	4798      	blx	r3
 801a9ea:	6823      	ldr	r3, [r4, #0]
 801a9ec:	b229      	sxth	r1, r5
 801a9ee:	4620      	mov	r0, r4
 801a9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9f6:	4718      	bx	r3

0801a9f8 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a9f8:	b510      	push	{r4, lr}
 801a9fa:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a9fe:	2bff      	cmp	r3, #255	; 0xff
 801aa00:	4604      	mov	r4, r0
 801aa02:	d006      	beq.n	801aa12 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801aa04:	2300      	movs	r3, #0
 801aa06:	8003      	strh	r3, [r0, #0]
 801aa08:	8043      	strh	r3, [r0, #2]
 801aa0a:	8083      	strh	r3, [r0, #4]
 801aa0c:	80c3      	strh	r3, [r0, #6]
 801aa0e:	4620      	mov	r0, r4
 801aa10:	bd10      	pop	{r4, pc}
 801aa12:	3126      	adds	r1, #38	; 0x26
 801aa14:	f005 f95a 	bl	801fccc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801aa18:	e7f9      	b.n	801aa0e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801aa1c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa20:	4604      	mov	r4, r0
 801aa22:	b088      	sub	sp, #32
 801aa24:	f854 3b26 	ldr.w	r3, [r4], #38
 801aa28:	2500      	movs	r5, #0
 801aa2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa2c:	460f      	mov	r7, r1
 801aa2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801aa32:	a904      	add	r1, sp, #16
 801aa34:	4606      	mov	r6, r0
 801aa36:	4798      	blx	r3
 801aa38:	4620      	mov	r0, r4
 801aa3a:	f005 f8d3 	bl	801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801aa3e:	4680      	mov	r8, r0
 801aa40:	4620      	mov	r0, r4
 801aa42:	f005 f909 	bl	801fc58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801aa46:	9506      	str	r5, [sp, #24]
 801aa48:	ad06      	add	r5, sp, #24
 801aa4a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801aa4e:	4639      	mov	r1, r7
 801aa50:	4628      	mov	r0, r5
 801aa52:	f8ad 801c 	strh.w	r8, [sp, #28]
 801aa56:	f7fc fe63 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801aa5a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	dd19      	ble.n	801aa96 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801aa62:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	dd15      	ble.n	801aa96 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801aa6a:	4b0c      	ldr	r3, [pc, #48]	; (801aa9c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801aa72:	b10a      	cbz	r2, 801aa78 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801aa74:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801aa76:	b900      	cbnz	r0, 801aa7a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801aa78:	6898      	ldr	r0, [r3, #8]
 801aa7a:	6801      	ldr	r1, [r0, #0]
 801aa7c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801aa80:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801aa84:	2701      	movs	r7, #1
 801aa86:	9702      	str	r7, [sp, #8]
 801aa88:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801aa8c:	e9cd 5600 	strd	r5, r6, [sp]
 801aa90:	688d      	ldr	r5, [r1, #8]
 801aa92:	4621      	mov	r1, r4
 801aa94:	47a8      	blx	r5
 801aa96:	b008      	add	sp, #32
 801aa98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa9c:	20009820 	.word	0x20009820

0801aaa0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801aaa0:	b510      	push	{r4, lr}
 801aaa2:	6803      	ldr	r3, [r0, #0]
 801aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aaa6:	460c      	mov	r4, r1
 801aaa8:	4798      	blx	r3
 801aaaa:	1b03      	subs	r3, r0, r4
 801aaac:	4258      	negs	r0, r3
 801aaae:	4158      	adcs	r0, r3
 801aab0:	bd10      	pop	{r4, pc}
	...

0801aab4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801aab4:	4b01      	ldr	r3, [pc, #4]	; (801aabc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801aab6:	6019      	str	r1, [r3, #0]
 801aab8:	4770      	bx	lr
 801aaba:	bf00      	nop
 801aabc:	20009828 	.word	0x20009828

0801aac0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac4:	4696      	mov	lr, r2
 801aac6:	4605      	mov	r5, r0
 801aac8:	4614      	mov	r4, r2
 801aaca:	460e      	mov	r6, r1
 801aacc:	461f      	mov	r7, r3
 801aace:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aad2:	b097      	sub	sp, #92	; 0x5c
 801aad4:	f10d 0c1c 	add.w	ip, sp, #28
 801aad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aadc:	f8de 3000 	ldr.w	r3, [lr]
 801aae0:	f8cc 3000 	str.w	r3, [ip]
 801aae4:	f104 0e14 	add.w	lr, r4, #20
 801aae8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801aaec:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801aaf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801aaf4:	f8de 3000 	ldr.w	r3, [lr]
 801aaf8:	f8cc 3000 	str.w	r3, [ip]
 801aafc:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801ab00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ab04:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801ab08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab0c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801ab10:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801ab14:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801ab18:	f8de 3000 	ldr.w	r3, [lr]
 801ab1c:	f8cc 3000 	str.w	r3, [ip]
 801ab20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ab22:	682b      	ldr	r3, [r5, #0]
 801ab24:	9201      	str	r2, [sp, #4]
 801ab26:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801ab2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ab2c:	9200      	str	r2, [sp, #0]
 801ab2e:	f8cd 8008 	str.w	r8, [sp, #8]
 801ab32:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 801ab36:	aa07      	add	r2, sp, #28
 801ab38:	463b      	mov	r3, r7
 801ab3a:	4631      	mov	r1, r6
 801ab3c:	4628      	mov	r0, r5
 801ab3e:	47d8      	blx	fp
 801ab40:	46a6      	mov	lr, r4
 801ab42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ab46:	f10d 0c1c 	add.w	ip, sp, #28
 801ab4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab4e:	f8de 3000 	ldr.w	r3, [lr]
 801ab52:	f8cc 3000 	str.w	r3, [ip]
 801ab56:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801ab5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ab5e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801ab62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab66:	343c      	adds	r4, #60	; 0x3c
 801ab68:	f8de 3000 	ldr.w	r3, [lr]
 801ab6c:	f8cc 3000 	str.w	r3, [ip]
 801ab70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab72:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801ab76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ab7a:	6823      	ldr	r3, [r4, #0]
 801ab7c:	f8cc 3000 	str.w	r3, [ip]
 801ab80:	682b      	ldr	r3, [r5, #0]
 801ab82:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801ab86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ab88:	9201      	str	r2, [sp, #4]
 801ab8a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ab8c:	9200      	str	r2, [sp, #0]
 801ab8e:	f8cd 8008 	str.w	r8, [sp, #8]
 801ab92:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801ab94:	aa07      	add	r2, sp, #28
 801ab96:	463b      	mov	r3, r7
 801ab98:	4631      	mov	r1, r6
 801ab9a:	4628      	mov	r0, r5
 801ab9c:	47a0      	blx	r4
 801ab9e:	b017      	add	sp, #92	; 0x5c
 801aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aba4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801aba4:	2000      	movs	r0, #0
 801aba6:	4770      	bx	lr

0801aba8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abac:	b08d      	sub	sp, #52	; 0x34
 801abae:	4688      	mov	r8, r1
 801abb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801abb2:	f8d3 c000 	ldr.w	ip, [r3]
 801abb6:	680f      	ldr	r7, [r1, #0]
 801abb8:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801abbc:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801abc0:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801abc4:	edd3 6a07 	vldr	s13, [r3, #28]
 801abc8:	9918      	ldr	r1, [sp, #96]	; 0x60
 801abca:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801abce:	f9b1 9000 	ldrsh.w	r9, [r1]
 801abd2:	f9ba 1000 	ldrsh.w	r1, [sl]
 801abd6:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801abda:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801abde:	eba7 070c 	sub.w	r7, r7, ip
 801abe2:	42bc      	cmp	r4, r7
 801abe4:	bfa8      	it	ge
 801abe6:	463c      	movge	r4, r7
 801abe8:	ee07 4a90 	vmov	s15, r4
 801abec:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801abf0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801abf4:	ee25 4a04 	vmul.f32	s8, s10, s8
 801abf8:	ee65 4a24 	vmul.f32	s9, s10, s9
 801abfc:	ee25 5a27 	vmul.f32	s10, s10, s15
 801ac00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ac04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801ac08:	eb09 0e0c 	add.w	lr, r9, ip
 801ac0c:	4571      	cmp	r1, lr
 801ac0e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801ac12:	ee32 1a05 	vadd.f32	s2, s4, s10
 801ac16:	ee36 0a84 	vadd.f32	s0, s13, s8
 801ac1a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801ac1e:	ee22 2a07 	vmul.f32	s4, s4, s14
 801ac22:	f340 808d 	ble.w	801ad40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801ac26:	eba1 060e 	sub.w	r6, r1, lr
 801ac2a:	fb96 f5f4 	sdiv	r5, r6, r4
 801ac2e:	ee07 5a10 	vmov	s14, r5
 801ac32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ac36:	2d00      	cmp	r5, #0
 801ac38:	fb04 6615 	mls	r6, r4, r5, r6
 801ac3c:	eea7 0a04 	vfma.f32	s0, s14, s8
 801ac40:	eee7 0a24 	vfma.f32	s1, s14, s9
 801ac44:	eea7 1a05 	vfma.f32	s2, s14, s10
 801ac48:	dd13      	ble.n	801ac72 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 801ac4a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801ac4e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801ac52:	eef5 6a40 	vcmp.f32	s13, #0.0
 801ac56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac5a:	bf18      	it	ne
 801ac5c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801ac60:	ee31 2a45 	vsub.f32	s4, s2, s10
 801ac64:	bf08      	it	eq
 801ac66:	eeb0 7a67 	vmoveq.f32	s14, s15
 801ac6a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801ac6e:	ee22 2a07 	vmul.f32	s4, s4, s14
 801ac72:	fb05 f204 	mul.w	r2, r5, r4
 801ac76:	1abf      	subs	r7, r7, r2
 801ac78:	4494      	add	ip, r2
 801ac7a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801ac7e:	4411      	add	r1, r2
 801ac80:	eb09 020c 	add.w	r2, r9, ip
 801ac84:	443a      	add	r2, r7
 801ac86:	b209      	sxth	r1, r1
 801ac88:	428a      	cmp	r2, r1
 801ac8a:	bfc4      	itt	gt
 801ac8c:	eba1 0209 	subgt.w	r2, r1, r9
 801ac90:	eba2 070c 	subgt.w	r7, r2, ip
 801ac94:	2f00      	cmp	r7, #0
 801ac96:	dd50      	ble.n	801ad3a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 801ac98:	fb97 f1f4 	sdiv	r1, r7, r4
 801ac9c:	fb04 7211 	mls	r2, r4, r1, r7
 801aca0:	b90a      	cbnz	r2, 801aca6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 801aca2:	3901      	subs	r1, #1
 801aca4:	4622      	mov	r2, r4
 801aca6:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801acaa:	6840      	ldr	r0, [r0, #4]
 801acac:	900b      	str	r0, [sp, #44]	; 0x2c
 801acae:	f8d0 a000 	ldr.w	sl, [r0]
 801acb2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801acb4:	9008      	str	r0, [sp, #32]
 801acb6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801acba:	9818      	ldr	r0, [sp, #96]	; 0x60
 801acbc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801acc0:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801acc4:	695b      	ldr	r3, [r3, #20]
 801acc6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801acc8:	445b      	add	r3, fp
 801acca:	eef0 6a42 	vmov.f32	s13, s4
 801acce:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801acd2:	ee21 3a23 	vmul.f32	s6, s2, s7
 801acd6:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801acda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801acde:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ace2:	9307      	str	r3, [sp, #28]
 801ace4:	ee17 7a90 	vmov	r7, s15
 801ace8:	ee73 7a42 	vsub.f32	s15, s6, s4
 801acec:	eeb0 7a61 	vmov.f32	s14, s3
 801acf0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801acf4:	ee16 3a90 	vmov	r3, s13
 801acf8:	fb97 f7f4 	sdiv	r7, r7, r4
 801acfc:	ee17 ca90 	vmov	ip, s15
 801ad00:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ad04:	fb9c fcf4 	sdiv	ip, ip, r4
 801ad08:	fb0c 3306 	mla	r3, ip, r6, r3
 801ad0c:	9302      	str	r3, [sp, #8]
 801ad0e:	ee17 3a10 	vmov	r3, s14
 801ad12:	44b6      	add	lr, r6
 801ad14:	fb04 e505 	mla	r5, r4, r5, lr
 801ad18:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801ad1c:	fb07 3706 	mla	r7, r7, r6, r3
 801ad20:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801ad24:	e9cd 4700 	strd	r4, r7, [sp]
 801ad28:	2900      	cmp	r1, #0
 801ad2a:	bfcc      	ite	gt
 801ad2c:	46a1      	movgt	r9, r4
 801ad2e:	4691      	movle	r9, r2
 801ad30:	eba9 0306 	sub.w	r3, r9, r6
 801ad34:	f8da 4008 	ldr.w	r4, [sl, #8]
 801ad38:	47a0      	blx	r4
 801ad3a:	b00d      	add	sp, #52	; 0x34
 801ad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad40:	2500      	movs	r5, #0
 801ad42:	462e      	mov	r6, r5
 801ad44:	e799      	b.n	801ac7a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0801ad48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad4c:	b0db      	sub	sp, #364	; 0x16c
 801ad4e:	461d      	mov	r5, r3
 801ad50:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801ad54:	930a      	str	r3, [sp, #40]	; 0x28
 801ad56:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801ad5a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ad5c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801ad60:	9310      	str	r3, [sp, #64]	; 0x40
 801ad62:	6803      	ldr	r3, [r0, #0]
 801ad64:	910f      	str	r1, [sp, #60]	; 0x3c
 801ad66:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801ad68:	9009      	str	r0, [sp, #36]	; 0x24
 801ad6a:	4614      	mov	r4, r2
 801ad6c:	4629      	mov	r1, r5
 801ad6e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ad72:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801ad76:	47b8      	blx	r7
 801ad78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad7a:	6058      	str	r0, [r3, #4]
 801ad7c:	2800      	cmp	r0, #0
 801ad7e:	f000 83a1 	beq.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ad82:	682b      	ldr	r3, [r5, #0]
 801ad84:	9314      	str	r3, [sp, #80]	; 0x50
 801ad86:	686b      	ldr	r3, [r5, #4]
 801ad88:	9315      	str	r3, [sp, #84]	; 0x54
 801ad8a:	4bc4      	ldr	r3, [pc, #784]	; (801b09c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801ad8c:	ed94 7a02 	vldr	s14, [r4, #8]
 801ad90:	7819      	ldrb	r1, [r3, #0]
 801ad92:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801ad96:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801ad9a:	2900      	cmp	r1, #0
 801ad9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ada0:	bf16      	itet	ne
 801ada2:	4619      	movne	r1, r3
 801ada4:	4611      	moveq	r1, r2
 801ada6:	4613      	movne	r3, r2
 801ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adac:	9116      	str	r1, [sp, #88]	; 0x58
 801adae:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801adb2:	f240 8387 	bls.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801adb6:	ed94 7a07 	vldr	s14, [r4, #28]
 801adba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801adbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adc2:	f240 837f 	bls.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801adc6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801adca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801adce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801add2:	f240 8377 	bls.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801add6:	6822      	ldr	r2, [r4, #0]
 801add8:	4bb1      	ldr	r3, [pc, #708]	; (801b0a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801adda:	429a      	cmp	r2, r3
 801addc:	f2c0 8372 	blt.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ade0:	49b0      	ldr	r1, [pc, #704]	; (801b0a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801ade2:	6963      	ldr	r3, [r4, #20]
 801ade4:	428a      	cmp	r2, r1
 801ade6:	f300 836d 	bgt.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801adea:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801adee:	48ae      	ldr	r0, [pc, #696]	; (801b0a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801adf0:	33ff      	adds	r3, #255	; 0xff
 801adf2:	4283      	cmp	r3, r0
 801adf4:	f200 8366 	bhi.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801adf8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801adfa:	4dac      	ldr	r5, [pc, #688]	; (801b0ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801adfc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801ae00:	33ff      	adds	r3, #255	; 0xff
 801ae02:	42ab      	cmp	r3, r5
 801ae04:	f200 835e 	bhi.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ae08:	6862      	ldr	r2, [r4, #4]
 801ae0a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801ae0e:	33ff      	adds	r3, #255	; 0xff
 801ae10:	4283      	cmp	r3, r0
 801ae12:	f200 8357 	bhi.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ae16:	69a1      	ldr	r1, [r4, #24]
 801ae18:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801ae1c:	33ff      	adds	r3, #255	; 0xff
 801ae1e:	4283      	cmp	r3, r0
 801ae20:	f200 8350 	bhi.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ae24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ae26:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801ae2a:	30ff      	adds	r0, #255	; 0xff
 801ae2c:	42a8      	cmp	r0, r5
 801ae2e:	f200 8349 	bhi.w	801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ae32:	428a      	cmp	r2, r1
 801ae34:	f280 8110 	bge.w	801b058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801ae38:	429a      	cmp	r2, r3
 801ae3a:	f300 8119 	bgt.w	801b070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801ae3e:	4299      	cmp	r1, r3
 801ae40:	f280 811d 	bge.w	801b07e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801ae44:	2502      	movs	r5, #2
 801ae46:	2701      	movs	r7, #1
 801ae48:	46a9      	mov	r9, r5
 801ae4a:	46b8      	mov	r8, r7
 801ae4c:	f04f 0a00 	mov.w	sl, #0
 801ae50:	4621      	mov	r1, r4
 801ae52:	a849      	add	r0, sp, #292	; 0x124
 801ae54:	f003 fed6 	bl	801ec04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801ae58:	4622      	mov	r2, r4
 801ae5a:	4653      	mov	r3, sl
 801ae5c:	a949      	add	r1, sp, #292	; 0x124
 801ae5e:	f8cd 9000 	str.w	r9, [sp]
 801ae62:	a819      	add	r0, sp, #100	; 0x64
 801ae64:	f003 fffe 	bl	801ee64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ae68:	4622      	mov	r2, r4
 801ae6a:	4653      	mov	r3, sl
 801ae6c:	a949      	add	r1, sp, #292	; 0x124
 801ae6e:	f8cd 8000 	str.w	r8, [sp]
 801ae72:	a829      	add	r0, sp, #164	; 0xa4
 801ae74:	f003 fff6 	bl	801ee64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ae78:	4643      	mov	r3, r8
 801ae7a:	4622      	mov	r2, r4
 801ae7c:	a949      	add	r1, sp, #292	; 0x124
 801ae7e:	f8cd 9000 	str.w	r9, [sp]
 801ae82:	a839      	add	r0, sp, #228	; 0xe4
 801ae84:	f003 ffee 	bl	801ee64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ae88:	42af      	cmp	r7, r5
 801ae8a:	bfb5      	itete	lt
 801ae8c:	2300      	movlt	r3, #0
 801ae8e:	2301      	movge	r3, #1
 801ae90:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ae92:	930e      	strge	r3, [sp, #56]	; 0x38
 801ae94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae96:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ae9a:	af12      	add	r7, sp, #72	; 0x48
 801ae9c:	bfb9      	ittee	lt
 801ae9e:	ad29      	addlt	r5, sp, #164	; 0xa4
 801aea0:	ac19      	addlt	r4, sp, #100	; 0x64
 801aea2:	ad19      	addge	r5, sp, #100	; 0x64
 801aea4:	ac29      	addge	r4, sp, #164	; 0xa4
 801aea6:	e887 0003 	stmia.w	r7, {r0, r1}
 801aeaa:	b928      	cbnz	r0, 801aeb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801aeac:	4b80      	ldr	r3, [pc, #512]	; (801b0b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801aeae:	6818      	ldr	r0, [r3, #0]
 801aeb0:	6803      	ldr	r3, [r0, #0]
 801aeb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aeb4:	4798      	blx	r3
 801aeb6:	6038      	str	r0, [r7, #0]
 801aeb8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aeba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801aebe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aec2:	930c      	str	r3, [sp, #48]	; 0x30
 801aec4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aec6:	6963      	ldr	r3, [r4, #20]
 801aec8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801aeca:	440b      	add	r3, r1
 801aecc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801aed0:	4408      	add	r0, r1
 801aed2:	b200      	sxth	r0, r0
 801aed4:	4283      	cmp	r3, r0
 801aed6:	900d      	str	r0, [sp, #52]	; 0x34
 801aed8:	f280 80dd 	bge.w	801b096 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801aedc:	428b      	cmp	r3, r1
 801aede:	da08      	bge.n	801aef2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801aee0:	2a00      	cmp	r2, #0
 801aee2:	dd06      	ble.n	801aef2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801aee4:	1acb      	subs	r3, r1, r3
 801aee6:	429a      	cmp	r2, r3
 801aee8:	f2c0 80e4 	blt.w	801b0b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	f300 80e2 	bgt.w	801b0b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801aef2:	6967      	ldr	r7, [r4, #20]
 801aef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aef6:	443b      	add	r3, r7
 801aef8:	461f      	mov	r7, r3
 801aefa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aefc:	1bdf      	subs	r7, r3, r7
 801aefe:	4297      	cmp	r7, r2
 801af00:	bfa8      	it	ge
 801af02:	4617      	movge	r7, r2
 801af04:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801af08:	2f00      	cmp	r7, #0
 801af0a:	f340 8166 	ble.w	801b1da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801af0e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801af10:	6829      	ldr	r1, [r5, #0]
 801af12:	f9b3 2000 	ldrsh.w	r2, [r3]
 801af16:	f9bb 3000 	ldrsh.w	r3, [fp]
 801af1a:	6820      	ldr	r0, [r4, #0]
 801af1c:	4411      	add	r1, r2
 801af1e:	4299      	cmp	r1, r3
 801af20:	dd1a      	ble.n	801af58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801af22:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801af26:	440b      	add	r3, r1
 801af28:	4402      	add	r2, r0
 801af2a:	b21b      	sxth	r3, r3
 801af2c:	429a      	cmp	r2, r3
 801af2e:	dc13      	bgt.n	801af58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801af30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	9206      	str	r2, [sp, #24]
 801af38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af3a:	9205      	str	r2, [sp, #20]
 801af3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801af3e:	9500      	str	r5, [sp, #0]
 801af40:	e9cd b203 	strd	fp, r2, [sp, #12]
 801af44:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801af46:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af48:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801af4c:	a912      	add	r1, sp, #72	; 0x48
 801af4e:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801af52:	aa49      	add	r2, sp, #292	; 0x124
 801af54:	4623      	mov	r3, r4
 801af56:	47c8      	blx	r9
 801af58:	e9d4 2300 	ldrd	r2, r3, [r4]
 801af5c:	441a      	add	r2, r3
 801af5e:	6963      	ldr	r3, [r4, #20]
 801af60:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801af64:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801af68:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801af6c:	68a1      	ldr	r1, [r4, #8]
 801af6e:	ed94 6a08 	vldr	s12, [r4, #32]
 801af72:	6022      	str	r2, [r4, #0]
 801af74:	3301      	adds	r3, #1
 801af76:	6163      	str	r3, [r4, #20]
 801af78:	69a3      	ldr	r3, [r4, #24]
 801af7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801af7e:	3b01      	subs	r3, #1
 801af80:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801af84:	61a3      	str	r3, [r4, #24]
 801af86:	6923      	ldr	r3, [r4, #16]
 801af88:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801af8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801af90:	edd4 6a07 	vldr	s13, [r4, #28]
 801af94:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801af98:	440b      	add	r3, r1
 801af9a:	68e1      	ldr	r1, [r4, #12]
 801af9c:	6123      	str	r3, [r4, #16]
 801af9e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801afa2:	428b      	cmp	r3, r1
 801afa4:	edc4 6a07 	vstr	s13, [r4, #28]
 801afa8:	db15      	blt.n	801afd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801afaa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801afae:	ee76 6a26 	vadd.f32	s13, s12, s13
 801afb2:	3201      	adds	r2, #1
 801afb4:	edc4 6a07 	vstr	s13, [r4, #28]
 801afb8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801afbc:	6022      	str	r2, [r4, #0]
 801afbe:	ee36 7a87 	vadd.f32	s14, s13, s14
 801afc2:	1a5b      	subs	r3, r3, r1
 801afc4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801afc8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801afcc:	6123      	str	r3, [r4, #16]
 801afce:	ee77 7a27 	vadd.f32	s15, s14, s15
 801afd2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801afd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801afda:	441a      	add	r2, r3
 801afdc:	696b      	ldr	r3, [r5, #20]
 801afde:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801afe2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801afe6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801afea:	68a9      	ldr	r1, [r5, #8]
 801afec:	ed95 6a08 	vldr	s12, [r5, #32]
 801aff0:	602a      	str	r2, [r5, #0]
 801aff2:	3301      	adds	r3, #1
 801aff4:	616b      	str	r3, [r5, #20]
 801aff6:	69ab      	ldr	r3, [r5, #24]
 801aff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801affc:	3b01      	subs	r3, #1
 801affe:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801b002:	61ab      	str	r3, [r5, #24]
 801b004:	692b      	ldr	r3, [r5, #16]
 801b006:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b00e:	edd5 6a07 	vldr	s13, [r5, #28]
 801b012:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b016:	440b      	add	r3, r1
 801b018:	68e9      	ldr	r1, [r5, #12]
 801b01a:	612b      	str	r3, [r5, #16]
 801b01c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b020:	428b      	cmp	r3, r1
 801b022:	edc5 6a07 	vstr	s13, [r5, #28]
 801b026:	db15      	blt.n	801b054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801b028:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b02c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b030:	3201      	adds	r2, #1
 801b032:	edc5 6a07 	vstr	s13, [r5, #28]
 801b036:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801b03a:	602a      	str	r2, [r5, #0]
 801b03c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b040:	1a5b      	subs	r3, r3, r1
 801b042:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b046:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801b04a:	612b      	str	r3, [r5, #16]
 801b04c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b050:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b054:	3f01      	subs	r7, #1
 801b056:	e757      	b.n	801af08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801b058:	4299      	cmp	r1, r3
 801b05a:	dc13      	bgt.n	801b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801b05c:	429a      	cmp	r2, r3
 801b05e:	da14      	bge.n	801b08a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801b060:	2502      	movs	r5, #2
 801b062:	2703      	movs	r7, #3
 801b064:	46a9      	mov	r9, r5
 801b066:	f04f 0800 	mov.w	r8, #0
 801b06a:	f04f 0a01 	mov.w	sl, #1
 801b06e:	e6ef      	b.n	801ae50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b070:	2501      	movs	r5, #1
 801b072:	2700      	movs	r7, #0
 801b074:	46a9      	mov	r9, r5
 801b076:	46b8      	mov	r8, r7
 801b078:	f04f 0a02 	mov.w	sl, #2
 801b07c:	e6e8      	b.n	801ae50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801b07e:	2501      	movs	r5, #1
 801b080:	2702      	movs	r7, #2
 801b082:	e6e1      	b.n	801ae48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801b084:	2500      	movs	r5, #0
 801b086:	2701      	movs	r7, #1
 801b088:	e7f4      	b.n	801b074 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801b08a:	2702      	movs	r7, #2
 801b08c:	2503      	movs	r5, #3
 801b08e:	f04f 0900 	mov.w	r9, #0
 801b092:	46b8      	mov	r8, r7
 801b094:	e7e9      	b.n	801b06a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801b096:	4613      	mov	r3, r2
 801b098:	e728      	b.n	801aeec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801b09a:	bf00      	nop
 801b09c:	20009818 	.word	0x20009818
 801b0a0:	fffd8f01 	.word	0xfffd8f01
 801b0a4:	00027100 	.word	0x00027100
 801b0a8:	0004e1ff 	.word	0x0004e1ff
 801b0ac:	0004e1fe 	.word	0x0004e1fe
 801b0b0:	20009820 	.word	0x20009820
 801b0b4:	4613      	mov	r3, r2
 801b0b6:	992b      	ldr	r1, [sp, #172]	; 0xac
 801b0b8:	9111      	str	r1, [sp, #68]	; 0x44
 801b0ba:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801b0be:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801b0c2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801b0c4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801b0c8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801b0cc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801b0d0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801b0d4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801b0d8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801b0dc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801b0e0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801b0e4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801b0e8:	469e      	mov	lr, r3
 801b0ea:	469c      	mov	ip, r3
 801b0ec:	f04f 0900 	mov.w	r9, #0
 801b0f0:	f1bc 0f00 	cmp.w	ip, #0
 801b0f4:	d147      	bne.n	801b186 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801b0f6:	eb03 0c07 	add.w	ip, r3, r7
 801b0fa:	1ad7      	subs	r7, r2, r3
 801b0fc:	f1b9 0f00 	cmp.w	r9, #0
 801b100:	d009      	beq.n	801b116 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801b102:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801b106:	9029      	str	r0, [sp, #164]	; 0xa4
 801b108:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801b10c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801b110:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801b114:	912d      	str	r1, [sp, #180]	; 0xb4
 801b116:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b118:	9111      	str	r1, [sp, #68]	; 0x44
 801b11a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801b11e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801b122:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801b126:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801b12a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801b12e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801b132:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801b136:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801b13a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801b13e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801b142:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801b146:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801b14a:	f04f 0800 	mov.w	r8, #0
 801b14e:	f1be 0f00 	cmp.w	lr, #0
 801b152:	d031      	beq.n	801b1b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801b154:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b156:	4431      	add	r1, r6
 801b158:	4549      	cmp	r1, r9
 801b15a:	4450      	add	r0, sl
 801b15c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b160:	ee37 7a04 	vadd.f32	s14, s14, s8
 801b164:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b168:	db08      	blt.n	801b17c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801b16a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b16e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b172:	ee37 7a06 	vadd.f32	s14, s14, s12
 801b176:	3001      	adds	r0, #1
 801b178:	eba1 0109 	sub.w	r1, r1, r9
 801b17c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b180:	f04f 0801 	mov.w	r8, #1
 801b184:	e7e3      	b.n	801b14e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801b186:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b188:	4431      	add	r1, r6
 801b18a:	4541      	cmp	r1, r8
 801b18c:	4450      	add	r0, sl
 801b18e:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b192:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b196:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801b19a:	db08      	blt.n	801b1ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801b19c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801b1a0:	ee37 7a25 	vadd.f32	s14, s14, s11
 801b1a4:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b1a8:	3001      	adds	r0, #1
 801b1aa:	eba1 0108 	sub.w	r1, r1, r8
 801b1ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b1b2:	f04f 0901 	mov.w	r9, #1
 801b1b6:	e79b      	b.n	801b0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801b1b8:	449c      	add	ip, r3
 801b1ba:	1aff      	subs	r7, r7, r3
 801b1bc:	f1b8 0f00 	cmp.w	r8, #0
 801b1c0:	d009      	beq.n	801b1d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801b1c2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801b1c6:	9019      	str	r0, [sp, #100]	; 0x64
 801b1c8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801b1cc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801b1d0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801b1d4:	911d      	str	r1, [sp, #116]	; 0x74
 801b1d6:	1ad2      	subs	r2, r2, r3
 801b1d8:	e68b      	b.n	801aef2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801b1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1dc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	f000 80d1 	beq.w	801b386 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801b1e4:	ad19      	add	r5, sp, #100	; 0x64
 801b1e6:	ac39      	add	r4, sp, #228	; 0xe4
 801b1e8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801b1ea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801b1ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b1f2:	930c      	str	r3, [sp, #48]	; 0x30
 801b1f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b1f6:	6963      	ldr	r3, [r4, #20]
 801b1f8:	440b      	add	r3, r1
 801b1fa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801b1fe:	4408      	add	r0, r1
 801b200:	b200      	sxth	r0, r0
 801b202:	4283      	cmp	r3, r0
 801b204:	900d      	str	r0, [sp, #52]	; 0x34
 801b206:	f280 80c1 	bge.w	801b38c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801b20a:	428b      	cmp	r3, r1
 801b20c:	da08      	bge.n	801b220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b20e:	2a00      	cmp	r2, #0
 801b210:	dd06      	ble.n	801b220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b212:	1acb      	subs	r3, r1, r3
 801b214:	429a      	cmp	r2, r3
 801b216:	f2c0 80bb 	blt.w	801b390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	f300 80b9 	bgt.w	801b392 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801b220:	6967      	ldr	r7, [r4, #20]
 801b222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b224:	443b      	add	r3, r7
 801b226:	461f      	mov	r7, r3
 801b228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b22a:	1bdf      	subs	r7, r3, r7
 801b22c:	4297      	cmp	r7, r2
 801b22e:	bfa8      	it	ge
 801b230:	4617      	movge	r7, r2
 801b232:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801b236:	2f00      	cmp	r7, #0
 801b238:	f340 813c 	ble.w	801b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801b23c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801b23e:	6829      	ldr	r1, [r5, #0]
 801b240:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b244:	f9bb 3000 	ldrsh.w	r3, [fp]
 801b248:	6820      	ldr	r0, [r4, #0]
 801b24a:	4411      	add	r1, r2
 801b24c:	4299      	cmp	r1, r3
 801b24e:	dd1a      	ble.n	801b286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801b250:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801b254:	440b      	add	r3, r1
 801b256:	4402      	add	r2, r0
 801b258:	b21b      	sxth	r3, r3
 801b25a:	429a      	cmp	r2, r3
 801b25c:	dc13      	bgt.n	801b286 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801b25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b260:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	9206      	str	r2, [sp, #24]
 801b266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b268:	9205      	str	r2, [sp, #20]
 801b26a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b26c:	9500      	str	r5, [sp, #0]
 801b26e:	e9cd b203 	strd	fp, r2, [sp, #12]
 801b272:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801b274:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b276:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801b27a:	a912      	add	r1, sp, #72	; 0x48
 801b27c:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801b280:	aa49      	add	r2, sp, #292	; 0x124
 801b282:	4623      	mov	r3, r4
 801b284:	47c8      	blx	r9
 801b286:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b28a:	441a      	add	r2, r3
 801b28c:	6963      	ldr	r3, [r4, #20]
 801b28e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801b292:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801b296:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801b29a:	68a1      	ldr	r1, [r4, #8]
 801b29c:	ed94 6a08 	vldr	s12, [r4, #32]
 801b2a0:	6022      	str	r2, [r4, #0]
 801b2a2:	3301      	adds	r3, #1
 801b2a4:	6163      	str	r3, [r4, #20]
 801b2a6:	69a3      	ldr	r3, [r4, #24]
 801b2a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b2ac:	3b01      	subs	r3, #1
 801b2ae:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801b2b2:	61a3      	str	r3, [r4, #24]
 801b2b4:	6923      	ldr	r3, [r4, #16]
 801b2b6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801b2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b2be:	edd4 6a07 	vldr	s13, [r4, #28]
 801b2c2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801b2c6:	440b      	add	r3, r1
 801b2c8:	68e1      	ldr	r1, [r4, #12]
 801b2ca:	6123      	str	r3, [r4, #16]
 801b2cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b2d0:	428b      	cmp	r3, r1
 801b2d2:	edc4 6a07 	vstr	s13, [r4, #28]
 801b2d6:	db15      	blt.n	801b304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801b2d8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801b2dc:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b2e0:	3201      	adds	r2, #1
 801b2e2:	edc4 6a07 	vstr	s13, [r4, #28]
 801b2e6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801b2ea:	6022      	str	r2, [r4, #0]
 801b2ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b2f0:	1a5b      	subs	r3, r3, r1
 801b2f2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801b2f6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801b2fa:	6123      	str	r3, [r4, #16]
 801b2fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b300:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801b304:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b308:	441a      	add	r2, r3
 801b30a:	696b      	ldr	r3, [r5, #20]
 801b30c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801b310:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801b314:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801b318:	68a9      	ldr	r1, [r5, #8]
 801b31a:	ed95 6a08 	vldr	s12, [r5, #32]
 801b31e:	602a      	str	r2, [r5, #0]
 801b320:	3301      	adds	r3, #1
 801b322:	616b      	str	r3, [r5, #20]
 801b324:	69ab      	ldr	r3, [r5, #24]
 801b326:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b32a:	3b01      	subs	r3, #1
 801b32c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801b330:	61ab      	str	r3, [r5, #24]
 801b332:	692b      	ldr	r3, [r5, #16]
 801b334:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b33c:	edd5 6a07 	vldr	s13, [r5, #28]
 801b340:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b344:	440b      	add	r3, r1
 801b346:	68e9      	ldr	r1, [r5, #12]
 801b348:	612b      	str	r3, [r5, #16]
 801b34a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801b34e:	428b      	cmp	r3, r1
 801b350:	edc5 6a07 	vstr	s13, [r5, #28]
 801b354:	db15      	blt.n	801b382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801b356:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b35a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801b35e:	3201      	adds	r2, #1
 801b360:	edc5 6a07 	vstr	s13, [r5, #28]
 801b364:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801b368:	602a      	str	r2, [r5, #0]
 801b36a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801b36e:	1a5b      	subs	r3, r3, r1
 801b370:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801b374:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801b378:	612b      	str	r3, [r5, #16]
 801b37a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b37e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801b382:	3f01      	subs	r7, #1
 801b384:	e757      	b.n	801b236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801b386:	ad39      	add	r5, sp, #228	; 0xe4
 801b388:	ac19      	add	r4, sp, #100	; 0x64
 801b38a:	e72d      	b.n	801b1e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801b38c:	4613      	mov	r3, r2
 801b38e:	e744      	b.n	801b21a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801b390:	4613      	mov	r3, r2
 801b392:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801b396:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801b398:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801b39c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801b3a0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801b3a4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801b3a8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801b3ac:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801b3b0:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801b3b4:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801b3b6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801b3ba:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801b3be:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801b3c2:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801b3c6:	960e      	str	r6, [sp, #56]	; 0x38
 801b3c8:	469e      	mov	lr, r3
 801b3ca:	461f      	mov	r7, r3
 801b3cc:	f04f 0900 	mov.w	r9, #0
 801b3d0:	2f00      	cmp	r7, #0
 801b3d2:	d146      	bne.n	801b462 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801b3d4:	449c      	add	ip, r3
 801b3d6:	1ad7      	subs	r7, r2, r3
 801b3d8:	f1b9 0f00 	cmp.w	r9, #0
 801b3dc:	d009      	beq.n	801b3f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801b3de:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801b3e2:	9039      	str	r0, [sp, #228]	; 0xe4
 801b3e4:	913d      	str	r1, [sp, #244]	; 0xf4
 801b3e6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801b3ea:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801b3ee:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801b3f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b3f4:	910e      	str	r1, [sp, #56]	; 0x38
 801b3f6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801b3fa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801b3fe:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801b402:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801b406:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801b40a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801b40e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801b412:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801b416:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801b41a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801b41e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801b422:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801b426:	f04f 0800 	mov.w	r8, #0
 801b42a:	f1be 0f00 	cmp.w	lr, #0
 801b42e:	d030      	beq.n	801b492 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801b430:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b432:	4431      	add	r1, r6
 801b434:	4549      	cmp	r1, r9
 801b436:	4450      	add	r0, sl
 801b438:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b43c:	ee37 7a04 	vadd.f32	s14, s14, s8
 801b440:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b444:	db08      	blt.n	801b458 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801b446:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b44a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b44e:	ee37 7a06 	vadd.f32	s14, s14, s12
 801b452:	3001      	adds	r0, #1
 801b454:	eba1 0109 	sub.w	r1, r1, r9
 801b458:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b45c:	f04f 0801 	mov.w	r8, #1
 801b460:	e7e3      	b.n	801b42a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801b462:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b464:	4431      	add	r1, r6
 801b466:	4541      	cmp	r1, r8
 801b468:	4450      	add	r0, sl
 801b46a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b46e:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b472:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801b476:	db08      	blt.n	801b48a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801b478:	ee76 6a85 	vadd.f32	s13, s13, s10
 801b47c:	ee37 7a25 	vadd.f32	s14, s14, s11
 801b480:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b484:	3001      	adds	r0, #1
 801b486:	eba1 0108 	sub.w	r1, r1, r8
 801b48a:	3f01      	subs	r7, #1
 801b48c:	f04f 0901 	mov.w	r9, #1
 801b490:	e79e      	b.n	801b3d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801b492:	449c      	add	ip, r3
 801b494:	1aff      	subs	r7, r7, r3
 801b496:	f1b8 0f00 	cmp.w	r8, #0
 801b49a:	d009      	beq.n	801b4b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801b49c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801b4a0:	9019      	str	r0, [sp, #100]	; 0x64
 801b4a2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801b4a6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801b4aa:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801b4ae:	911d      	str	r1, [sp, #116]	; 0x74
 801b4b0:	1ad2      	subs	r2, r2, r3
 801b4b2:	e6b5      	b.n	801b220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b4b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	b923      	cbnz	r3, 801b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b4ba:	4b04      	ldr	r3, [pc, #16]	; (801b4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801b4bc:	6818      	ldr	r0, [r3, #0]
 801b4be:	6803      	ldr	r3, [r0, #0]
 801b4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4c2:	4798      	blx	r3
 801b4c4:	b05b      	add	sp, #364	; 0x16c
 801b4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4ca:	bf00      	nop
 801b4cc:	20009820 	.word	0x20009820

0801b4d0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801b4d0:	b570      	push	{r4, r5, r6, lr}
 801b4d2:	4604      	mov	r4, r0
 801b4d4:	2500      	movs	r5, #0
 801b4d6:	7223      	strb	r3, [r4, #8]
 801b4d8:	9804      	ldr	r0, [sp, #16]
 801b4da:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b4de:	8025      	strh	r5, [r4, #0]
 801b4e0:	6061      	str	r1, [r4, #4]
 801b4e2:	7263      	strb	r3, [r4, #9]
 801b4e4:	60e0      	str	r0, [r4, #12]
 801b4e6:	8222      	strh	r2, [r4, #16]
 801b4e8:	8265      	strh	r5, [r4, #18]
 801b4ea:	82a5      	strh	r5, [r4, #20]
 801b4ec:	82e5      	strh	r5, [r4, #22]
 801b4ee:	8325      	strh	r5, [r4, #24]
 801b4f0:	8365      	strh	r5, [r4, #26]
 801b4f2:	83a5      	strh	r5, [r4, #28]
 801b4f4:	77a5      	strb	r5, [r4, #30]
 801b4f6:	6803      	ldr	r3, [r0, #0]
 801b4f8:	695b      	ldr	r3, [r3, #20]
 801b4fa:	4798      	blx	r3
 801b4fc:	4606      	mov	r6, r0
 801b4fe:	b1f8      	cbz	r0, 801b540 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b500:	68e0      	ldr	r0, [r4, #12]
 801b502:	6803      	ldr	r3, [r0, #0]
 801b504:	4631      	mov	r1, r6
 801b506:	68db      	ldr	r3, [r3, #12]
 801b508:	4798      	blx	r3
 801b50a:	7b43      	ldrb	r3, [r0, #13]
 801b50c:	7a82      	ldrb	r2, [r0, #10]
 801b50e:	005b      	lsls	r3, r3, #1
 801b510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b514:	4313      	orrs	r3, r2
 801b516:	83a3      	strh	r3, [r4, #28]
 801b518:	7a63      	ldrb	r3, [r4, #9]
 801b51a:	2b04      	cmp	r3, #4
 801b51c:	4605      	mov	r5, r0
 801b51e:	d10f      	bne.n	801b540 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b520:	68e0      	ldr	r0, [r4, #12]
 801b522:	6803      	ldr	r3, [r0, #0]
 801b524:	462a      	mov	r2, r5
 801b526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b528:	4631      	mov	r1, r6
 801b52a:	4798      	blx	r3
 801b52c:	7b6b      	ldrb	r3, [r5, #13]
 801b52e:	005b      	lsls	r3, r3, #1
 801b530:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b534:	7aab      	ldrb	r3, [r5, #10]
 801b536:	4313      	orrs	r3, r2
 801b538:	4418      	add	r0, r3
 801b53a:	8ba3      	ldrh	r3, [r4, #28]
 801b53c:	4418      	add	r0, r3
 801b53e:	83a0      	strh	r0, [r4, #28]
 801b540:	4620      	mov	r0, r4
 801b542:	bd70      	pop	{r4, r5, r6, pc}

0801b544 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b548:	2400      	movs	r4, #0
 801b54a:	b085      	sub	sp, #20
 801b54c:	4681      	mov	r9, r0
 801b54e:	4688      	mov	r8, r1
 801b550:	4692      	mov	sl, r2
 801b552:	469b      	mov	fp, r3
 801b554:	4627      	mov	r7, r4
 801b556:	4625      	mov	r5, r4
 801b558:	4626      	mov	r6, r4
 801b55a:	4554      	cmp	r4, sl
 801b55c:	da2a      	bge.n	801b5b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b55e:	2300      	movs	r3, #0
 801b560:	9303      	str	r3, [sp, #12]
 801b562:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b566:	429d      	cmp	r5, r3
 801b568:	d004      	beq.n	801b574 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801b56a:	f242 030b 	movw	r3, #8203	; 0x200b
 801b56e:	429d      	cmp	r5, r3
 801b570:	bf18      	it	ne
 801b572:	462f      	movne	r7, r5
 801b574:	ab03      	add	r3, sp, #12
 801b576:	4642      	mov	r2, r8
 801b578:	4659      	mov	r1, fp
 801b57a:	4648      	mov	r0, r9
 801b57c:	f002 ff70 	bl	801e460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b580:	4605      	mov	r5, r0
 801b582:	b1b8      	cbz	r0, 801b5b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b584:	280a      	cmp	r0, #10
 801b586:	d015      	beq.n	801b5b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b588:	9a03      	ldr	r2, [sp, #12]
 801b58a:	b18a      	cbz	r2, 801b5b0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801b58c:	7b50      	ldrb	r0, [r2, #13]
 801b58e:	7a93      	ldrb	r3, [r2, #10]
 801b590:	8895      	ldrh	r5, [r2, #4]
 801b592:	0040      	lsls	r0, r0, #1
 801b594:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b598:	4303      	orrs	r3, r0
 801b59a:	9301      	str	r3, [sp, #4]
 801b59c:	f8d8 3000 	ldr.w	r3, [r8]
 801b5a0:	4639      	mov	r1, r7
 801b5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b5a4:	4640      	mov	r0, r8
 801b5a6:	4798      	blx	r3
 801b5a8:	9b01      	ldr	r3, [sp, #4]
 801b5aa:	4418      	add	r0, r3
 801b5ac:	4406      	add	r6, r0
 801b5ae:	b2b6      	uxth	r6, r6
 801b5b0:	3401      	adds	r4, #1
 801b5b2:	e7d2      	b.n	801b55a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801b5b4:	4630      	mov	r0, r6
 801b5b6:	b005      	add	sp, #20
 801b5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b5bc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b5bc:	2a02      	cmp	r2, #2
 801b5be:	b530      	push	{r4, r5, lr}
 801b5c0:	d011      	beq.n	801b5e6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b5c2:	2a03      	cmp	r2, #3
 801b5c4:	d01c      	beq.n	801b600 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b5c6:	2a01      	cmp	r2, #1
 801b5c8:	d10c      	bne.n	801b5e4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b5ca:	888b      	ldrh	r3, [r1, #4]
 801b5cc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b5d0:	8801      	ldrh	r1, [r0, #0]
 801b5d2:	8844      	ldrh	r4, [r0, #2]
 801b5d4:	8004      	strh	r4, [r0, #0]
 801b5d6:	1a9b      	subs	r3, r3, r2
 801b5d8:	1a5b      	subs	r3, r3, r1
 801b5da:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b5de:	8043      	strh	r3, [r0, #2]
 801b5e0:	8081      	strh	r1, [r0, #4]
 801b5e2:	80c2      	strh	r2, [r0, #6]
 801b5e4:	bd30      	pop	{r4, r5, pc}
 801b5e6:	88cb      	ldrh	r3, [r1, #6]
 801b5e8:	88c2      	ldrh	r2, [r0, #6]
 801b5ea:	1a9b      	subs	r3, r3, r2
 801b5ec:	8842      	ldrh	r2, [r0, #2]
 801b5ee:	1a9b      	subs	r3, r3, r2
 801b5f0:	888a      	ldrh	r2, [r1, #4]
 801b5f2:	8881      	ldrh	r1, [r0, #4]
 801b5f4:	8043      	strh	r3, [r0, #2]
 801b5f6:	1a52      	subs	r2, r2, r1
 801b5f8:	8801      	ldrh	r1, [r0, #0]
 801b5fa:	1a52      	subs	r2, r2, r1
 801b5fc:	8002      	strh	r2, [r0, #0]
 801b5fe:	e7f1      	b.n	801b5e4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b600:	88cb      	ldrh	r3, [r1, #6]
 801b602:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b606:	8841      	ldrh	r1, [r0, #2]
 801b608:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b60c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b610:	8045      	strh	r5, [r0, #2]
 801b612:	1a9b      	subs	r3, r3, r2
 801b614:	1a5b      	subs	r3, r3, r1
 801b616:	8003      	strh	r3, [r0, #0]
 801b618:	8082      	strh	r2, [r0, #4]
 801b61a:	80c4      	strh	r4, [r0, #6]
 801b61c:	e7e2      	b.n	801b5e4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801b61e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b61e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b622:	b09f      	sub	sp, #124	; 0x7c
 801b624:	9116      	str	r1, [sp, #88]	; 0x58
 801b626:	9317      	str	r3, [sp, #92]	; 0x5c
 801b628:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b62a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b62c:	8809      	ldrh	r1, [r1, #0]
 801b62e:	889b      	ldrh	r3, [r3, #4]
 801b630:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801b634:	9212      	str	r2, [sp, #72]	; 0x48
 801b636:	440b      	add	r3, r1
 801b638:	b21b      	sxth	r3, r3
 801b63a:	9310      	str	r3, [sp, #64]	; 0x40
 801b63c:	f8d8 3000 	ldr.w	r3, [r8]
 801b640:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801b644:	7a59      	ldrb	r1, [r3, #9]
 801b646:	7a1b      	ldrb	r3, [r3, #8]
 801b648:	9315      	str	r3, [sp, #84]	; 0x54
 801b64a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b64c:	9011      	str	r0, [sp, #68]	; 0x44
 801b64e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801b652:	9114      	str	r1, [sp, #80]	; 0x50
 801b654:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b658:	2a00      	cmp	r2, #0
 801b65a:	d067      	beq.n	801b72c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801b65c:	f898 3010 	ldrb.w	r3, [r8, #16]
 801b660:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b662:	2b04      	cmp	r3, #4
 801b664:	bf14      	ite	ne
 801b666:	2301      	movne	r3, #1
 801b668:	2302      	moveq	r3, #2
 801b66a:	4413      	add	r3, r2
 801b66c:	f04f 0900 	mov.w	r9, #0
 801b670:	930f      	str	r3, [sp, #60]	; 0x3c
 801b672:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801b676:	464c      	mov	r4, r9
 801b678:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801b67c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801b680:	4293      	cmp	r3, r2
 801b682:	f280 808c 	bge.w	801b79e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b686:	2300      	movs	r3, #0
 801b688:	931c      	str	r3, [sp, #112]	; 0x70
 801b68a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b68e:	429c      	cmp	r4, r3
 801b690:	d006      	beq.n	801b6a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801b692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b694:	f242 020b 	movw	r2, #8203	; 0x200b
 801b698:	4294      	cmp	r4, r2
 801b69a:	bf18      	it	ne
 801b69c:	4623      	movne	r3, r4
 801b69e:	930d      	str	r3, [sp, #52]	; 0x34
 801b6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6a2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801b6a4:	f8d8 2000 	ldr.w	r2, [r8]
 801b6a8:	428b      	cmp	r3, r1
 801b6aa:	db41      	blt.n	801b730 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801b6ac:	6813      	ldr	r3, [r2, #0]
 801b6ae:	4610      	mov	r0, r2
 801b6b0:	695b      	ldr	r3, [r3, #20]
 801b6b2:	4798      	blx	r3
 801b6b4:	4604      	mov	r4, r0
 801b6b6:	f8d8 0000 	ldr.w	r0, [r8]
 801b6ba:	6803      	ldr	r3, [r0, #0]
 801b6bc:	aa1d      	add	r2, sp, #116	; 0x74
 801b6be:	689e      	ldr	r6, [r3, #8]
 801b6c0:	4621      	mov	r1, r4
 801b6c2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b6c6:	47b0      	blx	r6
 801b6c8:	901c      	str	r0, [sp, #112]	; 0x70
 801b6ca:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b6ce:	429c      	cmp	r4, r3
 801b6d0:	f000 80e9 	beq.w	801b8a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b6d4:	f242 030b 	movw	r3, #8203	; 0x200b
 801b6d8:	429c      	cmp	r4, r3
 801b6da:	f000 80e4 	beq.w	801b8a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b6de:	2c00      	cmp	r4, #0
 801b6e0:	f000 80f6 	beq.w	801b8d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b6e4:	2c0a      	cmp	r4, #10
 801b6e6:	d060      	beq.n	801b7aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b6e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b6ea:	b36a      	cbz	r2, 801b748 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801b6ec:	8894      	ldrh	r4, [r2, #4]
 801b6ee:	f1bb 0f00 	cmp.w	fp, #0
 801b6f2:	d03b      	beq.n	801b76c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801b6f4:	f892 900d 	ldrb.w	r9, [r2, #13]
 801b6f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b6fc:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b700:	f892 900a 	ldrb.w	r9, [r2, #10]
 801b704:	f1bb 0f01 	cmp.w	fp, #1
 801b708:	ea49 0903 	orr.w	r9, r9, r3
 801b70c:	d134      	bne.n	801b778 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801b70e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b710:	eba5 0509 	sub.w	r5, r5, r9
 801b714:	2b00      	cmp	r3, #0
 801b716:	d14f      	bne.n	801b7b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b718:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b71a:	eb09 0305 	add.w	r3, r9, r5
 801b71e:	4413      	add	r3, r2
 801b720:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b722:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b726:	4293      	cmp	r3, r2
 801b728:	da51      	bge.n	801b7ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b72a:	e038      	b.n	801b79e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b72c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b72e:	e79d      	b.n	801b66c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801b730:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b734:	9301      	str	r3, [sp, #4]
 801b736:	ab1d      	add	r3, sp, #116	; 0x74
 801b738:	9300      	str	r3, [sp, #0]
 801b73a:	4659      	mov	r1, fp
 801b73c:	ab1c      	add	r3, sp, #112	; 0x70
 801b73e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b740:	f002 fee6 	bl	801e510 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b744:	4604      	mov	r4, r0
 801b746:	e7c0      	b.n	801b6ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801b748:	f8d8 0000 	ldr.w	r0, [r8]
 801b74c:	6803      	ldr	r3, [r0, #0]
 801b74e:	691b      	ldr	r3, [r3, #16]
 801b750:	4798      	blx	r3
 801b752:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b756:	4298      	cmp	r0, r3
 801b758:	f000 80a5 	beq.w	801b8a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b75c:	f242 030b 	movw	r3, #8203	; 0x200b
 801b760:	4298      	cmp	r0, r3
 801b762:	f000 80a0 	beq.w	801b8a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b766:	f1bb 0f00 	cmp.w	fp, #0
 801b76a:	d100      	bne.n	801b76e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801b76c:	444d      	add	r5, r9
 801b76e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b770:	2a00      	cmp	r2, #0
 801b772:	d1bf      	bne.n	801b6f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801b774:	4691      	mov	r9, r2
 801b776:	e096      	b.n	801b8a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	f000 80aa 	beq.w	801b8d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801b780:	f1bb 0f00 	cmp.w	fp, #0
 801b784:	d118      	bne.n	801b7b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b786:	f8d8 0000 	ldr.w	r0, [r8]
 801b78a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b78c:	6803      	ldr	r3, [r0, #0]
 801b78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b790:	4798      	blx	r3
 801b792:	4405      	add	r5, r0
 801b794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b796:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b798:	1aeb      	subs	r3, r5, r3
 801b79a:	4293      	cmp	r3, r2
 801b79c:	dd17      	ble.n	801b7ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b79e:	2c00      	cmp	r4, #0
 801b7a0:	f000 8096 	beq.w	801b8d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b7a4:	2c0a      	cmp	r4, #10
 801b7a6:	f040 8084 	bne.w	801b8b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801b7aa:	240a      	movs	r4, #10
 801b7ac:	fab4 f084 	clz	r0, r4
 801b7b0:	0940      	lsrs	r0, r0, #5
 801b7b2:	b01f      	add	sp, #124	; 0x7c
 801b7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7b8:	f8d8 0000 	ldr.w	r0, [r8]
 801b7bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b7be:	6803      	ldr	r3, [r0, #0]
 801b7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b7c2:	4798      	blx	r3
 801b7c4:	f1bb 0f01 	cmp.w	fp, #1
 801b7c8:	eba5 0500 	sub.w	r5, r5, r0
 801b7cc:	d0a4      	beq.n	801b718 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801b7ce:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b7d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b7d2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b7d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b7da:	7b43      	ldrb	r3, [r0, #13]
 801b7dc:	015b      	lsls	r3, r3, #5
 801b7de:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b7e2:	7983      	ldrb	r3, [r0, #6]
 801b7e4:	4429      	add	r1, r5
 801b7e6:	4313      	orrs	r3, r2
 801b7e8:	440b      	add	r3, r1
 801b7ea:	42b3      	cmp	r3, r6
 801b7ec:	db5b      	blt.n	801b8a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b7ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b7f0:	4299      	cmp	r1, r3
 801b7f2:	da58      	bge.n	801b8a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b7f4:	f8d8 0000 	ldr.w	r0, [r8]
 801b7f8:	6803      	ldr	r3, [r0, #0]
 801b7fa:	42ae      	cmp	r6, r5
 801b7fc:	bfc8      	it	gt
 801b7fe:	1b76      	subgt	r6, r6, r5
 801b800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b802:	bfcc      	ite	gt
 801b804:	b2b6      	uxthgt	r6, r6
 801b806:	2600      	movle	r6, #0
 801b808:	4798      	blx	r3
 801b80a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b80c:	7b5a      	ldrb	r2, [r3, #13]
 801b80e:	00d1      	lsls	r1, r2, #3
 801b810:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801b814:	7a19      	ldrb	r1, [r3, #8]
 801b816:	4339      	orrs	r1, r7
 801b818:	0657      	lsls	r7, r2, #25
 801b81a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b81c:	bf44      	itt	mi
 801b81e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b822:	b209      	sxthmi	r1, r1
 801b824:	19c7      	adds	r7, r0, r7
 801b826:	1a7f      	subs	r7, r7, r1
 801b828:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b82a:	b2bf      	uxth	r7, r7
 801b82c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b830:	fa0f fa87 	sxth.w	sl, r7
 801b834:	4551      	cmp	r1, sl
 801b836:	dd3a      	ble.n	801b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801b838:	0112      	lsls	r2, r2, #4
 801b83a:	79d8      	ldrb	r0, [r3, #7]
 801b83c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b840:	4302      	orrs	r2, r0
 801b842:	4492      	add	sl, r2
 801b844:	4551      	cmp	r1, sl
 801b846:	dc2e      	bgt.n	801b8a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b848:	1bcf      	subs	r7, r1, r7
 801b84a:	b2bf      	uxth	r7, r7
 801b84c:	468a      	mov	sl, r1
 801b84e:	9319      	str	r3, [sp, #100]	; 0x64
 801b850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b852:	f8d8 0000 	ldr.w	r0, [r8]
 801b856:	681a      	ldr	r2, [r3, #0]
 801b858:	6801      	ldr	r1, [r0, #0]
 801b85a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801b85c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b85e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b860:	9218      	str	r2, [sp, #96]	; 0x60
 801b862:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b864:	4788      	blx	r1
 801b866:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b86a:	910b      	str	r1, [sp, #44]	; 0x2c
 801b86c:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b870:	910a      	str	r1, [sp, #40]	; 0x28
 801b872:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b876:	9109      	str	r1, [sp, #36]	; 0x24
 801b878:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b87a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b87e:	9305      	str	r3, [sp, #20]
 801b880:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b882:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b884:	9206      	str	r2, [sp, #24]
 801b886:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b88a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b88e:	e9cd a601 	strd	sl, r6, [sp, #4]
 801b892:	442e      	add	r6, r5
 801b894:	b236      	sxth	r6, r6
 801b896:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b898:	9600      	str	r6, [sp, #0]
 801b89a:	681a      	ldr	r2, [r3, #0]
 801b89c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b89e:	685b      	ldr	r3, [r3, #4]
 801b8a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b8a2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b8a4:	47b0      	blx	r6
 801b8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8a8:	3301      	adds	r3, #1
 801b8aa:	930e      	str	r3, [sp, #56]	; 0x38
 801b8ac:	e6e6      	b.n	801b67c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801b8ae:	2700      	movs	r7, #0
 801b8b0:	e7cd      	b.n	801b84e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 801b8b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b8b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b8b6:	3501      	adds	r5, #1
 801b8b8:	429d      	cmp	r5, r3
 801b8ba:	f6bf af77 	bge.w	801b7ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b8be:	4659      	mov	r1, fp
 801b8c0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b8c2:	f7f8 fe39 	bl	8014538 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b8c6:	4604      	mov	r4, r0
 801b8c8:	b110      	cbz	r0, 801b8d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b8ca:	280a      	cmp	r0, #10
 801b8cc:	d1f2      	bne.n	801b8b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801b8ce:	e76c      	b.n	801b7aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b8d0:	2400      	movs	r4, #0
 801b8d2:	e76b      	b.n	801b7ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b8d4:	f1bb 0f00 	cmp.w	fp, #0
 801b8d8:	f43f af5c 	beq.w	801b794 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b8dc:	e777      	b.n	801b7ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801b8de <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b8de:	b530      	push	{r4, r5, lr}
 801b8e0:	8a44      	ldrh	r4, [r0, #18]
 801b8e2:	8ac5      	ldrh	r5, [r0, #22]
 801b8e4:	82c3      	strh	r3, [r0, #22]
 801b8e6:	442c      	add	r4, r5
 801b8e8:	1ae4      	subs	r4, r4, r3
 801b8ea:	8244      	strh	r4, [r0, #18]
 801b8ec:	8b03      	ldrh	r3, [r0, #24]
 801b8ee:	8a84      	ldrh	r4, [r0, #20]
 801b8f0:	4422      	add	r2, r4
 801b8f2:	440c      	add	r4, r1
 801b8f4:	1a59      	subs	r1, r3, r1
 801b8f6:	8342      	strh	r2, [r0, #26]
 801b8f8:	8284      	strh	r4, [r0, #20]
 801b8fa:	8301      	strh	r1, [r0, #24]
 801b8fc:	bd30      	pop	{r4, r5, pc}

0801b8fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b8fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b902:	7a43      	ldrb	r3, [r0, #9]
 801b904:	1eda      	subs	r2, r3, #3
 801b906:	b087      	sub	sp, #28
 801b908:	4604      	mov	r4, r0
 801b90a:	b2d2      	uxtb	r2, r2
 801b90c:	460f      	mov	r7, r1
 801b90e:	2900      	cmp	r1, #0
 801b910:	d036      	beq.n	801b980 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801b912:	2a01      	cmp	r2, #1
 801b914:	d932      	bls.n	801b97c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801b916:	1e58      	subs	r0, r3, #1
 801b918:	f1d0 0b00 	rsbs	fp, r0, #0
 801b91c:	eb4b 0b00 	adc.w	fp, fp, r0
 801b920:	1e99      	subs	r1, r3, #2
 801b922:	424b      	negs	r3, r1
 801b924:	414b      	adcs	r3, r1
 801b926:	9303      	str	r3, [sp, #12]
 801b928:	2300      	movs	r3, #0
 801b92a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801b92e:	2500      	movs	r5, #0
 801b930:	8265      	strh	r5, [r4, #18]
 801b932:	82a5      	strh	r5, [r4, #20]
 801b934:	46a9      	mov	r9, r5
 801b936:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801b93a:	2300      	movs	r3, #0
 801b93c:	9305      	str	r3, [sp, #20]
 801b93e:	8823      	ldrh	r3, [r4, #0]
 801b940:	2b20      	cmp	r3, #32
 801b942:	d02b      	beq.n	801b99c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801b944:	eba3 020a 	sub.w	r2, r3, sl
 801b948:	4256      	negs	r6, r2
 801b94a:	4156      	adcs	r6, r2
 801b94c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b950:	4293      	cmp	r3, r2
 801b952:	d004      	beq.n	801b95e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b954:	4553      	cmp	r3, sl
 801b956:	bf16      	itet	ne
 801b958:	4699      	movne	r9, r3
 801b95a:	2601      	moveq	r6, #1
 801b95c:	2600      	movne	r6, #0
 801b95e:	ab05      	add	r3, sp, #20
 801b960:	68e2      	ldr	r2, [r4, #12]
 801b962:	7a21      	ldrb	r1, [r4, #8]
 801b964:	6860      	ldr	r0, [r4, #4]
 801b966:	f002 fd7b 	bl	801e460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b96a:	8020      	strh	r0, [r4, #0]
 801b96c:	b9c8      	cbnz	r0, 801b9a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b96e:	8b22      	ldrh	r2, [r4, #24]
 801b970:	2300      	movs	r3, #0
 801b972:	4611      	mov	r1, r2
 801b974:	4620      	mov	r0, r4
 801b976:	f7ff ffb2 	bl	801b8de <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b97a:	e066      	b.n	801ba4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b97c:	468b      	mov	fp, r1
 801b97e:	e7cf      	b.n	801b920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801b980:	3b01      	subs	r3, #1
 801b982:	2a01      	cmp	r2, #1
 801b984:	bf8c      	ite	hi
 801b986:	2200      	movhi	r2, #0
 801b988:	2201      	movls	r2, #1
 801b98a:	2b01      	cmp	r3, #1
 801b98c:	bf8c      	ite	hi
 801b98e:	2300      	movhi	r3, #0
 801b990:	2301      	movls	r3, #1
 801b992:	9202      	str	r2, [sp, #8]
 801b994:	9301      	str	r3, [sp, #4]
 801b996:	9103      	str	r1, [sp, #12]
 801b998:	468b      	mov	fp, r1
 801b99a:	e7c8      	b.n	801b92e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801b99c:	4699      	mov	r9, r3
 801b99e:	2601      	movs	r6, #1
 801b9a0:	e7dd      	b.n	801b95e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b9a2:	8ae3      	ldrh	r3, [r4, #22]
 801b9a4:	280a      	cmp	r0, #10
 801b9a6:	f103 0301 	add.w	r3, r3, #1
 801b9aa:	82e3      	strh	r3, [r4, #22]
 801b9ac:	d0df      	beq.n	801b96e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801b9ae:	9a05      	ldr	r2, [sp, #20]
 801b9b0:	bb42      	cbnz	r2, 801ba04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801b9b2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b9b6:	4298      	cmp	r0, r3
 801b9b8:	d001      	beq.n	801b9be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b9ba:	4550      	cmp	r0, sl
 801b9bc:	d1bd      	bne.n	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b9be:	8823      	ldrh	r3, [r4, #0]
 801b9c0:	8b21      	ldrh	r1, [r4, #24]
 801b9c2:	2b20      	cmp	r3, #32
 801b9c4:	d001      	beq.n	801b9ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801b9c6:	4553      	cmp	r3, sl
 801b9c8:	d131      	bne.n	801ba2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801b9ca:	2e00      	cmp	r6, #0
 801b9cc:	bf0a      	itet	eq
 801b9ce:	460d      	moveq	r5, r1
 801b9d0:	4630      	movne	r0, r6
 801b9d2:	2001      	moveq	r0, #1
 801b9d4:	440a      	add	r2, r1
 801b9d6:	8aa3      	ldrh	r3, [r4, #20]
 801b9d8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b9dc:	b292      	uxth	r2, r2
 801b9de:	8322      	strh	r2, [r4, #24]
 801b9e0:	4413      	add	r3, r2
 801b9e2:	2f00      	cmp	r7, #0
 801b9e4:	d03a      	beq.n	801ba5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801b9e6:	f1bb 0f00 	cmp.w	fp, #0
 801b9ea:	d102      	bne.n	801b9f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801b9ec:	9903      	ldr	r1, [sp, #12]
 801b9ee:	b301      	cbz	r1, 801ba32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b9f0:	b1f8      	cbz	r0, 801ba32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b9f2:	8ba1      	ldrh	r1, [r4, #28]
 801b9f4:	4419      	add	r1, r3
 801b9f6:	458c      	cmp	ip, r1
 801b9f8:	da2a      	bge.n	801ba50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b9fa:	8a61      	ldrh	r1, [r4, #18]
 801b9fc:	b341      	cbz	r1, 801ba50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b9fe:	4563      	cmp	r3, ip
 801ba00:	dd9b      	ble.n	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ba02:	e01c      	b.n	801ba3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801ba04:	8893      	ldrh	r3, [r2, #4]
 801ba06:	8023      	strh	r3, [r4, #0]
 801ba08:	f892 800d 	ldrb.w	r8, [r2, #13]
 801ba0c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801ba10:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801ba14:	f892 800a 	ldrb.w	r8, [r2, #10]
 801ba18:	ea48 0800 	orr.w	r8, r8, r0
 801ba1c:	68e0      	ldr	r0, [r4, #12]
 801ba1e:	6803      	ldr	r3, [r0, #0]
 801ba20:	4649      	mov	r1, r9
 801ba22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ba24:	4798      	blx	r3
 801ba26:	eb08 0200 	add.w	r2, r8, r0
 801ba2a:	b292      	uxth	r2, r2
 801ba2c:	e7c7      	b.n	801b9be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801ba2e:	2000      	movs	r0, #0
 801ba30:	e7d0      	b.n	801b9d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801ba32:	4563      	cmp	r3, ip
 801ba34:	dd81      	ble.n	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ba36:	8a63      	ldrh	r3, [r4, #18]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	f43f af7e 	beq.w	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ba3e:	2301      	movs	r3, #1
 801ba40:	77a3      	strb	r3, [r4, #30]
 801ba42:	8ba2      	ldrh	r2, [r4, #28]
 801ba44:	8b63      	ldrh	r3, [r4, #26]
 801ba46:	4413      	add	r3, r2
 801ba48:	8363      	strh	r3, [r4, #26]
 801ba4a:	b007      	add	sp, #28
 801ba4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba50:	2300      	movs	r3, #0
 801ba52:	4611      	mov	r1, r2
 801ba54:	4620      	mov	r0, r4
 801ba56:	f7ff ff42 	bl	801b8de <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801ba5a:	e76e      	b.n	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ba5c:	4563      	cmp	r3, ip
 801ba5e:	dd14      	ble.n	801ba8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801ba60:	9b02      	ldr	r3, [sp, #8]
 801ba62:	b113      	cbz	r3, 801ba6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801ba64:	2301      	movs	r3, #1
 801ba66:	460a      	mov	r2, r1
 801ba68:	e783      	b.n	801b972 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801ba6a:	9b01      	ldr	r3, [sp, #4]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	f43f af64 	beq.w	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ba72:	2800      	cmp	r0, #0
 801ba74:	f47f af61 	bne.w	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ba78:	b116      	cbz	r6, 801ba80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801ba7a:	2301      	movs	r3, #1
 801ba7c:	462a      	mov	r2, r5
 801ba7e:	e779      	b.n	801b974 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801ba80:	8a63      	ldrh	r3, [r4, #18]
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	f43f af59 	beq.w	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ba88:	e7df      	b.n	801ba4a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801ba8a:	2800      	cmp	r0, #0
 801ba8c:	f47f af55 	bne.w	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ba90:	2e00      	cmp	r6, #0
 801ba92:	f43f af52 	beq.w	801b93a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ba96:	2301      	movs	r3, #1
 801ba98:	462a      	mov	r2, r5
 801ba9a:	e7db      	b.n	801ba54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801ba9c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801ba9c:	b530      	push	{r4, r5, lr}
 801ba9e:	4605      	mov	r5, r0
 801baa0:	b08b      	sub	sp, #44	; 0x2c
 801baa2:	b191      	cbz	r1, 801baca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801baa4:	e9cd 3100 	strd	r3, r1, [sp]
 801baa8:	4613      	mov	r3, r2
 801baaa:	4601      	mov	r1, r0
 801baac:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801bab0:	a802      	add	r0, sp, #8
 801bab2:	f7ff fd0d 	bl	801b4d0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801bab6:	2401      	movs	r4, #1
 801bab8:	2100      	movs	r1, #0
 801baba:	a802      	add	r0, sp, #8
 801babc:	f7ff ff1f 	bl	801b8fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bac0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bac4:	b163      	cbz	r3, 801bae0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801bac6:	3401      	adds	r4, #1
 801bac8:	e7f6      	b.n	801bab8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801baca:	f002 fdc3 	bl	801e654 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bace:	2401      	movs	r4, #1
 801bad0:	280a      	cmp	r0, #10
 801bad2:	4628      	mov	r0, r5
 801bad4:	bf08      	it	eq
 801bad6:	3401      	addeq	r4, #1
 801bad8:	f002 fdbc 	bl	801e654 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801badc:	2800      	cmp	r0, #0
 801bade:	d1f7      	bne.n	801bad0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801bae0:	b2a0      	uxth	r0, r4
 801bae2:	b00b      	add	sp, #44	; 0x2c
 801bae4:	bd30      	pop	{r4, r5, pc}

0801bae6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801bae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baea:	b0e5      	sub	sp, #404	; 0x194
 801baec:	4689      	mov	r9, r1
 801baee:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801baf2:	900a      	str	r0, [sp, #40]	; 0x28
 801baf4:	461c      	mov	r4, r3
 801baf6:	f1ba 0f00 	cmp.w	sl, #0
 801bafa:	f000 80b4 	beq.w	801bc66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	f000 80b0 	beq.w	801bc66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801bb06:	7ba3      	ldrb	r3, [r4, #14]
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	f000 80ac 	beq.w	801bc66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801bb0e:	6810      	ldr	r0, [r2, #0]
 801bb10:	6851      	ldr	r1, [r2, #4]
 801bb12:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801bb16:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801bb1a:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801bb1e:	4643      	mov	r3, r8
 801bb20:	c303      	stmia	r3!, {r0, r1}
 801bb22:	2500      	movs	r5, #0
 801bb24:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801bb28:	79a2      	ldrb	r2, [r4, #6]
 801bb2a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801bb2e:	a90f      	add	r1, sp, #60	; 0x3c
 801bb30:	4640      	mov	r0, r8
 801bb32:	950f      	str	r5, [sp, #60]	; 0x3c
 801bb34:	f7ff fd42 	bl	801b5bc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801bb38:	a90f      	add	r1, sp, #60	; 0x3c
 801bb3a:	4608      	mov	r0, r1
 801bb3c:	79a2      	ldrb	r2, [r4, #6]
 801bb3e:	af19      	add	r7, sp, #100	; 0x64
 801bb40:	f7ff fd3c 	bl	801b5bc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801bb44:	4638      	mov	r0, r7
 801bb46:	f002 f938 	bl	801ddba <_ZN8touchgfx12TextProviderC1Ev>
 801bb4a:	6820      	ldr	r0, [r4, #0]
 801bb4c:	6803      	ldr	r3, [r0, #0]
 801bb4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb50:	4798      	blx	r3
 801bb52:	4606      	mov	r6, r0
 801bb54:	6820      	ldr	r0, [r4, #0]
 801bb56:	6803      	ldr	r3, [r0, #0]
 801bb58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bb5a:	4798      	blx	r3
 801bb5c:	4633      	mov	r3, r6
 801bb5e:	9000      	str	r0, [sp, #0]
 801bb60:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801bb62:	4651      	mov	r1, sl
 801bb64:	4638      	mov	r0, r7
 801bb66:	f002 f97b 	bl	801de60 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bb6a:	6820      	ldr	r0, [r4, #0]
 801bb6c:	7923      	ldrb	r3, [r4, #4]
 801bb6e:	9308      	str	r3, [sp, #32]
 801bb70:	6803      	ldr	r3, [r0, #0]
 801bb72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb74:	4798      	blx	r3
 801bb76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb7a:	181e      	adds	r6, r3, r0
 801bb7c:	42ae      	cmp	r6, r5
 801bb7e:	dd06      	ble.n	801bb8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801bb80:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801bb84:	4282      	cmp	r2, r0
 801bb86:	bfa4      	itt	ge
 801bb88:	189d      	addge	r5, r3, r2
 801bb8a:	fb95 f5f6 	sdivge	r5, r5, r6
 801bb8e:	a832      	add	r0, sp, #200	; 0xc8
 801bb90:	f002 f913 	bl	801ddba <_ZN8touchgfx12TextProviderC1Ev>
 801bb94:	7c23      	ldrb	r3, [r4, #16]
 801bb96:	b17b      	cbz	r3, 801bbb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801bb98:	6820      	ldr	r0, [r4, #0]
 801bb9a:	6803      	ldr	r3, [r0, #0]
 801bb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb9e:	4798      	blx	r3
 801bba0:	4683      	mov	fp, r0
 801bba2:	6820      	ldr	r0, [r4, #0]
 801bba4:	6803      	ldr	r3, [r0, #0]
 801bba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bba8:	4798      	blx	r3
 801bbaa:	465b      	mov	r3, fp
 801bbac:	9000      	str	r0, [sp, #0]
 801bbae:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801bbb0:	4651      	mov	r1, sl
 801bbb2:	a832      	add	r0, sp, #200	; 0xc8
 801bbb4:	f002 f954 	bl	801de60 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bbb8:	7be1      	ldrb	r1, [r4, #15]
 801bbba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801bbbe:	7963      	ldrb	r3, [r4, #5]
 801bbc0:	1a52      	subs	r2, r2, r1
 801bbc2:	7c21      	ldrb	r1, [r4, #16]
 801bbc4:	9101      	str	r1, [sp, #4]
 801bbc6:	6821      	ldr	r1, [r4, #0]
 801bbc8:	9100      	str	r1, [sp, #0]
 801bbca:	b292      	uxth	r2, r2
 801bbcc:	a932      	add	r1, sp, #200	; 0xc8
 801bbce:	a811      	add	r0, sp, #68	; 0x44
 801bbd0:	f7ff fc7e 	bl	801b4d0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801bbd4:	7c23      	ldrb	r3, [r4, #16]
 801bbd6:	b9bb      	cbnz	r3, 801bc08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801bbd8:	fa1f fa86 	uxth.w	sl, r6
 801bbdc:	2d00      	cmp	r5, #0
 801bbde:	dd45      	ble.n	801bc6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801bbe0:	4638      	mov	r0, r7
 801bbe2:	f002 fd37 	bl	801e654 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bbe6:	2800      	cmp	r0, #0
 801bbe8:	d03d      	beq.n	801bc66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801bbea:	280a      	cmp	r0, #10
 801bbec:	d1f6      	bne.n	801bbdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801bbee:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801bbf2:	4453      	add	r3, sl
 801bbf4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bbf8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801bbfc:	eba3 030a 	sub.w	r3, r3, sl
 801bc00:	3d01      	subs	r5, #1
 801bc02:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801bc06:	e7e9      	b.n	801bbdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801bc08:	0073      	lsls	r3, r6, #1
 801bc0a:	9309      	str	r3, [sp, #36]	; 0x24
 801bc0c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801bc10:	fa1f fa86 	uxth.w	sl, r6
 801bc14:	2d00      	cmp	r5, #0
 801bc16:	dd29      	ble.n	801bc6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801bc18:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801bc1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc1e:	428b      	cmp	r3, r1
 801bc20:	bfd4      	ite	le
 801bc22:	2100      	movle	r1, #0
 801bc24:	2101      	movgt	r1, #1
 801bc26:	a811      	add	r0, sp, #68	; 0x44
 801bc28:	f7ff fe69 	bl	801b8fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bc2c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801bc30:	3b01      	subs	r3, #1
 801bc32:	b29b      	uxth	r3, r3
 801bc34:	455b      	cmp	r3, fp
 801bc36:	930b      	str	r3, [sp, #44]	; 0x2c
 801bc38:	d005      	beq.n	801bc46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801bc3a:	7961      	ldrb	r1, [r4, #5]
 801bc3c:	4638      	mov	r0, r7
 801bc3e:	f7f8 fc7b 	bl	8014538 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bc42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc44:	e7f4      	b.n	801bc30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801bc46:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801bc4a:	4453      	add	r3, sl
 801bc4c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bc50:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801bc54:	eba3 030a 	sub.w	r3, r3, sl
 801bc58:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801bc5c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bc60:	3d01      	subs	r5, #1
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d1d6      	bne.n	801bc14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801bc66:	b065      	add	sp, #404	; 0x194
 801bc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc6c:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801bc70:	ad4b      	add	r5, sp, #300	; 0x12c
 801bc72:	f04f 0b00 	mov.w	fp, #0
 801bc76:	7c23      	ldrb	r3, [r4, #16]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d067      	beq.n	801bd4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801bc7c:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801bc80:	458a      	cmp	sl, r1
 801bc82:	bfd4      	ite	le
 801bc84:	2100      	movle	r1, #0
 801bc86:	2101      	movgt	r1, #1
 801bc88:	a811      	add	r0, sp, #68	; 0x44
 801bc8a:	f7ff fe38 	bl	801b8fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801bc8e:	9b08      	ldr	r3, [sp, #32]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d056      	beq.n	801bd42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801bc94:	7c23      	ldrb	r3, [r4, #16]
 801bc96:	9309      	str	r3, [sp, #36]	; 0x24
 801bc98:	2264      	movs	r2, #100	; 0x64
 801bc9a:	4639      	mov	r1, r7
 801bc9c:	4628      	mov	r0, r5
 801bc9e:	f012 fc39 	bl	802e514 <memcpy>
 801bca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d059      	beq.n	801bd5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801bca8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801bcac:	7922      	ldrb	r2, [r4, #4]
 801bcae:	2a01      	cmp	r2, #1
 801bcb0:	d13d      	bne.n	801bd2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801bcb2:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801bcb6:	1ac0      	subs	r0, r0, r3
 801bcb8:	2302      	movs	r3, #2
 801bcba:	fb90 f0f3 	sdiv	r0, r0, r3
 801bcbe:	b200      	sxth	r0, r0
 801bcc0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801bcc4:	4418      	add	r0, r3
 801bcc6:	7c23      	ldrb	r3, [r4, #16]
 801bcc8:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d03a      	beq.n	801bd46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801bcd0:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801bcd4:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801bcd8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801bcdc:	9500      	str	r5, [sp, #0]
 801bcde:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801bce2:	e9cd b703 	strd	fp, r7, [sp, #12]
 801bce6:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801bcea:	464a      	mov	r2, r9
 801bcec:	2100      	movs	r1, #0
 801bcee:	980a      	ldr	r0, [sp, #40]	; 0x28
 801bcf0:	f7ff fc95 	bl	801b61e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801bcf4:	2800      	cmp	r0, #0
 801bcf6:	d1b6      	bne.n	801bc66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801bcf8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801bcfc:	b2b2      	uxth	r2, r6
 801bcfe:	4611      	mov	r1, r2
 801bd00:	4413      	add	r3, r2
 801bd02:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801bd06:	1a52      	subs	r2, r2, r1
 801bd08:	7c21      	ldrb	r1, [r4, #16]
 801bd0a:	b21b      	sxth	r3, r3
 801bd0c:	b212      	sxth	r2, r2
 801bd0e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bd12:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801bd16:	b109      	cbz	r1, 801bd1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801bd18:	42b2      	cmp	r2, r6
 801bd1a:	dba4      	blt.n	801bc66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801bd1c:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801bd20:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801bd24:	440a      	add	r2, r1
 801bd26:	b212      	sxth	r2, r2
 801bd28:	4293      	cmp	r3, r2
 801bd2a:	dda4      	ble.n	801bc76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801bd2c:	e79b      	b.n	801bc66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801bd2e:	2a02      	cmp	r2, #2
 801bd30:	d105      	bne.n	801bd3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801bd32:	7be2      	ldrb	r2, [r4, #15]
 801bd34:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801bd38:	1a80      	subs	r0, r0, r2
 801bd3a:	1ac0      	subs	r0, r0, r3
 801bd3c:	e7bf      	b.n	801bcbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801bd3e:	2000      	movs	r0, #0
 801bd40:	e7be      	b.n	801bcc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801bd42:	7be0      	ldrb	r0, [r4, #15]
 801bd44:	e7bc      	b.n	801bcc0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801bd46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801bd4a:	e7c3      	b.n	801bcd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801bd4c:	9b08      	ldr	r3, [sp, #32]
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d0f7      	beq.n	801bd42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801bd52:	2264      	movs	r2, #100	; 0x64
 801bd54:	4639      	mov	r1, r7
 801bd56:	4628      	mov	r0, r5
 801bd58:	f012 fbdc 	bl	802e514 <memcpy>
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801bd62:	6821      	ldr	r1, [r4, #0]
 801bd64:	4628      	mov	r0, r5
 801bd66:	f7ff fbed 	bl	801b544 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801bd6a:	b203      	sxth	r3, r0
 801bd6c:	e79e      	b.n	801bcac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801bd6e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801bd6e:	b510      	push	{r4, lr}
 801bd70:	2b02      	cmp	r3, #2
 801bd72:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bd76:	d00b      	beq.n	801bd90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801bd78:	2b03      	cmp	r3, #3
 801bd7a:	d00e      	beq.n	801bd9a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801bd7c:	2b01      	cmp	r3, #1
 801bd7e:	d001      	beq.n	801bd84 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801bd80:	1860      	adds	r0, r4, r1
 801bd82:	bd10      	pop	{r4, pc}
 801bd84:	8880      	ldrh	r0, [r0, #4]
 801bd86:	4420      	add	r0, r4
 801bd88:	b200      	sxth	r0, r0
 801bd8a:	1a80      	subs	r0, r0, r2
 801bd8c:	3801      	subs	r0, #1
 801bd8e:	e7f8      	b.n	801bd82 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801bd90:	8880      	ldrh	r0, [r0, #4]
 801bd92:	4420      	add	r0, r4
 801bd94:	b200      	sxth	r0, r0
 801bd96:	1a40      	subs	r0, r0, r1
 801bd98:	e7f8      	b.n	801bd8c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801bd9a:	18a0      	adds	r0, r4, r2
 801bd9c:	e7f1      	b.n	801bd82 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801bd9e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801bd9e:	b510      	push	{r4, lr}
 801bda0:	2b02      	cmp	r3, #2
 801bda2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801bda6:	d006      	beq.n	801bdb6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801bda8:	2b03      	cmp	r3, #3
 801bdaa:	d00a      	beq.n	801bdc2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801bdac:	2b01      	cmp	r3, #1
 801bdae:	bf14      	ite	ne
 801bdb0:	18a0      	addne	r0, r4, r2
 801bdb2:	1860      	addeq	r0, r4, r1
 801bdb4:	bd10      	pop	{r4, pc}
 801bdb6:	88c0      	ldrh	r0, [r0, #6]
 801bdb8:	4420      	add	r0, r4
 801bdba:	b200      	sxth	r0, r0
 801bdbc:	1a80      	subs	r0, r0, r2
 801bdbe:	3801      	subs	r0, #1
 801bdc0:	e7f8      	b.n	801bdb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801bdc2:	88c0      	ldrh	r0, [r0, #6]
 801bdc4:	4420      	add	r0, r4
 801bdc6:	b200      	sxth	r0, r0
 801bdc8:	1a40      	subs	r0, r0, r1
 801bdca:	e7f8      	b.n	801bdbe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801bdcc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801bdcc:	4b01      	ldr	r3, [pc, #4]	; (801bdd4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801bdce:	2200      	movs	r2, #0
 801bdd0:	601a      	str	r2, [r3, #0]
 801bdd2:	4770      	bx	lr
 801bdd4:	20009828 	.word	0x20009828

0801bdd8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801bdd8:	4603      	mov	r3, r0
 801bdda:	b1c8      	cbz	r0, 801be10 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801bddc:	0c02      	lsrs	r2, r0, #16
 801bdde:	0412      	lsls	r2, r2, #16
 801bde0:	b9a2      	cbnz	r2, 801be0c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801bde2:	0403      	lsls	r3, r0, #16
 801bde4:	2010      	movs	r0, #16
 801bde6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bdea:	bf04      	itt	eq
 801bdec:	021b      	lsleq	r3, r3, #8
 801bdee:	3008      	addeq	r0, #8
 801bdf0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bdf4:	bf04      	itt	eq
 801bdf6:	011b      	lsleq	r3, r3, #4
 801bdf8:	3004      	addeq	r0, #4
 801bdfa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bdfe:	bf04      	itt	eq
 801be00:	009b      	lsleq	r3, r3, #2
 801be02:	3002      	addeq	r0, #2
 801be04:	2b00      	cmp	r3, #0
 801be06:	db04      	blt.n	801be12 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801be08:	3001      	adds	r0, #1
 801be0a:	4770      	bx	lr
 801be0c:	2000      	movs	r0, #0
 801be0e:	e7ea      	b.n	801bde6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801be10:	2020      	movs	r0, #32
 801be12:	4770      	bx	lr

0801be14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801be14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be18:	b087      	sub	sp, #28
 801be1a:	4681      	mov	r9, r0
 801be1c:	4698      	mov	r8, r3
 801be1e:	4610      	mov	r0, r2
 801be20:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801be24:	460d      	mov	r5, r1
 801be26:	b981      	cbnz	r1, 801be4a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801be28:	b14b      	cbz	r3, 801be3e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801be2a:	460b      	mov	r3, r1
 801be2c:	e9cd 4700 	strd	r4, r7, [sp]
 801be30:	464a      	mov	r2, r9
 801be32:	4641      	mov	r1, r8
 801be34:	f7ff ffee 	bl	801be14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801be38:	b007      	add	sp, #28
 801be3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be3e:	f04f 33ff 	mov.w	r3, #4294967295
 801be42:	603b      	str	r3, [r7, #0]
 801be44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801be48:	e7f6      	b.n	801be38 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801be4a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801be4e:	d107      	bne.n	801be60 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801be50:	fb09 f602 	mul.w	r6, r9, r2
 801be54:	fbb6 f0f4 	udiv	r0, r6, r4
 801be58:	fb04 6610 	mls	r6, r4, r0, r6
 801be5c:	603e      	str	r6, [r7, #0]
 801be5e:	e7eb      	b.n	801be38 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801be60:	2601      	movs	r6, #1
 801be62:	408e      	lsls	r6, r1
 801be64:	3e01      	subs	r6, #1
 801be66:	4016      	ands	r6, r2
 801be68:	fa09 fb01 	lsl.w	fp, r9, r1
 801be6c:	4630      	mov	r0, r6
 801be6e:	fbbb f3f4 	udiv	r3, fp, r4
 801be72:	9302      	str	r3, [sp, #8]
 801be74:	fb0a f303 	mul.w	r3, sl, r3
 801be78:	9303      	str	r3, [sp, #12]
 801be7a:	f7ff ffad 	bl	801bdd8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801be7e:	464a      	mov	r2, r9
 801be80:	460b      	mov	r3, r1
 801be82:	e9cd 4700 	strd	r4, r7, [sp]
 801be86:	4601      	mov	r1, r0
 801be88:	4630      	mov	r0, r6
 801be8a:	f7ff ffc3 	bl	801be14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801be8e:	9b02      	ldr	r3, [sp, #8]
 801be90:	fb04 bb13 	mls	fp, r4, r3, fp
 801be94:	4606      	mov	r6, r0
 801be96:	4658      	mov	r0, fp
 801be98:	eb05 0108 	add.w	r1, r5, r8
 801be9c:	f7ff ff9c 	bl	801bdd8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bea0:	ab05      	add	r3, sp, #20
 801bea2:	e9cd 4300 	strd	r4, r3, [sp]
 801bea6:	465a      	mov	r2, fp
 801bea8:	4603      	mov	r3, r0
 801beaa:	4650      	mov	r0, sl
 801beac:	f7ff ffb2 	bl	801be14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801beb0:	6839      	ldr	r1, [r7, #0]
 801beb2:	9a05      	ldr	r2, [sp, #20]
 801beb4:	9b03      	ldr	r3, [sp, #12]
 801beb6:	4411      	add	r1, r2
 801beb8:	fbb1 f2f4 	udiv	r2, r1, r4
 801bebc:	18d3      	adds	r3, r2, r3
 801bebe:	441e      	add	r6, r3
 801bec0:	fb04 1412 	mls	r4, r4, r2, r1
 801bec4:	4430      	add	r0, r6
 801bec6:	603c      	str	r4, [r7, #0]
 801bec8:	e7b6      	b.n	801be38 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801beca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801beca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bece:	b085      	sub	sp, #20
 801bed0:	f1b0 0900 	subs.w	r9, r0, #0
 801bed4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bed6:	461d      	mov	r5, r3
 801bed8:	bfbf      	itttt	lt
 801beda:	6823      	ldrlt	r3, [r4, #0]
 801bedc:	425b      	neglt	r3, r3
 801bede:	f1c9 0900 	rsblt	r9, r9, #0
 801bee2:	6023      	strlt	r3, [r4, #0]
 801bee4:	bfb4      	ite	lt
 801bee6:	f04f 36ff 	movlt.w	r6, #4294967295
 801beea:	2601      	movge	r6, #1
 801beec:	2a00      	cmp	r2, #0
 801beee:	4617      	mov	r7, r2
 801bef0:	da04      	bge.n	801befc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801bef2:	6823      	ldr	r3, [r4, #0]
 801bef4:	425b      	negs	r3, r3
 801bef6:	4257      	negs	r7, r2
 801bef8:	4276      	negs	r6, r6
 801befa:	6023      	str	r3, [r4, #0]
 801befc:	2d00      	cmp	r5, #0
 801befe:	4638      	mov	r0, r7
 801bf00:	bfba      	itte	lt
 801bf02:	426d      	neglt	r5, r5
 801bf04:	f04f 38ff 	movlt.w	r8, #4294967295
 801bf08:	f04f 0801 	movge.w	r8, #1
 801bf0c:	f7ff ff64 	bl	801bdd8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bf10:	ab03      	add	r3, sp, #12
 801bf12:	e9cd 5300 	strd	r5, r3, [sp]
 801bf16:	463a      	mov	r2, r7
 801bf18:	4603      	mov	r3, r0
 801bf1a:	4648      	mov	r0, r9
 801bf1c:	f7ff ff7a 	bl	801be14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bf20:	6823      	ldr	r3, [r4, #0]
 801bf22:	9a03      	ldr	r2, [sp, #12]
 801bf24:	4546      	cmp	r6, r8
 801bf26:	441a      	add	r2, r3
 801bf28:	fb92 f3f5 	sdiv	r3, r2, r5
 801bf2c:	4418      	add	r0, r3
 801bf2e:	bf18      	it	ne
 801bf30:	4240      	negne	r0, r0
 801bf32:	fb05 2313 	mls	r3, r5, r3, r2
 801bf36:	1c72      	adds	r2, r6, #1
 801bf38:	6023      	str	r3, [r4, #0]
 801bf3a:	d105      	bne.n	801bf48 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	f1c3 0200 	rsb	r2, r3, #0
 801bf42:	db0b      	blt.n	801bf5c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801bf44:	6022      	str	r2, [r4, #0]
 801bf46:	e006      	b.n	801bf56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bf48:	2e01      	cmp	r6, #1
 801bf4a:	d104      	bne.n	801bf56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	da02      	bge.n	801bf56 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bf50:	442b      	add	r3, r5
 801bf52:	3801      	subs	r0, #1
 801bf54:	6023      	str	r3, [r4, #0]
 801bf56:	b005      	add	sp, #20
 801bf58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf5c:	3801      	subs	r0, #1
 801bf5e:	1b52      	subs	r2, r2, r5
 801bf60:	e7f0      	b.n	801bf44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801bf64 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801bf64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bf68:	4c1c      	ldr	r4, [pc, #112]	; (801bfdc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801bf6a:	6807      	ldr	r7, [r0, #0]
 801bf6c:	69a3      	ldr	r3, [r4, #24]
 801bf6e:	4605      	mov	r5, r0
 801bf70:	b92b      	cbnz	r3, 801bf7e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801bf72:	6840      	ldr	r0, [r0, #4]
 801bf74:	e9c5 7000 	strd	r7, r0, [r5]
 801bf78:	b004      	add	sp, #16
 801bf7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf7e:	68a2      	ldr	r2, [r4, #8]
 801bf80:	6820      	ldr	r0, [r4, #0]
 801bf82:	ae04      	add	r6, sp, #16
 801bf84:	f04f 0802 	mov.w	r8, #2
 801bf88:	fb93 f1f8 	sdiv	r1, r3, r8
 801bf8c:	440a      	add	r2, r1
 801bf8e:	f846 2d04 	str.w	r2, [r6, #-4]!
 801bf92:	69e1      	ldr	r1, [r4, #28]
 801bf94:	9600      	str	r6, [sp, #0]
 801bf96:	463a      	mov	r2, r7
 801bf98:	f7ff ff97 	bl	801beca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bf9c:	69a3      	ldr	r3, [r4, #24]
 801bf9e:	686a      	ldr	r2, [r5, #4]
 801bfa0:	6a21      	ldr	r1, [r4, #32]
 801bfa2:	9600      	str	r6, [sp, #0]
 801bfa4:	4607      	mov	r7, r0
 801bfa6:	6860      	ldr	r0, [r4, #4]
 801bfa8:	f7ff ff8f 	bl	801beca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bfac:	6962      	ldr	r2, [r4, #20]
 801bfae:	69a3      	ldr	r3, [r4, #24]
 801bfb0:	fb93 f8f8 	sdiv	r8, r3, r8
 801bfb4:	4442      	add	r2, r8
 801bfb6:	9203      	str	r2, [sp, #12]
 801bfb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bfba:	682a      	ldr	r2, [r5, #0]
 801bfbc:	9600      	str	r6, [sp, #0]
 801bfbe:	4407      	add	r7, r0
 801bfc0:	68e0      	ldr	r0, [r4, #12]
 801bfc2:	f7ff ff82 	bl	801beca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bfc6:	9600      	str	r6, [sp, #0]
 801bfc8:	4680      	mov	r8, r0
 801bfca:	69a3      	ldr	r3, [r4, #24]
 801bfcc:	686a      	ldr	r2, [r5, #4]
 801bfce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801bfd0:	6920      	ldr	r0, [r4, #16]
 801bfd2:	f7ff ff7a 	bl	801beca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bfd6:	4440      	add	r0, r8
 801bfd8:	e7cc      	b.n	801bf74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801bfda:	bf00      	nop
 801bfdc:	2000982c 	.word	0x2000982c

0801bfe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801bfe0:	4b07      	ldr	r3, [pc, #28]	; (801c000 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801bfe2:	781b      	ldrb	r3, [r3, #0]
 801bfe4:	2b01      	cmp	r3, #1
 801bfe6:	d109      	bne.n	801bffc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801bfe8:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bfec:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bff0:	8003      	strh	r3, [r0, #0]
 801bff2:	4b04      	ldr	r3, [pc, #16]	; (801c004 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801bff4:	881b      	ldrh	r3, [r3, #0]
 801bff6:	3b01      	subs	r3, #1
 801bff8:	1a9b      	subs	r3, r3, r2
 801bffa:	800b      	strh	r3, [r1, #0]
 801bffc:	4770      	bx	lr
 801bffe:	bf00      	nop
 801c000:	20009818 	.word	0x20009818
 801c004:	2000981c 	.word	0x2000981c

0801c008 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801c008:	b510      	push	{r4, lr}
 801c00a:	4b07      	ldr	r3, [pc, #28]	; (801c028 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801c00c:	781b      	ldrb	r3, [r3, #0]
 801c00e:	2b01      	cmp	r3, #1
 801c010:	d108      	bne.n	801c024 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801c012:	4b06      	ldr	r3, [pc, #24]	; (801c02c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801c014:	880c      	ldrh	r4, [r1, #0]
 801c016:	881b      	ldrh	r3, [r3, #0]
 801c018:	f9b0 2000 	ldrsh.w	r2, [r0]
 801c01c:	3b01      	subs	r3, #1
 801c01e:	1b1b      	subs	r3, r3, r4
 801c020:	8003      	strh	r3, [r0, #0]
 801c022:	800a      	strh	r2, [r1, #0]
 801c024:	bd10      	pop	{r4, pc}
 801c026:	bf00      	nop
 801c028:	20009818 	.word	0x20009818
 801c02c:	2000981c 	.word	0x2000981c

0801c030 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801c030:	b510      	push	{r4, lr}
 801c032:	4b0a      	ldr	r3, [pc, #40]	; (801c05c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801c034:	781b      	ldrb	r3, [r3, #0]
 801c036:	2b01      	cmp	r3, #1
 801c038:	d10e      	bne.n	801c058 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801c03a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c03e:	8843      	ldrh	r3, [r0, #2]
 801c040:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c044:	8044      	strh	r4, [r0, #2]
 801c046:	18ca      	adds	r2, r1, r3
 801c048:	4b05      	ldr	r3, [pc, #20]	; (801c060 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801c04a:	881b      	ldrh	r3, [r3, #0]
 801c04c:	1a9b      	subs	r3, r3, r2
 801c04e:	8003      	strh	r3, [r0, #0]
 801c050:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c054:	80c3      	strh	r3, [r0, #6]
 801c056:	8081      	strh	r1, [r0, #4]
 801c058:	bd10      	pop	{r4, pc}
 801c05a:	bf00      	nop
 801c05c:	20009818 	.word	0x20009818
 801c060:	2000981c 	.word	0x2000981c

0801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801c064:	4b08      	ldr	r3, [pc, #32]	; (801c088 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801c066:	781b      	ldrb	r3, [r3, #0]
 801c068:	2b01      	cmp	r3, #1
 801c06a:	d10c      	bne.n	801c086 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801c06c:	8803      	ldrh	r3, [r0, #0]
 801c06e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c072:	8842      	ldrh	r2, [r0, #2]
 801c074:	8002      	strh	r2, [r0, #0]
 801c076:	185a      	adds	r2, r3, r1
 801c078:	4b04      	ldr	r3, [pc, #16]	; (801c08c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801c07a:	881b      	ldrh	r3, [r3, #0]
 801c07c:	1a9b      	subs	r3, r3, r2
 801c07e:	8043      	strh	r3, [r0, #2]
 801c080:	88c3      	ldrh	r3, [r0, #6]
 801c082:	8083      	strh	r3, [r0, #4]
 801c084:	80c1      	strh	r1, [r0, #6]
 801c086:	4770      	bx	lr
 801c088:	20009818 	.word	0x20009818
 801c08c:	2000981c 	.word	0x2000981c

0801c090 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801c090:	b510      	push	{r4, lr}
 801c092:	4b07      	ldr	r3, [pc, #28]	; (801c0b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801c094:	781b      	ldrb	r3, [r3, #0]
 801c096:	2b01      	cmp	r3, #1
 801c098:	d108      	bne.n	801c0ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801c09a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c09e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801c0a2:	8003      	strh	r3, [r0, #0]
 801c0a4:	8893      	ldrh	r3, [r2, #4]
 801c0a6:	3b01      	subs	r3, #1
 801c0a8:	1b1b      	subs	r3, r3, r4
 801c0aa:	800b      	strh	r3, [r1, #0]
 801c0ac:	bd10      	pop	{r4, pc}
 801c0ae:	bf00      	nop
 801c0b0:	20009818 	.word	0x20009818

0801c0b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801c0b4:	4b0b      	ldr	r3, [pc, #44]	; (801c0e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801c0b6:	781b      	ldrb	r3, [r3, #0]
 801c0b8:	2b01      	cmp	r3, #1
 801c0ba:	d111      	bne.n	801c0e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801c0bc:	680b      	ldr	r3, [r1, #0]
 801c0be:	ed90 7a00 	vldr	s14, [r0]
 801c0c2:	6003      	str	r3, [r0, #0]
 801c0c4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801c0c8:	eddf 6a07 	vldr	s13, [pc, #28]	; 801c0e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801c0cc:	ee07 3a90 	vmov	s15, r3
 801c0d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c0d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c0d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c0dc:	edc1 7a00 	vstr	s15, [r1]
 801c0e0:	4770      	bx	lr
 801c0e2:	bf00      	nop
 801c0e4:	20009818 	.word	0x20009818
 801c0e8:	38d1b717 	.word	0x38d1b717

0801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801c0ec:	b510      	push	{r4, lr}
 801c0ee:	4b0a      	ldr	r3, [pc, #40]	; (801c118 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801c0f0:	781b      	ldrb	r3, [r3, #0]
 801c0f2:	2b01      	cmp	r3, #1
 801c0f4:	460a      	mov	r2, r1
 801c0f6:	d10d      	bne.n	801c114 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801c0f8:	8881      	ldrh	r1, [r0, #4]
 801c0fa:	8803      	ldrh	r3, [r0, #0]
 801c0fc:	440b      	add	r3, r1
 801c0fe:	4601      	mov	r1, r0
 801c100:	3b01      	subs	r3, #1
 801c102:	f821 3b02 	strh.w	r3, [r1], #2
 801c106:	f7ff ffc3 	bl	801c090 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801c10a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801c10e:	88c2      	ldrh	r2, [r0, #6]
 801c110:	8082      	strh	r2, [r0, #4]
 801c112:	80c3      	strh	r3, [r0, #6]
 801c114:	bd10      	pop	{r4, pc}
 801c116:	bf00      	nop
 801c118:	20009818 	.word	0x20009818

0801c11c <_ZN8touchgfx11Application13requestRedrawEv>:
 801c11c:	4b06      	ldr	r3, [pc, #24]	; (801c138 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801c11e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c122:	4b06      	ldr	r3, [pc, #24]	; (801c13c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801c124:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801c128:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c12c:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801c130:	2100      	movs	r1, #0
 801c132:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801c136:	4770      	bx	lr
 801c138:	20009814 	.word	0x20009814
 801c13c:	20009816 	.word	0x20009816

0801c140 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801c140:	4b03      	ldr	r3, [pc, #12]	; (801c150 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801c142:	6818      	ldr	r0, [r3, #0]
 801c144:	b110      	cbz	r0, 801c14c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801c146:	6803      	ldr	r3, [r0, #0]
 801c148:	699b      	ldr	r3, [r3, #24]
 801c14a:	4718      	bx	r3
 801c14c:	4770      	bx	lr
 801c14e:	bf00      	nop
 801c150:	2000985c 	.word	0x2000985c

0801c154 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801c154:	4770      	bx	lr
	...

0801c158 <_ZN8touchgfx11Application4drawEv>:
 801c158:	b507      	push	{r0, r1, r2, lr}
 801c15a:	4b09      	ldr	r3, [pc, #36]	; (801c180 <_ZN8touchgfx11Application4drawEv+0x28>)
 801c15c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c160:	4b08      	ldr	r3, [pc, #32]	; (801c184 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801c162:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c166:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c16a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c16e:	6803      	ldr	r3, [r0, #0]
 801c170:	2100      	movs	r1, #0
 801c172:	9100      	str	r1, [sp, #0]
 801c174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c176:	4669      	mov	r1, sp
 801c178:	4798      	blx	r3
 801c17a:	b003      	add	sp, #12
 801c17c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c180:	20009814 	.word	0x20009814
 801c184:	20009816 	.word	0x20009816

0801c188 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801c188:	4b03      	ldr	r3, [pc, #12]	; (801c198 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801c18a:	6818      	ldr	r0, [r3, #0]
 801c18c:	b110      	cbz	r0, 801c194 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801c18e:	6803      	ldr	r3, [r0, #0]
 801c190:	69db      	ldr	r3, [r3, #28]
 801c192:	4718      	bx	r3
 801c194:	4770      	bx	lr
 801c196:	bf00      	nop
 801c198:	2000985c 	.word	0x2000985c

0801c19c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801c19c:	4b03      	ldr	r3, [pc, #12]	; (801c1ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801c19e:	6818      	ldr	r0, [r3, #0]
 801c1a0:	b110      	cbz	r0, 801c1a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801c1a2:	6803      	ldr	r3, [r0, #0]
 801c1a4:	6a1b      	ldr	r3, [r3, #32]
 801c1a6:	4718      	bx	r3
 801c1a8:	4770      	bx	lr
 801c1aa:	bf00      	nop
 801c1ac:	2000985c 	.word	0x2000985c

0801c1b0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801c1b0:	4b03      	ldr	r3, [pc, #12]	; (801c1c0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801c1b2:	6818      	ldr	r0, [r3, #0]
 801c1b4:	b110      	cbz	r0, 801c1bc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801c1b6:	6803      	ldr	r3, [r0, #0]
 801c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1ba:	4718      	bx	r3
 801c1bc:	4770      	bx	lr
 801c1be:	bf00      	nop
 801c1c0:	2000985c 	.word	0x2000985c

0801c1c4 <_ZN8touchgfx11Application15handleTickEventEv>:
 801c1c4:	b570      	push	{r4, r5, r6, lr}
 801c1c6:	4d38      	ldr	r5, [pc, #224]	; (801c2a8 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801c1c8:	4604      	mov	r4, r0
 801c1ca:	6828      	ldr	r0, [r5, #0]
 801c1cc:	b140      	cbz	r0, 801c1e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801c1ce:	7a03      	ldrb	r3, [r0, #8]
 801c1d0:	b933      	cbnz	r3, 801c1e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801c1d2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801c1d6:	6803      	ldr	r3, [r0, #0]
 801c1d8:	689b      	ldr	r3, [r3, #8]
 801c1da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c1de:	4718      	bx	r3
 801c1e0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801c1e4:	b97b      	cbnz	r3, 801c206 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c1e6:	b170      	cbz	r0, 801c206 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c1e8:	7a03      	ldrb	r3, [r0, #8]
 801c1ea:	b163      	cbz	r3, 801c206 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801c1ec:	4b2f      	ldr	r3, [pc, #188]	; (801c2ac <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801c1ee:	6818      	ldr	r0, [r3, #0]
 801c1f0:	b110      	cbz	r0, 801c1f8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801c1f2:	6803      	ldr	r3, [r0, #0]
 801c1f4:	691b      	ldr	r3, [r3, #16]
 801c1f6:	4798      	blx	r3
 801c1f8:	6828      	ldr	r0, [r5, #0]
 801c1fa:	6803      	ldr	r3, [r0, #0]
 801c1fc:	68db      	ldr	r3, [r3, #12]
 801c1fe:	4798      	blx	r3
 801c200:	2301      	movs	r3, #1
 801c202:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801c206:	2500      	movs	r5, #0
 801c208:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801c20c:	42a8      	cmp	r0, r5
 801c20e:	dd0c      	ble.n	801c22a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801c210:	1963      	adds	r3, r4, r5
 801c212:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801c216:	b132      	cbz	r2, 801c226 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801c218:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801c21c:	4413      	add	r3, r2
 801c21e:	6858      	ldr	r0, [r3, #4]
 801c220:	6803      	ldr	r3, [r0, #0]
 801c222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c224:	4798      	blx	r3
 801c226:	3501      	adds	r5, #1
 801c228:	e7ee      	b.n	801c208 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801c22a:	2300      	movs	r3, #0
 801c22c:	461a      	mov	r2, r3
 801c22e:	4298      	cmp	r0, r3
 801c230:	d10f      	bne.n	801c252 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801c232:	1d25      	adds	r5, r4, #4
 801c234:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801c238:	4291      	cmp	r1, r2
 801c23a:	dd2d      	ble.n	801c298 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801c23c:	1e48      	subs	r0, r1, #1
 801c23e:	b280      	uxth	r0, r0
 801c240:	4288      	cmp	r0, r1
 801c242:	d31a      	bcc.n	801c27a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801c244:	4b1a      	ldr	r3, [pc, #104]	; (801c2b0 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801c246:	4a1b      	ldr	r2, [pc, #108]	; (801c2b4 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801c248:	481b      	ldr	r0, [pc, #108]	; (801c2b8 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801c24a:	f240 11a9 	movw	r1, #425	; 0x1a9
 801c24e:	f011 ffe1 	bl	802e214 <__assert_func>
 801c252:	18e1      	adds	r1, r4, r3
 801c254:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801c258:	b16d      	cbz	r5, 801c276 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801c25a:	429a      	cmp	r2, r3
 801c25c:	d00a      	beq.n	801c274 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801c25e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801c262:	4431      	add	r1, r6
 801c264:	684e      	ldr	r6, [r1, #4]
 801c266:	b291      	uxth	r1, r2
 801c268:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c26c:	604e      	str	r6, [r1, #4]
 801c26e:	18a1      	adds	r1, r4, r2
 801c270:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801c274:	3201      	adds	r2, #1
 801c276:	3301      	adds	r3, #1
 801c278:	e7d9      	b.n	801c22e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801c27a:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801c27e:	3304      	adds	r3, #4
 801c280:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801c284:	428b      	cmp	r3, r1
 801c286:	d004      	beq.n	801c292 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801c288:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801c28c:	f843 6c04 	str.w	r6, [r3, #-4]
 801c290:	e7f8      	b.n	801c284 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801c292:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801c296:	e7cd      	b.n	801c234 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801c298:	4b04      	ldr	r3, [pc, #16]	; (801c2ac <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801c29a:	6818      	ldr	r0, [r3, #0]
 801c29c:	b110      	cbz	r0, 801c2a4 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801c29e:	6803      	ldr	r3, [r0, #0]
 801c2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2a2:	e79a      	b.n	801c1da <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801c2a4:	bd70      	pop	{r4, r5, r6, pc}
 801c2a6:	bf00      	nop
 801c2a8:	20009860 	.word	0x20009860
 801c2ac:	2000985c 	.word	0x2000985c
 801c2b0:	080321ec 	.word	0x080321ec
 801c2b4:	08032445 	.word	0x08032445
 801c2b8:	080321fa 	.word	0x080321fa

0801c2bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801c2bc:	b570      	push	{r4, r5, r6, lr}
 801c2be:	4606      	mov	r6, r0
 801c2c0:	460c      	mov	r4, r1
 801c2c2:	b929      	cbnz	r1, 801c2d0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801c2c4:	4b0c      	ldr	r3, [pc, #48]	; (801c2f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801c2c6:	4a0d      	ldr	r2, [pc, #52]	; (801c2fc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801c2c8:	480d      	ldr	r0, [pc, #52]	; (801c300 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801c2ca:	2167      	movs	r1, #103	; 0x67
 801c2cc:	f011 ffa2 	bl	802e214 <__assert_func>
 801c2d0:	4d0c      	ldr	r5, [pc, #48]	; (801c304 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801c2d2:	2300      	movs	r3, #0
 801c2d4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c2d8:	6828      	ldr	r0, [r5, #0]
 801c2da:	b110      	cbz	r0, 801c2e2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801c2dc:	6803      	ldr	r3, [r0, #0]
 801c2de:	695b      	ldr	r3, [r3, #20]
 801c2e0:	4798      	blx	r3
 801c2e2:	602c      	str	r4, [r5, #0]
 801c2e4:	6823      	ldr	r3, [r4, #0]
 801c2e6:	4620      	mov	r0, r4
 801c2e8:	68db      	ldr	r3, [r3, #12]
 801c2ea:	4798      	blx	r3
 801c2ec:	6833      	ldr	r3, [r6, #0]
 801c2ee:	4630      	mov	r0, r6
 801c2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2f6:	4718      	bx	r3
 801c2f8:	080321b8 	.word	0x080321b8
 801c2fc:	080322c0 	.word	0x080322c0
 801c300:	080321c2 	.word	0x080321c2
 801c304:	2000985c 	.word	0x2000985c

0801c308 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801c308:	b570      	push	{r4, r5, r6, lr}
 801c30a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801c30e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c312:	42ac      	cmp	r4, r5
 801c314:	db18      	blt.n	801c348 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c316:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c31a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c31e:	429a      	cmp	r2, r3
 801c320:	db12      	blt.n	801c348 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c322:	8886      	ldrh	r6, [r0, #4]
 801c324:	4435      	add	r5, r6
 801c326:	888e      	ldrh	r6, [r1, #4]
 801c328:	4434      	add	r4, r6
 801c32a:	b22d      	sxth	r5, r5
 801c32c:	b224      	sxth	r4, r4
 801c32e:	42a5      	cmp	r5, r4
 801c330:	db0a      	blt.n	801c348 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801c332:	88c0      	ldrh	r0, [r0, #6]
 801c334:	4418      	add	r0, r3
 801c336:	88cb      	ldrh	r3, [r1, #6]
 801c338:	441a      	add	r2, r3
 801c33a:	b200      	sxth	r0, r0
 801c33c:	b212      	sxth	r2, r2
 801c33e:	4290      	cmp	r0, r2
 801c340:	bfb4      	ite	lt
 801c342:	2000      	movlt	r0, #0
 801c344:	2001      	movge	r0, #1
 801c346:	bd70      	pop	{r4, r5, r6, pc}
 801c348:	2000      	movs	r0, #0
 801c34a:	e7fc      	b.n	801c346 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801c34c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c34e:	4604      	mov	r4, r0
 801c350:	4608      	mov	r0, r1
 801c352:	460d      	mov	r5, r1
 801c354:	f7fb fa27 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c358:	b978      	cbnz	r0, 801c37a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801c35a:	4620      	mov	r0, r4
 801c35c:	f7fb fa23 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c360:	f9b5 6000 	ldrsh.w	r6, [r5]
 801c364:	b150      	cbz	r0, 801c37c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801c366:	8026      	strh	r6, [r4, #0]
 801c368:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c36c:	8063      	strh	r3, [r4, #2]
 801c36e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801c372:	80a3      	strh	r3, [r4, #4]
 801c374:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c378:	80e3      	strh	r3, [r4, #6]
 801c37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c37c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c380:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c384:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801c388:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801c38c:	88ed      	ldrh	r5, [r5, #6]
 801c38e:	42b1      	cmp	r1, r6
 801c390:	460f      	mov	r7, r1
 801c392:	bfa8      	it	ge
 801c394:	4637      	movge	r7, r6
 801c396:	4293      	cmp	r3, r2
 801c398:	4618      	mov	r0, r3
 801c39a:	4466      	add	r6, ip
 801c39c:	bfa8      	it	ge
 801c39e:	4610      	movge	r0, r2
 801c3a0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801c3a4:	8027      	strh	r7, [r4, #0]
 801c3a6:	442a      	add	r2, r5
 801c3a8:	88e5      	ldrh	r5, [r4, #6]
 801c3aa:	8060      	strh	r0, [r4, #2]
 801c3ac:	4461      	add	r1, ip
 801c3ae:	442b      	add	r3, r5
 801c3b0:	b236      	sxth	r6, r6
 801c3b2:	b209      	sxth	r1, r1
 801c3b4:	b212      	sxth	r2, r2
 801c3b6:	b21b      	sxth	r3, r3
 801c3b8:	428e      	cmp	r6, r1
 801c3ba:	bfac      	ite	ge
 801c3bc:	ebc7 0106 	rsbge	r1, r7, r6
 801c3c0:	ebc7 0101 	rsblt	r1, r7, r1
 801c3c4:	429a      	cmp	r2, r3
 801c3c6:	bfac      	ite	ge
 801c3c8:	ebc0 0202 	rsbge	r2, r0, r2
 801c3cc:	ebc0 0203 	rsblt	r2, r0, r3
 801c3d0:	80a1      	strh	r1, [r4, #4]
 801c3d2:	80e2      	strh	r2, [r4, #6]
 801c3d4:	e7d1      	b.n	801c37a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801c3d8 <_ZN8touchgfx11Application11getInstanceEv>:
 801c3d8:	4b01      	ldr	r3, [pc, #4]	; (801c3e0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c3da:	6818      	ldr	r0, [r3, #0]
 801c3dc:	4770      	bx	lr
 801c3de:	bf00      	nop
 801c3e0:	2000986c 	.word	0x2000986c

0801c3e4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801c3e4:	b570      	push	{r4, r5, r6, lr}
 801c3e6:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801c3ea:	1d04      	adds	r4, r0, #4
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	b295      	uxth	r5, r2
 801c3f0:	42ab      	cmp	r3, r5
 801c3f2:	d90f      	bls.n	801c414 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 801c3f4:	f854 6b04 	ldr.w	r6, [r4], #4
 801c3f8:	428e      	cmp	r6, r1
 801c3fa:	4615      	mov	r5, r2
 801c3fc:	f102 0201 	add.w	r2, r2, #1
 801c400:	d1f5      	bne.n	801c3ee <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801c402:	4428      	add	r0, r5
 801c404:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801c408:	2bff      	cmp	r3, #255	; 0xff
 801c40a:	d002      	beq.n	801c412 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801c40c:	3301      	adds	r3, #1
 801c40e:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801c412:	bd70      	pop	{r4, r5, r6, pc}
 801c414:	2b20      	cmp	r3, #32
 801c416:	d106      	bne.n	801c426 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x42>
 801c418:	4b08      	ldr	r3, [pc, #32]	; (801c43c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801c41a:	4a09      	ldr	r2, [pc, #36]	; (801c440 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801c41c:	4809      	ldr	r0, [pc, #36]	; (801c444 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801c41e:	f240 215f 	movw	r1, #607	; 0x25f
 801c422:	f011 fef7 	bl	802e214 <__assert_func>
 801c426:	18c2      	adds	r2, r0, r3
 801c428:	2401      	movs	r4, #1
 801c42a:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801c42e:	191a      	adds	r2, r3, r4
 801c430:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801c434:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801c438:	6041      	str	r1, [r0, #4]
 801c43a:	e7ea      	b.n	801c412 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801c43c:	08032223 	.word	0x08032223
 801c440:	08032304 	.word	0x08032304
 801c444:	080321c2 	.word	0x080321c2

0801c448 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801c448:	b570      	push	{r4, r5, r6, lr}
 801c44a:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801c44e:	1d04      	adds	r4, r0, #4
 801c450:	2300      	movs	r3, #0
 801c452:	b29a      	uxth	r2, r3
 801c454:	4296      	cmp	r6, r2
 801c456:	d90a      	bls.n	801c46e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801c458:	f854 2b04 	ldr.w	r2, [r4], #4
 801c45c:	428a      	cmp	r2, r1
 801c45e:	d107      	bne.n	801c470 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c460:	18c5      	adds	r5, r0, r3
 801c462:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801c466:	b11a      	cbz	r2, 801c470 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c468:	3a01      	subs	r2, #1
 801c46a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801c46e:	bd70      	pop	{r4, r5, r6, pc}
 801c470:	3301      	adds	r3, #1
 801c472:	e7ee      	b.n	801c452 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801c474 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801c474:	2300      	movs	r3, #0
 801c476:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c47a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801c47e:	30a8      	adds	r0, #168	; 0xa8
 801c480:	f802 3b01 	strb.w	r3, [r2], #1
 801c484:	4282      	cmp	r2, r0
 801c486:	d1fb      	bne.n	801c480 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801c488:	4770      	bx	lr

0801c48a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c48a:	4603      	mov	r3, r0
 801c48c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c490:	2200      	movs	r2, #0
 801c492:	801a      	strh	r2, [r3, #0]
 801c494:	805a      	strh	r2, [r3, #2]
 801c496:	809a      	strh	r2, [r3, #4]
 801c498:	80da      	strh	r2, [r3, #6]
 801c49a:	3308      	adds	r3, #8
 801c49c:	428b      	cmp	r3, r1
 801c49e:	d1f8      	bne.n	801c492 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c4a0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c4a4:	4770      	bx	lr
	...

0801c4a8 <_ZN8touchgfx11ApplicationC1Ev>:
 801c4a8:	b570      	push	{r4, r5, r6, lr}
 801c4aa:	4b1a      	ldr	r3, [pc, #104]	; (801c514 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801c4ac:	6003      	str	r3, [r0, #0]
 801c4ae:	2500      	movs	r5, #0
 801c4b0:	4604      	mov	r4, r0
 801c4b2:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801c4b6:	30a8      	adds	r0, #168	; 0xa8
 801c4b8:	f7ff ffe7 	bl	801c48a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c4bc:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c4c0:	f7ff ffe3 	bl	801c48a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c4c4:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801c4c8:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801c4cc:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801c4d0:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801c4d4:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801c4d8:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801c4dc:	490e      	ldr	r1, [pc, #56]	; (801c518 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801c4de:	480f      	ldr	r0, [pc, #60]	; (801c51c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801c4e0:	4e0f      	ldr	r6, [pc, #60]	; (801c520 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801c4e2:	f00f faa5 	bl	802ba30 <CRC_Lock>
 801c4e6:	4b0f      	ldr	r3, [pc, #60]	; (801c524 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801c4e8:	b158      	cbz	r0, 801c502 <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801c4ea:	801d      	strh	r5, [r3, #0]
 801c4ec:	4a0e      	ldr	r2, [pc, #56]	; (801c528 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801c4ee:	2300      	movs	r3, #0
 801c4f0:	6013      	str	r3, [r2, #0]
 801c4f2:	4a0e      	ldr	r2, [pc, #56]	; (801c52c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801c4f4:	6033      	str	r3, [r6, #0]
 801c4f6:	4620      	mov	r0, r4
 801c4f8:	6013      	str	r3, [r2, #0]
 801c4fa:	f7ff ffbb 	bl	801c474 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801c4fe:	4620      	mov	r0, r4
 801c500:	bd70      	pop	{r4, r5, r6, pc}
 801c502:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c506:	2002      	movs	r0, #2
 801c508:	801a      	strh	r2, [r3, #0]
 801c50a:	6030      	str	r0, [r6, #0]
 801c50c:	f001 faae 	bl	801da6c <_ZN8touchgfx6Screen4drawEv>
 801c510:	e7ec      	b.n	801c4ec <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801c512:	bf00      	nop
 801c514:	08032284 	.word	0x08032284
 801c518:	b5e8b5cd 	.word	0xb5e8b5cd
 801c51c:	f407a5c2 	.word	0xf407a5c2
 801c520:	2000985c 	.word	0x2000985c
 801c524:	20000020 	.word	0x20000020
 801c528:	2000986c 	.word	0x2000986c
 801c52c:	20009860 	.word	0x20009860

0801c530 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c530:	b510      	push	{r4, lr}
 801c532:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801c536:	428b      	cmp	r3, r1
 801c538:	d806      	bhi.n	801c548 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801c53a:	4b0b      	ldr	r3, [pc, #44]	; (801c568 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801c53c:	4a0b      	ldr	r2, [pc, #44]	; (801c56c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801c53e:	480c      	ldr	r0, [pc, #48]	; (801c570 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801c540:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801c544:	f011 fe66 	bl	802e214 <__assert_func>
 801c548:	3b01      	subs	r3, #1
 801c54a:	b29b      	uxth	r3, r3
 801c54c:	428b      	cmp	r3, r1
 801c54e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801c552:	d908      	bls.n	801c566 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801c554:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801c558:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801c55c:	681a      	ldr	r2, [r3, #0]
 801c55e:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801c562:	685a      	ldr	r2, [r3, #4]
 801c564:	6062      	str	r2, [r4, #4]
 801c566:	bd10      	pop	{r4, pc}
 801c568:	080321ec 	.word	0x080321ec
 801c56c:	08032349 	.word	0x08032349
 801c570:	080321fa 	.word	0x080321fa

0801c574 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801c574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c576:	466b      	mov	r3, sp
 801c578:	e883 0006 	stmia.w	r3, {r1, r2}
 801c57c:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801c580:	2a07      	cmp	r2, #7
 801c582:	4604      	mov	r4, r0
 801c584:	d906      	bls.n	801c594 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801c586:	4b09      	ldr	r3, [pc, #36]	; (801c5ac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801c588:	4a09      	ldr	r2, [pc, #36]	; (801c5b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801c58a:	480a      	ldr	r0, [pc, #40]	; (801c5b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801c58c:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801c590:	f011 fe40 	bl	802e214 <__assert_func>
 801c594:	1c51      	adds	r1, r2, #1
 801c596:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c59a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801c59e:	cb03      	ldmia	r3!, {r0, r1}
 801c5a0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c5a4:	6069      	str	r1, [r5, #4]
 801c5a6:	b003      	add	sp, #12
 801c5a8:	bd30      	pop	{r4, r5, pc}
 801c5aa:	bf00      	nop
 801c5ac:	0803224b 	.word	0x0803224b
 801c5b0:	080323df 	.word	0x080323df
 801c5b4:	080321fa 	.word	0x080321fa

0801c5b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5bc:	b08d      	sub	sp, #52	; 0x34
 801c5be:	ac08      	add	r4, sp, #32
 801c5c0:	4683      	mov	fp, r0
 801c5c2:	4620      	mov	r0, r4
 801c5c4:	e884 0006 	stmia.w	r4, {r1, r2}
 801c5c8:	f7fb f8ed 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c5cc:	2800      	cmp	r0, #0
 801c5ce:	d16a      	bne.n	801c6a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c5d0:	9402      	str	r4, [sp, #8]
 801c5d2:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801c5d6:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801c5da:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801c5de:	2400      	movs	r4, #0
 801c5e0:	9301      	str	r3, [sp, #4]
 801c5e2:	36a0      	adds	r6, #160	; 0xa0
 801c5e4:	42a5      	cmp	r5, r4
 801c5e6:	d00d      	beq.n	801c604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801c5e8:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801c5ec:	9802      	ldr	r0, [sp, #8]
 801c5ee:	f7ff fe8b 	bl	801c308 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c5f2:	b128      	cbz	r0, 801c600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801c5f4:	1e69      	subs	r1, r5, #1
 801c5f6:	1b09      	subs	r1, r1, r4
 801c5f8:	b289      	uxth	r1, r1
 801c5fa:	9801      	ldr	r0, [sp, #4]
 801c5fc:	f7ff ff98 	bl	801c530 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c600:	3401      	adds	r4, #1
 801c602:	e7ef      	b.n	801c5e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c604:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801c608:	9703      	str	r7, [sp, #12]
 801c60a:	1e7b      	subs	r3, r7, #1
 801c60c:	9300      	str	r3, [sp, #0]
 801c60e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801c612:	2400      	movs	r4, #0
 801c614:	4655      	mov	r5, sl
 801c616:	9704      	str	r7, [sp, #16]
 801c618:	4626      	mov	r6, r4
 801c61a:	9b04      	ldr	r3, [sp, #16]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d078      	beq.n	801c712 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801c620:	9902      	ldr	r1, [sp, #8]
 801c622:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801c626:	f7fc fd8f 	bl	8019148 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c62a:	b360      	cbz	r0, 801c686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801c62c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801c630:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801c634:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801c638:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801c63c:	45e6      	cmp	lr, ip
 801c63e:	db35      	blt.n	801c6ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801c640:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c644:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801c648:	4472      	add	r2, lr
 801c64a:	4463      	add	r3, ip
 801c64c:	b212      	sxth	r2, r2
 801c64e:	b21b      	sxth	r3, r3
 801c650:	429a      	cmp	r2, r3
 801c652:	dc2b      	bgt.n	801c6ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801c654:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801c658:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c65c:	fa1f f288 	uxth.w	r2, r8
 801c660:	4413      	add	r3, r2
 801c662:	b29b      	uxth	r3, r3
 801c664:	45c1      	cmp	r9, r8
 801c666:	fa0f fe83 	sxth.w	lr, r3
 801c66a:	fa1f fc89 	uxth.w	ip, r9
 801c66e:	db0f      	blt.n	801c690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801c670:	eba3 030c 	sub.w	r3, r3, ip
 801c674:	1ac9      	subs	r1, r1, r3
 801c676:	b209      	sxth	r1, r1
 801c678:	2900      	cmp	r1, #0
 801c67a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c67e:	dd12      	ble.n	801c6a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c680:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801c684:	4604      	mov	r4, r0
 801c686:	9b04      	ldr	r3, [sp, #16]
 801c688:	3b01      	subs	r3, #1
 801c68a:	9304      	str	r3, [sp, #16]
 801c68c:	3d08      	subs	r5, #8
 801c68e:	e7c4      	b.n	801c61a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801c690:	4461      	add	r1, ip
 801c692:	b209      	sxth	r1, r1
 801c694:	4571      	cmp	r1, lr
 801c696:	dc3a      	bgt.n	801c70e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c698:	eba2 020c 	sub.w	r2, r2, ip
 801c69c:	b212      	sxth	r2, r2
 801c69e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c6a2:	2a00      	cmp	r2, #0
 801c6a4:	dcee      	bgt.n	801c684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801c6a6:	b00d      	add	sp, #52	; 0x34
 801c6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ac:	45c1      	cmp	r9, r8
 801c6ae:	db2e      	blt.n	801c70e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c6b0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801c6b4:	4499      	add	r9, r3
 801c6b6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801c6ba:	4498      	add	r8, r3
 801c6bc:	fa0f f989 	sxth.w	r9, r9
 801c6c0:	fa0f f888 	sxth.w	r8, r8
 801c6c4:	45c1      	cmp	r9, r8
 801c6c6:	dc22      	bgt.n	801c70e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c6c8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801c6cc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c6d0:	fa1f f28c 	uxth.w	r2, ip
 801c6d4:	4413      	add	r3, r2
 801c6d6:	b29b      	uxth	r3, r3
 801c6d8:	45e6      	cmp	lr, ip
 801c6da:	fa1f f88e 	uxth.w	r8, lr
 801c6de:	fa0f f983 	sxth.w	r9, r3
 801c6e2:	db0a      	blt.n	801c6fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801c6e4:	eba3 0308 	sub.w	r3, r3, r8
 801c6e8:	1ac9      	subs	r1, r1, r3
 801c6ea:	b209      	sxth	r1, r1
 801c6ec:	2900      	cmp	r1, #0
 801c6ee:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801c6f2:	ddd8      	ble.n	801c6a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c6f4:	f8ad 9020 	strh.w	r9, [sp, #32]
 801c6f8:	e7c4      	b.n	801c684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801c6fa:	4441      	add	r1, r8
 801c6fc:	b209      	sxth	r1, r1
 801c6fe:	4549      	cmp	r1, r9
 801c700:	dc05      	bgt.n	801c70e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c702:	eba2 0208 	sub.w	r2, r2, r8
 801c706:	b212      	sxth	r2, r2
 801c708:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801c70c:	e7c9      	b.n	801c6a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801c70e:	4606      	mov	r6, r0
 801c710:	e7b9      	b.n	801c686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801c712:	2c00      	cmp	r4, #0
 801c714:	f47f af7d 	bne.w	801c612 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801c718:	2e00      	cmp	r6, #0
 801c71a:	f000 81dd 	beq.w	801cad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c71e:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801c722:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801c726:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c72a:	b2b9      	uxth	r1, r7
 801c72c:	9104      	str	r1, [sp, #16]
 801c72e:	9804      	ldr	r0, [sp, #16]
 801c730:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c734:	4401      	add	r1, r0
 801c736:	b2b3      	uxth	r3, r6
 801c738:	b289      	uxth	r1, r1
 801c73a:	441a      	add	r2, r3
 801c73c:	9105      	str	r1, [sp, #20]
 801c73e:	b292      	uxth	r2, r2
 801c740:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801c744:	fa0f f882 	sxth.w	r8, r2
 801c748:	4655      	mov	r5, sl
 801c74a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c74e:	9b03      	ldr	r3, [sp, #12]
 801c750:	2b00      	cmp	r3, #0
 801c752:	d054      	beq.n	801c7fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801c754:	9902      	ldr	r1, [sp, #8]
 801c756:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801c75a:	f7fc fcf5 	bl	8019148 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c75e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c762:	b1d8      	cbz	r0, 801c79c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c764:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801c768:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801c76c:	4576      	cmp	r6, lr
 801c76e:	dc26      	bgt.n	801c7be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c770:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801c774:	44f4      	add	ip, lr
 801c776:	fa0f fc8c 	sxth.w	ip, ip
 801c77a:	45e0      	cmp	r8, ip
 801c77c:	db1f      	blt.n	801c7be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c77e:	428f      	cmp	r7, r1
 801c780:	fa1f fc81 	uxth.w	ip, r1
 801c784:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801c788:	dc0f      	bgt.n	801c7aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801c78a:	9805      	ldr	r0, [sp, #20]
 801c78c:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801c790:	eba0 0c0c 	sub.w	ip, r0, ip
 801c794:	eba1 010c 	sub.w	r1, r1, ip
 801c798:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801c79c:	4620      	mov	r0, r4
 801c79e:	9903      	ldr	r1, [sp, #12]
 801c7a0:	3901      	subs	r1, #1
 801c7a2:	9103      	str	r1, [sp, #12]
 801c7a4:	3d08      	subs	r5, #8
 801c7a6:	4604      	mov	r4, r0
 801c7a8:	e7cf      	b.n	801c74a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801c7aa:	4461      	add	r1, ip
 801c7ac:	b209      	sxth	r1, r1
 801c7ae:	4549      	cmp	r1, r9
 801c7b0:	dcf5      	bgt.n	801c79e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c7b2:	9904      	ldr	r1, [sp, #16]
 801c7b4:	eba1 0c0c 	sub.w	ip, r1, ip
 801c7b8:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801c7bc:	e7ee      	b.n	801c79c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c7be:	428f      	cmp	r7, r1
 801c7c0:	dced      	bgt.n	801c79e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c7c2:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801c7c6:	4461      	add	r1, ip
 801c7c8:	b209      	sxth	r1, r1
 801c7ca:	4589      	cmp	r9, r1
 801c7cc:	dbe7      	blt.n	801c79e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c7ce:	4576      	cmp	r6, lr
 801c7d0:	fa1f fc8e 	uxth.w	ip, lr
 801c7d4:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801c7d8:	dc08      	bgt.n	801c7ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801c7da:	eba2 0c0c 	sub.w	ip, r2, ip
 801c7de:	eba1 010c 	sub.w	r1, r1, ip
 801c7e2:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801c7e6:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801c7ea:	e7d7      	b.n	801c79c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c7ec:	4461      	add	r1, ip
 801c7ee:	b209      	sxth	r1, r1
 801c7f0:	4588      	cmp	r8, r1
 801c7f2:	dbd4      	blt.n	801c79e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c7f4:	eba3 0c0c 	sub.w	ip, r3, ip
 801c7f8:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801c7fc:	e7ce      	b.n	801c79c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c7fe:	2c00      	cmp	r4, #0
 801c800:	f000 816a 	beq.w	801cad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c804:	9b00      	ldr	r3, [sp, #0]
 801c806:	3301      	adds	r3, #1
 801c808:	f000 8166 	beq.w	801cad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c80c:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801c810:	4621      	mov	r1, r4
 801c812:	9802      	ldr	r0, [sp, #8]
 801c814:	f7ff fd78 	bl	801c308 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c818:	b120      	cbz	r0, 801c824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801c81a:	f8bd 1000 	ldrh.w	r1, [sp]
 801c81e:	9801      	ldr	r0, [sp, #4]
 801c820:	f7ff fe86 	bl	801c530 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c824:	9902      	ldr	r1, [sp, #8]
 801c826:	4620      	mov	r0, r4
 801c828:	f7fc fc8e 	bl	8019148 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c82c:	2800      	cmp	r0, #0
 801c82e:	f000 809b 	beq.w	801c968 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801c832:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c836:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801c83a:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801c83e:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801c842:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c846:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801c84a:	fa1f f288 	uxth.w	r2, r8
 801c84e:	19d5      	adds	r5, r2, r7
 801c850:	fa1f f985 	uxth.w	r9, r5
 801c854:	fa0f f589 	sxth.w	r5, r9
 801c858:	b2a1      	uxth	r1, r4
 801c85a:	440b      	add	r3, r1
 801c85c:	9503      	str	r5, [sp, #12]
 801c85e:	45a0      	cmp	r8, r4
 801c860:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801c864:	9507      	str	r5, [sp, #28]
 801c866:	b29b      	uxth	r3, r3
 801c868:	f340 809d 	ble.w	801c9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c86c:	1a52      	subs	r2, r2, r1
 801c86e:	b292      	uxth	r2, r2
 801c870:	4584      	cmp	ip, r0
 801c872:	fa0f fe83 	sxth.w	lr, r3
 801c876:	b215      	sxth	r5, r2
 801c878:	dd2f      	ble.n	801c8da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801c87a:	9e00      	ldr	r6, [sp, #0]
 801c87c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c880:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801c884:	9e03      	ldr	r6, [sp, #12]
 801c886:	eba6 060e 	sub.w	r6, r6, lr
 801c88a:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801c88e:	fa1f fc8c 	uxth.w	ip, ip
 801c892:	b280      	uxth	r0, r0
 801c894:	ebac 0300 	sub.w	r3, ip, r0
 801c898:	448c      	add	ip, r1
 801c89a:	4470      	add	r0, lr
 801c89c:	b29b      	uxth	r3, r3
 801c89e:	fa0f fc8c 	sxth.w	ip, ip
 801c8a2:	b200      	sxth	r0, r0
 801c8a4:	b21c      	sxth	r4, r3
 801c8a6:	ebac 0000 	sub.w	r0, ip, r0
 801c8aa:	4366      	muls	r6, r4
 801c8ac:	4368      	muls	r0, r5
 801c8ae:	4286      	cmp	r6, r0
 801c8b0:	db09      	blt.n	801c8c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801c8b2:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801c8b6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801c8ba:	4417      	add	r7, r2
 801c8bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c8c0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c8c4:	e685      	b.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c8c6:	440b      	add	r3, r1
 801c8c8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c8cc:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801c8d0:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801c8d4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c8d8:	e67b      	b.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c8da:	9e03      	ldr	r6, [sp, #12]
 801c8dc:	45b6      	cmp	lr, r6
 801c8de:	da28      	bge.n	801c932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801c8e0:	9b00      	ldr	r3, [sp, #0]
 801c8e2:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801c8e6:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801c8ea:	eb04 030c 	add.w	r3, r4, ip
 801c8ee:	fa1f f883 	uxth.w	r8, r3
 801c8f2:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801c8f6:	4403      	add	r3, r0
 801c8f8:	eba3 0308 	sub.w	r3, r3, r8
 801c8fc:	b29b      	uxth	r3, r3
 801c8fe:	fa0f f988 	sxth.w	r9, r8
 801c902:	eba0 000c 	sub.w	r0, r0, ip
 801c906:	fa0f f883 	sxth.w	r8, r3
 801c90a:	eba6 060e 	sub.w	r6, r6, lr
 801c90e:	4368      	muls	r0, r5
 801c910:	fb08 f606 	mul.w	r6, r8, r6
 801c914:	42b0      	cmp	r0, r6
 801c916:	dc06      	bgt.n	801c926 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801c918:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801c91c:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801c920:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801c924:	e7c9      	b.n	801c8ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801c926:	4423      	add	r3, r4
 801c928:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801c92c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c930:	e64f      	b.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c932:	9807      	ldr	r0, [sp, #28]
 801c934:	eba3 0309 	sub.w	r3, r3, r9
 801c938:	b29b      	uxth	r3, r3
 801c93a:	2806      	cmp	r0, #6
 801c93c:	fa0f fc83 	sxth.w	ip, r3
 801c940:	d818      	bhi.n	801c974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801c942:	4652      	mov	r2, sl
 801c944:	ab0a      	add	r3, sp, #40	; 0x28
 801c946:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801c94a:	6851      	ldr	r1, [r2, #4]
 801c94c:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801c950:	c303      	stmia	r3!, {r0, r1}
 801c952:	9b03      	ldr	r3, [sp, #12]
 801c954:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801c958:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801c95c:	ab0a      	add	r3, sp, #40	; 0x28
 801c95e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c962:	9801      	ldr	r0, [sp, #4]
 801c964:	f7ff fe06 	bl	801c574 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c968:	9b00      	ldr	r3, [sp, #0]
 801c96a:	3b01      	subs	r3, #1
 801c96c:	9300      	str	r3, [sp, #0]
 801c96e:	f1aa 0a08 	sub.w	sl, sl, #8
 801c972:	e747      	b.n	801c804 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c974:	9800      	ldr	r0, [sp, #0]
 801c976:	45ac      	cmp	ip, r5
 801c978:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c97c:	db0c      	blt.n	801c998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801c97e:	4417      	add	r7, r2
 801c980:	b2bf      	uxth	r7, r7
 801c982:	4458      	add	r0, fp
 801c984:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c988:	440f      	add	r7, r1
 801c98a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801c98e:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801c992:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801c996:	e61c      	b.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c998:	4458      	add	r0, fp
 801c99a:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801c99e:	443b      	add	r3, r7
 801c9a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801c9a4:	e615      	b.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c9a6:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801c9aa:	fa1f f18c 	uxth.w	r1, ip
 801c9ae:	eb01 0e05 	add.w	lr, r1, r5
 801c9b2:	b282      	uxth	r2, r0
 801c9b4:	fa1f fe8e 	uxth.w	lr, lr
 801c9b8:	9204      	str	r2, [sp, #16]
 801c9ba:	fa0f f28e 	sxth.w	r2, lr
 801c9be:	9205      	str	r2, [sp, #20]
 801c9c0:	9e04      	ldr	r6, [sp, #16]
 801c9c2:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801c9c6:	4432      	add	r2, r6
 801c9c8:	b292      	uxth	r2, r2
 801c9ca:	4584      	cmp	ip, r0
 801c9cc:	9206      	str	r2, [sp, #24]
 801c9ce:	da26      	bge.n	801ca1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801c9d0:	eba3 0309 	sub.w	r3, r3, r9
 801c9d4:	eba2 020e 	sub.w	r2, r2, lr
 801c9d8:	b29b      	uxth	r3, r3
 801c9da:	b292      	uxth	r2, r2
 801c9dc:	fa0f fa83 	sxth.w	sl, r3
 801c9e0:	b211      	sxth	r1, r2
 801c9e2:	eba0 000c 	sub.w	r0, r0, ip
 801c9e6:	eba4 0408 	sub.w	r4, r4, r8
 801c9ea:	fb0a f000 	mul.w	r0, sl, r0
 801c9ee:	434c      	muls	r4, r1
 801c9f0:	42a0      	cmp	r0, r4
 801c9f2:	9800      	ldr	r0, [sp, #0]
 801c9f4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c9f8:	dc06      	bgt.n	801ca08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801c9fa:	4458      	add	r0, fp
 801c9fc:	9a05      	ldr	r2, [sp, #20]
 801c9fe:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801ca02:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801ca06:	e7ca      	b.n	801c99e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ca08:	eb0b 0300 	add.w	r3, fp, r0
 801ca0c:	9903      	ldr	r1, [sp, #12]
 801ca0e:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801ca12:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801ca16:	442a      	add	r2, r5
 801ca18:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801ca1c:	e5d9      	b.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ca1e:	9e04      	ldr	r6, [sp, #16]
 801ca20:	9a03      	ldr	r2, [sp, #12]
 801ca22:	1b89      	subs	r1, r1, r6
 801ca24:	b21e      	sxth	r6, r3
 801ca26:	b289      	uxth	r1, r1
 801ca28:	4296      	cmp	r6, r2
 801ca2a:	fa0f fc81 	sxth.w	ip, r1
 801ca2e:	dd26      	ble.n	801ca7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 801ca30:	eba3 0309 	sub.w	r3, r3, r9
 801ca34:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ca38:	9e05      	ldr	r6, [sp, #20]
 801ca3a:	b29b      	uxth	r3, r3
 801ca3c:	eba6 0902 	sub.w	r9, r6, r2
 801ca40:	b218      	sxth	r0, r3
 801ca42:	eba4 0408 	sub.w	r4, r4, r8
 801ca46:	fb0c f404 	mul.w	r4, ip, r4
 801ca4a:	fb00 f909 	mul.w	r9, r0, r9
 801ca4e:	9a00      	ldr	r2, [sp, #0]
 801ca50:	454c      	cmp	r4, r9
 801ca52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801ca56:	db03      	blt.n	801ca60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 801ca58:	445a      	add	r2, fp
 801ca5a:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801ca5e:	e79e      	b.n	801c99e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ca60:	eb0b 0302 	add.w	r3, fp, r2
 801ca64:	9a03      	ldr	r2, [sp, #12]
 801ca66:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801ca6a:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801ca6e:	4429      	add	r1, r5
 801ca70:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801ca74:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ca78:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ca7c:	e5a9      	b.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ca7e:	9b06      	ldr	r3, [sp, #24]
 801ca80:	9c07      	ldr	r4, [sp, #28]
 801ca82:	eba3 020e 	sub.w	r2, r3, lr
 801ca86:	b292      	uxth	r2, r2
 801ca88:	2c06      	cmp	r4, #6
 801ca8a:	b213      	sxth	r3, r2
 801ca8c:	d80d      	bhi.n	801caaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 801ca8e:	4651      	mov	r1, sl
 801ca90:	aa0a      	add	r2, sp, #40	; 0x28
 801ca92:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801ca96:	6849      	ldr	r1, [r1, #4]
 801ca98:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801ca9c:	9b05      	ldr	r3, [sp, #20]
 801ca9e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801caa2:	c203      	stmia	r2!, {r0, r1}
 801caa4:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801caa8:	e758      	b.n	801c95c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801caaa:	9c00      	ldr	r4, [sp, #0]
 801caac:	4563      	cmp	r3, ip
 801caae:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801cab2:	db0d      	blt.n	801cad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 801cab4:	4429      	add	r1, r5
 801cab6:	9a04      	ldr	r2, [sp, #16]
 801cab8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cabc:	b289      	uxth	r1, r1
 801cabe:	445c      	add	r4, fp
 801cac0:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801cac4:	4411      	add	r1, r2
 801cac6:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801caca:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801cace:	e580      	b.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801cad0:	445c      	add	r4, fp
 801cad2:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801cad6:	e79e      	b.n	801ca16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801cad8:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801cadc:	2f07      	cmp	r7, #7
 801cade:	d806      	bhi.n	801caee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 801cae0:	ab08      	add	r3, sp, #32
 801cae2:	e893 0006 	ldmia.w	r3, {r1, r2}
 801cae6:	9801      	ldr	r0, [sp, #4]
 801cae8:	f7ff fd44 	bl	801c574 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801caec:	e5db      	b.n	801c6a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801caee:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801caf2:	f107 39ff 	add.w	r9, r7, #4294967295
 801caf6:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801cafa:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801cafe:	f04f 35ff 	mov.w	r5, #4294967295
 801cb02:	2400      	movs	r4, #0
 801cb04:	9304      	str	r3, [sp, #16]
 801cb06:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801cb0a:	9300      	str	r3, [sp, #0]
 801cb0c:	f109 32ff 	add.w	r2, r9, #4294967295
 801cb10:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801cb14:	9303      	str	r3, [sp, #12]
 801cb16:	4690      	mov	r8, r2
 801cb18:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801cb1c:	f1b8 3fff 	cmp.w	r8, #4294967295
 801cb20:	bf14      	ite	ne
 801cb22:	9904      	ldrne	r1, [sp, #16]
 801cb24:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801cb28:	6818      	ldr	r0, [r3, #0]
 801cb2a:	9206      	str	r2, [sp, #24]
 801cb2c:	bf18      	it	ne
 801cb2e:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801cb32:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801cb36:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801cb3a:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801cb3e:	9305      	str	r3, [sp, #20]
 801cb40:	fb16 f601 	smulbb	r6, r6, r1
 801cb44:	6859      	ldr	r1, [r3, #4]
 801cb46:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cb4a:	4671      	mov	r1, lr
 801cb4c:	a80a      	add	r0, sp, #40	; 0x28
 801cb4e:	f7ff fbfd 	bl	801c34c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801cb52:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801cb56:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cb5a:	9b03      	ldr	r3, [sp, #12]
 801cb5c:	9a00      	ldr	r2, [sp, #0]
 801cb5e:	fb11 f100 	smulbb	r1, r1, r0
 801cb62:	fb02 6603 	mla	r6, r2, r3, r6
 801cb66:	1b8e      	subs	r6, r1, r6
 801cb68:	2008      	movs	r0, #8
 801cb6a:	fb91 f1f0 	sdiv	r1, r1, r0
 801cb6e:	42b1      	cmp	r1, r6
 801cb70:	dc21      	bgt.n	801cbb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801cb72:	4556      	cmp	r6, sl
 801cb74:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801cb78:	da03      	bge.n	801cb82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801cb7a:	b1e6      	cbz	r6, 801cbb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801cb7c:	46b2      	mov	sl, r6
 801cb7e:	4645      	mov	r5, r8
 801cb80:	464c      	mov	r4, r9
 801cb82:	f108 38ff 	add.w	r8, r8, #4294967295
 801cb86:	f118 0f02 	cmn.w	r8, #2
 801cb8a:	d1c7      	bne.n	801cb1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 801cb8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cb90:	f1a7 0708 	sub.w	r7, r7, #8
 801cb94:	4691      	mov	r9, r2
 801cb96:	d1b6      	bne.n	801cb06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801cb98:	9b01      	ldr	r3, [sp, #4]
 801cb9a:	b2a6      	uxth	r6, r4
 801cb9c:	00e4      	lsls	r4, r4, #3
 801cb9e:	1918      	adds	r0, r3, r4
 801cba0:	1c6b      	adds	r3, r5, #1
 801cba2:	d10b      	bne.n	801cbbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 801cba4:	4601      	mov	r1, r0
 801cba6:	9802      	ldr	r0, [sp, #8]
 801cba8:	f7ff fbd0 	bl	801c34c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801cbac:	4631      	mov	r1, r6
 801cbae:	9801      	ldr	r0, [sp, #4]
 801cbb0:	f7ff fcbe 	bl	801c530 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cbb4:	e50d      	b.n	801c5d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801cbb6:	4645      	mov	r5, r8
 801cbb8:	464c      	mov	r4, r9
 801cbba:	e7ed      	b.n	801cb98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 801cbbc:	9b01      	ldr	r3, [sp, #4]
 801cbbe:	00ed      	lsls	r5, r5, #3
 801cbc0:	1959      	adds	r1, r3, r5
 801cbc2:	f7ff fbc3 	bl	801c34c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801cbc6:	9b02      	ldr	r3, [sp, #8]
 801cbc8:	cb03      	ldmia	r3!, {r0, r1}
 801cbca:	445d      	add	r5, fp
 801cbcc:	445c      	add	r4, fp
 801cbce:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801cbd2:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801cbd6:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801cbda:	9b02      	ldr	r3, [sp, #8]
 801cbdc:	6861      	ldr	r1, [r4, #4]
 801cbde:	c303      	stmia	r3!, {r0, r1}
 801cbe0:	e7e4      	b.n	801cbac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

0801cbe4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801cbe4:	b530      	push	{r4, r5, lr}
 801cbe6:	4b1d      	ldr	r3, [pc, #116]	; (801cc5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801cbe8:	b085      	sub	sp, #20
 801cbea:	460c      	mov	r4, r1
 801cbec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cbf0:	4b1b      	ldr	r3, [pc, #108]	; (801cc60 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801cbf2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cbf6:	2100      	movs	r1, #0
 801cbf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cbfc:	9100      	str	r1, [sp, #0]
 801cbfe:	4605      	mov	r5, r0
 801cc00:	6861      	ldr	r1, [r4, #4]
 801cc02:	6820      	ldr	r0, [r4, #0]
 801cc04:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cc08:	ab02      	add	r3, sp, #8
 801cc0a:	c303      	stmia	r3!, {r0, r1}
 801cc0c:	4669      	mov	r1, sp
 801cc0e:	a802      	add	r0, sp, #8
 801cc10:	f7fa fd86 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801cc14:	ab02      	add	r3, sp, #8
 801cc16:	cb03      	ldmia	r3!, {r0, r1}
 801cc18:	4b12      	ldr	r3, [pc, #72]	; (801cc64 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801cc1a:	6020      	str	r0, [r4, #0]
 801cc1c:	6818      	ldr	r0, [r3, #0]
 801cc1e:	6061      	str	r1, [r4, #4]
 801cc20:	b138      	cbz	r0, 801cc32 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801cc22:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801cc26:	b133      	cbz	r3, 801cc36 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801cc28:	6821      	ldr	r1, [r4, #0]
 801cc2a:	6862      	ldr	r2, [r4, #4]
 801cc2c:	4628      	mov	r0, r5
 801cc2e:	f7ff fcc3 	bl	801c5b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801cc32:	b005      	add	sp, #20
 801cc34:	bd30      	pop	{r4, r5, pc}
 801cc36:	6803      	ldr	r3, [r0, #0]
 801cc38:	4621      	mov	r1, r4
 801cc3a:	689b      	ldr	r3, [r3, #8]
 801cc3c:	4798      	blx	r3
 801cc3e:	4b0a      	ldr	r3, [pc, #40]	; (801cc68 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801cc40:	6818      	ldr	r0, [r3, #0]
 801cc42:	b118      	cbz	r0, 801cc4c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801cc44:	6803      	ldr	r3, [r0, #0]
 801cc46:	4621      	mov	r1, r4
 801cc48:	689b      	ldr	r3, [r3, #8]
 801cc4a:	4798      	blx	r3
 801cc4c:	4b07      	ldr	r3, [pc, #28]	; (801cc6c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801cc4e:	6818      	ldr	r0, [r3, #0]
 801cc50:	6803      	ldr	r3, [r0, #0]
 801cc52:	4621      	mov	r1, r4
 801cc54:	69db      	ldr	r3, [r3, #28]
 801cc56:	4798      	blx	r3
 801cc58:	e7eb      	b.n	801cc32 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801cc5a:	bf00      	nop
 801cc5c:	20009814 	.word	0x20009814
 801cc60:	20009816 	.word	0x20009816
 801cc64:	2000985c 	.word	0x2000985c
 801cc68:	20009858 	.word	0x20009858
 801cc6c:	20009820 	.word	0x20009820

0801cc70 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801cc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc74:	4604      	mov	r4, r0
 801cc76:	b09b      	sub	sp, #108	; 0x6c
 801cc78:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801cc7c:	b129      	cbz	r1, 801cc8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801cc7e:	2300      	movs	r3, #0
 801cc80:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801cc84:	b01b      	add	sp, #108	; 0x6c
 801cc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc8a:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801cc8e:	4630      	mov	r0, r6
 801cc90:	f7fa fd89 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc94:	4605      	mov	r5, r0
 801cc96:	b940      	cbnz	r0, 801ccaa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801cc98:	e896 0006 	ldmia.w	r6, {r1, r2}
 801cc9c:	4620      	mov	r0, r4
 801cc9e:	f7ff fc8b 	bl	801c5b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801cca2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801cca6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801ccaa:	4ba7      	ldr	r3, [pc, #668]	; (801cf48 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	b33b      	cbz	r3, 801cd00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801ccb0:	4da6      	ldr	r5, [pc, #664]	; (801cf4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801ccb2:	4628      	mov	r0, r5
 801ccb4:	f7fa fd77 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ccb8:	4606      	mov	r6, r0
 801ccba:	bb08      	cbnz	r0, 801cd00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801ccbc:	4628      	mov	r0, r5
 801ccbe:	f7ff f9b7 	bl	801c030 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ccc2:	6829      	ldr	r1, [r5, #0]
 801ccc4:	686a      	ldr	r2, [r5, #4]
 801ccc6:	4620      	mov	r0, r4
 801ccc8:	f7ff fc76 	bl	801c5b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801cccc:	802e      	strh	r6, [r5, #0]
 801ccce:	806e      	strh	r6, [r5, #2]
 801ccd0:	80ae      	strh	r6, [r5, #4]
 801ccd2:	80ee      	strh	r6, [r5, #6]
 801ccd4:	4f9e      	ldr	r7, [pc, #632]	; (801cf50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801ccd6:	a809      	add	r0, sp, #36	; 0x24
 801ccd8:	f7ff fbd7 	bl	801c48a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ccdc:	883d      	ldrh	r5, [r7, #0]
 801ccde:	462e      	mov	r6, r5
 801cce0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cce4:	42b3      	cmp	r3, r6
 801cce6:	d910      	bls.n	801cd0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801cce8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ccec:	a809      	add	r0, sp, #36	; 0x24
 801ccee:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801ccf2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801ccf6:	3601      	adds	r6, #1
 801ccf8:	f7ff fc3c 	bl	801c574 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ccfc:	b2b6      	uxth	r6, r6
 801ccfe:	e7ef      	b.n	801cce0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801cd00:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d1e5      	bne.n	801ccd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801cd08:	e7bc      	b.n	801cc84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801cd0a:	462e      	mov	r6, r5
 801cd0c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801cd10:	42b3      	cmp	r3, r6
 801cd12:	d90b      	bls.n	801cd2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801cd14:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801cd18:	4620      	mov	r0, r4
 801cd1a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801cd1e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801cd22:	3601      	adds	r6, #1
 801cd24:	f7ff fc48 	bl	801c5b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801cd28:	b2b6      	uxth	r6, r6
 801cd2a:	e7ef      	b.n	801cd0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801cd2c:	4a89      	ldr	r2, [pc, #548]	; (801cf54 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801cd2e:	6813      	ldr	r3, [r2, #0]
 801cd30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801cd34:	2b01      	cmp	r3, #1
 801cd36:	4690      	mov	r8, r2
 801cd38:	f040 8094 	bne.w	801ce64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801cd3c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801cd40:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801cd44:	33aa      	adds	r3, #170	; 0xaa
 801cd46:	f04f 0900 	mov.w	r9, #0
 801cd4a:	42a8      	cmp	r0, r5
 801cd4c:	f103 0308 	add.w	r3, r3, #8
 801cd50:	dd0a      	ble.n	801cd68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801cd52:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801cd56:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801cd5a:	440a      	add	r2, r1
 801cd5c:	b212      	sxth	r2, r2
 801cd5e:	4591      	cmp	r9, r2
 801cd60:	bfb8      	it	lt
 801cd62:	4691      	movlt	r9, r2
 801cd64:	3501      	adds	r5, #1
 801cd66:	e7f0      	b.n	801cd4a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801cd68:	4b7b      	ldr	r3, [pc, #492]	; (801cf58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801cd6a:	4e7c      	ldr	r6, [pc, #496]	; (801cf5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801cd6c:	881d      	ldrh	r5, [r3, #0]
 801cd6e:	2300      	movs	r3, #0
 801cd70:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801cd74:	2d0f      	cmp	r5, #15
 801cd76:	bf8c      	ite	hi
 801cd78:	08ed      	lsrhi	r5, r5, #3
 801cd7a:	2501      	movls	r5, #1
 801cd7c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801cd80:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801cd84:	f8d8 0000 	ldr.w	r0, [r8]
 801cd88:	440b      	add	r3, r1
 801cd8a:	b21b      	sxth	r3, r3
 801cd8c:	4599      	cmp	r9, r3
 801cd8e:	6802      	ldr	r2, [r0, #0]
 801cd90:	dd4b      	ble.n	801ce2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801cd92:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801cd96:	4798      	blx	r3
 801cd98:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801cd9c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801cda0:	4413      	add	r3, r2
 801cda2:	b21b      	sxth	r3, r3
 801cda4:	195a      	adds	r2, r3, r5
 801cda6:	4290      	cmp	r0, r2
 801cda8:	da07      	bge.n	801cdba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801cdaa:	4581      	cmp	r9, r0
 801cdac:	dd05      	ble.n	801cdba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801cdae:	4298      	cmp	r0, r3
 801cdb0:	da33      	bge.n	801ce1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	dd31      	ble.n	801ce1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801cdb6:	4648      	mov	r0, r9
 801cdb8:	e004      	b.n	801cdc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801cdba:	4298      	cmp	r0, r3
 801cdbc:	dbfb      	blt.n	801cdb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801cdbe:	4548      	cmp	r0, r9
 801cdc0:	bfa8      	it	ge
 801cdc2:	4648      	movge	r0, r9
 801cdc4:	f9b6 2000 	ldrsh.w	r2, [r6]
 801cdc8:	f8b7 a000 	ldrh.w	sl, [r7]
 801cdcc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cdd0:	2100      	movs	r1, #0
 801cdd2:	1ac0      	subs	r0, r0, r3
 801cdd4:	f8ad 1014 	strh.w	r1, [sp, #20]
 801cdd8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cddc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801cde0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cde4:	4553      	cmp	r3, sl
 801cde6:	d9c9      	bls.n	801cd7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801cde8:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801cdec:	ab07      	add	r3, sp, #28
 801cdee:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801cdf2:	6851      	ldr	r1, [r2, #4]
 801cdf4:	c303      	stmia	r3!, {r0, r1}
 801cdf6:	a807      	add	r0, sp, #28
 801cdf8:	a905      	add	r1, sp, #20
 801cdfa:	f7fa fc91 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801cdfe:	a807      	add	r0, sp, #28
 801ce00:	f7fa fcd1 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ce04:	b920      	cbnz	r0, 801ce10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801ce06:	6823      	ldr	r3, [r4, #0]
 801ce08:	a907      	add	r1, sp, #28
 801ce0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce0c:	4620      	mov	r0, r4
 801ce0e:	4798      	blx	r3
 801ce10:	f10a 0a01 	add.w	sl, sl, #1
 801ce14:	fa1f fa8a 	uxth.w	sl, sl
 801ce18:	e7e2      	b.n	801cde0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801ce1a:	f8d8 0000 	ldr.w	r0, [r8]
 801ce1e:	6803      	ldr	r3, [r0, #0]
 801ce20:	2101      	movs	r1, #1
 801ce22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce26:	4798      	blx	r3
 801ce28:	e7a8      	b.n	801cd7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801ce2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801ce2c:	4798      	blx	r3
 801ce2e:	4b4c      	ldr	r3, [pc, #304]	; (801cf60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801ce30:	781b      	ldrb	r3, [r3, #0]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	f43f af26 	beq.w	801cc84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ce38:	2300      	movs	r3, #0
 801ce3a:	883d      	ldrh	r5, [r7, #0]
 801ce3c:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801ce40:	34ea      	adds	r4, #234	; 0xea
 801ce42:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801ce46:	42ab      	cmp	r3, r5
 801ce48:	f67f af1c 	bls.w	801cc84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ce4c:	ab1a      	add	r3, sp, #104	; 0x68
 801ce4e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ce52:	3b44      	subs	r3, #68	; 0x44
 801ce54:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ce58:	4620      	mov	r0, r4
 801ce5a:	3501      	adds	r5, #1
 801ce5c:	f7ff fb8a 	bl	801c574 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ce60:	b2ad      	uxth	r5, r5
 801ce62:	e7ee      	b.n	801ce42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801ce64:	2b02      	cmp	r3, #2
 801ce66:	f040 813e 	bne.w	801d0e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801ce6a:	4b3e      	ldr	r3, [pc, #248]	; (801cf64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>)
 801ce6c:	781b      	ldrb	r3, [r3, #0]
 801ce6e:	2b01      	cmp	r3, #1
 801ce70:	d02c      	beq.n	801cecc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801ce72:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801ce76:	883a      	ldrh	r2, [r7, #0]
 801ce78:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801ce7c:	3201      	adds	r2, #1
 801ce7e:	b292      	uxth	r2, r2
 801ce80:	2900      	cmp	r1, #0
 801ce82:	d0d4      	beq.n	801ce2e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801ce84:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801ce88:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801ce8c:	441d      	add	r5, r3
 801ce8e:	b22d      	sxth	r5, r5
 801ce90:	4610      	mov	r0, r2
 801ce92:	f04f 0a00 	mov.w	sl, #0
 801ce96:	b283      	uxth	r3, r0
 801ce98:	4299      	cmp	r1, r3
 801ce9a:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801ce9e:	f240 80c5 	bls.w	801d02c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3bc>
 801cea2:	4426      	add	r6, r4
 801cea4:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801cea8:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801ceac:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801ceb0:	4573      	cmp	r3, lr
 801ceb2:	4684      	mov	ip, r0
 801ceb4:	f340 80a7 	ble.w	801d006 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x396>
 801ceb8:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801cebc:	4475      	add	r5, lr
 801cebe:	b22d      	sxth	r5, r5
 801cec0:	429d      	cmp	r5, r3
 801cec2:	bfa8      	it	ge
 801cec4:	461d      	movge	r5, r3
 801cec6:	3001      	adds	r0, #1
 801cec8:	46e2      	mov	sl, ip
 801ceca:	e7e4      	b.n	801ce96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801cecc:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801ced0:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801ced4:	f1bb 0f00 	cmp.w	fp, #0
 801ced8:	d0a9      	beq.n	801ce2e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801ceda:	883b      	ldrh	r3, [r7, #0]
 801cedc:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801cee0:	3301      	adds	r3, #1
 801cee2:	b29b      	uxth	r3, r3
 801cee4:	2600      	movs	r6, #0
 801cee6:	b299      	uxth	r1, r3
 801cee8:	458b      	cmp	fp, r1
 801ceea:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 801ceee:	d93b      	bls.n	801cf68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>
 801cef0:	4425      	add	r5, r4
 801cef2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801cef6:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801cefa:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801cefe:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801cf02:	4408      	add	r0, r1
 801cf04:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801cf08:	4471      	add	r1, lr
 801cf0a:	b200      	sxth	r0, r0
 801cf0c:	b209      	sxth	r1, r1
 801cf0e:	4288      	cmp	r0, r1
 801cf10:	469c      	mov	ip, r3
 801cf12:	da06      	bge.n	801cf22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b2>
 801cf14:	4586      	cmp	lr, r0
 801cf16:	4672      	mov	r2, lr
 801cf18:	bfb8      	it	lt
 801cf1a:	4602      	movlt	r2, r0
 801cf1c:	3301      	adds	r3, #1
 801cf1e:	4666      	mov	r6, ip
 801cf20:	e7e1      	b.n	801cee6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801cf22:	d10b      	bne.n	801cf3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2cc>
 801cf24:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801cf28:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801cf2c:	458c      	cmp	ip, r1
 801cf2e:	bfb4      	ite	lt
 801cf30:	469c      	movlt	ip, r3
 801cf32:	46b4      	movge	ip, r6
 801cf34:	4572      	cmp	r2, lr
 801cf36:	bfb8      	it	lt
 801cf38:	4672      	movlt	r2, lr
 801cf3a:	e7ef      	b.n	801cf1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801cf3c:	428a      	cmp	r2, r1
 801cf3e:	bfb8      	it	lt
 801cf40:	460a      	movlt	r2, r1
 801cf42:	46b4      	mov	ip, r6
 801cf44:	e7ea      	b.n	801cf1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801cf46:	bf00      	nop
 801cf48:	20009858 	.word	0x20009858
 801cf4c:	20009864 	.word	0x20009864
 801cf50:	20000020 	.word	0x20000020
 801cf54:	20009820 	.word	0x20009820
 801cf58:	20009816 	.word	0x20009816
 801cf5c:	20009814 	.word	0x20009814
 801cf60:	2000981e 	.word	0x2000981e
 801cf64:	20009818 	.word	0x20009818
 801cf68:	1961      	adds	r1, r4, r5
 801cf6a:	ab07      	add	r3, sp, #28
 801cf6c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801cf70:	6849      	ldr	r1, [r1, #4]
 801cf72:	c303      	stmia	r3!, {r0, r1}
 801cf74:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801cf78:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cf7c:	2b13      	cmp	r3, #19
 801cf7e:	bfd8      	it	le
 801cf80:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801cf84:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cf88:	440b      	add	r3, r1
 801cf8a:	1a9b      	subs	r3, r3, r2
 801cf8c:	a807      	add	r0, sp, #28
 801cf8e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cf92:	f7ff f867 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf96:	a807      	add	r0, sp, #28
 801cf98:	f7fa fc05 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801cf9c:	2800      	cmp	r0, #0
 801cf9e:	d197      	bne.n	801ced0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801cfa0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801cfa4:	f8d8 0000 	ldr.w	r0, [r8]
 801cfa8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cfac:	f8d0 e000 	ldr.w	lr, [r0]
 801cfb0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801cfb4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cfb8:	f1bc 0f14 	cmp.w	ip, #20
 801cfbc:	bfa8      	it	ge
 801cfbe:	f04f 0c14 	movge.w	ip, #20
 801cfc2:	fa1f fc8c 	uxth.w	ip, ip
 801cfc6:	f8cd c000 	str.w	ip, [sp]
 801cfca:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801cfce:	47d0      	blx	sl
 801cfd0:	4682      	mov	sl, r0
 801cfd2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cfd6:	a807      	add	r0, sp, #28
 801cfd8:	f7ff f82a 	bl	801c030 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801cfdc:	6823      	ldr	r3, [r4, #0]
 801cfde:	4425      	add	r5, r4
 801cfe0:	4620      	mov	r0, r4
 801cfe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cfe4:	a907      	add	r1, sp, #28
 801cfe6:	4798      	blx	r3
 801cfe8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801cfec:	eba0 000a 	sub.w	r0, r0, sl
 801cff0:	b200      	sxth	r0, r0
 801cff2:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801cff6:	2800      	cmp	r0, #0
 801cff8:	f47f af6a 	bne.w	801ced0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801cffc:	b2b1      	uxth	r1, r6
 801cffe:	4648      	mov	r0, r9
 801d000:	f7ff fa96 	bl	801c530 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d004:	e764      	b.n	801ced0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801d006:	d10c      	bne.n	801d022 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b2>
 801d008:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801d00c:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801d010:	45b4      	cmp	ip, r6
 801d012:	bfb4      	ite	lt
 801d014:	4684      	movlt	ip, r0
 801d016:	46d4      	movge	ip, sl
 801d018:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801d01c:	4433      	add	r3, r6
 801d01e:	b21b      	sxth	r3, r3
 801d020:	e74e      	b.n	801cec0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801d022:	4575      	cmp	r5, lr
 801d024:	bfa8      	it	ge
 801d026:	4675      	movge	r5, lr
 801d028:	46d4      	mov	ip, sl
 801d02a:	e74c      	b.n	801cec6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801d02c:	eb0b 0006 	add.w	r0, fp, r6
 801d030:	4426      	add	r6, r4
 801d032:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801d036:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801d03a:	f1b9 0f13 	cmp.w	r9, #19
 801d03e:	bfde      	ittt	le
 801d040:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801d044:	444d      	addle	r5, r9
 801d046:	b22d      	sxthle	r5, r5
 801d048:	f7fa fbad 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d04c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801d050:	2800      	cmp	r0, #0
 801d052:	f47f af15 	bne.w	801ce80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801d056:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801d05a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d05e:	eba5 050c 	sub.w	r5, r5, ip
 801d062:	fa1f f28c 	uxth.w	r2, ip
 801d066:	fa1f f989 	uxth.w	r9, r9
 801d06a:	eb02 0009 	add.w	r0, r2, r9
 801d06e:	2d14      	cmp	r5, #20
 801d070:	bfa8      	it	ge
 801d072:	2514      	movge	r5, #20
 801d074:	b200      	sxth	r0, r0
 801d076:	fa1f fe85 	uxth.w	lr, r5
 801d07a:	eba0 000c 	sub.w	r0, r0, ip
 801d07e:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801d082:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801d086:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d08a:	4586      	cmp	lr, r0
 801d08c:	f8d8 0000 	ldr.w	r0, [r8]
 801d090:	f8ad c01e 	strh.w	ip, [sp, #30]
 801d094:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d098:	bfb8      	it	lt
 801d09a:	46f1      	movlt	r9, lr
 801d09c:	6805      	ldr	r5, [r0, #0]
 801d09e:	f8cd 9000 	str.w	r9, [sp]
 801d0a2:	b29b      	uxth	r3, r3
 801d0a4:	b289      	uxth	r1, r1
 801d0a6:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801d0aa:	47a8      	blx	r5
 801d0ac:	6823      	ldr	r3, [r4, #0]
 801d0ae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d0b4:	a907      	add	r1, sp, #28
 801d0b6:	4620      	mov	r0, r4
 801d0b8:	4798      	blx	r3
 801d0ba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d0be:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801d0c2:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801d0c6:	1a5b      	subs	r3, r3, r1
 801d0c8:	440a      	add	r2, r1
 801d0ca:	b21b      	sxth	r3, r3
 801d0cc:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801d0d0:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	f47f aece 	bne.w	801ce76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801d0da:	fa1f f18a 	uxth.w	r1, sl
 801d0de:	4658      	mov	r0, fp
 801d0e0:	f7ff fa26 	bl	801c530 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d0e4:	e6c7      	b.n	801ce76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801d0e6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801d0ea:	42ab      	cmp	r3, r5
 801d0ec:	f67f ae9f 	bls.w	801ce2e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801d0f0:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801d0f4:	ab07      	add	r3, sp, #28
 801d0f6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801d0fa:	6851      	ldr	r1, [r2, #4]
 801d0fc:	c303      	stmia	r3!, {r0, r1}
 801d0fe:	a807      	add	r0, sp, #28
 801d100:	f7fa fb51 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801d104:	b920      	cbnz	r0, 801d110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4a0>
 801d106:	6823      	ldr	r3, [r4, #0]
 801d108:	a907      	add	r1, sp, #28
 801d10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d10c:	4620      	mov	r0, r4
 801d10e:	4798      	blx	r3
 801d110:	3501      	adds	r5, #1
 801d112:	b2ad      	uxth	r5, r5
 801d114:	e7e7      	b.n	801d0e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801d116:	bf00      	nop

0801d118 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801d118:	4b03      	ldr	r3, [pc, #12]	; (801d128 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801d11a:	2200      	movs	r2, #0
 801d11c:	801a      	strh	r2, [r3, #0]
 801d11e:	805a      	strh	r2, [r3, #2]
 801d120:	809a      	strh	r2, [r3, #4]
 801d122:	80da      	strh	r2, [r3, #6]
 801d124:	4770      	bx	lr
 801d126:	bf00      	nop
 801d128:	20009864 	.word	0x20009864

0801d12c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801d12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d130:	4606      	mov	r6, r0
 801d132:	b09d      	sub	sp, #116	; 0x74
 801d134:	a803      	add	r0, sp, #12
 801d136:	4614      	mov	r4, r2
 801d138:	468a      	mov	sl, r1
 801d13a:	461d      	mov	r5, r3
 801d13c:	f000 fe3d 	bl	801ddba <_ZN8touchgfx12TextProviderC1Ev>
 801d140:	6833      	ldr	r3, [r6, #0]
 801d142:	4630      	mov	r0, r6
 801d144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d146:	4798      	blx	r3
 801d148:	6833      	ldr	r3, [r6, #0]
 801d14a:	4607      	mov	r7, r0
 801d14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d14e:	4630      	mov	r0, r6
 801d150:	4798      	blx	r3
 801d152:	462a      	mov	r2, r5
 801d154:	9000      	str	r0, [sp, #0]
 801d156:	4621      	mov	r1, r4
 801d158:	463b      	mov	r3, r7
 801d15a:	a803      	add	r0, sp, #12
 801d15c:	f000 fe80 	bl	801de60 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d160:	2500      	movs	r5, #0
 801d162:	462c      	mov	r4, r5
 801d164:	46a9      	mov	r9, r5
 801d166:	46a8      	mov	r8, r5
 801d168:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801d16c:	2300      	movs	r3, #0
 801d16e:	9302      	str	r3, [sp, #8]
 801d170:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d174:	429c      	cmp	r4, r3
 801d176:	d002      	beq.n	801d17e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801d178:	455c      	cmp	r4, fp
 801d17a:	bf18      	it	ne
 801d17c:	4625      	movne	r5, r4
 801d17e:	ab02      	add	r3, sp, #8
 801d180:	4632      	mov	r2, r6
 801d182:	4651      	mov	r1, sl
 801d184:	a803      	add	r0, sp, #12
 801d186:	f001 f96b 	bl	801e460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d18a:	4604      	mov	r4, r0
 801d18c:	b108      	cbz	r0, 801d192 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801d18e:	280a      	cmp	r0, #10
 801d190:	d10a      	bne.n	801d1a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801d192:	45c1      	cmp	r9, r8
 801d194:	bf38      	it	cc
 801d196:	46c1      	movcc	r9, r8
 801d198:	f04f 0800 	mov.w	r8, #0
 801d19c:	2c00      	cmp	r4, #0
 801d19e:	d1e5      	bne.n	801d16c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d1a0:	4648      	mov	r0, r9
 801d1a2:	b01d      	add	sp, #116	; 0x74
 801d1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1a8:	9a02      	ldr	r2, [sp, #8]
 801d1aa:	2a00      	cmp	r2, #0
 801d1ac:	d0de      	beq.n	801d16c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801d1ae:	7b57      	ldrb	r7, [r2, #13]
 801d1b0:	6833      	ldr	r3, [r6, #0]
 801d1b2:	8894      	ldrh	r4, [r2, #4]
 801d1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d1b6:	007f      	lsls	r7, r7, #1
 801d1b8:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801d1bc:	7a97      	ldrb	r7, [r2, #10]
 801d1be:	4629      	mov	r1, r5
 801d1c0:	4307      	orrs	r7, r0
 801d1c2:	4630      	mov	r0, r6
 801d1c4:	4798      	blx	r3
 801d1c6:	4438      	add	r0, r7
 801d1c8:	4480      	add	r8, r0
 801d1ca:	fa1f f888 	uxth.w	r8, r8
 801d1ce:	e7e5      	b.n	801d19c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801d1d0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801d1d0:	b508      	push	{r3, lr}
 801d1d2:	6803      	ldr	r3, [r0, #0]
 801d1d4:	68db      	ldr	r3, [r3, #12]
 801d1d6:	4798      	blx	r3
 801d1d8:	b128      	cbz	r0, 801d1e6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801d1da:	7b43      	ldrb	r3, [r0, #13]
 801d1dc:	7a80      	ldrb	r0, [r0, #10]
 801d1de:	005b      	lsls	r3, r3, #1
 801d1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1e4:	4318      	orrs	r0, r3
 801d1e6:	bd08      	pop	{r3, pc}

0801d1e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801d1e8:	b40e      	push	{r1, r2, r3}
 801d1ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1ec:	b09e      	sub	sp, #120	; 0x78
 801d1ee:	ab23      	add	r3, sp, #140	; 0x8c
 801d1f0:	4605      	mov	r5, r0
 801d1f2:	f853 4b04 	ldr.w	r4, [r3], #4
 801d1f6:	9303      	str	r3, [sp, #12]
 801d1f8:	a805      	add	r0, sp, #20
 801d1fa:	f000 fdde 	bl	801ddba <_ZN8touchgfx12TextProviderC1Ev>
 801d1fe:	682b      	ldr	r3, [r5, #0]
 801d200:	4628      	mov	r0, r5
 801d202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d204:	4798      	blx	r3
 801d206:	682b      	ldr	r3, [r5, #0]
 801d208:	4606      	mov	r6, r0
 801d20a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d20c:	4628      	mov	r0, r5
 801d20e:	4798      	blx	r3
 801d210:	4633      	mov	r3, r6
 801d212:	ae1e      	add	r6, sp, #120	; 0x78
 801d214:	4621      	mov	r1, r4
 801d216:	9000      	str	r0, [sp, #0]
 801d218:	9a03      	ldr	r2, [sp, #12]
 801d21a:	2400      	movs	r4, #0
 801d21c:	a805      	add	r0, sp, #20
 801d21e:	f000 fe1f 	bl	801de60 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d222:	f846 4d68 	str.w	r4, [r6, #-104]!
 801d226:	462a      	mov	r2, r5
 801d228:	4633      	mov	r3, r6
 801d22a:	4621      	mov	r1, r4
 801d22c:	a805      	add	r0, sp, #20
 801d22e:	f001 f917 	bl	801e460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d232:	b1f0      	cbz	r0, 801d272 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801d234:	280a      	cmp	r0, #10
 801d236:	d018      	beq.n	801d26a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801d238:	9f04      	ldr	r7, [sp, #16]
 801d23a:	b1b7      	cbz	r7, 801d26a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801d23c:	7b78      	ldrb	r0, [r7, #13]
 801d23e:	7a3b      	ldrb	r3, [r7, #8]
 801d240:	88aa      	ldrh	r2, [r5, #4]
 801d242:	00c1      	lsls	r1, r0, #3
 801d244:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d248:	4319      	orrs	r1, r3
 801d24a:	0643      	lsls	r3, r0, #25
 801d24c:	bf44      	itt	mi
 801d24e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801d252:	b219      	sxthmi	r1, r3
 801d254:	0100      	lsls	r0, r0, #4
 801d256:	79fb      	ldrb	r3, [r7, #7]
 801d258:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d25c:	4303      	orrs	r3, r0
 801d25e:	4413      	add	r3, r2
 801d260:	1a5b      	subs	r3, r3, r1
 801d262:	b29b      	uxth	r3, r3
 801d264:	42a3      	cmp	r3, r4
 801d266:	bfc8      	it	gt
 801d268:	b21c      	sxthgt	r4, r3
 801d26a:	4633      	mov	r3, r6
 801d26c:	462a      	mov	r2, r5
 801d26e:	2100      	movs	r1, #0
 801d270:	e7dc      	b.n	801d22c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801d272:	b2a0      	uxth	r0, r4
 801d274:	b01e      	add	sp, #120	; 0x78
 801d276:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d27a:	b003      	add	sp, #12
 801d27c:	4770      	bx	lr

0801d27e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801d27e:	b40e      	push	{r1, r2, r3}
 801d280:	b570      	push	{r4, r5, r6, lr}
 801d282:	b09d      	sub	sp, #116	; 0x74
 801d284:	ab21      	add	r3, sp, #132	; 0x84
 801d286:	4604      	mov	r4, r0
 801d288:	f853 5b04 	ldr.w	r5, [r3], #4
 801d28c:	9302      	str	r3, [sp, #8]
 801d28e:	a803      	add	r0, sp, #12
 801d290:	f000 fd93 	bl	801ddba <_ZN8touchgfx12TextProviderC1Ev>
 801d294:	6823      	ldr	r3, [r4, #0]
 801d296:	4620      	mov	r0, r4
 801d298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d29a:	4798      	blx	r3
 801d29c:	6823      	ldr	r3, [r4, #0]
 801d29e:	4606      	mov	r6, r0
 801d2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d2a2:	4620      	mov	r0, r4
 801d2a4:	4798      	blx	r3
 801d2a6:	4633      	mov	r3, r6
 801d2a8:	9000      	str	r0, [sp, #0]
 801d2aa:	9a02      	ldr	r2, [sp, #8]
 801d2ac:	4629      	mov	r1, r5
 801d2ae:	a803      	add	r0, sp, #12
 801d2b0:	f000 fdd6 	bl	801de60 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d2b4:	a803      	add	r0, sp, #12
 801d2b6:	f001 f9cd 	bl	801e654 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d2ba:	2401      	movs	r4, #1
 801d2bc:	b2a3      	uxth	r3, r4
 801d2be:	b140      	cbz	r0, 801d2d2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801d2c0:	280a      	cmp	r0, #10
 801d2c2:	bf08      	it	eq
 801d2c4:	3301      	addeq	r3, #1
 801d2c6:	a803      	add	r0, sp, #12
 801d2c8:	bf08      	it	eq
 801d2ca:	b21c      	sxtheq	r4, r3
 801d2cc:	f001 f9c2 	bl	801e654 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d2d0:	e7f4      	b.n	801d2bc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	b01d      	add	sp, #116	; 0x74
 801d2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d2da:	b003      	add	sp, #12
 801d2dc:	4770      	bx	lr

0801d2de <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801d2de:	b40e      	push	{r1, r2, r3}
 801d2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2e2:	b09e      	sub	sp, #120	; 0x78
 801d2e4:	ab23      	add	r3, sp, #140	; 0x8c
 801d2e6:	4604      	mov	r4, r0
 801d2e8:	f853 5b04 	ldr.w	r5, [r3], #4
 801d2ec:	9303      	str	r3, [sp, #12]
 801d2ee:	a805      	add	r0, sp, #20
 801d2f0:	f000 fd63 	bl	801ddba <_ZN8touchgfx12TextProviderC1Ev>
 801d2f4:	6823      	ldr	r3, [r4, #0]
 801d2f6:	4620      	mov	r0, r4
 801d2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d2fa:	4798      	blx	r3
 801d2fc:	6823      	ldr	r3, [r4, #0]
 801d2fe:	4606      	mov	r6, r0
 801d300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d302:	4620      	mov	r0, r4
 801d304:	4798      	blx	r3
 801d306:	4633      	mov	r3, r6
 801d308:	4629      	mov	r1, r5
 801d30a:	9000      	str	r0, [sp, #0]
 801d30c:	9a03      	ldr	r2, [sp, #12]
 801d30e:	a805      	add	r0, sp, #20
 801d310:	ad1e      	add	r5, sp, #120	; 0x78
 801d312:	f000 fda5 	bl	801de60 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d316:	2100      	movs	r1, #0
 801d318:	f845 1d68 	str.w	r1, [r5, #-104]!
 801d31c:	4622      	mov	r2, r4
 801d31e:	462b      	mov	r3, r5
 801d320:	a805      	add	r0, sp, #20
 801d322:	f001 f89d 	bl	801e460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d326:	26ff      	movs	r6, #255	; 0xff
 801d328:	b1d8      	cbz	r0, 801d362 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801d32a:	280a      	cmp	r0, #10
 801d32c:	d012      	beq.n	801d354 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801d32e:	9804      	ldr	r0, [sp, #16]
 801d330:	b180      	cbz	r0, 801d354 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801d332:	7b47      	ldrb	r7, [r0, #13]
 801d334:	7922      	ldrb	r2, [r4, #4]
 801d336:	00fb      	lsls	r3, r7, #3
 801d338:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d33c:	7a03      	ldrb	r3, [r0, #8]
 801d33e:	430b      	orrs	r3, r1
 801d340:	0679      	lsls	r1, r7, #25
 801d342:	bf44      	itt	mi
 801d344:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d348:	b21b      	sxthmi	r3, r3
 801d34a:	1ad3      	subs	r3, r2, r3
 801d34c:	b2db      	uxtb	r3, r3
 801d34e:	429e      	cmp	r6, r3
 801d350:	bf28      	it	cs
 801d352:	461e      	movcs	r6, r3
 801d354:	462b      	mov	r3, r5
 801d356:	4622      	mov	r2, r4
 801d358:	2100      	movs	r1, #0
 801d35a:	a805      	add	r0, sp, #20
 801d35c:	f001 f880 	bl	801e460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d360:	e7e2      	b.n	801d328 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801d362:	4630      	mov	r0, r6
 801d364:	b01e      	add	sp, #120	; 0x78
 801d366:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801d36a:	b003      	add	sp, #12
 801d36c:	4770      	bx	lr

0801d36e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801d36e:	b513      	push	{r0, r1, r4, lr}
 801d370:	6803      	ldr	r3, [r0, #0]
 801d372:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d376:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d37a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d37e:	2400      	movs	r4, #0
 801d380:	9400      	str	r4, [sp, #0]
 801d382:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d386:	691b      	ldr	r3, [r3, #16]
 801d388:	4669      	mov	r1, sp
 801d38a:	4798      	blx	r3
 801d38c:	b002      	add	sp, #8
 801d38e:	bd10      	pop	{r4, pc}

0801d390 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801d390:	b538      	push	{r3, r4, r5, lr}
 801d392:	680b      	ldr	r3, [r1, #0]
 801d394:	460c      	mov	r4, r1
 801d396:	68db      	ldr	r3, [r3, #12]
 801d398:	4605      	mov	r5, r0
 801d39a:	4798      	blx	r3
 801d39c:	6823      	ldr	r3, [r4, #0]
 801d39e:	4620      	mov	r0, r4
 801d3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3a2:	4629      	mov	r1, r5
 801d3a4:	4798      	blx	r3
 801d3a6:	4628      	mov	r0, r5
 801d3a8:	bd38      	pop	{r3, r4, r5, pc}

0801d3aa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801d3aa:	b410      	push	{r4}
 801d3ac:	880a      	ldrh	r2, [r1, #0]
 801d3ae:	8884      	ldrh	r4, [r0, #4]
 801d3b0:	4422      	add	r2, r4
 801d3b2:	800a      	strh	r2, [r1, #0]
 801d3b4:	88c4      	ldrh	r4, [r0, #6]
 801d3b6:	884a      	ldrh	r2, [r1, #2]
 801d3b8:	4422      	add	r2, r4
 801d3ba:	804a      	strh	r2, [r1, #2]
 801d3bc:	6940      	ldr	r0, [r0, #20]
 801d3be:	b120      	cbz	r0, 801d3ca <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801d3c0:	6803      	ldr	r3, [r0, #0]
 801d3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3c8:	4718      	bx	r3
 801d3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3ce:	4770      	bx	lr

0801d3d0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801d3d0:	b570      	push	{r4, r5, r6, lr}
 801d3d2:	8882      	ldrh	r2, [r0, #4]
 801d3d4:	880b      	ldrh	r3, [r1, #0]
 801d3d6:	4413      	add	r3, r2
 801d3d8:	800b      	strh	r3, [r1, #0]
 801d3da:	88c2      	ldrh	r2, [r0, #6]
 801d3dc:	884b      	ldrh	r3, [r1, #2]
 801d3de:	460c      	mov	r4, r1
 801d3e0:	4413      	add	r3, r2
 801d3e2:	804b      	strh	r3, [r1, #2]
 801d3e4:	4605      	mov	r5, r0
 801d3e6:	1d01      	adds	r1, r0, #4
 801d3e8:	4620      	mov	r0, r4
 801d3ea:	f7fa f999 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801d3ee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	dd0b      	ble.n	801d40e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d3f6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	dd07      	ble.n	801d40e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d3fe:	6968      	ldr	r0, [r5, #20]
 801d400:	b128      	cbz	r0, 801d40e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d402:	6803      	ldr	r3, [r0, #0]
 801d404:	4621      	mov	r1, r4
 801d406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d40c:	4718      	bx	r3
 801d40e:	bd70      	pop	{r4, r5, r6, pc}

0801d410 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801d410:	b570      	push	{r4, r5, r6, lr}
 801d412:	8882      	ldrh	r2, [r0, #4]
 801d414:	880b      	ldrh	r3, [r1, #0]
 801d416:	4413      	add	r3, r2
 801d418:	800b      	strh	r3, [r1, #0]
 801d41a:	88c2      	ldrh	r2, [r0, #6]
 801d41c:	884b      	ldrh	r3, [r1, #2]
 801d41e:	460c      	mov	r4, r1
 801d420:	4413      	add	r3, r2
 801d422:	804b      	strh	r3, [r1, #2]
 801d424:	4605      	mov	r5, r0
 801d426:	1d01      	adds	r1, r0, #4
 801d428:	4620      	mov	r0, r4
 801d42a:	f7fa f979 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801d42e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d432:	2b00      	cmp	r3, #0
 801d434:	dd15      	ble.n	801d462 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d436:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	dd11      	ble.n	801d462 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d43e:	6968      	ldr	r0, [r5, #20]
 801d440:	b128      	cbz	r0, 801d44e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801d442:	6803      	ldr	r3, [r0, #0]
 801d444:	691b      	ldr	r3, [r3, #16]
 801d446:	4621      	mov	r1, r4
 801d448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d44c:	4718      	bx	r3
 801d44e:	4b05      	ldr	r3, [pc, #20]	; (801d464 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	3304      	adds	r3, #4
 801d454:	429d      	cmp	r5, r3
 801d456:	d104      	bne.n	801d462 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d458:	f7fe ffbe 	bl	801c3d8 <_ZN8touchgfx11Application11getInstanceEv>
 801d45c:	6803      	ldr	r3, [r0, #0]
 801d45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d460:	e7f1      	b.n	801d446 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801d462:	bd70      	pop	{r4, r5, r6, pc}
 801d464:	2000985c 	.word	0x2000985c

0801d468 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801d468:	b570      	push	{r4, r5, r6, lr}
 801d46a:	4604      	mov	r4, r0
 801d46c:	4616      	mov	r6, r2
 801d46e:	460d      	mov	r5, r1
 801d470:	b901      	cbnz	r1, 801d474 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801d472:	b192      	cbz	r2, 801d49a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801d474:	6823      	ldr	r3, [r4, #0]
 801d476:	4620      	mov	r0, r4
 801d478:	695b      	ldr	r3, [r3, #20]
 801d47a:	4798      	blx	r3
 801d47c:	88e2      	ldrh	r2, [r4, #6]
 801d47e:	88a1      	ldrh	r1, [r4, #4]
 801d480:	4432      	add	r2, r6
 801d482:	4429      	add	r1, r5
 801d484:	4620      	mov	r0, r4
 801d486:	b212      	sxth	r2, r2
 801d488:	b209      	sxth	r1, r1
 801d48a:	f7f3 f835 	bl	80104f8 <_ZN8touchgfx8Drawable5setXYEss>
 801d48e:	6823      	ldr	r3, [r4, #0]
 801d490:	4620      	mov	r0, r4
 801d492:	695b      	ldr	r3, [r3, #20]
 801d494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d498:	4718      	bx	r3
 801d49a:	bd70      	pop	{r4, r5, r6, pc}

0801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801d49c:	b510      	push	{r4, lr}
 801d49e:	4604      	mov	r4, r0
 801d4a0:	4608      	mov	r0, r1
 801d4a2:	2300      	movs	r3, #0
 801d4a4:	8023      	strh	r3, [r4, #0]
 801d4a6:	8063      	strh	r3, [r4, #2]
 801d4a8:	6803      	ldr	r3, [r0, #0]
 801d4aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d4ae:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801d4b2:	80a1      	strh	r1, [r4, #4]
 801d4b4:	80e2      	strh	r2, [r4, #6]
 801d4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4b8:	4621      	mov	r1, r4
 801d4ba:	4798      	blx	r3
 801d4bc:	4620      	mov	r0, r4
 801d4be:	bd10      	pop	{r4, pc}

0801d4c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801d4c0:	b530      	push	{r4, r5, lr}
 801d4c2:	8083      	strh	r3, [r0, #4]
 801d4c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801d4c8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801d4cc:	7183      	strb	r3, [r0, #6]
 801d4ce:	79c3      	ldrb	r3, [r0, #7]
 801d4d0:	6101      	str	r1, [r0, #16]
 801d4d2:	f365 0306 	bfi	r3, r5, #0, #7
 801d4d6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801d4da:	8282      	strh	r2, [r0, #20]
 801d4dc:	f365 13c7 	bfi	r3, r5, #7, #1
 801d4e0:	71c3      	strb	r3, [r0, #7]
 801d4e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801d4e6:	7203      	strb	r3, [r0, #8]
 801d4e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801d4ec:	7243      	strb	r3, [r0, #9]
 801d4ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d4f2:	8143      	strh	r3, [r0, #10]
 801d4f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d4f8:	8183      	strh	r3, [r0, #12]
 801d4fa:	4b01      	ldr	r3, [pc, #4]	; (801d500 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801d4fc:	6003      	str	r3, [r0, #0]
 801d4fe:	bd30      	pop	{r4, r5, pc}
 801d500:	08032548 	.word	0x08032548

0801d504 <_ZNK8touchgfx9ConstFont4findEt>:
 801d504:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d506:	6904      	ldr	r4, [r0, #16]
 801d508:	b3bc      	cbz	r4, 801d57a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d50a:	88a3      	ldrh	r3, [r4, #4]
 801d50c:	8a82      	ldrh	r2, [r0, #20]
 801d50e:	1acb      	subs	r3, r1, r3
 801d510:	f102 32ff 	add.w	r2, r2, #4294967295
 801d514:	d431      	bmi.n	801d57a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d516:	4293      	cmp	r3, r2
 801d518:	dd0c      	ble.n	801d534 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801d51a:	230e      	movs	r3, #14
 801d51c:	fb03 4302 	mla	r3, r3, r2, r4
 801d520:	889b      	ldrh	r3, [r3, #4]
 801d522:	1a5b      	subs	r3, r3, r1
 801d524:	1ad3      	subs	r3, r2, r3
 801d526:	429a      	cmp	r2, r3
 801d528:	db27      	blt.n	801d57a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	bfbc      	itt	lt
 801d52e:	2302      	movlt	r3, #2
 801d530:	fb92 f3f3 	sdivlt	r3, r2, r3
 801d534:	2500      	movs	r5, #0
 801d536:	260e      	movs	r6, #14
 801d538:	4295      	cmp	r5, r2
 801d53a:	dc1e      	bgt.n	801d57a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d53c:	fb06 4003 	mla	r0, r6, r3, r4
 801d540:	8887      	ldrh	r7, [r0, #4]
 801d542:	42b9      	cmp	r1, r7
 801d544:	d01a      	beq.n	801d57c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801d546:	d20d      	bcs.n	801d564 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801d548:	1e5a      	subs	r2, r3, #1
 801d54a:	4295      	cmp	r5, r2
 801d54c:	dc15      	bgt.n	801d57a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d54e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801d552:	1a5b      	subs	r3, r3, r1
 801d554:	1ad3      	subs	r3, r2, r3
 801d556:	429a      	cmp	r2, r3
 801d558:	db0f      	blt.n	801d57a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d55a:	429d      	cmp	r5, r3
 801d55c:	ddec      	ble.n	801d538 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d55e:	1953      	adds	r3, r2, r5
 801d560:	105b      	asrs	r3, r3, #1
 801d562:	e7e9      	b.n	801d538 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d564:	1c5d      	adds	r5, r3, #1
 801d566:	42aa      	cmp	r2, r5
 801d568:	db07      	blt.n	801d57a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d56a:	8a43      	ldrh	r3, [r0, #18]
 801d56c:	1acb      	subs	r3, r1, r3
 801d56e:	442b      	add	r3, r5
 801d570:	429d      	cmp	r5, r3
 801d572:	dc02      	bgt.n	801d57a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d574:	429a      	cmp	r2, r3
 801d576:	dadf      	bge.n	801d538 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d578:	e7f1      	b.n	801d55e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801d57a:	2000      	movs	r0, #0
 801d57c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d57e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801d57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d580:	4604      	mov	r4, r0
 801d582:	4617      	mov	r7, r2
 801d584:	461e      	mov	r6, r3
 801d586:	b911      	cbnz	r1, 801d58e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d588:	2500      	movs	r5, #0
 801d58a:	4628      	mov	r0, r5
 801d58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d58e:	290a      	cmp	r1, #10
 801d590:	d0fa      	beq.n	801d588 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d592:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801d596:	4291      	cmp	r1, r2
 801d598:	d0f6      	beq.n	801d588 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d59a:	f242 020b 	movw	r2, #8203	; 0x200b
 801d59e:	4291      	cmp	r1, r2
 801d5a0:	d0f2      	beq.n	801d588 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d5a2:	f7ff ffaf 	bl	801d504 <_ZNK8touchgfx9ConstFont4findEt>
 801d5a6:	4605      	mov	r5, r0
 801d5a8:	b950      	cbnz	r0, 801d5c0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801d5aa:	6823      	ldr	r3, [r4, #0]
 801d5ac:	4620      	mov	r0, r4
 801d5ae:	691b      	ldr	r3, [r3, #16]
 801d5b0:	4798      	blx	r3
 801d5b2:	4601      	mov	r1, r0
 801d5b4:	4620      	mov	r0, r4
 801d5b6:	f7ff ffa5 	bl	801d504 <_ZNK8touchgfx9ConstFont4findEt>
 801d5ba:	4605      	mov	r5, r0
 801d5bc:	2800      	cmp	r0, #0
 801d5be:	d0e3      	beq.n	801d588 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d5c0:	6823      	ldr	r3, [r4, #0]
 801d5c2:	4629      	mov	r1, r5
 801d5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d5c6:	4620      	mov	r0, r4
 801d5c8:	4798      	blx	r3
 801d5ca:	6038      	str	r0, [r7, #0]
 801d5cc:	6823      	ldr	r3, [r4, #0]
 801d5ce:	4620      	mov	r0, r4
 801d5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d5d2:	4798      	blx	r3
 801d5d4:	7030      	strb	r0, [r6, #0]
 801d5d6:	e7d8      	b.n	801d58a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801d5d8 <_ZN8touchgfx6memsetEPvhm>:
 801d5d8:	4402      	add	r2, r0
 801d5da:	4290      	cmp	r0, r2
 801d5dc:	d002      	beq.n	801d5e4 <_ZN8touchgfx6memsetEPvhm+0xc>
 801d5de:	f800 1b01 	strb.w	r1, [r0], #1
 801d5e2:	e7fa      	b.n	801d5da <_ZN8touchgfx6memsetEPvhm+0x2>
 801d5e4:	4770      	bx	lr

0801d5e6 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801d5e6:	b538      	push	{r3, r4, r5, lr}
 801d5e8:	4605      	mov	r5, r0
 801d5ea:	f002 fc8d 	bl	801ff08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d5ee:	4604      	mov	r4, r0
 801d5f0:	4628      	mov	r0, r5
 801d5f2:	f002 fbc5 	bl	801fd80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d5f6:	2800      	cmp	r0, #0
 801d5f8:	bf14      	ite	ne
 801d5fa:	2002      	movne	r0, #2
 801d5fc:	2000      	moveq	r0, #0
 801d5fe:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801d602:	b280      	uxth	r0, r0
 801d604:	bd38      	pop	{r3, r4, r5, pc}

0801d606 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801d606:	b538      	push	{r3, r4, r5, lr}
 801d608:	4605      	mov	r5, r0
 801d60a:	f002 fc7d 	bl	801ff08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d60e:	4604      	mov	r4, r0
 801d610:	4628      	mov	r0, r5
 801d612:	f002 fbb5 	bl	801fd80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d616:	2800      	cmp	r0, #0
 801d618:	bf14      	ite	ne
 801d61a:	2002      	movne	r0, #2
 801d61c:	2000      	moveq	r0, #0
 801d61e:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801d622:	f040 0001 	orr.w	r0, r0, #1
 801d626:	b280      	uxth	r0, r0
 801d628:	bd38      	pop	{r3, r4, r5, pc}

0801d62a <_ZN8touchgfx4clzuEm>:
 801d62a:	4603      	mov	r3, r0
 801d62c:	b1c8      	cbz	r0, 801d662 <_ZN8touchgfx4clzuEm+0x38>
 801d62e:	0c02      	lsrs	r2, r0, #16
 801d630:	0412      	lsls	r2, r2, #16
 801d632:	b9a2      	cbnz	r2, 801d65e <_ZN8touchgfx4clzuEm+0x34>
 801d634:	0403      	lsls	r3, r0, #16
 801d636:	2010      	movs	r0, #16
 801d638:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d63c:	bf04      	itt	eq
 801d63e:	021b      	lsleq	r3, r3, #8
 801d640:	3008      	addeq	r0, #8
 801d642:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d646:	bf04      	itt	eq
 801d648:	011b      	lsleq	r3, r3, #4
 801d64a:	3004      	addeq	r0, #4
 801d64c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d650:	bf04      	itt	eq
 801d652:	009b      	lsleq	r3, r3, #2
 801d654:	3002      	addeq	r0, #2
 801d656:	2b00      	cmp	r3, #0
 801d658:	db04      	blt.n	801d664 <_ZN8touchgfx4clzuEm+0x3a>
 801d65a:	3001      	adds	r0, #1
 801d65c:	4770      	bx	lr
 801d65e:	2000      	movs	r0, #0
 801d660:	e7ea      	b.n	801d638 <_ZN8touchgfx4clzuEm+0xe>
 801d662:	2020      	movs	r0, #32
 801d664:	4770      	bx	lr

0801d666 <_ZN8touchgfx7muldivuEmmmRm>:
 801d666:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d66a:	4680      	mov	r8, r0
 801d66c:	460f      	mov	r7, r1
 801d66e:	4615      	mov	r5, r2
 801d670:	461e      	mov	r6, r3
 801d672:	f7ff ffda 	bl	801d62a <_ZN8touchgfx4clzuEm>
 801d676:	b998      	cbnz	r0, 801d6a0 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801d678:	4608      	mov	r0, r1
 801d67a:	f7ff ffd6 	bl	801d62a <_ZN8touchgfx4clzuEm>
 801d67e:	2800      	cmp	r0, #0
 801d680:	dd08      	ble.n	801d694 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801d682:	4633      	mov	r3, r6
 801d684:	462a      	mov	r2, r5
 801d686:	4641      	mov	r1, r8
 801d688:	4638      	mov	r0, r7
 801d68a:	f7ff ffec 	bl	801d666 <_ZN8touchgfx7muldivuEmmmRm>
 801d68e:	b003      	add	sp, #12
 801d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d694:	f04f 33ff 	mov.w	r3, #4294967295
 801d698:	6033      	str	r3, [r6, #0]
 801d69a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801d69e:	e7f6      	b.n	801d68e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d6a0:	fa31 f900 	lsrs.w	r9, r1, r0
 801d6a4:	fb01 f308 	mul.w	r3, r1, r8
 801d6a8:	d105      	bne.n	801d6b6 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801d6aa:	fbb3 f0f5 	udiv	r0, r3, r5
 801d6ae:	fb05 3510 	mls	r5, r5, r0, r3
 801d6b2:	6035      	str	r5, [r6, #0]
 801d6b4:	e7eb      	b.n	801d68e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d6b6:	2301      	movs	r3, #1
 801d6b8:	fa08 fb00 	lsl.w	fp, r8, r0
 801d6bc:	fa03 f000 	lsl.w	r0, r3, r0
 801d6c0:	3801      	subs	r0, #1
 801d6c2:	462a      	mov	r2, r5
 801d6c4:	4633      	mov	r3, r6
 801d6c6:	4641      	mov	r1, r8
 801d6c8:	4038      	ands	r0, r7
 801d6ca:	f7ff ffcc 	bl	801d666 <_ZN8touchgfx7muldivuEmmmRm>
 801d6ce:	fbbb faf5 	udiv	sl, fp, r5
 801d6d2:	462a      	mov	r2, r5
 801d6d4:	4607      	mov	r7, r0
 801d6d6:	ab01      	add	r3, sp, #4
 801d6d8:	fb05 b11a 	mls	r1, r5, sl, fp
 801d6dc:	4648      	mov	r0, r9
 801d6de:	f7ff ffc2 	bl	801d666 <_ZN8touchgfx7muldivuEmmmRm>
 801d6e2:	9b01      	ldr	r3, [sp, #4]
 801d6e4:	6832      	ldr	r2, [r6, #0]
 801d6e6:	fb09 f40a 	mul.w	r4, r9, sl
 801d6ea:	441a      	add	r2, r3
 801d6ec:	fbb2 f3f5 	udiv	r3, r2, r5
 801d6f0:	441c      	add	r4, r3
 801d6f2:	443c      	add	r4, r7
 801d6f4:	4420      	add	r0, r4
 801d6f6:	fb05 2513 	mls	r5, r5, r3, r2
 801d6fa:	e7da      	b.n	801d6b2 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801d6fc <_ZN8touchgfx6muldivElllRl>:
 801d6fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d6fe:	2800      	cmp	r0, #0
 801d700:	bfba      	itte	lt
 801d702:	4240      	neglt	r0, r0
 801d704:	f04f 34ff 	movlt.w	r4, #4294967295
 801d708:	2401      	movge	r4, #1
 801d70a:	2900      	cmp	r1, #0
 801d70c:	bfbc      	itt	lt
 801d70e:	4249      	neglt	r1, r1
 801d710:	4264      	neglt	r4, r4
 801d712:	2a00      	cmp	r2, #0
 801d714:	bfb6      	itet	lt
 801d716:	4265      	neglt	r5, r4
 801d718:	4625      	movge	r5, r4
 801d71a:	4252      	neglt	r2, r2
 801d71c:	4288      	cmp	r0, r1
 801d71e:	461e      	mov	r6, r3
 801d720:	bfc2      	ittt	gt
 801d722:	4603      	movgt	r3, r0
 801d724:	4608      	movgt	r0, r1
 801d726:	4619      	movgt	r1, r3
 801d728:	ab01      	add	r3, sp, #4
 801d72a:	f7ff ff9c 	bl	801d666 <_ZN8touchgfx7muldivuEmmmRm>
 801d72e:	9b01      	ldr	r3, [sp, #4]
 801d730:	4368      	muls	r0, r5
 801d732:	435c      	muls	r4, r3
 801d734:	6034      	str	r4, [r6, #0]
 801d736:	b002      	add	sp, #8
 801d738:	bd70      	pop	{r4, r5, r6, pc}

0801d73a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801d73a:	2000      	movs	r0, #0
 801d73c:	4770      	bx	lr

0801d73e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801d73e:	2001      	movs	r0, #1
 801d740:	4770      	bx	lr

0801d742 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801d742:	2002      	movs	r0, #2
 801d744:	4770      	bx	lr

0801d746 <_ZN8touchgfx12GestureEventD1Ev>:
 801d746:	4770      	bx	lr

0801d748 <_ZN8touchgfx9DragEventD1Ev>:
 801d748:	4770      	bx	lr

0801d74a <_ZN8touchgfx10ClickEventD1Ev>:
 801d74a:	4770      	bx	lr

0801d74c <_ZN8touchgfx10ClickEventD0Ev>:
 801d74c:	b510      	push	{r4, lr}
 801d74e:	210c      	movs	r1, #12
 801d750:	4604      	mov	r4, r0
 801d752:	f00f ff40 	bl	802d5d6 <_ZdlPvj>
 801d756:	4620      	mov	r0, r4
 801d758:	bd10      	pop	{r4, pc}

0801d75a <_ZN8touchgfx9DragEventD0Ev>:
 801d75a:	b510      	push	{r4, lr}
 801d75c:	2110      	movs	r1, #16
 801d75e:	4604      	mov	r4, r0
 801d760:	f00f ff39 	bl	802d5d6 <_ZdlPvj>
 801d764:	4620      	mov	r0, r4
 801d766:	bd10      	pop	{r4, pc}

0801d768 <_ZN8touchgfx12GestureEventD0Ev>:
 801d768:	b510      	push	{r4, lr}
 801d76a:	210c      	movs	r1, #12
 801d76c:	4604      	mov	r4, r0
 801d76e:	f00f ff32 	bl	802d5d6 <_ZdlPvj>
 801d772:	4620      	mov	r0, r4
 801d774:	bd10      	pop	{r4, pc}
	...

0801d778 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d778:	b530      	push	{r4, r5, lr}
 801d77a:	460d      	mov	r5, r1
 801d77c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d77e:	b087      	sub	sp, #28
 801d780:	4604      	mov	r4, r0
 801d782:	b301      	cbz	r1, 801d7c6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d784:	a801      	add	r0, sp, #4
 801d786:	f7ff fe89 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d78a:	892a      	ldrh	r2, [r5, #8]
 801d78c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d790:	7928      	ldrb	r0, [r5, #4]
 801d792:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d796:	f88d 0010 	strb.w	r0, [sp, #16]
 801d79a:	1ad2      	subs	r2, r2, r3
 801d79c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d79e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d7a0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d7a4:	441a      	add	r2, r3
 801d7a6:	896b      	ldrh	r3, [r5, #10]
 801d7a8:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d7ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d7b0:	1b5b      	subs	r3, r3, r5
 801d7b2:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801d7b4:	442b      	add	r3, r5
 801d7b6:	4d05      	ldr	r5, [pc, #20]	; (801d7cc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d7b8:	9503      	str	r5, [sp, #12]
 801d7ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d7be:	6803      	ldr	r3, [r0, #0]
 801d7c0:	a903      	add	r1, sp, #12
 801d7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d7c4:	4798      	blx	r3
 801d7c6:	b007      	add	sp, #28
 801d7c8:	bd30      	pop	{r4, r5, pc}
 801d7ca:	bf00      	nop
 801d7cc:	080325c8 	.word	0x080325c8

0801d7d0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801d7d6:	b08a      	sub	sp, #40	; 0x28
 801d7d8:	4604      	mov	r4, r0
 801d7da:	460d      	mov	r5, r1
 801d7dc:	b113      	cbz	r3, 801d7e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801d7de:	790b      	ldrb	r3, [r1, #4]
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d044      	beq.n	801d86e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d7e4:	f104 0804 	add.w	r8, r4, #4
 801d7e8:	4641      	mov	r1, r8
 801d7ea:	a803      	add	r0, sp, #12
 801d7ec:	f7ff fe56 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d7f0:	792b      	ldrb	r3, [r5, #4]
 801d7f2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d7f6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801d7fa:	b983      	cbnz	r3, 801d81e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801d7fc:	892a      	ldrh	r2, [r5, #8]
 801d7fe:	88e9      	ldrh	r1, [r5, #6]
 801d800:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801d804:	1b92      	subs	r2, r2, r6
 801d806:	1bc9      	subs	r1, r1, r7
 801d808:	9301      	str	r3, [sp, #4]
 801d80a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801d80e:	9300      	str	r3, [sp, #0]
 801d810:	b212      	sxth	r2, r2
 801d812:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d816:	b209      	sxth	r1, r1
 801d818:	4640      	mov	r0, r8
 801d81a:	f7f9 fe9d 	bl	8017558 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d81e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d820:	b329      	cbz	r1, 801d86e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d822:	a805      	add	r0, sp, #20
 801d824:	f7ff fe3a 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d828:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d82c:	792b      	ldrb	r3, [r5, #4]
 801d82e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d830:	f88d 3020 	strb.w	r3, [sp, #32]
 801d834:	1abf      	subs	r7, r7, r2
 801d836:	88ea      	ldrh	r2, [r5, #6]
 801d838:	4417      	add	r7, r2
 801d83a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801d83c:	4417      	add	r7, r2
 801d83e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d842:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801d846:	1ab6      	subs	r6, r6, r2
 801d848:	892a      	ldrh	r2, [r5, #8]
 801d84a:	4416      	add	r6, r2
 801d84c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d84e:	4416      	add	r6, r2
 801d850:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d854:	4a07      	ldr	r2, [pc, #28]	; (801d874 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d856:	9207      	str	r2, [sp, #28]
 801d858:	2600      	movs	r6, #0
 801d85a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801d85e:	6803      	ldr	r3, [r0, #0]
 801d860:	a907      	add	r1, sp, #28
 801d862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d864:	4798      	blx	r3
 801d866:	792b      	ldrb	r3, [r5, #4]
 801d868:	b10b      	cbz	r3, 801d86e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d86a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d86e:	b00a      	add	sp, #40	; 0x28
 801d870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d874:	080325a0 	.word	0x080325a0

0801d878 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d87c:	460c      	mov	r4, r1
 801d87e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d880:	b088      	sub	sp, #32
 801d882:	4605      	mov	r5, r0
 801d884:	2900      	cmp	r1, #0
 801d886:	d06d      	beq.n	801d964 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d888:	4668      	mov	r0, sp
 801d88a:	f7ff fe07 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d88e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801d890:	88e3      	ldrh	r3, [r4, #6]
 801d892:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d896:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d89a:	440b      	add	r3, r1
 801d89c:	b21b      	sxth	r3, r3
 801d89e:	4543      	cmp	r3, r8
 801d8a0:	db31      	blt.n	801d906 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d8a2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d8a6:	44c4      	add	ip, r8
 801d8a8:	fa0f fc8c 	sxth.w	ip, ip
 801d8ac:	4563      	cmp	r3, ip
 801d8ae:	da2a      	bge.n	801d906 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d8b0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801d8b2:	8926      	ldrh	r6, [r4, #8]
 801d8b4:	4416      	add	r6, r2
 801d8b6:	b236      	sxth	r6, r6
 801d8b8:	42be      	cmp	r6, r7
 801d8ba:	db24      	blt.n	801d906 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d8bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d8c0:	4438      	add	r0, r7
 801d8c2:	b200      	sxth	r0, r0
 801d8c4:	4286      	cmp	r6, r0
 801d8c6:	da1e      	bge.n	801d906 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d8c8:	8963      	ldrh	r3, [r4, #10]
 801d8ca:	4419      	add	r1, r3
 801d8cc:	b209      	sxth	r1, r1
 801d8ce:	4541      	cmp	r1, r8
 801d8d0:	db08      	blt.n	801d8e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d8d2:	4561      	cmp	r1, ip
 801d8d4:	da06      	bge.n	801d8e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d8d6:	89a3      	ldrh	r3, [r4, #12]
 801d8d8:	441a      	add	r2, r3
 801d8da:	b212      	sxth	r2, r2
 801d8dc:	42ba      	cmp	r2, r7
 801d8de:	db01      	blt.n	801d8e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d8e0:	4282      	cmp	r2, r0
 801d8e2:	db10      	blt.n	801d906 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d8e4:	4b21      	ldr	r3, [pc, #132]	; (801d96c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d8e6:	9304      	str	r3, [sp, #16]
 801d8e8:	2302      	movs	r3, #2
 801d8ea:	f88d 3014 	strb.w	r3, [sp, #20]
 801d8ee:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d8f0:	2300      	movs	r3, #0
 801d8f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d8f6:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d8fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d8fe:	6803      	ldr	r3, [r0, #0]
 801d900:	a904      	add	r1, sp, #16
 801d902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d904:	4798      	blx	r3
 801d906:	1d29      	adds	r1, r5, #4
 801d908:	a802      	add	r0, sp, #8
 801d90a:	f7ff fdc7 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d90e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d912:	88e0      	ldrh	r0, [r4, #6]
 801d914:	7921      	ldrb	r1, [r4, #4]
 801d916:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d91a:	8922      	ldrh	r2, [r4, #8]
 801d91c:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d91e:	f88d 1014 	strb.w	r1, [sp, #20]
 801d922:	eba3 0808 	sub.w	r8, r3, r8
 801d926:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d92a:	1bdf      	subs	r7, r3, r7
 801d92c:	b2bb      	uxth	r3, r7
 801d92e:	fa1f f888 	uxth.w	r8, r8
 801d932:	8967      	ldrh	r7, [r4, #10]
 801d934:	89a4      	ldrh	r4, [r4, #12]
 801d936:	4440      	add	r0, r8
 801d938:	4460      	add	r0, ip
 801d93a:	441a      	add	r2, r3
 801d93c:	44b8      	add	r8, r7
 801d93e:	4423      	add	r3, r4
 801d940:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d944:	4433      	add	r3, r6
 801d946:	4432      	add	r2, r6
 801d948:	44e0      	add	r8, ip
 801d94a:	4c09      	ldr	r4, [pc, #36]	; (801d970 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d94c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d94e:	9404      	str	r4, [sp, #16]
 801d950:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d954:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d958:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d95c:	6803      	ldr	r3, [r0, #0]
 801d95e:	a904      	add	r1, sp, #16
 801d960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d962:	4798      	blx	r3
 801d964:	b008      	add	sp, #32
 801d966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d96a:	bf00      	nop
 801d96c:	080325a0 	.word	0x080325a0
 801d970:	080325b4 	.word	0x080325b4

0801d974 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d976:	4604      	mov	r4, r0
 801d978:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d97c:	3201      	adds	r2, #1
 801d97e:	d112      	bne.n	801d9a6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d980:	6803      	ldr	r3, [r0, #0]
 801d982:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d986:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d98a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d98e:	2500      	movs	r5, #0
 801d990:	9500      	str	r5, [sp, #0]
 801d992:	466d      	mov	r5, sp
 801d994:	4629      	mov	r1, r5
 801d996:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d99c:	4798      	blx	r3
 801d99e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d9a2:	e884 0003 	stmia.w	r4, {r0, r1}
 801d9a6:	4620      	mov	r0, r4
 801d9a8:	b003      	add	sp, #12
 801d9aa:	bd30      	pop	{r4, r5, pc}

0801d9ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d9ac:	b513      	push	{r0, r1, r4, lr}
 801d9ae:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d9b2:	3301      	adds	r3, #1
 801d9b4:	4604      	mov	r4, r0
 801d9b6:	d109      	bne.n	801d9cc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d9b8:	4601      	mov	r1, r0
 801d9ba:	4668      	mov	r0, sp
 801d9bc:	f7ff fd6e 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d9c0:	f8bd 3000 	ldrh.w	r3, [sp]
 801d9c4:	8423      	strh	r3, [r4, #32]
 801d9c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d9ca:	8463      	strh	r3, [r4, #34]	; 0x22
 801d9cc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d9d0:	b002      	add	sp, #8
 801d9d2:	bd10      	pop	{r4, pc}

0801d9d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d9d4:	b513      	push	{r0, r1, r4, lr}
 801d9d6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d9da:	3301      	adds	r3, #1
 801d9dc:	4604      	mov	r4, r0
 801d9de:	d109      	bne.n	801d9f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d9e0:	4601      	mov	r1, r0
 801d9e2:	4668      	mov	r0, sp
 801d9e4:	f7ff fd5a 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d9e8:	f8bd 3000 	ldrh.w	r3, [sp]
 801d9ec:	8423      	strh	r3, [r4, #32]
 801d9ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d9f2:	8463      	strh	r3, [r4, #34]	; 0x22
 801d9f4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d9f8:	b002      	add	sp, #8
 801d9fa:	bd10      	pop	{r4, pc}

0801d9fc <_ZN8touchgfx6ScreenC1Ev>:
 801d9fc:	b570      	push	{r4, r5, r6, lr}
 801d9fe:	4605      	mov	r5, r0
 801da00:	4b16      	ldr	r3, [pc, #88]	; (801da5c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801da02:	f845 3b04 	str.w	r3, [r5], #4
 801da06:	2300      	movs	r3, #0
 801da08:	8103      	strh	r3, [r0, #8]
 801da0a:	8143      	strh	r3, [r0, #10]
 801da0c:	8183      	strh	r3, [r0, #12]
 801da0e:	81c3      	strh	r3, [r0, #14]
 801da10:	8203      	strh	r3, [r0, #16]
 801da12:	8243      	strh	r3, [r0, #18]
 801da14:	8283      	strh	r3, [r0, #20]
 801da16:	82c3      	strh	r3, [r0, #22]
 801da18:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801da1c:	6203      	str	r3, [r0, #32]
 801da1e:	8483      	strh	r3, [r0, #36]	; 0x24
 801da20:	84c3      	strh	r3, [r0, #38]	; 0x26
 801da22:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801da26:	4a0e      	ldr	r2, [pc, #56]	; (801da60 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801da28:	6343      	str	r3, [r0, #52]	; 0x34
 801da2a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801da2e:	4b0d      	ldr	r3, [pc, #52]	; (801da64 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801da30:	6042      	str	r2, [r0, #4]
 801da32:	f9b3 6000 	ldrsh.w	r6, [r3]
 801da36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801da38:	4a0b      	ldr	r2, [pc, #44]	; (801da68 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801da3a:	4604      	mov	r4, r0
 801da3c:	2101      	movs	r1, #1
 801da3e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801da42:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801da46:	f9b2 1000 	ldrsh.w	r1, [r2]
 801da4a:	4628      	mov	r0, r5
 801da4c:	4798      	blx	r3
 801da4e:	6863      	ldr	r3, [r4, #4]
 801da50:	4628      	mov	r0, r5
 801da52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da54:	4631      	mov	r1, r6
 801da56:	4798      	blx	r3
 801da58:	4620      	mov	r0, r4
 801da5a:	bd70      	pop	{r4, r5, r6, pc}
 801da5c:	080325dc 	.word	0x080325dc
 801da60:	08030fb8 	.word	0x08030fb8
 801da64:	20009816 	.word	0x20009816
 801da68:	20009814 	.word	0x20009814

0801da6c <_ZN8touchgfx6Screen4drawEv>:
 801da6c:	b507      	push	{r0, r1, r2, lr}
 801da6e:	4b09      	ldr	r3, [pc, #36]	; (801da94 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801da70:	f9b3 2000 	ldrsh.w	r2, [r3]
 801da74:	4b08      	ldr	r3, [pc, #32]	; (801da98 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801da76:	f8ad 2004 	strh.w	r2, [sp, #4]
 801da7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801da7e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801da82:	6803      	ldr	r3, [r0, #0]
 801da84:	2100      	movs	r1, #0
 801da86:	9100      	str	r1, [sp, #0]
 801da88:	689b      	ldr	r3, [r3, #8]
 801da8a:	4669      	mov	r1, sp
 801da8c:	4798      	blx	r3
 801da8e:	b003      	add	sp, #12
 801da90:	f85d fb04 	ldr.w	pc, [sp], #4
 801da94:	20009814 	.word	0x20009814
 801da98:	20009816 	.word	0x20009816

0801da9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daa0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801daa4:	2b00      	cmp	r3, #0
 801daa6:	b089      	sub	sp, #36	; 0x24
 801daa8:	4680      	mov	r8, r0
 801daaa:	460c      	mov	r4, r1
 801daac:	4615      	mov	r5, r2
 801daae:	dd0e      	ble.n	801dace <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801dab0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	dd0a      	ble.n	801dace <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801dab8:	4628      	mov	r0, r5
 801daba:	f7ff ff5b 	bl	801d974 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801dabe:	4621      	mov	r1, r4
 801dac0:	f7fb fb42 	bl	8019148 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801dac4:	69eb      	ldr	r3, [r5, #28]
 801dac6:	b928      	cbnz	r0, 801dad4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801dac8:	461d      	mov	r5, r3
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d1f4      	bne.n	801dab8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801dace:	b009      	add	sp, #36	; 0x24
 801dad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dad4:	ae04      	add	r6, sp, #16
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	f000 80b5 	beq.w	801dc46 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801dadc:	682b      	ldr	r3, [r5, #0]
 801dade:	4629      	mov	r1, r5
 801dae0:	68db      	ldr	r3, [r3, #12]
 801dae2:	a802      	add	r0, sp, #8
 801dae4:	4798      	blx	r3
 801dae6:	4628      	mov	r0, r5
 801dae8:	f7ff ff60 	bl	801d9ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801daec:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801daf0:	4407      	add	r7, r0
 801daf2:	4628      	mov	r0, r5
 801daf4:	f7ff ff6e 	bl	801d9d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801daf8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801dafc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801db00:	f8ad 2014 	strh.w	r2, [sp, #20]
 801db04:	4418      	add	r0, r3
 801db06:	4621      	mov	r1, r4
 801db08:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801db0c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801db10:	b23f      	sxth	r7, r7
 801db12:	4630      	mov	r0, r6
 801db14:	f8ad 3016 	strh.w	r3, [sp, #22]
 801db18:	f8ad 7010 	strh.w	r7, [sp, #16]
 801db1c:	f7f9 fe00 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801db20:	4628      	mov	r0, r5
 801db22:	f7ff ff27 	bl	801d974 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801db26:	4602      	mov	r2, r0
 801db28:	e896 0003 	ldmia.w	r6, {r0, r1}
 801db2c:	ab06      	add	r3, sp, #24
 801db2e:	e883 0003 	stmia.w	r3, {r0, r1}
 801db32:	4611      	mov	r1, r2
 801db34:	4618      	mov	r0, r3
 801db36:	f7f9 fdf3 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801db3a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801db3e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801db42:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801db46:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801db4a:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801db4e:	4299      	cmp	r1, r3
 801db50:	d10b      	bne.n	801db6a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801db52:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801db56:	4552      	cmp	r2, sl
 801db58:	d107      	bne.n	801db6a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801db5a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801db5e:	455a      	cmp	r2, fp
 801db60:	d103      	bne.n	801db6a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801db62:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801db66:	454a      	cmp	r2, r9
 801db68:	d06d      	beq.n	801dc46 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801db6a:	f1bb 0f00 	cmp.w	fp, #0
 801db6e:	dd65      	ble.n	801dc3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801db70:	f1b9 0f00 	cmp.w	r9, #0
 801db74:	dd62      	ble.n	801dc3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801db76:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801db7a:	fa1f f08a 	uxth.w	r0, sl
 801db7e:	4552      	cmp	r2, sl
 801db80:	9000      	str	r0, [sp, #0]
 801db82:	da12      	bge.n	801dbaa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801db84:	9301      	str	r3, [sp, #4]
 801db86:	9b00      	ldr	r3, [sp, #0]
 801db88:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801db8c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801db90:	1a9a      	subs	r2, r3, r2
 801db92:	f8ad 1010 	strh.w	r1, [sp, #16]
 801db96:	f8ad 0014 	strh.w	r0, [sp, #20]
 801db9a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801db9e:	69ea      	ldr	r2, [r5, #28]
 801dba0:	4631      	mov	r1, r6
 801dba2:	4640      	mov	r0, r8
 801dba4:	f7ff ff7a 	bl	801da9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dba8:	9b01      	ldr	r3, [sp, #4]
 801dbaa:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dbae:	429a      	cmp	r2, r3
 801dbb0:	b29f      	uxth	r7, r3
 801dbb2:	da0d      	bge.n	801dbd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801dbb4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dbb8:	1aba      	subs	r2, r7, r2
 801dbba:	f8ad a012 	strh.w	sl, [sp, #18]
 801dbbe:	f8ad 2014 	strh.w	r2, [sp, #20]
 801dbc2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801dbc6:	69ea      	ldr	r2, [r5, #28]
 801dbc8:	4631      	mov	r1, r6
 801dbca:	4640      	mov	r0, r8
 801dbcc:	f7ff ff66 	bl	801da9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dbd0:	8822      	ldrh	r2, [r4, #0]
 801dbd2:	88a3      	ldrh	r3, [r4, #4]
 801dbd4:	445f      	add	r7, fp
 801dbd6:	4413      	add	r3, r2
 801dbd8:	b29b      	uxth	r3, r3
 801dbda:	b2bf      	uxth	r7, r7
 801dbdc:	b23a      	sxth	r2, r7
 801dbde:	b219      	sxth	r1, r3
 801dbe0:	4291      	cmp	r1, r2
 801dbe2:	dd0d      	ble.n	801dc00 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801dbe4:	1bdb      	subs	r3, r3, r7
 801dbe6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dbea:	f8ad a012 	strh.w	sl, [sp, #18]
 801dbee:	f8ad 3014 	strh.w	r3, [sp, #20]
 801dbf2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801dbf6:	69ea      	ldr	r2, [r5, #28]
 801dbf8:	4631      	mov	r1, r6
 801dbfa:	4640      	mov	r0, r8
 801dbfc:	f7ff ff4e 	bl	801da9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dc00:	88e2      	ldrh	r2, [r4, #6]
 801dc02:	8863      	ldrh	r3, [r4, #2]
 801dc04:	4413      	add	r3, r2
 801dc06:	9a00      	ldr	r2, [sp, #0]
 801dc08:	444a      	add	r2, r9
 801dc0a:	b29b      	uxth	r3, r3
 801dc0c:	fa1f f982 	uxth.w	r9, r2
 801dc10:	fa0f f289 	sxth.w	r2, r9
 801dc14:	b219      	sxth	r1, r3
 801dc16:	428a      	cmp	r2, r1
 801dc18:	da15      	bge.n	801dc46 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801dc1a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dc1e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801dc22:	f8ad 1014 	strh.w	r1, [sp, #20]
 801dc26:	eba3 0309 	sub.w	r3, r3, r9
 801dc2a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801dc2e:	f8ad 2012 	strh.w	r2, [sp, #18]
 801dc32:	f8ad 3016 	strh.w	r3, [sp, #22]
 801dc36:	69ea      	ldr	r2, [r5, #28]
 801dc38:	4631      	mov	r1, r6
 801dc3a:	e001      	b.n	801dc40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801dc3c:	69ea      	ldr	r2, [r5, #28]
 801dc3e:	4621      	mov	r1, r4
 801dc40:	4640      	mov	r0, r8
 801dc42:	f7ff ff2b 	bl	801da9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dc46:	4628      	mov	r0, r5
 801dc48:	f7ff fe94 	bl	801d974 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801dc4c:	6861      	ldr	r1, [r4, #4]
 801dc4e:	4602      	mov	r2, r0
 801dc50:	6820      	ldr	r0, [r4, #0]
 801dc52:	4633      	mov	r3, r6
 801dc54:	c303      	stmia	r3!, {r0, r1}
 801dc56:	4611      	mov	r1, r2
 801dc58:	4630      	mov	r0, r6
 801dc5a:	f7f9 fd61 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801dc5e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	f77f af33 	ble.w	801dace <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801dc68:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	f77f af2e 	ble.w	801dace <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801dc72:	4628      	mov	r0, r5
 801dc74:	f7ff fe9a 	bl	801d9ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801dc78:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801dc7c:	1a18      	subs	r0, r3, r0
 801dc7e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801dc82:	4628      	mov	r0, r5
 801dc84:	f7ff fea6 	bl	801d9d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801dc88:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801dc8c:	1a18      	subs	r0, r3, r0
 801dc8e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801dc92:	682b      	ldr	r3, [r5, #0]
 801dc94:	4631      	mov	r1, r6
 801dc96:	689b      	ldr	r3, [r3, #8]
 801dc98:	4628      	mov	r0, r5
 801dc9a:	4798      	blx	r3
 801dc9c:	e717      	b.n	801dace <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801dc9e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801dc9e:	b570      	push	{r4, r5, r6, lr}
 801dca0:	460c      	mov	r4, r1
 801dca2:	b086      	sub	sp, #24
 801dca4:	1d06      	adds	r6, r0, #4
 801dca6:	2300      	movs	r3, #0
 801dca8:	4631      	mov	r1, r6
 801dcaa:	4605      	mov	r5, r0
 801dcac:	a802      	add	r0, sp, #8
 801dcae:	9301      	str	r3, [sp, #4]
 801dcb0:	f7ff fbf4 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dcb4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801dcb8:	8822      	ldrh	r2, [r4, #0]
 801dcba:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801dcbe:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801dcc2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801dcc6:	1ad2      	subs	r2, r2, r3
 801dcc8:	8863      	ldrh	r3, [r4, #2]
 801dcca:	f8ad 2010 	strh.w	r2, [sp, #16]
 801dcce:	1a5b      	subs	r3, r3, r1
 801dcd0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801dcd4:	f8ad 1016 	strh.w	r1, [sp, #22]
 801dcd8:	aa01      	add	r2, sp, #4
 801dcda:	a904      	add	r1, sp, #16
 801dcdc:	4630      	mov	r0, r6
 801dcde:	f8ad 3012 	strh.w	r3, [sp, #18]
 801dce2:	f7f9 fdf5 	bl	80178d0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801dce6:	9a01      	ldr	r2, [sp, #4]
 801dce8:	b11a      	cbz	r2, 801dcf2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801dcea:	4621      	mov	r1, r4
 801dcec:	4628      	mov	r0, r5
 801dcee:	f7ff fed5 	bl	801da9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801dcf2:	b006      	add	sp, #24
 801dcf4:	bd70      	pop	{r4, r5, r6, pc}

0801dcf6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801dcf6:	b530      	push	{r4, r5, lr}
 801dcf8:	4602      	mov	r2, r0
 801dcfa:	4604      	mov	r4, r0
 801dcfc:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801dd00:	b085      	sub	sp, #20
 801dd02:	460d      	mov	r5, r1
 801dd04:	6851      	ldr	r1, [r2, #4]
 801dd06:	466b      	mov	r3, sp
 801dd08:	c303      	stmia	r3!, {r0, r1}
 801dd0a:	4629      	mov	r1, r5
 801dd0c:	4668      	mov	r0, sp
 801dd0e:	f7f9 fd07 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 801dd12:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801dd16:	b12b      	cbz	r3, 801dd24 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801dd18:	4669      	mov	r1, sp
 801dd1a:	4620      	mov	r0, r4
 801dd1c:	f7ff ffbf 	bl	801dc9e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801dd20:	b005      	add	sp, #20
 801dd22:	bd30      	pop	{r4, r5, pc}
 801dd24:	3404      	adds	r4, #4
 801dd26:	4621      	mov	r1, r4
 801dd28:	a802      	add	r0, sp, #8
 801dd2a:	f7ff fbb7 	bl	801d49c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801dd2e:	f8bd 3000 	ldrh.w	r3, [sp]
 801dd32:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801dd36:	1a9b      	subs	r3, r3, r2
 801dd38:	f8ad 3000 	strh.w	r3, [sp]
 801dd3c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801dd40:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801dd44:	4669      	mov	r1, sp
 801dd46:	1a9b      	subs	r3, r3, r2
 801dd48:	4620      	mov	r0, r4
 801dd4a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801dd4e:	f7f9 fd86 	bl	801785e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801dd52:	e7e5      	b.n	801dd20 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801dd54 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801dd54:	680a      	ldr	r2, [r1, #0]
 801dd56:	460b      	mov	r3, r1
 801dd58:	6992      	ldr	r2, [r2, #24]
 801dd5a:	1d01      	adds	r1, r0, #4
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	4710      	bx	r2

0801dd60 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801dd60:	4298      	cmp	r0, r3
 801dd62:	d200      	bcs.n	801dd66 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801dd64:	b913      	cbnz	r3, 801dd6c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801dd66:	440a      	add	r2, r1
 801dd68:	b210      	sxth	r0, r2
 801dd6a:	4770      	bx	lr
 801dd6c:	ee07 2a90 	vmov	s15, r2
 801dd70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801dd74:	ee07 0a90 	vmov	s15, r0
 801dd78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd80:	ee07 3a10 	vmov	s14, r3
 801dd84:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801dd88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801dd8c:	ee07 1a90 	vmov	s15, r1
 801dd90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dd94:	ee77 7a27 	vadd.f32	s15, s14, s15
 801dd98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801dd9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dda4:	bfcc      	ite	gt
 801dda6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801ddaa:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801ddae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ddb2:	ee17 3a90 	vmov	r3, s15
 801ddb6:	b218      	sxth	r0, r3
 801ddb8:	4770      	bx	lr

0801ddba <_ZN8touchgfx12TextProviderC1Ev>:
 801ddba:	b538      	push	{r3, r4, r5, lr}
 801ddbc:	2500      	movs	r5, #0
 801ddbe:	2302      	movs	r3, #2
 801ddc0:	4604      	mov	r4, r0
 801ddc2:	e9c0 5500 	strd	r5, r5, [r0]
 801ddc6:	7403      	strb	r3, [r0, #16]
 801ddc8:	6145      	str	r5, [r0, #20]
 801ddca:	7605      	strb	r5, [r0, #24]
 801ddcc:	83c5      	strh	r5, [r0, #30]
 801ddce:	8405      	strh	r5, [r0, #32]
 801ddd0:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ddd2:	8705      	strh	r5, [r0, #56]	; 0x38
 801ddd4:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801ddd6:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801ddda:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801ddde:	220e      	movs	r2, #14
 801dde0:	4629      	mov	r1, r5
 801dde2:	304c      	adds	r0, #76	; 0x4c
 801dde4:	f010 fba4 	bl	802e530 <memset>
 801dde8:	2301      	movs	r3, #1
 801ddea:	4620      	mov	r0, r4
 801ddec:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801ddf0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ddf4:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801ddf8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801ddfc:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801de00:	f7f6 fc40 	bl	8014684 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801de04:	4620      	mov	r0, r4
 801de06:	bd38      	pop	{r3, r4, r5, pc}

0801de08 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801de08:	b530      	push	{r4, r5, lr}
 801de0a:	2500      	movs	r5, #0
 801de0c:	2401      	movs	r4, #1
 801de0e:	6843      	ldr	r3, [r0, #4]
 801de10:	b913      	cbnz	r3, 801de18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801de12:	6803      	ldr	r3, [r0, #0]
 801de14:	b313      	cbz	r3, 801de5c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801de16:	6043      	str	r3, [r0, #4]
 801de18:	7e03      	ldrb	r3, [r0, #24]
 801de1a:	b143      	cbz	r3, 801de2e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801de1c:	6943      	ldr	r3, [r0, #20]
 801de1e:	b12b      	cbz	r3, 801de2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801de20:	881a      	ldrh	r2, [r3, #0]
 801de22:	b11a      	cbz	r2, 801de2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801de24:	1c9a      	adds	r2, r3, #2
 801de26:	6142      	str	r2, [r0, #20]
 801de28:	8818      	ldrh	r0, [r3, #0]
 801de2a:	bd30      	pop	{r4, r5, pc}
 801de2c:	7605      	strb	r5, [r0, #24]
 801de2e:	6843      	ldr	r3, [r0, #4]
 801de30:	8819      	ldrh	r1, [r3, #0]
 801de32:	b199      	cbz	r1, 801de5c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801de34:	1c9a      	adds	r2, r3, #2
 801de36:	2902      	cmp	r1, #2
 801de38:	6042      	str	r2, [r0, #4]
 801de3a:	d1f5      	bne.n	801de28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801de3c:	7c03      	ldrb	r3, [r0, #16]
 801de3e:	2b01      	cmp	r3, #1
 801de40:	d8e5      	bhi.n	801de0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801de42:	1c5a      	adds	r2, r3, #1
 801de44:	3302      	adds	r3, #2
 801de46:	7402      	strb	r2, [r0, #16]
 801de48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801de4c:	6143      	str	r3, [r0, #20]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d0dd      	beq.n	801de0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801de52:	881b      	ldrh	r3, [r3, #0]
 801de54:	2b00      	cmp	r3, #0
 801de56:	d0da      	beq.n	801de0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801de58:	7604      	strb	r4, [r0, #24]
 801de5a:	e7d8      	b.n	801de0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801de5c:	2000      	movs	r0, #0
 801de5e:	e7e4      	b.n	801de2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801de60 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801de60:	b430      	push	{r4, r5}
 801de62:	6815      	ldr	r5, [r2, #0]
 801de64:	6085      	str	r5, [r0, #8]
 801de66:	6852      	ldr	r2, [r2, #4]
 801de68:	60c2      	str	r2, [r0, #12]
 801de6a:	6443      	str	r3, [r0, #68]	; 0x44
 801de6c:	2200      	movs	r2, #0
 801de6e:	9b02      	ldr	r3, [sp, #8]
 801de70:	7402      	strb	r2, [r0, #16]
 801de72:	6001      	str	r1, [r0, #0]
 801de74:	6483      	str	r3, [r0, #72]	; 0x48
 801de76:	6042      	str	r2, [r0, #4]
 801de78:	6142      	str	r2, [r0, #20]
 801de7a:	7602      	strb	r2, [r0, #24]
 801de7c:	8702      	strh	r2, [r0, #56]	; 0x38
 801de7e:	8402      	strh	r2, [r0, #32]
 801de80:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801de84:	bc30      	pop	{r4, r5}
 801de86:	f7f6 bbfd 	b.w	8014684 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801de8a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801de8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de8c:	4605      	mov	r5, r0
 801de8e:	4608      	mov	r0, r1
 801de90:	b1e9      	cbz	r1, 801dece <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801de92:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801de96:	460b      	mov	r3, r1
 801de98:	f101 0708 	add.w	r7, r1, #8
 801de9c:	4622      	mov	r2, r4
 801de9e:	6818      	ldr	r0, [r3, #0]
 801dea0:	6859      	ldr	r1, [r3, #4]
 801dea2:	4626      	mov	r6, r4
 801dea4:	c603      	stmia	r6!, {r0, r1}
 801dea6:	3308      	adds	r3, #8
 801dea8:	42bb      	cmp	r3, r7
 801deaa:	4634      	mov	r4, r6
 801deac:	d1f7      	bne.n	801de9e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801deae:	6818      	ldr	r0, [r3, #0]
 801deb0:	6030      	str	r0, [r6, #0]
 801deb2:	889b      	ldrh	r3, [r3, #4]
 801deb4:	80b3      	strh	r3, [r6, #4]
 801deb6:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801deba:	015b      	lsls	r3, r3, #5
 801debc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801dec0:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801dec4:	430b      	orrs	r3, r1
 801dec6:	425b      	negs	r3, r3
 801dec8:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801decc:	4610      	mov	r0, r2
 801dece:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ded0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ded0:	b538      	push	{r3, r4, r5, lr}
 801ded2:	460c      	mov	r4, r1
 801ded4:	6811      	ldr	r1, [r2, #0]
 801ded6:	4610      	mov	r0, r2
 801ded8:	68cd      	ldr	r5, [r1, #12]
 801deda:	4619      	mov	r1, r3
 801dedc:	47a8      	blx	r5
 801dede:	2800      	cmp	r0, #0
 801dee0:	bf08      	it	eq
 801dee2:	4620      	moveq	r0, r4
 801dee4:	bd38      	pop	{r3, r4, r5, pc}
	...

0801dee8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deea:	4604      	mov	r4, r0
 801deec:	4615      	mov	r5, r2
 801deee:	4608      	mov	r0, r1
 801def0:	b93a      	cbnz	r2, 801df02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801def2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801def6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801defa:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801defe:	4628      	mov	r0, r5
 801df00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df02:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801df06:	8893      	ldrh	r3, [r2, #4]
 801df08:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801df0c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801df10:	79ee      	ldrb	r6, [r5, #7]
 801df12:	4316      	orrs	r6, r2
 801df14:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801df18:	189a      	adds	r2, r3, r2
 801df1a:	b291      	uxth	r1, r2
 801df1c:	291d      	cmp	r1, #29
 801df1e:	b2b7      	uxth	r7, r6
 801df20:	f200 8083 	bhi.w	801e02a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801df24:	2201      	movs	r2, #1
 801df26:	408a      	lsls	r2, r1
 801df28:	4978      	ldr	r1, [pc, #480]	; (801e10c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801df2a:	420a      	tst	r2, r1
 801df2c:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801df30:	d12d      	bne.n	801df8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801df32:	f412 7f60 	tst.w	r2, #896	; 0x380
 801df36:	d078      	beq.n	801e02a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801df38:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801df3c:	462b      	mov	r3, r5
 801df3e:	f105 0e08 	add.w	lr, r5, #8
 801df42:	4615      	mov	r5, r2
 801df44:	6818      	ldr	r0, [r3, #0]
 801df46:	6859      	ldr	r1, [r3, #4]
 801df48:	4694      	mov	ip, r2
 801df4a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801df4e:	3308      	adds	r3, #8
 801df50:	4573      	cmp	r3, lr
 801df52:	4662      	mov	r2, ip
 801df54:	d1f6      	bne.n	801df44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 801df56:	6818      	ldr	r0, [r3, #0]
 801df58:	f8cc 0000 	str.w	r0, [ip]
 801df5c:	889b      	ldrh	r3, [r3, #4]
 801df5e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801df62:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801df66:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801df6a:	b2b3      	uxth	r3, r6
 801df6c:	1aca      	subs	r2, r1, r3
 801df6e:	b292      	uxth	r2, r2
 801df70:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801df74:	10d2      	asrs	r2, r2, #3
 801df76:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801df7a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801df7e:	4302      	orrs	r2, r0
 801df80:	1bcf      	subs	r7, r1, r7
 801df82:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801df86:	1afb      	subs	r3, r7, r3
 801df88:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801df8c:	e7b7      	b.n	801defe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801df8e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801df90:	b92b      	cbnz	r3, 801df9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801df92:	4b5f      	ldr	r3, [pc, #380]	; (801e110 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801df94:	4a5f      	ldr	r2, [pc, #380]	; (801e114 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801df96:	4860      	ldr	r0, [pc, #384]	; (801e118 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801df98:	21c0      	movs	r1, #192	; 0xc0
 801df9a:	f010 f93b 	bl	802e214 <__assert_func>
 801df9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801dfa0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dfa4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801dfa6:	f640 6333 	movw	r3, #3635	; 0xe33
 801dfaa:	4299      	cmp	r1, r3
 801dfac:	d110      	bne.n	801dfd0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801dfae:	6803      	ldr	r3, [r0, #0]
 801dfb0:	68db      	ldr	r3, [r3, #12]
 801dfb2:	4798      	blx	r3
 801dfb4:	7b41      	ldrb	r1, [r0, #13]
 801dfb6:	00cb      	lsls	r3, r1, #3
 801dfb8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dfbc:	7a03      	ldrb	r3, [r0, #8]
 801dfbe:	0648      	lsls	r0, r1, #25
 801dfc0:	ea43 0302 	orr.w	r3, r3, r2
 801dfc4:	bf44      	itt	mi
 801dfc6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dfca:	b21b      	sxthmi	r3, r3
 801dfcc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dfd0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801dfd4:	443b      	add	r3, r7
 801dfd6:	4433      	add	r3, r6
 801dfd8:	b29b      	uxth	r3, r3
 801dfda:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801dfde:	462a      	mov	r2, r5
 801dfe0:	f105 0c08 	add.w	ip, r5, #8
 801dfe4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dfe8:	4635      	mov	r5, r6
 801dfea:	6810      	ldr	r0, [r2, #0]
 801dfec:	6851      	ldr	r1, [r2, #4]
 801dfee:	4637      	mov	r7, r6
 801dff0:	c703      	stmia	r7!, {r0, r1}
 801dff2:	3208      	adds	r2, #8
 801dff4:	4562      	cmp	r2, ip
 801dff6:	463e      	mov	r6, r7
 801dff8:	d1f7      	bne.n	801dfea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801dffa:	6810      	ldr	r0, [r2, #0]
 801dffc:	6038      	str	r0, [r7, #0]
 801dffe:	8892      	ldrh	r2, [r2, #4]
 801e000:	80ba      	strh	r2, [r7, #4]
 801e002:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e006:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e00a:	10db      	asrs	r3, r3, #3
 801e00c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e010:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e014:	4313      	orrs	r3, r2
 801e016:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e01a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801e01e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801e022:	1a9b      	subs	r3, r3, r2
 801e024:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801e028:	e769      	b.n	801defe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801e02a:	f023 0204 	bic.w	r2, r3, #4
 801e02e:	f640 611b 	movw	r1, #3611	; 0xe1b
 801e032:	428a      	cmp	r2, r1
 801e034:	d003      	beq.n	801e03e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801e036:	f640 621d 	movw	r2, #3613	; 0xe1d
 801e03a:	4293      	cmp	r3, r2
 801e03c:	d120      	bne.n	801e080 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 801e03e:	3b01      	subs	r3, #1
 801e040:	4602      	mov	r2, r0
 801e042:	b29b      	uxth	r3, r3
 801e044:	4629      	mov	r1, r5
 801e046:	4620      	mov	r0, r4
 801e048:	f7ff ff42 	bl	801ded0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e04c:	7b41      	ldrb	r1, [r0, #13]
 801e04e:	00cb      	lsls	r3, r1, #3
 801e050:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e054:	7a03      	ldrb	r3, [r0, #8]
 801e056:	0649      	lsls	r1, r1, #25
 801e058:	ea43 0302 	orr.w	r3, r3, r2
 801e05c:	bf44      	itt	mi
 801e05e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e062:	b21b      	sxthmi	r3, r3
 801e064:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e068:	7b6b      	ldrb	r3, [r5, #13]
 801e06a:	7aaa      	ldrb	r2, [r5, #10]
 801e06c:	005b      	lsls	r3, r3, #1
 801e06e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e072:	4313      	orrs	r3, r2
 801e074:	115a      	asrs	r2, r3, #5
 801e076:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801e07a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e07e:	e036      	b.n	801e0ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801e080:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801e084:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801e088:	7a2a      	ldrb	r2, [r5, #8]
 801e08a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801e08e:	ea42 0201 	orr.w	r2, r2, r1
 801e092:	bf1c      	itt	ne
 801e094:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801e098:	b212      	sxthne	r2, r2
 801e09a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801e09e:	f640 6109 	movw	r1, #3593	; 0xe09
 801e0a2:	f023 0210 	bic.w	r2, r3, #16
 801e0a6:	428a      	cmp	r2, r1
 801e0a8:	d003      	beq.n	801e0b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 801e0aa:	f640 6213 	movw	r2, #3603	; 0xe13
 801e0ae:	4293      	cmp	r3, r2
 801e0b0:	d12a      	bne.n	801e108 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801e0b2:	7b6e      	ldrb	r6, [r5, #13]
 801e0b4:	0076      	lsls	r6, r6, #1
 801e0b6:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801e0ba:	7aae      	ldrb	r6, [r5, #10]
 801e0bc:	4316      	orrs	r6, r2
 801e0be:	f640 6213 	movw	r2, #3603	; 0xe13
 801e0c2:	4293      	cmp	r3, r2
 801e0c4:	bf18      	it	ne
 801e0c6:	f103 33ff 	addne.w	r3, r3, #4294967295
 801e0ca:	4602      	mov	r2, r0
 801e0cc:	bf14      	ite	ne
 801e0ce:	b29b      	uxthne	r3, r3
 801e0d0:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801e0d4:	4629      	mov	r1, r5
 801e0d6:	4620      	mov	r0, r4
 801e0d8:	f7ff fefa 	bl	801ded0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801e0dc:	7b43      	ldrb	r3, [r0, #13]
 801e0de:	7a82      	ldrb	r2, [r0, #10]
 801e0e0:	005b      	lsls	r3, r3, #1
 801e0e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e0e6:	4313      	orrs	r3, r2
 801e0e8:	1af6      	subs	r6, r6, r3
 801e0ea:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801e0ee:	7b69      	ldrb	r1, [r5, #13]
 801e0f0:	00cb      	lsls	r3, r1, #3
 801e0f2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e0f6:	7a2b      	ldrb	r3, [r5, #8]
 801e0f8:	4313      	orrs	r3, r2
 801e0fa:	064a      	lsls	r2, r1, #25
 801e0fc:	bf44      	itt	mi
 801e0fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e102:	b21b      	sxthmi	r3, r3
 801e104:	1bdb      	subs	r3, r3, r7
 801e106:	e73f      	b.n	801df88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801e108:	2300      	movs	r3, #0
 801e10a:	e7b6      	b.n	801e07a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 801e10c:	3fc00079 	.word	0x3fc00079
 801e110:	08032608 	.word	0x08032608
 801e114:	0803287a 	.word	0x0803287a
 801e118:	08032611 	.word	0x08032611

0801e11c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801e11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e120:	4604      	mov	r4, r0
 801e122:	b942      	cbnz	r2, 801e136 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801e124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e128:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801e12c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801e130:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801e134:	e046      	b.n	801e1c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801e136:	7b51      	ldrb	r1, [r2, #13]
 801e138:	8893      	ldrh	r3, [r2, #4]
 801e13a:	010f      	lsls	r7, r1, #4
 801e13c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801e140:	79d7      	ldrb	r7, [r2, #7]
 801e142:	4307      	orrs	r7, r0
 801e144:	2f04      	cmp	r7, #4
 801e146:	b2bd      	uxth	r5, r7
 801e148:	bfcc      	ite	gt
 801e14a:	08bf      	lsrgt	r7, r7, #2
 801e14c:	2701      	movle	r7, #1
 801e14e:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801e152:	f200 80ab 	bhi.w	801e2ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801e156:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801e15a:	4283      	cmp	r3, r0
 801e15c:	d216      	bcs.n	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e15e:	f240 605b 	movw	r0, #1627	; 0x65b
 801e162:	4283      	cmp	r3, r0
 801e164:	d859      	bhi.n	801e21a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801e166:	f240 6057 	movw	r0, #1623	; 0x657
 801e16a:	4283      	cmp	r3, r0
 801e16c:	d20e      	bcs.n	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e16e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e172:	d24a      	bcs.n	801e20a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801e174:	f240 604e 	movw	r0, #1614	; 0x64e
 801e178:	4283      	cmp	r3, r0
 801e17a:	d207      	bcs.n	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e17c:	f240 601a 	movw	r0, #1562	; 0x61a
 801e180:	4283      	cmp	r3, r0
 801e182:	d02a      	beq.n	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e184:	d821      	bhi.n	801e1ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801e186:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801e18a:	d35b      	bcc.n	801e244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e18c:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801e190:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e194:	f040 80d0 	bne.w	801e338 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801e198:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801e19c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e1a0:	f040 80ca 	bne.w	801e338 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801e1a4:	00cb      	lsls	r3, r1, #3
 801e1a6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e1aa:	7a13      	ldrb	r3, [r2, #8]
 801e1ac:	0649      	lsls	r1, r1, #25
 801e1ae:	ea43 0300 	orr.w	r3, r3, r0
 801e1b2:	bf44      	itt	mi
 801e1b4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e1b8:	b21b      	sxthmi	r3, r3
 801e1ba:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e1be:	1b5d      	subs	r5, r3, r5
 801e1c0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e1c4:	4610      	mov	r0, r2
 801e1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e1ca:	f240 604b 	movw	r0, #1611	; 0x64b
 801e1ce:	4283      	cmp	r3, r0
 801e1d0:	d338      	bcc.n	801e244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e1d2:	f240 604c 	movw	r0, #1612	; 0x64c
 801e1d6:	4283      	cmp	r3, r0
 801e1d8:	d9d8      	bls.n	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e1da:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801e1de:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801e1e2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e1e6:	f040 80f1 	bne.w	801e3cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801e1ea:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e1ee:	f040 80ed 	bne.w	801e3cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801e1f2:	00cb      	lsls	r3, r1, #3
 801e1f4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e1f8:	7a13      	ldrb	r3, [r2, #8]
 801e1fa:	064e      	lsls	r6, r1, #25
 801e1fc:	ea43 0300 	orr.w	r3, r3, r0
 801e200:	bf44      	itt	mi
 801e202:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e206:	b21b      	sxthmi	r3, r3
 801e208:	e7d9      	b.n	801e1be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801e20a:	f240 6054 	movw	r0, #1620	; 0x654
 801e20e:	4283      	cmp	r3, r0
 801e210:	d8e3      	bhi.n	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e212:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801e216:	d9e0      	bls.n	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e218:	e7b8      	b.n	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e21a:	f240 6074 	movw	r0, #1652	; 0x674
 801e21e:	4283      	cmp	r3, r0
 801e220:	d0b4      	beq.n	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e222:	d82d      	bhi.n	801e280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801e224:	f240 605e 	movw	r0, #1630	; 0x65e
 801e228:	4283      	cmp	r3, r0
 801e22a:	d804      	bhi.n	801e236 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801e22c:	f240 605d 	movw	r0, #1629	; 0x65d
 801e230:	4283      	cmp	r3, r0
 801e232:	d3d2      	bcc.n	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e234:	e7aa      	b.n	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e236:	f240 605f 	movw	r0, #1631	; 0x65f
 801e23a:	4283      	cmp	r3, r0
 801e23c:	d0cd      	beq.n	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e23e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801e242:	d0a3      	beq.n	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e244:	00cb      	lsls	r3, r1, #3
 801e246:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801e24a:	7a13      	ldrb	r3, [r2, #8]
 801e24c:	0649      	lsls	r1, r1, #25
 801e24e:	ea43 0300 	orr.w	r3, r3, r0
 801e252:	bf44      	itt	mi
 801e254:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e258:	b21b      	sxthmi	r3, r3
 801e25a:	1b5d      	subs	r5, r3, r5
 801e25c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e260:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e264:	7b53      	ldrb	r3, [r2, #13]
 801e266:	015b      	lsls	r3, r3, #5
 801e268:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e26c:	7993      	ldrb	r3, [r2, #6]
 801e26e:	430b      	orrs	r3, r1
 801e270:	005b      	lsls	r3, r3, #1
 801e272:	2105      	movs	r1, #5
 801e274:	fb93 f3f1 	sdiv	r3, r3, r1
 801e278:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801e27c:	440b      	add	r3, r1
 801e27e:	e757      	b.n	801e130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801e280:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801e284:	4283      	cmp	r3, r0
 801e286:	d809      	bhi.n	801e29c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801e288:	f240 60df 	movw	r0, #1759	; 0x6df
 801e28c:	4283      	cmp	r3, r0
 801e28e:	f4bf af7d 	bcs.w	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e292:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801e296:	2b05      	cmp	r3, #5
 801e298:	d8d4      	bhi.n	801e244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e29a:	e777      	b.n	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e29c:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801e2a0:	4283      	cmp	r3, r0
 801e2a2:	d09a      	beq.n	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e2a4:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801e2a8:	4283      	cmp	r3, r0
 801e2aa:	e7ca      	b.n	801e242 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801e2ac:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801e2b0:	d22b      	bcs.n	801e30a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801e2b2:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801e2b6:	4283      	cmp	r3, r0
 801e2b8:	d28f      	bcs.n	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e2ba:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801e2be:	4283      	cmp	r3, r0
 801e2c0:	d816      	bhi.n	801e2f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801e2c2:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801e2c6:	4283      	cmp	r3, r0
 801e2c8:	f4bf af60 	bcs.w	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e2cc:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801e2d0:	4283      	cmp	r3, r0
 801e2d2:	d80a      	bhi.n	801e2ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801e2d4:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801e2d8:	4283      	cmp	r3, r0
 801e2da:	f4bf af57 	bcs.w	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e2de:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801e2e2:	4283      	cmp	r3, r0
 801e2e4:	f43f af79 	beq.w	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e2e8:	e7ac      	b.n	801e244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801e2ea:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801e2ee:	e7f8      	b.n	801e2e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801e2f0:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801e2f4:	4283      	cmp	r3, r0
 801e2f6:	d802      	bhi.n	801e2fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801e2f8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e2fc:	e798      	b.n	801e230 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801e2fe:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801e302:	4283      	cmp	r3, r0
 801e304:	f47f af42 	bne.w	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e308:	e767      	b.n	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e30a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801e30e:	4283      	cmp	r3, r0
 801e310:	f43f af63 	beq.w	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e314:	d802      	bhi.n	801e31c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801e316:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801e31a:	e7f2      	b.n	801e302 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801e31c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801e320:	4283      	cmp	r3, r0
 801e322:	d805      	bhi.n	801e330 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801e324:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801e328:	4283      	cmp	r3, r0
 801e32a:	f4ff af2f 	bcc.w	801e18c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801e32e:	e754      	b.n	801e1da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801e330:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801e334:	4283      	cmp	r3, r0
 801e336:	e7af      	b.n	801e298 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801e338:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801e33c:	4617      	mov	r7, r2
 801e33e:	f102 0808 	add.w	r8, r2, #8
 801e342:	4666      	mov	r6, ip
 801e344:	6838      	ldr	r0, [r7, #0]
 801e346:	6879      	ldr	r1, [r7, #4]
 801e348:	46e6      	mov	lr, ip
 801e34a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801e34e:	3708      	adds	r7, #8
 801e350:	4547      	cmp	r7, r8
 801e352:	46f4      	mov	ip, lr
 801e354:	d1f6      	bne.n	801e344 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801e356:	6838      	ldr	r0, [r7, #0]
 801e358:	f8ce 0000 	str.w	r0, [lr]
 801e35c:	88b9      	ldrh	r1, [r7, #4]
 801e35e:	f8ae 1004 	strh.w	r1, [lr, #4]
 801e362:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e366:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e36a:	d009      	beq.n	801e380 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 801e36c:	7b51      	ldrb	r1, [r2, #13]
 801e36e:	7992      	ldrb	r2, [r2, #6]
 801e370:	0149      	lsls	r1, r1, #5
 801e372:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e376:	4311      	orrs	r1, r2
 801e378:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e37c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e380:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e384:	d00d      	beq.n	801e3a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 801e386:	442b      	add	r3, r5
 801e388:	b29b      	uxth	r3, r3
 801e38a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e38e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e392:	10db      	asrs	r3, r3, #3
 801e394:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e398:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e39c:	4313      	orrs	r3, r2
 801e39e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e3a2:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e3a6:	00cb      	lsls	r3, r1, #3
 801e3a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e3ac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e3b0:	064f      	lsls	r7, r1, #25
 801e3b2:	ea43 0302 	orr.w	r3, r3, r2
 801e3b6:	bf44      	itt	mi
 801e3b8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e3bc:	b21b      	sxthmi	r3, r3
 801e3be:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801e3c2:	1b5d      	subs	r5, r3, r5
 801e3c4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e3c8:	4632      	mov	r2, r6
 801e3ca:	e6fb      	b.n	801e1c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801e3cc:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801e3d0:	4694      	mov	ip, r2
 801e3d2:	f102 0908 	add.w	r9, r2, #8
 801e3d6:	4676      	mov	r6, lr
 801e3d8:	f8dc 0000 	ldr.w	r0, [ip]
 801e3dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e3e0:	46f0      	mov	r8, lr
 801e3e2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801e3e6:	f10c 0c08 	add.w	ip, ip, #8
 801e3ea:	45cc      	cmp	ip, r9
 801e3ec:	46c6      	mov	lr, r8
 801e3ee:	d1f3      	bne.n	801e3d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 801e3f0:	f8dc 0000 	ldr.w	r0, [ip]
 801e3f4:	f8c8 0000 	str.w	r0, [r8]
 801e3f8:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801e3fc:	f8a8 1004 	strh.w	r1, [r8, #4]
 801e400:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e404:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e408:	d009      	beq.n	801e41e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 801e40a:	7b51      	ldrb	r1, [r2, #13]
 801e40c:	7992      	ldrb	r2, [r2, #6]
 801e40e:	0149      	lsls	r1, r1, #5
 801e410:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e414:	4311      	orrs	r1, r2
 801e416:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e41a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e41e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e422:	d00d      	beq.n	801e440 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801e424:	1bdb      	subs	r3, r3, r7
 801e426:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e42a:	b29b      	uxth	r3, r3
 801e42c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e430:	10db      	asrs	r3, r3, #3
 801e432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e436:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e43a:	4313      	orrs	r3, r2
 801e43c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e440:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e444:	00cb      	lsls	r3, r1, #3
 801e446:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e44a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e44e:	0648      	lsls	r0, r1, #25
 801e450:	ea43 0302 	orr.w	r3, r3, r2
 801e454:	bf44      	itt	mi
 801e456:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e45a:	b21b      	sxthmi	r3, r3
 801e45c:	e7b1      	b.n	801e3c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

0801e460 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801e460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e464:	461e      	mov	r6, r3
 801e466:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801e468:	4604      	mov	r4, r0
 801e46a:	4617      	mov	r7, r2
 801e46c:	b92b      	cbnz	r3, 801e47a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801e46e:	4b25      	ldr	r3, [pc, #148]	; (801e504 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801e470:	4a25      	ldr	r2, [pc, #148]	; (801e508 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801e472:	4826      	ldr	r0, [pc, #152]	; (801e50c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801e474:	21c0      	movs	r1, #192	; 0xc0
 801e476:	f00f fecd 	bl	802e214 <__assert_func>
 801e47a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e47c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e480:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e484:	f7f6 f858 	bl	8014538 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e488:	4605      	mov	r5, r0
 801e48a:	b918      	cbnz	r0, 801e494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801e48c:	6030      	str	r0, [r6, #0]
 801e48e:	4628      	mov	r0, r5
 801e490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e494:	683b      	ldr	r3, [r7, #0]
 801e496:	4601      	mov	r1, r0
 801e498:	68db      	ldr	r3, [r3, #12]
 801e49a:	4638      	mov	r0, r7
 801e49c:	4798      	blx	r3
 801e49e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e4a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e4a6:	4602      	mov	r2, r0
 801e4a8:	6030      	str	r0, [r6, #0]
 801e4aa:	d213      	bcs.n	801e4d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801e4ac:	4643      	mov	r3, r8
 801e4ae:	4639      	mov	r1, r7
 801e4b0:	4620      	mov	r0, r4
 801e4b2:	f7ff fe33 	bl	801e11c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e4b6:	6030      	str	r0, [r6, #0]
 801e4b8:	6833      	ldr	r3, [r6, #0]
 801e4ba:	b143      	cbz	r3, 801e4ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801e4bc:	7b5a      	ldrb	r2, [r3, #13]
 801e4be:	7a9b      	ldrb	r3, [r3, #10]
 801e4c0:	0052      	lsls	r2, r2, #1
 801e4c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e4c6:	4313      	orrs	r3, r2
 801e4c8:	bf0c      	ite	eq
 801e4ca:	2301      	moveq	r3, #1
 801e4cc:	2300      	movne	r3, #0
 801e4ce:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e4d2:	e7dc      	b.n	801e48e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801e4d4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e4d8:	b29b      	uxth	r3, r3
 801e4da:	2b7f      	cmp	r3, #127	; 0x7f
 801e4dc:	d804      	bhi.n	801e4e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801e4de:	4639      	mov	r1, r7
 801e4e0:	4620      	mov	r0, r4
 801e4e2:	f7ff fd01 	bl	801dee8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e4e6:	e7e6      	b.n	801e4b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e4e8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d0e3      	beq.n	801e4b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e4f0:	f640 1302 	movw	r3, #2306	; 0x902
 801e4f4:	429d      	cmp	r5, r3
 801e4f6:	d1df      	bne.n	801e4b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e4f8:	4601      	mov	r1, r0
 801e4fa:	4620      	mov	r0, r4
 801e4fc:	f7ff fcc5 	bl	801de8a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e500:	e7d9      	b.n	801e4b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e502:	bf00      	nop
 801e504:	08032608 	.word	0x08032608
 801e508:	0803287a 	.word	0x0803287a
 801e50c:	08032611 	.word	0x08032611

0801e510 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801e510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e514:	461e      	mov	r6, r3
 801e516:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801e518:	4604      	mov	r4, r0
 801e51a:	4617      	mov	r7, r2
 801e51c:	b92b      	cbnz	r3, 801e52a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801e51e:	4b26      	ldr	r3, [pc, #152]	; (801e5b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801e520:	4a26      	ldr	r2, [pc, #152]	; (801e5bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801e522:	4827      	ldr	r0, [pc, #156]	; (801e5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801e524:	21c0      	movs	r1, #192	; 0xc0
 801e526:	f00f fe75 	bl	802e214 <__assert_func>
 801e52a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e52c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e530:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e534:	f7f6 f800 	bl	8014538 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e538:	4605      	mov	r5, r0
 801e53a:	b918      	cbnz	r0, 801e544 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801e53c:	6030      	str	r0, [r6, #0]
 801e53e:	4628      	mov	r0, r5
 801e540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e544:	683b      	ldr	r3, [r7, #0]
 801e546:	4601      	mov	r1, r0
 801e548:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801e54c:	4638      	mov	r0, r7
 801e54e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e552:	47c8      	blx	r9
 801e554:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e55c:	4602      	mov	r2, r0
 801e55e:	6030      	str	r0, [r6, #0]
 801e560:	d213      	bcs.n	801e58a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801e562:	4643      	mov	r3, r8
 801e564:	4639      	mov	r1, r7
 801e566:	4620      	mov	r0, r4
 801e568:	f7ff fdd8 	bl	801e11c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e56c:	6030      	str	r0, [r6, #0]
 801e56e:	6833      	ldr	r3, [r6, #0]
 801e570:	b143      	cbz	r3, 801e584 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801e572:	7b5a      	ldrb	r2, [r3, #13]
 801e574:	7a9b      	ldrb	r3, [r3, #10]
 801e576:	0052      	lsls	r2, r2, #1
 801e578:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e57c:	4313      	orrs	r3, r2
 801e57e:	bf0c      	ite	eq
 801e580:	2301      	moveq	r3, #1
 801e582:	2300      	movne	r3, #0
 801e584:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e588:	e7d9      	b.n	801e53e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801e58a:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e58e:	b29b      	uxth	r3, r3
 801e590:	2b7f      	cmp	r3, #127	; 0x7f
 801e592:	d804      	bhi.n	801e59e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801e594:	4639      	mov	r1, r7
 801e596:	4620      	mov	r0, r4
 801e598:	f7ff fca6 	bl	801dee8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e59c:	e7e6      	b.n	801e56c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801e59e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d0e3      	beq.n	801e56e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801e5a6:	f640 1302 	movw	r3, #2306	; 0x902
 801e5aa:	429d      	cmp	r5, r3
 801e5ac:	d1df      	bne.n	801e56e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801e5ae:	4601      	mov	r1, r0
 801e5b0:	4620      	mov	r0, r4
 801e5b2:	f7ff fc6a 	bl	801de8a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e5b6:	e7d9      	b.n	801e56c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801e5b8:	08032608 	.word	0x08032608
 801e5bc:	0803287a 	.word	0x0803287a
 801e5c0:	08032611 	.word	0x08032611

0801e5c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801e5c4:	b510      	push	{r4, lr}
 801e5c6:	4604      	mov	r4, r0
 801e5c8:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801e5cc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e5ce:	b9d9      	cbnz	r1, 801e608 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801e5d0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e5d2:	2b0a      	cmp	r3, #10
 801e5d4:	d037      	beq.n	801e646 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e5d6:	4620      	mov	r0, r4
 801e5d8:	f7ff fc16 	bl	801de08 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801e5dc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e5de:	2b09      	cmp	r3, #9
 801e5e0:	d906      	bls.n	801e5f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801e5e2:	4b19      	ldr	r3, [pc, #100]	; (801e648 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801e5e4:	4a19      	ldr	r2, [pc, #100]	; (801e64c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801e5e6:	481a      	ldr	r0, [pc, #104]	; (801e650 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801e5e8:	f44f 7182 	mov.w	r1, #260	; 0x104
 801e5ec:	f00f fe12 	bl	802e214 <__assert_func>
 801e5f0:	1c5a      	adds	r2, r3, #1
 801e5f2:	8722      	strh	r2, [r4, #56]	; 0x38
 801e5f4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e5f6:	4413      	add	r3, r2
 801e5f8:	b29b      	uxth	r3, r3
 801e5fa:	2b09      	cmp	r3, #9
 801e5fc:	bf88      	it	hi
 801e5fe:	3b0a      	subhi	r3, #10
 801e600:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e604:	8458      	strh	r0, [r3, #34]	; 0x22
 801e606:	e7e3      	b.n	801e5d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801e608:	2b0a      	cmp	r3, #10
 801e60a:	d01c      	beq.n	801e646 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e60c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801e60e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801e612:	3901      	subs	r1, #1
 801e614:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801e616:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801e61a:	1c51      	adds	r1, r2, #1
 801e61c:	b289      	uxth	r1, r1
 801e61e:	2901      	cmp	r1, #1
 801e620:	bf8a      	itet	hi
 801e622:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801e626:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801e628:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801e62a:	2b09      	cmp	r3, #9
 801e62c:	d8d9      	bhi.n	801e5e2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801e62e:	1c5a      	adds	r2, r3, #1
 801e630:	8722      	strh	r2, [r4, #56]	; 0x38
 801e632:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e634:	4413      	add	r3, r2
 801e636:	b29b      	uxth	r3, r3
 801e638:	2b09      	cmp	r3, #9
 801e63a:	bf88      	it	hi
 801e63c:	3b0a      	subhi	r3, #10
 801e63e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e642:	8458      	strh	r0, [r3, #34]	; 0x22
 801e644:	e7c0      	b.n	801e5c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801e646:	bd10      	pop	{r4, pc}
 801e648:	0803263d 	.word	0x0803263d
 801e64c:	080329d0 	.word	0x080329d0
 801e650:	08032611 	.word	0x08032611

0801e654 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801e654:	b538      	push	{r3, r4, r5, lr}
 801e656:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801e658:	4604      	mov	r4, r0
 801e65a:	b92a      	cbnz	r2, 801e668 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801e65c:	4b13      	ldr	r3, [pc, #76]	; (801e6ac <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801e65e:	4a14      	ldr	r2, [pc, #80]	; (801e6b0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801e660:	4814      	ldr	r0, [pc, #80]	; (801e6b4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801e662:	21d5      	movs	r1, #213	; 0xd5
 801e664:	f00f fdd6 	bl	802e214 <__assert_func>
 801e668:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e66a:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801e66e:	3a01      	subs	r2, #1
 801e670:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801e672:	8702      	strh	r2, [r0, #56]	; 0x38
 801e674:	1c5a      	adds	r2, r3, #1
 801e676:	b292      	uxth	r2, r2
 801e678:	2a09      	cmp	r2, #9
 801e67a:	bf86      	itte	hi
 801e67c:	3b09      	subhi	r3, #9
 801e67e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801e680:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801e682:	f7ff ff9f 	bl	801e5c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e686:	8c23      	ldrh	r3, [r4, #32]
 801e688:	2b01      	cmp	r3, #1
 801e68a:	bf9c      	itt	ls
 801e68c:	3301      	addls	r3, #1
 801e68e:	8423      	strhls	r3, [r4, #32]
 801e690:	8be3      	ldrh	r3, [r4, #30]
 801e692:	b90b      	cbnz	r3, 801e698 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801e694:	2302      	movs	r3, #2
 801e696:	83e3      	strh	r3, [r4, #30]
 801e698:	8be3      	ldrh	r3, [r4, #30]
 801e69a:	3b01      	subs	r3, #1
 801e69c:	b29b      	uxth	r3, r3
 801e69e:	83e3      	strh	r3, [r4, #30]
 801e6a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e6a4:	4628      	mov	r0, r5
 801e6a6:	8365      	strh	r5, [r4, #26]
 801e6a8:	bd38      	pop	{r3, r4, r5, pc}
 801e6aa:	bf00      	nop
 801e6ac:	08032608 	.word	0x08032608
 801e6b0:	08032925 	.word	0x08032925
 801e6b4:	08032611 	.word	0x08032611

0801e6b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801e6b8:	b538      	push	{r3, r4, r5, lr}
 801e6ba:	428a      	cmp	r2, r1
 801e6bc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801e6be:	d90c      	bls.n	801e6da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801e6c0:	b92c      	cbnz	r4, 801e6ce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801e6c2:	4b1c      	ldr	r3, [pc, #112]	; (801e734 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801e6c4:	4a1c      	ldr	r2, [pc, #112]	; (801e738 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801e6c6:	21e1      	movs	r1, #225	; 0xe1
 801e6c8:	481c      	ldr	r0, [pc, #112]	; (801e73c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801e6ca:	f00f fda3 	bl	802e214 <__assert_func>
 801e6ce:	3c01      	subs	r4, #1
 801e6d0:	8704      	strh	r4, [r0, #56]	; 0x38
 801e6d2:	4b1b      	ldr	r3, [pc, #108]	; (801e740 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801e6d4:	4a1b      	ldr	r2, [pc, #108]	; (801e744 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801e6d6:	21c5      	movs	r1, #197	; 0xc5
 801e6d8:	e7f6      	b.n	801e6c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e6da:	428c      	cmp	r4, r1
 801e6dc:	d203      	bcs.n	801e6e6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801e6de:	4b1a      	ldr	r3, [pc, #104]	; (801e748 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801e6e0:	4a1a      	ldr	r2, [pc, #104]	; (801e74c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801e6e2:	21cb      	movs	r1, #203	; 0xcb
 801e6e4:	e7f0      	b.n	801e6c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e6e6:	1a64      	subs	r4, r4, r1
 801e6e8:	8704      	strh	r4, [r0, #56]	; 0x38
 801e6ea:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801e6ec:	4421      	add	r1, r4
 801e6ee:	b289      	uxth	r1, r1
 801e6f0:	2909      	cmp	r1, #9
 801e6f2:	bf88      	it	hi
 801e6f4:	390a      	subhi	r1, #10
 801e6f6:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e6f8:	250a      	movs	r5, #10
 801e6fa:	b1ba      	cbz	r2, 801e72c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801e6fc:	3a01      	subs	r2, #1
 801e6fe:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801e700:	b292      	uxth	r2, r2
 801e702:	2909      	cmp	r1, #9
 801e704:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801e708:	d903      	bls.n	801e712 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801e70a:	4b11      	ldr	r3, [pc, #68]	; (801e750 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801e70c:	4a11      	ldr	r2, [pc, #68]	; (801e754 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801e70e:	21e6      	movs	r1, #230	; 0xe6
 801e710:	e7da      	b.n	801e6c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e712:	3101      	adds	r1, #1
 801e714:	8701      	strh	r1, [r0, #56]	; 0x38
 801e716:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e718:	b901      	cbnz	r1, 801e71c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801e71a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e71c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e71e:	3901      	subs	r1, #1
 801e720:	b289      	uxth	r1, r1
 801e722:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e724:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e728:	844c      	strh	r4, [r1, #34]	; 0x22
 801e72a:	e7e6      	b.n	801e6fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801e72c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e730:	f7ff bf48 	b.w	801e5c4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e734:	08032608 	.word	0x08032608
 801e738:	080326fe 	.word	0x080326fe
 801e73c:	08032611 	.word	0x08032611
 801e740:	08032649 	.word	0x08032649
 801e744:	080327a8 	.word	0x080327a8
 801e748:	08032657 	.word	0x08032657
 801e74c:	08032a7f 	.word	0x08032a7f
 801e750:	08032663 	.word	0x08032663
 801e754:	08032676 	.word	0x08032676

0801e758 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801e758:	3a01      	subs	r2, #1
 801e75a:	b570      	push	{r4, r5, r6, lr}
 801e75c:	b292      	uxth	r2, r2
 801e75e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801e762:	42b2      	cmp	r2, r6
 801e764:	d019      	beq.n	801e79a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801e766:	8c04      	ldrh	r4, [r0, #32]
 801e768:	f831 5b02 	ldrh.w	r5, [r1], #2
 801e76c:	4294      	cmp	r4, r2
 801e76e:	d805      	bhi.n	801e77c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801e770:	4b19      	ldr	r3, [pc, #100]	; (801e7d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e772:	4a1a      	ldr	r2, [pc, #104]	; (801e7dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801e774:	481a      	ldr	r0, [pc, #104]	; (801e7e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801e776:	21c5      	movs	r1, #197	; 0xc5
 801e778:	f00f fd4c 	bl	802e214 <__assert_func>
 801e77c:	8bc4      	ldrh	r4, [r0, #30]
 801e77e:	4414      	add	r4, r2
 801e780:	b2a4      	uxth	r4, r4
 801e782:	2c01      	cmp	r4, #1
 801e784:	bf88      	it	hi
 801e786:	3c02      	subhi	r4, #2
 801e788:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e78c:	3a01      	subs	r2, #1
 801e78e:	8b64      	ldrh	r4, [r4, #26]
 801e790:	42ac      	cmp	r4, r5
 801e792:	b292      	uxth	r2, r2
 801e794:	d0e5      	beq.n	801e762 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801e796:	2000      	movs	r0, #0
 801e798:	bd70      	pop	{r4, r5, r6, pc}
 801e79a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e79e:	2400      	movs	r4, #0
 801e7a0:	4413      	add	r3, r2
 801e7a2:	b2a2      	uxth	r2, r4
 801e7a4:	429a      	cmp	r2, r3
 801e7a6:	da14      	bge.n	801e7d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801e7a8:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801e7aa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e7ae:	4296      	cmp	r6, r2
 801e7b0:	d802      	bhi.n	801e7b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801e7b2:	4b09      	ldr	r3, [pc, #36]	; (801e7d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e7b4:	4a0b      	ldr	r2, [pc, #44]	; (801e7e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801e7b6:	e7dd      	b.n	801e774 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801e7b8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801e7ba:	4432      	add	r2, r6
 801e7bc:	b292      	uxth	r2, r2
 801e7be:	2a09      	cmp	r2, #9
 801e7c0:	bf88      	it	hi
 801e7c2:	3a0a      	subhi	r2, #10
 801e7c4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e7c8:	3401      	adds	r4, #1
 801e7ca:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801e7cc:	42aa      	cmp	r2, r5
 801e7ce:	d0e8      	beq.n	801e7a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801e7d0:	e7e1      	b.n	801e796 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801e7d2:	2001      	movs	r0, #1
 801e7d4:	e7e0      	b.n	801e798 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801e7d6:	bf00      	nop
 801e7d8:	08032649 	.word	0x08032649
 801e7dc:	08032b03 	.word	0x08032b03
 801e7e0:	08032611 	.word	0x08032611
 801e7e4:	080327a8 	.word	0x080327a8

0801e7e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e7e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7ec:	4605      	mov	r5, r0
 801e7ee:	4616      	mov	r6, r2
 801e7f0:	1c8c      	adds	r4, r1, #2
 801e7f2:	8809      	ldrh	r1, [r1, #0]
 801e7f4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e7f8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e7fc:	42b3      	cmp	r3, r6
 801e7fe:	d124      	bne.n	801e84a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e800:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e804:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e808:	f001 070f 	and.w	r7, r1, #15
 801e80c:	f8cd 8000 	str.w	r8, [sp]
 801e810:	464b      	mov	r3, r9
 801e812:	4652      	mov	r2, sl
 801e814:	4621      	mov	r1, r4
 801e816:	4628      	mov	r0, r5
 801e818:	f7ff ff9e 	bl	801e758 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e81c:	4683      	mov	fp, r0
 801e81e:	b168      	cbz	r0, 801e83c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e820:	eb0a 0109 	add.w	r1, sl, r9
 801e824:	4441      	add	r1, r8
 801e826:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e82a:	463a      	mov	r2, r7
 801e82c:	4649      	mov	r1, r9
 801e82e:	4628      	mov	r0, r5
 801e830:	f7ff ff42 	bl	801e6b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e834:	4658      	mov	r0, fp
 801e836:	b003      	add	sp, #12
 801e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e83c:	eb07 010a 	add.w	r1, r7, sl
 801e840:	4449      	add	r1, r9
 801e842:	4441      	add	r1, r8
 801e844:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e848:	e7d2      	b.n	801e7f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e84a:	f04f 0b00 	mov.w	fp, #0
 801e84e:	e7f1      	b.n	801e834 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e850 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e850:	b570      	push	{r4, r5, r6, lr}
 801e852:	8810      	ldrh	r0, [r2, #0]
 801e854:	4298      	cmp	r0, r3
 801e856:	d817      	bhi.n	801e888 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e858:	1e48      	subs	r0, r1, #1
 801e85a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e85e:	4298      	cmp	r0, r3
 801e860:	d312      	bcc.n	801e888 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e862:	2400      	movs	r4, #0
 801e864:	428c      	cmp	r4, r1
 801e866:	d20f      	bcs.n	801e888 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e868:	1860      	adds	r0, r4, r1
 801e86a:	1040      	asrs	r0, r0, #1
 801e86c:	0085      	lsls	r5, r0, #2
 801e86e:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e872:	42b3      	cmp	r3, r6
 801e874:	d902      	bls.n	801e87c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e876:	3001      	adds	r0, #1
 801e878:	b284      	uxth	r4, r0
 801e87a:	e7f3      	b.n	801e864 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e87c:	d201      	bcs.n	801e882 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e87e:	b281      	uxth	r1, r0
 801e880:	e7f0      	b.n	801e864 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e882:	442a      	add	r2, r5
 801e884:	8850      	ldrh	r0, [r2, #2]
 801e886:	bd70      	pop	{r4, r5, r6, pc}
 801e888:	2000      	movs	r0, #0
 801e88a:	e7fc      	b.n	801e886 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e88c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e890:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801e892:	886f      	ldrh	r7, [r5, #2]
 801e894:	4604      	mov	r4, r0
 801e896:	087f      	lsrs	r7, r7, #1
 801e898:	260b      	movs	r6, #11
 801e89a:	3e01      	subs	r6, #1
 801e89c:	d01b      	beq.n	801e8d6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e89e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e8a0:	b92b      	cbnz	r3, 801e8ae <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801e8a2:	4b0e      	ldr	r3, [pc, #56]	; (801e8dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801e8a4:	4a0e      	ldr	r2, [pc, #56]	; (801e8e0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801e8a6:	480f      	ldr	r0, [pc, #60]	; (801e8e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801e8a8:	21c0      	movs	r1, #192	; 0xc0
 801e8aa:	f00f fcb3 	bl	802e214 <__assert_func>
 801e8ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e8b0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e8b4:	462a      	mov	r2, r5
 801e8b6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e8ba:	4639      	mov	r1, r7
 801e8bc:	4643      	mov	r3, r8
 801e8be:	4620      	mov	r0, r4
 801e8c0:	f7ff ffc6 	bl	801e850 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e8c4:	b138      	cbz	r0, 801e8d6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e8c6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e8ca:	4642      	mov	r2, r8
 801e8cc:	4620      	mov	r0, r4
 801e8ce:	f7ff ff8b 	bl	801e7e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e8d2:	2800      	cmp	r0, #0
 801e8d4:	d1e1      	bne.n	801e89a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8da:	bf00      	nop
 801e8dc:	08032608 	.word	0x08032608
 801e8e0:	0803287a 	.word	0x0803287a
 801e8e4:	08032611 	.word	0x08032611

0801e8e8 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 801e8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8ea:	b08d      	sub	sp, #52	; 0x34
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	9304      	str	r3, [sp, #16]
 801e8f0:	9305      	str	r3, [sp, #20]
 801e8f2:	9306      	str	r3, [sp, #24]
 801e8f4:	aa04      	add	r2, sp, #16
 801e8f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e8fa:	9307      	str	r3, [sp, #28]
 801e8fc:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801e900:	4613      	mov	r3, r2
 801e902:	f101 0710 	add.w	r7, r1, #16
 801e906:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e944 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 801e90a:	460c      	mov	r4, r1
 801e90c:	4605      	mov	r5, r0
 801e90e:	ecb4 7a01 	vldmia	r4!, {s14}
 801e912:	ecf5 6a01 	vldmia	r5!, {s13}
 801e916:	42bc      	cmp	r4, r7
 801e918:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e91c:	d1f7      	bne.n	801e90e <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 801e91e:	3010      	adds	r0, #16
 801e920:	42b0      	cmp	r0, r6
 801e922:	ece2 7a01 	vstmia	r2!, {s15}
 801e926:	d1ee      	bne.n	801e906 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 801e928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e92a:	ac0c      	add	r4, sp, #48	; 0x30
 801e92c:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e930:	ed9d 0a08 	vldr	s0, [sp, #32]
 801e934:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 801e938:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 801e93c:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 801e940:	b00d      	add	sp, #52	; 0x34
 801e942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e944:	00000000 	.word	0x00000000

0801e948 <_ZN8touchgfx9Matrix4x4C1Ev>:
 801e948:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801e978 <_ZN8touchgfx9Matrix4x4C1Ev+0x30>
 801e94c:	2300      	movs	r3, #0
 801e94e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e952:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 801e956:	2200      	movs	r2, #0
 801e958:	4293      	cmp	r3, r2
 801e95a:	f102 0201 	add.w	r2, r2, #1
 801e95e:	bf14      	ite	ne
 801e960:	eef0 6a47 	vmovne.f32	s13, s14
 801e964:	eef0 6a67 	vmoveq.f32	s13, s15
 801e968:	2a04      	cmp	r2, #4
 801e96a:	ece1 6a01 	vstmia	r1!, {s13}
 801e96e:	d1f3      	bne.n	801e958 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 801e970:	3301      	adds	r3, #1
 801e972:	2b04      	cmp	r3, #4
 801e974:	d1ed      	bne.n	801e952 <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 801e976:	4770      	bx	lr
 801e978:	00000000 	.word	0x00000000

0801e97c <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 801e97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e980:	460c      	mov	r4, r1
 801e982:	4605      	mov	r5, r0
 801e984:	4690      	mov	r8, r2
 801e986:	f7ff ffdf 	bl	801e948 <_ZN8touchgfx9Matrix4x4C1Ev>
 801e98a:	4628      	mov	r0, r5
 801e98c:	4621      	mov	r1, r4
 801e98e:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801e992:	2300      	movs	r3, #0
 801e994:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e9d4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x58>
 801e998:	eb08 0603 	add.w	r6, r8, r3
 801e99c:	460f      	mov	r7, r1
 801e99e:	2400      	movs	r4, #0
 801e9a0:	4632      	mov	r2, r6
 801e9a2:	ecf7 6a01 	vldmia	r7!, {s13}
 801e9a6:	ed92 7a00 	vldr	s14, [r2]
 801e9aa:	3401      	adds	r4, #1
 801e9ac:	2c04      	cmp	r4, #4
 801e9ae:	f106 0610 	add.w	r6, r6, #16
 801e9b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e9b6:	d1f3      	bne.n	801e9a0 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 801e9b8:	18c2      	adds	r2, r0, r3
 801e9ba:	3304      	adds	r3, #4
 801e9bc:	2b10      	cmp	r3, #16
 801e9be:	edc2 7a00 	vstr	s15, [r2]
 801e9c2:	d1e7      	bne.n	801e994 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 801e9c4:	3110      	adds	r1, #16
 801e9c6:	4561      	cmp	r1, ip
 801e9c8:	f100 0010 	add.w	r0, r0, #16
 801e9cc:	d1e1      	bne.n	801e992 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 801e9ce:	4628      	mov	r0, r5
 801e9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9d4:	00000000 	.word	0x00000000

0801e9d8 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 801e9d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e9dc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801e9e0:	f100 0320 	add.w	r3, r0, #32
 801e9e4:	3030      	adds	r0, #48	; 0x30
 801e9e6:	ecf3 7a01 	vldmia	r3!, {s15}
 801e9ea:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e9ee:	4283      	cmp	r3, r0
 801e9f0:	edc3 7a03 	vstr	s15, [r3, #12]
 801e9f4:	d1f7      	bne.n	801e9e6 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 801e9f6:	4770      	bx	lr

0801e9f8 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 801e9f8:	b510      	push	{r4, lr}
 801e9fa:	ed2d 8b02 	vpush	{d8}
 801e9fe:	4604      	mov	r4, r0
 801ea00:	eef0 8a40 	vmov.f32	s17, s0
 801ea04:	f00e fed4 	bl	802d7b0 <sinf>
 801ea08:	eeb0 8a40 	vmov.f32	s16, s0
 801ea0c:	eeb0 0a68 	vmov.f32	s0, s17
 801ea10:	f00e fe4c 	bl	802d6ac <cosf>
 801ea14:	f104 0310 	add.w	r3, r4, #16
 801ea18:	f104 0220 	add.w	r2, r4, #32
 801ea1c:	eeb1 6a48 	vneg.f32	s12, s16
 801ea20:	edd3 7a04 	vldr	s15, [r3, #16]
 801ea24:	edd3 6a00 	vldr	s13, [r3]
 801ea28:	ee26 7a27 	vmul.f32	s14, s12, s15
 801ea2c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ea30:	eea6 7a80 	vfma.f32	s14, s13, s0
 801ea34:	eee6 7a88 	vfma.f32	s15, s13, s16
 801ea38:	eca3 7a01 	vstmia	r3!, {s14}
 801ea3c:	429a      	cmp	r2, r3
 801ea3e:	edc3 7a03 	vstr	s15, [r3, #12]
 801ea42:	d1ed      	bne.n	801ea20 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 801ea44:	ecbd 8b02 	vpop	{d8}
 801ea48:	4620      	mov	r0, r4
 801ea4a:	bd10      	pop	{r4, pc}

0801ea4c <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 801ea4c:	b510      	push	{r4, lr}
 801ea4e:	ed2d 8b02 	vpush	{d8}
 801ea52:	4604      	mov	r4, r0
 801ea54:	eef0 8a40 	vmov.f32	s17, s0
 801ea58:	f00e feaa 	bl	802d7b0 <sinf>
 801ea5c:	eeb0 8a40 	vmov.f32	s16, s0
 801ea60:	eeb0 0a68 	vmov.f32	s0, s17
 801ea64:	f00e fe22 	bl	802d6ac <cosf>
 801ea68:	4623      	mov	r3, r4
 801ea6a:	f104 0210 	add.w	r2, r4, #16
 801ea6e:	eeb1 6a48 	vneg.f32	s12, s16
 801ea72:	edd3 7a08 	vldr	s15, [r3, #32]
 801ea76:	edd3 6a00 	vldr	s13, [r3]
 801ea7a:	ee27 7a88 	vmul.f32	s14, s15, s16
 801ea7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ea82:	eea6 7a80 	vfma.f32	s14, s13, s0
 801ea86:	eee6 7a26 	vfma.f32	s15, s12, s13
 801ea8a:	eca3 7a01 	vstmia	r3!, {s14}
 801ea8e:	429a      	cmp	r2, r3
 801ea90:	edc3 7a07 	vstr	s15, [r3, #28]
 801ea94:	d1ed      	bne.n	801ea72 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 801ea96:	ecbd 8b02 	vpop	{d8}
 801ea9a:	4620      	mov	r0, r4
 801ea9c:	bd10      	pop	{r4, pc}

0801ea9e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 801ea9e:	b510      	push	{r4, lr}
 801eaa0:	ed2d 8b02 	vpush	{d8}
 801eaa4:	4604      	mov	r4, r0
 801eaa6:	eef0 8a40 	vmov.f32	s17, s0
 801eaaa:	f00e fe81 	bl	802d7b0 <sinf>
 801eaae:	eeb0 8a40 	vmov.f32	s16, s0
 801eab2:	eeb0 0a68 	vmov.f32	s0, s17
 801eab6:	f00e fdf9 	bl	802d6ac <cosf>
 801eaba:	4623      	mov	r3, r4
 801eabc:	f104 0210 	add.w	r2, r4, #16
 801eac0:	eeb1 6a48 	vneg.f32	s12, s16
 801eac4:	edd3 7a04 	vldr	s15, [r3, #16]
 801eac8:	edd3 6a00 	vldr	s13, [r3]
 801eacc:	ee26 7a27 	vmul.f32	s14, s12, s15
 801ead0:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ead4:	eea6 7a80 	vfma.f32	s14, s13, s0
 801ead8:	eee6 7a88 	vfma.f32	s15, s13, s16
 801eadc:	eca3 7a01 	vstmia	r3!, {s14}
 801eae0:	429a      	cmp	r2, r3
 801eae2:	edc3 7a03 	vstr	s15, [r3, #12]
 801eae6:	d1ed      	bne.n	801eac4 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 801eae8:	ecbd 8b02 	vpop	{d8}
 801eaec:	4620      	mov	r0, r4
 801eaee:	bd10      	pop	{r4, pc}

0801eaf0 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 801eaf0:	4603      	mov	r3, r0
 801eaf2:	f100 0210 	add.w	r2, r0, #16
 801eaf6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801eafa:	edd3 7a00 	vldr	s15, [r3]
 801eafe:	eee7 7a00 	vfma.f32	s15, s14, s0
 801eb02:	ece3 7a01 	vstmia	r3!, {s15}
 801eb06:	4293      	cmp	r3, r2
 801eb08:	d1f5      	bne.n	801eaf6 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 801eb0a:	4770      	bx	lr

0801eb0c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 801eb0c:	f100 0310 	add.w	r3, r0, #16
 801eb10:	f100 0220 	add.w	r2, r0, #32
 801eb14:	ed93 7a08 	vldr	s14, [r3, #32]
 801eb18:	edd3 7a00 	vldr	s15, [r3]
 801eb1c:	eee7 7a00 	vfma.f32	s15, s14, s0
 801eb20:	ece3 7a01 	vstmia	r3!, {s15}
 801eb24:	4293      	cmp	r3, r2
 801eb26:	d1f5      	bne.n	801eb14 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 801eb28:	4770      	bx	lr

0801eb2a <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 801eb2a:	f100 0320 	add.w	r3, r0, #32
 801eb2e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801eb32:	ed93 7a04 	vldr	s14, [r3, #16]
 801eb36:	edd3 7a00 	vldr	s15, [r3]
 801eb3a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801eb3e:	ece3 7a01 	vstmia	r3!, {s15}
 801eb42:	4293      	cmp	r3, r2
 801eb44:	d1f5      	bne.n	801eb32 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 801eb46:	4770      	bx	lr

0801eb48 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 801eb48:	4603      	mov	r3, r0
 801eb4a:	f100 0210 	add.w	r2, r0, #16
 801eb4e:	edd3 7a00 	vldr	s15, [r3]
 801eb52:	ee67 7a80 	vmul.f32	s15, s15, s0
 801eb56:	ece3 7a01 	vstmia	r3!, {s15}
 801eb5a:	4293      	cmp	r3, r2
 801eb5c:	d1f7      	bne.n	801eb4e <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 801eb5e:	4770      	bx	lr

0801eb60 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 801eb60:	f100 0310 	add.w	r3, r0, #16
 801eb64:	f100 0220 	add.w	r2, r0, #32
 801eb68:	edd3 7a00 	vldr	s15, [r3]
 801eb6c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801eb70:	ece3 7a01 	vstmia	r3!, {s15}
 801eb74:	4293      	cmp	r3, r2
 801eb76:	d1f7      	bne.n	801eb68 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 801eb78:	4770      	bx	lr

0801eb7a <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 801eb7a:	f100 0320 	add.w	r3, r0, #32
 801eb7e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801eb82:	edd3 7a00 	vldr	s15, [r3]
 801eb86:	ee67 7a80 	vmul.f32	s15, s15, s0
 801eb8a:	ece3 7a01 	vstmia	r3!, {s15}
 801eb8e:	4293      	cmp	r3, r2
 801eb90:	d1f7      	bne.n	801eb82 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 801eb92:	4770      	bx	lr

0801eb94 <_ZN8touchgfx8ceil28_4El>:
 801eb94:	f110 030f 	adds.w	r3, r0, #15
 801eb98:	d401      	bmi.n	801eb9e <_ZN8touchgfx8ceil28_4El+0xa>
 801eb9a:	1118      	asrs	r0, r3, #4
 801eb9c:	4770      	bx	lr
 801eb9e:	f1c0 0001 	rsb	r0, r0, #1
 801eba2:	f010 000f 	ands.w	r0, r0, #15
 801eba6:	bf18      	it	ne
 801eba8:	2001      	movne	r0, #1
 801ebaa:	2210      	movs	r2, #16
 801ebac:	fb93 f3f2 	sdiv	r3, r3, r2
 801ebb0:	1a18      	subs	r0, r3, r0
 801ebb2:	4770      	bx	lr

0801ebb4 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801ebb4:	2900      	cmp	r1, #0
 801ebb6:	b538      	push	{r3, r4, r5, lr}
 801ebb8:	dc05      	bgt.n	801ebc6 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801ebba:	4b0f      	ldr	r3, [pc, #60]	; (801ebf8 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801ebbc:	4a0f      	ldr	r2, [pc, #60]	; (801ebfc <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801ebbe:	4810      	ldr	r0, [pc, #64]	; (801ec00 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801ebc0:	21f7      	movs	r1, #247	; 0xf7
 801ebc2:	f00f fb27 	bl	802e214 <__assert_func>
 801ebc6:	2800      	cmp	r0, #0
 801ebc8:	db06      	blt.n	801ebd8 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801ebca:	fb90 f4f1 	sdiv	r4, r0, r1
 801ebce:	6014      	str	r4, [r2, #0]
 801ebd0:	fb01 0114 	mls	r1, r1, r4, r0
 801ebd4:	6019      	str	r1, [r3, #0]
 801ebd6:	bd38      	pop	{r3, r4, r5, pc}
 801ebd8:	4240      	negs	r0, r0
 801ebda:	fb90 f4f1 	sdiv	r4, r0, r1
 801ebde:	4265      	negs	r5, r4
 801ebe0:	fb01 0014 	mls	r0, r1, r4, r0
 801ebe4:	6015      	str	r5, [r2, #0]
 801ebe6:	6018      	str	r0, [r3, #0]
 801ebe8:	2800      	cmp	r0, #0
 801ebea:	d0f4      	beq.n	801ebd6 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801ebec:	6810      	ldr	r0, [r2, #0]
 801ebee:	3801      	subs	r0, #1
 801ebf0:	6010      	str	r0, [r2, #0]
 801ebf2:	6818      	ldr	r0, [r3, #0]
 801ebf4:	1a09      	subs	r1, r1, r0
 801ebf6:	e7ed      	b.n	801ebd4 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801ebf8:	08032bd4 	.word	0x08032bd4
 801ebfc:	08032c13 	.word	0x08032c13
 801ec00:	08032be4 	.word	0x08032be4

0801ec04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801ec04:	b570      	push	{r4, r5, r6, lr}
 801ec06:	694a      	ldr	r2, [r1, #20]
 801ec08:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801ec0a:	684b      	ldr	r3, [r1, #4]
 801ec0c:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801ec0e:	1b54      	subs	r4, r2, r5
 801ec10:	f000 8106 	beq.w	801ee20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801ec14:	1b9b      	subs	r3, r3, r6
 801ec16:	d003      	beq.n	801ec20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ec18:	4363      	muls	r3, r4
 801ec1a:	2210      	movs	r2, #16
 801ec1c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ec20:	680c      	ldr	r4, [r1, #0]
 801ec22:	698a      	ldr	r2, [r1, #24]
 801ec24:	1b65      	subs	r5, r4, r5
 801ec26:	f000 80fd 	beq.w	801ee24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801ec2a:	1b92      	subs	r2, r2, r6
 801ec2c:	d003      	beq.n	801ec36 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ec2e:	436a      	muls	r2, r5
 801ec30:	2410      	movs	r4, #16
 801ec32:	fb92 f2f4 	sdiv	r2, r2, r4
 801ec36:	1a9b      	subs	r3, r3, r2
 801ec38:	ee07 3a90 	vmov	s15, r3
 801ec3c:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801ee60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ec40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ec48:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ec4c:	460a      	mov	r2, r1
 801ec4e:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ec52:	4603      	mov	r3, r0
 801ec54:	f100 040c 	add.w	r4, r0, #12
 801ec58:	eeb1 6a43 	vneg.f32	s12, s6
 801ec5c:	edd2 7a02 	vldr	s15, [r2, #8]
 801ec60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ec64:	3214      	adds	r2, #20
 801ec66:	ece3 6a01 	vstmia	r3!, {s13}
 801ec6a:	ed52 7a02 	vldr	s15, [r2, #-8]
 801ec6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ec72:	429c      	cmp	r4, r3
 801ec74:	edc3 7a02 	vstr	s15, [r3, #8]
 801ec78:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ec7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ec80:	edc3 7a05 	vstr	s15, [r3, #20]
 801ec84:	d1ea      	bne.n	801ec5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801ec86:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ec88:	698b      	ldr	r3, [r1, #24]
 801ec8a:	edd0 4a02 	vldr	s9, [r0, #8]
 801ec8e:	edd0 3a00 	vldr	s7, [r0]
 801ec92:	edd0 6a01 	vldr	s13, [r0, #4]
 801ec96:	ed90 5a05 	vldr	s10, [r0, #20]
 801ec9a:	ed90 2a03 	vldr	s4, [r0, #12]
 801ec9e:	edd0 5a04 	vldr	s11, [r0, #16]
 801eca2:	ed90 1a07 	vldr	s2, [r0, #28]
 801eca6:	edd0 2a06 	vldr	s5, [r0, #24]
 801ecaa:	1a9b      	subs	r3, r3, r2
 801ecac:	ee07 3a90 	vmov	s15, r3
 801ecb0:	684b      	ldr	r3, [r1, #4]
 801ecb2:	1a9b      	subs	r3, r3, r2
 801ecb4:	ee07 3a10 	vmov	s14, r3
 801ecb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ecbc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ecc0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ecc4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ecc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801eccc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801ecd0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ecd4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801ecd8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ecdc:	ee32 5a45 	vsub.f32	s10, s4, s10
 801ece0:	ee67 7a83 	vmul.f32	s15, s15, s6
 801ece4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801ece8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ecea:	694a      	ldr	r2, [r1, #20]
 801ecec:	1b13      	subs	r3, r2, r4
 801ecee:	ee07 3a10 	vmov	s14, r3
 801ecf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ecf6:	680b      	ldr	r3, [r1, #0]
 801ecf8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ecfc:	1b1b      	subs	r3, r3, r4
 801ecfe:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801ed02:	ee07 3a10 	vmov	s14, r3
 801ed06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ed0a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ed0e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801ed12:	ee64 4a86 	vmul.f32	s9, s9, s12
 801ed16:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801ed1a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ed1c:	698b      	ldr	r3, [r1, #24]
 801ed1e:	1a9b      	subs	r3, r3, r2
 801ed20:	ee06 3a90 	vmov	s13, r3
 801ed24:	684b      	ldr	r3, [r1, #4]
 801ed26:	1a9b      	subs	r3, r3, r2
 801ed28:	ee07 3a10 	vmov	s14, r3
 801ed2c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ed30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ed34:	ee66 6a84 	vmul.f32	s13, s13, s8
 801ed38:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ed3c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801ed40:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ed44:	ee66 6a83 	vmul.f32	s13, s13, s6
 801ed48:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801ed4c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801ed4e:	694a      	ldr	r2, [r1, #20]
 801ed50:	1b13      	subs	r3, r2, r4
 801ed52:	ee07 3a10 	vmov	s14, r3
 801ed56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ed5a:	680b      	ldr	r3, [r1, #0]
 801ed5c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ed60:	1b1b      	subs	r3, r3, r4
 801ed62:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801ed66:	ee07 3a10 	vmov	s14, r3
 801ed6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ed6e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ed72:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ed76:	edd0 5a08 	vldr	s11, [r0, #32]
 801ed7a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801ed7e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801ed82:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801ed86:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801ed88:	698b      	ldr	r3, [r1, #24]
 801ed8a:	1a9b      	subs	r3, r3, r2
 801ed8c:	ee07 3a10 	vmov	s14, r3
 801ed90:	684b      	ldr	r3, [r1, #4]
 801ed92:	1a9b      	subs	r3, r3, r2
 801ed94:	ee01 3a90 	vmov	s3, r3
 801ed98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ed9c:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801eda0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801eda4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801eda8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801edac:	ee61 1a84 	vmul.f32	s3, s3, s8
 801edb0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801edb4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801edb8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801edbc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801edbe:	694a      	ldr	r2, [r1, #20]
 801edc0:	1b13      	subs	r3, r2, r4
 801edc2:	ee03 3a10 	vmov	s6, r3
 801edc6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801edca:	680b      	ldr	r3, [r1, #0]
 801edcc:	ee23 3a04 	vmul.f32	s6, s6, s8
 801edd0:	1b1b      	subs	r3, r3, r4
 801edd2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801edd6:	ee03 3a10 	vmov	s6, r3
 801edda:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801edde:	ee23 4a04 	vmul.f32	s8, s6, s8
 801ede2:	eee1 5a04 	vfma.f32	s11, s2, s8
 801ede6:	ee25 6a86 	vmul.f32	s12, s11, s12
 801edea:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801edee:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801edf2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801edf6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801edfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edfe:	dd13      	ble.n	801ee28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801ee00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ee04:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801ee08:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ee0a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801ee0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ee12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee16:	dd15      	ble.n	801ee44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801ee18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ee1c:	6403      	str	r3, [r0, #64]	; 0x40
 801ee1e:	bd70      	pop	{r4, r5, r6, pc}
 801ee20:	4623      	mov	r3, r4
 801ee22:	e6fd      	b.n	801ec20 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ee24:	462a      	mov	r2, r5
 801ee26:	e706      	b.n	801ec36 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ee28:	d502      	bpl.n	801ee30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801ee2a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ee2e:	e7e9      	b.n	801ee04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801ee30:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801ee34:	eea3 2a85 	vfma.f32	s4, s7, s10
 801ee38:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801ee3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee40:	dade      	bge.n	801ee00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801ee42:	e7f2      	b.n	801ee2a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801ee44:	d502      	bpl.n	801ee4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801ee46:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ee4a:	e7e7      	b.n	801ee1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801ee4c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801ee50:	eee3 4a86 	vfma.f32	s9, s7, s12
 801ee54:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801ee58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee5c:	dadc      	bge.n	801ee18 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801ee5e:	e7f2      	b.n	801ee46 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801ee60:	3d800000 	.word	0x3d800000

0801ee64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801ee64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee68:	f04f 0814 	mov.w	r8, #20
 801ee6c:	fb08 f903 	mul.w	r9, r8, r3
 801ee70:	eb02 0a09 	add.w	sl, r2, r9
 801ee74:	4604      	mov	r4, r0
 801ee76:	f8da 0004 	ldr.w	r0, [sl, #4]
 801ee7a:	4617      	mov	r7, r2
 801ee7c:	460d      	mov	r5, r1
 801ee7e:	461e      	mov	r6, r3
 801ee80:	f7ff fe88 	bl	801eb94 <_ZN8touchgfx8ceil28_4El>
 801ee84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee86:	6160      	str	r0, [r4, #20]
 801ee88:	fb08 f803 	mul.w	r8, r8, r3
 801ee8c:	eb07 0b08 	add.w	fp, r7, r8
 801ee90:	9001      	str	r0, [sp, #4]
 801ee92:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ee96:	f7ff fe7d 	bl	801eb94 <_ZN8touchgfx8ceil28_4El>
 801ee9a:	9a01      	ldr	r2, [sp, #4]
 801ee9c:	1a80      	subs	r0, r0, r2
 801ee9e:	61a0      	str	r0, [r4, #24]
 801eea0:	2800      	cmp	r0, #0
 801eea2:	f000 8088 	beq.w	801efb6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801eea6:	f857 3009 	ldr.w	r3, [r7, r9]
 801eeaa:	f857 c008 	ldr.w	ip, [r7, r8]
 801eeae:	f8da 1004 	ldr.w	r1, [sl, #4]
 801eeb2:	f8db 0004 	ldr.w	r0, [fp, #4]
 801eeb6:	ebac 0c03 	sub.w	ip, ip, r3
 801eeba:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801eebe:	fb0b f202 	mul.w	r2, fp, r2
 801eec2:	fb0c 2211 	mls	r2, ip, r1, r2
 801eec6:	1a40      	subs	r0, r0, r1
 801eec8:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801eecc:	fb00 2003 	mla	r0, r0, r3, r2
 801eed0:	3801      	subs	r0, #1
 801eed2:	f104 0310 	add.w	r3, r4, #16
 801eed6:	4622      	mov	r2, r4
 801eed8:	4641      	mov	r1, r8
 801eeda:	4440      	add	r0, r8
 801eedc:	f7ff fe6a 	bl	801ebb4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801eee0:	f104 0308 	add.w	r3, r4, #8
 801eee4:	1d22      	adds	r2, r4, #4
 801eee6:	4641      	mov	r1, r8
 801eee8:	4658      	mov	r0, fp
 801eeea:	f7ff fe63 	bl	801ebb4 <_ZN8touchgfx11floorDivModEllRlS0_>
 801eeee:	f8c4 800c 	str.w	r8, [r4, #12]
 801eef2:	f8da 3004 	ldr.w	r3, [sl, #4]
 801eef6:	6962      	ldr	r2, [r4, #20]
 801eef8:	eddf 6a31 	vldr	s13, [pc, #196]	; 801efc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801eefc:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ef00:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801ef04:	ee07 3a10 	vmov	s14, r3
 801ef08:	6822      	ldr	r2, [r4, #0]
 801ef0a:	f857 3009 	ldr.w	r3, [r7, r9]
 801ef0e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801ef12:	ee07 3a90 	vmov	s15, r3
 801ef16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ef1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef1e:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801ef22:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ef26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ef2a:	edd3 6a00 	vldr	s13, [r3]
 801ef2e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ef32:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ef36:	eee6 6a27 	vfma.f32	s13, s12, s15
 801ef3a:	edc4 6a07 	vstr	s13, [r4, #28]
 801ef3e:	edd4 6a01 	vldr	s13, [r4, #4]
 801ef42:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801ef46:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ef4a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ef4e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ef52:	ed84 6a08 	vstr	s12, [r4, #32]
 801ef56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801ef58:	6262      	str	r2, [r4, #36]	; 0x24
 801ef5a:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801ef5e:	ed93 6a03 	vldr	s12, [r3, #12]
 801ef62:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ef66:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ef6a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ef6e:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801ef72:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ef76:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801ef7a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ef7e:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801ef82:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801ef84:	6322      	str	r2, [r4, #48]	; 0x30
 801ef86:	ed93 6a06 	vldr	s12, [r3, #24]
 801ef8a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801ef8e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ef92:	eeb0 7a46 	vmov.f32	s14, s12
 801ef96:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801ef9a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ef9e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801efa2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801efa6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801efaa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801efae:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801efb2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801efb4:	63e3      	str	r3, [r4, #60]	; 0x3c
 801efb6:	4620      	mov	r0, r4
 801efb8:	b003      	add	sp, #12
 801efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efbe:	bf00      	nop
 801efc0:	3d800000 	.word	0x3d800000

0801efc4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801efc4:	4602      	mov	r2, r0
 801efc6:	b148      	cbz	r0, 801efdc <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801efc8:	2300      	movs	r3, #0
 801efca:	b298      	uxth	r0, r3
 801efcc:	3301      	adds	r3, #1
 801efce:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801efd2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801efd6:	2900      	cmp	r1, #0
 801efd8:	d1f7      	bne.n	801efca <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801efda:	4770      	bx	lr
 801efdc:	4770      	bx	lr

0801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801efde:	b530      	push	{r4, r5, lr}
 801efe0:	4604      	mov	r4, r0
 801efe2:	b159      	cbz	r1, 801effc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801efe4:	b148      	cbz	r0, 801effa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801efe6:	2300      	movs	r3, #0
 801efe8:	b298      	uxth	r0, r3
 801efea:	4282      	cmp	r2, r0
 801efec:	d905      	bls.n	801effa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801efee:	5ccd      	ldrb	r5, [r1, r3]
 801eff0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801eff4:	3301      	adds	r3, #1
 801eff6:	2d00      	cmp	r5, #0
 801eff8:	d1f6      	bne.n	801efe8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801effa:	bd30      	pop	{r4, r5, pc}
 801effc:	4608      	mov	r0, r1
 801effe:	e7fc      	b.n	801effa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801f000 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801f000:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f002:	b08b      	sub	sp, #44	; 0x2c
 801f004:	468c      	mov	ip, r1
 801f006:	2100      	movs	r1, #0
 801f008:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801f00c:	ae01      	add	r6, sp, #4
 801f00e:	211f      	movs	r1, #31
 801f010:	fbb0 f7f3 	udiv	r7, r0, r3
 801f014:	fb03 0517 	mls	r5, r3, r7, r0
 801f018:	b2ec      	uxtb	r4, r5
 801f01a:	2d09      	cmp	r5, #9
 801f01c:	bfd4      	ite	le
 801f01e:	3430      	addle	r4, #48	; 0x30
 801f020:	3457      	addgt	r4, #87	; 0x57
 801f022:	b2e4      	uxtb	r4, r4
 801f024:	558c      	strb	r4, [r1, r6]
 801f026:	4638      	mov	r0, r7
 801f028:	1e4c      	subs	r4, r1, #1
 801f02a:	b92f      	cbnz	r7, 801f038 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801f02c:	4431      	add	r1, r6
 801f02e:	4660      	mov	r0, ip
 801f030:	f7ff ffd5 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801f034:	b00b      	add	sp, #44	; 0x2c
 801f036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f038:	4621      	mov	r1, r4
 801f03a:	e7e9      	b.n	801f010 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801f03c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801f03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f03e:	4607      	mov	r7, r0
 801f040:	b08b      	sub	sp, #44	; 0x2c
 801f042:	4608      	mov	r0, r1
 801f044:	b341      	cbz	r1, 801f098 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801f046:	1e99      	subs	r1, r3, #2
 801f048:	2922      	cmp	r1, #34	; 0x22
 801f04a:	d825      	bhi.n	801f098 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801f04c:	2100      	movs	r1, #0
 801f04e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801f052:	463c      	mov	r4, r7
 801f054:	261f      	movs	r6, #31
 801f056:	f10d 0c04 	add.w	ip, sp, #4
 801f05a:	fb94 fef3 	sdiv	lr, r4, r3
 801f05e:	fb03 441e 	mls	r4, r3, lr, r4
 801f062:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801f066:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801f06a:	b2ec      	uxtb	r4, r5
 801f06c:	2d09      	cmp	r5, #9
 801f06e:	bfd4      	ite	le
 801f070:	3430      	addle	r4, #48	; 0x30
 801f072:	3457      	addgt	r4, #87	; 0x57
 801f074:	b2e4      	uxtb	r4, r4
 801f076:	f80c 4006 	strb.w	r4, [ip, r6]
 801f07a:	4674      	mov	r4, lr
 801f07c:	1e71      	subs	r1, r6, #1
 801f07e:	b96c      	cbnz	r4, 801f09c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801f080:	2f00      	cmp	r7, #0
 801f082:	da05      	bge.n	801f090 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801f084:	ab0a      	add	r3, sp, #40	; 0x28
 801f086:	4419      	add	r1, r3
 801f088:	232d      	movs	r3, #45	; 0x2d
 801f08a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801f08e:	1eb1      	subs	r1, r6, #2
 801f090:	3101      	adds	r1, #1
 801f092:	4461      	add	r1, ip
 801f094:	f7ff ffa3 	bl	801efde <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801f098:	b00b      	add	sp, #44	; 0x2c
 801f09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f09c:	460e      	mov	r6, r1
 801f09e:	e7dc      	b.n	801f05a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801f0a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0a4:	4691      	mov	r9, r2
 801f0a6:	b085      	sub	sp, #20
 801f0a8:	6802      	ldr	r2, [r0, #0]
 801f0aa:	9201      	str	r2, [sp, #4]
 801f0ac:	4688      	mov	r8, r1
 801f0ae:	4683      	mov	fp, r0
 801f0b0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801f0b4:	9103      	str	r1, [sp, #12]
 801f0b6:	4610      	mov	r0, r2
 801f0b8:	461c      	mov	r4, r3
 801f0ba:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801f0be:	9302      	str	r3, [sp, #8]
 801f0c0:	f7ff ff80 	bl	801efc4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801f0c4:	f1b8 0f00 	cmp.w	r8, #0
 801f0c8:	bf0c      	ite	eq
 801f0ca:	4684      	moveq	ip, r0
 801f0cc:	f100 0c01 	addne.w	ip, r0, #1
 801f0d0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801f0d4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801f0d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f0da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f0dc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801f0e0:	9903      	ldr	r1, [sp, #12]
 801f0e2:	fa1f fc8c 	uxth.w	ip, ip
 801f0e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801f0ea:	d041      	beq.n	801f170 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801f0ec:	d834      	bhi.n	801f158 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801f0ee:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801f0f2:	d059      	beq.n	801f1a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801f0f4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801f0f8:	d03a      	beq.n	801f170 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801f0fa:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801f0fe:	d034      	beq.n	801f16a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801f100:	2400      	movs	r4, #0
 801f102:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801f106:	3a01      	subs	r2, #1
 801f108:	b169      	cbz	r1, 801f126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801f10a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801f10c:	458c      	cmp	ip, r1
 801f10e:	da09      	bge.n	801f124 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801f110:	eba1 010c 	sub.w	r1, r1, ip
 801f114:	b289      	uxth	r1, r1
 801f116:	b933      	cbnz	r3, 801f126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801f118:	2e00      	cmp	r6, #0
 801f11a:	d051      	beq.n	801f1c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801f11c:	2800      	cmp	r0, #0
 801f11e:	d04f      	beq.n	801f1c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801f120:	440c      	add	r4, r1
 801f122:	b2a4      	uxth	r4, r4
 801f124:	2100      	movs	r1, #0
 801f126:	682b      	ldr	r3, [r5, #0]
 801f128:	4293      	cmp	r3, r2
 801f12a:	da07      	bge.n	801f13c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801f12c:	f1b8 0f00 	cmp.w	r8, #0
 801f130:	d004      	beq.n	801f13c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801f132:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801f136:	682b      	ldr	r3, [r5, #0]
 801f138:	3301      	adds	r3, #1
 801f13a:	602b      	str	r3, [r5, #0]
 801f13c:	2730      	movs	r7, #48	; 0x30
 801f13e:	2c00      	cmp	r4, #0
 801f140:	d04e      	beq.n	801f1e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801f142:	682e      	ldr	r6, [r5, #0]
 801f144:	3c01      	subs	r4, #1
 801f146:	42b2      	cmp	r2, r6
 801f148:	b2a4      	uxth	r4, r4
 801f14a:	dd49      	ble.n	801f1e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801f14c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801f150:	682b      	ldr	r3, [r5, #0]
 801f152:	3301      	adds	r3, #1
 801f154:	602b      	str	r3, [r5, #0]
 801f156:	e7f2      	b.n	801f13e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801f158:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801f15c:	d01d      	beq.n	801f19a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801f15e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801f162:	d002      	beq.n	801f16a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801f164:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801f168:	e7c9      	b.n	801f0fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801f16a:	4684      	mov	ip, r0
 801f16c:	f04f 0800 	mov.w	r8, #0
 801f170:	2c00      	cmp	r4, #0
 801f172:	d0c6      	beq.n	801f102 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801f174:	b947      	cbnz	r7, 801f188 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801f176:	2801      	cmp	r0, #1
 801f178:	d106      	bne.n	801f188 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801f17a:	8814      	ldrh	r4, [r2, #0]
 801f17c:	2c30      	cmp	r4, #48	; 0x30
 801f17e:	bf02      	ittt	eq
 801f180:	3202      	addeq	r2, #2
 801f182:	f8cb 2000 	streq.w	r2, [fp]
 801f186:	4638      	moveq	r0, r7
 801f188:	45bc      	cmp	ip, r7
 801f18a:	da14      	bge.n	801f1b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801f18c:	b2bf      	uxth	r7, r7
 801f18e:	eba7 040c 	sub.w	r4, r7, ip
 801f192:	b2a4      	uxth	r4, r4
 801f194:	46bc      	mov	ip, r7
 801f196:	2600      	movs	r6, #0
 801f198:	e7b3      	b.n	801f102 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801f19a:	4684      	mov	ip, r0
 801f19c:	b16c      	cbz	r4, 801f1ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801f19e:	42b8      	cmp	r0, r7
 801f1a0:	dd00      	ble.n	801f1a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801f1a2:	b2b8      	uxth	r0, r7
 801f1a4:	2400      	movs	r4, #0
 801f1a6:	e003      	b.n	801f1b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801f1a8:	f04f 0c01 	mov.w	ip, #1
 801f1ac:	2400      	movs	r4, #0
 801f1ae:	4660      	mov	r0, ip
 801f1b0:	4626      	mov	r6, r4
 801f1b2:	46a0      	mov	r8, r4
 801f1b4:	e7a5      	b.n	801f102 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801f1b6:	2400      	movs	r4, #0
 801f1b8:	e7ed      	b.n	801f196 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801f1ba:	4626      	mov	r6, r4
 801f1bc:	46a0      	mov	r8, r4
 801f1be:	e7a0      	b.n	801f102 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801f1c0:	2900      	cmp	r1, #0
 801f1c2:	d0b0      	beq.n	801f126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801f1c4:	2720      	movs	r7, #32
 801f1c6:	682e      	ldr	r6, [r5, #0]
 801f1c8:	2900      	cmp	r1, #0
 801f1ca:	d0ac      	beq.n	801f126 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801f1cc:	3901      	subs	r1, #1
 801f1ce:	4296      	cmp	r6, r2
 801f1d0:	b289      	uxth	r1, r1
 801f1d2:	daa7      	bge.n	801f124 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801f1d4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801f1d8:	682b      	ldr	r3, [r5, #0]
 801f1da:	3301      	adds	r3, #1
 801f1dc:	602b      	str	r3, [r5, #0]
 801f1de:	e7f2      	b.n	801f1c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801f1e0:	b188      	cbz	r0, 801f206 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801f1e2:	682b      	ldr	r3, [r5, #0]
 801f1e4:	3801      	subs	r0, #1
 801f1e6:	429a      	cmp	r2, r3
 801f1e8:	b280      	uxth	r0, r0
 801f1ea:	dd0c      	ble.n	801f206 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801f1ec:	f8db 3000 	ldr.w	r3, [fp]
 801f1f0:	1c9c      	adds	r4, r3, #2
 801f1f2:	f8cb 4000 	str.w	r4, [fp]
 801f1f6:	881c      	ldrh	r4, [r3, #0]
 801f1f8:	682b      	ldr	r3, [r5, #0]
 801f1fa:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801f1fe:	682b      	ldr	r3, [r5, #0]
 801f200:	3301      	adds	r3, #1
 801f202:	602b      	str	r3, [r5, #0]
 801f204:	e7ec      	b.n	801f1e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801f206:	2620      	movs	r6, #32
 801f208:	b151      	cbz	r1, 801f220 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801f20a:	6828      	ldr	r0, [r5, #0]
 801f20c:	3901      	subs	r1, #1
 801f20e:	4282      	cmp	r2, r0
 801f210:	b289      	uxth	r1, r1
 801f212:	dd05      	ble.n	801f220 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801f214:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801f218:	682b      	ldr	r3, [r5, #0]
 801f21a:	3301      	adds	r3, #1
 801f21c:	602b      	str	r3, [r5, #0]
 801f21e:	e7f3      	b.n	801f208 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801f220:	b005      	add	sp, #20
 801f222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f226 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801f226:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f22a:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801f22e:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801f232:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801f236:	2400      	movs	r4, #0
 801f238:	8014      	strh	r4, [r2, #0]
 801f23a:	701c      	strb	r4, [r3, #0]
 801f23c:	f888 4000 	strb.w	r4, [r8]
 801f240:	f88c 4000 	strb.w	r4, [ip]
 801f244:	f88e 4000 	strb.w	r4, [lr]
 801f248:	703c      	strb	r4, [r7, #0]
 801f24a:	6804      	ldr	r4, [r0, #0]
 801f24c:	b1a4      	cbz	r4, 801f278 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801f24e:	8824      	ldrh	r4, [r4, #0]
 801f250:	f04f 0901 	mov.w	r9, #1
 801f254:	b314      	cbz	r4, 801f29c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801f256:	2c2b      	cmp	r4, #43	; 0x2b
 801f258:	d001      	beq.n	801f25e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801f25a:	2c20      	cmp	r4, #32
 801f25c:	d110      	bne.n	801f280 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801f25e:	8014      	strh	r4, [r2, #0]
 801f260:	6804      	ldr	r4, [r0, #0]
 801f262:	b10c      	cbz	r4, 801f268 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801f264:	3402      	adds	r4, #2
 801f266:	6004      	str	r4, [r0, #0]
 801f268:	680c      	ldr	r4, [r1, #0]
 801f26a:	b10c      	cbz	r4, 801f270 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801f26c:	3401      	adds	r4, #1
 801f26e:	600c      	str	r4, [r1, #0]
 801f270:	6804      	ldr	r4, [r0, #0]
 801f272:	b17c      	cbz	r4, 801f294 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801f274:	8824      	ldrh	r4, [r4, #0]
 801f276:	e7ed      	b.n	801f254 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801f278:	680c      	ldr	r4, [r1, #0]
 801f27a:	b17c      	cbz	r4, 801f29c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801f27c:	7824      	ldrb	r4, [r4, #0]
 801f27e:	e7e7      	b.n	801f250 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801f280:	2c2d      	cmp	r4, #45	; 0x2d
 801f282:	d102      	bne.n	801f28a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801f284:	f883 9000 	strb.w	r9, [r3]
 801f288:	e7ea      	b.n	801f260 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801f28a:	2c23      	cmp	r4, #35	; 0x23
 801f28c:	d107      	bne.n	801f29e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801f28e:	f888 9000 	strb.w	r9, [r8]
 801f292:	e7e5      	b.n	801f260 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801f294:	680c      	ldr	r4, [r1, #0]
 801f296:	b10c      	cbz	r4, 801f29c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801f298:	7824      	ldrb	r4, [r4, #0]
 801f29a:	e7db      	b.n	801f254 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801f29c:	2400      	movs	r4, #0
 801f29e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801f2a2:	2b09      	cmp	r3, #9
 801f2a4:	d901      	bls.n	801f2aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801f2a6:	2c2a      	cmp	r4, #42	; 0x2a
 801f2a8:	d122      	bne.n	801f2f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801f2aa:	2301      	movs	r3, #1
 801f2ac:	2c30      	cmp	r4, #48	; 0x30
 801f2ae:	f88e 3000 	strb.w	r3, [lr]
 801f2b2:	d10d      	bne.n	801f2d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801f2b4:	f88c 3000 	strb.w	r3, [ip]
 801f2b8:	6803      	ldr	r3, [r0, #0]
 801f2ba:	b10b      	cbz	r3, 801f2c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801f2bc:	3302      	adds	r3, #2
 801f2be:	6003      	str	r3, [r0, #0]
 801f2c0:	680b      	ldr	r3, [r1, #0]
 801f2c2:	b10b      	cbz	r3, 801f2c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801f2c4:	3301      	adds	r3, #1
 801f2c6:	600b      	str	r3, [r1, #0]
 801f2c8:	6803      	ldr	r3, [r0, #0]
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d02f      	beq.n	801f32e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801f2ce:	881c      	ldrh	r4, [r3, #0]
 801f2d0:	2c2a      	cmp	r4, #42	; 0x2a
 801f2d2:	d135      	bne.n	801f340 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801f2d4:	f04f 33ff 	mov.w	r3, #4294967295
 801f2d8:	6033      	str	r3, [r6, #0]
 801f2da:	6803      	ldr	r3, [r0, #0]
 801f2dc:	b10b      	cbz	r3, 801f2e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801f2de:	3302      	adds	r3, #2
 801f2e0:	6003      	str	r3, [r0, #0]
 801f2e2:	680b      	ldr	r3, [r1, #0]
 801f2e4:	b10b      	cbz	r3, 801f2ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801f2e6:	3301      	adds	r3, #1
 801f2e8:	600b      	str	r3, [r1, #0]
 801f2ea:	6803      	ldr	r3, [r0, #0]
 801f2ec:	b31b      	cbz	r3, 801f336 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801f2ee:	881c      	ldrh	r4, [r3, #0]
 801f2f0:	2c2e      	cmp	r4, #46	; 0x2e
 801f2f2:	d11a      	bne.n	801f32a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801f2f4:	2301      	movs	r3, #1
 801f2f6:	703b      	strb	r3, [r7, #0]
 801f2f8:	6803      	ldr	r3, [r0, #0]
 801f2fa:	b10b      	cbz	r3, 801f300 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801f2fc:	3302      	adds	r3, #2
 801f2fe:	6003      	str	r3, [r0, #0]
 801f300:	680b      	ldr	r3, [r1, #0]
 801f302:	b10b      	cbz	r3, 801f308 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801f304:	3301      	adds	r3, #1
 801f306:	600b      	str	r3, [r1, #0]
 801f308:	6803      	ldr	r3, [r0, #0]
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d036      	beq.n	801f37c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801f30e:	881b      	ldrh	r3, [r3, #0]
 801f310:	2b2a      	cmp	r3, #42	; 0x2a
 801f312:	d137      	bne.n	801f384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801f314:	f04f 33ff 	mov.w	r3, #4294967295
 801f318:	602b      	str	r3, [r5, #0]
 801f31a:	6803      	ldr	r3, [r0, #0]
 801f31c:	b10b      	cbz	r3, 801f322 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801f31e:	3302      	adds	r3, #2
 801f320:	6003      	str	r3, [r0, #0]
 801f322:	680b      	ldr	r3, [r1, #0]
 801f324:	b10b      	cbz	r3, 801f32a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801f326:	3301      	adds	r3, #1
 801f328:	600b      	str	r3, [r1, #0]
 801f32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f32e:	680c      	ldr	r4, [r1, #0]
 801f330:	b134      	cbz	r4, 801f340 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801f332:	7824      	ldrb	r4, [r4, #0]
 801f334:	e7cc      	b.n	801f2d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801f336:	680b      	ldr	r3, [r1, #0]
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d0f6      	beq.n	801f32a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801f33c:	781c      	ldrb	r4, [r3, #0]
 801f33e:	e7d7      	b.n	801f2f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801f340:	2300      	movs	r3, #0
 801f342:	6033      	str	r3, [r6, #0]
 801f344:	220a      	movs	r2, #10
 801f346:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f34a:	fa1f f38c 	uxth.w	r3, ip
 801f34e:	2b09      	cmp	r3, #9
 801f350:	d8ce      	bhi.n	801f2f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801f352:	6833      	ldr	r3, [r6, #0]
 801f354:	fb02 c303 	mla	r3, r2, r3, ip
 801f358:	6033      	str	r3, [r6, #0]
 801f35a:	6803      	ldr	r3, [r0, #0]
 801f35c:	b10b      	cbz	r3, 801f362 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801f35e:	3302      	adds	r3, #2
 801f360:	6003      	str	r3, [r0, #0]
 801f362:	680b      	ldr	r3, [r1, #0]
 801f364:	b10b      	cbz	r3, 801f36a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801f366:	3301      	adds	r3, #1
 801f368:	600b      	str	r3, [r1, #0]
 801f36a:	6803      	ldr	r3, [r0, #0]
 801f36c:	b10b      	cbz	r3, 801f372 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801f36e:	881c      	ldrh	r4, [r3, #0]
 801f370:	e7e9      	b.n	801f346 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f372:	680c      	ldr	r4, [r1, #0]
 801f374:	2c00      	cmp	r4, #0
 801f376:	d0e6      	beq.n	801f346 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f378:	7824      	ldrb	r4, [r4, #0]
 801f37a:	e7e4      	b.n	801f346 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801f37c:	680b      	ldr	r3, [r1, #0]
 801f37e:	b10b      	cbz	r3, 801f384 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801f380:	781b      	ldrb	r3, [r3, #0]
 801f382:	e7c5      	b.n	801f310 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801f384:	2200      	movs	r2, #0
 801f386:	602a      	str	r2, [r5, #0]
 801f388:	240a      	movs	r4, #10
 801f38a:	3b30      	subs	r3, #48	; 0x30
 801f38c:	b29e      	uxth	r6, r3
 801f38e:	2e09      	cmp	r6, #9
 801f390:	682a      	ldr	r2, [r5, #0]
 801f392:	d813      	bhi.n	801f3bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801f394:	fb04 3302 	mla	r3, r4, r2, r3
 801f398:	602b      	str	r3, [r5, #0]
 801f39a:	6803      	ldr	r3, [r0, #0]
 801f39c:	b10b      	cbz	r3, 801f3a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801f39e:	3302      	adds	r3, #2
 801f3a0:	6003      	str	r3, [r0, #0]
 801f3a2:	680b      	ldr	r3, [r1, #0]
 801f3a4:	b10b      	cbz	r3, 801f3aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801f3a6:	3301      	adds	r3, #1
 801f3a8:	600b      	str	r3, [r1, #0]
 801f3aa:	6803      	ldr	r3, [r0, #0]
 801f3ac:	b10b      	cbz	r3, 801f3b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801f3ae:	881b      	ldrh	r3, [r3, #0]
 801f3b0:	e7eb      	b.n	801f38a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f3b2:	680b      	ldr	r3, [r1, #0]
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	d0e8      	beq.n	801f38a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f3b8:	781b      	ldrb	r3, [r3, #0]
 801f3ba:	e7e6      	b.n	801f38a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801f3bc:	2a06      	cmp	r2, #6
 801f3be:	bfa8      	it	ge
 801f3c0:	2206      	movge	r2, #6
 801f3c2:	602a      	str	r2, [r5, #0]
 801f3c4:	e7b1      	b.n	801f32a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801f3c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801f3c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3ca:	b0a3      	sub	sp, #140	; 0x8c
 801f3cc:	2600      	movs	r6, #0
 801f3ce:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801f3d2:	4607      	mov	r7, r0
 801f3d4:	4688      	mov	r8, r1
 801f3d6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f3da:	4631      	mov	r1, r6
 801f3dc:	2242      	movs	r2, #66	; 0x42
 801f3de:	4648      	mov	r0, r9
 801f3e0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801f3e2:	960d      	str	r6, [sp, #52]	; 0x34
 801f3e4:	f00f f8a4 	bl	802e530 <memset>
 801f3e8:	b15f      	cbz	r7, 801f402 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801f3ea:	f108 3aff 	add.w	sl, r8, #4294967295
 801f3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f3f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f3f2:	b152      	cbz	r2, 801f40a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801f3f4:	8812      	ldrh	r2, [r2, #0]
 801f3f6:	b10a      	cbz	r2, 801f3fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f3f8:	459a      	cmp	sl, r3
 801f3fa:	dc2e      	bgt.n	801f45a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801f3fc:	2200      	movs	r2, #0
 801f3fe:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f402:	4638      	mov	r0, r7
 801f404:	b023      	add	sp, #140	; 0x8c
 801f406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f40a:	9a08      	ldr	r2, [sp, #32]
 801f40c:	2a00      	cmp	r2, #0
 801f40e:	d0f5      	beq.n	801f3fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f410:	7812      	ldrb	r2, [r2, #0]
 801f412:	e7f0      	b.n	801f3f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801f414:	2d00      	cmp	r5, #0
 801f416:	d0ea      	beq.n	801f3ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f418:	782a      	ldrb	r2, [r5, #0]
 801f41a:	b142      	cbz	r2, 801f42e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801f41c:	2a25      	cmp	r2, #37	; 0x25
 801f41e:	d001      	beq.n	801f424 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801f420:	459a      	cmp	sl, r3
 801f422:	dc08      	bgt.n	801f436 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801f424:	f1bb 0f00 	cmp.w	fp, #0
 801f428:	d121      	bne.n	801f46e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801f42a:	2d00      	cmp	r5, #0
 801f42c:	d0df      	beq.n	801f3ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f42e:	782a      	ldrb	r2, [r5, #0]
 801f430:	f04f 0b00 	mov.w	fp, #0
 801f434:	e01d      	b.n	801f472 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801f436:	f1bb 0f00 	cmp.w	fp, #0
 801f43a:	d078      	beq.n	801f52e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801f43c:	f8bb 2000 	ldrh.w	r2, [fp]
 801f440:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f444:	f1bb 0f00 	cmp.w	fp, #0
 801f448:	d002      	beq.n	801f450 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801f44a:	f10b 0202 	add.w	r2, fp, #2
 801f44e:	9209      	str	r2, [sp, #36]	; 0x24
 801f450:	b10d      	cbz	r5, 801f456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801f452:	3501      	adds	r5, #1
 801f454:	9508      	str	r5, [sp, #32]
 801f456:	3301      	adds	r3, #1
 801f458:	930d      	str	r3, [sp, #52]	; 0x34
 801f45a:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801f45e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f460:	f1bb 0f00 	cmp.w	fp, #0
 801f464:	d0d6      	beq.n	801f414 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801f466:	f8bb 2000 	ldrh.w	r2, [fp]
 801f46a:	2a00      	cmp	r2, #0
 801f46c:	d1d6      	bne.n	801f41c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801f46e:	f8bb 2000 	ldrh.w	r2, [fp]
 801f472:	2a00      	cmp	r2, #0
 801f474:	d0bb      	beq.n	801f3ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f476:	459a      	cmp	sl, r3
 801f478:	ddb9      	ble.n	801f3ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f47a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801f47e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801f482:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801f486:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801f48a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801f48e:	960e      	str	r6, [sp, #56]	; 0x38
 801f490:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801f494:	960f      	str	r6, [sp, #60]	; 0x3c
 801f496:	f1bb 0f00 	cmp.w	fp, #0
 801f49a:	d002      	beq.n	801f4a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801f49c:	f10b 0302 	add.w	r3, fp, #2
 801f4a0:	9309      	str	r3, [sp, #36]	; 0x24
 801f4a2:	b10d      	cbz	r5, 801f4a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801f4a4:	1c6b      	adds	r3, r5, #1
 801f4a6:	9308      	str	r3, [sp, #32]
 801f4a8:	ab0f      	add	r3, sp, #60	; 0x3c
 801f4aa:	9305      	str	r3, [sp, #20]
 801f4ac:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801f4b0:	9304      	str	r3, [sp, #16]
 801f4b2:	ab0e      	add	r3, sp, #56	; 0x38
 801f4b4:	9303      	str	r3, [sp, #12]
 801f4b6:	ab0c      	add	r3, sp, #48	; 0x30
 801f4b8:	9302      	str	r3, [sp, #8]
 801f4ba:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801f4be:	9301      	str	r3, [sp, #4]
 801f4c0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801f4c4:	9300      	str	r3, [sp, #0]
 801f4c6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801f4ca:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801f4ce:	a908      	add	r1, sp, #32
 801f4d0:	a809      	add	r0, sp, #36	; 0x24
 801f4d2:	f7ff fea8 	bl	801f226 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801f4d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4d8:	2b00      	cmp	r3, #0
 801f4da:	bfbe      	ittt	lt
 801f4dc:	6823      	ldrlt	r3, [r4, #0]
 801f4de:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f4e2:	930e      	strlt	r3, [sp, #56]	; 0x38
 801f4e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f4e6:	bfb8      	it	lt
 801f4e8:	3404      	addlt	r4, #4
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	bfb8      	it	lt
 801f4ee:	6823      	ldrlt	r3, [r4, #0]
 801f4f0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f4f4:	bfbe      	ittt	lt
 801f4f6:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f4fa:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801f4fc:	3404      	addlt	r4, #4
 801f4fe:	b1d9      	cbz	r1, 801f538 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801f500:	880b      	ldrh	r3, [r1, #0]
 801f502:	2b69      	cmp	r3, #105	; 0x69
 801f504:	d01f      	beq.n	801f546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f506:	d82f      	bhi.n	801f568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801f508:	2b58      	cmp	r3, #88	; 0x58
 801f50a:	d01c      	beq.n	801f546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f50c:	d818      	bhi.n	801f540 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801f50e:	2b25      	cmp	r3, #37	; 0x25
 801f510:	d034      	beq.n	801f57c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801f512:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801f516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f518:	f1bb 0f00 	cmp.w	fp, #0
 801f51c:	f000 80b8 	beq.w	801f690 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801f520:	f8bb 5000 	ldrh.w	r5, [fp]
 801f524:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801f528:	3301      	adds	r3, #1
 801f52a:	930d      	str	r3, [sp, #52]	; 0x34
 801f52c:	e029      	b.n	801f582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801f52e:	b10d      	cbz	r5, 801f534 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801f530:	782a      	ldrb	r2, [r5, #0]
 801f532:	e785      	b.n	801f440 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f534:	462a      	mov	r2, r5
 801f536:	e783      	b.n	801f440 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f538:	2a00      	cmp	r2, #0
 801f53a:	d0ea      	beq.n	801f512 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f53c:	7813      	ldrb	r3, [r2, #0]
 801f53e:	e7e0      	b.n	801f502 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801f540:	3b63      	subs	r3, #99	; 0x63
 801f542:	2b01      	cmp	r3, #1
 801f544:	d8e5      	bhi.n	801f512 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f546:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801f54a:	b329      	cbz	r1, 801f598 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801f54c:	880b      	ldrh	r3, [r1, #0]
 801f54e:	2b69      	cmp	r3, #105	; 0x69
 801f550:	d063      	beq.n	801f61a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801f552:	d825      	bhi.n	801f5a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801f554:	2b63      	cmp	r3, #99	; 0x63
 801f556:	d038      	beq.n	801f5ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801f558:	2b64      	cmp	r3, #100	; 0x64
 801f55a:	d05e      	beq.n	801f61a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801f55c:	2b58      	cmp	r3, #88	; 0x58
 801f55e:	d07b      	beq.n	801f658 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801f560:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801f564:	4625      	mov	r5, r4
 801f566:	e036      	b.n	801f5d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f568:	2b73      	cmp	r3, #115	; 0x73
 801f56a:	d0ec      	beq.n	801f546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f56c:	d802      	bhi.n	801f574 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801f56e:	2b6f      	cmp	r3, #111	; 0x6f
 801f570:	d1cf      	bne.n	801f512 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f572:	e7e8      	b.n	801f546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f574:	2b75      	cmp	r3, #117	; 0x75
 801f576:	d0e6      	beq.n	801f546 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f578:	2b78      	cmp	r3, #120	; 0x78
 801f57a:	e7f9      	b.n	801f570 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801f57c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f57e:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801f582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f584:	b10b      	cbz	r3, 801f58a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801f586:	3302      	adds	r3, #2
 801f588:	9309      	str	r3, [sp, #36]	; 0x24
 801f58a:	9b08      	ldr	r3, [sp, #32]
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	f43f af2e 	beq.w	801f3ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f592:	3301      	adds	r3, #1
 801f594:	9308      	str	r3, [sp, #32]
 801f596:	e72a      	b.n	801f3ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f598:	2a00      	cmp	r2, #0
 801f59a:	d0e1      	beq.n	801f560 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f59c:	7813      	ldrb	r3, [r2, #0]
 801f59e:	e7d6      	b.n	801f54e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801f5a0:	2b73      	cmp	r3, #115	; 0x73
 801f5a2:	d036      	beq.n	801f612 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801f5a4:	d807      	bhi.n	801f5b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801f5a6:	2b6f      	cmp	r3, #111	; 0x6f
 801f5a8:	d1da      	bne.n	801f560 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f5aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f5ac:	1d25      	adds	r5, r4, #4
 801f5ae:	eba8 0202 	sub.w	r2, r8, r2
 801f5b2:	2308      	movs	r3, #8
 801f5b4:	e04a      	b.n	801f64c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801f5b6:	2b75      	cmp	r3, #117	; 0x75
 801f5b8:	d043      	beq.n	801f642 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801f5ba:	2b78      	cmp	r3, #120	; 0x78
 801f5bc:	d1d0      	bne.n	801f560 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f5be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f5c0:	1d25      	adds	r5, r4, #4
 801f5c2:	eba8 0202 	sub.w	r2, r8, r2
 801f5c6:	2310      	movs	r3, #16
 801f5c8:	e040      	b.n	801f64c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801f5ca:	7823      	ldrb	r3, [r4, #0]
 801f5cc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801f5d0:	1d25      	adds	r5, r4, #4
 801f5d2:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801f5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5d8:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d052      	beq.n	801f686 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801f5e0:	881a      	ldrh	r2, [r3, #0]
 801f5e2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801f5e6:	a80d      	add	r0, sp, #52	; 0x34
 801f5e8:	9005      	str	r0, [sp, #20]
 801f5ea:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801f5ee:	9004      	str	r0, [sp, #16]
 801f5f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f5f2:	9003      	str	r0, [sp, #12]
 801f5f4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801f5f8:	9002      	str	r0, [sp, #8]
 801f5fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f5fc:	9001      	str	r0, [sp, #4]
 801f5fe:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801f602:	9000      	str	r0, [sp, #0]
 801f604:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801f608:	a810      	add	r0, sp, #64	; 0x40
 801f60a:	f7ff fd49 	bl	801f0a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801f60e:	462c      	mov	r4, r5
 801f610:	e7b7      	b.n	801f582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801f612:	6823      	ldr	r3, [r4, #0]
 801f614:	1d25      	adds	r5, r4, #4
 801f616:	9310      	str	r3, [sp, #64]	; 0x40
 801f618:	e7dd      	b.n	801f5d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f61a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f61c:	6820      	ldr	r0, [r4, #0]
 801f61e:	eba8 0202 	sub.w	r2, r8, r2
 801f622:	230a      	movs	r3, #10
 801f624:	b292      	uxth	r2, r2
 801f626:	4649      	mov	r1, r9
 801f628:	f7ff fd08 	bl	801f03c <_ZN8touchgfx7Unicode4itoaElPtti>
 801f62c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801f630:	2b2d      	cmp	r3, #45	; 0x2d
 801f632:	f104 0504 	add.w	r5, r4, #4
 801f636:	d1ce      	bne.n	801f5d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f638:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f63c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f63e:	3302      	adds	r3, #2
 801f640:	e7e9      	b.n	801f616 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801f642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f644:	1d25      	adds	r5, r4, #4
 801f646:	eba8 0202 	sub.w	r2, r8, r2
 801f64a:	230a      	movs	r3, #10
 801f64c:	b292      	uxth	r2, r2
 801f64e:	4649      	mov	r1, r9
 801f650:	6820      	ldr	r0, [r4, #0]
 801f652:	f7ff fcd5 	bl	801f000 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801f656:	e7be      	b.n	801f5d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f65a:	6820      	ldr	r0, [r4, #0]
 801f65c:	eba8 0202 	sub.w	r2, r8, r2
 801f660:	b292      	uxth	r2, r2
 801f662:	2310      	movs	r3, #16
 801f664:	4649      	mov	r1, r9
 801f666:	f7ff fccb 	bl	801f000 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801f66a:	1d25      	adds	r5, r4, #4
 801f66c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801f670:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801f674:	2b00      	cmp	r3, #0
 801f676:	d0ae      	beq.n	801f5d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f678:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801f67c:	2919      	cmp	r1, #25
 801f67e:	d8f7      	bhi.n	801f670 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801f680:	3b20      	subs	r3, #32
 801f682:	8013      	strh	r3, [r2, #0]
 801f684:	e7f4      	b.n	801f670 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801f686:	9a08      	ldr	r2, [sp, #32]
 801f688:	2a00      	cmp	r2, #0
 801f68a:	d0aa      	beq.n	801f5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801f68c:	7812      	ldrb	r2, [r2, #0]
 801f68e:	e7a8      	b.n	801f5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801f690:	2d00      	cmp	r5, #0
 801f692:	f43f af47 	beq.w	801f524 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801f696:	782d      	ldrb	r5, [r5, #0]
 801f698:	e744      	b.n	801f524 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801f69a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801f69a:	b507      	push	{r0, r1, r2, lr}
 801f69c:	9300      	str	r3, [sp, #0]
 801f69e:	4613      	mov	r3, r2
 801f6a0:	2200      	movs	r2, #0
 801f6a2:	f7ff fe90 	bl	801f3c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801f6a6:	b003      	add	sp, #12
 801f6a8:	f85d fb04 	ldr.w	pc, [sp], #4

0801f6ac <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801f6ac:	b40c      	push	{r2, r3}
 801f6ae:	b507      	push	{r0, r1, r2, lr}
 801f6b0:	ab04      	add	r3, sp, #16
 801f6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801f6b6:	9301      	str	r3, [sp, #4]
 801f6b8:	f7ff ffef 	bl	801f69a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801f6bc:	b003      	add	sp, #12
 801f6be:	f85d eb04 	ldr.w	lr, [sp], #4
 801f6c2:	b002      	add	sp, #8
 801f6c4:	4770      	bx	lr
	...

0801f6c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 801f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6cc:	b0c3      	sub	sp, #268	; 0x10c
 801f6ce:	2600      	movs	r6, #0
 801f6d0:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 801f6d4:	4607      	mov	r7, r0
 801f6d6:	4689      	mov	r9, r1
 801f6d8:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f6dc:	4631      	mov	r1, r6
 801f6de:	22c8      	movs	r2, #200	; 0xc8
 801f6e0:	4640      	mov	r0, r8
 801f6e2:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 801f6e6:	960c      	str	r6, [sp, #48]	; 0x30
 801f6e8:	f00e ff22 	bl	802e530 <memset>
 801f6ec:	b16f      	cbz	r7, 801f70a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 801f6ee:	f04f 0b0a 	mov.w	fp, #10
 801f6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f6f6:	b162      	cbz	r2, 801f712 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 801f6f8:	8812      	ldrh	r2, [r2, #0]
 801f6fa:	b11a      	cbz	r2, 801f704 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801f6fc:	f109 31ff 	add.w	r1, r9, #4294967295
 801f700:	4299      	cmp	r1, r3
 801f702:	dc26      	bgt.n	801f752 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801f704:	2200      	movs	r2, #0
 801f706:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f70a:	4638      	mov	r0, r7
 801f70c:	b043      	add	sp, #268	; 0x10c
 801f70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f712:	9a08      	ldr	r2, [sp, #32]
 801f714:	2a00      	cmp	r2, #0
 801f716:	d0f5      	beq.n	801f704 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801f718:	7812      	ldrb	r2, [r2, #0]
 801f71a:	e7ee      	b.n	801f6fa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 801f71c:	2c00      	cmp	r4, #0
 801f71e:	d0e8      	beq.n	801f6f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f720:	7822      	ldrb	r2, [r4, #0]
 801f722:	b132      	cbz	r2, 801f732 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 801f724:	2a25      	cmp	r2, #37	; 0x25
 801f726:	d001      	beq.n	801f72c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 801f728:	4299      	cmp	r1, r3
 801f72a:	dc05      	bgt.n	801f738 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 801f72c:	b9cd      	cbnz	r5, 801f762 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 801f72e:	2c00      	cmp	r4, #0
 801f730:	d0df      	beq.n	801f6f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f732:	7822      	ldrb	r2, [r4, #0]
 801f734:	2500      	movs	r5, #0
 801f736:	e015      	b.n	801f764 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 801f738:	2d00      	cmp	r5, #0
 801f73a:	d073      	beq.n	801f824 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 801f73c:	882a      	ldrh	r2, [r5, #0]
 801f73e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f742:	b10d      	cbz	r5, 801f748 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 801f744:	3502      	adds	r5, #2
 801f746:	9509      	str	r5, [sp, #36]	; 0x24
 801f748:	b10c      	cbz	r4, 801f74e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 801f74a:	3401      	adds	r4, #1
 801f74c:	9408      	str	r4, [sp, #32]
 801f74e:	3301      	adds	r3, #1
 801f750:	930c      	str	r3, [sp, #48]	; 0x30
 801f752:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801f756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f758:	2d00      	cmp	r5, #0
 801f75a:	d0df      	beq.n	801f71c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 801f75c:	882a      	ldrh	r2, [r5, #0]
 801f75e:	2a00      	cmp	r2, #0
 801f760:	d1e0      	bne.n	801f724 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 801f762:	882a      	ldrh	r2, [r5, #0]
 801f764:	2a00      	cmp	r2, #0
 801f766:	d0c4      	beq.n	801f6f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f768:	4299      	cmp	r1, r3
 801f76a:	ddc2      	ble.n	801f6f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f76c:	2300      	movs	r3, #0
 801f76e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f77a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801f77e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801f782:	930d      	str	r3, [sp, #52]	; 0x34
 801f784:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801f788:	930e      	str	r3, [sp, #56]	; 0x38
 801f78a:	b10d      	cbz	r5, 801f790 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 801f78c:	1cab      	adds	r3, r5, #2
 801f78e:	9309      	str	r3, [sp, #36]	; 0x24
 801f790:	b10c      	cbz	r4, 801f796 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801f792:	1c63      	adds	r3, r4, #1
 801f794:	9308      	str	r3, [sp, #32]
 801f796:	ab0e      	add	r3, sp, #56	; 0x38
 801f798:	9305      	str	r3, [sp, #20]
 801f79a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801f79e:	9304      	str	r3, [sp, #16]
 801f7a0:	ab0d      	add	r3, sp, #52	; 0x34
 801f7a2:	9303      	str	r3, [sp, #12]
 801f7a4:	ab0b      	add	r3, sp, #44	; 0x2c
 801f7a6:	9302      	str	r3, [sp, #8]
 801f7a8:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801f7ac:	9301      	str	r3, [sp, #4]
 801f7ae:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801f7b2:	9300      	str	r3, [sp, #0]
 801f7b4:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 801f7b8:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 801f7bc:	a908      	add	r1, sp, #32
 801f7be:	a809      	add	r0, sp, #36	; 0x24
 801f7c0:	f7ff fd31 	bl	801f226 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801f7c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	da0b      	bge.n	801f7e2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 801f7ca:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f7ce:	edd3 7a00 	vldr	s15, [r3]
 801f7d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f7d6:	3601      	adds	r6, #1
 801f7d8:	ee17 3a90 	vmov	r3, s15
 801f7dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7e0:	930d      	str	r3, [sp, #52]	; 0x34
 801f7e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	da0b      	bge.n	801f800 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 801f7e8:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f7ec:	edd3 7a00 	vldr	s15, [r3]
 801f7f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f7f4:	3601      	adds	r6, #1
 801f7f6:	ee17 3a90 	vmov	r3, s15
 801f7fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7fe:	930e      	str	r3, [sp, #56]	; 0x38
 801f800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f802:	b1a3      	cbz	r3, 801f82e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801f804:	881a      	ldrh	r2, [r3, #0]
 801f806:	2a25      	cmp	r2, #37	; 0x25
 801f808:	d016      	beq.n	801f838 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 801f80a:	2a66      	cmp	r2, #102	; 0x66
 801f80c:	d01a      	beq.n	801f844 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 801f80e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801f812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f814:	2d00      	cmp	r5, #0
 801f816:	f000 80fd 	beq.w	801fa14 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34c>
 801f81a:	882c      	ldrh	r4, [r5, #0]
 801f81c:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801f820:	3301      	adds	r3, #1
 801f822:	e00d      	b.n	801f840 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 801f824:	b10c      	cbz	r4, 801f82a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 801f826:	7822      	ldrb	r2, [r4, #0]
 801f828:	e789      	b.n	801f73e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801f82a:	4622      	mov	r2, r4
 801f82c:	e787      	b.n	801f73e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801f82e:	9b08      	ldr	r3, [sp, #32]
 801f830:	2b00      	cmp	r3, #0
 801f832:	d0ec      	beq.n	801f80e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 801f834:	781a      	ldrb	r2, [r3, #0]
 801f836:	e7e6      	b.n	801f806 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 801f838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f83a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f83e:	3302      	adds	r3, #2
 801f840:	930c      	str	r3, [sp, #48]	; 0x30
 801f842:	e04b      	b.n	801f8dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x214>
 801f844:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f848:	ed93 7a00 	vldr	s14, [r3]
 801f84c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801f850:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801f854:	3601      	adds	r6, #1
 801f856:	b923      	cbnz	r3, 801f862 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 801f858:	2301      	movs	r3, #1
 801f85a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801f85e:	2306      	movs	r3, #6
 801f860:	930e      	str	r3, [sp, #56]	; 0x38
 801f862:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801f866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f86a:	bf48      	it	mi
 801f86c:	eeb1 7a47 	vnegmi.f32	s14, s14
 801f870:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f874:	ee77 6a67 	vsub.f32	s13, s14, s15
 801f878:	bf48      	it	mi
 801f87a:	232d      	movmi	r3, #45	; 0x2d
 801f87c:	eef4 6a47 	vcmp.f32	s13, s14
 801f880:	bf48      	it	mi
 801f882:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801f886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f88a:	d132      	bne.n	801f8f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801f88c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f890:	eef4 7a47 	vcmp.f32	s15, s14
 801f894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f898:	d12b      	bne.n	801f8f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801f89a:	4b61      	ldr	r3, [pc, #388]	; (801fa20 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>)
 801f89c:	9310      	str	r3, [sp, #64]	; 0x40
 801f89e:	2366      	movs	r3, #102	; 0x66
 801f8a0:	9311      	str	r3, [sp, #68]	; 0x44
 801f8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8a4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	f000 80ad 	beq.w	801fa08 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x340>
 801f8ae:	881a      	ldrh	r2, [r3, #0]
 801f8b0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801f8b4:	a80c      	add	r0, sp, #48	; 0x30
 801f8b6:	9005      	str	r0, [sp, #20]
 801f8b8:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 801f8bc:	9004      	str	r0, [sp, #16]
 801f8be:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f8c0:	9003      	str	r0, [sp, #12]
 801f8c2:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801f8c6:	9002      	str	r0, [sp, #8]
 801f8c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f8ca:	9001      	str	r0, [sp, #4]
 801f8cc:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 801f8d0:	9000      	str	r0, [sp, #0]
 801f8d2:	e9cd 9706 	strd	r9, r7, [sp, #24]
 801f8d6:	a80f      	add	r0, sp, #60	; 0x3c
 801f8d8:	f7ff fbe2 	bl	801f0a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801f8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8de:	b10b      	cbz	r3, 801f8e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21c>
 801f8e0:	3302      	adds	r3, #2
 801f8e2:	9309      	str	r3, [sp, #36]	; 0x24
 801f8e4:	9b08      	ldr	r3, [sp, #32]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	f43f af03 	beq.w	801f6f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f8ec:	3301      	adds	r3, #1
 801f8ee:	9308      	str	r3, [sp, #32]
 801f8f0:	e6ff      	b.n	801f6f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f8f2:	eeb4 7a47 	vcmp.f32	s14, s14
 801f8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8fa:	d10b      	bne.n	801f914 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24c>
 801f8fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f8fe:	eddf 7a49 	vldr	s15, [pc, #292]	; 801fa24 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>
 801f902:	2300      	movs	r3, #0
 801f904:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801f908:	4283      	cmp	r3, r0
 801f90a:	da07      	bge.n	801f91c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x254>
 801f90c:	eec7 7a86 	vdiv.f32	s15, s15, s12
 801f910:	3301      	adds	r3, #1
 801f912:	e7f9      	b.n	801f908 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x240>
 801f914:	4b44      	ldr	r3, [pc, #272]	; (801fa28 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x360>)
 801f916:	9310      	str	r3, [sp, #64]	; 0x40
 801f918:	236e      	movs	r3, #110	; 0x6e
 801f91a:	e7c1      	b.n	801f8a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d8>
 801f91c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f924:	eeb0 7a67 	vmov.f32	s14, s15
 801f928:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801f92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f930:	da27      	bge.n	801f982 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ba>
 801f932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f934:	2100      	movs	r1, #0
 801f936:	eba9 0202 	sub.w	r2, r9, r2
 801f93a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801f93e:	eef4 6ae5 	vcmpe.f32	s13, s11
 801f942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f946:	b28c      	uxth	r4, r1
 801f948:	db21      	blt.n	801f98e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801f94a:	1a53      	subs	r3, r2, r1
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	dd1e      	ble.n	801f98e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801f950:	2963      	cmp	r1, #99	; 0x63
 801f952:	d01b      	beq.n	801f98c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 801f954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f958:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801f95c:	ee17 3a10 	vmov	r3, s14
 801f960:	2b09      	cmp	r3, #9
 801f962:	bfa8      	it	ge
 801f964:	2309      	movge	r3, #9
 801f966:	ee07 3a10 	vmov	s14, r3
 801f96a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f96e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801f972:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801f976:	eee7 7a66 	vfms.f32	s15, s14, s13
 801f97a:	3101      	adds	r1, #1
 801f97c:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801f980:	e7dd      	b.n	801f93e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x276>
 801f982:	ee66 6a86 	vmul.f32	s13, s13, s12
 801f986:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801f98a:	e7cd      	b.n	801f928 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x260>
 801f98c:	460c      	mov	r4, r1
 801f98e:	2a63      	cmp	r2, #99	; 0x63
 801f990:	bfd4      	ite	le
 801f992:	ebc4 0202 	rsble	r2, r4, r2
 801f996:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801f99a:	2a00      	cmp	r2, #0
 801f99c:	dd2f      	ble.n	801f9fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
 801f99e:	4603      	mov	r3, r0
 801f9a0:	2501      	movs	r5, #1
 801f9a2:	2b00      	cmp	r3, #0
 801f9a4:	dd0d      	ble.n	801f9c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fa>
 801f9a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f9aa:	3b01      	subs	r3, #1
 801f9ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f9b0:	ee17 1a10 	vmov	r1, s14
 801f9b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f9b8:	fb0b 1505 	mla	r5, fp, r5, r1
 801f9bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f9c0:	e7ef      	b.n	801f9a2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2da>
 801f9c2:	2800      	cmp	r0, #0
 801f9c4:	f100 33ff 	add.w	r3, r0, #4294967295
 801f9c8:	bfac      	ite	ge
 801f9ca:	1a18      	subge	r0, r3, r0
 801f9cc:	4618      	movlt	r0, r3
 801f9ce:	0064      	lsls	r4, r4, #1
 801f9d0:	900e      	str	r0, [sp, #56]	; 0x38
 801f9d2:	230a      	movs	r3, #10
 801f9d4:	b292      	uxth	r2, r2
 801f9d6:	eb08 0104 	add.w	r1, r8, r4
 801f9da:	4628      	mov	r0, r5
 801f9dc:	f7ff fb2e 	bl	801f03c <_ZN8touchgfx7Unicode4itoaElPtti>
 801f9e0:	2d01      	cmp	r5, #1
 801f9e2:	dc0a      	bgt.n	801f9fa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 801f9e4:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	bf0c      	ite	eq
 801f9ec:	2300      	moveq	r3, #0
 801f9ee:	232e      	movne	r3, #46	; 0x2e
 801f9f0:	aa42      	add	r2, sp, #264	; 0x108
 801f9f2:	4414      	add	r4, r2
 801f9f4:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801f9f8:	e753      	b.n	801f8a2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 801f9fa:	232e      	movs	r3, #46	; 0x2e
 801f9fc:	e7f8      	b.n	801f9f0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x328>
 801f9fe:	ab42      	add	r3, sp, #264	; 0x108
 801fa00:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801fa04:	2300      	movs	r3, #0
 801fa06:	e7f5      	b.n	801f9f4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
 801fa08:	9a08      	ldr	r2, [sp, #32]
 801fa0a:	2a00      	cmp	r2, #0
 801fa0c:	f43f af50 	beq.w	801f8b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801fa10:	7812      	ldrb	r2, [r2, #0]
 801fa12:	e74d      	b.n	801f8b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801fa14:	2c00      	cmp	r4, #0
 801fa16:	f43f af01 	beq.w	801f81c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801fa1a:	7824      	ldrb	r4, [r4, #0]
 801fa1c:	e6fe      	b.n	801f81c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801fa1e:	bf00      	nop
 801fa20:	006e0069 	.word	0x006e0069
 801fa24:	3f000002 	.word	0x3f000002
 801fa28:	0061006e 	.word	0x0061006e

0801fa2c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801fa2c:	b507      	push	{r0, r1, r2, lr}
 801fa2e:	9300      	str	r3, [sp, #0]
 801fa30:	4613      	mov	r3, r2
 801fa32:	2200      	movs	r2, #0
 801fa34:	f7ff fe48 	bl	801f6c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801fa38:	b003      	add	sp, #12
 801fa3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801fa40 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801fa40:	4b01      	ldr	r3, [pc, #4]	; (801fa48 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801fa42:	6018      	str	r0, [r3, #0]
 801fa44:	4770      	bx	lr
 801fa46:	bf00      	nop
 801fa48:	20009880 	.word	0x20009880

0801fa4c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801fa4c:	4b06      	ldr	r3, [pc, #24]	; (801fa68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801fa4e:	881a      	ldrh	r2, [r3, #0]
 801fa50:	4282      	cmp	r2, r0
 801fa52:	d807      	bhi.n	801fa64 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801fa54:	4b05      	ldr	r3, [pc, #20]	; (801fa6c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801fa56:	881b      	ldrh	r3, [r3, #0]
 801fa58:	4413      	add	r3, r2
 801fa5a:	4298      	cmp	r0, r3
 801fa5c:	bfac      	ite	ge
 801fa5e:	2000      	movge	r0, #0
 801fa60:	2001      	movlt	r0, #1
 801fa62:	4770      	bx	lr
 801fa64:	2000      	movs	r0, #0
 801fa66:	4770      	bx	lr
 801fa68:	200098a0 	.word	0x200098a0
 801fa6c:	200098a4 	.word	0x200098a4

0801fa70 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801fa70:	b508      	push	{r3, lr}
 801fa72:	4601      	mov	r1, r0
 801fa74:	f7ff ffea 	bl	801fa4c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801fa78:	b118      	cbz	r0, 801fa82 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801fa7a:	4b02      	ldr	r3, [pc, #8]	; (801fa84 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801fa82:	bd08      	pop	{r3, pc}
 801fa84:	20009884 	.word	0x20009884

0801fa88 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801fa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa8c:	4d28      	ldr	r5, [pc, #160]	; (801fb30 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801fa8e:	682b      	ldr	r3, [r5, #0]
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d04a      	beq.n	801fb2a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801fa94:	4a27      	ldr	r2, [pc, #156]	; (801fb34 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801fa96:	4e28      	ldr	r6, [pc, #160]	; (801fb38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801fa98:	8810      	ldrh	r0, [r2, #0]
 801fa9a:	f8b6 8000 	ldrh.w	r8, [r6]
 801fa9e:	4c27      	ldr	r4, [pc, #156]	; (801fb3c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801faa0:	4f27      	ldr	r7, [pc, #156]	; (801fb40 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801faa2:	4440      	add	r0, r8
 801faa4:	1c41      	adds	r1, r0, #1
 801faa6:	f021 0101 	bic.w	r1, r1, #1
 801faaa:	0409      	lsls	r1, r1, #16
 801faac:	0c09      	lsrs	r1, r1, #16
 801faae:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801fab2:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801fab6:	eb03 020e 	add.w	r2, r3, lr
 801faba:	eb0e 010c 	add.w	r1, lr, ip
 801fabe:	6022      	str	r2, [r4, #0]
 801fac0:	185a      	adds	r2, r3, r1
 801fac2:	603a      	str	r2, [r7, #0]
 801fac4:	220e      	movs	r2, #14
 801fac6:	fb02 f208 	mul.w	r2, r2, r8
 801faca:	3203      	adds	r2, #3
 801facc:	f022 0203 	bic.w	r2, r2, #3
 801fad0:	4411      	add	r1, r2
 801fad2:	440b      	add	r3, r1
 801fad4:	491b      	ldr	r1, [pc, #108]	; (801fb44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801fad6:	600b      	str	r3, [r1, #0]
 801fad8:	491b      	ldr	r1, [pc, #108]	; (801fb48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801fada:	2300      	movs	r3, #0
 801fadc:	800b      	strh	r3, [r1, #0]
 801fade:	491b      	ldr	r1, [pc, #108]	; (801fb4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801fae0:	6809      	ldr	r1, [r1, #0]
 801fae2:	eba1 010e 	sub.w	r1, r1, lr
 801fae6:	eba1 010c 	sub.w	r1, r1, ip
 801faea:	1a8a      	subs	r2, r1, r2
 801faec:	4918      	ldr	r1, [pc, #96]	; (801fb50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801faee:	600a      	str	r2, [r1, #0]
 801faf0:	4a18      	ldr	r2, [pc, #96]	; (801fb54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801faf2:	469c      	mov	ip, r3
 801faf4:	8013      	strh	r3, [r2, #0]
 801faf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fafa:	4283      	cmp	r3, r0
 801fafc:	d10d      	bne.n	801fb1a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801fafe:	8835      	ldrh	r5, [r6, #0]
 801fb00:	6838      	ldr	r0, [r7, #0]
 801fb02:	2300      	movs	r3, #0
 801fb04:	240e      	movs	r4, #14
 801fb06:	429d      	cmp	r5, r3
 801fb08:	d90f      	bls.n	801fb2a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801fb0a:	fb04 0203 	mla	r2, r4, r3, r0
 801fb0e:	3301      	adds	r3, #1
 801fb10:	7b11      	ldrb	r1, [r2, #12]
 801fb12:	f36f 1145 	bfc	r1, #5, #1
 801fb16:	7311      	strb	r1, [r2, #12]
 801fb18:	e7f5      	b.n	801fb06 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801fb1a:	682a      	ldr	r2, [r5, #0]
 801fb1c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801fb20:	6822      	ldr	r2, [r4, #0]
 801fb22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801fb26:	3301      	adds	r3, #1
 801fb28:	e7e7      	b.n	801fafa <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801fb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb2e:	bf00      	nop
 801fb30:	20009884 	.word	0x20009884
 801fb34:	200098a0 	.word	0x200098a0
 801fb38:	200098a4 	.word	0x200098a4
 801fb3c:	20009898 	.word	0x20009898
 801fb40:	20009888 	.word	0x20009888
 801fb44:	20009890 	.word	0x20009890
 801fb48:	200098a2 	.word	0x200098a2
 801fb4c:	2000988c 	.word	0x2000988c
 801fb50:	2000989c 	.word	0x2000989c
 801fb54:	20009894 	.word	0x20009894

0801fb58 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801fb58:	b510      	push	{r4, lr}
 801fb5a:	4b10      	ldr	r3, [pc, #64]	; (801fb9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801fb5c:	681b      	ldr	r3, [r3, #0]
 801fb5e:	b9db      	cbnz	r3, 801fb98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801fb60:	b1d1      	cbz	r1, 801fb98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801fb62:	4b0f      	ldr	r3, [pc, #60]	; (801fba0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801fb64:	801a      	strh	r2, [r3, #0]
 801fb66:	4b0f      	ldr	r3, [pc, #60]	; (801fba4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801fb68:	881b      	ldrh	r3, [r3, #0]
 801fb6a:	b292      	uxth	r2, r2
 801fb6c:	240e      	movs	r4, #14
 801fb6e:	4413      	add	r3, r2
 801fb70:	4362      	muls	r2, r4
 801fb72:	2406      	movs	r4, #6
 801fb74:	fb04 2203 	mla	r2, r4, r3, r2
 801fb78:	428a      	cmp	r2, r1
 801fb7a:	d305      	bcc.n	801fb88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801fb7c:	4b0a      	ldr	r3, [pc, #40]	; (801fba8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801fb7e:	4a0b      	ldr	r2, [pc, #44]	; (801fbac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801fb80:	480b      	ldr	r0, [pc, #44]	; (801fbb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801fb82:	2135      	movs	r1, #53	; 0x35
 801fb84:	f00e fb46 	bl	802e214 <__assert_func>
 801fb88:	4b0a      	ldr	r3, [pc, #40]	; (801fbb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801fb8a:	6019      	str	r1, [r3, #0]
 801fb8c:	4b0a      	ldr	r3, [pc, #40]	; (801fbb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801fb8e:	6018      	str	r0, [r3, #0]
 801fb90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb94:	f7ff bf78 	b.w	801fa88 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801fb98:	bd10      	pop	{r4, pc}
 801fb9a:	bf00      	nop
 801fb9c:	20009890 	.word	0x20009890
 801fba0:	200098a4 	.word	0x200098a4
 801fba4:	200098a0 	.word	0x200098a0
 801fba8:	08032cb1 	.word	0x08032cb1
 801fbac:	08032d46 	.word	0x08032d46
 801fbb0:	08032c8c 	.word	0x08032c8c
 801fbb4:	2000988c 	.word	0x2000988c
 801fbb8:	20009884 	.word	0x20009884

0801fbbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801fbbc:	b470      	push	{r4, r5, r6}
 801fbbe:	4c07      	ldr	r4, [pc, #28]	; (801fbdc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801fbc0:	6826      	ldr	r6, [r4, #0]
 801fbc2:	4605      	mov	r5, r0
 801fbc4:	4610      	mov	r0, r2
 801fbc6:	9a03      	ldr	r2, [sp, #12]
 801fbc8:	b936      	cbnz	r6, 801fbd8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801fbca:	6025      	str	r5, [r4, #0]
 801fbcc:	4c04      	ldr	r4, [pc, #16]	; (801fbe0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801fbce:	8021      	strh	r1, [r4, #0]
 801fbd0:	bc70      	pop	{r4, r5, r6}
 801fbd2:	4619      	mov	r1, r3
 801fbd4:	f7ff bfc0 	b.w	801fb58 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801fbd8:	bc70      	pop	{r4, r5, r6}
 801fbda:	4770      	bx	lr
 801fbdc:	200098a8 	.word	0x200098a8
 801fbe0:	200098a0 	.word	0x200098a0

0801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801fbe4:	b508      	push	{r3, lr}
 801fbe6:	4b14      	ldr	r3, [pc, #80]	; (801fc38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801fbe8:	6819      	ldr	r1, [r3, #0]
 801fbea:	b931      	cbnz	r1, 801fbfa <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801fbec:	4b13      	ldr	r3, [pc, #76]	; (801fc3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801fbee:	4a14      	ldr	r2, [pc, #80]	; (801fc40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801fbf0:	4814      	ldr	r0, [pc, #80]	; (801fc44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801fbf2:	f240 4185 	movw	r1, #1157	; 0x485
 801fbf6:	f00e fb0d 	bl	802e214 <__assert_func>
 801fbfa:	4a13      	ldr	r2, [pc, #76]	; (801fc48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801fbfc:	8803      	ldrh	r3, [r0, #0]
 801fbfe:	8812      	ldrh	r2, [r2, #0]
 801fc00:	4293      	cmp	r3, r2
 801fc02:	d204      	bcs.n	801fc0e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801fc04:	2214      	movs	r2, #20
 801fc06:	fb02 1303 	mla	r3, r2, r3, r1
 801fc0a:	8918      	ldrh	r0, [r3, #8]
 801fc0c:	bd08      	pop	{r3, pc}
 801fc0e:	490f      	ldr	r1, [pc, #60]	; (801fc4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801fc10:	8809      	ldrh	r1, [r1, #0]
 801fc12:	4411      	add	r1, r2
 801fc14:	428b      	cmp	r3, r1
 801fc16:	da06      	bge.n	801fc26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801fc18:	1a9b      	subs	r3, r3, r2
 801fc1a:	4a0d      	ldr	r2, [pc, #52]	; (801fc50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801fc1c:	6812      	ldr	r2, [r2, #0]
 801fc1e:	210e      	movs	r1, #14
 801fc20:	fb01 2303 	mla	r3, r1, r3, r2
 801fc24:	e7f1      	b.n	801fc0a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801fc26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fc2a:	4293      	cmp	r3, r2
 801fc2c:	bf0a      	itet	eq
 801fc2e:	4b09      	ldreq	r3, [pc, #36]	; (801fc54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801fc30:	2000      	movne	r0, #0
 801fc32:	8818      	ldrheq	r0, [r3, #0]
 801fc34:	e7ea      	b.n	801fc0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801fc36:	bf00      	nop
 801fc38:	200098a8 	.word	0x200098a8
 801fc3c:	08032d0a 	.word	0x08032d0a
 801fc40:	08032df3 	.word	0x08032df3
 801fc44:	08032c8c 	.word	0x08032c8c
 801fc48:	200098a0 	.word	0x200098a0
 801fc4c:	200098a4 	.word	0x200098a4
 801fc50:	20009888 	.word	0x20009888
 801fc54:	20009814 	.word	0x20009814

0801fc58 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801fc58:	b508      	push	{r3, lr}
 801fc5a:	4b14      	ldr	r3, [pc, #80]	; (801fcac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801fc5c:	6819      	ldr	r1, [r3, #0]
 801fc5e:	b931      	cbnz	r1, 801fc6e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801fc60:	4b13      	ldr	r3, [pc, #76]	; (801fcb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801fc62:	4a14      	ldr	r2, [pc, #80]	; (801fcb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801fc64:	4814      	ldr	r0, [pc, #80]	; (801fcb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801fc66:	f240 4199 	movw	r1, #1177	; 0x499
 801fc6a:	f00e fad3 	bl	802e214 <__assert_func>
 801fc6e:	4a13      	ldr	r2, [pc, #76]	; (801fcbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801fc70:	8803      	ldrh	r3, [r0, #0]
 801fc72:	8812      	ldrh	r2, [r2, #0]
 801fc74:	4293      	cmp	r3, r2
 801fc76:	d204      	bcs.n	801fc82 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801fc78:	2214      	movs	r2, #20
 801fc7a:	fb02 1303 	mla	r3, r2, r3, r1
 801fc7e:	8958      	ldrh	r0, [r3, #10]
 801fc80:	bd08      	pop	{r3, pc}
 801fc82:	490f      	ldr	r1, [pc, #60]	; (801fcc0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801fc84:	8809      	ldrh	r1, [r1, #0]
 801fc86:	4411      	add	r1, r2
 801fc88:	428b      	cmp	r3, r1
 801fc8a:	da06      	bge.n	801fc9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801fc8c:	1a9b      	subs	r3, r3, r2
 801fc8e:	4a0d      	ldr	r2, [pc, #52]	; (801fcc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801fc90:	6812      	ldr	r2, [r2, #0]
 801fc92:	210e      	movs	r1, #14
 801fc94:	fb01 2303 	mla	r3, r1, r3, r2
 801fc98:	e7f1      	b.n	801fc7e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801fc9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fc9e:	4293      	cmp	r3, r2
 801fca0:	bf0a      	itet	eq
 801fca2:	4b09      	ldreq	r3, [pc, #36]	; (801fcc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801fca4:	2000      	movne	r0, #0
 801fca6:	8818      	ldrheq	r0, [r3, #0]
 801fca8:	e7ea      	b.n	801fc80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801fcaa:	bf00      	nop
 801fcac:	200098a8 	.word	0x200098a8
 801fcb0:	08032d0a 	.word	0x08032d0a
 801fcb4:	08032e1f 	.word	0x08032e1f
 801fcb8:	08032c8c 	.word	0x08032c8c
 801fcbc:	200098a0 	.word	0x200098a0
 801fcc0:	200098a4 	.word	0x200098a4
 801fcc4:	20009888 	.word	0x20009888
 801fcc8:	20009816 	.word	0x20009816

0801fccc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801fccc:	b510      	push	{r4, lr}
 801fcce:	4b23      	ldr	r3, [pc, #140]	; (801fd5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801fcd0:	681c      	ldr	r4, [r3, #0]
 801fcd2:	b934      	cbnz	r4, 801fce2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801fcd4:	4b22      	ldr	r3, [pc, #136]	; (801fd60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801fcd6:	4a23      	ldr	r2, [pc, #140]	; (801fd64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801fcd8:	4823      	ldr	r0, [pc, #140]	; (801fd68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801fcda:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801fcde:	f00e fa99 	bl	802e214 <__assert_func>
 801fce2:	4a22      	ldr	r2, [pc, #136]	; (801fd6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801fce4:	880b      	ldrh	r3, [r1, #0]
 801fce6:	8812      	ldrh	r2, [r2, #0]
 801fce8:	4293      	cmp	r3, r2
 801fcea:	d211      	bcs.n	801fd10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801fcec:	2214      	movs	r2, #20
 801fcee:	fb02 4303 	mla	r3, r2, r3, r4
 801fcf2:	8a1a      	ldrh	r2, [r3, #16]
 801fcf4:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801fcf8:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801fcfc:	8a5b      	ldrh	r3, [r3, #18]
 801fcfe:	8004      	strh	r4, [r0, #0]
 801fd00:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801fd04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fd08:	8041      	strh	r1, [r0, #2]
 801fd0a:	8082      	strh	r2, [r0, #4]
 801fd0c:	80c3      	strh	r3, [r0, #6]
 801fd0e:	e00e      	b.n	801fd2e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801fd10:	4917      	ldr	r1, [pc, #92]	; (801fd70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801fd12:	8809      	ldrh	r1, [r1, #0]
 801fd14:	4411      	add	r1, r2
 801fd16:	428b      	cmp	r3, r1
 801fd18:	da0a      	bge.n	801fd30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801fd1a:	1a9b      	subs	r3, r3, r2
 801fd1c:	4a15      	ldr	r2, [pc, #84]	; (801fd74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801fd1e:	6812      	ldr	r2, [r2, #0]
 801fd20:	210e      	movs	r1, #14
 801fd22:	fb01 2303 	mla	r3, r1, r3, r2
 801fd26:	681a      	ldr	r2, [r3, #0]
 801fd28:	6002      	str	r2, [r0, #0]
 801fd2a:	685a      	ldr	r2, [r3, #4]
 801fd2c:	6042      	str	r2, [r0, #4]
 801fd2e:	bd10      	pop	{r4, pc}
 801fd30:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fd34:	4293      	cmp	r3, r2
 801fd36:	d10b      	bne.n	801fd50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801fd38:	4b0f      	ldr	r3, [pc, #60]	; (801fd78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801fd3a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801fd3e:	4b0f      	ldr	r3, [pc, #60]	; (801fd7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801fd40:	8081      	strh	r1, [r0, #4]
 801fd42:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fd46:	80c2      	strh	r2, [r0, #6]
 801fd48:	2300      	movs	r3, #0
 801fd4a:	8003      	strh	r3, [r0, #0]
 801fd4c:	8043      	strh	r3, [r0, #2]
 801fd4e:	e7ee      	b.n	801fd2e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801fd50:	2300      	movs	r3, #0
 801fd52:	8003      	strh	r3, [r0, #0]
 801fd54:	8043      	strh	r3, [r0, #2]
 801fd56:	8083      	strh	r3, [r0, #4]
 801fd58:	e7d8      	b.n	801fd0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801fd5a:	bf00      	nop
 801fd5c:	200098a8 	.word	0x200098a8
 801fd60:	08032d0a 	.word	0x08032d0a
 801fd64:	08032d8c 	.word	0x08032d8c
 801fd68:	08032c8c 	.word	0x08032c8c
 801fd6c:	200098a0 	.word	0x200098a0
 801fd70:	200098a4 	.word	0x200098a4
 801fd74:	20009888 	.word	0x20009888
 801fd78:	20009814 	.word	0x20009814
 801fd7c:	20009816 	.word	0x20009816

0801fd80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801fd80:	4b18      	ldr	r3, [pc, #96]	; (801fde4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801fd82:	681b      	ldr	r3, [r3, #0]
 801fd84:	b34b      	cbz	r3, 801fdda <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801fd86:	4a18      	ldr	r2, [pc, #96]	; (801fde8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801fd88:	8800      	ldrh	r0, [r0, #0]
 801fd8a:	8812      	ldrh	r2, [r2, #0]
 801fd8c:	4290      	cmp	r0, r2
 801fd8e:	d211      	bcs.n	801fdb4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801fd90:	2214      	movs	r2, #20
 801fd92:	fb02 3300 	mla	r3, r2, r0, r3
 801fd96:	8a1a      	ldrh	r2, [r3, #16]
 801fd98:	8919      	ldrh	r1, [r3, #8]
 801fd9a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801fd9e:	428a      	cmp	r2, r1
 801fda0:	db1d      	blt.n	801fdde <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801fda2:	8a58      	ldrh	r0, [r3, #18]
 801fda4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801fda8:	895b      	ldrh	r3, [r3, #10]
 801fdaa:	4298      	cmp	r0, r3
 801fdac:	bfac      	ite	ge
 801fdae:	2000      	movge	r0, #0
 801fdb0:	2001      	movlt	r0, #1
 801fdb2:	4770      	bx	lr
 801fdb4:	4b0d      	ldr	r3, [pc, #52]	; (801fdec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801fdb6:	881b      	ldrh	r3, [r3, #0]
 801fdb8:	4413      	add	r3, r2
 801fdba:	4298      	cmp	r0, r3
 801fdbc:	da0d      	bge.n	801fdda <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801fdbe:	4b0c      	ldr	r3, [pc, #48]	; (801fdf0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801fdc0:	681b      	ldr	r3, [r3, #0]
 801fdc2:	1a80      	subs	r0, r0, r2
 801fdc4:	220e      	movs	r2, #14
 801fdc6:	fb02 3300 	mla	r3, r2, r0, r3
 801fdca:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801fdce:	891a      	ldrh	r2, [r3, #8]
 801fdd0:	4291      	cmp	r1, r2
 801fdd2:	db04      	blt.n	801fdde <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801fdd4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801fdd8:	e7e6      	b.n	801fda8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801fdda:	2000      	movs	r0, #0
 801fddc:	4770      	bx	lr
 801fdde:	2001      	movs	r0, #1
 801fde0:	4770      	bx	lr
 801fde2:	bf00      	nop
 801fde4:	200098a8 	.word	0x200098a8
 801fde8:	200098a0 	.word	0x200098a0
 801fdec:	200098a4 	.word	0x200098a4
 801fdf0:	20009888 	.word	0x20009888

0801fdf4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801fdf4:	b508      	push	{r3, lr}
 801fdf6:	4b12      	ldr	r3, [pc, #72]	; (801fe40 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801fdf8:	6819      	ldr	r1, [r3, #0]
 801fdfa:	b931      	cbnz	r1, 801fe0a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801fdfc:	4b11      	ldr	r3, [pc, #68]	; (801fe44 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fdfe:	4a12      	ldr	r2, [pc, #72]	; (801fe48 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801fe00:	4812      	ldr	r0, [pc, #72]	; (801fe4c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801fe02:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801fe06:	f00e fa05 	bl	802e214 <__assert_func>
 801fe0a:	8803      	ldrh	r3, [r0, #0]
 801fe0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fe10:	4293      	cmp	r3, r2
 801fe12:	d012      	beq.n	801fe3a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801fe14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fe18:	4293      	cmp	r3, r2
 801fe1a:	d103      	bne.n	801fe24 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801fe1c:	4b0c      	ldr	r3, [pc, #48]	; (801fe50 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801fe1e:	681b      	ldr	r3, [r3, #0]
 801fe20:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801fe22:	bd08      	pop	{r3, pc}
 801fe24:	4a0b      	ldr	r2, [pc, #44]	; (801fe54 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801fe26:	6812      	ldr	r2, [r2, #0]
 801fe28:	b11a      	cbz	r2, 801fe32 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801fe2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fe2e:	2800      	cmp	r0, #0
 801fe30:	d1f7      	bne.n	801fe22 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fe32:	2214      	movs	r2, #20
 801fe34:	4353      	muls	r3, r2
 801fe36:	58c8      	ldr	r0, [r1, r3]
 801fe38:	e7f3      	b.n	801fe22 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fe3a:	2000      	movs	r0, #0
 801fe3c:	e7f1      	b.n	801fe22 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fe3e:	bf00      	nop
 801fe40:	200098a8 	.word	0x200098a8
 801fe44:	08032d0a 	.word	0x08032d0a
 801fe48:	08032dc2 	.word	0x08032dc2
 801fe4c:	08032c8c 	.word	0x08032c8c
 801fe50:	20009820 	.word	0x20009820
 801fe54:	20009884 	.word	0x20009884

0801fe58 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801fe58:	8802      	ldrh	r2, [r0, #0]
 801fe5a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801fe5e:	429a      	cmp	r2, r3
 801fe60:	d845      	bhi.n	801feee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801fe62:	4b24      	ldr	r3, [pc, #144]	; (801fef4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801fe64:	8818      	ldrh	r0, [r3, #0]
 801fe66:	4282      	cmp	r2, r0
 801fe68:	d221      	bcs.n	801feae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801fe6a:	4b23      	ldr	r3, [pc, #140]	; (801fef8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801fe6c:	6819      	ldr	r1, [r3, #0]
 801fe6e:	2314      	movs	r3, #20
 801fe70:	fb03 1302 	mla	r3, r3, r2, r1
 801fe74:	6858      	ldr	r0, [r3, #4]
 801fe76:	2800      	cmp	r0, #0
 801fe78:	d03a      	beq.n	801fef0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fe7a:	4920      	ldr	r1, [pc, #128]	; (801fefc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fe7c:	6809      	ldr	r1, [r1, #0]
 801fe7e:	2900      	cmp	r1, #0
 801fe80:	d036      	beq.n	801fef0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fe82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fe86:	2900      	cmp	r1, #0
 801fe88:	d032      	beq.n	801fef0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fe8a:	891a      	ldrh	r2, [r3, #8]
 801fe8c:	8958      	ldrh	r0, [r3, #10]
 801fe8e:	4350      	muls	r0, r2
 801fe90:	7c5a      	ldrb	r2, [r3, #17]
 801fe92:	7cdb      	ldrb	r3, [r3, #19]
 801fe94:	0952      	lsrs	r2, r2, #5
 801fe96:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801fe9a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801fe9e:	2b0b      	cmp	r3, #11
 801fea0:	bf18      	it	ne
 801fea2:	0040      	lslne	r0, r0, #1
 801fea4:	3003      	adds	r0, #3
 801fea6:	f020 0003 	bic.w	r0, r0, #3
 801feaa:	4408      	add	r0, r1
 801feac:	4770      	bx	lr
 801feae:	4b14      	ldr	r3, [pc, #80]	; (801ff00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801feb0:	881b      	ldrh	r3, [r3, #0]
 801feb2:	4403      	add	r3, r0
 801feb4:	429a      	cmp	r2, r3
 801feb6:	da1a      	bge.n	801feee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801feb8:	4b12      	ldr	r3, [pc, #72]	; (801ff04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801feba:	681b      	ldr	r3, [r3, #0]
 801febc:	1a10      	subs	r0, r2, r0
 801febe:	210e      	movs	r1, #14
 801fec0:	fb01 3000 	mla	r0, r1, r0, r3
 801fec4:	7b03      	ldrb	r3, [r0, #12]
 801fec6:	f003 031f 	and.w	r3, r3, #31
 801feca:	2b0b      	cmp	r3, #11
 801fecc:	d10b      	bne.n	801fee6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801fece:	8903      	ldrh	r3, [r0, #8]
 801fed0:	8940      	ldrh	r0, [r0, #10]
 801fed2:	4358      	muls	r0, r3
 801fed4:	4b09      	ldr	r3, [pc, #36]	; (801fefc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fed6:	6819      	ldr	r1, [r3, #0]
 801fed8:	3003      	adds	r0, #3
 801feda:	f020 0303 	bic.w	r3, r0, #3
 801fede:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801fee2:	4418      	add	r0, r3
 801fee4:	4770      	bx	lr
 801fee6:	2b0d      	cmp	r3, #13
 801fee8:	d101      	bne.n	801feee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801feea:	300d      	adds	r0, #13
 801feec:	4770      	bx	lr
 801feee:	2000      	movs	r0, #0
 801fef0:	4770      	bx	lr
 801fef2:	bf00      	nop
 801fef4:	200098a0 	.word	0x200098a0
 801fef8:	200098a8 	.word	0x200098a8
 801fefc:	20009884 	.word	0x20009884
 801ff00:	200098a4 	.word	0x200098a4
 801ff04:	20009888 	.word	0x20009888

0801ff08 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ff08:	b510      	push	{r4, lr}
 801ff0a:	4b17      	ldr	r3, [pc, #92]	; (801ff68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801ff0c:	6819      	ldr	r1, [r3, #0]
 801ff0e:	8803      	ldrh	r3, [r0, #0]
 801ff10:	b1e9      	cbz	r1, 801ff4e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801ff12:	4a16      	ldr	r2, [pc, #88]	; (801ff6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801ff14:	8812      	ldrh	r2, [r2, #0]
 801ff16:	429a      	cmp	r2, r3
 801ff18:	d90a      	bls.n	801ff30 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801ff1a:	2214      	movs	r2, #20
 801ff1c:	fb02 1303 	mla	r3, r2, r3, r1
 801ff20:	7c58      	ldrb	r0, [r3, #17]
 801ff22:	0942      	lsrs	r2, r0, #5
 801ff24:	7cd8      	ldrb	r0, [r3, #19]
 801ff26:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801ff2a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801ff2e:	bd10      	pop	{r4, pc}
 801ff30:	490f      	ldr	r1, [pc, #60]	; (801ff70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ff32:	8809      	ldrh	r1, [r1, #0]
 801ff34:	4411      	add	r1, r2
 801ff36:	428b      	cmp	r3, r1
 801ff38:	da09      	bge.n	801ff4e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801ff3a:	1a9b      	subs	r3, r3, r2
 801ff3c:	4a0d      	ldr	r2, [pc, #52]	; (801ff74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ff3e:	6812      	ldr	r2, [r2, #0]
 801ff40:	210e      	movs	r1, #14
 801ff42:	fb01 2303 	mla	r3, r1, r3, r2
 801ff46:	7b18      	ldrb	r0, [r3, #12]
 801ff48:	f000 001f 	and.w	r0, r0, #31
 801ff4c:	e7ef      	b.n	801ff2e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ff4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ff52:	4293      	cmp	r3, r2
 801ff54:	d106      	bne.n	801ff64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801ff56:	f7ef fd75 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 801ff5a:	6803      	ldr	r3, [r0, #0]
 801ff5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff62:	4718      	bx	r3
 801ff64:	2000      	movs	r0, #0
 801ff66:	e7e2      	b.n	801ff2e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ff68:	200098a8 	.word	0x200098a8
 801ff6c:	200098a0 	.word	0x200098a0
 801ff70:	200098a4 	.word	0x200098a4
 801ff74:	20009888 	.word	0x20009888

0801ff78 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801ff78:	2010      	movs	r0, #16
 801ff7a:	4770      	bx	lr

0801ff7c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801ff7c:	2000      	movs	r0, #0
 801ff7e:	4770      	bx	lr

0801ff80 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ff80:	2bff      	cmp	r3, #255	; 0xff
 801ff82:	d050      	beq.n	8020026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ff84:	2a0b      	cmp	r2, #11
 801ff86:	d04a      	beq.n	802001e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ff88:	d80e      	bhi.n	801ffa8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ff8a:	2a03      	cmp	r2, #3
 801ff8c:	d03f      	beq.n	802000e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801ff8e:	d804      	bhi.n	801ff9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ff90:	2a01      	cmp	r2, #1
 801ff92:	d03e      	beq.n	8020012 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ff94:	d93f      	bls.n	8020016 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ff96:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ff98:	4770      	bx	lr
 801ff9a:	2a09      	cmp	r2, #9
 801ff9c:	d03f      	beq.n	802001e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ff9e:	d83c      	bhi.n	802001a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ffa0:	2a08      	cmp	r2, #8
 801ffa2:	d03a      	beq.n	802001a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ffa4:	2000      	movs	r0, #0
 801ffa6:	4770      	bx	lr
 801ffa8:	2a2f      	cmp	r2, #47	; 0x2f
 801ffaa:	d024      	beq.n	801fff6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801ffac:	d80d      	bhi.n	801ffca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801ffae:	2a2d      	cmp	r2, #45	; 0x2d
 801ffb0:	d014      	beq.n	801ffdc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801ffb2:	d826      	bhi.n	8020002 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ffb4:	2a2c      	cmp	r2, #44	; 0x2c
 801ffb6:	d1f5      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ffb8:	684b      	ldr	r3, [r1, #4]
 801ffba:	781b      	ldrb	r3, [r3, #0]
 801ffbc:	2b01      	cmp	r3, #1
 801ffbe:	d018      	beq.n	801fff2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801ffc0:	d323      	bcc.n	802000a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801ffc2:	2b02      	cmp	r3, #2
 801ffc4:	d1ee      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ffc6:	6880      	ldr	r0, [r0, #8]
 801ffc8:	4770      	bx	lr
 801ffca:	2a31      	cmp	r2, #49	; 0x31
 801ffcc:	d004      	beq.n	801ffd8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801ffce:	d328      	bcc.n	8020022 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ffd0:	2a32      	cmp	r2, #50	; 0x32
 801ffd2:	d026      	beq.n	8020022 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ffd4:	2a33      	cmp	r2, #51	; 0x33
 801ffd6:	d1e5      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ffd8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801ffda:	4770      	bx	lr
 801ffdc:	684b      	ldr	r3, [r1, #4]
 801ffde:	781b      	ldrb	r3, [r3, #0]
 801ffe0:	2b01      	cmp	r3, #1
 801ffe2:	d004      	beq.n	801ffee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ffe4:	d30b      	bcc.n	801fffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ffe6:	2b02      	cmp	r3, #2
 801ffe8:	d1dc      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ffea:	6900      	ldr	r0, [r0, #16]
 801ffec:	4770      	bx	lr
 801ffee:	6a00      	ldr	r0, [r0, #32]
 801fff0:	4770      	bx	lr
 801fff2:	6980      	ldr	r0, [r0, #24]
 801fff4:	4770      	bx	lr
 801fff6:	684b      	ldr	r3, [r1, #4]
 801fff8:	781b      	ldrb	r3, [r3, #0]
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d1d2      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fffe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8020000:	4770      	bx	lr
 8020002:	684b      	ldr	r3, [r1, #4]
 8020004:	781b      	ldrb	r3, [r3, #0]
 8020006:	2b00      	cmp	r3, #0
 8020008:	d1cc      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802000a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 802000c:	4770      	bx	lr
 802000e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8020010:	4770      	bx	lr
 8020012:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8020014:	4770      	bx	lr
 8020016:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8020018:	4770      	bx	lr
 802001a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 802001c:	4770      	bx	lr
 802001e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8020020:	4770      	bx	lr
 8020022:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8020024:	4770      	bx	lr
 8020026:	2a0b      	cmp	r2, #11
 8020028:	d049      	beq.n	80200be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 802002a:	d80e      	bhi.n	802004a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 802002c:	2a03      	cmp	r2, #3
 802002e:	d040      	beq.n	80200b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8020030:	d804      	bhi.n	802003c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8020032:	2a01      	cmp	r2, #1
 8020034:	d03f      	beq.n	80200b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8020036:	d940      	bls.n	80200ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8020038:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 802003a:	4770      	bx	lr
 802003c:	2a09      	cmp	r2, #9
 802003e:	d03e      	beq.n	80200be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8020040:	d801      	bhi.n	8020046 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8020042:	2a08      	cmp	r2, #8
 8020044:	d1ae      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020046:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8020048:	4770      	bx	lr
 802004a:	2a2f      	cmp	r2, #47	; 0x2f
 802004c:	d024      	beq.n	8020098 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 802004e:	d80d      	bhi.n	802006c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8020050:	2a2d      	cmp	r2, #45	; 0x2d
 8020052:	d014      	beq.n	802007e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8020054:	d826      	bhi.n	80200a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8020056:	2a2c      	cmp	r2, #44	; 0x2c
 8020058:	d1a4      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802005a:	684b      	ldr	r3, [r1, #4]
 802005c:	781b      	ldrb	r3, [r3, #0]
 802005e:	2b01      	cmp	r3, #1
 8020060:	d018      	beq.n	8020094 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8020062:	d324      	bcc.n	80200ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8020064:	2b02      	cmp	r3, #2
 8020066:	d19d      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020068:	68c0      	ldr	r0, [r0, #12]
 802006a:	4770      	bx	lr
 802006c:	2a31      	cmp	r2, #49	; 0x31
 802006e:	d004      	beq.n	802007a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8020070:	d327      	bcc.n	80200c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8020072:	2a32      	cmp	r2, #50	; 0x32
 8020074:	d025      	beq.n	80200c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8020076:	2a33      	cmp	r2, #51	; 0x33
 8020078:	d194      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802007a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 802007c:	4770      	bx	lr
 802007e:	684b      	ldr	r3, [r1, #4]
 8020080:	781b      	ldrb	r3, [r3, #0]
 8020082:	2b01      	cmp	r3, #1
 8020084:	d004      	beq.n	8020090 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8020086:	d30b      	bcc.n	80200a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8020088:	2b02      	cmp	r3, #2
 802008a:	d18b      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802008c:	6940      	ldr	r0, [r0, #20]
 802008e:	4770      	bx	lr
 8020090:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020092:	4770      	bx	lr
 8020094:	69c0      	ldr	r0, [r0, #28]
 8020096:	4770      	bx	lr
 8020098:	684b      	ldr	r3, [r1, #4]
 802009a:	781b      	ldrb	r3, [r3, #0]
 802009c:	2b00      	cmp	r3, #0
 802009e:	d181      	bne.n	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200a0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80200a2:	4770      	bx	lr
 80200a4:	684b      	ldr	r3, [r1, #4]
 80200a6:	781b      	ldrb	r3, [r3, #0]
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	f47f af7b 	bne.w	801ffa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200ae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80200b0:	4770      	bx	lr
 80200b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80200b4:	4770      	bx	lr
 80200b6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80200b8:	4770      	bx	lr
 80200ba:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80200bc:	4770      	bx	lr
 80200be:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80200c0:	4770      	bx	lr
 80200c2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80200c4:	4770      	bx	lr

080200c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200ca:	b087      	sub	sp, #28
 80200cc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80200ce:	9205      	str	r2, [sp, #20]
 80200d0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80200d4:	9202      	str	r2, [sp, #8]
 80200d6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80200da:	9101      	str	r1, [sp, #4]
 80200dc:	6841      	ldr	r1, [r0, #4]
 80200de:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80200e2:	fb01 2404 	mla	r4, r1, r4, r2
 80200e6:	6802      	ldr	r2, [r0, #0]
 80200e8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80200ec:	f8de 2000 	ldr.w	r2, [lr]
 80200f0:	9203      	str	r2, [sp, #12]
 80200f2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80200f6:	3204      	adds	r2, #4
 80200f8:	9204      	str	r2, [sp, #16]
 80200fa:	9a02      	ldr	r2, [sp, #8]
 80200fc:	43d6      	mvns	r6, r2
 80200fe:	b2f6      	uxtb	r6, r6
 8020100:	9a01      	ldr	r2, [sp, #4]
 8020102:	2a00      	cmp	r2, #0
 8020104:	dc03      	bgt.n	802010e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020106:	9a05      	ldr	r2, [sp, #20]
 8020108:	2a00      	cmp	r2, #0
 802010a:	f340 8129 	ble.w	8020360 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802010e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020110:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8020114:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8020118:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802011c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802011e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020122:	2b00      	cmp	r3, #0
 8020124:	dd0e      	ble.n	8020144 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020126:	1408      	asrs	r0, r1, #16
 8020128:	d405      	bmi.n	8020136 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802012a:	4560      	cmp	r0, ip
 802012c:	da03      	bge.n	8020136 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802012e:	1410      	asrs	r0, r2, #16
 8020130:	d401      	bmi.n	8020136 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020132:	42b8      	cmp	r0, r7
 8020134:	db07      	blt.n	8020146 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020136:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020138:	4401      	add	r1, r0
 802013a:	9814      	ldr	r0, [sp, #80]	; 0x50
 802013c:	3b01      	subs	r3, #1
 802013e:	4402      	add	r2, r0
 8020140:	3402      	adds	r4, #2
 8020142:	e7ee      	b.n	8020122 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020144:	d071      	beq.n	802022a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020146:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020148:	1e58      	subs	r0, r3, #1
 802014a:	fb05 1500 	mla	r5, r5, r0, r1
 802014e:	142d      	asrs	r5, r5, #16
 8020150:	d45f      	bmi.n	8020212 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020152:	4565      	cmp	r5, ip
 8020154:	da5d      	bge.n	8020212 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020156:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020158:	fb05 2000 	mla	r0, r5, r0, r2
 802015c:	1400      	asrs	r0, r0, #16
 802015e:	d458      	bmi.n	8020212 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020160:	42b8      	cmp	r0, r7
 8020162:	da56      	bge.n	8020212 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020164:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8020168:	4699      	mov	r9, r3
 802016a:	46a2      	mov	sl, r4
 802016c:	f1b9 0f00 	cmp.w	r9, #0
 8020170:	dd57      	ble.n	8020222 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8020172:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020176:	9803      	ldr	r0, [sp, #12]
 8020178:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802017c:	140d      	asrs	r5, r1, #16
 802017e:	fb07 000c 	mla	r0, r7, ip, r0
 8020182:	f109 39ff 	add.w	r9, r9, #4294967295
 8020186:	5d40      	ldrb	r0, [r0, r5]
 8020188:	9d04      	ldr	r5, [sp, #16]
 802018a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 802018e:	f8ba 5000 	ldrh.w	r5, [sl]
 8020192:	122f      	asrs	r7, r5, #8
 8020194:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8020198:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802019c:	fb17 f706 	smulbb	r7, r7, r6
 80201a0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80201a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80201a8:	00ed      	lsls	r5, r5, #3
 80201aa:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80201ae:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80201b2:	10c7      	asrs	r7, r0, #3
 80201b4:	b2ed      	uxtb	r5, r5
 80201b6:	00c0      	lsls	r0, r0, #3
 80201b8:	fb18 f806 	smulbb	r8, r8, r6
 80201bc:	fb15 f506 	smulbb	r5, r5, r6
 80201c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80201c4:	b2c0      	uxtb	r0, r0
 80201c6:	fa1f fc8c 	uxth.w	ip, ip
 80201ca:	fb07 870b 	mla	r7, r7, fp, r8
 80201ce:	fb00 500b 	mla	r0, r0, fp, r5
 80201d2:	b280      	uxth	r0, r0
 80201d4:	b2bf      	uxth	r7, r7
 80201d6:	f10c 0501 	add.w	r5, ip, #1
 80201da:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80201de:	f107 0801 	add.w	r8, r7, #1
 80201e2:	1c45      	adds	r5, r0, #1
 80201e4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80201e8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80201ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80201ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80201f2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80201f6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80201fa:	ea45 0c0c 	orr.w	ip, r5, ip
 80201fe:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020202:	4401      	add	r1, r0
 8020204:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020206:	ea4c 0c08 	orr.w	ip, ip, r8
 802020a:	f82a cb02 	strh.w	ip, [sl], #2
 802020e:	4402      	add	r2, r0
 8020210:	e7ac      	b.n	802016c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020212:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8020216:	f04f 0800 	mov.w	r8, #0
 802021a:	eb03 0008 	add.w	r0, r3, r8
 802021e:	2800      	cmp	r0, #0
 8020220:	dc41      	bgt.n	80202a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8020222:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020226:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802022a:	9b01      	ldr	r3, [sp, #4]
 802022c:	2b00      	cmp	r3, #0
 802022e:	f340 8097 	ble.w	8020360 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020232:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802023a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802023e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020240:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020244:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020248:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802024c:	eef0 6a62 	vmov.f32	s13, s5
 8020250:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020254:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020258:	ee77 2a62 	vsub.f32	s5, s14, s5
 802025c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8020260:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020264:	eef0 6a43 	vmov.f32	s13, s6
 8020268:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802026c:	ee12 2a90 	vmov	r2, s5
 8020270:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020274:	fb92 f3f3 	sdiv	r3, r2, r3
 8020278:	ee13 2a10 	vmov	r2, s6
 802027c:	9313      	str	r3, [sp, #76]	; 0x4c
 802027e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020280:	fb92 f3f3 	sdiv	r3, r2, r3
 8020284:	9314      	str	r3, [sp, #80]	; 0x50
 8020286:	9b01      	ldr	r3, [sp, #4]
 8020288:	9a05      	ldr	r2, [sp, #20]
 802028a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802028e:	3b01      	subs	r3, #1
 8020290:	9301      	str	r3, [sp, #4]
 8020292:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8020296:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020298:	eeb0 3a67 	vmov.f32	s6, s15
 802029c:	bf08      	it	eq
 802029e:	4613      	moveq	r3, r2
 80202a0:	eef0 2a47 	vmov.f32	s5, s14
 80202a4:	e72c      	b.n	8020100 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80202a6:	140f      	asrs	r7, r1, #16
 80202a8:	d453      	bmi.n	8020352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80202aa:	f8de 5008 	ldr.w	r5, [lr, #8]
 80202ae:	42bd      	cmp	r5, r7
 80202b0:	dd4f      	ble.n	8020352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80202b2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80202b6:	d44c      	bmi.n	8020352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80202b8:	f8de 000c 	ldr.w	r0, [lr, #12]
 80202bc:	4560      	cmp	r0, ip
 80202be:	dd48      	ble.n	8020352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80202c0:	9803      	ldr	r0, [sp, #12]
 80202c2:	b22d      	sxth	r5, r5
 80202c4:	fb0c 0505 	mla	r5, ip, r5, r0
 80202c8:	5de8      	ldrb	r0, [r5, r7]
 80202ca:	9d04      	ldr	r5, [sp, #16]
 80202cc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80202d0:	f06f 0501 	mvn.w	r5, #1
 80202d4:	fb05 fb08 	mul.w	fp, r5, r8
 80202d8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80202dc:	f834 500b 	ldrh.w	r5, [r4, fp]
 80202e0:	122f      	asrs	r7, r5, #8
 80202e2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80202e6:	fb17 f706 	smulbb	r7, r7, r6
 80202ea:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80202ee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80202f2:	00ed      	lsls	r5, r5, #3
 80202f4:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80202f8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80202fc:	10c7      	asrs	r7, r0, #3
 80202fe:	b2ed      	uxtb	r5, r5
 8020300:	00c0      	lsls	r0, r0, #3
 8020302:	fb19 f906 	smulbb	r9, r9, r6
 8020306:	fb15 f506 	smulbb	r5, r5, r6
 802030a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802030e:	b2c0      	uxtb	r0, r0
 8020310:	fa1f fc8c 	uxth.w	ip, ip
 8020314:	fb07 970a 	mla	r7, r7, sl, r9
 8020318:	fb00 500a 	mla	r0, r0, sl, r5
 802031c:	b2bf      	uxth	r7, r7
 802031e:	b280      	uxth	r0, r0
 8020320:	f10c 0501 	add.w	r5, ip, #1
 8020324:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020328:	f107 0901 	add.w	r9, r7, #1
 802032c:	1c45      	adds	r5, r0, #1
 802032e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020332:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8020336:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802033a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802033e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020342:	ea45 0c0c 	orr.w	ip, r5, ip
 8020346:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802034a:	ea4c 0c09 	orr.w	ip, ip, r9
 802034e:	f824 c00b 	strh.w	ip, [r4, fp]
 8020352:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020354:	4401      	add	r1, r0
 8020356:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020358:	f108 38ff 	add.w	r8, r8, #4294967295
 802035c:	4402      	add	r2, r0
 802035e:	e75c      	b.n	802021a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020360:	b007      	add	sp, #28
 8020362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020366 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802036a:	b085      	sub	sp, #20
 802036c:	4693      	mov	fp, r2
 802036e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020370:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020372:	6870      	ldr	r0, [r6, #4]
 8020374:	9100      	str	r1, [sp, #0]
 8020376:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802037a:	fb00 2404 	mla	r4, r0, r4, r2
 802037e:	6832      	ldr	r2, [r6, #0]
 8020380:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020384:	682a      	ldr	r2, [r5, #0]
 8020386:	9201      	str	r2, [sp, #4]
 8020388:	686a      	ldr	r2, [r5, #4]
 802038a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 802038e:	3204      	adds	r2, #4
 8020390:	9202      	str	r2, [sp, #8]
 8020392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020396:	9a00      	ldr	r2, [sp, #0]
 8020398:	2a00      	cmp	r2, #0
 802039a:	dc03      	bgt.n	80203a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802039c:	f1bb 0f00 	cmp.w	fp, #0
 80203a0:	f340 80a0 	ble.w	80204e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80203a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80203a6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80203aa:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80203ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80203b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80203b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	dd0c      	ble.n	80203d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80203bc:	1406      	asrs	r6, r0, #16
 80203be:	d405      	bmi.n	80203cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80203c0:	454e      	cmp	r6, r9
 80203c2:	da03      	bge.n	80203cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80203c4:	1416      	asrs	r6, r2, #16
 80203c6:	d401      	bmi.n	80203cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80203c8:	4546      	cmp	r6, r8
 80203ca:	db05      	blt.n	80203d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80203cc:	4470      	add	r0, lr
 80203ce:	4462      	add	r2, ip
 80203d0:	3b01      	subs	r3, #1
 80203d2:	3402      	adds	r4, #2
 80203d4:	e7f0      	b.n	80203b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80203d6:	d00f      	beq.n	80203f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80203d8:	1e5e      	subs	r6, r3, #1
 80203da:	fb0e 0706 	mla	r7, lr, r6, r0
 80203de:	143f      	asrs	r7, r7, #16
 80203e0:	d541      	bpl.n	8020466 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80203e2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80203e6:	4698      	mov	r8, r3
 80203e8:	9603      	str	r6, [sp, #12]
 80203ea:	f1b8 0f00 	cmp.w	r8, #0
 80203ee:	dc59      	bgt.n	80204a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80203f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80203f4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80203f8:	9b00      	ldr	r3, [sp, #0]
 80203fa:	2b00      	cmp	r3, #0
 80203fc:	dd72      	ble.n	80204e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80203fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020402:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020406:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802040a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802040c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020410:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020414:	eeb0 6a62 	vmov.f32	s12, s5
 8020418:	ee61 7a27 	vmul.f32	s15, s2, s15
 802041c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020420:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020424:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020428:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802042c:	eeb0 6a43 	vmov.f32	s12, s6
 8020430:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020434:	ee12 2a90 	vmov	r2, s5
 8020438:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802043c:	fb92 fef3 	sdiv	lr, r2, r3
 8020440:	ee13 2a10 	vmov	r2, s6
 8020444:	fb92 fcf3 	sdiv	ip, r2, r3
 8020448:	9b00      	ldr	r3, [sp, #0]
 802044a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802044e:	3b01      	subs	r3, #1
 8020450:	9300      	str	r3, [sp, #0]
 8020452:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020458:	eeb0 3a67 	vmov.f32	s6, s15
 802045c:	bf08      	it	eq
 802045e:	465b      	moveq	r3, fp
 8020460:	eef0 2a47 	vmov.f32	s5, s14
 8020464:	e797      	b.n	8020396 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020466:	454f      	cmp	r7, r9
 8020468:	dabb      	bge.n	80203e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802046a:	fb0c 2606 	mla	r6, ip, r6, r2
 802046e:	1436      	asrs	r6, r6, #16
 8020470:	d4b7      	bmi.n	80203e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020472:	4546      	cmp	r6, r8
 8020474:	dab5      	bge.n	80203e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020476:	461e      	mov	r6, r3
 8020478:	46a0      	mov	r8, r4
 802047a:	2e00      	cmp	r6, #0
 802047c:	ddb8      	ble.n	80203f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802047e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8020482:	9901      	ldr	r1, [sp, #4]
 8020484:	1417      	asrs	r7, r2, #16
 8020486:	ea4f 4920 	mov.w	r9, r0, asr #16
 802048a:	fb0a 1707 	mla	r7, sl, r7, r1
 802048e:	9902      	ldr	r1, [sp, #8]
 8020490:	f817 7009 	ldrb.w	r7, [r7, r9]
 8020494:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020498:	f828 7b02 	strh.w	r7, [r8], #2
 802049c:	4470      	add	r0, lr
 802049e:	4462      	add	r2, ip
 80204a0:	3e01      	subs	r6, #1
 80204a2:	e7ea      	b.n	802047a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80204a4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80204a8:	d417      	bmi.n	80204da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80204aa:	68ae      	ldr	r6, [r5, #8]
 80204ac:	454e      	cmp	r6, r9
 80204ae:	dd14      	ble.n	80204da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80204b0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80204b4:	d411      	bmi.n	80204da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80204b6:	68ef      	ldr	r7, [r5, #12]
 80204b8:	4557      	cmp	r7, sl
 80204ba:	dd0e      	ble.n	80204da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80204bc:	9f01      	ldr	r7, [sp, #4]
 80204be:	b236      	sxth	r6, r6
 80204c0:	fb0a 7606 	mla	r6, sl, r6, r7
 80204c4:	9f02      	ldr	r7, [sp, #8]
 80204c6:	f816 6009 	ldrb.w	r6, [r6, r9]
 80204ca:	f06f 0101 	mvn.w	r1, #1
 80204ce:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80204d2:	fb01 f608 	mul.w	r6, r1, r8
 80204d6:	9903      	ldr	r1, [sp, #12]
 80204d8:	538f      	strh	r7, [r1, r6]
 80204da:	4470      	add	r0, lr
 80204dc:	4462      	add	r2, ip
 80204de:	f108 38ff 	add.w	r8, r8, #4294967295
 80204e2:	e782      	b.n	80203ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80204e4:	b005      	add	sp, #20
 80204e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080204ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80204ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204ee:	b087      	sub	sp, #28
 80204f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80204f2:	9205      	str	r2, [sp, #20]
 80204f4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80204f8:	9203      	str	r2, [sp, #12]
 80204fa:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80204fe:	9102      	str	r1, [sp, #8]
 8020500:	6861      	ldr	r1, [r4, #4]
 8020502:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8020506:	fb01 2000 	mla	r0, r1, r0, r2
 802050a:	6822      	ldr	r2, [r4, #0]
 802050c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8020510:	9200      	str	r2, [sp, #0]
 8020512:	f8dc 2000 	ldr.w	r2, [ip]
 8020516:	9204      	str	r2, [sp, #16]
 8020518:	f8dc 2004 	ldr.w	r2, [ip, #4]
 802051c:	3204      	adds	r2, #4
 802051e:	9201      	str	r2, [sp, #4]
 8020520:	9a03      	ldr	r2, [sp, #12]
 8020522:	43d5      	mvns	r5, r2
 8020524:	b2ed      	uxtb	r5, r5
 8020526:	9a02      	ldr	r2, [sp, #8]
 8020528:	2a00      	cmp	r2, #0
 802052a:	dc03      	bgt.n	8020534 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802052c:	9a05      	ldr	r2, [sp, #20]
 802052e:	2a00      	cmp	r2, #0
 8020530:	f340 812c 	ble.w	802078c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020534:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020536:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 802053a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802053e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020542:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020544:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020548:	2b00      	cmp	r3, #0
 802054a:	dd10      	ble.n	802056e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802054c:	140c      	asrs	r4, r1, #16
 802054e:	d405      	bmi.n	802055c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020550:	4574      	cmp	r4, lr
 8020552:	da03      	bge.n	802055c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020554:	1414      	asrs	r4, r2, #16
 8020556:	d401      	bmi.n	802055c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020558:	42bc      	cmp	r4, r7
 802055a:	db09      	blt.n	8020570 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802055c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802055e:	9800      	ldr	r0, [sp, #0]
 8020560:	4421      	add	r1, r4
 8020562:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020564:	3002      	adds	r0, #2
 8020566:	4422      	add	r2, r4
 8020568:	3b01      	subs	r3, #1
 802056a:	9000      	str	r0, [sp, #0]
 802056c:	e7ec      	b.n	8020548 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802056e:	d071      	beq.n	8020654 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8020570:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020572:	1e5c      	subs	r4, r3, #1
 8020574:	fb06 1604 	mla	r6, r6, r4, r1
 8020578:	1436      	asrs	r6, r6, #16
 802057a:	d45d      	bmi.n	8020638 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802057c:	4576      	cmp	r6, lr
 802057e:	da5b      	bge.n	8020638 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020580:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8020582:	fb06 2404 	mla	r4, r6, r4, r2
 8020586:	1424      	asrs	r4, r4, #16
 8020588:	d456      	bmi.n	8020638 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802058a:	42bc      	cmp	r4, r7
 802058c:	da54      	bge.n	8020638 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802058e:	f8dd 9000 	ldr.w	r9, [sp]
 8020592:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8020596:	4698      	mov	r8, r3
 8020598:	f1b8 0f00 	cmp.w	r8, #0
 802059c:	dd54      	ble.n	8020648 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 802059e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80205a2:	9804      	ldr	r0, [sp, #16]
 80205a4:	1414      	asrs	r4, r2, #16
 80205a6:	fb07 0404 	mla	r4, r7, r4, r0
 80205aa:	140e      	asrs	r6, r1, #16
 80205ac:	9801      	ldr	r0, [sp, #4]
 80205ae:	f814 e006 	ldrb.w	lr, [r4, r6]
 80205b2:	f8b9 4000 	ldrh.w	r4, [r9]
 80205b6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80205ba:	eb00 0b0e 	add.w	fp, r0, lr
 80205be:	1227      	asrs	r7, r4, #8
 80205c0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80205c4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80205c8:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80205cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80205ce:	fb16 f60a 	smulbb	r6, r6, sl
 80205d2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80205d6:	fb07 6705 	mla	r7, r7, r5, r6
 80205da:	10e6      	asrs	r6, r4, #3
 80205dc:	00e4      	lsls	r4, r4, #3
 80205de:	b2e4      	uxtb	r4, r4
 80205e0:	fb1b fb0a 	smulbb	fp, fp, sl
 80205e4:	fb14 f405 	smulbb	r4, r4, r5
 80205e8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80205ec:	b2bf      	uxth	r7, r7
 80205ee:	fb06 b605 	mla	r6, r6, r5, fp
 80205f2:	fb0e 4e0a 	mla	lr, lr, sl, r4
 80205f6:	b2b6      	uxth	r6, r6
 80205f8:	fa1f fe8e 	uxth.w	lr, lr
 80205fc:	1c7c      	adds	r4, r7, #1
 80205fe:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8020602:	f106 0b01 	add.w	fp, r6, #1
 8020606:	f10e 0401 	add.w	r4, lr, #1
 802060a:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 802060e:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8020612:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020616:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 802061a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802061e:	4327      	orrs	r7, r4
 8020620:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020624:	4401      	add	r1, r0
 8020626:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020628:	ea47 070b 	orr.w	r7, r7, fp
 802062c:	f829 7b02 	strh.w	r7, [r9], #2
 8020630:	4402      	add	r2, r0
 8020632:	f108 38ff 	add.w	r8, r8, #4294967295
 8020636:	e7af      	b.n	8020598 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020638:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 802063c:	f04f 0e00 	mov.w	lr, #0
 8020640:	eb03 040e 	add.w	r4, r3, lr
 8020644:	2c00      	cmp	r4, #0
 8020646:	dc43      	bgt.n	80206d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020648:	9a00      	ldr	r2, [sp, #0]
 802064a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802064e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020652:	9300      	str	r3, [sp, #0]
 8020654:	9b02      	ldr	r3, [sp, #8]
 8020656:	2b00      	cmp	r3, #0
 8020658:	f340 8098 	ble.w	802078c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802065c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020664:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020668:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802066a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802066e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020672:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020676:	eef0 6a62 	vmov.f32	s13, s5
 802067a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802067e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020682:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020686:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 802068a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802068e:	eef0 6a43 	vmov.f32	s13, s6
 8020692:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020696:	ee12 2a90 	vmov	r2, s5
 802069a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802069e:	fb92 f3f3 	sdiv	r3, r2, r3
 80206a2:	ee13 2a10 	vmov	r2, s6
 80206a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80206a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80206ae:	9314      	str	r3, [sp, #80]	; 0x50
 80206b0:	9b02      	ldr	r3, [sp, #8]
 80206b2:	9a05      	ldr	r2, [sp, #20]
 80206b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206b8:	3b01      	subs	r3, #1
 80206ba:	9302      	str	r3, [sp, #8]
 80206bc:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80206c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206c2:	eeb0 3a67 	vmov.f32	s6, s15
 80206c6:	bf08      	it	eq
 80206c8:	4613      	moveq	r3, r2
 80206ca:	eef0 2a47 	vmov.f32	s5, s14
 80206ce:	e72a      	b.n	8020526 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80206d0:	140f      	asrs	r7, r1, #16
 80206d2:	d454      	bmi.n	802077e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80206d4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80206d8:	42be      	cmp	r6, r7
 80206da:	dd50      	ble.n	802077e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80206dc:	ea5f 4822 	movs.w	r8, r2, asr #16
 80206e0:	d44d      	bmi.n	802077e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80206e2:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80206e6:	4544      	cmp	r4, r8
 80206e8:	dd49      	ble.n	802077e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80206ea:	9c04      	ldr	r4, [sp, #16]
 80206ec:	b236      	sxth	r6, r6
 80206ee:	fb08 4606 	mla	r6, r8, r6, r4
 80206f2:	f06f 0001 	mvn.w	r0, #1
 80206f6:	f816 8007 	ldrb.w	r8, [r6, r7]
 80206fa:	9c01      	ldr	r4, [sp, #4]
 80206fc:	fb00 fa0e 	mul.w	sl, r0, lr
 8020700:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020704:	9800      	ldr	r0, [sp, #0]
 8020706:	eb04 0b08 	add.w	fp, r4, r8
 802070a:	f830 400a 	ldrh.w	r4, [r0, sl]
 802070e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8020712:	9801      	ldr	r0, [sp, #4]
 8020714:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020718:	f810 8008 	ldrb.w	r8, [r0, r8]
 802071c:	9800      	ldr	r0, [sp, #0]
 802071e:	1227      	asrs	r7, r4, #8
 8020720:	fb16 f609 	smulbb	r6, r6, r9
 8020724:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020728:	fb07 6705 	mla	r7, r7, r5, r6
 802072c:	10e6      	asrs	r6, r4, #3
 802072e:	00e4      	lsls	r4, r4, #3
 8020730:	b2e4      	uxtb	r4, r4
 8020732:	fb1b fb09 	smulbb	fp, fp, r9
 8020736:	fb14 f405 	smulbb	r4, r4, r5
 802073a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802073e:	b2bf      	uxth	r7, r7
 8020740:	fb06 b605 	mla	r6, r6, r5, fp
 8020744:	fb08 4809 	mla	r8, r8, r9, r4
 8020748:	b2b6      	uxth	r6, r6
 802074a:	fa1f f888 	uxth.w	r8, r8
 802074e:	1c7c      	adds	r4, r7, #1
 8020750:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8020754:	f106 0b01 	add.w	fp, r6, #1
 8020758:	f108 0401 	add.w	r4, r8, #1
 802075c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8020760:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8020764:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020768:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 802076c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020770:	4327      	orrs	r7, r4
 8020772:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020776:	ea47 070b 	orr.w	r7, r7, fp
 802077a:	f820 700a 	strh.w	r7, [r0, sl]
 802077e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020780:	4401      	add	r1, r0
 8020782:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020784:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020788:	4402      	add	r2, r0
 802078a:	e759      	b.n	8020640 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802078c:	b007      	add	sp, #28
 802078e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020794 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020798:	b085      	sub	sp, #20
 802079a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802079e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80207a0:	9203      	str	r2, [sp, #12]
 80207a2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80207a6:	6870      	ldr	r0, [r6, #4]
 80207a8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80207aa:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80207ae:	686f      	ldr	r7, [r5, #4]
 80207b0:	9101      	str	r1, [sp, #4]
 80207b2:	fb00 2404 	mla	r4, r0, r4, r2
 80207b6:	6832      	ldr	r2, [r6, #0]
 80207b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80207bc:	682a      	ldr	r2, [r5, #0]
 80207be:	9202      	str	r2, [sp, #8]
 80207c0:	3704      	adds	r7, #4
 80207c2:	9a01      	ldr	r2, [sp, #4]
 80207c4:	2a00      	cmp	r2, #0
 80207c6:	dc03      	bgt.n	80207d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80207c8:	9a03      	ldr	r2, [sp, #12]
 80207ca:	2a00      	cmp	r2, #0
 80207cc:	f340 80cc 	ble.w	8020968 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80207d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80207d2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80207d6:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80207da:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80207de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80207e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	dd0d      	ble.n	8020804 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80207e8:	1406      	asrs	r6, r0, #16
 80207ea:	d405      	bmi.n	80207f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80207ec:	454e      	cmp	r6, r9
 80207ee:	da03      	bge.n	80207f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80207f0:	1416      	asrs	r6, r2, #16
 80207f2:	d401      	bmi.n	80207f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80207f4:	4546      	cmp	r6, r8
 80207f6:	db06      	blt.n	8020806 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80207f8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80207fa:	4460      	add	r0, ip
 80207fc:	4432      	add	r2, r6
 80207fe:	3b01      	subs	r3, #1
 8020800:	3402      	adds	r4, #2
 8020802:	e7ef      	b.n	80207e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020804:	d00f      	beq.n	8020826 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020806:	1e5e      	subs	r6, r3, #1
 8020808:	fb0c 0e06 	mla	lr, ip, r6, r0
 802080c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8020810:	d543      	bpl.n	802089a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8020812:	4698      	mov	r8, r3
 8020814:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8020818:	f1b8 0f00 	cmp.w	r8, #0
 802081c:	dc71      	bgt.n	8020902 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802081e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020822:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020826:	9b01      	ldr	r3, [sp, #4]
 8020828:	2b00      	cmp	r3, #0
 802082a:	f340 809d 	ble.w	8020968 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802082e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020832:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020836:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802083a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802083c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020840:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020844:	eeb0 6a62 	vmov.f32	s12, s5
 8020848:	ee61 7a27 	vmul.f32	s15, s2, s15
 802084c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020850:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020854:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020858:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802085c:	eeb0 6a43 	vmov.f32	s12, s6
 8020860:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020864:	ee12 2a90 	vmov	r2, s5
 8020868:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802086c:	fb92 fcf3 	sdiv	ip, r2, r3
 8020870:	ee13 2a10 	vmov	r2, s6
 8020874:	fb92 f3f3 	sdiv	r3, r2, r3
 8020878:	9312      	str	r3, [sp, #72]	; 0x48
 802087a:	9b01      	ldr	r3, [sp, #4]
 802087c:	9a03      	ldr	r2, [sp, #12]
 802087e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020882:	3b01      	subs	r3, #1
 8020884:	9301      	str	r3, [sp, #4]
 8020886:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802088a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802088c:	eeb0 3a67 	vmov.f32	s6, s15
 8020890:	bf08      	it	eq
 8020892:	4613      	moveq	r3, r2
 8020894:	eef0 2a47 	vmov.f32	s5, s14
 8020898:	e793      	b.n	80207c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802089a:	45ce      	cmp	lr, r9
 802089c:	dab9      	bge.n	8020812 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802089e:	9912      	ldr	r1, [sp, #72]	; 0x48
 80208a0:	fb01 2606 	mla	r6, r1, r6, r2
 80208a4:	1436      	asrs	r6, r6, #16
 80208a6:	d4b4      	bmi.n	8020812 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80208a8:	4546      	cmp	r6, r8
 80208aa:	dab2      	bge.n	8020812 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80208ac:	4698      	mov	r8, r3
 80208ae:	46a2      	mov	sl, r4
 80208b0:	f1b8 0f00 	cmp.w	r8, #0
 80208b4:	ddb3      	ble.n	802081e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80208b6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80208ba:	9902      	ldr	r1, [sp, #8]
 80208bc:	1416      	asrs	r6, r2, #16
 80208be:	fb09 1606 	mla	r6, r9, r6, r1
 80208c2:	ea4f 4e20 	mov.w	lr, r0, asr #16
 80208c6:	492a      	ldr	r1, [pc, #168]	; (8020970 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 80208c8:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80208cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80208d0:	eb07 0b0e 	add.w	fp, r7, lr
 80208d4:	4460      	add	r0, ip
 80208d6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80208da:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80208de:	00f6      	lsls	r6, r6, #3
 80208e0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 80208e4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80208e8:	ea49 0606 	orr.w	r6, r9, r6
 80208ec:	f817 900e 	ldrb.w	r9, [r7, lr]
 80208f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80208f2:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 80208f6:	f82a 6b02 	strh.w	r6, [sl], #2
 80208fa:	440a      	add	r2, r1
 80208fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8020900:	e7d6      	b.n	80208b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020902:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020906:	d429      	bmi.n	802095c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020908:	68ae      	ldr	r6, [r5, #8]
 802090a:	454e      	cmp	r6, r9
 802090c:	dd26      	ble.n	802095c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802090e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8020912:	d423      	bmi.n	802095c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020914:	68e9      	ldr	r1, [r5, #12]
 8020916:	4559      	cmp	r1, fp
 8020918:	dd20      	ble.n	802095c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802091a:	9902      	ldr	r1, [sp, #8]
 802091c:	fa0f fe86 	sxth.w	lr, r6
 8020920:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8020924:	f06f 0101 	mvn.w	r1, #1
 8020928:	f81e e009 	ldrb.w	lr, [lr, r9]
 802092c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020930:	eb07 060e 	add.w	r6, r7, lr
 8020934:	fb01 f908 	mul.w	r9, r1, r8
 8020938:	f896 b002 	ldrb.w	fp, [r6, #2]
 802093c:	7876      	ldrb	r6, [r6, #1]
 802093e:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8020942:	00f6      	lsls	r6, r6, #3
 8020944:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8020948:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802094c:	ea4b 0606 	orr.w	r6, fp, r6
 8020950:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8020954:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8020958:	f82a 6009 	strh.w	r6, [sl, r9]
 802095c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802095e:	4460      	add	r0, ip
 8020960:	440a      	add	r2, r1
 8020962:	f108 38ff 	add.w	r8, r8, #4294967295
 8020966:	e757      	b.n	8020818 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020968:	b005      	add	sp, #20
 802096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802096e:	bf00      	nop
 8020970:	fffff800 	.word	0xfffff800

08020974 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020978:	b087      	sub	sp, #28
 802097a:	468b      	mov	fp, r1
 802097c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802097e:	9204      	str	r2, [sp, #16]
 8020980:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020984:	9205      	str	r2, [sp, #20]
 8020986:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802098a:	6841      	ldr	r1, [r0, #4]
 802098c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8020990:	fb01 2404 	mla	r4, r1, r4, r2
 8020994:	6802      	ldr	r2, [r0, #0]
 8020996:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802099a:	f8dc 2000 	ldr.w	r2, [ip]
 802099e:	9201      	str	r2, [sp, #4]
 80209a0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80209a4:	3204      	adds	r2, #4
 80209a6:	9202      	str	r2, [sp, #8]
 80209a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80209ac:	f1bb 0f00 	cmp.w	fp, #0
 80209b0:	dc03      	bgt.n	80209ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80209b2:	9a04      	ldr	r2, [sp, #16]
 80209b4:	2a00      	cmp	r2, #0
 80209b6:	f340 8138 	ble.w	8020c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80209ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80209bc:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80209c0:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 80209c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80209c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80209ca:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	dd0e      	ble.n	80209f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80209d2:	1402      	asrs	r2, r0, #16
 80209d4:	d405      	bmi.n	80209e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80209d6:	42ba      	cmp	r2, r7
 80209d8:	da03      	bge.n	80209e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80209da:	140a      	asrs	r2, r1, #16
 80209dc:	d401      	bmi.n	80209e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80209de:	42b2      	cmp	r2, r6
 80209e0:	db07      	blt.n	80209f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80209e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80209e4:	4410      	add	r0, r2
 80209e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80209e8:	3b01      	subs	r3, #1
 80209ea:	4411      	add	r1, r2
 80209ec:	3402      	adds	r4, #2
 80209ee:	e7ee      	b.n	80209ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80209f0:	d019      	beq.n	8020a26 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80209f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80209f4:	1e5a      	subs	r2, r3, #1
 80209f6:	fb05 0502 	mla	r5, r5, r2, r0
 80209fa:	142d      	asrs	r5, r5, #16
 80209fc:	d409      	bmi.n	8020a12 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80209fe:	42bd      	cmp	r5, r7
 8020a00:	da07      	bge.n	8020a12 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020a02:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020a04:	fb05 1202 	mla	r2, r5, r2, r1
 8020a08:	1412      	asrs	r2, r2, #16
 8020a0a:	d402      	bmi.n	8020a12 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020a0c:	42b2      	cmp	r2, r6
 8020a0e:	f2c0 80ac 	blt.w	8020b6a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020a12:	f04f 0e00 	mov.w	lr, #0
 8020a16:	eb03 020e 	add.w	r2, r3, lr
 8020a1a:	2a00      	cmp	r2, #0
 8020a1c:	dc3e      	bgt.n	8020a9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020a1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a22:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020a26:	f1bb 0f00 	cmp.w	fp, #0
 8020a2a:	f340 80fe 	ble.w	8020c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020a2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020a32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020a36:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020a3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a3c:	f1bb 0b01 	subs.w	fp, fp, #1
 8020a40:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a48:	eeb0 6a62 	vmov.f32	s12, s5
 8020a4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a54:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a58:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020a5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a60:	eeb0 6a43 	vmov.f32	s12, s6
 8020a64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a68:	ee12 2a90 	vmov	r2, s5
 8020a6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a70:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a74:	ee13 2a10 	vmov	r2, s6
 8020a78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8020a7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a80:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a84:	9a04      	ldr	r2, [sp, #16]
 8020a86:	9314      	str	r3, [sp, #80]	; 0x50
 8020a88:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a8e:	eeb0 3a67 	vmov.f32	s6, s15
 8020a92:	bf08      	it	eq
 8020a94:	4613      	moveq	r3, r2
 8020a96:	eef0 2a47 	vmov.f32	s5, s14
 8020a9a:	e787      	b.n	80209ac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020a9c:	1406      	asrs	r6, r0, #16
 8020a9e:	d45d      	bmi.n	8020b5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020aa0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8020aa4:	42b5      	cmp	r5, r6
 8020aa6:	dd59      	ble.n	8020b5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020aa8:	140f      	asrs	r7, r1, #16
 8020aaa:	d457      	bmi.n	8020b5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020aac:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020ab0:	42ba      	cmp	r2, r7
 8020ab2:	dd53      	ble.n	8020b5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020ab4:	9a01      	ldr	r2, [sp, #4]
 8020ab6:	b22d      	sxth	r5, r5
 8020ab8:	fb07 2505 	mla	r5, r7, r5, r2
 8020abc:	5daa      	ldrb	r2, [r5, r6]
 8020abe:	9d02      	ldr	r5, [sp, #8]
 8020ac0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8020ac4:	0e2e      	lsrs	r6, r5, #24
 8020ac6:	d049      	beq.n	8020b5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020ac8:	f06f 0201 	mvn.w	r2, #1
 8020acc:	fb02 f20e 	mul.w	r2, r2, lr
 8020ad0:	9203      	str	r2, [sp, #12]
 8020ad2:	f834 8002 	ldrh.w	r8, [r4, r2]
 8020ad6:	9a05      	ldr	r2, [sp, #20]
 8020ad8:	4356      	muls	r6, r2
 8020ada:	1c72      	adds	r2, r6, #1
 8020adc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8020ae0:	1212      	asrs	r2, r2, #8
 8020ae2:	fa1f f982 	uxth.w	r9, r2
 8020ae6:	ea4f 2728 	mov.w	r7, r8, asr #8
 8020aea:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020aee:	43d2      	mvns	r2, r2
 8020af0:	b2d2      	uxtb	r2, r2
 8020af2:	fb16 f609 	smulbb	r6, r6, r9
 8020af6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020afa:	fb07 6702 	mla	r7, r7, r2, r6
 8020afe:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020b02:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020b06:	b2ed      	uxtb	r5, r5
 8020b08:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020b0c:	fa5f f888 	uxtb.w	r8, r8
 8020b10:	fb15 f509 	smulbb	r5, r5, r9
 8020b14:	fb08 5502 	mla	r5, r8, r2, r5
 8020b18:	b2bf      	uxth	r7, r7
 8020b1a:	fb1a fa09 	smulbb	sl, sl, r9
 8020b1e:	b2ad      	uxth	r5, r5
 8020b20:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020b24:	fb06 a602 	mla	r6, r6, r2, sl
 8020b28:	1c7a      	adds	r2, r7, #1
 8020b2a:	f105 0a01 	add.w	sl, r5, #1
 8020b2e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020b32:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020b36:	b2b6      	uxth	r6, r6
 8020b38:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020b3c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020b40:	ea4a 0707 	orr.w	r7, sl, r7
 8020b44:	f106 0a01 	add.w	sl, r6, #1
 8020b48:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020b4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020b50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020b54:	9a03      	ldr	r2, [sp, #12]
 8020b56:	ea47 070a 	orr.w	r7, r7, sl
 8020b5a:	52a7      	strh	r7, [r4, r2]
 8020b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020b5e:	4410      	add	r0, r2
 8020b60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b62:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020b66:	4411      	add	r1, r2
 8020b68:	e755      	b.n	8020a16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020b6a:	f04f 0800 	mov.w	r8, #0
 8020b6e:	eba3 0208 	sub.w	r2, r3, r8
 8020b72:	2a00      	cmp	r2, #0
 8020b74:	f77f af53 	ble.w	8020a1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020b78:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8020b7c:	9f01      	ldr	r7, [sp, #4]
 8020b7e:	140a      	asrs	r2, r1, #16
 8020b80:	1405      	asrs	r5, r0, #16
 8020b82:	fb06 7202 	mla	r2, r6, r2, r7
 8020b86:	5d52      	ldrb	r2, [r2, r5]
 8020b88:	9d02      	ldr	r5, [sp, #8]
 8020b8a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8020b8e:	0e2e      	lsrs	r6, r5, #24
 8020b90:	d044      	beq.n	8020c1c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020b92:	9a05      	ldr	r2, [sp, #20]
 8020b94:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020b98:	4356      	muls	r6, r2
 8020b9a:	1c72      	adds	r2, r6, #1
 8020b9c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8020ba0:	1212      	asrs	r2, r2, #8
 8020ba2:	fa1f f982 	uxth.w	r9, r2
 8020ba6:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020baa:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020bae:	43d2      	mvns	r2, r2
 8020bb0:	b2d2      	uxtb	r2, r2
 8020bb2:	fb16 f609 	smulbb	r6, r6, r9
 8020bb6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020bba:	fb07 6702 	mla	r7, r7, r2, r6
 8020bbe:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020bc2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020bc6:	b2ed      	uxtb	r5, r5
 8020bc8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020bcc:	fa5f fe8e 	uxtb.w	lr, lr
 8020bd0:	fb15 f509 	smulbb	r5, r5, r9
 8020bd4:	fb0e 5502 	mla	r5, lr, r2, r5
 8020bd8:	b2bf      	uxth	r7, r7
 8020bda:	fb1a fa09 	smulbb	sl, sl, r9
 8020bde:	b2ad      	uxth	r5, r5
 8020be0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020be4:	fb06 a602 	mla	r6, r6, r2, sl
 8020be8:	1c7a      	adds	r2, r7, #1
 8020bea:	f105 0a01 	add.w	sl, r5, #1
 8020bee:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020bf2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020bf6:	b2b6      	uxth	r6, r6
 8020bf8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020bfc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020c00:	ea4a 0707 	orr.w	r7, sl, r7
 8020c04:	f106 0a01 	add.w	sl, r6, #1
 8020c08:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020c0c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020c10:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020c14:	ea47 070a 	orr.w	r7, r7, sl
 8020c18:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020c1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020c1e:	4410      	add	r0, r2
 8020c20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c22:	f108 0801 	add.w	r8, r8, #1
 8020c26:	4411      	add	r1, r2
 8020c28:	e7a1      	b.n	8020b6e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020c2a:	b007      	add	sp, #28
 8020c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c34:	b085      	sub	sp, #20
 8020c36:	468b      	mov	fp, r1
 8020c38:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020c3a:	9203      	str	r2, [sp, #12]
 8020c3c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020c40:	6841      	ldr	r1, [r0, #4]
 8020c42:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8020c46:	fb01 2404 	mla	r4, r1, r4, r2
 8020c4a:	6802      	ldr	r2, [r0, #0]
 8020c4c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020c50:	f8de 2000 	ldr.w	r2, [lr]
 8020c54:	9200      	str	r2, [sp, #0]
 8020c56:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020c5a:	3204      	adds	r2, #4
 8020c5c:	9201      	str	r2, [sp, #4]
 8020c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020c62:	f1bb 0f00 	cmp.w	fp, #0
 8020c66:	dc03      	bgt.n	8020c70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020c68:	9a03      	ldr	r2, [sp, #12]
 8020c6a:	2a00      	cmp	r2, #0
 8020c6c:	f340 8153 	ble.w	8020f16 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8020c70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c72:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020c76:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020c7a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020c7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020c80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	dd0e      	ble.n	8020ca6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020c88:	1408      	asrs	r0, r1, #16
 8020c8a:	d405      	bmi.n	8020c98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020c8c:	42b8      	cmp	r0, r7
 8020c8e:	da03      	bge.n	8020c98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020c90:	1410      	asrs	r0, r2, #16
 8020c92:	d401      	bmi.n	8020c98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020c94:	42b0      	cmp	r0, r6
 8020c96:	db07      	blt.n	8020ca8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020c98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c9a:	4401      	add	r1, r0
 8020c9c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020c9e:	3b01      	subs	r3, #1
 8020ca0:	4402      	add	r2, r0
 8020ca2:	3402      	adds	r4, #2
 8020ca4:	e7ee      	b.n	8020c84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020ca6:	d017      	beq.n	8020cd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020ca8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020caa:	1e58      	subs	r0, r3, #1
 8020cac:	fb05 1500 	mla	r5, r5, r0, r1
 8020cb0:	142d      	asrs	r5, r5, #16
 8020cb2:	d409      	bmi.n	8020cc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020cb4:	42bd      	cmp	r5, r7
 8020cb6:	da07      	bge.n	8020cc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020cb8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020cba:	fb05 2000 	mla	r0, r5, r0, r2
 8020cbe:	1400      	asrs	r0, r0, #16
 8020cc0:	d402      	bmi.n	8020cc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020cc2:	42b0      	cmp	r0, r6
 8020cc4:	f2c0 80bc 	blt.w	8020e40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8020cc8:	2600      	movs	r6, #0
 8020cca:	1998      	adds	r0, r3, r6
 8020ccc:	2800      	cmp	r0, #0
 8020cce:	dc3e      	bgt.n	8020d4e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020cd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020cd4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020cd8:	f1bb 0f00 	cmp.w	fp, #0
 8020cdc:	f340 811b 	ble.w	8020f16 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8020ce0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ce4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ce8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020cee:	f1bb 0b01 	subs.w	fp, fp, #1
 8020cf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020cf6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020cfa:	eeb0 6a62 	vmov.f32	s12, s5
 8020cfe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020d02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020d06:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020d0a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020d0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020d12:	eeb0 6a43 	vmov.f32	s12, s6
 8020d16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020d1a:	ee12 2a90 	vmov	r2, s5
 8020d1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d26:	ee13 2a10 	vmov	r2, s6
 8020d2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020d2e:	9311      	str	r3, [sp, #68]	; 0x44
 8020d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8020d36:	9a03      	ldr	r2, [sp, #12]
 8020d38:	9312      	str	r3, [sp, #72]	; 0x48
 8020d3a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d40:	eeb0 3a67 	vmov.f32	s6, s15
 8020d44:	bf08      	it	eq
 8020d46:	4613      	moveq	r3, r2
 8020d48:	eef0 2a47 	vmov.f32	s5, s14
 8020d4c:	e789      	b.n	8020c62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020d4e:	140f      	asrs	r7, r1, #16
 8020d50:	d426      	bmi.n	8020da0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020d52:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020d56:	42bd      	cmp	r5, r7
 8020d58:	dd22      	ble.n	8020da0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020d5a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020d5e:	d41f      	bmi.n	8020da0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020d60:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020d64:	4560      	cmp	r0, ip
 8020d66:	dd1b      	ble.n	8020da0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020d68:	9800      	ldr	r0, [sp, #0]
 8020d6a:	b22d      	sxth	r5, r5
 8020d6c:	fb0c 0505 	mla	r5, ip, r5, r0
 8020d70:	5de8      	ldrb	r0, [r5, r7]
 8020d72:	9d01      	ldr	r5, [sp, #4]
 8020d74:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8020d78:	0e07      	lsrs	r7, r0, #24
 8020d7a:	2fff      	cmp	r7, #255	; 0xff
 8020d7c:	d116      	bne.n	8020dac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020d7e:	f06f 0501 	mvn.w	r5, #1
 8020d82:	fb05 f706 	mul.w	r7, r5, r6
 8020d86:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020d8a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020d8e:	0945      	lsrs	r5, r0, #5
 8020d90:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020d94:	ea4c 0505 	orr.w	r5, ip, r5
 8020d98:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020d9c:	4305      	orrs	r5, r0
 8020d9e:	53e5      	strh	r5, [r4, r7]
 8020da0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020da2:	4401      	add	r1, r0
 8020da4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020da6:	3e01      	subs	r6, #1
 8020da8:	4402      	add	r2, r0
 8020daa:	e78e      	b.n	8020cca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020dac:	b2fd      	uxtb	r5, r7
 8020dae:	2f00      	cmp	r7, #0
 8020db0:	d0f6      	beq.n	8020da0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020db2:	f06f 0701 	mvn.w	r7, #1
 8020db6:	4377      	muls	r7, r6
 8020db8:	fa1f f985 	uxth.w	r9, r5
 8020dbc:	f834 8007 	ldrh.w	r8, [r4, r7]
 8020dc0:	9702      	str	r7, [sp, #8]
 8020dc2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020dc6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020dca:	43ed      	mvns	r5, r5
 8020dcc:	b2ed      	uxtb	r5, r5
 8020dce:	fb17 f709 	smulbb	r7, r7, r9
 8020dd2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020dd6:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020dda:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020dde:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8020de2:	b2c0      	uxtb	r0, r0
 8020de4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020de8:	fa5f f888 	uxtb.w	r8, r8
 8020dec:	fb10 f009 	smulbb	r0, r0, r9
 8020df0:	fb08 0005 	mla	r0, r8, r5, r0
 8020df4:	b280      	uxth	r0, r0
 8020df6:	fa1f fc8c 	uxth.w	ip, ip
 8020dfa:	fb1a fa09 	smulbb	sl, sl, r9
 8020dfe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020e02:	fb07 a705 	mla	r7, r7, r5, sl
 8020e06:	f100 0a01 	add.w	sl, r0, #1
 8020e0a:	f10c 0501 	add.w	r5, ip, #1
 8020e0e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020e12:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020e16:	b2bf      	uxth	r7, r7
 8020e18:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020e1c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020e20:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020e24:	f107 0a01 	add.w	sl, r7, #1
 8020e28:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020e2c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020e30:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020e34:	9802      	ldr	r0, [sp, #8]
 8020e36:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020e3a:	f824 c000 	strh.w	ip, [r4, r0]
 8020e3e:	e7af      	b.n	8020da0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e40:	f04f 0800 	mov.w	r8, #0
 8020e44:	eba3 0008 	sub.w	r0, r3, r8
 8020e48:	2800      	cmp	r0, #0
 8020e4a:	f77f af41 	ble.w	8020cd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020e4e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020e52:	9f00      	ldr	r7, [sp, #0]
 8020e54:	1410      	asrs	r0, r2, #16
 8020e56:	140d      	asrs	r5, r1, #16
 8020e58:	fb06 7000 	mla	r0, r6, r0, r7
 8020e5c:	5d40      	ldrb	r0, [r0, r5]
 8020e5e:	9d01      	ldr	r5, [sp, #4]
 8020e60:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020e64:	0e2e      	lsrs	r6, r5, #24
 8020e66:	2eff      	cmp	r6, #255	; 0xff
 8020e68:	d112      	bne.n	8020e90 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8020e6a:	482c      	ldr	r0, [pc, #176]	; (8020f1c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8020e6c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020e70:	0968      	lsrs	r0, r5, #5
 8020e72:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020e76:	4330      	orrs	r0, r6
 8020e78:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020e7c:	4328      	orrs	r0, r5
 8020e7e:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8020e82:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020e84:	4401      	add	r1, r0
 8020e86:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020e88:	f108 0801 	add.w	r8, r8, #1
 8020e8c:	4402      	add	r2, r0
 8020e8e:	e7d9      	b.n	8020e44 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020e90:	b2f0      	uxtb	r0, r6
 8020e92:	2e00      	cmp	r6, #0
 8020e94:	d0f5      	beq.n	8020e82 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020e96:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8020e9a:	fa1f f980 	uxth.w	r9, r0
 8020e9e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020ea2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020ea6:	43c0      	mvns	r0, r0
 8020ea8:	b2c0      	uxtb	r0, r0
 8020eaa:	fb16 f609 	smulbb	r6, r6, r9
 8020eae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020eb2:	fb07 6700 	mla	r7, r7, r0, r6
 8020eb6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020eba:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020ebe:	b2ed      	uxtb	r5, r5
 8020ec0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020ec4:	fa5f fc8c 	uxtb.w	ip, ip
 8020ec8:	fb15 f509 	smulbb	r5, r5, r9
 8020ecc:	fb0c 5500 	mla	r5, ip, r0, r5
 8020ed0:	b2bf      	uxth	r7, r7
 8020ed2:	fb1a fa09 	smulbb	sl, sl, r9
 8020ed6:	b2ad      	uxth	r5, r5
 8020ed8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020edc:	fb06 a600 	mla	r6, r6, r0, sl
 8020ee0:	1c78      	adds	r0, r7, #1
 8020ee2:	f105 0a01 	add.w	sl, r5, #1
 8020ee6:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020eea:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020eee:	b2b6      	uxth	r6, r6
 8020ef0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020ef4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020ef8:	ea4a 0707 	orr.w	r7, sl, r7
 8020efc:	f106 0a01 	add.w	sl, r6, #1
 8020f00:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020f04:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020f08:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020f0c:	ea47 070a 	orr.w	r7, r7, sl
 8020f10:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020f14:	e7b5      	b.n	8020e82 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020f16:	b005      	add	sp, #20
 8020f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f1c:	fffff800 	.word	0xfffff800

08020f20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f24:	b087      	sub	sp, #28
 8020f26:	468b      	mov	fp, r1
 8020f28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020f2a:	9204      	str	r2, [sp, #16]
 8020f2c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020f30:	9205      	str	r2, [sp, #20]
 8020f32:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8020f36:	6861      	ldr	r1, [r4, #4]
 8020f38:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8020f3c:	fb01 2000 	mla	r0, r1, r0, r2
 8020f40:	6822      	ldr	r2, [r4, #0]
 8020f42:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020f46:	f8de 2000 	ldr.w	r2, [lr]
 8020f4a:	9201      	str	r2, [sp, #4]
 8020f4c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020f50:	9202      	str	r2, [sp, #8]
 8020f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020f56:	f1bb 0f00 	cmp.w	fp, #0
 8020f5a:	dc03      	bgt.n	8020f64 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020f5c:	9a04      	ldr	r2, [sp, #16]
 8020f5e:	2a00      	cmp	r2, #0
 8020f60:	f340 8142 	ble.w	80211e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020f64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020f66:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020f6a:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020f6e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020f72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020f74:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	dd0e      	ble.n	8020f9a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020f7c:	140c      	asrs	r4, r1, #16
 8020f7e:	d405      	bmi.n	8020f8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020f80:	42bc      	cmp	r4, r7
 8020f82:	da03      	bge.n	8020f8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020f84:	1414      	asrs	r4, r2, #16
 8020f86:	d401      	bmi.n	8020f8c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020f88:	42b4      	cmp	r4, r6
 8020f8a:	db07      	blt.n	8020f9c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020f8c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f8e:	4421      	add	r1, r4
 8020f90:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020f92:	3b01      	subs	r3, #1
 8020f94:	4422      	add	r2, r4
 8020f96:	3002      	adds	r0, #2
 8020f98:	e7ee      	b.n	8020f78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020f9a:	d019      	beq.n	8020fd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020f9c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020f9e:	1e5c      	subs	r4, r3, #1
 8020fa0:	fb05 1504 	mla	r5, r5, r4, r1
 8020fa4:	142d      	asrs	r5, r5, #16
 8020fa6:	d409      	bmi.n	8020fbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020fa8:	42bd      	cmp	r5, r7
 8020faa:	da07      	bge.n	8020fbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020fac:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020fae:	fb05 2404 	mla	r4, r5, r4, r2
 8020fb2:	1424      	asrs	r4, r4, #16
 8020fb4:	d402      	bmi.n	8020fbc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020fb6:	42b4      	cmp	r4, r6
 8020fb8:	f2c0 80b1 	blt.w	802111e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8020fbc:	f04f 0800 	mov.w	r8, #0
 8020fc0:	eb03 0408 	add.w	r4, r3, r8
 8020fc4:	2c00      	cmp	r4, #0
 8020fc6:	dc3e      	bgt.n	8021046 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020fc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020fcc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020fd0:	f1bb 0f00 	cmp.w	fp, #0
 8020fd4:	f340 8108 	ble.w	80211e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020fd8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020fdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020fe0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020fe6:	f1bb 0b01 	subs.w	fp, fp, #1
 8020fea:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020fee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020ff2:	eeb0 6a62 	vmov.f32	s12, s5
 8020ff6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020ffa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ffe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021002:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021006:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802100a:	eeb0 6a43 	vmov.f32	s12, s6
 802100e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021012:	ee12 2a90 	vmov	r2, s5
 8021016:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802101a:	fb92 f3f3 	sdiv	r3, r2, r3
 802101e:	ee13 2a10 	vmov	r2, s6
 8021022:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021026:	9313      	str	r3, [sp, #76]	; 0x4c
 8021028:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802102a:	fb92 f3f3 	sdiv	r3, r2, r3
 802102e:	9a04      	ldr	r2, [sp, #16]
 8021030:	9314      	str	r3, [sp, #80]	; 0x50
 8021032:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021036:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021038:	eeb0 3a67 	vmov.f32	s6, s15
 802103c:	bf08      	it	eq
 802103e:	4613      	moveq	r3, r2
 8021040:	eef0 2a47 	vmov.f32	s5, s14
 8021044:	e787      	b.n	8020f56 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8021046:	140e      	asrs	r6, r1, #16
 8021048:	d462      	bmi.n	8021110 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802104a:	f8de 5008 	ldr.w	r5, [lr, #8]
 802104e:	42b5      	cmp	r5, r6
 8021050:	dd5e      	ble.n	8021110 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021052:	1417      	asrs	r7, r2, #16
 8021054:	d45c      	bmi.n	8021110 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021056:	f8de 400c 	ldr.w	r4, [lr, #12]
 802105a:	42bc      	cmp	r4, r7
 802105c:	dd58      	ble.n	8021110 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802105e:	b22d      	sxth	r5, r5
 8021060:	fb07 6505 	mla	r5, r7, r5, r6
 8021064:	9c02      	ldr	r4, [sp, #8]
 8021066:	5d66      	ldrb	r6, [r4, r5]
 8021068:	2e00      	cmp	r6, #0
 802106a:	d051      	beq.n	8021110 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802106c:	9c01      	ldr	r4, [sp, #4]
 802106e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8021072:	f06f 0401 	mvn.w	r4, #1
 8021076:	fb04 f408 	mul.w	r4, r4, r8
 802107a:	9403      	str	r4, [sp, #12]
 802107c:	5b05      	ldrh	r5, [r0, r4]
 802107e:	9c05      	ldr	r4, [sp, #20]
 8021080:	4366      	muls	r6, r4
 8021082:	1c74      	adds	r4, r6, #1
 8021084:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8021088:	1224      	asrs	r4, r4, #8
 802108a:	b2a7      	uxth	r7, r4
 802108c:	122e      	asrs	r6, r5, #8
 802108e:	43e4      	mvns	r4, r4
 8021090:	b2e4      	uxtb	r4, r4
 8021092:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8021096:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802109a:	fb16 f604 	smulbb	r6, r6, r4
 802109e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80210a2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80210a6:	00ed      	lsls	r5, r5, #3
 80210a8:	fb0c 6c07 	mla	ip, ip, r7, r6
 80210ac:	b2ed      	uxtb	r5, r5
 80210ae:	ea4f 06e9 	mov.w	r6, r9, asr #3
 80210b2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80210b6:	fb15 f504 	smulbb	r5, r5, r4
 80210ba:	fa5f f989 	uxtb.w	r9, r9
 80210be:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80210c2:	fb09 5507 	mla	r5, r9, r7, r5
 80210c6:	fb1a fa04 	smulbb	sl, sl, r4
 80210ca:	fa1f fc8c 	uxth.w	ip, ip
 80210ce:	b2ad      	uxth	r5, r5
 80210d0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80210d4:	fb06 a607 	mla	r6, r6, r7, sl
 80210d8:	f10c 0401 	add.w	r4, ip, #1
 80210dc:	f105 0a01 	add.w	sl, r5, #1
 80210e0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80210e4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80210e8:	b2b6      	uxth	r6, r6
 80210ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80210ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80210f2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80210f6:	f106 0a01 	add.w	sl, r6, #1
 80210fa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80210fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021102:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021106:	9c03      	ldr	r4, [sp, #12]
 8021108:	ea4c 0c0a 	orr.w	ip, ip, sl
 802110c:	f820 c004 	strh.w	ip, [r0, r4]
 8021110:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021112:	4421      	add	r1, r4
 8021114:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021116:	f108 38ff 	add.w	r8, r8, #4294967295
 802111a:	4422      	add	r2, r4
 802111c:	e750      	b.n	8020fc0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802111e:	f04f 0900 	mov.w	r9, #0
 8021122:	eba3 0409 	sub.w	r4, r3, r9
 8021126:	2c00      	cmp	r4, #0
 8021128:	f77f af4e 	ble.w	8020fc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802112c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8021130:	140d      	asrs	r5, r1, #16
 8021132:	1414      	asrs	r4, r2, #16
 8021134:	fb06 5404 	mla	r4, r6, r4, r5
 8021138:	9d02      	ldr	r5, [sp, #8]
 802113a:	5d2e      	ldrb	r6, [r5, r4]
 802113c:	2e00      	cmp	r6, #0
 802113e:	d04c      	beq.n	80211da <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021140:	9d01      	ldr	r5, [sp, #4]
 8021142:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8021146:	9c05      	ldr	r4, [sp, #20]
 8021148:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 802114c:	4366      	muls	r6, r4
 802114e:	1c74      	adds	r4, r6, #1
 8021150:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8021154:	1224      	asrs	r4, r4, #8
 8021156:	b2a7      	uxth	r7, r4
 8021158:	122e      	asrs	r6, r5, #8
 802115a:	43e4      	mvns	r4, r4
 802115c:	b2e4      	uxtb	r4, r4
 802115e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8021162:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021166:	fb16 f604 	smulbb	r6, r6, r4
 802116a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802116e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021172:	00ed      	lsls	r5, r5, #3
 8021174:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021178:	b2ed      	uxtb	r5, r5
 802117a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 802117e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021182:	fb15 f504 	smulbb	r5, r5, r4
 8021186:	fa5f f888 	uxtb.w	r8, r8
 802118a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802118e:	fb08 5507 	mla	r5, r8, r7, r5
 8021192:	fb1a fa04 	smulbb	sl, sl, r4
 8021196:	fa1f fc8c 	uxth.w	ip, ip
 802119a:	b2ad      	uxth	r5, r5
 802119c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80211a0:	fb06 a607 	mla	r6, r6, r7, sl
 80211a4:	f10c 0401 	add.w	r4, ip, #1
 80211a8:	f105 0a01 	add.w	sl, r5, #1
 80211ac:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80211b0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80211b4:	b2b6      	uxth	r6, r6
 80211b6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80211ba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80211be:	ea4a 0c0c 	orr.w	ip, sl, ip
 80211c2:	f106 0a01 	add.w	sl, r6, #1
 80211c6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80211ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80211ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80211d2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80211d6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80211da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80211dc:	4421      	add	r1, r4
 80211de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80211e0:	f109 0901 	add.w	r9, r9, #1
 80211e4:	4422      	add	r2, r4
 80211e6:	e79c      	b.n	8021122 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80211e8:	b007      	add	sp, #28
 80211ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080211ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211f2:	b085      	sub	sp, #20
 80211f4:	468b      	mov	fp, r1
 80211f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80211f8:	9203      	str	r2, [sp, #12]
 80211fa:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80211fe:	6861      	ldr	r1, [r4, #4]
 8021200:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8021204:	fb01 2000 	mla	r0, r1, r0, r2
 8021208:	6822      	ldr	r2, [r4, #0]
 802120a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 802120e:	f8d8 2000 	ldr.w	r2, [r8]
 8021212:	9200      	str	r2, [sp, #0]
 8021214:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8021218:	9201      	str	r2, [sp, #4]
 802121a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802121e:	f1bb 0f00 	cmp.w	fp, #0
 8021222:	dc03      	bgt.n	802122c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021224:	9a03      	ldr	r2, [sp, #12]
 8021226:	2a00      	cmp	r2, #0
 8021228:	f340 8146 	ble.w	80214b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802122c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802122e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8021232:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8021236:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802123a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802123c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021240:	2b00      	cmp	r3, #0
 8021242:	dd0e      	ble.n	8021262 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021244:	140c      	asrs	r4, r1, #16
 8021246:	d405      	bmi.n	8021254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021248:	42bc      	cmp	r4, r7
 802124a:	da03      	bge.n	8021254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802124c:	1414      	asrs	r4, r2, #16
 802124e:	d401      	bmi.n	8021254 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021250:	42b4      	cmp	r4, r6
 8021252:	db07      	blt.n	8021264 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021254:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021256:	4421      	add	r1, r4
 8021258:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802125a:	3b01      	subs	r3, #1
 802125c:	4422      	add	r2, r4
 802125e:	3002      	adds	r0, #2
 8021260:	e7ee      	b.n	8021240 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021262:	d017      	beq.n	8021294 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021264:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021266:	1e5c      	subs	r4, r3, #1
 8021268:	fb05 1504 	mla	r5, r5, r4, r1
 802126c:	142d      	asrs	r5, r5, #16
 802126e:	d409      	bmi.n	8021284 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021270:	42bd      	cmp	r5, r7
 8021272:	da07      	bge.n	8021284 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021274:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021276:	fb05 2404 	mla	r4, r5, r4, r2
 802127a:	1424      	asrs	r4, r4, #16
 802127c:	d402      	bmi.n	8021284 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802127e:	42b4      	cmp	r4, r6
 8021280:	f2c0 80b3 	blt.w	80213ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8021284:	2600      	movs	r6, #0
 8021286:	199c      	adds	r4, r3, r6
 8021288:	2c00      	cmp	r4, #0
 802128a:	dc3e      	bgt.n	802130a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802128c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021290:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021294:	f1bb 0f00 	cmp.w	fp, #0
 8021298:	f340 810e 	ble.w	80214b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802129c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80212a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80212a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80212a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212aa:	f1bb 0b01 	subs.w	fp, fp, #1
 80212ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80212b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80212b6:	eeb0 6a62 	vmov.f32	s12, s5
 80212ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80212be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80212c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80212c6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80212ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80212ce:	eeb0 6a43 	vmov.f32	s12, s6
 80212d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80212d6:	ee12 2a90 	vmov	r2, s5
 80212da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80212de:	fb92 f3f3 	sdiv	r3, r2, r3
 80212e2:	ee13 2a10 	vmov	r2, s6
 80212e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80212ea:	9311      	str	r3, [sp, #68]	; 0x44
 80212ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80212f2:	9a03      	ldr	r2, [sp, #12]
 80212f4:	9312      	str	r3, [sp, #72]	; 0x48
 80212f6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80212fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212fc:	eeb0 3a67 	vmov.f32	s6, s15
 8021300:	bf08      	it	eq
 8021302:	4613      	moveq	r3, r2
 8021304:	eef0 2a47 	vmov.f32	s5, s14
 8021308:	e789      	b.n	802121e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802130a:	140f      	asrs	r7, r1, #16
 802130c:	d418      	bmi.n	8021340 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802130e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8021312:	42bd      	cmp	r5, r7
 8021314:	dd14      	ble.n	8021340 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021316:	ea5f 4c22 	movs.w	ip, r2, asr #16
 802131a:	d411      	bmi.n	8021340 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802131c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8021320:	4564      	cmp	r4, ip
 8021322:	dd0d      	ble.n	8021340 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021324:	b22d      	sxth	r5, r5
 8021326:	fb0c 7505 	mla	r5, ip, r5, r7
 802132a:	9c01      	ldr	r4, [sp, #4]
 802132c:	5d64      	ldrb	r4, [r4, r5]
 802132e:	2cff      	cmp	r4, #255	; 0xff
 8021330:	d10c      	bne.n	802134c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8021332:	9c00      	ldr	r4, [sp, #0]
 8021334:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8021338:	f06f 0401 	mvn.w	r4, #1
 802133c:	4374      	muls	r4, r6
 802133e:	5305      	strh	r5, [r0, r4]
 8021340:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021342:	4421      	add	r1, r4
 8021344:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021346:	3e01      	subs	r6, #1
 8021348:	4422      	add	r2, r4
 802134a:	e79c      	b.n	8021286 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802134c:	2c00      	cmp	r4, #0
 802134e:	d0f7      	beq.n	8021340 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021350:	9f00      	ldr	r7, [sp, #0]
 8021352:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8021356:	f06f 0501 	mvn.w	r5, #1
 802135a:	4375      	muls	r5, r6
 802135c:	9502      	str	r5, [sp, #8]
 802135e:	5b45      	ldrh	r5, [r0, r5]
 8021360:	fa1f fc84 	uxth.w	ip, r4
 8021364:	122f      	asrs	r7, r5, #8
 8021366:	43e4      	mvns	r4, r4
 8021368:	b2e4      	uxtb	r4, r4
 802136a:	ea4f 2e29 	mov.w	lr, r9, asr #8
 802136e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021372:	fb17 f704 	smulbb	r7, r7, r4
 8021376:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802137a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802137e:	00ed      	lsls	r5, r5, #3
 8021380:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8021384:	b2ed      	uxtb	r5, r5
 8021386:	ea4f 07e9 	mov.w	r7, r9, asr #3
 802138a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 802138e:	fb15 f504 	smulbb	r5, r5, r4
 8021392:	fa5f f989 	uxtb.w	r9, r9
 8021396:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802139a:	fb09 550c 	mla	r5, r9, ip, r5
 802139e:	fb1a fa04 	smulbb	sl, sl, r4
 80213a2:	fa1f fe8e 	uxth.w	lr, lr
 80213a6:	b2ad      	uxth	r5, r5
 80213a8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80213ac:	fb07 a70c 	mla	r7, r7, ip, sl
 80213b0:	f10e 0401 	add.w	r4, lr, #1
 80213b4:	f105 0a01 	add.w	sl, r5, #1
 80213b8:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80213bc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80213c0:	b2bf      	uxth	r7, r7
 80213c2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80213c6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80213ca:	ea4a 0e0e 	orr.w	lr, sl, lr
 80213ce:	f107 0a01 	add.w	sl, r7, #1
 80213d2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80213d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80213da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80213de:	9c02      	ldr	r4, [sp, #8]
 80213e0:	ea4e 0e0a 	orr.w	lr, lr, sl
 80213e4:	f820 e004 	strh.w	lr, [r0, r4]
 80213e8:	e7aa      	b.n	8021340 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80213ea:	f04f 0900 	mov.w	r9, #0
 80213ee:	eba3 0409 	sub.w	r4, r3, r9
 80213f2:	2c00      	cmp	r4, #0
 80213f4:	f77f af4a 	ble.w	802128c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80213f8:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80213fc:	1414      	asrs	r4, r2, #16
 80213fe:	140d      	asrs	r5, r1, #16
 8021400:	fb06 5504 	mla	r5, r6, r4, r5
 8021404:	9c01      	ldr	r4, [sp, #4]
 8021406:	5d64      	ldrb	r4, [r4, r5]
 8021408:	2cff      	cmp	r4, #255	; 0xff
 802140a:	d10b      	bne.n	8021424 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802140c:	9c00      	ldr	r4, [sp, #0]
 802140e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8021412:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8021416:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021418:	4421      	add	r1, r4
 802141a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802141c:	f109 0901 	add.w	r9, r9, #1
 8021420:	4422      	add	r2, r4
 8021422:	e7e4      	b.n	80213ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021424:	2c00      	cmp	r4, #0
 8021426:	d0f6      	beq.n	8021416 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021428:	9e00      	ldr	r6, [sp, #0]
 802142a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802142e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8021432:	b2a7      	uxth	r7, r4
 8021434:	122e      	asrs	r6, r5, #8
 8021436:	43e4      	mvns	r4, r4
 8021438:	b2e4      	uxtb	r4, r4
 802143a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802143e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021442:	fb16 f604 	smulbb	r6, r6, r4
 8021446:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802144a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802144e:	00ed      	lsls	r5, r5, #3
 8021450:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021454:	b2ed      	uxtb	r5, r5
 8021456:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802145a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802145e:	fb15 f504 	smulbb	r5, r5, r4
 8021462:	fa5f fe8e 	uxtb.w	lr, lr
 8021466:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802146a:	fb0e 5507 	mla	r5, lr, r7, r5
 802146e:	fb1a fa04 	smulbb	sl, sl, r4
 8021472:	fa1f fc8c 	uxth.w	ip, ip
 8021476:	b2ad      	uxth	r5, r5
 8021478:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802147c:	fb06 a607 	mla	r6, r6, r7, sl
 8021480:	f10c 0401 	add.w	r4, ip, #1
 8021484:	f105 0a01 	add.w	sl, r5, #1
 8021488:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802148c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021490:	b2b6      	uxth	r6, r6
 8021492:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021496:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802149a:	ea4a 0c0c 	orr.w	ip, sl, ip
 802149e:	f106 0a01 	add.w	sl, r6, #1
 80214a2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80214a6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80214aa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80214ae:	ea4c 0c0a 	orr.w	ip, ip, sl
 80214b2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80214b6:	e7ae      	b.n	8021416 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80214b8:	b005      	add	sp, #20
 80214ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080214be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80214be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214c2:	b085      	sub	sp, #20
 80214c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80214c6:	9203      	str	r2, [sp, #12]
 80214c8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80214cc:	9201      	str	r2, [sp, #4]
 80214ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80214d2:	9100      	str	r1, [sp, #0]
 80214d4:	6841      	ldr	r1, [r0, #4]
 80214d6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80214da:	fb01 2404 	mla	r4, r1, r4, r2
 80214de:	6802      	ldr	r2, [r0, #0]
 80214e0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80214e4:	f8de 2000 	ldr.w	r2, [lr]
 80214e8:	9202      	str	r2, [sp, #8]
 80214ea:	9a01      	ldr	r2, [sp, #4]
 80214ec:	43d6      	mvns	r6, r2
 80214ee:	b2f6      	uxtb	r6, r6
 80214f0:	9a00      	ldr	r2, [sp, #0]
 80214f2:	2a00      	cmp	r2, #0
 80214f4:	dc03      	bgt.n	80214fe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80214f6:	9a03      	ldr	r2, [sp, #12]
 80214f8:	2a00      	cmp	r2, #0
 80214fa:	f340 8124 	ble.w	8021746 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80214fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021500:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8021504:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8021508:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802150c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802150e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021512:	2b00      	cmp	r3, #0
 8021514:	dd0e      	ble.n	8021534 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021516:	1408      	asrs	r0, r1, #16
 8021518:	d405      	bmi.n	8021526 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802151a:	4560      	cmp	r0, ip
 802151c:	da03      	bge.n	8021526 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802151e:	1410      	asrs	r0, r2, #16
 8021520:	d401      	bmi.n	8021526 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021522:	42b8      	cmp	r0, r7
 8021524:	db07      	blt.n	8021536 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021526:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021528:	4401      	add	r1, r0
 802152a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802152c:	3b01      	subs	r3, #1
 802152e:	4402      	add	r2, r0
 8021530:	3402      	adds	r4, #2
 8021532:	e7ee      	b.n	8021512 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8021534:	d06e      	beq.n	8021614 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021536:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021538:	1e58      	subs	r0, r3, #1
 802153a:	fb05 1500 	mla	r5, r5, r0, r1
 802153e:	142d      	asrs	r5, r5, #16
 8021540:	d45c      	bmi.n	80215fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021542:	4565      	cmp	r5, ip
 8021544:	da5a      	bge.n	80215fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021546:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021548:	fb05 2000 	mla	r0, r5, r0, r2
 802154c:	1400      	asrs	r0, r0, #16
 802154e:	d455      	bmi.n	80215fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021550:	42b8      	cmp	r0, r7
 8021552:	da53      	bge.n	80215fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021554:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8021558:	4699      	mov	r9, r3
 802155a:	46a2      	mov	sl, r4
 802155c:	f1b9 0f00 	cmp.w	r9, #0
 8021560:	dd54      	ble.n	802160c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8021562:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8021566:	140d      	asrs	r5, r1, #16
 8021568:	1410      	asrs	r0, r2, #16
 802156a:	fb07 5000 	mla	r0, r7, r0, r5
 802156e:	9d02      	ldr	r5, [sp, #8]
 8021570:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8021574:	f8ba 5000 	ldrh.w	r5, [sl]
 8021578:	122f      	asrs	r7, r5, #8
 802157a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802157e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021582:	fb17 f706 	smulbb	r7, r7, r6
 8021586:	ea4f 08e5 	mov.w	r8, r5, asr #3
 802158a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802158e:	00ed      	lsls	r5, r5, #3
 8021590:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8021594:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8021598:	10c7      	asrs	r7, r0, #3
 802159a:	b2ed      	uxtb	r5, r5
 802159c:	00c0      	lsls	r0, r0, #3
 802159e:	fb18 f806 	smulbb	r8, r8, r6
 80215a2:	fb15 f506 	smulbb	r5, r5, r6
 80215a6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80215aa:	b2c0      	uxtb	r0, r0
 80215ac:	fa1f fc8c 	uxth.w	ip, ip
 80215b0:	fb07 870b 	mla	r7, r7, fp, r8
 80215b4:	fb00 500b 	mla	r0, r0, fp, r5
 80215b8:	b280      	uxth	r0, r0
 80215ba:	b2bf      	uxth	r7, r7
 80215bc:	f10c 0501 	add.w	r5, ip, #1
 80215c0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80215c4:	f107 0801 	add.w	r8, r7, #1
 80215c8:	1c45      	adds	r5, r0, #1
 80215ca:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80215ce:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80215d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80215d4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80215d8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80215dc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80215e0:	ea45 0c0c 	orr.w	ip, r5, ip
 80215e4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80215e8:	4401      	add	r1, r0
 80215ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 80215ec:	ea4c 0c08 	orr.w	ip, ip, r8
 80215f0:	f82a cb02 	strh.w	ip, [sl], #2
 80215f4:	4402      	add	r2, r0
 80215f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80215fa:	e7af      	b.n	802155c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80215fc:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8021600:	f04f 0800 	mov.w	r8, #0
 8021604:	eb03 0008 	add.w	r0, r3, r8
 8021608:	2800      	cmp	r0, #0
 802160a:	dc41      	bgt.n	8021690 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802160c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021610:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021614:	9b00      	ldr	r3, [sp, #0]
 8021616:	2b00      	cmp	r3, #0
 8021618:	f340 8095 	ble.w	8021746 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802161c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021624:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802162a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802162e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021632:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021636:	eef0 6a62 	vmov.f32	s13, s5
 802163a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802163e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021642:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021646:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 802164a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802164e:	eef0 6a43 	vmov.f32	s13, s6
 8021652:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021656:	ee12 2a90 	vmov	r2, s5
 802165a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802165e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021662:	ee13 2a10 	vmov	r2, s6
 8021666:	9311      	str	r3, [sp, #68]	; 0x44
 8021668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802166a:	fb92 f3f3 	sdiv	r3, r2, r3
 802166e:	9312      	str	r3, [sp, #72]	; 0x48
 8021670:	9b00      	ldr	r3, [sp, #0]
 8021672:	9a03      	ldr	r2, [sp, #12]
 8021674:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021678:	3b01      	subs	r3, #1
 802167a:	9300      	str	r3, [sp, #0]
 802167c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8021680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021682:	eeb0 3a67 	vmov.f32	s6, s15
 8021686:	bf08      	it	eq
 8021688:	4613      	moveq	r3, r2
 802168a:	eef0 2a47 	vmov.f32	s5, s14
 802168e:	e72f      	b.n	80214f0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8021690:	140f      	asrs	r7, r1, #16
 8021692:	d451      	bmi.n	8021738 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021694:	f8de 5008 	ldr.w	r5, [lr, #8]
 8021698:	42bd      	cmp	r5, r7
 802169a:	dd4d      	ble.n	8021738 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802169c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80216a0:	d44a      	bmi.n	8021738 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80216a2:	f8de 000c 	ldr.w	r0, [lr, #12]
 80216a6:	4560      	cmp	r0, ip
 80216a8:	dd46      	ble.n	8021738 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80216aa:	b22d      	sxth	r5, r5
 80216ac:	fb0c 7505 	mla	r5, ip, r5, r7
 80216b0:	9802      	ldr	r0, [sp, #8]
 80216b2:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80216b6:	f06f 0501 	mvn.w	r5, #1
 80216ba:	fb05 fb08 	mul.w	fp, r5, r8
 80216be:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80216c2:	f834 500b 	ldrh.w	r5, [r4, fp]
 80216c6:	122f      	asrs	r7, r5, #8
 80216c8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80216cc:	fb17 f706 	smulbb	r7, r7, r6
 80216d0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80216d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80216d8:	00ed      	lsls	r5, r5, #3
 80216da:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80216de:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80216e2:	10c7      	asrs	r7, r0, #3
 80216e4:	b2ed      	uxtb	r5, r5
 80216e6:	00c0      	lsls	r0, r0, #3
 80216e8:	fb19 f906 	smulbb	r9, r9, r6
 80216ec:	fb15 f506 	smulbb	r5, r5, r6
 80216f0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80216f4:	b2c0      	uxtb	r0, r0
 80216f6:	fa1f fc8c 	uxth.w	ip, ip
 80216fa:	fb07 970a 	mla	r7, r7, sl, r9
 80216fe:	fb00 500a 	mla	r0, r0, sl, r5
 8021702:	b2bf      	uxth	r7, r7
 8021704:	b280      	uxth	r0, r0
 8021706:	f10c 0501 	add.w	r5, ip, #1
 802170a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802170e:	f107 0901 	add.w	r9, r7, #1
 8021712:	1c45      	adds	r5, r0, #1
 8021714:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8021718:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 802171c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021720:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021724:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021728:	ea45 0c0c 	orr.w	ip, r5, ip
 802172c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021730:	ea4c 0c09 	orr.w	ip, ip, r9
 8021734:	f824 c00b 	strh.w	ip, [r4, fp]
 8021738:	9811      	ldr	r0, [sp, #68]	; 0x44
 802173a:	4401      	add	r1, r0
 802173c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802173e:	f108 38ff 	add.w	r8, r8, #4294967295
 8021742:	4402      	add	r2, r0
 8021744:	e75e      	b.n	8021604 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8021746:	b005      	add	sp, #20
 8021748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802174c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021750:	b085      	sub	sp, #20
 8021752:	4693      	mov	fp, r2
 8021754:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021756:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021758:	6870      	ldr	r0, [r6, #4]
 802175a:	9101      	str	r1, [sp, #4]
 802175c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021760:	fb00 2404 	mla	r4, r0, r4, r2
 8021764:	6832      	ldr	r2, [r6, #0]
 8021766:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 802176a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802176e:	682a      	ldr	r2, [r5, #0]
 8021770:	9202      	str	r2, [sp, #8]
 8021772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021776:	9a01      	ldr	r2, [sp, #4]
 8021778:	2a00      	cmp	r2, #0
 802177a:	dc03      	bgt.n	8021784 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802177c:	f1bb 0f00 	cmp.w	fp, #0
 8021780:	f340 809a 	ble.w	80218b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8021784:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021786:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 802178a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 802178e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021792:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021794:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021798:	2b00      	cmp	r3, #0
 802179a:	dd0c      	ble.n	80217b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802179c:	1406      	asrs	r6, r0, #16
 802179e:	d405      	bmi.n	80217ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80217a0:	454e      	cmp	r6, r9
 80217a2:	da03      	bge.n	80217ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80217a4:	1416      	asrs	r6, r2, #16
 80217a6:	d401      	bmi.n	80217ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80217a8:	4546      	cmp	r6, r8
 80217aa:	db05      	blt.n	80217b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80217ac:	4470      	add	r0, lr
 80217ae:	4462      	add	r2, ip
 80217b0:	3b01      	subs	r3, #1
 80217b2:	3402      	adds	r4, #2
 80217b4:	e7f0      	b.n	8021798 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80217b6:	d00f      	beq.n	80217d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80217b8:	1e5e      	subs	r6, r3, #1
 80217ba:	fb0e 0706 	mla	r7, lr, r6, r0
 80217be:	143f      	asrs	r7, r7, #16
 80217c0:	d541      	bpl.n	8021846 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 80217c2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80217c6:	4698      	mov	r8, r3
 80217c8:	9603      	str	r6, [sp, #12]
 80217ca:	f1b8 0f00 	cmp.w	r8, #0
 80217ce:	dc56      	bgt.n	802187e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80217d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80217d4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80217d8:	9b01      	ldr	r3, [sp, #4]
 80217da:	2b00      	cmp	r3, #0
 80217dc:	dd6c      	ble.n	80218b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80217de:	ee30 0a04 	vadd.f32	s0, s0, s8
 80217e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80217e6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80217ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80217f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80217f4:	eeb0 6a62 	vmov.f32	s12, s5
 80217f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80217fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021800:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021804:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021808:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802180c:	eeb0 6a43 	vmov.f32	s12, s6
 8021810:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021814:	ee12 2a90 	vmov	r2, s5
 8021818:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802181c:	fb92 fef3 	sdiv	lr, r2, r3
 8021820:	ee13 2a10 	vmov	r2, s6
 8021824:	fb92 fcf3 	sdiv	ip, r2, r3
 8021828:	9b01      	ldr	r3, [sp, #4]
 802182a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802182e:	3b01      	subs	r3, #1
 8021830:	9301      	str	r3, [sp, #4]
 8021832:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021838:	eeb0 3a67 	vmov.f32	s6, s15
 802183c:	bf08      	it	eq
 802183e:	465b      	moveq	r3, fp
 8021840:	eef0 2a47 	vmov.f32	s5, s14
 8021844:	e797      	b.n	8021776 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021846:	454f      	cmp	r7, r9
 8021848:	dabb      	bge.n	80217c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802184a:	fb0c 2606 	mla	r6, ip, r6, r2
 802184e:	1436      	asrs	r6, r6, #16
 8021850:	d4b7      	bmi.n	80217c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021852:	4546      	cmp	r6, r8
 8021854:	dab5      	bge.n	80217c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021856:	461e      	mov	r6, r3
 8021858:	46a0      	mov	r8, r4
 802185a:	2e00      	cmp	r6, #0
 802185c:	ddb8      	ble.n	80217d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802185e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8021862:	9902      	ldr	r1, [sp, #8]
 8021864:	1417      	asrs	r7, r2, #16
 8021866:	ea4f 4920 	mov.w	r9, r0, asr #16
 802186a:	fb0a 9707 	mla	r7, sl, r7, r9
 802186e:	4470      	add	r0, lr
 8021870:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8021874:	f828 7b02 	strh.w	r7, [r8], #2
 8021878:	4462      	add	r2, ip
 802187a:	3e01      	subs	r6, #1
 802187c:	e7ed      	b.n	802185a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802187e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021882:	d414      	bmi.n	80218ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021884:	68ae      	ldr	r6, [r5, #8]
 8021886:	454e      	cmp	r6, r9
 8021888:	dd11      	ble.n	80218ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802188a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802188e:	d40e      	bmi.n	80218ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021890:	68ef      	ldr	r7, [r5, #12]
 8021892:	4557      	cmp	r7, sl
 8021894:	dd0b      	ble.n	80218ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021896:	b236      	sxth	r6, r6
 8021898:	fb0a 9606 	mla	r6, sl, r6, r9
 802189c:	9f02      	ldr	r7, [sp, #8]
 802189e:	f06f 0101 	mvn.w	r1, #1
 80218a2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80218a6:	fb01 f608 	mul.w	r6, r1, r8
 80218aa:	9903      	ldr	r1, [sp, #12]
 80218ac:	538f      	strh	r7, [r1, r6]
 80218ae:	4470      	add	r0, lr
 80218b0:	4462      	add	r2, ip
 80218b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80218b6:	e788      	b.n	80217ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80218b8:	b005      	add	sp, #20
 80218ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080218be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80218be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c2:	b087      	sub	sp, #28
 80218c4:	468b      	mov	fp, r1
 80218c6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80218c8:	9203      	str	r2, [sp, #12]
 80218ca:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80218ce:	9204      	str	r2, [sp, #16]
 80218d0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80218d4:	6841      	ldr	r1, [r0, #4]
 80218d6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80218da:	fb01 2505 	mla	r5, r1, r5, r2
 80218de:	6802      	ldr	r2, [r0, #0]
 80218e0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80218e4:	f8d9 2000 	ldr.w	r2, [r9]
 80218e8:	9201      	str	r2, [sp, #4]
 80218ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80218ee:	f1bb 0f00 	cmp.w	fp, #0
 80218f2:	dc03      	bgt.n	80218fc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80218f4:	9a03      	ldr	r2, [sp, #12]
 80218f6:	2a00      	cmp	r2, #0
 80218f8:	f340 8159 	ble.w	8021bae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80218fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80218fe:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021902:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021906:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802190a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802190c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021910:	2b00      	cmp	r3, #0
 8021912:	dd0e      	ble.n	8021932 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021914:	1402      	asrs	r2, r0, #16
 8021916:	d405      	bmi.n	8021924 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021918:	42ba      	cmp	r2, r7
 802191a:	da03      	bge.n	8021924 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802191c:	140a      	asrs	r2, r1, #16
 802191e:	d401      	bmi.n	8021924 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021920:	42b2      	cmp	r2, r6
 8021922:	db07      	blt.n	8021934 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021924:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021926:	4410      	add	r0, r2
 8021928:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802192a:	3b01      	subs	r3, #1
 802192c:	4411      	add	r1, r2
 802192e:	3502      	adds	r5, #2
 8021930:	e7ee      	b.n	8021910 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021932:	d017      	beq.n	8021964 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021934:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021936:	1e5a      	subs	r2, r3, #1
 8021938:	fb04 0402 	mla	r4, r4, r2, r0
 802193c:	1424      	asrs	r4, r4, #16
 802193e:	d409      	bmi.n	8021954 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021940:	42bc      	cmp	r4, r7
 8021942:	da07      	bge.n	8021954 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021944:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021946:	fb04 1202 	mla	r2, r4, r2, r1
 802194a:	1412      	asrs	r2, r2, #16
 802194c:	d402      	bmi.n	8021954 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802194e:	42b2      	cmp	r2, r6
 8021950:	f2c0 80bf 	blt.w	8021ad2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021954:	2700      	movs	r7, #0
 8021956:	19da      	adds	r2, r3, r7
 8021958:	2a00      	cmp	r2, #0
 802195a:	dc3e      	bgt.n	80219da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802195c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021960:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021964:	f1bb 0f00 	cmp.w	fp, #0
 8021968:	f340 8121 	ble.w	8021bae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802196c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021970:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021974:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021978:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802197a:	f1bb 0b01 	subs.w	fp, fp, #1
 802197e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021982:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021986:	eeb0 6a62 	vmov.f32	s12, s5
 802198a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802198e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021992:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021996:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802199a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802199e:	eeb0 6a43 	vmov.f32	s12, s6
 80219a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80219a6:	ee12 2a90 	vmov	r2, s5
 80219aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80219ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80219b2:	ee13 2a10 	vmov	r2, s6
 80219b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80219ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80219bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80219be:	fb92 f3f3 	sdiv	r3, r2, r3
 80219c2:	9a03      	ldr	r2, [sp, #12]
 80219c4:	9314      	str	r3, [sp, #80]	; 0x50
 80219c6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80219ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80219cc:	eeb0 3a67 	vmov.f32	s6, s15
 80219d0:	bf08      	it	eq
 80219d2:	4613      	moveq	r3, r2
 80219d4:	eef0 2a47 	vmov.f32	s5, s14
 80219d8:	e789      	b.n	80218ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80219da:	1406      	asrs	r6, r0, #16
 80219dc:	d42d      	bmi.n	8021a3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80219de:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80219e2:	42b4      	cmp	r4, r6
 80219e4:	dd29      	ble.n	8021a3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80219e6:	ea5f 4c21 	movs.w	ip, r1, asr #16
 80219ea:	d426      	bmi.n	8021a3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80219ec:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80219f0:	4562      	cmp	r2, ip
 80219f2:	dd22      	ble.n	8021a3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80219f4:	b224      	sxth	r4, r4
 80219f6:	9a01      	ldr	r2, [sp, #4]
 80219f8:	fb0c 6404 	mla	r4, ip, r4, r6
 80219fc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8021a00:	0e22      	lsrs	r2, r4, #24
 8021a02:	d01a      	beq.n	8021a3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021a04:	9e04      	ldr	r6, [sp, #16]
 8021a06:	4372      	muls	r2, r6
 8021a08:	1c56      	adds	r6, r2, #1
 8021a0a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021a0e:	1212      	asrs	r2, r2, #8
 8021a10:	0a26      	lsrs	r6, r4, #8
 8021a12:	2aff      	cmp	r2, #255	; 0xff
 8021a14:	9605      	str	r6, [sp, #20]
 8021a16:	d116      	bne.n	8021a46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021a18:	f06f 0201 	mvn.w	r2, #1
 8021a1c:	fb02 fc07 	mul.w	ip, r2, r7
 8021a20:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021a24:	0962      	lsrs	r2, r4, #5
 8021a26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021a2a:	f026 0607 	bic.w	r6, r6, #7
 8021a2e:	4316      	orrs	r6, r2
 8021a30:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021a34:	4326      	orrs	r6, r4
 8021a36:	f825 600c 	strh.w	r6, [r5, ip]
 8021a3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021a3c:	4410      	add	r0, r2
 8021a3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021a40:	3f01      	subs	r7, #1
 8021a42:	4411      	add	r1, r2
 8021a44:	e787      	b.n	8021956 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021a46:	f06f 0601 	mvn.w	r6, #1
 8021a4a:	437e      	muls	r6, r7
 8021a4c:	fa1f fa82 	uxth.w	sl, r2
 8021a50:	f835 8006 	ldrh.w	r8, [r5, r6]
 8021a54:	9602      	str	r6, [sp, #8]
 8021a56:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021a5a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8021a5e:	43d2      	mvns	r2, r2
 8021a60:	b2d2      	uxtb	r2, r2
 8021a62:	fb1c fc0a 	smulbb	ip, ip, sl
 8021a66:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021a6a:	fb0e ce02 	mla	lr, lr, r2, ip
 8021a6e:	b2e4      	uxtb	r4, r4
 8021a70:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021a74:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021a78:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8021a7c:	fa5f f888 	uxtb.w	r8, r8
 8021a80:	fb14 f40a 	smulbb	r4, r4, sl
 8021a84:	fb08 4402 	mla	r4, r8, r2, r4
 8021a88:	fa1f fe8e 	uxth.w	lr, lr
 8021a8c:	fb16 f60a 	smulbb	r6, r6, sl
 8021a90:	b2a4      	uxth	r4, r4
 8021a92:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021a96:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021a9a:	f10e 0201 	add.w	r2, lr, #1
 8021a9e:	1c66      	adds	r6, r4, #1
 8021aa0:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021aa4:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021aa8:	fa1f fc8c 	uxth.w	ip, ip
 8021aac:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021ab0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8021ab4:	ea46 0e0e 	orr.w	lr, r6, lr
 8021ab8:	f10c 0601 	add.w	r6, ip, #1
 8021abc:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8021ac0:	0976      	lsrs	r6, r6, #5
 8021ac2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021ac6:	9a02      	ldr	r2, [sp, #8]
 8021ac8:	ea4e 0e06 	orr.w	lr, lr, r6
 8021acc:	f825 e002 	strh.w	lr, [r5, r2]
 8021ad0:	e7b3      	b.n	8021a3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021ad2:	f04f 0800 	mov.w	r8, #0
 8021ad6:	eba3 0208 	sub.w	r2, r3, r8
 8021ada:	2a00      	cmp	r2, #0
 8021adc:	f77f af3e 	ble.w	802195c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021ae0:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8021ae4:	1404      	asrs	r4, r0, #16
 8021ae6:	140a      	asrs	r2, r1, #16
 8021ae8:	fb06 4202 	mla	r2, r6, r2, r4
 8021aec:	9c01      	ldr	r4, [sp, #4]
 8021aee:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8021af2:	0e22      	lsrs	r2, r4, #24
 8021af4:	d016      	beq.n	8021b24 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021af6:	9e04      	ldr	r6, [sp, #16]
 8021af8:	4372      	muls	r2, r6
 8021afa:	1c56      	adds	r6, r2, #1
 8021afc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021b00:	1212      	asrs	r2, r2, #8
 8021b02:	2aff      	cmp	r2, #255	; 0xff
 8021b04:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8021b08:	d113      	bne.n	8021b32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8021b0a:	0962      	lsrs	r2, r4, #5
 8021b0c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021b10:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b14:	f026 0607 	bic.w	r6, r6, #7
 8021b18:	4316      	orrs	r6, r2
 8021b1a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021b1e:	4326      	orrs	r6, r4
 8021b20:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8021b24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021b26:	4410      	add	r0, r2
 8021b28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021b2a:	f108 0801 	add.w	r8, r8, #1
 8021b2e:	4411      	add	r1, r2
 8021b30:	e7d1      	b.n	8021ad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021b32:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8021b36:	fa1f fa82 	uxth.w	sl, r2
 8021b3a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021b3e:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8021b42:	43d2      	mvns	r2, r2
 8021b44:	b2d2      	uxtb	r2, r2
 8021b46:	fb17 f70a 	smulbb	r7, r7, sl
 8021b4a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021b4e:	fb0c 7c02 	mla	ip, ip, r2, r7
 8021b52:	b2e4      	uxtb	r4, r4
 8021b54:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021b58:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021b5c:	fa5f fe8e 	uxtb.w	lr, lr
 8021b60:	fb14 f40a 	smulbb	r4, r4, sl
 8021b64:	fb0e 4402 	mla	r4, lr, r2, r4
 8021b68:	b2f6      	uxtb	r6, r6
 8021b6a:	fa1f fc8c 	uxth.w	ip, ip
 8021b6e:	fb16 f60a 	smulbb	r6, r6, sl
 8021b72:	b2a4      	uxth	r4, r4
 8021b74:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021b78:	fb07 6702 	mla	r7, r7, r2, r6
 8021b7c:	f10c 0201 	add.w	r2, ip, #1
 8021b80:	1c66      	adds	r6, r4, #1
 8021b82:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021b86:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021b8a:	b2bf      	uxth	r7, r7
 8021b8c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021b90:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021b94:	ea46 0c0c 	orr.w	ip, r6, ip
 8021b98:	1c7e      	adds	r6, r7, #1
 8021b9a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021b9e:	0976      	lsrs	r6, r6, #5
 8021ba0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021ba4:	ea4c 0c06 	orr.w	ip, ip, r6
 8021ba8:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8021bac:	e7ba      	b.n	8021b24 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021bae:	b007      	add	sp, #28
 8021bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021bb4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bb8:	b085      	sub	sp, #20
 8021bba:	468b      	mov	fp, r1
 8021bbc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021bbe:	9203      	str	r2, [sp, #12]
 8021bc0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021bc4:	6841      	ldr	r1, [r0, #4]
 8021bc6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8021bca:	fb01 2404 	mla	r4, r1, r4, r2
 8021bce:	6802      	ldr	r2, [r0, #0]
 8021bd0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021bd4:	f8d8 2000 	ldr.w	r2, [r8]
 8021bd8:	9201      	str	r2, [sp, #4]
 8021bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021bde:	f1bb 0f00 	cmp.w	fp, #0
 8021be2:	dc03      	bgt.n	8021bec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021be4:	9a03      	ldr	r2, [sp, #12]
 8021be6:	2a00      	cmp	r2, #0
 8021be8:	f340 814f 	ble.w	8021e8a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021bec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021bee:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8021bf2:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8021bf6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021bfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021bfc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	dd0e      	ble.n	8021c22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021c04:	1408      	asrs	r0, r1, #16
 8021c06:	d405      	bmi.n	8021c14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021c08:	42b8      	cmp	r0, r7
 8021c0a:	da03      	bge.n	8021c14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021c0c:	1410      	asrs	r0, r2, #16
 8021c0e:	d401      	bmi.n	8021c14 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021c10:	42b0      	cmp	r0, r6
 8021c12:	db07      	blt.n	8021c24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021c14:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021c16:	4401      	add	r1, r0
 8021c18:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021c1a:	3b01      	subs	r3, #1
 8021c1c:	4402      	add	r2, r0
 8021c1e:	3402      	adds	r4, #2
 8021c20:	e7ee      	b.n	8021c00 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021c22:	d017      	beq.n	8021c54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021c24:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021c26:	1e58      	subs	r0, r3, #1
 8021c28:	fb05 1500 	mla	r5, r5, r0, r1
 8021c2c:	142d      	asrs	r5, r5, #16
 8021c2e:	d409      	bmi.n	8021c44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c30:	42bd      	cmp	r5, r7
 8021c32:	da07      	bge.n	8021c44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c34:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021c36:	fb05 2000 	mla	r0, r5, r0, r2
 8021c3a:	1400      	asrs	r0, r0, #16
 8021c3c:	d402      	bmi.n	8021c44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021c3e:	42b0      	cmp	r0, r6
 8021c40:	f2c0 80ba 	blt.w	8021db8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021c44:	2600      	movs	r6, #0
 8021c46:	1998      	adds	r0, r3, r6
 8021c48:	2800      	cmp	r0, #0
 8021c4a:	dc3e      	bgt.n	8021cca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021c4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021c50:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021c54:	f1bb 0f00 	cmp.w	fp, #0
 8021c58:	f340 8117 	ble.w	8021e8a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021c5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021c60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021c64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c6a:	f1bb 0b01 	subs.w	fp, fp, #1
 8021c6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021c72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c76:	eeb0 6a62 	vmov.f32	s12, s5
 8021c7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021c82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c86:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021c8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c8e:	eeb0 6a43 	vmov.f32	s12, s6
 8021c92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021c96:	ee12 2a90 	vmov	r2, s5
 8021c9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021c9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ca2:	ee13 2a10 	vmov	r2, s6
 8021ca6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021caa:	9311      	str	r3, [sp, #68]	; 0x44
 8021cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021cae:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cb2:	9a03      	ldr	r2, [sp, #12]
 8021cb4:	9312      	str	r3, [sp, #72]	; 0x48
 8021cb6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021cbc:	eeb0 3a67 	vmov.f32	s6, s15
 8021cc0:	bf08      	it	eq
 8021cc2:	4613      	moveq	r3, r2
 8021cc4:	eef0 2a47 	vmov.f32	s5, s14
 8021cc8:	e789      	b.n	8021bde <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021cca:	140f      	asrs	r7, r1, #16
 8021ccc:	d424      	bmi.n	8021d18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021cce:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8021cd2:	42bd      	cmp	r5, r7
 8021cd4:	dd20      	ble.n	8021d18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021cd6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021cda:	d41d      	bmi.n	8021d18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021cdc:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8021ce0:	4560      	cmp	r0, ip
 8021ce2:	dd19      	ble.n	8021d18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021ce4:	b22d      	sxth	r5, r5
 8021ce6:	fb0c 7505 	mla	r5, ip, r5, r7
 8021cea:	9801      	ldr	r0, [sp, #4]
 8021cec:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8021cf0:	0e07      	lsrs	r7, r0, #24
 8021cf2:	2fff      	cmp	r7, #255	; 0xff
 8021cf4:	d116      	bne.n	8021d24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021cf6:	f06f 0501 	mvn.w	r5, #1
 8021cfa:	fb05 f706 	mul.w	r7, r5, r6
 8021cfe:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8021d02:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8021d06:	0945      	lsrs	r5, r0, #5
 8021d08:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021d0c:	ea4c 0505 	orr.w	r5, ip, r5
 8021d10:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8021d14:	4305      	orrs	r5, r0
 8021d16:	53e5      	strh	r5, [r4, r7]
 8021d18:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021d1a:	4401      	add	r1, r0
 8021d1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021d1e:	3e01      	subs	r6, #1
 8021d20:	4402      	add	r2, r0
 8021d22:	e790      	b.n	8021c46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021d24:	b2fd      	uxtb	r5, r7
 8021d26:	2f00      	cmp	r7, #0
 8021d28:	d0f6      	beq.n	8021d18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021d2a:	f06f 0701 	mvn.w	r7, #1
 8021d2e:	4377      	muls	r7, r6
 8021d30:	fa1f f985 	uxth.w	r9, r5
 8021d34:	f834 e007 	ldrh.w	lr, [r4, r7]
 8021d38:	9702      	str	r7, [sp, #8]
 8021d3a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021d3e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8021d42:	43ed      	mvns	r5, r5
 8021d44:	b2ed      	uxtb	r5, r5
 8021d46:	fb17 f709 	smulbb	r7, r7, r9
 8021d4a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021d4e:	fb0c 7c05 	mla	ip, ip, r5, r7
 8021d52:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021d56:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021d5a:	b2c0      	uxtb	r0, r0
 8021d5c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021d60:	fa5f fe8e 	uxtb.w	lr, lr
 8021d64:	fb10 f009 	smulbb	r0, r0, r9
 8021d68:	fb0e 0005 	mla	r0, lr, r5, r0
 8021d6c:	b280      	uxth	r0, r0
 8021d6e:	fa1f fc8c 	uxth.w	ip, ip
 8021d72:	fb1a fa09 	smulbb	sl, sl, r9
 8021d76:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021d7a:	fb07 a705 	mla	r7, r7, r5, sl
 8021d7e:	f100 0a01 	add.w	sl, r0, #1
 8021d82:	f10c 0501 	add.w	r5, ip, #1
 8021d86:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8021d8a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021d8e:	b2bf      	uxth	r7, r7
 8021d90:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021d94:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021d98:	ea4a 0c0c 	orr.w	ip, sl, ip
 8021d9c:	f107 0a01 	add.w	sl, r7, #1
 8021da0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021da4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021da8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021dac:	9802      	ldr	r0, [sp, #8]
 8021dae:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021db2:	f824 c000 	strh.w	ip, [r4, r0]
 8021db6:	e7af      	b.n	8021d18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021db8:	f04f 0e00 	mov.w	lr, #0
 8021dbc:	eba3 000e 	sub.w	r0, r3, lr
 8021dc0:	2800      	cmp	r0, #0
 8021dc2:	f77f af43 	ble.w	8021c4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021dc6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8021dca:	140d      	asrs	r5, r1, #16
 8021dcc:	1410      	asrs	r0, r2, #16
 8021dce:	fb06 5000 	mla	r0, r6, r0, r5
 8021dd2:	9d01      	ldr	r5, [sp, #4]
 8021dd4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8021dd8:	0e2e      	lsrs	r6, r5, #24
 8021dda:	2eff      	cmp	r6, #255	; 0xff
 8021ddc:	d112      	bne.n	8021e04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021dde:	482c      	ldr	r0, [pc, #176]	; (8021e90 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8021de0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8021de4:	0968      	lsrs	r0, r5, #5
 8021de6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021dea:	4330      	orrs	r0, r6
 8021dec:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021df0:	4328      	orrs	r0, r5
 8021df2:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8021df6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021df8:	4401      	add	r1, r0
 8021dfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021dfc:	f10e 0e01 	add.w	lr, lr, #1
 8021e00:	4402      	add	r2, r0
 8021e02:	e7db      	b.n	8021dbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021e04:	b2f0      	uxtb	r0, r6
 8021e06:	2e00      	cmp	r6, #0
 8021e08:	d0f5      	beq.n	8021df6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021e0a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8021e0e:	fa1f f980 	uxth.w	r9, r0
 8021e12:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021e16:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021e1a:	43c0      	mvns	r0, r0
 8021e1c:	b2c0      	uxtb	r0, r0
 8021e1e:	fb16 f609 	smulbb	r6, r6, r9
 8021e22:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021e26:	fb07 6700 	mla	r7, r7, r0, r6
 8021e2a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021e2e:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021e32:	b2ed      	uxtb	r5, r5
 8021e34:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021e38:	fa5f fc8c 	uxtb.w	ip, ip
 8021e3c:	fb15 f509 	smulbb	r5, r5, r9
 8021e40:	fb0c 5500 	mla	r5, ip, r0, r5
 8021e44:	b2bf      	uxth	r7, r7
 8021e46:	fb1a fa09 	smulbb	sl, sl, r9
 8021e4a:	b2ad      	uxth	r5, r5
 8021e4c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021e50:	fb06 a600 	mla	r6, r6, r0, sl
 8021e54:	1c78      	adds	r0, r7, #1
 8021e56:	f105 0a01 	add.w	sl, r5, #1
 8021e5a:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021e5e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021e62:	b2b6      	uxth	r6, r6
 8021e64:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021e68:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021e6c:	ea4a 0707 	orr.w	r7, sl, r7
 8021e70:	f106 0a01 	add.w	sl, r6, #1
 8021e74:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021e78:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021e7c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021e80:	ea47 070a 	orr.w	r7, r7, sl
 8021e84:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8021e88:	e7b5      	b.n	8021df6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021e8a:	b005      	add	sp, #20
 8021e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e90:	fffff800 	.word	0xfffff800

08021e94 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e98:	b087      	sub	sp, #28
 8021e9a:	468b      	mov	fp, r1
 8021e9c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021e9e:	9203      	str	r2, [sp, #12]
 8021ea0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021ea4:	9204      	str	r2, [sp, #16]
 8021ea6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021eaa:	6841      	ldr	r1, [r0, #4]
 8021eac:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021eb0:	fb01 2404 	mla	r4, r1, r4, r2
 8021eb4:	6802      	ldr	r2, [r0, #0]
 8021eb6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021eba:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021ebe:	3201      	adds	r2, #1
 8021ec0:	f022 0201 	bic.w	r2, r2, #1
 8021ec4:	9200      	str	r2, [sp, #0]
 8021ec6:	f8d9 2000 	ldr.w	r2, [r9]
 8021eca:	9201      	str	r2, [sp, #4]
 8021ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021ed0:	f1bb 0f00 	cmp.w	fp, #0
 8021ed4:	dc03      	bgt.n	8021ede <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021ed6:	9a03      	ldr	r2, [sp, #12]
 8021ed8:	2a00      	cmp	r2, #0
 8021eda:	f340 8169 	ble.w	80221b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021ede:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021ee0:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021ee4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021ee8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021eec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021eee:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	dd0e      	ble.n	8021f14 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021ef6:	1402      	asrs	r2, r0, #16
 8021ef8:	d405      	bmi.n	8021f06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021efa:	42ba      	cmp	r2, r7
 8021efc:	da03      	bge.n	8021f06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021efe:	140a      	asrs	r2, r1, #16
 8021f00:	d401      	bmi.n	8021f06 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f02:	42b2      	cmp	r2, r6
 8021f04:	db07      	blt.n	8021f16 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021f06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021f08:	4410      	add	r0, r2
 8021f0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f0c:	3b01      	subs	r3, #1
 8021f0e:	4411      	add	r1, r2
 8021f10:	3402      	adds	r4, #2
 8021f12:	e7ee      	b.n	8021ef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021f14:	d017      	beq.n	8021f46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021f16:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021f18:	1e5a      	subs	r2, r3, #1
 8021f1a:	fb05 0502 	mla	r5, r5, r2, r0
 8021f1e:	142d      	asrs	r5, r5, #16
 8021f20:	d409      	bmi.n	8021f36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021f22:	42bd      	cmp	r5, r7
 8021f24:	da07      	bge.n	8021f36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021f26:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021f28:	fb05 1202 	mla	r2, r5, r2, r1
 8021f2c:	1412      	asrs	r2, r2, #16
 8021f2e:	d402      	bmi.n	8021f36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021f30:	42b2      	cmp	r2, r6
 8021f32:	f2c0 80c7 	blt.w	80220c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021f36:	2700      	movs	r7, #0
 8021f38:	19da      	adds	r2, r3, r7
 8021f3a:	2a00      	cmp	r2, #0
 8021f3c:	dc3e      	bgt.n	8021fbc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021f3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021f42:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021f46:	f1bb 0f00 	cmp.w	fp, #0
 8021f4a:	f340 8131 	ble.w	80221b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021f4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f56:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021f5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f5c:	f1bb 0b01 	subs.w	fp, fp, #1
 8021f60:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f68:	eeb0 6a62 	vmov.f32	s12, s5
 8021f6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f74:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f78:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021f7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f80:	eeb0 6a43 	vmov.f32	s12, s6
 8021f84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f88:	ee12 2a90 	vmov	r2, s5
 8021f8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f90:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f94:	ee13 2a10 	vmov	r2, s6
 8021f98:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8021f9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021fa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fa4:	9a03      	ldr	r2, [sp, #12]
 8021fa6:	9314      	str	r3, [sp, #80]	; 0x50
 8021fa8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021fae:	eeb0 3a67 	vmov.f32	s6, s15
 8021fb2:	bf08      	it	eq
 8021fb4:	4613      	moveq	r3, r2
 8021fb6:	eef0 2a47 	vmov.f32	s5, s14
 8021fba:	e789      	b.n	8021ed0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021fbc:	1405      	asrs	r5, r0, #16
 8021fbe:	d435      	bmi.n	802202c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021fc0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021fc4:	42aa      	cmp	r2, r5
 8021fc6:	dd31      	ble.n	802202c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021fc8:	140e      	asrs	r6, r1, #16
 8021fca:	d42f      	bmi.n	802202c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021fcc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021fd0:	42b2      	cmp	r2, r6
 8021fd2:	dd2b      	ble.n	802202c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021fd4:	9a00      	ldr	r2, [sp, #0]
 8021fd6:	fb06 5502 	mla	r5, r6, r2, r5
 8021fda:	086a      	lsrs	r2, r5, #1
 8021fdc:	9e01      	ldr	r6, [sp, #4]
 8021fde:	5cb2      	ldrb	r2, [r6, r2]
 8021fe0:	07ee      	lsls	r6, r5, #31
 8021fe2:	bf54      	ite	pl
 8021fe4:	f002 020f 	andpl.w	r2, r2, #15
 8021fe8:	1112      	asrmi	r2, r2, #4
 8021fea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021fee:	b2d2      	uxtb	r2, r2
 8021ff0:	b1e2      	cbz	r2, 802202c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021ff2:	9d04      	ldr	r5, [sp, #16]
 8021ff4:	436a      	muls	r2, r5
 8021ff6:	1c55      	adds	r5, r2, #1
 8021ff8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021ffc:	4d6e      	ldr	r5, [pc, #440]	; (80221b8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8021ffe:	682d      	ldr	r5, [r5, #0]
 8022000:	1212      	asrs	r2, r2, #8
 8022002:	0a2e      	lsrs	r6, r5, #8
 8022004:	2aff      	cmp	r2, #255	; 0xff
 8022006:	9605      	str	r6, [sp, #20]
 8022008:	d116      	bne.n	8022038 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802200a:	f06f 0201 	mvn.w	r2, #1
 802200e:	fb02 fc07 	mul.w	ip, r2, r7
 8022012:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8022016:	096a      	lsrs	r2, r5, #5
 8022018:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802201c:	f026 0607 	bic.w	r6, r6, #7
 8022020:	4316      	orrs	r6, r2
 8022022:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8022026:	432e      	orrs	r6, r5
 8022028:	f824 600c 	strh.w	r6, [r4, ip]
 802202c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802202e:	4410      	add	r0, r2
 8022030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022032:	3f01      	subs	r7, #1
 8022034:	4411      	add	r1, r2
 8022036:	e77f      	b.n	8021f38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8022038:	f06f 0601 	mvn.w	r6, #1
 802203c:	437e      	muls	r6, r7
 802203e:	fa1f fa82 	uxth.w	sl, r2
 8022042:	f834 8006 	ldrh.w	r8, [r4, r6]
 8022046:	9602      	str	r6, [sp, #8]
 8022048:	ea4f 2e28 	mov.w	lr, r8, asr #8
 802204c:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8022050:	43d2      	mvns	r2, r2
 8022052:	b2d2      	uxtb	r2, r2
 8022054:	fb1c fc0a 	smulbb	ip, ip, sl
 8022058:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802205c:	fb0e ce02 	mla	lr, lr, r2, ip
 8022060:	b2ed      	uxtb	r5, r5
 8022062:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8022066:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802206a:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802206e:	fa5f f888 	uxtb.w	r8, r8
 8022072:	fb15 f50a 	smulbb	r5, r5, sl
 8022076:	fb08 5502 	mla	r5, r8, r2, r5
 802207a:	fa1f fe8e 	uxth.w	lr, lr
 802207e:	fb16 f60a 	smulbb	r6, r6, sl
 8022082:	b2ad      	uxth	r5, r5
 8022084:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022088:	fb0c 6c02 	mla	ip, ip, r2, r6
 802208c:	f10e 0201 	add.w	r2, lr, #1
 8022090:	1c6e      	adds	r6, r5, #1
 8022092:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8022096:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 802209a:	fa1f fc8c 	uxth.w	ip, ip
 802209e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80220a2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80220a6:	ea46 0e0e 	orr.w	lr, r6, lr
 80220aa:	f10c 0601 	add.w	r6, ip, #1
 80220ae:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80220b2:	0976      	lsrs	r6, r6, #5
 80220b4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80220b8:	9a02      	ldr	r2, [sp, #8]
 80220ba:	ea4e 0e06 	orr.w	lr, lr, r6
 80220be:	f824 e002 	strh.w	lr, [r4, r2]
 80220c2:	e7b3      	b.n	802202c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80220c4:	f04f 0800 	mov.w	r8, #0
 80220c8:	eba3 0208 	sub.w	r2, r3, r8
 80220cc:	2a00      	cmp	r2, #0
 80220ce:	f77f af36 	ble.w	8021f3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80220d2:	9e00      	ldr	r6, [sp, #0]
 80220d4:	1402      	asrs	r2, r0, #16
 80220d6:	140d      	asrs	r5, r1, #16
 80220d8:	fb06 2505 	mla	r5, r6, r5, r2
 80220dc:	086a      	lsrs	r2, r5, #1
 80220de:	9e01      	ldr	r6, [sp, #4]
 80220e0:	5cb2      	ldrb	r2, [r6, r2]
 80220e2:	07ed      	lsls	r5, r5, #31
 80220e4:	bf54      	ite	pl
 80220e6:	f002 020f 	andpl.w	r2, r2, #15
 80220ea:	1112      	asrmi	r2, r2, #4
 80220ec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80220f0:	b2d2      	uxtb	r2, r2
 80220f2:	b1c2      	cbz	r2, 8022126 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80220f4:	9d04      	ldr	r5, [sp, #16]
 80220f6:	436a      	muls	r2, r5
 80220f8:	1c55      	adds	r5, r2, #1
 80220fa:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80220fe:	4d2e      	ldr	r5, [pc, #184]	; (80221b8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8022100:	1212      	asrs	r2, r2, #8
 8022102:	682e      	ldr	r6, [r5, #0]
 8022104:	2aff      	cmp	r2, #255	; 0xff
 8022106:	ea4f 2516 	mov.w	r5, r6, lsr #8
 802210a:	d113      	bne.n	8022134 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802210c:	0972      	lsrs	r2, r6, #5
 802210e:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8022112:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022116:	f025 0507 	bic.w	r5, r5, #7
 802211a:	4315      	orrs	r5, r2
 802211c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022120:	4335      	orrs	r5, r6
 8022122:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8022126:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022128:	4410      	add	r0, r2
 802212a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802212c:	f108 0801 	add.w	r8, r8, #1
 8022130:	4411      	add	r1, r2
 8022132:	e7c9      	b.n	80220c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022134:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8022138:	fa1f fa82 	uxth.w	sl, r2
 802213c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022140:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8022144:	43d2      	mvns	r2, r2
 8022146:	b2d2      	uxtb	r2, r2
 8022148:	fb17 f70a 	smulbb	r7, r7, sl
 802214c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022150:	fb0c 7c02 	mla	ip, ip, r2, r7
 8022154:	b2f6      	uxtb	r6, r6
 8022156:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802215a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802215e:	fa5f fe8e 	uxtb.w	lr, lr
 8022162:	fb16 f60a 	smulbb	r6, r6, sl
 8022166:	fb0e 6602 	mla	r6, lr, r2, r6
 802216a:	b2ed      	uxtb	r5, r5
 802216c:	fa1f fc8c 	uxth.w	ip, ip
 8022170:	fb15 f50a 	smulbb	r5, r5, sl
 8022174:	b2b6      	uxth	r6, r6
 8022176:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802217a:	fb07 5702 	mla	r7, r7, r2, r5
 802217e:	f10c 0201 	add.w	r2, ip, #1
 8022182:	1c75      	adds	r5, r6, #1
 8022184:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022188:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 802218c:	b2bf      	uxth	r7, r7
 802218e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022192:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022196:	ea45 0c0c 	orr.w	ip, r5, ip
 802219a:	1c7d      	adds	r5, r7, #1
 802219c:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80221a0:	096d      	lsrs	r5, r5, #5
 80221a2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80221a6:	ea4c 0c05 	orr.w	ip, ip, r5
 80221aa:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80221ae:	e7ba      	b.n	8022126 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80221b0:	b007      	add	sp, #28
 80221b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221b6:	bf00      	nop
 80221b8:	20009828 	.word	0x20009828

080221bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80221bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221c0:	b087      	sub	sp, #28
 80221c2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80224d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80221c6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80221c8:	9205      	str	r2, [sp, #20]
 80221ca:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80221ce:	9101      	str	r1, [sp, #4]
 80221d0:	6841      	ldr	r1, [r0, #4]
 80221d2:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80221d6:	fb01 2404 	mla	r4, r1, r4, r2
 80221da:	6802      	ldr	r2, [r0, #0]
 80221dc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80221e0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80221e4:	3201      	adds	r2, #1
 80221e6:	f022 0201 	bic.w	r2, r2, #1
 80221ea:	9202      	str	r2, [sp, #8]
 80221ec:	f8db 2000 	ldr.w	r2, [fp]
 80221f0:	9203      	str	r2, [sp, #12]
 80221f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80221f6:	9a01      	ldr	r2, [sp, #4]
 80221f8:	2a00      	cmp	r2, #0
 80221fa:	dc03      	bgt.n	8022204 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80221fc:	9a05      	ldr	r2, [sp, #20]
 80221fe:	2a00      	cmp	r2, #0
 8022200:	f340 8162 	ble.w	80224c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8022204:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022206:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 802220a:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802220e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022212:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022214:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022218:	2b00      	cmp	r3, #0
 802221a:	dd0e      	ble.n	802223a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802221c:	1402      	asrs	r2, r0, #16
 802221e:	d405      	bmi.n	802222c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022220:	42ba      	cmp	r2, r7
 8022222:	da03      	bge.n	802222c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022224:	140a      	asrs	r2, r1, #16
 8022226:	d401      	bmi.n	802222c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022228:	42b2      	cmp	r2, r6
 802222a:	db07      	blt.n	802223c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802222c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802222e:	4410      	add	r0, r2
 8022230:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022232:	3b01      	subs	r3, #1
 8022234:	4411      	add	r1, r2
 8022236:	3402      	adds	r4, #2
 8022238:	e7ee      	b.n	8022218 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802223a:	d017      	beq.n	802226c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802223c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802223e:	1e5a      	subs	r2, r3, #1
 8022240:	fb05 0502 	mla	r5, r5, r2, r0
 8022244:	142d      	asrs	r5, r5, #16
 8022246:	d409      	bmi.n	802225c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022248:	42bd      	cmp	r5, r7
 802224a:	da07      	bge.n	802225c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802224c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802224e:	fb05 1202 	mla	r2, r5, r2, r1
 8022252:	1412      	asrs	r2, r2, #16
 8022254:	d402      	bmi.n	802225c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022256:	42b2      	cmp	r2, r6
 8022258:	f2c0 80c3 	blt.w	80223e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802225c:	2500      	movs	r5, #0
 802225e:	195a      	adds	r2, r3, r5
 8022260:	2a00      	cmp	r2, #0
 8022262:	dc3f      	bgt.n	80222e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022264:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022268:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802226c:	9b01      	ldr	r3, [sp, #4]
 802226e:	2b00      	cmp	r3, #0
 8022270:	f340 812a 	ble.w	80224c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8022274:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022278:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802227c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022280:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022282:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022286:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802228a:	eeb0 6a62 	vmov.f32	s12, s5
 802228e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022292:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022296:	ee77 2a62 	vsub.f32	s5, s14, s5
 802229a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802229e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80222a2:	eeb0 6a43 	vmov.f32	s12, s6
 80222a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80222aa:	ee12 2a90 	vmov	r2, s5
 80222ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80222b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80222b6:	ee13 2a10 	vmov	r2, s6
 80222ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80222bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80222be:	fb92 f3f3 	sdiv	r3, r2, r3
 80222c2:	9314      	str	r3, [sp, #80]	; 0x50
 80222c4:	9b01      	ldr	r3, [sp, #4]
 80222c6:	9a05      	ldr	r2, [sp, #20]
 80222c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80222cc:	3b01      	subs	r3, #1
 80222ce:	9301      	str	r3, [sp, #4]
 80222d0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80222d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80222d6:	eeb0 3a67 	vmov.f32	s6, s15
 80222da:	bf08      	it	eq
 80222dc:	4613      	moveq	r3, r2
 80222de:	eef0 2a47 	vmov.f32	s5, s14
 80222e2:	e788      	b.n	80221f6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80222e4:	1406      	asrs	r6, r0, #16
 80222e6:	d42c      	bmi.n	8022342 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80222e8:	f8db 2008 	ldr.w	r2, [fp, #8]
 80222ec:	42b2      	cmp	r2, r6
 80222ee:	dd28      	ble.n	8022342 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80222f0:	140f      	asrs	r7, r1, #16
 80222f2:	d426      	bmi.n	8022342 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80222f4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80222f8:	42ba      	cmp	r2, r7
 80222fa:	dd22      	ble.n	8022342 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80222fc:	9a02      	ldr	r2, [sp, #8]
 80222fe:	fb07 6602 	mla	r6, r7, r2, r6
 8022302:	0872      	lsrs	r2, r6, #1
 8022304:	9f03      	ldr	r7, [sp, #12]
 8022306:	5cba      	ldrb	r2, [r7, r2]
 8022308:	07f6      	lsls	r6, r6, #31
 802230a:	bf54      	ite	pl
 802230c:	f002 020f 	andpl.w	r2, r2, #15
 8022310:	1112      	asrmi	r2, r2, #4
 8022312:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022316:	b2d2      	uxtb	r2, r2
 8022318:	2aff      	cmp	r2, #255	; 0xff
 802231a:	d118      	bne.n	802234e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 802231c:	f8d8 2000 	ldr.w	r2, [r8]
 8022320:	f06f 0601 	mvn.w	r6, #1
 8022324:	fb06 f705 	mul.w	r7, r6, r5
 8022328:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 802232c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8022330:	0956      	lsrs	r6, r2, #5
 8022332:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022336:	ea4c 0606 	orr.w	r6, ip, r6
 802233a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802233e:	4316      	orrs	r6, r2
 8022340:	53e6      	strh	r6, [r4, r7]
 8022342:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022344:	4410      	add	r0, r2
 8022346:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022348:	3d01      	subs	r5, #1
 802234a:	4411      	add	r1, r2
 802234c:	e787      	b.n	802225e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802234e:	2a00      	cmp	r2, #0
 8022350:	d0f7      	beq.n	8022342 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022352:	f06f 0601 	mvn.w	r6, #1
 8022356:	436e      	muls	r6, r5
 8022358:	f8d8 c000 	ldr.w	ip, [r8]
 802235c:	f834 e006 	ldrh.w	lr, [r4, r6]
 8022360:	9604      	str	r6, [sp, #16]
 8022362:	fa1f f982 	uxth.w	r9, r2
 8022366:	ea4f 272e 	mov.w	r7, lr, asr #8
 802236a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802236e:	43d2      	mvns	r2, r2
 8022370:	b2d2      	uxtb	r2, r2
 8022372:	fb16 f609 	smulbb	r6, r6, r9
 8022376:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802237a:	fb07 6702 	mla	r7, r7, r2, r6
 802237e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8022382:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022386:	fa5f fc8c 	uxtb.w	ip, ip
 802238a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802238e:	fa5f fe8e 	uxtb.w	lr, lr
 8022392:	fb1c fc09 	smulbb	ip, ip, r9
 8022396:	fb0e cc02 	mla	ip, lr, r2, ip
 802239a:	b2bf      	uxth	r7, r7
 802239c:	fb1a fa09 	smulbb	sl, sl, r9
 80223a0:	fa1f fc8c 	uxth.w	ip, ip
 80223a4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80223a8:	fb06 a602 	mla	r6, r6, r2, sl
 80223ac:	1c7a      	adds	r2, r7, #1
 80223ae:	f10c 0a01 	add.w	sl, ip, #1
 80223b2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80223b6:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80223ba:	b2b6      	uxth	r6, r6
 80223bc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80223c0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80223c4:	ea4a 0707 	orr.w	r7, sl, r7
 80223c8:	f106 0a01 	add.w	sl, r6, #1
 80223cc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80223d0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80223d4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80223d8:	9a04      	ldr	r2, [sp, #16]
 80223da:	ea47 070a 	orr.w	r7, r7, sl
 80223de:	52a7      	strh	r7, [r4, r2]
 80223e0:	e7af      	b.n	8022342 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80223e2:	f04f 0e00 	mov.w	lr, #0
 80223e6:	eba3 020e 	sub.w	r2, r3, lr
 80223ea:	2a00      	cmp	r2, #0
 80223ec:	f77f af3a 	ble.w	8022264 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80223f0:	9e02      	ldr	r6, [sp, #8]
 80223f2:	1402      	asrs	r2, r0, #16
 80223f4:	140d      	asrs	r5, r1, #16
 80223f6:	fb06 2505 	mla	r5, r6, r5, r2
 80223fa:	086a      	lsrs	r2, r5, #1
 80223fc:	9e03      	ldr	r6, [sp, #12]
 80223fe:	5cb2      	ldrb	r2, [r6, r2]
 8022400:	07ed      	lsls	r5, r5, #31
 8022402:	bf54      	ite	pl
 8022404:	f002 020f 	andpl.w	r2, r2, #15
 8022408:	1112      	asrmi	r2, r2, #4
 802240a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802240e:	b2d2      	uxtb	r2, r2
 8022410:	2aff      	cmp	r2, #255	; 0xff
 8022412:	d115      	bne.n	8022440 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8022414:	f8d8 5000 	ldr.w	r5, [r8]
 8022418:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 802241c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8022420:	096a      	lsrs	r2, r5, #5
 8022422:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022426:	4332      	orrs	r2, r6
 8022428:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802242c:	432a      	orrs	r2, r5
 802242e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8022432:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022434:	4410      	add	r0, r2
 8022436:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022438:	f10e 0e01 	add.w	lr, lr, #1
 802243c:	4411      	add	r1, r2
 802243e:	e7d2      	b.n	80223e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022440:	2a00      	cmp	r2, #0
 8022442:	d0f6      	beq.n	8022432 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022444:	f8d8 7000 	ldr.w	r7, [r8]
 8022448:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802244c:	fa1f f982 	uxth.w	r9, r2
 8022450:	ea4f 262c 	mov.w	r6, ip, asr #8
 8022454:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8022458:	43d2      	mvns	r2, r2
 802245a:	b2d2      	uxtb	r2, r2
 802245c:	fb15 f509 	smulbb	r5, r5, r9
 8022460:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022464:	fb06 5602 	mla	r6, r6, r2, r5
 8022468:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 802246c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022470:	b2ff      	uxtb	r7, r7
 8022472:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022476:	fa5f fc8c 	uxtb.w	ip, ip
 802247a:	fb17 f709 	smulbb	r7, r7, r9
 802247e:	fb0c 7702 	mla	r7, ip, r2, r7
 8022482:	b2b6      	uxth	r6, r6
 8022484:	fb1a fa09 	smulbb	sl, sl, r9
 8022488:	b2bf      	uxth	r7, r7
 802248a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802248e:	fb05 a502 	mla	r5, r5, r2, sl
 8022492:	1c72      	adds	r2, r6, #1
 8022494:	f107 0a01 	add.w	sl, r7, #1
 8022498:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802249c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80224a0:	b2ad      	uxth	r5, r5
 80224a2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80224a6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80224aa:	ea4a 0606 	orr.w	r6, sl, r6
 80224ae:	f105 0a01 	add.w	sl, r5, #1
 80224b2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80224b6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80224ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80224be:	ea46 060a 	orr.w	r6, r6, sl
 80224c2:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80224c6:	e7b4      	b.n	8022432 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80224c8:	b007      	add	sp, #28
 80224ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224ce:	bf00      	nop
 80224d0:	20009828 	.word	0x20009828

080224d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80224d4:	4770      	bx	lr

080224d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80224d6:	4770      	bx	lr

080224d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80224d8:	4770      	bx	lr

080224da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80224da:	4770      	bx	lr

080224dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80224dc:	4770      	bx	lr

080224de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80224de:	4770      	bx	lr

080224e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80224e0:	4770      	bx	lr

080224e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80224e2:	4770      	bx	lr

080224e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80224e4:	4770      	bx	lr

080224e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80224e6:	4770      	bx	lr

080224e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80224e8:	4770      	bx	lr

080224ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80224ea:	4770      	bx	lr

080224ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80224ec:	4770      	bx	lr

080224ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80224ee:	4770      	bx	lr

080224f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80224f0:	4770      	bx	lr

080224f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80224f2:	4770      	bx	lr

080224f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80224f4:	4770      	bx	lr

080224f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80224f6:	4770      	bx	lr

080224f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80224f8:	4770      	bx	lr

080224fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80224fa:	4770      	bx	lr

080224fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80224fc:	4770      	bx	lr

080224fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80224fe:	4770      	bx	lr

08022500 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022500:	4770      	bx	lr

08022502 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8022502:	4770      	bx	lr

08022504 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022504:	4770      	bx	lr

08022506 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8022506:	4770      	bx	lr

08022508 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022508:	4770      	bx	lr

0802250a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802250a:	4770      	bx	lr

0802250c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 802250c:	b508      	push	{r3, lr}
 802250e:	4b06      	ldr	r3, [pc, #24]	; (8022528 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8022510:	8818      	ldrh	r0, [r3, #0]
 8022512:	b928      	cbnz	r0, 8022520 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8022514:	4b05      	ldr	r3, [pc, #20]	; (802252c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8022516:	4a06      	ldr	r2, [pc, #24]	; (8022530 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8022518:	4806      	ldr	r0, [pc, #24]	; (8022534 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 802251a:	2150      	movs	r1, #80	; 0x50
 802251c:	f00b fe7a 	bl	802e214 <__assert_func>
 8022520:	0040      	lsls	r0, r0, #1
 8022522:	b280      	uxth	r0, r0
 8022524:	bd08      	pop	{r3, pc}
 8022526:	bf00      	nop
 8022528:	2000981a 	.word	0x2000981a
 802252c:	080331a3 	.word	0x080331a3
 8022530:	0803379c 	.word	0x0803379c
 8022534:	080331e5 	.word	0x080331e5

08022538 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8022538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802253c:	b08b      	sub	sp, #44	; 0x2c
 802253e:	460f      	mov	r7, r1
 8022540:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8022544:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8022548:	4616      	mov	r6, r2
 802254a:	f1bb 0f00 	cmp.w	fp, #0
 802254e:	d049      	beq.n	80225e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8022550:	6810      	ldr	r0, [r2, #0]
 8022552:	6851      	ldr	r1, [r2, #4]
 8022554:	ad06      	add	r5, sp, #24
 8022556:	c503      	stmia	r5!, {r0, r1}
 8022558:	6818      	ldr	r0, [r3, #0]
 802255a:	6859      	ldr	r1, [r3, #4]
 802255c:	ad08      	add	r5, sp, #32
 802255e:	c503      	stmia	r5!, {r0, r1}
 8022560:	a806      	add	r0, sp, #24
 8022562:	f7f9 fd7f 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022566:	4631      	mov	r1, r6
 8022568:	a808      	add	r0, sp, #32
 802256a:	f7f9 fdbf 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802256e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8022572:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8022576:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 802257a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802257e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8022582:	fb16 2103 	smlabb	r1, r6, r3, r2
 8022586:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 802258a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802258e:	4f5f      	ldr	r7, [pc, #380]	; (802270c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8022590:	440a      	add	r2, r1
 8022592:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022596:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802259a:	6838      	ldr	r0, [r7, #0]
 802259c:	4413      	add	r3, r2
 802259e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80225a2:	6803      	ldr	r3, [r0, #0]
 80225a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80225a6:	4798      	blx	r3
 80225a8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80225ac:	46b9      	mov	r9, r7
 80225ae:	d01c      	beq.n	80225ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80225b0:	f010 0f04 	tst.w	r0, #4
 80225b4:	d01d      	beq.n	80225f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80225b6:	f8d9 0000 	ldr.w	r0, [r9]
 80225ba:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80225be:	6801      	ldr	r1, [r0, #0]
 80225c0:	f8cd b00c 	str.w	fp, [sp, #12]
 80225c4:	2700      	movs	r7, #0
 80225c6:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80225ca:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80225ce:	9402      	str	r4, [sp, #8]
 80225d0:	b2ad      	uxth	r5, r5
 80225d2:	fa1f f488 	uxth.w	r4, r8
 80225d6:	9501      	str	r5, [sp, #4]
 80225d8:	9400      	str	r4, [sp, #0]
 80225da:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80225dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80225e0:	4631      	mov	r1, r6
 80225e2:	47a0      	blx	r4
 80225e4:	b00b      	add	sp, #44	; 0x2c
 80225e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225ea:	b914      	cbnz	r4, 80225f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80225ec:	f010 0f01 	tst.w	r0, #1
 80225f0:	e7e0      	b.n	80225b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80225f2:	f8d9 0000 	ldr.w	r0, [r9]
 80225f6:	6803      	ldr	r3, [r0, #0]
 80225f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80225fa:	4798      	blx	r3
 80225fc:	4b44      	ldr	r3, [pc, #272]	; (8022710 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80225fe:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8022602:	881a      	ldrh	r2, [r3, #0]
 8022604:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022608:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802260c:	fb02 1404 	mla	r4, r2, r4, r1
 8022610:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8022614:	469a      	mov	sl, r3
 8022616:	fb05 f502 	mul.w	r5, r5, r2
 802261a:	ea4f 0748 	mov.w	r7, r8, lsl #1
 802261e:	d059      	beq.n	80226d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8022620:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8022624:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8022628:	fa1f f28b 	uxth.w	r2, fp
 802262c:	fa1f f989 	uxth.w	r9, r9
 8022630:	469e      	mov	lr, r3
 8022632:	42ac      	cmp	r4, r5
 8022634:	d264      	bcs.n	8022700 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8022636:	eb04 0a07 	add.w	sl, r4, r7
 802263a:	4554      	cmp	r4, sl
 802263c:	d23d      	bcs.n	80226ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 802263e:	8821      	ldrh	r1, [r4, #0]
 8022640:	f836 3b02 	ldrh.w	r3, [r6], #2
 8022644:	1208      	asrs	r0, r1, #8
 8022646:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802264a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802264e:	fb10 f009 	smulbb	r0, r0, r9
 8022652:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8022656:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802265a:	00c9      	lsls	r1, r1, #3
 802265c:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022660:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8022664:	10d8      	asrs	r0, r3, #3
 8022666:	b2c9      	uxtb	r1, r1
 8022668:	00db      	lsls	r3, r3, #3
 802266a:	fa1f fc8c 	uxth.w	ip, ip
 802266e:	fb1b fb09 	smulbb	fp, fp, r9
 8022672:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022676:	b2db      	uxtb	r3, r3
 8022678:	fb11 f109 	smulbb	r1, r1, r9
 802267c:	fb00 b002 	mla	r0, r0, r2, fp
 8022680:	fb03 1302 	mla	r3, r3, r2, r1
 8022684:	f10c 0b01 	add.w	fp, ip, #1
 8022688:	b29b      	uxth	r3, r3
 802268a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802268e:	b280      	uxth	r0, r0
 8022690:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8022694:	f103 0c01 	add.w	ip, r3, #1
 8022698:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802269c:	1c43      	adds	r3, r0, #1
 802269e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80226a2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80226a6:	0940      	lsrs	r0, r0, #5
 80226a8:	ea4c 0c0b 	orr.w	ip, ip, fp
 80226ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80226b0:	ea4c 0c00 	orr.w	ip, ip, r0
 80226b4:	f824 cb02 	strh.w	ip, [r4], #2
 80226b8:	e7bf      	b.n	802263a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80226ba:	f8be 3000 	ldrh.w	r3, [lr]
 80226be:	eba3 0308 	sub.w	r3, r3, r8
 80226c2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80226c6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80226ca:	eba3 0308 	sub.w	r3, r3, r8
 80226ce:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80226d2:	e7ae      	b.n	8022632 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80226d4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80226d8:	f8d9 0000 	ldr.w	r0, [r9]
 80226dc:	42ac      	cmp	r4, r5
 80226de:	6803      	ldr	r3, [r0, #0]
 80226e0:	d20e      	bcs.n	8022700 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80226e2:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80226e6:	4632      	mov	r2, r6
 80226e8:	463b      	mov	r3, r7
 80226ea:	4621      	mov	r1, r4
 80226ec:	47c0      	blx	r8
 80226ee:	f8ba 3000 	ldrh.w	r3, [sl]
 80226f2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80226f6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80226fa:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80226fe:	e7eb      	b.n	80226d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8022700:	4b02      	ldr	r3, [pc, #8]	; (802270c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8022702:	6818      	ldr	r0, [r3, #0]
 8022704:	6803      	ldr	r3, [r0, #0]
 8022706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022708:	4798      	blx	r3
 802270a:	e76b      	b.n	80225e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802270c:	20009820 	.word	0x20009820
 8022710:	2000981a 	.word	0x2000981a

08022714 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022714:	b510      	push	{r4, lr}
 8022716:	2104      	movs	r1, #4
 8022718:	4604      	mov	r4, r0
 802271a:	f00a ff5c 	bl	802d5d6 <_ZdlPvj>
 802271e:	4620      	mov	r0, r4
 8022720:	bd10      	pop	{r4, pc}

08022722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8022722:	b510      	push	{r4, lr}
 8022724:	2104      	movs	r1, #4
 8022726:	4604      	mov	r4, r0
 8022728:	f00a ff55 	bl	802d5d6 <_ZdlPvj>
 802272c:	4620      	mov	r0, r4
 802272e:	bd10      	pop	{r4, pc}

08022730 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022730:	b510      	push	{r4, lr}
 8022732:	2104      	movs	r1, #4
 8022734:	4604      	mov	r4, r0
 8022736:	f00a ff4e 	bl	802d5d6 <_ZdlPvj>
 802273a:	4620      	mov	r0, r4
 802273c:	bd10      	pop	{r4, pc}

0802273e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802273e:	b510      	push	{r4, lr}
 8022740:	2104      	movs	r1, #4
 8022742:	4604      	mov	r4, r0
 8022744:	f00a ff47 	bl	802d5d6 <_ZdlPvj>
 8022748:	4620      	mov	r0, r4
 802274a:	bd10      	pop	{r4, pc}

0802274c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802274c:	b510      	push	{r4, lr}
 802274e:	2104      	movs	r1, #4
 8022750:	4604      	mov	r4, r0
 8022752:	f00a ff40 	bl	802d5d6 <_ZdlPvj>
 8022756:	4620      	mov	r0, r4
 8022758:	bd10      	pop	{r4, pc}

0802275a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802275a:	b510      	push	{r4, lr}
 802275c:	2104      	movs	r1, #4
 802275e:	4604      	mov	r4, r0
 8022760:	f00a ff39 	bl	802d5d6 <_ZdlPvj>
 8022764:	4620      	mov	r0, r4
 8022766:	bd10      	pop	{r4, pc}

08022768 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022768:	b510      	push	{r4, lr}
 802276a:	2104      	movs	r1, #4
 802276c:	4604      	mov	r4, r0
 802276e:	f00a ff32 	bl	802d5d6 <_ZdlPvj>
 8022772:	4620      	mov	r0, r4
 8022774:	bd10      	pop	{r4, pc}

08022776 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8022776:	b510      	push	{r4, lr}
 8022778:	2104      	movs	r1, #4
 802277a:	4604      	mov	r4, r0
 802277c:	f00a ff2b 	bl	802d5d6 <_ZdlPvj>
 8022780:	4620      	mov	r0, r4
 8022782:	bd10      	pop	{r4, pc}

08022784 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022784:	b510      	push	{r4, lr}
 8022786:	2104      	movs	r1, #4
 8022788:	4604      	mov	r4, r0
 802278a:	f00a ff24 	bl	802d5d6 <_ZdlPvj>
 802278e:	4620      	mov	r0, r4
 8022790:	bd10      	pop	{r4, pc}

08022792 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022792:	b510      	push	{r4, lr}
 8022794:	2104      	movs	r1, #4
 8022796:	4604      	mov	r4, r0
 8022798:	f00a ff1d 	bl	802d5d6 <_ZdlPvj>
 802279c:	4620      	mov	r0, r4
 802279e:	bd10      	pop	{r4, pc}

080227a0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80227a0:	b510      	push	{r4, lr}
 80227a2:	2104      	movs	r1, #4
 80227a4:	4604      	mov	r4, r0
 80227a6:	f00a ff16 	bl	802d5d6 <_ZdlPvj>
 80227aa:	4620      	mov	r0, r4
 80227ac:	bd10      	pop	{r4, pc}

080227ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80227ae:	b510      	push	{r4, lr}
 80227b0:	2104      	movs	r1, #4
 80227b2:	4604      	mov	r4, r0
 80227b4:	f00a ff0f 	bl	802d5d6 <_ZdlPvj>
 80227b8:	4620      	mov	r0, r4
 80227ba:	bd10      	pop	{r4, pc}

080227bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80227bc:	b510      	push	{r4, lr}
 80227be:	2104      	movs	r1, #4
 80227c0:	4604      	mov	r4, r0
 80227c2:	f00a ff08 	bl	802d5d6 <_ZdlPvj>
 80227c6:	4620      	mov	r0, r4
 80227c8:	bd10      	pop	{r4, pc}

080227ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80227ca:	b510      	push	{r4, lr}
 80227cc:	2104      	movs	r1, #4
 80227ce:	4604      	mov	r4, r0
 80227d0:	f00a ff01 	bl	802d5d6 <_ZdlPvj>
 80227d4:	4620      	mov	r0, r4
 80227d6:	bd10      	pop	{r4, pc}

080227d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80227d8:	b510      	push	{r4, lr}
 80227da:	2104      	movs	r1, #4
 80227dc:	4604      	mov	r4, r0
 80227de:	f00a fefa 	bl	802d5d6 <_ZdlPvj>
 80227e2:	4620      	mov	r0, r4
 80227e4:	bd10      	pop	{r4, pc}

080227e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80227e6:	b510      	push	{r4, lr}
 80227e8:	2104      	movs	r1, #4
 80227ea:	4604      	mov	r4, r0
 80227ec:	f00a fef3 	bl	802d5d6 <_ZdlPvj>
 80227f0:	4620      	mov	r0, r4
 80227f2:	bd10      	pop	{r4, pc}

080227f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80227f4:	b510      	push	{r4, lr}
 80227f6:	2104      	movs	r1, #4
 80227f8:	4604      	mov	r4, r0
 80227fa:	f00a feec 	bl	802d5d6 <_ZdlPvj>
 80227fe:	4620      	mov	r0, r4
 8022800:	bd10      	pop	{r4, pc}

08022802 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8022802:	b510      	push	{r4, lr}
 8022804:	2104      	movs	r1, #4
 8022806:	4604      	mov	r4, r0
 8022808:	f00a fee5 	bl	802d5d6 <_ZdlPvj>
 802280c:	4620      	mov	r0, r4
 802280e:	bd10      	pop	{r4, pc}

08022810 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022810:	b510      	push	{r4, lr}
 8022812:	2104      	movs	r1, #4
 8022814:	4604      	mov	r4, r0
 8022816:	f00a fede 	bl	802d5d6 <_ZdlPvj>
 802281a:	4620      	mov	r0, r4
 802281c:	bd10      	pop	{r4, pc}

0802281e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802281e:	b510      	push	{r4, lr}
 8022820:	2104      	movs	r1, #4
 8022822:	4604      	mov	r4, r0
 8022824:	f00a fed7 	bl	802d5d6 <_ZdlPvj>
 8022828:	4620      	mov	r0, r4
 802282a:	bd10      	pop	{r4, pc}

0802282c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802282c:	b510      	push	{r4, lr}
 802282e:	2104      	movs	r1, #4
 8022830:	4604      	mov	r4, r0
 8022832:	f00a fed0 	bl	802d5d6 <_ZdlPvj>
 8022836:	4620      	mov	r0, r4
 8022838:	bd10      	pop	{r4, pc}

0802283a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802283a:	b510      	push	{r4, lr}
 802283c:	2104      	movs	r1, #4
 802283e:	4604      	mov	r4, r0
 8022840:	f00a fec9 	bl	802d5d6 <_ZdlPvj>
 8022844:	4620      	mov	r0, r4
 8022846:	bd10      	pop	{r4, pc}

08022848 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022848:	b510      	push	{r4, lr}
 802284a:	2104      	movs	r1, #4
 802284c:	4604      	mov	r4, r0
 802284e:	f00a fec2 	bl	802d5d6 <_ZdlPvj>
 8022852:	4620      	mov	r0, r4
 8022854:	bd10      	pop	{r4, pc}

08022856 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8022856:	b510      	push	{r4, lr}
 8022858:	2104      	movs	r1, #4
 802285a:	4604      	mov	r4, r0
 802285c:	f00a febb 	bl	802d5d6 <_ZdlPvj>
 8022860:	4620      	mov	r0, r4
 8022862:	bd10      	pop	{r4, pc}

08022864 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8022864:	b510      	push	{r4, lr}
 8022866:	2104      	movs	r1, #4
 8022868:	4604      	mov	r4, r0
 802286a:	f00a feb4 	bl	802d5d6 <_ZdlPvj>
 802286e:	4620      	mov	r0, r4
 8022870:	bd10      	pop	{r4, pc}

08022872 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8022872:	b510      	push	{r4, lr}
 8022874:	2104      	movs	r1, #4
 8022876:	4604      	mov	r4, r0
 8022878:	f00a fead 	bl	802d5d6 <_ZdlPvj>
 802287c:	4620      	mov	r0, r4
 802287e:	bd10      	pop	{r4, pc}

08022880 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8022880:	b510      	push	{r4, lr}
 8022882:	2104      	movs	r1, #4
 8022884:	4604      	mov	r4, r0
 8022886:	f00a fea6 	bl	802d5d6 <_ZdlPvj>
 802288a:	4620      	mov	r0, r4
 802288c:	bd10      	pop	{r4, pc}

0802288e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802288e:	b510      	push	{r4, lr}
 8022890:	2104      	movs	r1, #4
 8022892:	4604      	mov	r4, r0
 8022894:	f00a fe9f 	bl	802d5d6 <_ZdlPvj>
 8022898:	4620      	mov	r0, r4
 802289a:	bd10      	pop	{r4, pc}

0802289c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 802289c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802289e:	4606      	mov	r6, r0
 80228a0:	b087      	sub	sp, #28
 80228a2:	460c      	mov	r4, r1
 80228a4:	4617      	mov	r7, r2
 80228a6:	461d      	mov	r5, r3
 80228a8:	b333      	cbz	r3, 80228f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80228aa:	4608      	mov	r0, r1
 80228ac:	f7f4 ff7b 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80228b0:	bb10      	cbnz	r0, 80228f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80228b2:	6820      	ldr	r0, [r4, #0]
 80228b4:	6861      	ldr	r1, [r4, #4]
 80228b6:	4c1c      	ldr	r4, [pc, #112]	; (8022928 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80228b8:	ab04      	add	r3, sp, #16
 80228ba:	c303      	stmia	r3!, {r0, r1}
 80228bc:	a804      	add	r0, sp, #16
 80228be:	f7f9 fbd1 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80228c2:	6820      	ldr	r0, [r4, #0]
 80228c4:	6803      	ldr	r3, [r0, #0]
 80228c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80228c8:	4798      	blx	r3
 80228ca:	2dff      	cmp	r5, #255	; 0xff
 80228cc:	d016      	beq.n	80228fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80228ce:	f010 0f08 	tst.w	r0, #8
 80228d2:	6820      	ldr	r0, [r4, #0]
 80228d4:	d015      	beq.n	8022902 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80228d6:	2400      	movs	r4, #0
 80228d8:	6801      	ldr	r1, [r0, #0]
 80228da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80228de:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80228e2:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80228e6:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80228ea:	9401      	str	r4, [sp, #4]
 80228ec:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80228f0:	9400      	str	r4, [sp, #0]
 80228f2:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 80228f4:	4639      	mov	r1, r7
 80228f6:	47a0      	blx	r4
 80228f8:	b007      	add	sp, #28
 80228fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80228fc:	f010 0f02 	tst.w	r0, #2
 8022900:	e7e7      	b.n	80228d2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8022902:	6803      	ldr	r3, [r0, #0]
 8022904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022906:	4798      	blx	r3
 8022908:	4b08      	ldr	r3, [pc, #32]	; (802292c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 802290a:	881a      	ldrh	r2, [r3, #0]
 802290c:	6833      	ldr	r3, [r6, #0]
 802290e:	e9cd 7500 	strd	r7, r5, [sp]
 8022912:	4601      	mov	r1, r0
 8022914:	69dd      	ldr	r5, [r3, #28]
 8022916:	4630      	mov	r0, r6
 8022918:	ab04      	add	r3, sp, #16
 802291a:	47a8      	blx	r5
 802291c:	6820      	ldr	r0, [r4, #0]
 802291e:	6803      	ldr	r3, [r0, #0]
 8022920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022922:	4798      	blx	r3
 8022924:	e7e8      	b.n	80228f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022926:	bf00      	nop
 8022928:	20009820 	.word	0x20009820
 802292c:	2000981a 	.word	0x2000981a

08022930 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8022930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022934:	4f97      	ldr	r7, [pc, #604]	; (8022b94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8022936:	4616      	mov	r6, r2
 8022938:	683a      	ldr	r2, [r7, #0]
 802293a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 802293e:	2a02      	cmp	r2, #2
 8022940:	b08f      	sub	sp, #60	; 0x3c
 8022942:	4604      	mov	r4, r0
 8022944:	4689      	mov	r9, r1
 8022946:	d106      	bne.n	8022956 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8022948:	4b93      	ldr	r3, [pc, #588]	; (8022b98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 802294a:	4a94      	ldr	r2, [pc, #592]	; (8022b9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 802294c:	f44f 7159 	mov.w	r1, #868	; 0x364
 8022950:	4893      	ldr	r0, [pc, #588]	; (8022ba0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8022952:	f00b fc5f 	bl	802e214 <__assert_func>
 8022956:	ad0e      	add	r5, sp, #56	; 0x38
 8022958:	f825 3d24 	strh.w	r3, [r5, #-36]!
 802295c:	4628      	mov	r0, r5
 802295e:	f7fd fad3 	bl	801ff08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022962:	6823      	ldr	r3, [r4, #0]
 8022964:	4680      	mov	r8, r0
 8022966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022968:	4620      	mov	r0, r4
 802296a:	4798      	blx	r3
 802296c:	4580      	cmp	r8, r0
 802296e:	d004      	beq.n	802297a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8022970:	4b8c      	ldr	r3, [pc, #560]	; (8022ba4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8022972:	4a8a      	ldr	r2, [pc, #552]	; (8022b9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022974:	f240 3166 	movw	r1, #870	; 0x366
 8022978:	e7ea      	b.n	8022950 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802297a:	4628      	mov	r0, r5
 802297c:	f7fd fa3a 	bl	801fdf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022980:	4680      	mov	r8, r0
 8022982:	b920      	cbnz	r0, 802298e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8022984:	4b88      	ldr	r3, [pc, #544]	; (8022ba8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8022986:	4a85      	ldr	r2, [pc, #532]	; (8022b9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022988:	f44f 715a 	mov.w	r1, #872	; 0x368
 802298c:	e7e0      	b.n	8022950 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802298e:	6830      	ldr	r0, [r6, #0]
 8022990:	6871      	ldr	r1, [r6, #4]
 8022992:	f9b6 a000 	ldrsh.w	sl, [r6]
 8022996:	ab06      	add	r3, sp, #24
 8022998:	c303      	stmia	r3!, {r0, r1}
 802299a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802299e:	f8d9 0000 	ldr.w	r0, [r9]
 80229a2:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80229a6:	ab08      	add	r3, sp, #32
 80229a8:	c303      	stmia	r3!, {r0, r1}
 80229aa:	4628      	mov	r0, r5
 80229ac:	f7fd f91a 	bl	801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80229b0:	4606      	mov	r6, r0
 80229b2:	4628      	mov	r0, r5
 80229b4:	f7fd f950 	bl	801fc58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80229b8:	f10d 0b20 	add.w	fp, sp, #32
 80229bc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80229c0:	a806      	add	r0, sp, #24
 80229c2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80229c6:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80229ca:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 80229ce:	f7f9 fb49 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80229d2:	4658      	mov	r0, fp
 80229d4:	f7f9 fb46 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80229d8:	a80a      	add	r0, sp, #40	; 0x28
 80229da:	f7f9 fb43 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80229de:	4d73      	ldr	r5, [pc, #460]	; (8022bac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80229e0:	4b73      	ldr	r3, [pc, #460]	; (8022bb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80229e2:	f9b5 2000 	ldrsh.w	r2, [r5]
 80229e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80229ea:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80229ee:	2100      	movs	r1, #0
 80229f0:	910c      	str	r1, [sp, #48]	; 0x30
 80229f2:	4658      	mov	r0, fp
 80229f4:	a90c      	add	r1, sp, #48	; 0x30
 80229f6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80229fa:	f7f4 fe91 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 80229fe:	4658      	mov	r0, fp
 8022a00:	f7f4 fed1 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022a04:	2800      	cmp	r0, #0
 8022a06:	f040 8099 	bne.w	8022b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022a0a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8022a0e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8022a12:	4288      	cmp	r0, r1
 8022a14:	db37      	blt.n	8022a86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022a16:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8022a1a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8022a1e:	429a      	cmp	r2, r3
 8022a20:	db31      	blt.n	8022a86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022a22:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8022a26:	4430      	add	r0, r6
 8022a28:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022a2c:	4431      	add	r1, r6
 8022a2e:	b200      	sxth	r0, r0
 8022a30:	b209      	sxth	r1, r1
 8022a32:	4288      	cmp	r0, r1
 8022a34:	dc27      	bgt.n	8022a86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022a36:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8022a3a:	440a      	add	r2, r1
 8022a3c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8022a40:	440b      	add	r3, r1
 8022a42:	b212      	sxth	r2, r2
 8022a44:	b21b      	sxth	r3, r3
 8022a46:	429a      	cmp	r2, r3
 8022a48:	dc1d      	bgt.n	8022a86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022a4a:	6823      	ldr	r3, [r4, #0]
 8022a4c:	4620      	mov	r0, r4
 8022a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a50:	4798      	blx	r3
 8022a52:	4682      	mov	sl, r0
 8022a54:	6838      	ldr	r0, [r7, #0]
 8022a56:	6803      	ldr	r3, [r0, #0]
 8022a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a5a:	4798      	blx	r3
 8022a5c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8022a60:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8022a64:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8022a68:	1a5b      	subs	r3, r3, r1
 8022a6a:	b29b      	uxth	r3, r3
 8022a6c:	b21c      	sxth	r4, r3
 8022a6e:	2c00      	cmp	r4, #0
 8022a70:	dc0e      	bgt.n	8022a90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8022a72:	bf1f      	itttt	ne
 8022a74:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8022a78:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8022a7c:	185b      	addne	r3, r3, r1
 8022a7e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8022a82:	4644      	mov	r4, r8
 8022a84:	e009      	b.n	8022a9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 8022a86:	4b4b      	ldr	r3, [pc, #300]	; (8022bb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8022a88:	4a44      	ldr	r2, [pc, #272]	; (8022b9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022a8a:	f240 3176 	movw	r1, #886	; 0x376
 8022a8e:	e75f      	b.n	8022950 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022a90:	1ad3      	subs	r3, r2, r3
 8022a92:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022a96:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022a9a:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8022a9e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8022aa2:	1b9b      	subs	r3, r3, r6
 8022aa4:	b29b      	uxth	r3, r3
 8022aa6:	b219      	sxth	r1, r3
 8022aa8:	2900      	cmp	r1, #0
 8022aaa:	dd4b      	ble.n	8022b44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 8022aac:	4351      	muls	r1, r2
 8022aae:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022ab2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8022ab6:	1acb      	subs	r3, r1, r3
 8022ab8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8022abc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8022ac0:	2e00      	cmp	r6, #0
 8022ac2:	dd3b      	ble.n	8022b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022ac4:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8022ac8:	2b00      	cmp	r3, #0
 8022aca:	dd37      	ble.n	8022b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022acc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8022ad0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022ad4:	fb0a f90c 	mul.w	r9, sl, ip
 8022ad8:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8022adc:	4481      	add	r9, r0
 8022ade:	8828      	ldrh	r0, [r5, #0]
 8022ae0:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8022ae4:	42ae      	cmp	r6, r5
 8022ae6:	bfa8      	it	ge
 8022ae8:	462e      	movge	r6, r5
 8022aea:	1a41      	subs	r1, r0, r1
 8022aec:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8022af0:	428e      	cmp	r6, r1
 8022af2:	bfa8      	it	ge
 8022af4:	460e      	movge	r6, r1
 8022af6:	429d      	cmp	r5, r3
 8022af8:	bfa8      	it	ge
 8022afa:	461d      	movge	r5, r3
 8022afc:	4b2c      	ldr	r3, [pc, #176]	; (8022bb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8022afe:	881b      	ldrh	r3, [r3, #0]
 8022b00:	eba3 030c 	sub.w	r3, r3, ip
 8022b04:	429d      	cmp	r5, r3
 8022b06:	bfa8      	it	ge
 8022b08:	461d      	movge	r5, r3
 8022b0a:	42b0      	cmp	r0, r6
 8022b0c:	d12c      	bne.n	8022b68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 8022b0e:	4290      	cmp	r0, r2
 8022b10:	d12a      	bne.n	8022b68 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 8022b12:	6838      	ldr	r0, [r7, #0]
 8022b14:	9203      	str	r2, [sp, #12]
 8022b16:	6803      	ldr	r3, [r0, #0]
 8022b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b1a:	4798      	blx	r3
 8022b1c:	07c3      	lsls	r3, r0, #31
 8022b1e:	d51a      	bpl.n	8022b56 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 8022b20:	9a03      	ldr	r2, [sp, #12]
 8022b22:	6838      	ldr	r0, [r7, #0]
 8022b24:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8022b28:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8022b2c:	6803      	ldr	r3, [r0, #0]
 8022b2e:	9200      	str	r2, [sp, #0]
 8022b30:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8022b32:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8022b36:	4623      	mov	r3, r4
 8022b38:	47a8      	blx	r5
 8022b3a:	4680      	mov	r8, r0
 8022b3c:	4640      	mov	r0, r8
 8022b3e:	b00f      	add	sp, #60	; 0x3c
 8022b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b44:	bf1f      	itttt	ne
 8022b46:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8022b4a:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8022b4e:	185b      	addne	r3, r3, r1
 8022b50:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8022b54:	e7b2      	b.n	8022abc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 8022b56:	6838      	ldr	r0, [r7, #0]
 8022b58:	6803      	ldr	r3, [r0, #0]
 8022b5a:	464a      	mov	r2, r9
 8022b5c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8022b5e:	4621      	mov	r1, r4
 8022b60:	fb05 f30a 	mul.w	r3, r5, sl
 8022b64:	47b0      	blx	r6
 8022b66:	e7e9      	b.n	8022b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022b68:	4355      	muls	r5, r2
 8022b6a:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8022b6e:	9303      	str	r3, [sp, #12]
 8022b70:	0076      	lsls	r6, r6, #1
 8022b72:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8022b76:	9b03      	ldr	r3, [sp, #12]
 8022b78:	429c      	cmp	r4, r3
 8022b7a:	d2df      	bcs.n	8022b3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022b7c:	6838      	ldr	r0, [r7, #0]
 8022b7e:	6803      	ldr	r3, [r0, #0]
 8022b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022b82:	464a      	mov	r2, r9
 8022b84:	461d      	mov	r5, r3
 8022b86:	4621      	mov	r1, r4
 8022b88:	4633      	mov	r3, r6
 8022b8a:	47a8      	blx	r5
 8022b8c:	44d1      	add	r9, sl
 8022b8e:	445c      	add	r4, fp
 8022b90:	e7f1      	b.n	8022b76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 8022b92:	bf00      	nop
 8022b94:	20009820 	.word	0x20009820
 8022b98:	08032f9b 	.word	0x08032f9b
 8022b9c:	0803384c 	.word	0x0803384c
 8022ba0:	0803304d 	.word	0x0803304d
 8022ba4:	0803307f 	.word	0x0803307f
 8022ba8:	080330d4 	.word	0x080330d4
 8022bac:	2000981a 	.word	0x2000981a
 8022bb0:	2000981c 	.word	0x2000981c
 8022bb4:	08033112 	.word	0x08033112

08022bb8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8022bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022bbc:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8022bc0:	9e08      	ldr	r6, [sp, #32]
 8022bc2:	4688      	mov	r8, r1
 8022bc4:	4614      	mov	r4, r2
 8022bc6:	461d      	mov	r5, r3
 8022bc8:	2f00      	cmp	r7, #0
 8022bca:	f000 80b3 	beq.w	8022d34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022bce:	4618      	mov	r0, r3
 8022bd0:	f7f4 fde9 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022bd4:	2800      	cmp	r0, #0
 8022bd6:	f040 80ad 	bne.w	8022d34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022bda:	f9b5 1000 	ldrsh.w	r1, [r5]
 8022bde:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8022be2:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8022be6:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8022bea:	fb04 1303 	mla	r3, r4, r3, r1
 8022bee:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8022bf2:	4365      	muls	r5, r4
 8022bf4:	2fff      	cmp	r7, #255	; 0xff
 8022bf6:	eba4 0200 	sub.w	r2, r4, r0
 8022bfa:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8022bfe:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8022c02:	d04b      	beq.n	8022c9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8022c04:	b2bc      	uxth	r4, r7
 8022c06:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8022c0a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8022c0e:	fa5f f788 	uxtb.w	r7, r8
 8022c12:	b2f3      	uxtb	r3, r6
 8022c14:	0040      	lsls	r0, r0, #1
 8022c16:	fb0e fe04 	mul.w	lr, lr, r4
 8022c1a:	4367      	muls	r7, r4
 8022c1c:	4363      	muls	r3, r4
 8022c1e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8022c22:	fa1f fc8c 	uxth.w	ip, ip
 8022c26:	42a9      	cmp	r1, r5
 8022c28:	f080 8084 	bcs.w	8022d34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022c2c:	eb01 0900 	add.w	r9, r1, r0
 8022c30:	4549      	cmp	r1, r9
 8022c32:	d231      	bcs.n	8022c98 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8022c34:	880a      	ldrh	r2, [r1, #0]
 8022c36:	1214      	asrs	r4, r2, #8
 8022c38:	10d6      	asrs	r6, r2, #3
 8022c3a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022c3e:	00d2      	lsls	r2, r2, #3
 8022c40:	b2d2      	uxtb	r2, r2
 8022c42:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022c46:	fb14 f40c 	smulbb	r4, r4, ip
 8022c4a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022c4e:	4474      	add	r4, lr
 8022c50:	fb12 f20c 	smulbb	r2, r2, ip
 8022c54:	b2a4      	uxth	r4, r4
 8022c56:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022c5a:	441a      	add	r2, r3
 8022c5c:	b292      	uxth	r2, r2
 8022c5e:	f104 0a01 	add.w	sl, r4, #1
 8022c62:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8022c66:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022c6a:	fb16 f60c 	smulbb	r6, r6, ip
 8022c6e:	f102 0a01 	add.w	sl, r2, #1
 8022c72:	443e      	add	r6, r7
 8022c74:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8022c78:	b2b6      	uxth	r6, r6
 8022c7a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022c7e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022c82:	4322      	orrs	r2, r4
 8022c84:	1c74      	adds	r4, r6, #1
 8022c86:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022c8a:	0976      	lsrs	r6, r6, #5
 8022c8c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022c90:	4332      	orrs	r2, r6
 8022c92:	f821 2b02 	strh.w	r2, [r1], #2
 8022c96:	e7cb      	b.n	8022c30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8022c98:	4441      	add	r1, r8
 8022c9a:	e7c4      	b.n	8022c26 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8022c9c:	4f26      	ldr	r7, [pc, #152]	; (8022d38 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x180>)
 8022c9e:	0973      	lsrs	r3, r6, #5
 8022ca0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022ca4:	ea08 0707 	and.w	r7, r8, r7
 8022ca8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022cac:	433b      	orrs	r3, r7
 8022cae:	4333      	orrs	r3, r6
 8022cb0:	07e6      	lsls	r6, r4, #31
 8022cb2:	b29b      	uxth	r3, r3
 8022cb4:	d50b      	bpl.n	8022cce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x116>
 8022cb6:	0040      	lsls	r0, r0, #1
 8022cb8:	0052      	lsls	r2, r2, #1
 8022cba:	42a9      	cmp	r1, r5
 8022cbc:	d23a      	bcs.n	8022d34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022cbe:	180c      	adds	r4, r1, r0
 8022cc0:	42a1      	cmp	r1, r4
 8022cc2:	d202      	bcs.n	8022cca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x112>
 8022cc4:	f821 3b02 	strh.w	r3, [r1], #2
 8022cc8:	e7fa      	b.n	8022cc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x108>
 8022cca:	4411      	add	r1, r2
 8022ccc:	e7f5      	b.n	8022cba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x102>
 8022cce:	078f      	lsls	r7, r1, #30
 8022cd0:	d008      	beq.n	8022ce4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>
 8022cd2:	0066      	lsls	r6, r4, #1
 8022cd4:	460a      	mov	r2, r1
 8022cd6:	42aa      	cmp	r2, r5
 8022cd8:	d202      	bcs.n	8022ce0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>
 8022cda:	8013      	strh	r3, [r2, #0]
 8022cdc:	4432      	add	r2, r6
 8022cde:	e7fa      	b.n	8022cd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11e>
 8022ce0:	3102      	adds	r1, #2
 8022ce2:	3801      	subs	r0, #1
 8022ce4:	07c6      	lsls	r6, r0, #31
 8022ce6:	d50b      	bpl.n	8022d00 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8022ce8:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8022cec:	3a01      	subs	r2, #1
 8022cee:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8022cf2:	0066      	lsls	r6, r4, #1
 8022cf4:	42aa      	cmp	r2, r5
 8022cf6:	d202      	bcs.n	8022cfe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8022cf8:	8013      	strh	r3, [r2, #0]
 8022cfa:	4432      	add	r2, r6
 8022cfc:	e7fa      	b.n	8022cf4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>
 8022cfe:	3801      	subs	r0, #1
 8022d00:	b1c0      	cbz	r0, 8022d34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022d02:	1040      	asrs	r0, r0, #1
 8022d04:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8022d08:	0080      	lsls	r0, r0, #2
 8022d0a:	0064      	lsls	r4, r4, #1
 8022d0c:	42a9      	cmp	r1, r5
 8022d0e:	d211      	bcs.n	8022d34 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022d10:	078a      	lsls	r2, r1, #30
 8022d12:	d006      	beq.n	8022d22 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16a>
 8022d14:	4b09      	ldr	r3, [pc, #36]	; (8022d3c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8022d16:	4a0a      	ldr	r2, [pc, #40]	; (8022d40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8022d18:	480a      	ldr	r0, [pc, #40]	; (8022d44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8022d1a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8022d1e:	f00b fa79 	bl	802e214 <__assert_func>
 8022d22:	180e      	adds	r6, r1, r0
 8022d24:	460a      	mov	r2, r1
 8022d26:	42b2      	cmp	r2, r6
 8022d28:	d202      	bcs.n	8022d30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x178>
 8022d2a:	f842 3b04 	str.w	r3, [r2], #4
 8022d2e:	e7fa      	b.n	8022d26 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 8022d30:	4421      	add	r1, r4
 8022d32:	e7eb      	b.n	8022d0c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x154>
 8022d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d38:	00fff800 	.word	0x00fff800
 8022d3c:	08032e4c 	.word	0x08032e4c
 8022d40:	08033498 	.word	0x08033498
 8022d44:	0803304d 	.word	0x0803304d

08022d48 <_ZN8touchgfx8LCD16bppC1Ev>:
 8022d48:	2200      	movs	r2, #0
 8022d4a:	4910      	ldr	r1, [pc, #64]	; (8022d8c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8022d4c:	6042      	str	r2, [r0, #4]
 8022d4e:	6001      	str	r1, [r0, #0]
 8022d50:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022d54:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022d58:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022d5c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022d60:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8022d64:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022d68:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022d6c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022d70:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8022d74:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022d78:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8022d7c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8022d80:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8022d84:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8022d88:	4770      	bx	lr
 8022d8a:	bf00      	nop
 8022d8c:	08033450 	.word	0x08033450

08022d90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d94:	460d      	mov	r5, r1
 8022d96:	b08d      	sub	sp, #52	; 0x34
 8022d98:	4604      	mov	r4, r0
 8022d9a:	6808      	ldr	r0, [r1, #0]
 8022d9c:	6849      	ldr	r1, [r1, #4]
 8022d9e:	4699      	mov	r9, r3
 8022da0:	ab08      	add	r3, sp, #32
 8022da2:	c303      	stmia	r3!, {r0, r1}
 8022da4:	6810      	ldr	r0, [r2, #0]
 8022da6:	6851      	ldr	r1, [r2, #4]
 8022da8:	ab0a      	add	r3, sp, #40	; 0x28
 8022daa:	c303      	stmia	r3!, {r0, r1}
 8022dac:	a808      	add	r0, sp, #32
 8022dae:	f7f9 f959 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022db2:	4629      	mov	r1, r5
 8022db4:	a80a      	add	r0, sp, #40	; 0x28
 8022db6:	f7f9 f999 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022dba:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022dbe:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8022dc2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022dc6:	4d63      	ldr	r5, [pc, #396]	; (8022f54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022dc8:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8022dcc:	6828      	ldr	r0, [r5, #0]
 8022dce:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022dd2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022dd6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022dda:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022dde:	440a      	add	r2, r1
 8022de0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022de4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8022de8:	4413      	add	r3, r2
 8022dea:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022dee:	6803      	ldr	r3, [r0, #0]
 8022df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022df2:	4798      	blx	r3
 8022df4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022df8:	d119      	bne.n	8022e2e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8022dfa:	f010 0f20 	tst.w	r0, #32
 8022dfe:	6828      	ldr	r0, [r5, #0]
 8022e00:	d018      	beq.n	8022e34 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8022e02:	2500      	movs	r5, #0
 8022e04:	6801      	ldr	r1, [r0, #0]
 8022e06:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022e0a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022e0e:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022e12:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8022e16:	9502      	str	r5, [sp, #8]
 8022e18:	b2b6      	uxth	r6, r6
 8022e1a:	fa1f f588 	uxth.w	r5, r8
 8022e1e:	9601      	str	r6, [sp, #4]
 8022e20:	9500      	str	r5, [sp, #0]
 8022e22:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8022e24:	4621      	mov	r1, r4
 8022e26:	47a8      	blx	r5
 8022e28:	b00d      	add	sp, #52	; 0x34
 8022e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022e32:	e7e4      	b.n	8022dfe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022e34:	6803      	ldr	r3, [r0, #0]
 8022e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e38:	4798      	blx	r3
 8022e3a:	4947      	ldr	r1, [pc, #284]	; (8022f58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022e3c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022e40:	880b      	ldrh	r3, [r1, #0]
 8022e42:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8022e46:	fb03 5202 	mla	r2, r3, r2, r5
 8022e4a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022e4e:	4373      	muls	r3, r6
 8022e50:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022e54:	9307      	str	r3, [sp, #28]
 8022e56:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022e5a:	9306      	str	r3, [sp, #24]
 8022e5c:	468a      	mov	sl, r1
 8022e5e:	9b07      	ldr	r3, [sp, #28]
 8022e60:	4298      	cmp	r0, r3
 8022e62:	d270      	bcs.n	8022f46 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022e64:	9b06      	ldr	r3, [sp, #24]
 8022e66:	4621      	mov	r1, r4
 8022e68:	eb00 0b03 	add.w	fp, r0, r3
 8022e6c:	4558      	cmp	r0, fp
 8022e6e:	d25d      	bcs.n	8022f2c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022e70:	f851 4b04 	ldr.w	r4, [r1], #4
 8022e74:	0e23      	lsrs	r3, r4, #24
 8022e76:	d014      	beq.n	8022ea2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022e78:	2bff      	cmp	r3, #255	; 0xff
 8022e7a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8022e7e:	d112      	bne.n	8022ea6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022e80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022e84:	d10f      	bne.n	8022ea6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022e86:	0963      	lsrs	r3, r4, #5
 8022e88:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8022e8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e90:	f02c 0c07 	bic.w	ip, ip, #7
 8022e94:	ea43 0c0c 	orr.w	ip, r3, ip
 8022e98:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022e9c:	ea4c 0404 	orr.w	r4, ip, r4
 8022ea0:	8004      	strh	r4, [r0, #0]
 8022ea2:	3002      	adds	r0, #2
 8022ea4:	e7e2      	b.n	8022e6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8022ea6:	fb09 f303 	mul.w	r3, r9, r3
 8022eaa:	8807      	ldrh	r7, [r0, #0]
 8022eac:	1c5a      	adds	r2, r3, #1
 8022eae:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022eb2:	1212      	asrs	r2, r2, #8
 8022eb4:	123e      	asrs	r6, r7, #8
 8022eb6:	b293      	uxth	r3, r2
 8022eb8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022ebc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022ec0:	43d2      	mvns	r2, r2
 8022ec2:	b2d2      	uxtb	r2, r2
 8022ec4:	10fd      	asrs	r5, r7, #3
 8022ec6:	fb1e fe03 	smulbb	lr, lr, r3
 8022eca:	00ff      	lsls	r7, r7, #3
 8022ecc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022ed0:	fb06 e602 	mla	r6, r6, r2, lr
 8022ed4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022ed8:	b2ff      	uxtb	r7, r7
 8022eda:	fa5f fc8c 	uxtb.w	ip, ip
 8022ede:	b2e4      	uxtb	r4, r4
 8022ee0:	b2b6      	uxth	r6, r6
 8022ee2:	fb1c fc03 	smulbb	ip, ip, r3
 8022ee6:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022eea:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8022eee:	fb14 f403 	smulbb	r4, r4, r3
 8022ef2:	fb05 c502 	mla	r5, r5, r2, ip
 8022ef6:	f106 0e01 	add.w	lr, r6, #1
 8022efa:	fb07 4702 	mla	r7, r7, r2, r4
 8022efe:	b2ad      	uxth	r5, r5
 8022f00:	b2bf      	uxth	r7, r7
 8022f02:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8022f06:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8022f0a:	f105 0c01 	add.w	ip, r5, #1
 8022f0e:	1c7e      	adds	r6, r7, #1
 8022f10:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8022f14:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022f18:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022f1c:	096d      	lsrs	r5, r5, #5
 8022f1e:	ea46 060e 	orr.w	r6, r6, lr
 8022f22:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022f26:	432e      	orrs	r6, r5
 8022f28:	8006      	strh	r6, [r0, #0]
 8022f2a:	e7ba      	b.n	8022ea2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022f2c:	f8ba 3000 	ldrh.w	r3, [sl]
 8022f30:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8022f34:	eba3 0308 	sub.w	r3, r3, r8
 8022f38:	eba4 0408 	sub.w	r4, r4, r8
 8022f3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022f40:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022f44:	e78b      	b.n	8022e5e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8022f46:	4b03      	ldr	r3, [pc, #12]	; (8022f54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022f48:	6818      	ldr	r0, [r3, #0]
 8022f4a:	6803      	ldr	r3, [r0, #0]
 8022f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f4e:	4798      	blx	r3
 8022f50:	e76a      	b.n	8022e28 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8022f52:	bf00      	nop
 8022f54:	20009820 	.word	0x20009820
 8022f58:	2000981a 	.word	0x2000981a

08022f5c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8022f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f60:	460c      	mov	r4, r1
 8022f62:	b085      	sub	sp, #20
 8022f64:	6810      	ldr	r0, [r2, #0]
 8022f66:	6851      	ldr	r1, [r2, #4]
 8022f68:	466d      	mov	r5, sp
 8022f6a:	c503      	stmia	r5!, {r0, r1}
 8022f6c:	6818      	ldr	r0, [r3, #0]
 8022f6e:	6859      	ldr	r1, [r3, #4]
 8022f70:	4616      	mov	r6, r2
 8022f72:	c503      	stmia	r5!, {r0, r1}
 8022f74:	4668      	mov	r0, sp
 8022f76:	f7f9 f875 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f7a:	4631      	mov	r1, r6
 8022f7c:	a802      	add	r0, sp, #8
 8022f7e:	f7f9 f8b5 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f82:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022f86:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022f8a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8022f8e:	4d28      	ldr	r5, [pc, #160]	; (8023030 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8022f90:	4e28      	ldr	r6, [pc, #160]	; (8023034 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8022f92:	6828      	ldr	r0, [r5, #0]
 8022f94:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022f98:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022f9c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022fa0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022fa4:	f8bd 1000 	ldrh.w	r1, [sp]
 8022fa8:	440a      	add	r2, r1
 8022faa:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022fae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022fb2:	4413      	add	r3, r2
 8022fb4:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022fb8:	6803      	ldr	r3, [r0, #0]
 8022fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022fbc:	4798      	blx	r3
 8022fbe:	8833      	ldrh	r3, [r6, #0]
 8022fc0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022fc4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022fc8:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8023038 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022fcc:	fb03 1202 	mla	r2, r3, r2, r1
 8022fd0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022fd4:	fb08 f303 	mul.w	r3, r8, r3
 8022fd8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022fdc:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022fe0:	4298      	cmp	r0, r3
 8022fe2:	d21d      	bcs.n	8023020 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022fe4:	eb00 080c 	add.w	r8, r0, ip
 8022fe8:	4540      	cmp	r0, r8
 8022fea:	d20f      	bcs.n	802300c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022fec:	f854 1b04 	ldr.w	r1, [r4], #4
 8022ff0:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8022ff4:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8022ff8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022ffc:	ea42 0209 	orr.w	r2, r2, r9
 8023000:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8023004:	430a      	orrs	r2, r1
 8023006:	f820 2b02 	strh.w	r2, [r0], #2
 802300a:	e7ed      	b.n	8022fe8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 802300c:	8832      	ldrh	r2, [r6, #0]
 802300e:	1bd2      	subs	r2, r2, r7
 8023010:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023014:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8023018:	1bd2      	subs	r2, r2, r7
 802301a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802301e:	e7df      	b.n	8022fe0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8023020:	6828      	ldr	r0, [r5, #0]
 8023022:	6803      	ldr	r3, [r0, #0]
 8023024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023026:	4798      	blx	r3
 8023028:	b005      	add	sp, #20
 802302a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802302e:	bf00      	nop
 8023030:	20009820 	.word	0x20009820
 8023034:	2000981a 	.word	0x2000981a
 8023038:	fffff800 	.word	0xfffff800

0802303c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 802303c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023040:	460e      	mov	r6, r1
 8023042:	b08e      	sub	sp, #56	; 0x38
 8023044:	4604      	mov	r4, r0
 8023046:	6808      	ldr	r0, [r1, #0]
 8023048:	6849      	ldr	r1, [r1, #4]
 802304a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8023224 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802304e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8023228 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8023052:	461d      	mov	r5, r3
 8023054:	ab0a      	add	r3, sp, #40	; 0x28
 8023056:	c303      	stmia	r3!, {r0, r1}
 8023058:	6810      	ldr	r0, [r2, #0]
 802305a:	6851      	ldr	r1, [r2, #4]
 802305c:	ab0c      	add	r3, sp, #48	; 0x30
 802305e:	c303      	stmia	r3!, {r0, r1}
 8023060:	a80a      	add	r0, sp, #40	; 0x28
 8023062:	f7f8 ffff 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023066:	4631      	mov	r1, r6
 8023068:	a80c      	add	r0, sp, #48	; 0x30
 802306a:	f7f9 f83f 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802306e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8023072:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8023076:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802307a:	f8d8 0000 	ldr.w	r0, [r8]
 802307e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8023082:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8023086:	fb11 2103 	smlabb	r1, r1, r3, r2
 802308a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802308e:	440c      	add	r4, r1
 8023090:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8023094:	440a      	add	r2, r1
 8023096:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802309a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802309e:	4413      	add	r3, r2
 80230a0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80230a4:	6803      	ldr	r3, [r0, #0]
 80230a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80230a8:	4798      	blx	r3
 80230aa:	2dff      	cmp	r5, #255	; 0xff
 80230ac:	d124      	bne.n	80230f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80230ae:	f010 0f01 	tst.w	r0, #1
 80230b2:	f8d8 0000 	ldr.w	r0, [r8]
 80230b6:	d022      	beq.n	80230fe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80230b8:	2100      	movs	r1, #0
 80230ba:	f8d0 c000 	ldr.w	ip, [r0]
 80230be:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80230c2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80230c6:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80230ca:	f04f 0e01 	mov.w	lr, #1
 80230ce:	f8cd e018 	str.w	lr, [sp, #24]
 80230d2:	f8b9 e000 	ldrh.w	lr, [r9]
 80230d6:	9503      	str	r5, [sp, #12]
 80230d8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80230dc:	b2b6      	uxth	r6, r6
 80230de:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80230e2:	9102      	str	r1, [sp, #8]
 80230e4:	b2bf      	uxth	r7, r7
 80230e6:	9601      	str	r6, [sp, #4]
 80230e8:	9700      	str	r7, [sp, #0]
 80230ea:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80230ee:	4621      	mov	r1, r4
 80230f0:	47a8      	blx	r5
 80230f2:	b00e      	add	sp, #56	; 0x38
 80230f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230f8:	f010 0f04 	tst.w	r0, #4
 80230fc:	e7d9      	b.n	80230b2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80230fe:	6803      	ldr	r3, [r0, #0]
 8023100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023102:	4798      	blx	r3
 8023104:	f8b9 3000 	ldrh.w	r3, [r9]
 8023108:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802310c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8023110:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8023114:	fb03 1202 	mla	r2, r3, r2, r1
 8023118:	ebac 0c07 	sub.w	ip, ip, r7
 802311c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023120:	435e      	muls	r6, r3
 8023122:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8023126:	2dff      	cmp	r5, #255	; 0xff
 8023128:	eba3 0707 	sub.w	r7, r3, r7
 802312c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8023130:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023134:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8023138:	d049      	beq.n	80231ce <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 802313a:	43eb      	mvns	r3, r5
 802313c:	fa1f f985 	uxth.w	r9, r5
 8023140:	b2db      	uxtb	r3, r3
 8023142:	42b0      	cmp	r0, r6
 8023144:	d266      	bcs.n	8023214 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8023146:	eb00 0a0e 	add.w	sl, r0, lr
 802314a:	4550      	cmp	r0, sl
 802314c:	4621      	mov	r1, r4
 802314e:	f104 0403 	add.w	r4, r4, #3
 8023152:	d25b      	bcs.n	802320c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8023154:	8802      	ldrh	r2, [r0, #0]
 8023156:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802315a:	ea4f 2822 	mov.w	r8, r2, asr #8
 802315e:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8023162:	fb11 f109 	smulbb	r1, r1, r9
 8023166:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802316a:	10d5      	asrs	r5, r2, #3
 802316c:	fb08 1803 	mla	r8, r8, r3, r1
 8023170:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8023174:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023178:	fb11 f109 	smulbb	r1, r1, r9
 802317c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8023180:	fb05 1503 	mla	r5, r5, r3, r1
 8023184:	00d2      	lsls	r2, r2, #3
 8023186:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802318a:	b2d2      	uxtb	r2, r2
 802318c:	fb11 f109 	smulbb	r1, r1, r9
 8023190:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023194:	fa1f f888 	uxth.w	r8, r8
 8023198:	fb02 1203 	mla	r2, r2, r3, r1
 802319c:	b292      	uxth	r2, r2
 802319e:	f108 0101 	add.w	r1, r8, #1
 80231a2:	b2ad      	uxth	r5, r5
 80231a4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80231a8:	1c51      	adds	r1, r2, #1
 80231aa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80231ae:	1c69      	adds	r1, r5, #1
 80231b0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80231b4:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 80231b8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80231bc:	096d      	lsrs	r5, r5, #5
 80231be:	ea42 0208 	orr.w	r2, r2, r8
 80231c2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80231c6:	432a      	orrs	r2, r5
 80231c8:	f820 2b02 	strh.w	r2, [r0], #2
 80231cc:	e7bd      	b.n	802314a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80231ce:	4a14      	ldr	r2, [pc, #80]	; (8023220 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80231d0:	42b0      	cmp	r0, r6
 80231d2:	d21f      	bcs.n	8023214 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80231d4:	eb00 050e 	add.w	r5, r0, lr
 80231d8:	42a8      	cmp	r0, r5
 80231da:	4621      	mov	r1, r4
 80231dc:	f104 0403 	add.w	r4, r4, #3
 80231e0:	d210      	bcs.n	8023204 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80231e2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80231e6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80231ea:	00db      	lsls	r3, r3, #3
 80231ec:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80231f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80231f4:	430b      	orrs	r3, r1
 80231f6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80231fa:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80231fe:	f820 3b02 	strh.w	r3, [r0], #2
 8023202:	e7e9      	b.n	80231d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8023204:	4438      	add	r0, r7
 8023206:	eb01 040c 	add.w	r4, r1, ip
 802320a:	e7e1      	b.n	80231d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 802320c:	4438      	add	r0, r7
 802320e:	eb01 040c 	add.w	r4, r1, ip
 8023212:	e796      	b.n	8023142 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8023214:	4b03      	ldr	r3, [pc, #12]	; (8023224 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8023216:	6818      	ldr	r0, [r3, #0]
 8023218:	6803      	ldr	r3, [r0, #0]
 802321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802321c:	4798      	blx	r3
 802321e:	e768      	b.n	80230f2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8023220:	fffff800 	.word	0xfffff800
 8023224:	20009820 	.word	0x20009820
 8023228:	2000981a 	.word	0x2000981a

0802322c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802322c:	b570      	push	{r4, r5, r6, lr}
 802322e:	9c04      	ldr	r4, [sp, #16]
 8023230:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8023234:	4605      	mov	r5, r0
 8023236:	4608      	mov	r0, r1
 8023238:	4619      	mov	r1, r3
 802323a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802323e:	2a0d      	cmp	r2, #13
 8023240:	d825      	bhi.n	802328e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8023242:	e8df f002 	tbb	[pc, r2]
 8023246:	1807      	.short	0x1807
 8023248:	1d1d1d13 	.word	0x1d1d1d13
 802324c:	1d1d1d1d 	.word	0x1d1d1d1d
 8023250:	1d1d1d1d 	.word	0x1d1d1d1d
 8023254:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8023258:	682a      	ldr	r2, [r5, #0]
 802325a:	68d6      	ldr	r6, [r2, #12]
 802325c:	4623      	mov	r3, r4
 802325e:	460a      	mov	r2, r1
 8023260:	46b4      	mov	ip, r6
 8023262:	4601      	mov	r1, r0
 8023264:	4628      	mov	r0, r5
 8023266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802326a:	4760      	bx	ip
 802326c:	4622      	mov	r2, r4
 802326e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023272:	f7ff bd8d 	b.w	8022d90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023276:	4622      	mov	r2, r4
 8023278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802327c:	f7ff bede 	b.w	802303c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8023280:	4b03      	ldr	r3, [pc, #12]	; (8023290 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8023282:	4a04      	ldr	r2, [pc, #16]	; (8023294 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8023284:	4804      	ldr	r0, [pc, #16]	; (8023298 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8023286:	f240 315d 	movw	r1, #861	; 0x35d
 802328a:	f00a ffc3 	bl	802e214 <__assert_func>
 802328e:	bd70      	pop	{r4, r5, r6, pc}
 8023290:	08033172 	.word	0x08033172
 8023294:	080338d2 	.word	0x080338d2
 8023298:	0803304d 	.word	0x0803304d

0802329c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232a0:	b093      	sub	sp, #76	; 0x4c
 80232a2:	880e      	ldrh	r6, [r1, #0]
 80232a4:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80232a8:	4681      	mov	r9, r0
 80232aa:	4688      	mov	r8, r1
 80232ac:	4615      	mov	r5, r2
 80232ae:	b136      	cbz	r6, 80232be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 80232b0:	4b70      	ldr	r3, [pc, #448]	; (8023474 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80232b2:	4a71      	ldr	r2, [pc, #452]	; (8023478 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80232b4:	4871      	ldr	r0, [pc, #452]	; (802347c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80232b6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80232ba:	f00a ffab 	bl	802e214 <__assert_func>
 80232be:	6810      	ldr	r0, [r2, #0]
 80232c0:	6851      	ldr	r1, [r2, #4]
 80232c2:	4f6f      	ldr	r7, [pc, #444]	; (8023480 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80232c4:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8023484 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80232c8:	ac0e      	add	r4, sp, #56	; 0x38
 80232ca:	c403      	stmia	r4!, {r0, r1}
 80232cc:	6818      	ldr	r0, [r3, #0]
 80232ce:	6859      	ldr	r1, [r3, #4]
 80232d0:	ac10      	add	r4, sp, #64	; 0x40
 80232d2:	c403      	stmia	r4!, {r0, r1}
 80232d4:	a80e      	add	r0, sp, #56	; 0x38
 80232d6:	f7f8 fec5 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80232da:	4629      	mov	r1, r5
 80232dc:	a810      	add	r0, sp, #64	; 0x40
 80232de:	f7f8 ff05 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80232e2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80232e6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80232ea:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80232ee:	6838      	ldr	r0, [r7, #0]
 80232f0:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80232f4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80232f8:	fb11 2103 	smlabb	r1, r1, r3, r2
 80232fc:	4489      	add	r9, r1
 80232fe:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8023302:	440a      	add	r2, r1
 8023304:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8023308:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802330c:	4413      	add	r3, r2
 802330e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8023312:	6803      	ldr	r3, [r0, #0]
 8023314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023316:	4798      	blx	r3
 8023318:	f010 0f80 	tst.w	r0, #128	; 0x80
 802331c:	6838      	ldr	r0, [r7, #0]
 802331e:	d01d      	beq.n	802335c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8023320:	6802      	ldr	r2, [r0, #0]
 8023322:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8023326:	e9cd 6608 	strd	r6, r6, [sp, #32]
 802332a:	210b      	movs	r1, #11
 802332c:	9107      	str	r1, [sp, #28]
 802332e:	f8bb 1000 	ldrh.w	r1, [fp]
 8023332:	9106      	str	r1, [sp, #24]
 8023334:	2101      	movs	r1, #1
 8023336:	e9cd a104 	strd	sl, r1, [sp, #16]
 802333a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802333e:	9103      	str	r1, [sp, #12]
 8023340:	b2a4      	uxth	r4, r4
 8023342:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8023346:	9100      	str	r1, [sp, #0]
 8023348:	b2ad      	uxth	r5, r5
 802334a:	9502      	str	r5, [sp, #8]
 802334c:	9401      	str	r4, [sp, #4]
 802334e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8023350:	4649      	mov	r1, r9
 8023352:	4642      	mov	r2, r8
 8023354:	47a0      	blx	r4
 8023356:	b013      	add	sp, #76	; 0x4c
 8023358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802335c:	6803      	ldr	r3, [r0, #0]
 802335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023360:	4798      	blx	r3
 8023362:	f8bb 3000 	ldrh.w	r3, [fp]
 8023366:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 802336a:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 802336e:	fb03 1202 	mla	r2, r3, r2, r1
 8023372:	435d      	muls	r5, r3
 8023374:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023378:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 802337c:	920c      	str	r2, [sp, #48]	; 0x30
 802337e:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8023382:	1b12      	subs	r2, r2, r4
 8023384:	920d      	str	r2, [sp, #52]	; 0x34
 8023386:	0062      	lsls	r2, r4, #1
 8023388:	1b1c      	subs	r4, r3, r4
 802338a:	0063      	lsls	r3, r4, #1
 802338c:	920a      	str	r2, [sp, #40]	; 0x28
 802338e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023390:	f04f 0e04 	mov.w	lr, #4
 8023394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023396:	4298      	cmp	r0, r3
 8023398:	d266      	bcs.n	8023468 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 802339a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802339c:	eb00 0b03 	add.w	fp, r0, r3
 80233a0:	4558      	cmp	r0, fp
 80233a2:	d25c      	bcs.n	802345e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 80233a4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80233a8:	fb1e e303 	smlabb	r3, lr, r3, lr
 80233ac:	f858 2003 	ldr.w	r2, [r8, r3]
 80233b0:	0e11      	lsrs	r1, r2, #24
 80233b2:	d012      	beq.n	80233da <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80233b4:	29ff      	cmp	r1, #255	; 0xff
 80233b6:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80233ba:	d110      	bne.n	80233de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80233bc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80233c0:	d10d      	bne.n	80233de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80233c2:	0953      	lsrs	r3, r2, #5
 80233c4:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80233c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80233cc:	f027 0707 	bic.w	r7, r7, #7
 80233d0:	431f      	orrs	r7, r3
 80233d2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80233d6:	433a      	orrs	r2, r7
 80233d8:	8002      	strh	r2, [r0, #0]
 80233da:	3002      	adds	r0, #2
 80233dc:	e7e0      	b.n	80233a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 80233de:	fb0a f101 	mul.w	r1, sl, r1
 80233e2:	8806      	ldrh	r6, [r0, #0]
 80233e4:	1c4b      	adds	r3, r1, #1
 80233e6:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80233ea:	1235      	asrs	r5, r6, #8
 80233ec:	10f4      	asrs	r4, r6, #3
 80233ee:	121b      	asrs	r3, r3, #8
 80233f0:	00f6      	lsls	r6, r6, #3
 80233f2:	b299      	uxth	r1, r3
 80233f4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80233f8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80233fc:	b2f6      	uxtb	r6, r6
 80233fe:	43db      	mvns	r3, r3
 8023400:	b2d2      	uxtb	r2, r2
 8023402:	b2db      	uxtb	r3, r3
 8023404:	fb1c fc01 	smulbb	ip, ip, r1
 8023408:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802340c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023410:	fb12 f201 	smulbb	r2, r2, r1
 8023414:	fb05 c503 	mla	r5, r5, r3, ip
 8023418:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802341c:	b2ff      	uxtb	r7, r7
 802341e:	fb06 2203 	mla	r2, r6, r3, r2
 8023422:	b2ad      	uxth	r5, r5
 8023424:	fb17 f701 	smulbb	r7, r7, r1
 8023428:	b292      	uxth	r2, r2
 802342a:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802342e:	fb04 7403 	mla	r4, r4, r3, r7
 8023432:	f105 0c01 	add.w	ip, r5, #1
 8023436:	1c57      	adds	r7, r2, #1
 8023438:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802343c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8023440:	b2a4      	uxth	r4, r4
 8023442:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023446:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802344a:	433d      	orrs	r5, r7
 802344c:	1c67      	adds	r7, r4, #1
 802344e:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8023452:	0964      	lsrs	r4, r4, #5
 8023454:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8023458:	4325      	orrs	r5, r4
 802345a:	8005      	strh	r5, [r0, #0]
 802345c:	e7bd      	b.n	80233da <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802345e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023460:	4418      	add	r0, r3
 8023462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023464:	4499      	add	r9, r3
 8023466:	e795      	b.n	8023394 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8023468:	4b05      	ldr	r3, [pc, #20]	; (8023480 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 802346a:	6818      	ldr	r0, [r3, #0]
 802346c:	6803      	ldr	r3, [r0, #0]
 802346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023470:	4798      	blx	r3
 8023472:	e770      	b.n	8023356 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 8023474:	08032f4b 	.word	0x08032f4b
 8023478:	080336a3 	.word	0x080336a3
 802347c:	0803304d 	.word	0x0803304d
 8023480:	20009820 	.word	0x20009820
 8023484:	2000981a 	.word	0x2000981a

08023488 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8023488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802348c:	4614      	mov	r4, r2
 802348e:	880a      	ldrh	r2, [r1, #0]
 8023490:	b087      	sub	sp, #28
 8023492:	2a02      	cmp	r2, #2
 8023494:	4680      	mov	r8, r0
 8023496:	460d      	mov	r5, r1
 8023498:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 802349c:	d006      	beq.n	80234ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 802349e:	4b63      	ldr	r3, [pc, #396]	; (802362c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 80234a0:	4a63      	ldr	r2, [pc, #396]	; (8023630 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80234a2:	4864      	ldr	r0, [pc, #400]	; (8023634 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 80234a4:	f240 11e1 	movw	r1, #481	; 0x1e1
 80234a8:	f00a feb4 	bl	802e214 <__assert_func>
 80234ac:	2e00      	cmp	r6, #0
 80234ae:	f000 80b9 	beq.w	8023624 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 80234b2:	6820      	ldr	r0, [r4, #0]
 80234b4:	6861      	ldr	r1, [r4, #4]
 80234b6:	af02      	add	r7, sp, #8
 80234b8:	c703      	stmia	r7!, {r0, r1}
 80234ba:	6818      	ldr	r0, [r3, #0]
 80234bc:	6859      	ldr	r1, [r3, #4]
 80234be:	af04      	add	r7, sp, #16
 80234c0:	c703      	stmia	r7!, {r0, r1}
 80234c2:	a802      	add	r0, sp, #8
 80234c4:	f7f8 fdce 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80234c8:	4621      	mov	r1, r4
 80234ca:	a804      	add	r0, sp, #16
 80234cc:	f7f8 fe0e 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80234d0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80234d4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80234d8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80234dc:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80234e0:	fb14 2103 	smlabb	r1, r4, r3, r2
 80234e4:	eb08 0401 	add.w	r4, r8, r1
 80234e8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80234ec:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80234f0:	440a      	add	r2, r1
 80234f2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80234f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80234fa:	4413      	add	r3, r2
 80234fc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023500:	4b4d      	ldr	r3, [pc, #308]	; (8023638 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8023502:	6818      	ldr	r0, [r3, #0]
 8023504:	6803      	ldr	r3, [r0, #0]
 8023506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023508:	4798      	blx	r3
 802350a:	4b4c      	ldr	r3, [pc, #304]	; (802363c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 802350c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8023510:	881a      	ldrh	r2, [r3, #0]
 8023512:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8023516:	2eff      	cmp	r6, #255	; 0xff
 8023518:	fb02 c101 	mla	r1, r2, r1, ip
 802351c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8023520:	fb02 f207 	mul.w	r2, r2, r7
 8023524:	f105 0104 	add.w	r1, r5, #4
 8023528:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802352c:	461d      	mov	r5, r3
 802352e:	d05a      	beq.n	80235e6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 8023530:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8023534:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023538:	b2b6      	uxth	r6, r6
 802353a:	fa1f fe8e 	uxth.w	lr, lr
 802353e:	9301      	str	r3, [sp, #4]
 8023540:	4282      	cmp	r2, r0
 8023542:	d96a      	bls.n	802361a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8023544:	eb00 0b0a 	add.w	fp, r0, sl
 8023548:	4583      	cmp	fp, r0
 802354a:	d940      	bls.n	80235ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 802354c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023550:	8805      	ldrh	r5, [r0, #0]
 8023552:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023556:	122f      	asrs	r7, r5, #8
 8023558:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802355c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023560:	fb17 f70e 	smulbb	r7, r7, lr
 8023564:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8023568:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802356c:	00ed      	lsls	r5, r5, #3
 802356e:	fb0c 7c06 	mla	ip, ip, r6, r7
 8023572:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023576:	10df      	asrs	r7, r3, #3
 8023578:	b2ed      	uxtb	r5, r5
 802357a:	00db      	lsls	r3, r3, #3
 802357c:	fa1f fc8c 	uxth.w	ip, ip
 8023580:	fb19 f90e 	smulbb	r9, r9, lr
 8023584:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023588:	b2db      	uxtb	r3, r3
 802358a:	fb15 f50e 	smulbb	r5, r5, lr
 802358e:	fb07 9706 	mla	r7, r7, r6, r9
 8023592:	fb03 5306 	mla	r3, r3, r6, r5
 8023596:	f10c 0901 	add.w	r9, ip, #1
 802359a:	b29b      	uxth	r3, r3
 802359c:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80235a0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80235a4:	f103 0c01 	add.w	ip, r3, #1
 80235a8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80235ac:	b2bf      	uxth	r7, r7
 80235ae:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80235b2:	ea4c 0c09 	orr.w	ip, ip, r9
 80235b6:	f107 0901 	add.w	r9, r7, #1
 80235ba:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80235be:	097f      	lsrs	r7, r7, #5
 80235c0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80235c4:	ea4c 0c07 	orr.w	ip, ip, r7
 80235c8:	f820 cb02 	strh.w	ip, [r0], #2
 80235cc:	e7bc      	b.n	8023548 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80235ce:	9b01      	ldr	r3, [sp, #4]
 80235d0:	881b      	ldrh	r3, [r3, #0]
 80235d2:	eba3 0308 	sub.w	r3, r3, r8
 80235d6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80235da:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80235de:	eba3 0308 	sub.w	r3, r3, r8
 80235e2:	441c      	add	r4, r3
 80235e4:	e7ac      	b.n	8023540 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 80235e6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80235ea:	4282      	cmp	r2, r0
 80235ec:	d915      	bls.n	802361a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80235ee:	eb00 060a 	add.w	r6, r0, sl
 80235f2:	4286      	cmp	r6, r0
 80235f4:	d906      	bls.n	8023604 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 80235f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80235fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80235fe:	f820 3b02 	strh.w	r3, [r0], #2
 8023602:	e7f6      	b.n	80235f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8023604:	882b      	ldrh	r3, [r5, #0]
 8023606:	eba3 0308 	sub.w	r3, r3, r8
 802360a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802360e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023612:	eba3 0308 	sub.w	r3, r3, r8
 8023616:	441c      	add	r4, r3
 8023618:	e7e7      	b.n	80235ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 802361a:	4b07      	ldr	r3, [pc, #28]	; (8023638 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802361c:	6818      	ldr	r0, [r3, #0]
 802361e:	6803      	ldr	r3, [r0, #0]
 8023620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023622:	4798      	blx	r3
 8023624:	b007      	add	sp, #28
 8023626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802362a:	bf00      	nop
 802362c:	08032e7b 	.word	0x08032e7b
 8023630:	0803350d 	.word	0x0803350d
 8023634:	0803304d 	.word	0x0803304d
 8023638:	20009820 	.word	0x20009820
 802363c:	2000981a 	.word	0x2000981a

08023640 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8023640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023644:	f8b1 9000 	ldrh.w	r9, [r1]
 8023648:	b091      	sub	sp, #68	; 0x44
 802364a:	f1b9 0f01 	cmp.w	r9, #1
 802364e:	4604      	mov	r4, r0
 8023650:	460f      	mov	r7, r1
 8023652:	4690      	mov	r8, r2
 8023654:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8023658:	d006      	beq.n	8023668 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 802365a:	4b84      	ldr	r3, [pc, #528]	; (802386c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 802365c:	4a84      	ldr	r2, [pc, #528]	; (8023870 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 802365e:	4885      	ldr	r0, [pc, #532]	; (8023874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8023660:	f240 212f 	movw	r1, #559	; 0x22f
 8023664:	f00a fdd6 	bl	802e214 <__assert_func>
 8023668:	2d00      	cmp	r5, #0
 802366a:	d04f      	beq.n	802370c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 802366c:	6810      	ldr	r0, [r2, #0]
 802366e:	6851      	ldr	r1, [r2, #4]
 8023670:	f8df b208 	ldr.w	fp, [pc, #520]	; 802387c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8023674:	ae0c      	add	r6, sp, #48	; 0x30
 8023676:	c603      	stmia	r6!, {r0, r1}
 8023678:	6818      	ldr	r0, [r3, #0]
 802367a:	6859      	ldr	r1, [r3, #4]
 802367c:	ae0e      	add	r6, sp, #56	; 0x38
 802367e:	c603      	stmia	r6!, {r0, r1}
 8023680:	a80c      	add	r0, sp, #48	; 0x30
 8023682:	f7f8 fcef 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023686:	4641      	mov	r1, r8
 8023688:	a80e      	add	r0, sp, #56	; 0x38
 802368a:	f7f8 fd2f 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802368e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023692:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023696:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802369a:	f8db 0000 	ldr.w	r0, [fp]
 802369e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80236a2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80236a6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8023880 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 80236aa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80236ae:	440c      	add	r4, r1
 80236b0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80236b4:	440a      	add	r2, r1
 80236b6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80236ba:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80236be:	4413      	add	r3, r2
 80236c0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80236c4:	6803      	ldr	r3, [r0, #0]
 80236c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80236c8:	4798      	blx	r3
 80236ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80236ce:	f8db 0000 	ldr.w	r0, [fp]
 80236d2:	d01e      	beq.n	8023712 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 80236d4:	2200      	movs	r2, #0
 80236d6:	6801      	ldr	r1, [r0, #0]
 80236d8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80236dc:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80236e0:	220b      	movs	r2, #11
 80236e2:	9207      	str	r2, [sp, #28]
 80236e4:	f8b8 2000 	ldrh.w	r2, [r8]
 80236e8:	9504      	str	r5, [sp, #16]
 80236ea:	e9cd 9205 	strd	r9, r2, [sp, #20]
 80236ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80236f2:	9203      	str	r2, [sp, #12]
 80236f4:	fa1f f28a 	uxth.w	r2, sl
 80236f8:	9202      	str	r2, [sp, #8]
 80236fa:	b2b6      	uxth	r6, r6
 80236fc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023700:	9200      	str	r2, [sp, #0]
 8023702:	9601      	str	r6, [sp, #4]
 8023704:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8023706:	463a      	mov	r2, r7
 8023708:	4621      	mov	r1, r4
 802370a:	47a8      	blx	r5
 802370c:	b011      	add	sp, #68	; 0x44
 802370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023712:	6803      	ldr	r3, [r0, #0]
 8023714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023716:	4798      	blx	r3
 8023718:	f8b8 2000 	ldrh.w	r2, [r8]
 802371c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023720:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8023724:	2dff      	cmp	r5, #255	; 0xff
 8023726:	fb02 1303 	mla	r3, r2, r3, r1
 802372a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802372e:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8023732:	fb0a fa02 	mul.w	sl, sl, r2
 8023736:	d062      	beq.n	80237fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8023738:	ea6f 0c05 	mvn.w	ip, r5
 802373c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8023740:	930a      	str	r3, [sp, #40]	; 0x28
 8023742:	b2ad      	uxth	r5, r5
 8023744:	fa5f fc8c 	uxtb.w	ip, ip
 8023748:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 802374c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802374e:	4298      	cmp	r0, r3
 8023750:	f080 8085 	bcs.w	802385e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8023754:	eb00 0b09 	add.w	fp, r0, r9
 8023758:	4558      	cmp	r0, fp
 802375a:	d246      	bcs.n	80237ea <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 802375c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8023760:	2303      	movs	r3, #3
 8023762:	2204      	movs	r2, #4
 8023764:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8023768:	eb07 0a0e 	add.w	sl, r7, lr
 802376c:	8803      	ldrh	r3, [r0, #0]
 802376e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8023772:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023776:	1219      	asrs	r1, r3, #8
 8023778:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802377c:	fb18 f805 	smulbb	r8, r8, r5
 8023780:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8023784:	10da      	asrs	r2, r3, #3
 8023786:	fb01 810c 	mla	r1, r1, ip, r8
 802378a:	00db      	lsls	r3, r3, #3
 802378c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023790:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023794:	b2db      	uxtb	r3, r3
 8023796:	fb18 f805 	smulbb	r8, r8, r5
 802379a:	fb1e fe05 	smulbb	lr, lr, r5
 802379e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80237a2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80237a6:	b289      	uxth	r1, r1
 80237a8:	fb02 820c 	mla	r2, r2, ip, r8
 80237ac:	fb03 e30c 	mla	r3, r3, ip, lr
 80237b0:	b292      	uxth	r2, r2
 80237b2:	b29b      	uxth	r3, r3
 80237b4:	f101 0801 	add.w	r8, r1, #1
 80237b8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80237bc:	f103 0e01 	add.w	lr, r3, #1
 80237c0:	f102 0801 	add.w	r8, r2, #1
 80237c4:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80237c8:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80237cc:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80237d0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80237d4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80237d8:	ea4e 0101 	orr.w	r1, lr, r1
 80237dc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80237e0:	ea41 0108 	orr.w	r1, r1, r8
 80237e4:	f820 1b02 	strh.w	r1, [r0], #2
 80237e8:	e7b6      	b.n	8023758 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 80237ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80237ec:	881b      	ldrh	r3, [r3, #0]
 80237ee:	1b9b      	subs	r3, r3, r6
 80237f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80237f4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80237f8:	1b9b      	subs	r3, r3, r6
 80237fa:	441c      	add	r4, r3
 80237fc:	e7a6      	b.n	802374c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 80237fe:	491e      	ldr	r1, [pc, #120]	; (8023878 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8023800:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8023804:	2203      	movs	r2, #3
 8023806:	2504      	movs	r5, #4
 8023808:	4550      	cmp	r0, sl
 802380a:	d228      	bcs.n	802385e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 802380c:	eb00 0c09 	add.w	ip, r0, r9
 8023810:	4560      	cmp	r0, ip
 8023812:	4623      	mov	r3, r4
 8023814:	d219      	bcs.n	802384a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023816:	f893 e000 	ldrb.w	lr, [r3]
 802381a:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 802381e:	eb07 0b0e 	add.w	fp, r7, lr
 8023822:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023826:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802382a:	f89b b001 	ldrb.w	fp, [fp, #1]
 802382e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8023832:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8023836:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802383a:	ea43 030b 	orr.w	r3, r3, fp
 802383e:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8023842:	3401      	adds	r4, #1
 8023844:	f820 3b02 	strh.w	r3, [r0], #2
 8023848:	e7e2      	b.n	8023810 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 802384a:	f8b8 3000 	ldrh.w	r3, [r8]
 802384e:	1b9b      	subs	r3, r3, r6
 8023850:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023854:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023858:	1b9b      	subs	r3, r3, r6
 802385a:	441c      	add	r4, r3
 802385c:	e7d4      	b.n	8023808 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 802385e:	4b07      	ldr	r3, [pc, #28]	; (802387c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8023860:	6818      	ldr	r0, [r3, #0]
 8023862:	6803      	ldr	r3, [r0, #0]
 8023864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023866:	4798      	blx	r3
 8023868:	e750      	b.n	802370c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 802386a:	bf00      	nop
 802386c:	08032ec9 	.word	0x08032ec9
 8023870:	08033596 	.word	0x08033596
 8023874:	0803304d 	.word	0x0803304d
 8023878:	fffff800 	.word	0xfffff800
 802387c:	20009820 	.word	0x20009820
 8023880:	2000981a 	.word	0x2000981a

08023884 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023884:	b430      	push	{r4, r5}
 8023886:	780d      	ldrb	r5, [r1, #0]
 8023888:	f89d 4008 	ldrb.w	r4, [sp, #8]
 802388c:	2d01      	cmp	r5, #1
 802388e:	d00a      	beq.n	80238a6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8023890:	d305      	bcc.n	802389e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8023892:	2d02      	cmp	r5, #2
 8023894:	d10b      	bne.n	80238ae <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8023896:	9402      	str	r4, [sp, #8]
 8023898:	bc30      	pop	{r4, r5}
 802389a:	f7ff bdf5 	b.w	8023488 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802389e:	9402      	str	r4, [sp, #8]
 80238a0:	bc30      	pop	{r4, r5}
 80238a2:	f7ff bcfb 	b.w	802329c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80238a6:	9402      	str	r4, [sp, #8]
 80238a8:	bc30      	pop	{r4, r5}
 80238aa:	f7ff bec9 	b.w	8023640 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80238ae:	bc30      	pop	{r4, r5}
 80238b0:	4770      	bx	lr
	...

080238b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80238b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238b8:	4604      	mov	r4, r0
 80238ba:	b087      	sub	sp, #28
 80238bc:	6810      	ldr	r0, [r2, #0]
 80238be:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80238c2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8023afc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80238c6:	460e      	mov	r6, r1
 80238c8:	6851      	ldr	r1, [r2, #4]
 80238ca:	ad02      	add	r5, sp, #8
 80238cc:	c503      	stmia	r5!, {r0, r1}
 80238ce:	6818      	ldr	r0, [r3, #0]
 80238d0:	6859      	ldr	r1, [r3, #4]
 80238d2:	ad04      	add	r5, sp, #16
 80238d4:	4617      	mov	r7, r2
 80238d6:	c503      	stmia	r5!, {r0, r1}
 80238d8:	a802      	add	r0, sp, #8
 80238da:	f7f8 fbc3 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80238de:	4639      	mov	r1, r7
 80238e0:	a804      	add	r0, sp, #16
 80238e2:	f7f8 fc03 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80238e6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80238ea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80238ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80238f2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80238f6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80238fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80238fe:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8023902:	440e      	add	r6, r1
 8023904:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023908:	440a      	add	r2, r1
 802390a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802390e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023912:	4413      	add	r3, r2
 8023914:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023918:	4b77      	ldr	r3, [pc, #476]	; (8023af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802391a:	6818      	ldr	r0, [r3, #0]
 802391c:	6803      	ldr	r3, [r0, #0]
 802391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023920:	4798      	blx	r3
 8023922:	f8b9 b000 	ldrh.w	fp, [r9]
 8023926:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802392a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802392e:	fb0b 2303 	mla	r3, fp, r3, r2
 8023932:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023936:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802393a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802393e:	fb05 f50b 	mul.w	r5, r5, fp
 8023942:	9300      	str	r3, [sp, #0]
 8023944:	d069      	beq.n	8023a1a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8023946:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 802394a:	4558      	cmp	r0, fp
 802394c:	f080 80cc 	bcs.w	8023ae8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023950:	9b00      	ldr	r3, [sp, #0]
 8023952:	18c3      	adds	r3, r0, r3
 8023954:	9301      	str	r3, [sp, #4]
 8023956:	4631      	mov	r1, r6
 8023958:	9b01      	ldr	r3, [sp, #4]
 802395a:	4298      	cmp	r0, r3
 802395c:	d24f      	bcs.n	80239fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802395e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023962:	2a00      	cmp	r2, #0
 8023964:	d048      	beq.n	80239f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023966:	fb0a f202 	mul.w	r2, sl, r2
 802396a:	1c53      	adds	r3, r2, #1
 802396c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023970:	121b      	asrs	r3, r3, #8
 8023972:	d041      	beq.n	80239f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023974:	8802      	ldrh	r2, [r0, #0]
 8023976:	f8b4 c000 	ldrh.w	ip, [r4]
 802397a:	b29e      	uxth	r6, r3
 802397c:	1215      	asrs	r5, r2, #8
 802397e:	43db      	mvns	r3, r3
 8023980:	b2db      	uxtb	r3, r3
 8023982:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023986:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802398a:	fb15 f503 	smulbb	r5, r5, r3
 802398e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8023992:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023996:	00d2      	lsls	r2, r2, #3
 8023998:	fb07 5706 	mla	r7, r7, r6, r5
 802399c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80239a0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80239a4:	b2d2      	uxtb	r2, r2
 80239a6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80239aa:	b2bf      	uxth	r7, r7
 80239ac:	fb1e fe03 	smulbb	lr, lr, r3
 80239b0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80239b4:	fa5f fc8c 	uxtb.w	ip, ip
 80239b8:	fb12 f203 	smulbb	r2, r2, r3
 80239bc:	fb05 e506 	mla	r5, r5, r6, lr
 80239c0:	fb0c 2c06 	mla	ip, ip, r6, r2
 80239c4:	f107 0e01 	add.w	lr, r7, #1
 80239c8:	fa1f fc8c 	uxth.w	ip, ip
 80239cc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80239d0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 80239d4:	f10c 0701 	add.w	r7, ip, #1
 80239d8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80239dc:	b2ad      	uxth	r5, r5
 80239de:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80239e2:	ea47 070e 	orr.w	r7, r7, lr
 80239e6:	f105 0e01 	add.w	lr, r5, #1
 80239ea:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80239ee:	096d      	lsrs	r5, r5, #5
 80239f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80239f4:	432f      	orrs	r7, r5
 80239f6:	8007      	strh	r7, [r0, #0]
 80239f8:	3002      	adds	r0, #2
 80239fa:	3402      	adds	r4, #2
 80239fc:	e7ac      	b.n	8023958 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80239fe:	f8b9 3000 	ldrh.w	r3, [r9]
 8023a02:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023a06:	eba3 0308 	sub.w	r3, r3, r8
 8023a0a:	eba6 0608 	sub.w	r6, r6, r8
 8023a0e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023a12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023a16:	440e      	add	r6, r1
 8023a18:	e797      	b.n	802394a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8023a1a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8023a1e:	42a8      	cmp	r0, r5
 8023a20:	d262      	bcs.n	8023ae8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023a22:	9b00      	ldr	r3, [sp, #0]
 8023a24:	4631      	mov	r1, r6
 8023a26:	eb00 0b03 	add.w	fp, r0, r3
 8023a2a:	4558      	cmp	r0, fp
 8023a2c:	d24e      	bcs.n	8023acc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8023a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023a32:	b12b      	cbz	r3, 8023a40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023a34:	2bff      	cmp	r3, #255	; 0xff
 8023a36:	f8b4 e000 	ldrh.w	lr, [r4]
 8023a3a:	d104      	bne.n	8023a46 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8023a3c:	f8a0 e000 	strh.w	lr, [r0]
 8023a40:	3002      	adds	r0, #2
 8023a42:	3402      	adds	r4, #2
 8023a44:	e7f1      	b.n	8023a2a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8023a46:	8802      	ldrh	r2, [r0, #0]
 8023a48:	b29f      	uxth	r7, r3
 8023a4a:	1216      	asrs	r6, r2, #8
 8023a4c:	43db      	mvns	r3, r3
 8023a4e:	b2db      	uxtb	r3, r3
 8023a50:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023a54:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023a58:	fb16 f603 	smulbb	r6, r6, r3
 8023a5c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8023a60:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023a64:	00d2      	lsls	r2, r2, #3
 8023a66:	fb0c 6c07 	mla	ip, ip, r7, r6
 8023a6a:	b2d2      	uxtb	r2, r2
 8023a6c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8023a70:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8023a74:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023a78:	fb1a fa03 	smulbb	sl, sl, r3
 8023a7c:	fa1f fc8c 	uxth.w	ip, ip
 8023a80:	fb12 f303 	smulbb	r3, r2, r3
 8023a84:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023a88:	fa5f fe8e 	uxtb.w	lr, lr
 8023a8c:	fb06 a607 	mla	r6, r6, r7, sl
 8023a90:	f10c 0201 	add.w	r2, ip, #1
 8023a94:	fb0e 3307 	mla	r3, lr, r7, r3
 8023a98:	b2b6      	uxth	r6, r6
 8023a9a:	b29b      	uxth	r3, r3
 8023a9c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023aa0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8023aa4:	f106 0a01 	add.w	sl, r6, #1
 8023aa8:	f103 0c01 	add.w	ip, r3, #1
 8023aac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023ab0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8023ab4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023ab8:	0976      	lsrs	r6, r6, #5
 8023aba:	ea4c 0c02 	orr.w	ip, ip, r2
 8023abe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023ac2:	ea4c 0c06 	orr.w	ip, ip, r6
 8023ac6:	f8a0 c000 	strh.w	ip, [r0]
 8023aca:	e7b9      	b.n	8023a40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023acc:	f8b9 3000 	ldrh.w	r3, [r9]
 8023ad0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023ad4:	eba3 0308 	sub.w	r3, r3, r8
 8023ad8:	eba6 0608 	sub.w	r6, r6, r8
 8023adc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023ae0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023ae4:	440e      	add	r6, r1
 8023ae6:	e79a      	b.n	8023a1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8023ae8:	4b03      	ldr	r3, [pc, #12]	; (8023af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023aea:	6818      	ldr	r0, [r3, #0]
 8023aec:	6803      	ldr	r3, [r0, #0]
 8023aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023af0:	4798      	blx	r3
 8023af2:	b007      	add	sp, #28
 8023af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023af8:	20009820 	.word	0x20009820
 8023afc:	2000981a 	.word	0x2000981a

08023b00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b04:	b089      	sub	sp, #36	; 0x24
 8023b06:	4682      	mov	sl, r0
 8023b08:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8023b0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b0e:	460f      	mov	r7, r1
 8023b10:	4691      	mov	r9, r2
 8023b12:	4698      	mov	r8, r3
 8023b14:	2e00      	cmp	r6, #0
 8023b16:	d03d      	beq.n	8023b94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023b18:	4608      	mov	r0, r1
 8023b1a:	f7fc f863 	bl	801fbe4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023b1e:	4605      	mov	r5, r0
 8023b20:	4638      	mov	r0, r7
 8023b22:	f7fc f899 	bl	801fc58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023b26:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023b2a:	4638      	mov	r0, r7
 8023b2c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8023b30:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023b34:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023b38:	f7fc f95c 	bl	801fdf4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023b3c:	4605      	mov	r5, r0
 8023b3e:	4638      	mov	r0, r7
 8023b40:	f7fc f98a 	bl	801fe58 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023b44:	4681      	mov	r9, r0
 8023b46:	4638      	mov	r0, r7
 8023b48:	f7fc f9de 	bl	801ff08 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023b4c:	280b      	cmp	r0, #11
 8023b4e:	f200 816f 	bhi.w	8023e30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8023b52:	e8df f010 	tbh	[pc, r0, lsl #1]
 8023b56:	00c3      	.short	0x00c3
 8023b58:	000c00b4 	.word	0x000c00b4
 8023b5c:	016d016d 	.word	0x016d016d
 8023b60:	016d016d 	.word	0x016d016d
 8023b64:	016d016d 	.word	0x016d016d
 8023b68:	016d016d 	.word	0x016d016d
 8023b6c:	00bb      	.short	0x00bb
 8023b6e:	4bb3      	ldr	r3, [pc, #716]	; (8023e3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8023b70:	6818      	ldr	r0, [r3, #0]
 8023b72:	6803      	ldr	r3, [r0, #0]
 8023b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023b76:	4798      	blx	r3
 8023b78:	2eff      	cmp	r6, #255	; 0xff
 8023b7a:	d121      	bne.n	8023bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8023b7c:	0683      	lsls	r3, r0, #26
 8023b7e:	d41f      	bmi.n	8023bc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8023b80:	4638      	mov	r0, r7
 8023b82:	f7fc f8fd 	bl	801fd80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023b86:	b940      	cbnz	r0, 8023b9a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8023b88:	4623      	mov	r3, r4
 8023b8a:	aa02      	add	r2, sp, #8
 8023b8c:	4629      	mov	r1, r5
 8023b8e:	4650      	mov	r0, sl
 8023b90:	f7ff f9e4 	bl	8022f5c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023b94:	b009      	add	sp, #36	; 0x24
 8023b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b9a:	f10d 0818 	add.w	r8, sp, #24
 8023b9e:	4639      	mov	r1, r7
 8023ba0:	4640      	mov	r0, r8
 8023ba2:	f7fc f893 	bl	801fccc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023ba6:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023baa:	af04      	add	r7, sp, #16
 8023bac:	e887 0003 	stmia.w	r7, {r0, r1}
 8023bb0:	4638      	mov	r0, r7
 8023bb2:	4621      	mov	r1, r4
 8023bb4:	f7f3 fdb4 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 8023bb8:	4638      	mov	r0, r7
 8023bba:	f7f3 fdf4 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8023bbe:	b130      	cbz	r0, 8023bce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8023bc0:	4633      	mov	r3, r6
 8023bc2:	4622      	mov	r2, r4
 8023bc4:	a902      	add	r1, sp, #8
 8023bc6:	4628      	mov	r0, r5
 8023bc8:	f7ff f8e2 	bl	8022d90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023bcc:	e7e2      	b.n	8023b94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023bce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023bd2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023bd6:	4293      	cmp	r3, r2
 8023bd8:	dd12      	ble.n	8023c00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8023bda:	1a9b      	subs	r3, r3, r2
 8023bdc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023be0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023be4:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023be8:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023bec:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023bf0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023bf4:	4642      	mov	r2, r8
 8023bf6:	4633      	mov	r3, r6
 8023bf8:	a902      	add	r1, sp, #8
 8023bfa:	4628      	mov	r0, r5
 8023bfc:	f7ff f8c8 	bl	8022d90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023c00:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023c04:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023c08:	4293      	cmp	r3, r2
 8023c0a:	dd12      	ble.n	8023c32 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8023c0c:	1a9b      	subs	r3, r3, r2
 8023c0e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023c12:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023c16:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023c1a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023c1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023c22:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023c26:	23ff      	movs	r3, #255	; 0xff
 8023c28:	4642      	mov	r2, r8
 8023c2a:	a902      	add	r1, sp, #8
 8023c2c:	4628      	mov	r0, r5
 8023c2e:	f7ff f8af 	bl	8022d90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023c32:	463b      	mov	r3, r7
 8023c34:	aa02      	add	r2, sp, #8
 8023c36:	4629      	mov	r1, r5
 8023c38:	4650      	mov	r0, sl
 8023c3a:	f7ff f98f 	bl	8022f5c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023c3e:	88a2      	ldrh	r2, [r4, #4]
 8023c40:	8823      	ldrh	r3, [r4, #0]
 8023c42:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023c46:	4413      	add	r3, r2
 8023c48:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023c4c:	440a      	add	r2, r1
 8023c4e:	b29b      	uxth	r3, r3
 8023c50:	b292      	uxth	r2, r2
 8023c52:	b211      	sxth	r1, r2
 8023c54:	b218      	sxth	r0, r3
 8023c56:	4288      	cmp	r0, r1
 8023c58:	dd12      	ble.n	8023c80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8023c5a:	1a9b      	subs	r3, r3, r2
 8023c5c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023c60:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023c64:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023c68:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023c6c:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023c70:	23ff      	movs	r3, #255	; 0xff
 8023c72:	4642      	mov	r2, r8
 8023c74:	a902      	add	r1, sp, #8
 8023c76:	4628      	mov	r0, r5
 8023c78:	f8ad 601a 	strh.w	r6, [sp, #26]
 8023c7c:	f7ff f888 	bl	8022d90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023c80:	88e2      	ldrh	r2, [r4, #6]
 8023c82:	8863      	ldrh	r3, [r4, #2]
 8023c84:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023c88:	4413      	add	r3, r2
 8023c8a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023c8e:	440a      	add	r2, r1
 8023c90:	b29b      	uxth	r3, r3
 8023c92:	b292      	uxth	r2, r2
 8023c94:	b211      	sxth	r1, r2
 8023c96:	b218      	sxth	r0, r3
 8023c98:	4288      	cmp	r0, r1
 8023c9a:	f77f af7b 	ble.w	8023b94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023c9e:	1a9b      	subs	r3, r3, r2
 8023ca0:	f9b4 6000 	ldrsh.w	r6, [r4]
 8023ca4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023ca8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023cac:	f8ad 6018 	strh.w	r6, [sp, #24]
 8023cb0:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023cb4:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023cb8:	23ff      	movs	r3, #255	; 0xff
 8023cba:	4642      	mov	r2, r8
 8023cbc:	e782      	b.n	8023bc4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8023cbe:	4633      	mov	r3, r6
 8023cc0:	4622      	mov	r2, r4
 8023cc2:	a902      	add	r1, sp, #8
 8023cc4:	4628      	mov	r0, r5
 8023cc6:	f7ff f9b9 	bl	802303c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8023cca:	e763      	b.n	8023b94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023ccc:	9600      	str	r6, [sp, #0]
 8023cce:	4623      	mov	r3, r4
 8023cd0:	aa02      	add	r2, sp, #8
 8023cd2:	4649      	mov	r1, r9
 8023cd4:	4628      	mov	r0, r5
 8023cd6:	f7ff fdd5 	bl	8023884 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023cda:	e75b      	b.n	8023b94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023cdc:	4638      	mov	r0, r7
 8023cde:	f7fc f84f 	bl	801fd80 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023ce2:	b950      	cbnz	r0, 8023cfa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8023ce4:	e9cd 6000 	strd	r6, r0, [sp]
 8023ce8:	f8da 3000 	ldr.w	r3, [sl]
 8023cec:	aa02      	add	r2, sp, #8
 8023cee:	68de      	ldr	r6, [r3, #12]
 8023cf0:	4629      	mov	r1, r5
 8023cf2:	4623      	mov	r3, r4
 8023cf4:	4650      	mov	r0, sl
 8023cf6:	47b0      	blx	r6
 8023cf8:	e74c      	b.n	8023b94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023cfa:	f10d 0818 	add.w	r8, sp, #24
 8023cfe:	4639      	mov	r1, r7
 8023d00:	4640      	mov	r0, r8
 8023d02:	f7fb ffe3 	bl	801fccc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023d06:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023d0a:	af04      	add	r7, sp, #16
 8023d0c:	e887 0003 	stmia.w	r7, {r0, r1}
 8023d10:	4638      	mov	r0, r7
 8023d12:	4621      	mov	r1, r4
 8023d14:	f7f3 fd04 	bl	8017720 <_ZN8touchgfx4RectaNERKS0_>
 8023d18:	4638      	mov	r0, r7
 8023d1a:	f7f3 fd44 	bl	80177a6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8023d1e:	b138      	cbz	r0, 8023d30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8023d20:	9600      	str	r6, [sp, #0]
 8023d22:	4623      	mov	r3, r4
 8023d24:	aa02      	add	r2, sp, #8
 8023d26:	4649      	mov	r1, r9
 8023d28:	4628      	mov	r0, r5
 8023d2a:	f7ff fdc3 	bl	80238b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023d2e:	e731      	b.n	8023b94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023d30:	e9cd 6000 	strd	r6, r0, [sp]
 8023d34:	f8da 3000 	ldr.w	r3, [sl]
 8023d38:	aa02      	add	r2, sp, #8
 8023d3a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8023d3e:	4629      	mov	r1, r5
 8023d40:	463b      	mov	r3, r7
 8023d42:	4650      	mov	r0, sl
 8023d44:	47d8      	blx	fp
 8023d46:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023d4a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023d4e:	4293      	cmp	r3, r2
 8023d50:	dd13      	ble.n	8023d7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8023d52:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023d56:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023d5a:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023d5e:	1a9b      	subs	r3, r3, r2
 8023d60:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023d64:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023d68:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023d6c:	9600      	str	r6, [sp, #0]
 8023d6e:	4643      	mov	r3, r8
 8023d70:	aa02      	add	r2, sp, #8
 8023d72:	4649      	mov	r1, r9
 8023d74:	4628      	mov	r0, r5
 8023d76:	f7ff fd9d 	bl	80238b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023d7a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023d7e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023d82:	4293      	cmp	r3, r2
 8023d84:	dd13      	ble.n	8023dae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 8023d86:	1a9b      	subs	r3, r3, r2
 8023d88:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023d8c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023d90:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023d94:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023d98:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023d9c:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023da0:	9600      	str	r6, [sp, #0]
 8023da2:	4643      	mov	r3, r8
 8023da4:	aa02      	add	r2, sp, #8
 8023da6:	4649      	mov	r1, r9
 8023da8:	4628      	mov	r0, r5
 8023daa:	f7ff fd83 	bl	80238b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023dae:	88a2      	ldrh	r2, [r4, #4]
 8023db0:	8823      	ldrh	r3, [r4, #0]
 8023db2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023db6:	4413      	add	r3, r2
 8023db8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023dbc:	440a      	add	r2, r1
 8023dbe:	b29b      	uxth	r3, r3
 8023dc0:	b292      	uxth	r2, r2
 8023dc2:	b211      	sxth	r1, r2
 8023dc4:	b218      	sxth	r0, r3
 8023dc6:	4288      	cmp	r0, r1
 8023dc8:	dd13      	ble.n	8023df2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8023dca:	1a9b      	subs	r3, r3, r2
 8023dcc:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023dd0:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023dd4:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023dd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023ddc:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023de0:	9600      	str	r6, [sp, #0]
 8023de2:	4643      	mov	r3, r8
 8023de4:	aa02      	add	r2, sp, #8
 8023de6:	4649      	mov	r1, r9
 8023de8:	4628      	mov	r0, r5
 8023dea:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023dee:	f7ff fd61 	bl	80238b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023df2:	88e2      	ldrh	r2, [r4, #6]
 8023df4:	8863      	ldrh	r3, [r4, #2]
 8023df6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023dfa:	4413      	add	r3, r2
 8023dfc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023e00:	440a      	add	r2, r1
 8023e02:	b29b      	uxth	r3, r3
 8023e04:	b292      	uxth	r2, r2
 8023e06:	b211      	sxth	r1, r2
 8023e08:	b218      	sxth	r0, r3
 8023e0a:	4288      	cmp	r0, r1
 8023e0c:	f77f aec2 	ble.w	8023b94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023e10:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023e14:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023e18:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023e1c:	1a9b      	subs	r3, r3, r2
 8023e1e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023e22:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023e26:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023e2a:	9600      	str	r6, [sp, #0]
 8023e2c:	4643      	mov	r3, r8
 8023e2e:	e779      	b.n	8023d24 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8023e30:	4b03      	ldr	r3, [pc, #12]	; (8023e40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8023e32:	4a04      	ldr	r2, [pc, #16]	; (8023e44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8023e34:	4804      	ldr	r0, [pc, #16]	; (8023e48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8023e36:	21b4      	movs	r1, #180	; 0xb4
 8023e38:	f00a f9ec 	bl	802e214 <__assert_func>
 8023e3c:	20009820 	.word	0x20009820
 8023e40:	08032f17 	.word	0x08032f17
 8023e44:	0803361f 	.word	0x0803361f
 8023e48:	0803304d 	.word	0x0803304d

08023e4c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023e4c:	b508      	push	{r3, lr}
 8023e4e:	b180      	cbz	r0, 8023e72 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8023e50:	2902      	cmp	r1, #2
 8023e52:	d014      	beq.n	8023e7e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8023e54:	2903      	cmp	r1, #3
 8023e56:	d01d      	beq.n	8023e94 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023e58:	2901      	cmp	r1, #1
 8023e5a:	d101      	bne.n	8023e60 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023e5c:	2001      	movs	r0, #1
 8023e5e:	bd08      	pop	{r3, pc}
 8023e60:	4b0e      	ldr	r3, [pc, #56]	; (8023e9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023e62:	8818      	ldrh	r0, [r3, #0]
 8023e64:	b990      	cbnz	r0, 8023e8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023e66:	4b0e      	ldr	r3, [pc, #56]	; (8023ea0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8023e68:	4a0e      	ldr	r2, [pc, #56]	; (8023ea4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8023e6a:	480f      	ldr	r0, [pc, #60]	; (8023ea8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8023e6c:	2150      	movs	r1, #80	; 0x50
 8023e6e:	f00a f9d1 	bl	802e214 <__assert_func>
 8023e72:	2902      	cmp	r1, #2
 8023e74:	d00e      	beq.n	8023e94 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023e76:	2903      	cmp	r1, #3
 8023e78:	d0f2      	beq.n	8023e60 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023e7a:	2901      	cmp	r1, #1
 8023e7c:	d1ee      	bne.n	8023e5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8023e7e:	4b07      	ldr	r3, [pc, #28]	; (8023e9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023e80:	8818      	ldrh	r0, [r3, #0]
 8023e82:	2800      	cmp	r0, #0
 8023e84:	d0ef      	beq.n	8023e66 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8023e86:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023e8a:	e7e8      	b.n	8023e5e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023e8c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023e90:	4240      	negs	r0, r0
 8023e92:	e7e4      	b.n	8023e5e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023e94:	f04f 30ff 	mov.w	r0, #4294967295
 8023e98:	e7e1      	b.n	8023e5e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023e9a:	bf00      	nop
 8023e9c:	2000981a 	.word	0x2000981a
 8023ea0:	080331a3 	.word	0x080331a3
 8023ea4:	0803379c 	.word	0x0803379c
 8023ea8:	080331e5 	.word	0x080331e5

08023eac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023eac:	b508      	push	{r3, lr}
 8023eae:	b180      	cbz	r0, 8023ed2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8023eb0:	2902      	cmp	r1, #2
 8023eb2:	d014      	beq.n	8023ede <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8023eb4:	2903      	cmp	r1, #3
 8023eb6:	d018      	beq.n	8023eea <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023eb8:	2901      	cmp	r1, #1
 8023eba:	d001      	beq.n	8023ec0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023ebc:	2001      	movs	r0, #1
 8023ebe:	e013      	b.n	8023ee8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023ec0:	4b0e      	ldr	r3, [pc, #56]	; (8023efc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023ec2:	8818      	ldrh	r0, [r3, #0]
 8023ec4:	b970      	cbnz	r0, 8023ee4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8023ec6:	4b0e      	ldr	r3, [pc, #56]	; (8023f00 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8023ec8:	4a0e      	ldr	r2, [pc, #56]	; (8023f04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8023eca:	480f      	ldr	r0, [pc, #60]	; (8023f08 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8023ecc:	2150      	movs	r1, #80	; 0x50
 8023ece:	f00a f9a1 	bl	802e214 <__assert_func>
 8023ed2:	2902      	cmp	r1, #2
 8023ed4:	d009      	beq.n	8023eea <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023ed6:	2903      	cmp	r1, #3
 8023ed8:	d0f0      	beq.n	8023ebc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8023eda:	2901      	cmp	r1, #1
 8023edc:	d1f0      	bne.n	8023ec0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023ede:	f04f 30ff 	mov.w	r0, #4294967295
 8023ee2:	e001      	b.n	8023ee8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023ee4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023ee8:	bd08      	pop	{r3, pc}
 8023eea:	4b04      	ldr	r3, [pc, #16]	; (8023efc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023eec:	8818      	ldrh	r0, [r3, #0]
 8023eee:	2800      	cmp	r0, #0
 8023ef0:	d0e9      	beq.n	8023ec6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8023ef2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023ef6:	4240      	negs	r0, r0
 8023ef8:	e7f6      	b.n	8023ee8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023efa:	bf00      	nop
 8023efc:	2000981a 	.word	0x2000981a
 8023f00:	080331a3 	.word	0x080331a3
 8023f04:	0803379c 	.word	0x0803379c
 8023f08:	080331e5 	.word	0x080331e5

08023f0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f10:	b099      	sub	sp, #100	; 0x64
 8023f12:	910b      	str	r1, [sp, #44]	; 0x2c
 8023f14:	a914      	add	r1, sp, #80	; 0x50
 8023f16:	e881 000c 	stmia.w	r1, {r2, r3}
 8023f1a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8023f1e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8023f22:	930a      	str	r3, [sp, #40]	; 0x28
 8023f24:	f891 900d 	ldrb.w	r9, [r1, #13]
 8023f28:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8023f2c:	9311      	str	r3, [sp, #68]	; 0x44
 8023f2e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8023f32:	930c      	str	r3, [sp, #48]	; 0x30
 8023f34:	7988      	ldrb	r0, [r1, #6]
 8023f36:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8023f3a:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8023f3e:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8023f42:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8023f46:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8023f4a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8023f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023f52:	4303      	orrs	r3, r0
 8023f54:	9309      	str	r3, [sp, #36]	; 0x24
 8023f56:	f000 81a1 	beq.w	802429c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023f5a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8023f5e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8023f62:	f891 9007 	ldrb.w	r9, [r1, #7]
 8023f66:	ea59 0903 	orrs.w	r9, r9, r3
 8023f6a:	f000 8197 	beq.w	802429c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023f6e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023f72:	b29b      	uxth	r3, r3
 8023f74:	2e00      	cmp	r6, #0
 8023f76:	f000 813a 	beq.w	80241ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8023f7a:	1af6      	subs	r6, r6, r3
 8023f7c:	b2b6      	uxth	r6, r6
 8023f7e:	0433      	lsls	r3, r6, #16
 8023f80:	d502      	bpl.n	8023f88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023f82:	1bad      	subs	r5, r5, r6
 8023f84:	b22d      	sxth	r5, r5
 8023f86:	2600      	movs	r6, #0
 8023f88:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023f8c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8023f90:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8023f94:	428d      	cmp	r5, r1
 8023f96:	b28b      	uxth	r3, r1
 8023f98:	bfbf      	itttt	lt
 8023f9a:	18f6      	addlt	r6, r6, r3
 8023f9c:	1b75      	sublt	r5, r6, r5
 8023f9e:	b2ae      	uxthlt	r6, r5
 8023fa0:	460d      	movlt	r5, r1
 8023fa2:	8891      	ldrh	r1, [r2, #4]
 8023fa4:	440b      	add	r3, r1
 8023fa6:	b21b      	sxth	r3, r3
 8023fa8:	9310      	str	r3, [sp, #64]	; 0x40
 8023faa:	88d3      	ldrh	r3, [r2, #6]
 8023fac:	8852      	ldrh	r2, [r2, #2]
 8023fae:	4413      	add	r3, r2
 8023fb0:	b21b      	sxth	r3, r3
 8023fb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8023fb4:	4bbc      	ldr	r3, [pc, #752]	; (80242a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8023fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023fb8:	f893 b000 	ldrb.w	fp, [r3]
 8023fbc:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023fc0:	f1dc 0300 	rsbs	r3, ip, #0
 8023fc4:	eb43 030c 	adc.w	r3, r3, ip
 8023fc8:	930e      	str	r3, [sp, #56]	; 0x38
 8023fca:	4629      	mov	r1, r5
 8023fcc:	4653      	mov	r3, sl
 8023fce:	a814      	add	r0, sp, #80	; 0x50
 8023fd0:	f7f7 fecd 	bl	801bd6e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023fd4:	4629      	mov	r1, r5
 8023fd6:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8023fda:	4653      	mov	r3, sl
 8023fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023fde:	a814      	add	r0, sp, #80	; 0x50
 8023fe0:	f7f7 fedd 	bl	801bd9e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023fe4:	a918      	add	r1, sp, #96	; 0x60
 8023fe6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023fea:	a817      	add	r0, sp, #92	; 0x5c
 8023fec:	f7f7 fff8 	bl	801bfe0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023ff0:	f1ba 0f00 	cmp.w	sl, #0
 8023ff4:	f040 80fe 	bne.w	80241f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8023ff8:	f1bb 0f01 	cmp.w	fp, #1
 8023ffc:	f040 8102 	bne.w	8024204 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8024000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024002:	b153      	cbz	r3, 802401a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8024004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024006:	2408      	movs	r4, #8
 8024008:	fb94 f3f8 	sdiv	r3, r4, r8
 802400c:	1e5c      	subs	r4, r3, #1
 802400e:	4414      	add	r4, r2
 8024010:	fb94 f4f3 	sdiv	r4, r4, r3
 8024014:	fb14 f403 	smulbb	r4, r4, r3
 8024018:	b2a4      	uxth	r4, r4
 802401a:	b906      	cbnz	r6, 802401e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 802401c:	b16f      	cbz	r7, 802403a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 802401e:	fb07 6304 	mla	r3, r7, r4, r6
 8024022:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024024:	fb08 f303 	mul.w	r3, r8, r3
 8024028:	463a      	mov	r2, r7
 802402a:	f003 0707 	and.w	r7, r3, #7
 802402e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8024032:	9328      	str	r3, [sp, #160]	; 0xa0
 8024034:	eba9 0302 	sub.w	r3, r9, r2
 8024038:	930d      	str	r3, [sp, #52]	; 0x34
 802403a:	4651      	mov	r1, sl
 802403c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802403e:	f7ff ff05 	bl	8023e4c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8024042:	4651      	mov	r1, sl
 8024044:	4681      	mov	r9, r0
 8024046:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024048:	f7ff ff30 	bl	8023eac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 802404c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802404e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024050:	eba3 0a02 	sub.w	sl, r3, r2
 8024054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024056:	459a      	cmp	sl, r3
 8024058:	bfa8      	it	ge
 802405a:	469a      	movge	sl, r3
 802405c:	f1ba 0f00 	cmp.w	sl, #0
 8024060:	4683      	mov	fp, r0
 8024062:	f340 811b 	ble.w	802429c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024068:	1bad      	subs	r5, r5, r6
 802406a:	1b5d      	subs	r5, r3, r5
 802406c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802406e:	429d      	cmp	r5, r3
 8024070:	bfd4      	ite	le
 8024072:	ebc6 0605 	rsble	r6, r6, r5
 8024076:	ebc6 0603 	rsbgt	r6, r6, r3
 802407a:	2e00      	cmp	r6, #0
 802407c:	f340 810e 	ble.w	802429c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024080:	1ba4      	subs	r4, r4, r6
 8024082:	fb08 f304 	mul.w	r3, r8, r4
 8024086:	930f      	str	r3, [sp, #60]	; 0x3c
 8024088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802408a:	2b00      	cmp	r3, #0
 802408c:	f040 8114 	bne.w	80242b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8024090:	4b86      	ldr	r3, [pc, #536]	; (80242ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8024092:	6818      	ldr	r0, [r3, #0]
 8024094:	6803      	ldr	r3, [r0, #0]
 8024096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024098:	4798      	blx	r3
 802409a:	2301      	movs	r3, #1
 802409c:	fa03 f308 	lsl.w	r3, r3, r8
 80240a0:	4a83      	ldr	r2, [pc, #524]	; (80242b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 80240a2:	3b01      	subs	r3, #1
 80240a4:	b2db      	uxtb	r3, r3
 80240a6:	8811      	ldrh	r1, [r2, #0]
 80240a8:	930e      	str	r3, [sp, #56]	; 0x38
 80240aa:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80240ae:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80240b2:	fb01 2303 	mla	r3, r1, r3, r2
 80240b6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80240ba:	930a      	str	r3, [sp, #40]	; 0x28
 80240bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80240be:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80240c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80240c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80240c6:	0a19      	lsrs	r1, r3, #8
 80240c8:	b2cb      	uxtb	r3, r1
 80240ca:	9312      	str	r3, [sp, #72]	; 0x48
 80240cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80240ce:	b2db      	uxtb	r3, r3
 80240d0:	9311      	str	r3, [sp, #68]	; 0x44
 80240d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80240d4:	095a      	lsrs	r2, r3, #5
 80240d6:	4b77      	ldr	r3, [pc, #476]	; (80242b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80240d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80240dc:	400b      	ands	r3, r1
 80240de:	4313      	orrs	r3, r2
 80240e0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80240e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80240e6:	4313      	orrs	r3, r2
 80240e8:	b29b      	uxth	r3, r3
 80240ea:	9310      	str	r3, [sp, #64]	; 0x40
 80240ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240ee:	781a      	ldrb	r2, [r3, #0]
 80240f0:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80240f4:	413a      	asrs	r2, r7
 80240f6:	fb06 b919 	mls	r9, r6, r9, fp
 80240fa:	fb03 fb06 	mul.w	fp, r3, r6
 80240fe:	b2d2      	uxtb	r2, r2
 8024100:	930d      	str	r3, [sp, #52]	; 0x34
 8024102:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8024106:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802410a:	f0c0 80ea 	bcc.w	80242e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 802410e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8024112:	46b6      	mov	lr, r6
 8024114:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8024118:	f0c0 80d2 	bcc.w	80242c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 802411c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802411e:	4013      	ands	r3, r2
 8024120:	d055      	beq.n	80241ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8024122:	20ff      	movs	r0, #255	; 0xff
 8024124:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024126:	fb90 f1f1 	sdiv	r1, r0, r1
 802412a:	434b      	muls	r3, r1
 802412c:	2bfe      	cmp	r3, #254	; 0xfe
 802412e:	dd03      	ble.n	8024138 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8024130:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024132:	4281      	cmp	r1, r0
 8024134:	f000 80c2 	beq.w	80242bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8024138:	990c      	ldr	r1, [sp, #48]	; 0x30
 802413a:	f8bc 4000 	ldrh.w	r4, [ip]
 802413e:	fb11 f303 	smulbb	r3, r1, r3
 8024142:	b29b      	uxth	r3, r3
 8024144:	1c59      	adds	r1, r3, #1
 8024146:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802414a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802414e:	b29d      	uxth	r5, r3
 8024150:	43db      	mvns	r3, r3
 8024152:	b2db      	uxtb	r3, r3
 8024154:	9309      	str	r3, [sp, #36]	; 0x24
 8024156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024158:	1220      	asrs	r0, r4, #8
 802415a:	fb13 f905 	smulbb	r9, r3, r5
 802415e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024164:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8024168:	fb00 9003 	mla	r0, r0, r3, r9
 802416c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802416e:	10e1      	asrs	r1, r4, #3
 8024170:	fb13 f905 	smulbb	r9, r3, r5
 8024174:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802417a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802417e:	fb01 9103 	mla	r1, r1, r3, r9
 8024182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024184:	00e4      	lsls	r4, r4, #3
 8024186:	fb13 f505 	smulbb	r5, r3, r5
 802418a:	b2e4      	uxtb	r4, r4
 802418c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802418e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8024192:	fb04 5403 	mla	r4, r4, r3, r5
 8024196:	b280      	uxth	r0, r0
 8024198:	b2a4      	uxth	r4, r4
 802419a:	1c43      	adds	r3, r0, #1
 802419c:	f104 0901 	add.w	r9, r4, #1
 80241a0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80241a4:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80241a8:	b289      	uxth	r1, r1
 80241aa:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80241ae:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80241b2:	ea49 0000 	orr.w	r0, r9, r0
 80241b6:	f101 0901 	add.w	r9, r1, #1
 80241ba:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80241be:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80241c2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80241c6:	ea40 0009 	orr.w	r0, r0, r9
 80241ca:	f8ac 0000 	strh.w	r0, [ip]
 80241ce:	4447      	add	r7, r8
 80241d0:	b2bf      	uxth	r7, r7
 80241d2:	2f07      	cmp	r7, #7
 80241d4:	bf81      	itttt	hi
 80241d6:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80241d8:	785a      	ldrbhi	r2, [r3, #1]
 80241da:	3301      	addhi	r3, #1
 80241dc:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80241de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80241e0:	bf9a      	itte	ls
 80241e2:	fa42 f208 	asrls.w	r2, r2, r8
 80241e6:	b2d2      	uxtbls	r2, r2
 80241e8:	2700      	movhi	r7, #0
 80241ea:	449c      	add	ip, r3
 80241ec:	e792      	b.n	8024114 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 80241ee:	441d      	add	r5, r3
 80241f0:	b22d      	sxth	r5, r5
 80241f2:	e6c9      	b.n	8023f88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 80241f4:	f1ba 0f01 	cmp.w	sl, #1
 80241f8:	f47f af02 	bne.w	8024000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80241fc:	f1bb 0f01 	cmp.w	fp, #1
 8024200:	f47f aefe 	bne.w	8024000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024204:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80242ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8024208:	f8db 0000 	ldr.w	r0, [fp]
 802420c:	6803      	ldr	r3, [r0, #0]
 802420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024210:	4798      	blx	r3
 8024212:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8024216:	465a      	mov	r2, fp
 8024218:	d006      	beq.n	8024228 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 802421a:	f1b8 0f04 	cmp.w	r8, #4
 802421e:	d140      	bne.n	80242a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8024220:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024222:	3300      	adds	r3, #0
 8024224:	bf18      	it	ne
 8024226:	2301      	movne	r3, #1
 8024228:	0580      	lsls	r0, r0, #22
 802422a:	d563      	bpl.n	80242f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 802422c:	f1b8 0f08 	cmp.w	r8, #8
 8024230:	d160      	bne.n	80242f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8024232:	2b00      	cmp	r3, #0
 8024234:	bf0c      	ite	eq
 8024236:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802423a:	f44f 7180 	movne.w	r1, #256	; 0x100
 802423e:	2e00      	cmp	r6, #0
 8024240:	f47f aede 	bne.w	8024000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024244:	2f00      	cmp	r7, #0
 8024246:	f47f aedb 	bne.w	8024000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802424c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802424e:	18eb      	adds	r3, r5, r3
 8024250:	4283      	cmp	r3, r0
 8024252:	f73f aed5 	bgt.w	8024000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024258:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802425a:	444b      	add	r3, r9
 802425c:	4283      	cmp	r3, r0
 802425e:	f73f aecf 	bgt.w	8024000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8024262:	6810      	ldr	r0, [r2, #0]
 8024264:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8024268:	6805      	ldr	r5, [r0, #0]
 802426a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 802426e:	f1b8 0f08 	cmp.w	r8, #8
 8024272:	f04f 0600 	mov.w	r6, #0
 8024276:	bf18      	it	ne
 8024278:	3401      	addne	r4, #1
 802427a:	e9cd 1605 	strd	r1, r6, [sp, #20]
 802427e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024280:	9104      	str	r1, [sp, #16]
 8024282:	bf18      	it	ne
 8024284:	f024 0401 	bicne.w	r4, r4, #1
 8024288:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802428a:	bf18      	it	ne
 802428c:	b2a4      	uxthne	r4, r4
 802428e:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8024292:	e9cd 4900 	strd	r4, r9, [sp]
 8024296:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024298:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 802429a:	47a0      	blx	r4
 802429c:	b019      	add	sp, #100	; 0x64
 802429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242a2:	2300      	movs	r3, #0
 80242a4:	e7c0      	b.n	8024228 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80242a6:	bf00      	nop
 80242a8:	20009818 	.word	0x20009818
 80242ac:	20009820 	.word	0x20009820
 80242b0:	2000981a 	.word	0x2000981a
 80242b4:	00fff800 	.word	0x00fff800
 80242b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80242ba:	e6ee      	b.n	802409a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 80242bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80242be:	e784      	b.n	80241ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 80242c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80242c2:	b153      	cbz	r3, 80242da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 80242c4:	441f      	add	r7, r3
 80242c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80242c8:	b2bf      	uxth	r7, r7
 80242ca:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 80242ce:	f007 0707 	and.w	r7, r7, #7
 80242d2:	781a      	ldrb	r2, [r3, #0]
 80242d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80242d6:	413a      	asrs	r2, r7
 80242d8:	b2d2      	uxtb	r2, r2
 80242da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80242dc:	445b      	add	r3, fp
 80242de:	930a      	str	r3, [sp, #40]	; 0x28
 80242e0:	e711      	b.n	8024106 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 80242e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242e4:	2b00      	cmp	r3, #0
 80242e6:	d1d9      	bne.n	802429c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80242e8:	4b05      	ldr	r3, [pc, #20]	; (8024300 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 80242ea:	6818      	ldr	r0, [r3, #0]
 80242ec:	6803      	ldr	r3, [r0, #0]
 80242ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242f0:	4798      	blx	r3
 80242f2:	e7d3      	b.n	802429c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80242f4:	2b00      	cmp	r3, #0
 80242f6:	f43f ae83 	beq.w	8024000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80242fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80242fe:	e79e      	b.n	802423e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8024300:	20009820 	.word	0x20009820

08024304 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8024304:	b538      	push	{r3, r4, r5, lr}
 8024306:	4c15      	ldr	r4, [pc, #84]	; (802435c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8024308:	7823      	ldrb	r3, [r4, #0]
 802430a:	f3bf 8f5b 	dmb	ish
 802430e:	07da      	lsls	r2, r3, #31
 8024310:	4605      	mov	r5, r0
 8024312:	d40b      	bmi.n	802432c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024314:	4620      	mov	r0, r4
 8024316:	f009 f960 	bl	802d5da <__cxa_guard_acquire>
 802431a:	b138      	cbz	r0, 802432c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802431c:	4620      	mov	r0, r4
 802431e:	f009 f968 	bl	802d5f2 <__cxa_guard_release>
 8024322:	4a0f      	ldr	r2, [pc, #60]	; (8024360 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024324:	490f      	ldr	r1, [pc, #60]	; (8024364 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8024326:	4810      	ldr	r0, [pc, #64]	; (8024368 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024328:	f009 f950 	bl	802d5cc <__aeabi_atexit>
 802432c:	4c0f      	ldr	r4, [pc, #60]	; (802436c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802432e:	7823      	ldrb	r3, [r4, #0]
 8024330:	f3bf 8f5b 	dmb	ish
 8024334:	07db      	lsls	r3, r3, #31
 8024336:	d40b      	bmi.n	8024350 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8024338:	4620      	mov	r0, r4
 802433a:	f009 f94e 	bl	802d5da <__cxa_guard_acquire>
 802433e:	b138      	cbz	r0, 8024350 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8024340:	4620      	mov	r0, r4
 8024342:	f009 f956 	bl	802d5f2 <__cxa_guard_release>
 8024346:	4a06      	ldr	r2, [pc, #24]	; (8024360 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024348:	4909      	ldr	r1, [pc, #36]	; (8024370 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802434a:	480a      	ldr	r0, [pc, #40]	; (8024374 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802434c:	f009 f93e 	bl	802d5cc <__aeabi_atexit>
 8024350:	4b05      	ldr	r3, [pc, #20]	; (8024368 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024352:	612b      	str	r3, [r5, #16]
 8024354:	4b07      	ldr	r3, [pc, #28]	; (8024374 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024356:	616b      	str	r3, [r5, #20]
 8024358:	bd38      	pop	{r3, r4, r5, pc}
 802435a:	bf00      	nop
 802435c:	200098ec 	.word	0x200098ec
 8024360:	20000000 	.word	0x20000000
 8024364:	08022507 	.word	0x08022507
 8024368:	20000064 	.word	0x20000064
 802436c:	200098f0 	.word	0x200098f0
 8024370:	08022505 	.word	0x08022505
 8024374:	20000068 	.word	0x20000068

08024378 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8024378:	b538      	push	{r3, r4, r5, lr}
 802437a:	4c15      	ldr	r4, [pc, #84]	; (80243d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802437c:	7823      	ldrb	r3, [r4, #0]
 802437e:	f3bf 8f5b 	dmb	ish
 8024382:	07da      	lsls	r2, r3, #31
 8024384:	4605      	mov	r5, r0
 8024386:	d40b      	bmi.n	80243a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024388:	4620      	mov	r0, r4
 802438a:	f009 f926 	bl	802d5da <__cxa_guard_acquire>
 802438e:	b138      	cbz	r0, 80243a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024390:	4620      	mov	r0, r4
 8024392:	f009 f92e 	bl	802d5f2 <__cxa_guard_release>
 8024396:	4a0f      	ldr	r2, [pc, #60]	; (80243d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024398:	490f      	ldr	r1, [pc, #60]	; (80243d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802439a:	4810      	ldr	r0, [pc, #64]	; (80243dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802439c:	f009 f916 	bl	802d5cc <__aeabi_atexit>
 80243a0:	4c0f      	ldr	r4, [pc, #60]	; (80243e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80243a2:	7823      	ldrb	r3, [r4, #0]
 80243a4:	f3bf 8f5b 	dmb	ish
 80243a8:	07db      	lsls	r3, r3, #31
 80243aa:	d40b      	bmi.n	80243c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80243ac:	4620      	mov	r0, r4
 80243ae:	f009 f914 	bl	802d5da <__cxa_guard_acquire>
 80243b2:	b138      	cbz	r0, 80243c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80243b4:	4620      	mov	r0, r4
 80243b6:	f009 f91c 	bl	802d5f2 <__cxa_guard_release>
 80243ba:	4a06      	ldr	r2, [pc, #24]	; (80243d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80243bc:	4909      	ldr	r1, [pc, #36]	; (80243e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80243be:	480a      	ldr	r0, [pc, #40]	; (80243e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80243c0:	f009 f904 	bl	802d5cc <__aeabi_atexit>
 80243c4:	4b05      	ldr	r3, [pc, #20]	; (80243dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80243c6:	60ab      	str	r3, [r5, #8]
 80243c8:	4b07      	ldr	r3, [pc, #28]	; (80243e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80243ca:	60eb      	str	r3, [r5, #12]
 80243cc:	bd38      	pop	{r3, r4, r5, pc}
 80243ce:	bf00      	nop
 80243d0:	200098c4 	.word	0x200098c4
 80243d4:	20000000 	.word	0x20000000
 80243d8:	0802250b 	.word	0x0802250b
 80243dc:	2000003c 	.word	0x2000003c
 80243e0:	200098c8 	.word	0x200098c8
 80243e4:	08022509 	.word	0x08022509
 80243e8:	20000040 	.word	0x20000040

080243ec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80243ec:	b510      	push	{r4, lr}
 80243ee:	4604      	mov	r4, r0
 80243f0:	f7ff ff88 	bl	8024304 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80243f4:	4620      	mov	r0, r4
 80243f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80243fa:	f7ff bfbd 	b.w	8024378 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08024400 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8024400:	b538      	push	{r3, r4, r5, lr}
 8024402:	4c15      	ldr	r4, [pc, #84]	; (8024458 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024404:	7823      	ldrb	r3, [r4, #0]
 8024406:	f3bf 8f5b 	dmb	ish
 802440a:	07da      	lsls	r2, r3, #31
 802440c:	4605      	mov	r5, r0
 802440e:	d40b      	bmi.n	8024428 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024410:	4620      	mov	r0, r4
 8024412:	f009 f8e2 	bl	802d5da <__cxa_guard_acquire>
 8024416:	b138      	cbz	r0, 8024428 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024418:	4620      	mov	r0, r4
 802441a:	f009 f8ea 	bl	802d5f2 <__cxa_guard_release>
 802441e:	4a0f      	ldr	r2, [pc, #60]	; (802445c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024420:	490f      	ldr	r1, [pc, #60]	; (8024460 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8024422:	4810      	ldr	r0, [pc, #64]	; (8024464 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024424:	f009 f8d2 	bl	802d5cc <__aeabi_atexit>
 8024428:	4c0f      	ldr	r4, [pc, #60]	; (8024468 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802442a:	7823      	ldrb	r3, [r4, #0]
 802442c:	f3bf 8f5b 	dmb	ish
 8024430:	07db      	lsls	r3, r3, #31
 8024432:	d40b      	bmi.n	802444c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024434:	4620      	mov	r0, r4
 8024436:	f009 f8d0 	bl	802d5da <__cxa_guard_acquire>
 802443a:	b138      	cbz	r0, 802444c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802443c:	4620      	mov	r0, r4
 802443e:	f009 f8d8 	bl	802d5f2 <__cxa_guard_release>
 8024442:	4a06      	ldr	r2, [pc, #24]	; (802445c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024444:	4909      	ldr	r1, [pc, #36]	; (802446c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024446:	480a      	ldr	r0, [pc, #40]	; (8024470 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024448:	f009 f8c0 	bl	802d5cc <__aeabi_atexit>
 802444c:	4b05      	ldr	r3, [pc, #20]	; (8024464 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802444e:	622b      	str	r3, [r5, #32]
 8024450:	4b07      	ldr	r3, [pc, #28]	; (8024470 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024452:	626b      	str	r3, [r5, #36]	; 0x24
 8024454:	bd38      	pop	{r3, r4, r5, pc}
 8024456:	bf00      	nop
 8024458:	200098f4 	.word	0x200098f4
 802445c:	20000000 	.word	0x20000000
 8024460:	080224ff 	.word	0x080224ff
 8024464:	2000006c 	.word	0x2000006c
 8024468:	200098f8 	.word	0x200098f8
 802446c:	080224fd 	.word	0x080224fd
 8024470:	20000070 	.word	0x20000070

08024474 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024474:	b538      	push	{r3, r4, r5, lr}
 8024476:	4c15      	ldr	r4, [pc, #84]	; (80244cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024478:	7823      	ldrb	r3, [r4, #0]
 802447a:	f3bf 8f5b 	dmb	ish
 802447e:	07da      	lsls	r2, r3, #31
 8024480:	4605      	mov	r5, r0
 8024482:	d40b      	bmi.n	802449c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024484:	4620      	mov	r0, r4
 8024486:	f009 f8a8 	bl	802d5da <__cxa_guard_acquire>
 802448a:	b138      	cbz	r0, 802449c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802448c:	4620      	mov	r0, r4
 802448e:	f009 f8b0 	bl	802d5f2 <__cxa_guard_release>
 8024492:	4a0f      	ldr	r2, [pc, #60]	; (80244d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024494:	490f      	ldr	r1, [pc, #60]	; (80244d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024496:	4810      	ldr	r0, [pc, #64]	; (80244d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024498:	f009 f898 	bl	802d5cc <__aeabi_atexit>
 802449c:	4c0f      	ldr	r4, [pc, #60]	; (80244dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802449e:	7823      	ldrb	r3, [r4, #0]
 80244a0:	f3bf 8f5b 	dmb	ish
 80244a4:	07db      	lsls	r3, r3, #31
 80244a6:	d40b      	bmi.n	80244c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80244a8:	4620      	mov	r0, r4
 80244aa:	f009 f896 	bl	802d5da <__cxa_guard_acquire>
 80244ae:	b138      	cbz	r0, 80244c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80244b0:	4620      	mov	r0, r4
 80244b2:	f009 f89e 	bl	802d5f2 <__cxa_guard_release>
 80244b6:	4a06      	ldr	r2, [pc, #24]	; (80244d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80244b8:	4909      	ldr	r1, [pc, #36]	; (80244e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80244ba:	480a      	ldr	r0, [pc, #40]	; (80244e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80244bc:	f009 f886 	bl	802d5cc <__aeabi_atexit>
 80244c0:	4b05      	ldr	r3, [pc, #20]	; (80244d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80244c2:	61ab      	str	r3, [r5, #24]
 80244c4:	4b07      	ldr	r3, [pc, #28]	; (80244e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80244c6:	61eb      	str	r3, [r5, #28]
 80244c8:	bd38      	pop	{r3, r4, r5, pc}
 80244ca:	bf00      	nop
 80244cc:	200098cc 	.word	0x200098cc
 80244d0:	20000000 	.word	0x20000000
 80244d4:	08022503 	.word	0x08022503
 80244d8:	20000044 	.word	0x20000044
 80244dc:	200098d0 	.word	0x200098d0
 80244e0:	08022501 	.word	0x08022501
 80244e4:	20000048 	.word	0x20000048

080244e8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80244e8:	b510      	push	{r4, lr}
 80244ea:	4604      	mov	r4, r0
 80244ec:	f7ff ff88 	bl	8024400 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80244f0:	4620      	mov	r0, r4
 80244f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244f6:	f7ff bfbd 	b.w	8024474 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080244fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80244fc:	b538      	push	{r3, r4, r5, lr}
 80244fe:	4c15      	ldr	r4, [pc, #84]	; (8024554 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8024500:	7823      	ldrb	r3, [r4, #0]
 8024502:	f3bf 8f5b 	dmb	ish
 8024506:	07da      	lsls	r2, r3, #31
 8024508:	4605      	mov	r5, r0
 802450a:	d40b      	bmi.n	8024524 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802450c:	4620      	mov	r0, r4
 802450e:	f009 f864 	bl	802d5da <__cxa_guard_acquire>
 8024512:	b138      	cbz	r0, 8024524 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024514:	4620      	mov	r0, r4
 8024516:	f009 f86c 	bl	802d5f2 <__cxa_guard_release>
 802451a:	4a0f      	ldr	r2, [pc, #60]	; (8024558 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802451c:	490f      	ldr	r1, [pc, #60]	; (802455c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802451e:	4810      	ldr	r0, [pc, #64]	; (8024560 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024520:	f009 f854 	bl	802d5cc <__aeabi_atexit>
 8024524:	4c0f      	ldr	r4, [pc, #60]	; (8024564 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8024526:	7823      	ldrb	r3, [r4, #0]
 8024528:	f3bf 8f5b 	dmb	ish
 802452c:	07db      	lsls	r3, r3, #31
 802452e:	d40b      	bmi.n	8024548 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024530:	4620      	mov	r0, r4
 8024532:	f009 f852 	bl	802d5da <__cxa_guard_acquire>
 8024536:	b138      	cbz	r0, 8024548 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024538:	4620      	mov	r0, r4
 802453a:	f009 f85a 	bl	802d5f2 <__cxa_guard_release>
 802453e:	4a06      	ldr	r2, [pc, #24]	; (8024558 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024540:	4909      	ldr	r1, [pc, #36]	; (8024568 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8024542:	480a      	ldr	r0, [pc, #40]	; (802456c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024544:	f009 f842 	bl	802d5cc <__aeabi_atexit>
 8024548:	4b05      	ldr	r3, [pc, #20]	; (8024560 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802454a:	632b      	str	r3, [r5, #48]	; 0x30
 802454c:	4b07      	ldr	r3, [pc, #28]	; (802456c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802454e:	636b      	str	r3, [r5, #52]	; 0x34
 8024550:	bd38      	pop	{r3, r4, r5, pc}
 8024552:	bf00      	nop
 8024554:	20009904 	.word	0x20009904
 8024558:	20000000 	.word	0x20000000
 802455c:	080224f7 	.word	0x080224f7
 8024560:	2000007c 	.word	0x2000007c
 8024564:	20009908 	.word	0x20009908
 8024568:	080224f5 	.word	0x080224f5
 802456c:	20000080 	.word	0x20000080

08024570 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8024570:	b538      	push	{r3, r4, r5, lr}
 8024572:	4c15      	ldr	r4, [pc, #84]	; (80245c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024574:	7823      	ldrb	r3, [r4, #0]
 8024576:	f3bf 8f5b 	dmb	ish
 802457a:	07da      	lsls	r2, r3, #31
 802457c:	4605      	mov	r5, r0
 802457e:	d40b      	bmi.n	8024598 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024580:	4620      	mov	r0, r4
 8024582:	f009 f82a 	bl	802d5da <__cxa_guard_acquire>
 8024586:	b138      	cbz	r0, 8024598 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024588:	4620      	mov	r0, r4
 802458a:	f009 f832 	bl	802d5f2 <__cxa_guard_release>
 802458e:	4a0f      	ldr	r2, [pc, #60]	; (80245cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024590:	490f      	ldr	r1, [pc, #60]	; (80245d0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8024592:	4810      	ldr	r0, [pc, #64]	; (80245d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024594:	f009 f81a 	bl	802d5cc <__aeabi_atexit>
 8024598:	4c0f      	ldr	r4, [pc, #60]	; (80245d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802459a:	7823      	ldrb	r3, [r4, #0]
 802459c:	f3bf 8f5b 	dmb	ish
 80245a0:	07db      	lsls	r3, r3, #31
 80245a2:	d40b      	bmi.n	80245bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80245a4:	4620      	mov	r0, r4
 80245a6:	f009 f818 	bl	802d5da <__cxa_guard_acquire>
 80245aa:	b138      	cbz	r0, 80245bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80245ac:	4620      	mov	r0, r4
 80245ae:	f009 f820 	bl	802d5f2 <__cxa_guard_release>
 80245b2:	4a06      	ldr	r2, [pc, #24]	; (80245cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80245b4:	4909      	ldr	r1, [pc, #36]	; (80245dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80245b6:	480a      	ldr	r0, [pc, #40]	; (80245e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80245b8:	f009 f808 	bl	802d5cc <__aeabi_atexit>
 80245bc:	4b05      	ldr	r3, [pc, #20]	; (80245d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80245be:	62ab      	str	r3, [r5, #40]	; 0x28
 80245c0:	4b07      	ldr	r3, [pc, #28]	; (80245e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80245c2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80245c4:	bd38      	pop	{r3, r4, r5, pc}
 80245c6:	bf00      	nop
 80245c8:	200098d4 	.word	0x200098d4
 80245cc:	20000000 	.word	0x20000000
 80245d0:	080224fb 	.word	0x080224fb
 80245d4:	2000004c 	.word	0x2000004c
 80245d8:	200098d8 	.word	0x200098d8
 80245dc:	080224f9 	.word	0x080224f9
 80245e0:	20000050 	.word	0x20000050

080245e4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80245e4:	b510      	push	{r4, lr}
 80245e6:	4604      	mov	r4, r0
 80245e8:	f7ff ff88 	bl	80244fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80245ec:	4620      	mov	r0, r4
 80245ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80245f2:	f7ff bfbd 	b.w	8024570 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080245f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80245f8:	b538      	push	{r3, r4, r5, lr}
 80245fa:	4c15      	ldr	r4, [pc, #84]	; (8024650 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80245fc:	7823      	ldrb	r3, [r4, #0]
 80245fe:	f3bf 8f5b 	dmb	ish
 8024602:	07da      	lsls	r2, r3, #31
 8024604:	4605      	mov	r5, r0
 8024606:	d40b      	bmi.n	8024620 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024608:	4620      	mov	r0, r4
 802460a:	f008 ffe6 	bl	802d5da <__cxa_guard_acquire>
 802460e:	b138      	cbz	r0, 8024620 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024610:	4620      	mov	r0, r4
 8024612:	f008 ffee 	bl	802d5f2 <__cxa_guard_release>
 8024616:	4a0f      	ldr	r2, [pc, #60]	; (8024654 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024618:	490f      	ldr	r1, [pc, #60]	; (8024658 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802461a:	4810      	ldr	r0, [pc, #64]	; (802465c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802461c:	f008 ffd6 	bl	802d5cc <__aeabi_atexit>
 8024620:	4c0f      	ldr	r4, [pc, #60]	; (8024660 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8024622:	7823      	ldrb	r3, [r4, #0]
 8024624:	f3bf 8f5b 	dmb	ish
 8024628:	07db      	lsls	r3, r3, #31
 802462a:	d40b      	bmi.n	8024644 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802462c:	4620      	mov	r0, r4
 802462e:	f008 ffd4 	bl	802d5da <__cxa_guard_acquire>
 8024632:	b138      	cbz	r0, 8024644 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024634:	4620      	mov	r0, r4
 8024636:	f008 ffdc 	bl	802d5f2 <__cxa_guard_release>
 802463a:	4a06      	ldr	r2, [pc, #24]	; (8024654 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802463c:	4909      	ldr	r1, [pc, #36]	; (8024664 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802463e:	480a      	ldr	r0, [pc, #40]	; (8024668 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024640:	f008 ffc4 	bl	802d5cc <__aeabi_atexit>
 8024644:	4b05      	ldr	r3, [pc, #20]	; (802465c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024646:	652b      	str	r3, [r5, #80]	; 0x50
 8024648:	4b07      	ldr	r3, [pc, #28]	; (8024668 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802464a:	656b      	str	r3, [r5, #84]	; 0x54
 802464c:	bd38      	pop	{r3, r4, r5, pc}
 802464e:	bf00      	nop
 8024650:	2000990c 	.word	0x2000990c
 8024654:	20000000 	.word	0x20000000
 8024658:	080224e7 	.word	0x080224e7
 802465c:	20000084 	.word	0x20000084
 8024660:	20009910 	.word	0x20009910
 8024664:	080224e5 	.word	0x080224e5
 8024668:	20000088 	.word	0x20000088

0802466c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802466c:	b538      	push	{r3, r4, r5, lr}
 802466e:	4c15      	ldr	r4, [pc, #84]	; (80246c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8024670:	7823      	ldrb	r3, [r4, #0]
 8024672:	f3bf 8f5b 	dmb	ish
 8024676:	07da      	lsls	r2, r3, #31
 8024678:	4605      	mov	r5, r0
 802467a:	d40b      	bmi.n	8024694 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802467c:	4620      	mov	r0, r4
 802467e:	f008 ffac 	bl	802d5da <__cxa_guard_acquire>
 8024682:	b138      	cbz	r0, 8024694 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024684:	4620      	mov	r0, r4
 8024686:	f008 ffb4 	bl	802d5f2 <__cxa_guard_release>
 802468a:	4a0f      	ldr	r2, [pc, #60]	; (80246c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802468c:	490f      	ldr	r1, [pc, #60]	; (80246cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802468e:	4810      	ldr	r0, [pc, #64]	; (80246d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024690:	f008 ff9c 	bl	802d5cc <__aeabi_atexit>
 8024694:	4c0f      	ldr	r4, [pc, #60]	; (80246d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8024696:	7823      	ldrb	r3, [r4, #0]
 8024698:	f3bf 8f5b 	dmb	ish
 802469c:	07db      	lsls	r3, r3, #31
 802469e:	d40b      	bmi.n	80246b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80246a0:	4620      	mov	r0, r4
 80246a2:	f008 ff9a 	bl	802d5da <__cxa_guard_acquire>
 80246a6:	b138      	cbz	r0, 80246b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80246a8:	4620      	mov	r0, r4
 80246aa:	f008 ffa2 	bl	802d5f2 <__cxa_guard_release>
 80246ae:	4a06      	ldr	r2, [pc, #24]	; (80246c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80246b0:	4909      	ldr	r1, [pc, #36]	; (80246d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80246b2:	480a      	ldr	r0, [pc, #40]	; (80246dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80246b4:	f008 ff8a 	bl	802d5cc <__aeabi_atexit>
 80246b8:	4b05      	ldr	r3, [pc, #20]	; (80246d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80246ba:	64ab      	str	r3, [r5, #72]	; 0x48
 80246bc:	4b07      	ldr	r3, [pc, #28]	; (80246dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80246be:	64eb      	str	r3, [r5, #76]	; 0x4c
 80246c0:	bd38      	pop	{r3, r4, r5, pc}
 80246c2:	bf00      	nop
 80246c4:	20009914 	.word	0x20009914
 80246c8:	20000000 	.word	0x20000000
 80246cc:	080224eb 	.word	0x080224eb
 80246d0:	2000008c 	.word	0x2000008c
 80246d4:	20009918 	.word	0x20009918
 80246d8:	080224e9 	.word	0x080224e9
 80246dc:	20000090 	.word	0x20000090

080246e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80246e0:	b538      	push	{r3, r4, r5, lr}
 80246e2:	4c15      	ldr	r4, [pc, #84]	; (8024738 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80246e4:	7823      	ldrb	r3, [r4, #0]
 80246e6:	f3bf 8f5b 	dmb	ish
 80246ea:	07da      	lsls	r2, r3, #31
 80246ec:	4605      	mov	r5, r0
 80246ee:	d40b      	bmi.n	8024708 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80246f0:	4620      	mov	r0, r4
 80246f2:	f008 ff72 	bl	802d5da <__cxa_guard_acquire>
 80246f6:	b138      	cbz	r0, 8024708 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80246f8:	4620      	mov	r0, r4
 80246fa:	f008 ff7a 	bl	802d5f2 <__cxa_guard_release>
 80246fe:	4a0f      	ldr	r2, [pc, #60]	; (802473c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8024700:	490f      	ldr	r1, [pc, #60]	; (8024740 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8024702:	4810      	ldr	r0, [pc, #64]	; (8024744 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8024704:	f008 ff62 	bl	802d5cc <__aeabi_atexit>
 8024708:	4c0f      	ldr	r4, [pc, #60]	; (8024748 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802470a:	7823      	ldrb	r3, [r4, #0]
 802470c:	f3bf 8f5b 	dmb	ish
 8024710:	07db      	lsls	r3, r3, #31
 8024712:	d40b      	bmi.n	802472c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024714:	4620      	mov	r0, r4
 8024716:	f008 ff60 	bl	802d5da <__cxa_guard_acquire>
 802471a:	b138      	cbz	r0, 802472c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802471c:	4620      	mov	r0, r4
 802471e:	f008 ff68 	bl	802d5f2 <__cxa_guard_release>
 8024722:	4a06      	ldr	r2, [pc, #24]	; (802473c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8024724:	4909      	ldr	r1, [pc, #36]	; (802474c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8024726:	480a      	ldr	r0, [pc, #40]	; (8024750 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8024728:	f008 ff50 	bl	802d5cc <__aeabi_atexit>
 802472c:	4b05      	ldr	r3, [pc, #20]	; (8024744 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802472e:	642b      	str	r3, [r5, #64]	; 0x40
 8024730:	4b07      	ldr	r3, [pc, #28]	; (8024750 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8024732:	646b      	str	r3, [r5, #68]	; 0x44
 8024734:	bd38      	pop	{r3, r4, r5, pc}
 8024736:	bf00      	nop
 8024738:	200098dc 	.word	0x200098dc
 802473c:	20000000 	.word	0x20000000
 8024740:	080224ef 	.word	0x080224ef
 8024744:	20000054 	.word	0x20000054
 8024748:	200098e0 	.word	0x200098e0
 802474c:	080224ed 	.word	0x080224ed
 8024750:	20000058 	.word	0x20000058

08024754 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8024754:	b538      	push	{r3, r4, r5, lr}
 8024756:	4c15      	ldr	r4, [pc, #84]	; (80247ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8024758:	7823      	ldrb	r3, [r4, #0]
 802475a:	f3bf 8f5b 	dmb	ish
 802475e:	07da      	lsls	r2, r3, #31
 8024760:	4605      	mov	r5, r0
 8024762:	d40b      	bmi.n	802477c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024764:	4620      	mov	r0, r4
 8024766:	f008 ff38 	bl	802d5da <__cxa_guard_acquire>
 802476a:	b138      	cbz	r0, 802477c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802476c:	4620      	mov	r0, r4
 802476e:	f008 ff40 	bl	802d5f2 <__cxa_guard_release>
 8024772:	4a0f      	ldr	r2, [pc, #60]	; (80247b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024774:	490f      	ldr	r1, [pc, #60]	; (80247b4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8024776:	4810      	ldr	r0, [pc, #64]	; (80247b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024778:	f008 ff28 	bl	802d5cc <__aeabi_atexit>
 802477c:	4c0f      	ldr	r4, [pc, #60]	; (80247bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802477e:	7823      	ldrb	r3, [r4, #0]
 8024780:	f3bf 8f5b 	dmb	ish
 8024784:	07db      	lsls	r3, r3, #31
 8024786:	d40b      	bmi.n	80247a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024788:	4620      	mov	r0, r4
 802478a:	f008 ff26 	bl	802d5da <__cxa_guard_acquire>
 802478e:	b138      	cbz	r0, 80247a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024790:	4620      	mov	r0, r4
 8024792:	f008 ff2e 	bl	802d5f2 <__cxa_guard_release>
 8024796:	4a06      	ldr	r2, [pc, #24]	; (80247b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024798:	4909      	ldr	r1, [pc, #36]	; (80247c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802479a:	480a      	ldr	r0, [pc, #40]	; (80247c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802479c:	f008 ff16 	bl	802d5cc <__aeabi_atexit>
 80247a0:	4b05      	ldr	r3, [pc, #20]	; (80247b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80247a2:	63ab      	str	r3, [r5, #56]	; 0x38
 80247a4:	4b07      	ldr	r3, [pc, #28]	; (80247c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80247a6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80247a8:	bd38      	pop	{r3, r4, r5, pc}
 80247aa:	bf00      	nop
 80247ac:	200098fc 	.word	0x200098fc
 80247b0:	20000000 	.word	0x20000000
 80247b4:	080224f3 	.word	0x080224f3
 80247b8:	20000074 	.word	0x20000074
 80247bc:	20009900 	.word	0x20009900
 80247c0:	080224f1 	.word	0x080224f1
 80247c4:	20000078 	.word	0x20000078

080247c8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80247c8:	b510      	push	{r4, lr}
 80247ca:	4604      	mov	r4, r0
 80247cc:	f7ff ff14 	bl	80245f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80247d0:	4620      	mov	r0, r4
 80247d2:	f7ff ff85 	bl	80246e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80247d6:	4620      	mov	r0, r4
 80247d8:	f7ff ff48 	bl	802466c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80247dc:	4620      	mov	r0, r4
 80247de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80247e2:	f7ff bfb7 	b.w	8024754 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080247e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80247e8:	b538      	push	{r3, r4, r5, lr}
 80247ea:	4c15      	ldr	r4, [pc, #84]	; (8024840 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80247ec:	7823      	ldrb	r3, [r4, #0]
 80247ee:	f3bf 8f5b 	dmb	ish
 80247f2:	07da      	lsls	r2, r3, #31
 80247f4:	4605      	mov	r5, r0
 80247f6:	d40b      	bmi.n	8024810 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80247f8:	4620      	mov	r0, r4
 80247fa:	f008 feee 	bl	802d5da <__cxa_guard_acquire>
 80247fe:	b138      	cbz	r0, 8024810 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024800:	4620      	mov	r0, r4
 8024802:	f008 fef6 	bl	802d5f2 <__cxa_guard_release>
 8024806:	4a0f      	ldr	r2, [pc, #60]	; (8024844 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024808:	490f      	ldr	r1, [pc, #60]	; (8024848 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802480a:	4810      	ldr	r0, [pc, #64]	; (802484c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802480c:	f008 fede 	bl	802d5cc <__aeabi_atexit>
 8024810:	4c0f      	ldr	r4, [pc, #60]	; (8024850 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8024812:	7823      	ldrb	r3, [r4, #0]
 8024814:	f3bf 8f5b 	dmb	ish
 8024818:	07db      	lsls	r3, r3, #31
 802481a:	d40b      	bmi.n	8024834 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802481c:	4620      	mov	r0, r4
 802481e:	f008 fedc 	bl	802d5da <__cxa_guard_acquire>
 8024822:	b138      	cbz	r0, 8024834 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024824:	4620      	mov	r0, r4
 8024826:	f008 fee4 	bl	802d5f2 <__cxa_guard_release>
 802482a:	4a06      	ldr	r2, [pc, #24]	; (8024844 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802482c:	4909      	ldr	r1, [pc, #36]	; (8024854 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802482e:	480a      	ldr	r0, [pc, #40]	; (8024858 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024830:	f008 fecc 	bl	802d5cc <__aeabi_atexit>
 8024834:	4b05      	ldr	r3, [pc, #20]	; (802484c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024836:	662b      	str	r3, [r5, #96]	; 0x60
 8024838:	4b07      	ldr	r3, [pc, #28]	; (8024858 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802483a:	666b      	str	r3, [r5, #100]	; 0x64
 802483c:	bd38      	pop	{r3, r4, r5, pc}
 802483e:	bf00      	nop
 8024840:	200098e4 	.word	0x200098e4
 8024844:	20000000 	.word	0x20000000
 8024848:	080224df 	.word	0x080224df
 802484c:	2000005c 	.word	0x2000005c
 8024850:	200098e8 	.word	0x200098e8
 8024854:	080224dd 	.word	0x080224dd
 8024858:	20000060 	.word	0x20000060

0802485c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 802485c:	b538      	push	{r3, r4, r5, lr}
 802485e:	4c15      	ldr	r4, [pc, #84]	; (80248b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8024860:	7823      	ldrb	r3, [r4, #0]
 8024862:	f3bf 8f5b 	dmb	ish
 8024866:	07da      	lsls	r2, r3, #31
 8024868:	4605      	mov	r5, r0
 802486a:	d40b      	bmi.n	8024884 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802486c:	4620      	mov	r0, r4
 802486e:	f008 feb4 	bl	802d5da <__cxa_guard_acquire>
 8024872:	b138      	cbz	r0, 8024884 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024874:	4620      	mov	r0, r4
 8024876:	f008 febc 	bl	802d5f2 <__cxa_guard_release>
 802487a:	4a0f      	ldr	r2, [pc, #60]	; (80248b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802487c:	490f      	ldr	r1, [pc, #60]	; (80248bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802487e:	4810      	ldr	r0, [pc, #64]	; (80248c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024880:	f008 fea4 	bl	802d5cc <__aeabi_atexit>
 8024884:	4c0f      	ldr	r4, [pc, #60]	; (80248c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024886:	7823      	ldrb	r3, [r4, #0]
 8024888:	f3bf 8f5b 	dmb	ish
 802488c:	07db      	lsls	r3, r3, #31
 802488e:	d40b      	bmi.n	80248a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024890:	4620      	mov	r0, r4
 8024892:	f008 fea2 	bl	802d5da <__cxa_guard_acquire>
 8024896:	b138      	cbz	r0, 80248a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024898:	4620      	mov	r0, r4
 802489a:	f008 feaa 	bl	802d5f2 <__cxa_guard_release>
 802489e:	4a06      	ldr	r2, [pc, #24]	; (80248b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80248a0:	4909      	ldr	r1, [pc, #36]	; (80248c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80248a2:	480a      	ldr	r0, [pc, #40]	; (80248cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80248a4:	f008 fe92 	bl	802d5cc <__aeabi_atexit>
 80248a8:	4b05      	ldr	r3, [pc, #20]	; (80248c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80248aa:	65ab      	str	r3, [r5, #88]	; 0x58
 80248ac:	4b07      	ldr	r3, [pc, #28]	; (80248cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80248ae:	65eb      	str	r3, [r5, #92]	; 0x5c
 80248b0:	bd38      	pop	{r3, r4, r5, pc}
 80248b2:	bf00      	nop
 80248b4:	200098bc 	.word	0x200098bc
 80248b8:	20000000 	.word	0x20000000
 80248bc:	080224e3 	.word	0x080224e3
 80248c0:	20000034 	.word	0x20000034
 80248c4:	200098c0 	.word	0x200098c0
 80248c8:	080224e1 	.word	0x080224e1
 80248cc:	20000038 	.word	0x20000038

080248d0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80248d0:	b510      	push	{r4, lr}
 80248d2:	4604      	mov	r4, r0
 80248d4:	f7ff ff88 	bl	80247e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80248d8:	4620      	mov	r0, r4
 80248da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80248de:	f7ff bfbd 	b.w	802485c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080248e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80248e4:	b538      	push	{r3, r4, r5, lr}
 80248e6:	4c15      	ldr	r4, [pc, #84]	; (802493c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80248e8:	7823      	ldrb	r3, [r4, #0]
 80248ea:	f3bf 8f5b 	dmb	ish
 80248ee:	07da      	lsls	r2, r3, #31
 80248f0:	4605      	mov	r5, r0
 80248f2:	d40b      	bmi.n	802490c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80248f4:	4620      	mov	r0, r4
 80248f6:	f008 fe70 	bl	802d5da <__cxa_guard_acquire>
 80248fa:	b138      	cbz	r0, 802490c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80248fc:	4620      	mov	r0, r4
 80248fe:	f008 fe78 	bl	802d5f2 <__cxa_guard_release>
 8024902:	4a0f      	ldr	r2, [pc, #60]	; (8024940 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024904:	490f      	ldr	r1, [pc, #60]	; (8024944 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024906:	4810      	ldr	r0, [pc, #64]	; (8024948 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024908:	f008 fe60 	bl	802d5cc <__aeabi_atexit>
 802490c:	4c0f      	ldr	r4, [pc, #60]	; (802494c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802490e:	7823      	ldrb	r3, [r4, #0]
 8024910:	f3bf 8f5b 	dmb	ish
 8024914:	07db      	lsls	r3, r3, #31
 8024916:	d40b      	bmi.n	8024930 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024918:	4620      	mov	r0, r4
 802491a:	f008 fe5e 	bl	802d5da <__cxa_guard_acquire>
 802491e:	b138      	cbz	r0, 8024930 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024920:	4620      	mov	r0, r4
 8024922:	f008 fe66 	bl	802d5f2 <__cxa_guard_release>
 8024926:	4a06      	ldr	r2, [pc, #24]	; (8024940 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024928:	4909      	ldr	r1, [pc, #36]	; (8024950 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802492a:	480a      	ldr	r0, [pc, #40]	; (8024954 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802492c:	f008 fe4e 	bl	802d5cc <__aeabi_atexit>
 8024930:	4b05      	ldr	r3, [pc, #20]	; (8024948 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024932:	672b      	str	r3, [r5, #112]	; 0x70
 8024934:	4b07      	ldr	r3, [pc, #28]	; (8024954 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024936:	676b      	str	r3, [r5, #116]	; 0x74
 8024938:	bd38      	pop	{r3, r4, r5, pc}
 802493a:	bf00      	nop
 802493c:	200098b4 	.word	0x200098b4
 8024940:	20000000 	.word	0x20000000
 8024944:	080224d7 	.word	0x080224d7
 8024948:	2000002c 	.word	0x2000002c
 802494c:	200098b8 	.word	0x200098b8
 8024950:	080224d5 	.word	0x080224d5
 8024954:	20000030 	.word	0x20000030

08024958 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024958:	b538      	push	{r3, r4, r5, lr}
 802495a:	4c15      	ldr	r4, [pc, #84]	; (80249b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802495c:	7823      	ldrb	r3, [r4, #0]
 802495e:	f3bf 8f5b 	dmb	ish
 8024962:	07da      	lsls	r2, r3, #31
 8024964:	4605      	mov	r5, r0
 8024966:	d40b      	bmi.n	8024980 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024968:	4620      	mov	r0, r4
 802496a:	f008 fe36 	bl	802d5da <__cxa_guard_acquire>
 802496e:	b138      	cbz	r0, 8024980 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024970:	4620      	mov	r0, r4
 8024972:	f008 fe3e 	bl	802d5f2 <__cxa_guard_release>
 8024976:	4a0f      	ldr	r2, [pc, #60]	; (80249b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024978:	490f      	ldr	r1, [pc, #60]	; (80249b8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802497a:	4810      	ldr	r0, [pc, #64]	; (80249bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802497c:	f008 fe26 	bl	802d5cc <__aeabi_atexit>
 8024980:	4c0f      	ldr	r4, [pc, #60]	; (80249c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8024982:	7823      	ldrb	r3, [r4, #0]
 8024984:	f3bf 8f5b 	dmb	ish
 8024988:	07db      	lsls	r3, r3, #31
 802498a:	d40b      	bmi.n	80249a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802498c:	4620      	mov	r0, r4
 802498e:	f008 fe24 	bl	802d5da <__cxa_guard_acquire>
 8024992:	b138      	cbz	r0, 80249a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024994:	4620      	mov	r0, r4
 8024996:	f008 fe2c 	bl	802d5f2 <__cxa_guard_release>
 802499a:	4a06      	ldr	r2, [pc, #24]	; (80249b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802499c:	4909      	ldr	r1, [pc, #36]	; (80249c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802499e:	480a      	ldr	r0, [pc, #40]	; (80249c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80249a0:	f008 fe14 	bl	802d5cc <__aeabi_atexit>
 80249a4:	4b05      	ldr	r3, [pc, #20]	; (80249bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80249a6:	66ab      	str	r3, [r5, #104]	; 0x68
 80249a8:	4b07      	ldr	r3, [pc, #28]	; (80249c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80249aa:	66eb      	str	r3, [r5, #108]	; 0x6c
 80249ac:	bd38      	pop	{r3, r4, r5, pc}
 80249ae:	bf00      	nop
 80249b0:	200098ac 	.word	0x200098ac
 80249b4:	20000000 	.word	0x20000000
 80249b8:	080224db 	.word	0x080224db
 80249bc:	20000024 	.word	0x20000024
 80249c0:	200098b0 	.word	0x200098b0
 80249c4:	080224d9 	.word	0x080224d9
 80249c8:	20000028 	.word	0x20000028

080249cc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80249cc:	b510      	push	{r4, lr}
 80249ce:	4604      	mov	r4, r0
 80249d0:	f7ff ff88 	bl	80248e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80249d4:	4620      	mov	r0, r4
 80249d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80249da:	f7ff bfbd 	b.w	8024958 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080249de <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80249de:	b510      	push	{r4, lr}
 80249e0:	4604      	mov	r4, r0
 80249e2:	f7ff fff3 	bl	80249cc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80249e6:	4620      	mov	r0, r4
 80249e8:	f7ff ff72 	bl	80248d0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80249ec:	4620      	mov	r0, r4
 80249ee:	f7ff fdf9 	bl	80245e4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80249f2:	4620      	mov	r0, r4
 80249f4:	f7ff fcfa 	bl	80243ec <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80249f8:	4620      	mov	r0, r4
 80249fa:	f7ff fd75 	bl	80244e8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80249fe:	4620      	mov	r0, r4
 8024a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a04:	f7ff bee0 	b.w	80247c8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08024a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8024a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a0c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8024a10:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024a14:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8024a18:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8024a1c:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8024a20:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8024a24:	8808      	ldrh	r0, [r1, #0]
 8024a26:	fb0e 4708 	mla	r7, lr, r8, r4
 8024a2a:	f1be 0f00 	cmp.w	lr, #0
 8024a2e:	eb02 0a07 	add.w	sl, r2, r7
 8024a32:	db37      	blt.n	8024aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8024a34:	45f3      	cmp	fp, lr
 8024a36:	dd35      	ble.n	8024aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8024a38:	2c00      	cmp	r4, #0
 8024a3a:	db31      	blt.n	8024aa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8024a3c:	45a0      	cmp	r8, r4
 8024a3e:	dd2f      	ble.n	8024aa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8024a40:	5dd2      	ldrb	r2, [r2, r7]
 8024a42:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8024a46:	1c62      	adds	r2, r4, #1
 8024a48:	d42f      	bmi.n	8024aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8024a4a:	4590      	cmp	r8, r2
 8024a4c:	dd2d      	ble.n	8024aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8024a4e:	b366      	cbz	r6, 8024aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8024a50:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024a54:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024a58:	f11e 0e01 	adds.w	lr, lr, #1
 8024a5c:	d429      	bmi.n	8024ab2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8024a5e:	45f3      	cmp	fp, lr
 8024a60:	dd27      	ble.n	8024ab2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8024a62:	f1bc 0f00 	cmp.w	ip, #0
 8024a66:	f000 80a1 	beq.w	8024bac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8024a6a:	2c00      	cmp	r4, #0
 8024a6c:	db1f      	blt.n	8024aae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024a6e:	45a0      	cmp	r8, r4
 8024a70:	dd1d      	ble.n	8024aae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024a72:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8024a76:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8024a7a:	3401      	adds	r4, #1
 8024a7c:	d41c      	bmi.n	8024ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8024a7e:	45a0      	cmp	r8, r4
 8024a80:	dd1a      	ble.n	8024ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8024a82:	b1de      	cbz	r6, 8024abc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8024a84:	44d0      	add	r8, sl
 8024a86:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024a8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024a8e:	2e0f      	cmp	r6, #15
 8024a90:	d915      	bls.n	8024abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8024a92:	4b49      	ldr	r3, [pc, #292]	; (8024bb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8024a94:	4a49      	ldr	r2, [pc, #292]	; (8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8024a96:	484a      	ldr	r0, [pc, #296]	; (8024bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8024a98:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024a9c:	f009 fbba 	bl	802e214 <__assert_func>
 8024aa0:	4681      	mov	r9, r0
 8024aa2:	e7d0      	b.n	8024a46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8024aa4:	4607      	mov	r7, r0
 8024aa6:	4681      	mov	r9, r0
 8024aa8:	e7d6      	b.n	8024a58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8024aaa:	4607      	mov	r7, r0
 8024aac:	e7d4      	b.n	8024a58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8024aae:	4686      	mov	lr, r0
 8024ab0:	e7e3      	b.n	8024a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8024ab2:	4603      	mov	r3, r0
 8024ab4:	4686      	mov	lr, r0
 8024ab6:	e7ea      	b.n	8024a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8024ab8:	4603      	mov	r3, r0
 8024aba:	e7e8      	b.n	8024a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8024abc:	4603      	mov	r3, r0
 8024abe:	f1bc 0f0f 	cmp.w	ip, #15
 8024ac2:	d8e6      	bhi.n	8024a92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8024ac4:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8024ac8:	fb16 f80c 	smulbb	r8, r6, ip
 8024acc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024ad0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024ad4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024ad8:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8024adc:	ea44 0909 	orr.w	r9, r4, r9
 8024ae0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024ae4:	f1cc 0410 	rsb	r4, ip, #16
 8024ae8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024aec:	1ba4      	subs	r4, r4, r6
 8024aee:	041a      	lsls	r2, r3, #16
 8024af0:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8024af4:	ea4a 0707 	orr.w	r7, sl, r7
 8024af8:	4377      	muls	r7, r6
 8024afa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024afe:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8024b02:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024b06:	fb04 7409 	mla	r4, r4, r9, r7
 8024b0a:	4313      	orrs	r3, r2
 8024b0c:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8024b10:	fb08 4303 	mla	r3, r8, r3, r4
 8024b14:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024b18:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8024b1c:	4322      	orrs	r2, r4
 8024b1e:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8024b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8024b26:	0d53      	lsrs	r3, r2, #21
 8024b28:	0952      	lsrs	r2, r2, #5
 8024b2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024b2e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024b32:	431a      	orrs	r2, r3
 8024b34:	b293      	uxth	r3, r2
 8024b36:	b2af      	uxth	r7, r5
 8024b38:	1202      	asrs	r2, r0, #8
 8024b3a:	43ed      	mvns	r5, r5
 8024b3c:	b2ed      	uxtb	r5, r5
 8024b3e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8024b42:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024b46:	fb12 f205 	smulbb	r2, r2, r5
 8024b4a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024b4e:	fb0c 2c07 	mla	ip, ip, r7, r2
 8024b52:	00dc      	lsls	r4, r3, #3
 8024b54:	10da      	asrs	r2, r3, #3
 8024b56:	10c6      	asrs	r6, r0, #3
 8024b58:	00c3      	lsls	r3, r0, #3
 8024b5a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024b5e:	b2db      	uxtb	r3, r3
 8024b60:	fb16 f605 	smulbb	r6, r6, r5
 8024b64:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024b68:	b2e4      	uxtb	r4, r4
 8024b6a:	fb13 f305 	smulbb	r3, r3, r5
 8024b6e:	fa1f fc8c 	uxth.w	ip, ip
 8024b72:	fb02 6207 	mla	r2, r2, r7, r6
 8024b76:	fb04 3307 	mla	r3, r4, r7, r3
 8024b7a:	b296      	uxth	r6, r2
 8024b7c:	b29a      	uxth	r2, r3
 8024b7e:	f10c 0301 	add.w	r3, ip, #1
 8024b82:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024b86:	1c53      	adds	r3, r2, #1
 8024b88:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024b8c:	1c72      	adds	r2, r6, #1
 8024b8e:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8024b92:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024b96:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024b9a:	0952      	lsrs	r2, r2, #5
 8024b9c:	ea43 030c 	orr.w	r3, r3, ip
 8024ba0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024ba4:	4313      	orrs	r3, r2
 8024ba6:	800b      	strh	r3, [r1, #0]
 8024ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bac:	2e0f      	cmp	r6, #15
 8024bae:	f63f af70 	bhi.w	8024a92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8024bb2:	4603      	mov	r3, r0
 8024bb4:	4686      	mov	lr, r0
 8024bb6:	e785      	b.n	8024ac4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8024bb8:	08033161 	.word	0x08033161
 8024bbc:	080337d7 	.word	0x080337d7
 8024bc0:	080331e5 	.word	0x080331e5

08024bc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bc8:	ed2d 8b08 	vpush	{d8-d11}
 8024bcc:	b099      	sub	sp, #100	; 0x64
 8024bce:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8024bd2:	9215      	str	r2, [sp, #84]	; 0x54
 8024bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8024bd6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024bd8:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8024bdc:	930d      	str	r3, [sp, #52]	; 0x34
 8024bde:	910c      	str	r1, [sp, #48]	; 0x30
 8024be0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8024be4:	9016      	str	r0, [sp, #88]	; 0x58
 8024be6:	6850      	ldr	r0, [r2, #4]
 8024be8:	6812      	ldr	r2, [r2, #0]
 8024bea:	fb00 1303 	mla	r3, r0, r3, r1
 8024bee:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8024bf2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024bf4:	681b      	ldr	r3, [r3, #0]
 8024bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8024bf8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024bfa:	685e      	ldr	r6, [r3, #4]
 8024bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024bfe:	43db      	mvns	r3, r3
 8024c00:	b2db      	uxtb	r3, r3
 8024c02:	eeb0 aa40 	vmov.f32	s20, s0
 8024c06:	eef0 9a60 	vmov.f32	s19, s1
 8024c0a:	eeb0 9a41 	vmov.f32	s18, s2
 8024c0e:	eeb0 8a62 	vmov.f32	s16, s5
 8024c12:	eef0 8a43 	vmov.f32	s17, s6
 8024c16:	eef0 ba44 	vmov.f32	s23, s8
 8024c1a:	eeb0 ba64 	vmov.f32	s22, s9
 8024c1e:	eef0 aa45 	vmov.f32	s21, s10
 8024c22:	3604      	adds	r6, #4
 8024c24:	930a      	str	r3, [sp, #40]	; 0x28
 8024c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	dc03      	bgt.n	8024c34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024c2e:	2b00      	cmp	r3, #0
 8024c30:	f340 8225 	ble.w	802507e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024c34:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024c36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024c3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024c3e:	1e48      	subs	r0, r1, #1
 8024c40:	1e57      	subs	r7, r2, #1
 8024c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	f340 80e3 	ble.w	8024e10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8024c4a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8024c4e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024c52:	d406      	bmi.n	8024c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024c54:	4584      	cmp	ip, r0
 8024c56:	da04      	bge.n	8024c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024c58:	2b00      	cmp	r3, #0
 8024c5a:	db02      	blt.n	8024c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024c5c:	42bb      	cmp	r3, r7
 8024c5e:	f2c0 80d8 	blt.w	8024e12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8024c62:	f11c 0c01 	adds.w	ip, ip, #1
 8024c66:	f100 80c9 	bmi.w	8024dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024c6a:	4561      	cmp	r1, ip
 8024c6c:	f2c0 80c6 	blt.w	8024dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024c70:	3301      	adds	r3, #1
 8024c72:	f100 80c3 	bmi.w	8024dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024c76:	429a      	cmp	r2, r3
 8024c78:	f2c0 80c0 	blt.w	8024dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8024c7c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024c80:	4647      	mov	r7, r8
 8024c82:	f1bb 0f00 	cmp.w	fp, #0
 8024c86:	f340 80e3 	ble.w	8024e50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8024c8a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8024c8c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024c8e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024c92:	689b      	ldr	r3, [r3, #8]
 8024c94:	ea5f 422a 	movs.w	r2, sl, asr #16
 8024c98:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024c9c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024ca0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024ca4:	f100 8121 	bmi.w	8024eea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024ca8:	f103 39ff 	add.w	r9, r3, #4294967295
 8024cac:	454a      	cmp	r2, r9
 8024cae:	f280 811c 	bge.w	8024eea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024cb2:	f1bc 0f00 	cmp.w	ip, #0
 8024cb6:	f2c0 8118 	blt.w	8024eea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024cba:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024cbe:	45cc      	cmp	ip, r9
 8024cc0:	f280 8113 	bge.w	8024eea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024cc4:	b21b      	sxth	r3, r3
 8024cc6:	fb0c 2203 	mla	r2, ip, r3, r2
 8024cca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024ccc:	eb04 0902 	add.w	r9, r4, r2
 8024cd0:	5ca2      	ldrb	r2, [r4, r2]
 8024cd2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8024cd6:	2800      	cmp	r0, #0
 8024cd8:	f000 80fe 	beq.w	8024ed8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8024cdc:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024ce0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024ce4:	9211      	str	r2, [sp, #68]	; 0x44
 8024ce6:	b151      	cbz	r1, 8024cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024ce8:	eb09 0203 	add.w	r2, r9, r3
 8024cec:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024cf0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024cf4:	930f      	str	r3, [sp, #60]	; 0x3c
 8024cf6:	7853      	ldrb	r3, [r2, #1]
 8024cf8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024cfc:	9312      	str	r3, [sp, #72]	; 0x48
 8024cfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024d00:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024d02:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024d06:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024d0a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8024d12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024d14:	041b      	lsls	r3, r3, #16
 8024d16:	fb10 f201 	smulbb	r2, r0, r1
 8024d1a:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024d1e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024d22:	10d2      	asrs	r2, r2, #3
 8024d24:	4323      	orrs	r3, r4
 8024d26:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8024d2a:	4353      	muls	r3, r2
 8024d2c:	fb09 330c 	mla	r3, r9, ip, r3
 8024d30:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024d34:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024d38:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024d3c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024d40:	f1c1 0c10 	rsb	ip, r1, #16
 8024d44:	ebac 0c00 	sub.w	ip, ip, r0
 8024d48:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024d4c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024d52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024d54:	0418      	lsls	r0, r3, #16
 8024d56:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024d5a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024d5e:	4318      	orrs	r0, r3
 8024d60:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024d64:	fb02 c200 	mla	r2, r2, r0, ip
 8024d68:	0d53      	lsrs	r3, r2, #21
 8024d6a:	0952      	lsrs	r2, r2, #5
 8024d6c:	8838      	ldrh	r0, [r7, #0]
 8024d6e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024d72:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024d76:	431a      	orrs	r2, r3
 8024d78:	b292      	uxth	r2, r2
 8024d7a:	1201      	asrs	r1, r0, #8
 8024d7c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8024d80:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024d84:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024d88:	fb11 f104 	smulbb	r1, r1, r4
 8024d8c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024d90:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024d94:	00c0      	lsls	r0, r0, #3
 8024d96:	fb0c 1c03 	mla	ip, ip, r3, r1
 8024d9a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024d9e:	10d1      	asrs	r1, r2, #3
 8024da0:	b2c0      	uxtb	r0, r0
 8024da2:	00d2      	lsls	r2, r2, #3
 8024da4:	b2d2      	uxtb	r2, r2
 8024da6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024daa:	fb1e fe04 	smulbb	lr, lr, r4
 8024dae:	fb10 f004 	smulbb	r0, r0, r4
 8024db2:	fa1f fc8c 	uxth.w	ip, ip
 8024db6:	fb01 e103 	mla	r1, r1, r3, lr
 8024dba:	fb02 0303 	mla	r3, r2, r3, r0
 8024dbe:	b29a      	uxth	r2, r3
 8024dc0:	f10c 0301 	add.w	r3, ip, #1
 8024dc4:	b289      	uxth	r1, r1
 8024dc6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024dca:	1c53      	adds	r3, r2, #1
 8024dcc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024dd0:	1c4a      	adds	r2, r1, #1
 8024dd2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024dd6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024dda:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024dde:	0949      	lsrs	r1, r1, #5
 8024de0:	ea43 030c 	orr.w	r3, r3, ip
 8024de4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024de8:	430b      	orrs	r3, r1
 8024dea:	803b      	strh	r3, [r7, #0]
 8024dec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024dee:	449a      	add	sl, r3
 8024df0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024df2:	3702      	adds	r7, #2
 8024df4:	441d      	add	r5, r3
 8024df6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024dfa:	e742      	b.n	8024c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024dfc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024dfe:	449a      	add	sl, r3
 8024e00:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024e02:	441d      	add	r5, r3
 8024e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e06:	3b01      	subs	r3, #1
 8024e08:	9309      	str	r3, [sp, #36]	; 0x24
 8024e0a:	f108 0802 	add.w	r8, r8, #2
 8024e0e:	e718      	b.n	8024c42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8024e10:	d023      	beq.n	8024e5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e14:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8024e16:	3b01      	subs	r3, #1
 8024e18:	fb00 a003 	mla	r0, r0, r3, sl
 8024e1c:	1400      	asrs	r0, r0, #16
 8024e1e:	f53f af2d 	bmi.w	8024c7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024e22:	3901      	subs	r1, #1
 8024e24:	4288      	cmp	r0, r1
 8024e26:	f6bf af29 	bge.w	8024c7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024e2a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024e2c:	fb01 5303 	mla	r3, r1, r3, r5
 8024e30:	141b      	asrs	r3, r3, #16
 8024e32:	f53f af23 	bmi.w	8024c7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024e36:	3a01      	subs	r2, #1
 8024e38:	4293      	cmp	r3, r2
 8024e3a:	f6bf af1f 	bge.w	8024c7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024e3e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024e42:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8024e46:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8024e4a:	f1be 0f00 	cmp.w	lr, #0
 8024e4e:	dc6c      	bgt.n	8024f2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8024e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e52:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024e56:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8024e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e5c:	2b00      	cmp	r3, #0
 8024e5e:	f340 810e 	ble.w	802507e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024e62:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024e6a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024e6e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024e70:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024e74:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024e78:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024e7c:	eef0 6a48 	vmov.f32	s13, s16
 8024e80:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024e84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e88:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024e8c:	ee16 aa90 	vmov	sl, s13
 8024e90:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024e94:	eef0 6a68 	vmov.f32	s13, s17
 8024e98:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024e9c:	ee18 2a10 	vmov	r2, s16
 8024ea0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024ea4:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ea8:	ee18 2a90 	vmov	r2, s17
 8024eac:	932d      	str	r3, [sp, #180]	; 0xb4
 8024eae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024eb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8024eb4:	932e      	str	r3, [sp, #184]	; 0xb8
 8024eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024eb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024eba:	3b01      	subs	r3, #1
 8024ebc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8024ec2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024ec4:	bf08      	it	eq
 8024ec6:	4613      	moveq	r3, r2
 8024ec8:	ee16 5a90 	vmov	r5, s13
 8024ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8024ece:	eef0 8a67 	vmov.f32	s17, s15
 8024ed2:	eeb0 8a47 	vmov.f32	s16, s14
 8024ed6:	e6a6      	b.n	8024c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024ed8:	2900      	cmp	r1, #0
 8024eda:	f43f af10 	beq.w	8024cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024ede:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024ee2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024ee6:	930f      	str	r3, [sp, #60]	; 0x3c
 8024ee8:	e709      	b.n	8024cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024eea:	f112 0901 	adds.w	r9, r2, #1
 8024eee:	f53f af7d 	bmi.w	8024dec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024ef2:	454b      	cmp	r3, r9
 8024ef4:	f6ff af7a 	blt.w	8024dec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024ef8:	f11c 0901 	adds.w	r9, ip, #1
 8024efc:	f53f af76 	bmi.w	8024dec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024f00:	45ce      	cmp	lr, r9
 8024f02:	f6ff af73 	blt.w	8024dec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024f06:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024f08:	9202      	str	r2, [sp, #8]
 8024f0a:	b21b      	sxth	r3, r3
 8024f0c:	fa0f f28e 	sxth.w	r2, lr
 8024f10:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024f14:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024f18:	9201      	str	r2, [sp, #4]
 8024f1a:	9300      	str	r3, [sp, #0]
 8024f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024f1e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024f20:	4633      	mov	r3, r6
 8024f22:	4639      	mov	r1, r7
 8024f24:	f7ff fd70 	bl	8024a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024f28:	e760      	b.n	8024dec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024f2a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024f2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024f32:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024f36:	1429      	asrs	r1, r5, #16
 8024f38:	fb03 2101 	mla	r1, r3, r1, r2
 8024f3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024f3e:	440a      	add	r2, r1
 8024f40:	5c61      	ldrb	r1, [r4, r1]
 8024f42:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8024f46:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024f4a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024f4e:	f1bc 0f00 	cmp.w	ip, #0
 8024f52:	f000 808c 	beq.w	802506e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8024f56:	7857      	ldrb	r7, [r2, #1]
 8024f58:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024f5c:	9413      	str	r4, [sp, #76]	; 0x4c
 8024f5e:	b140      	cbz	r0, 8024f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024f60:	18d7      	adds	r7, r2, r3
 8024f62:	5cd3      	ldrb	r3, [r2, r3]
 8024f64:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024f68:	9310      	str	r3, [sp, #64]	; 0x40
 8024f6a:	787b      	ldrb	r3, [r7, #1]
 8024f6c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024f70:	9314      	str	r3, [sp, #80]	; 0x50
 8024f72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024f74:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024f76:	fb1c f200 	smulbb	r2, ip, r0
 8024f7a:	041f      	lsls	r7, r3, #16
 8024f7c:	10d2      	asrs	r2, r2, #3
 8024f7e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024f82:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8024f86:	431f      	orrs	r7, r3
 8024f88:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8024f8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8024f8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024f90:	041b      	lsls	r3, r3, #16
 8024f92:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8024f96:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024f9a:	ea43 030b 	orr.w	r3, r3, fp
 8024f9e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024fa0:	4353      	muls	r3, r2
 8024fa2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024fa6:	fb04 3707 	mla	r7, r4, r7, r3
 8024faa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024fae:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8024fb2:	ea43 0b01 	orr.w	fp, r3, r1
 8024fb6:	f1c0 0110 	rsb	r1, r0, #16
 8024fba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024fbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024fbe:	eba1 0c0c 	sub.w	ip, r1, ip
 8024fc2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024fc6:	fb0c 770b 	mla	r7, ip, fp, r7
 8024fca:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024fce:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8024fd2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024fd6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024fda:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024fde:	fb02 770c 	mla	r7, r2, ip, r7
 8024fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024fe4:	0d79      	lsrs	r1, r7, #21
 8024fe6:	097f      	lsrs	r7, r7, #5
 8024fe8:	8812      	ldrh	r2, [r2, #0]
 8024fea:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024fee:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024ff2:	430f      	orrs	r7, r1
 8024ff4:	b2bb      	uxth	r3, r7
 8024ff6:	1211      	asrs	r1, r2, #8
 8024ff8:	1218      	asrs	r0, r3, #8
 8024ffa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024ffe:	fb11 f104 	smulbb	r1, r1, r4
 8025002:	10d7      	asrs	r7, r2, #3
 8025004:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025008:	00d2      	lsls	r2, r2, #3
 802500a:	fb00 1009 	mla	r0, r0, r9, r1
 802500e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025012:	10d9      	asrs	r1, r3, #3
 8025014:	b2d2      	uxtb	r2, r2
 8025016:	00db      	lsls	r3, r3, #3
 8025018:	fb17 f704 	smulbb	r7, r7, r4
 802501c:	fb12 f204 	smulbb	r2, r2, r4
 8025020:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025024:	b2db      	uxtb	r3, r3
 8025026:	b280      	uxth	r0, r0
 8025028:	fb01 7109 	mla	r1, r1, r9, r7
 802502c:	fb03 2309 	mla	r3, r3, r9, r2
 8025030:	b29b      	uxth	r3, r3
 8025032:	b289      	uxth	r1, r1
 8025034:	1c42      	adds	r2, r0, #1
 8025036:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802503a:	1c4f      	adds	r7, r1, #1
 802503c:	1c5a      	adds	r2, r3, #1
 802503e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025042:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8025046:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802504a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802504e:	0949      	lsrs	r1, r1, #5
 8025050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025052:	4310      	orrs	r0, r2
 8025054:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025058:	4308      	orrs	r0, r1
 802505a:	f823 0b02 	strh.w	r0, [r3], #2
 802505e:	930e      	str	r3, [sp, #56]	; 0x38
 8025060:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025062:	449a      	add	sl, r3
 8025064:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025066:	f10e 3eff 	add.w	lr, lr, #4294967295
 802506a:	441d      	add	r5, r3
 802506c:	e6ed      	b.n	8024e4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 802506e:	2800      	cmp	r0, #0
 8025070:	f43f af7f 	beq.w	8024f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025074:	5cd3      	ldrb	r3, [r2, r3]
 8025076:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802507a:	9310      	str	r3, [sp, #64]	; 0x40
 802507c:	e779      	b.n	8024f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802507e:	b019      	add	sp, #100	; 0x64
 8025080:	ecbd 8b08 	vpop	{d8-d11}
 8025084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802508c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8025090:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8025094:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025098:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 802509c:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80250a0:	8808      	ldrh	r0, [r1, #0]
 80250a2:	fb06 570e 	mla	r7, r6, lr, r5
 80250a6:	2e00      	cmp	r6, #0
 80250a8:	eb02 0807 	add.w	r8, r2, r7
 80250ac:	db38      	blt.n	8025120 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80250ae:	45b1      	cmp	r9, r6
 80250b0:	dd36      	ble.n	8025120 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80250b2:	2d00      	cmp	r5, #0
 80250b4:	db32      	blt.n	802511c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80250b6:	45ae      	cmp	lr, r5
 80250b8:	dd30      	ble.n	802511c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80250ba:	5dd2      	ldrb	r2, [r2, r7]
 80250bc:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80250c0:	1c6a      	adds	r2, r5, #1
 80250c2:	d430      	bmi.n	8025126 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80250c4:	4596      	cmp	lr, r2
 80250c6:	dd2e      	ble.n	8025126 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80250c8:	b36c      	cbz	r4, 8025126 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80250ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 80250ce:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80250d2:	3601      	adds	r6, #1
 80250d4:	d42b      	bmi.n	802512e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80250d6:	45b1      	cmp	r9, r6
 80250d8:	dd29      	ble.n	802512e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80250da:	f1bc 0f00 	cmp.w	ip, #0
 80250de:	d028      	beq.n	8025132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 80250e0:	2d00      	cmp	r5, #0
 80250e2:	db22      	blt.n	802512a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80250e4:	45ae      	cmp	lr, r5
 80250e6:	dd20      	ble.n	802512a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 80250e8:	f818 600e 	ldrb.w	r6, [r8, lr]
 80250ec:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 80250f0:	3501      	adds	r5, #1
 80250f2:	d407      	bmi.n	8025104 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80250f4:	45ae      	cmp	lr, r5
 80250f6:	dd05      	ble.n	8025104 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80250f8:	b134      	cbz	r4, 8025108 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80250fa:	44c6      	add	lr, r8
 80250fc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025100:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8025104:	2c0f      	cmp	r4, #15
 8025106:	d802      	bhi.n	802510e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8025108:	f1bc 0f0f 	cmp.w	ip, #15
 802510c:	d914      	bls.n	8025138 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 802510e:	4b26      	ldr	r3, [pc, #152]	; (80251a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8025110:	4a26      	ldr	r2, [pc, #152]	; (80251ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8025112:	4827      	ldr	r0, [pc, #156]	; (80251b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8025114:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8025118:	f009 f87c 	bl	802e214 <__assert_func>
 802511c:	4607      	mov	r7, r0
 802511e:	e7cf      	b.n	80250c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8025120:	4602      	mov	r2, r0
 8025122:	4607      	mov	r7, r0
 8025124:	e7d5      	b.n	80250d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8025126:	4602      	mov	r2, r0
 8025128:	e7d3      	b.n	80250d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802512a:	4606      	mov	r6, r0
 802512c:	e7e0      	b.n	80250f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 802512e:	4606      	mov	r6, r0
 8025130:	e7e8      	b.n	8025104 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8025132:	2c0f      	cmp	r4, #15
 8025134:	d8eb      	bhi.n	802510e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8025136:	4606      	mov	r6, r0
 8025138:	043d      	lsls	r5, r7, #16
 802513a:	fb14 f30c 	smulbb	r3, r4, ip
 802513e:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8025142:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8025146:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802514a:	10db      	asrs	r3, r3, #3
 802514c:	432f      	orrs	r7, r5
 802514e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025152:	f1cc 0510 	rsb	r5, ip, #16
 8025156:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802515a:	1b2d      	subs	r5, r5, r4
 802515c:	ea4e 0202 	orr.w	r2, lr, r2
 8025160:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8025164:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8025168:	4354      	muls	r4, r2
 802516a:	fb05 4507 	mla	r5, r5, r7, r4
 802516e:	0404      	lsls	r4, r0, #16
 8025170:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8025174:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025178:	4320      	orrs	r0, r4
 802517a:	fb03 5400 	mla	r4, r3, r0, r5
 802517e:	0430      	lsls	r0, r6, #16
 8025180:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025184:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8025188:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802518c:	4330      	orrs	r0, r6
 802518e:	fb03 4000 	mla	r0, r3, r0, r4
 8025192:	0d43      	lsrs	r3, r0, #21
 8025194:	0940      	lsrs	r0, r0, #5
 8025196:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802519a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802519e:	4318      	orrs	r0, r3
 80251a0:	8008      	strh	r0, [r1, #0]
 80251a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80251a6:	bf00      	nop
 80251a8:	08033161 	.word	0x08033161
 80251ac:	080337d7 	.word	0x080337d7
 80251b0:	080331e5 	.word	0x080331e5

080251b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80251b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251b8:	ed2d 8b0a 	vpush	{d8-d12}
 80251bc:	b093      	sub	sp, #76	; 0x4c
 80251be:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80251c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80251c4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80251c6:	9108      	str	r1, [sp, #32]
 80251c8:	9306      	str	r3, [sp, #24]
 80251ca:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80251ce:	9010      	str	r0, [sp, #64]	; 0x40
 80251d0:	6850      	ldr	r0, [r2, #4]
 80251d2:	6812      	ldr	r2, [r2, #0]
 80251d4:	fb00 1303 	mla	r3, r0, r3, r1
 80251d8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80251dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80251de:	681b      	ldr	r3, [r3, #0]
 80251e0:	9307      	str	r3, [sp, #28]
 80251e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80251e4:	685f      	ldr	r7, [r3, #4]
 80251e6:	eeb0 aa40 	vmov.f32	s20, s0
 80251ea:	eef0 9a60 	vmov.f32	s19, s1
 80251ee:	eeb0 9a41 	vmov.f32	s18, s2
 80251f2:	eeb0 8a62 	vmov.f32	s16, s5
 80251f6:	eef0 8a43 	vmov.f32	s17, s6
 80251fa:	eeb0 ca44 	vmov.f32	s24, s8
 80251fe:	eef0 ba64 	vmov.f32	s23, s9
 8025202:	eeb0 ba45 	vmov.f32	s22, s10
 8025206:	3704      	adds	r7, #4
 8025208:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802520c:	9b08      	ldr	r3, [sp, #32]
 802520e:	2b00      	cmp	r3, #0
 8025210:	dc03      	bgt.n	802521a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025214:	2b00      	cmp	r3, #0
 8025216:	f340 81b2 	ble.w	802557e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802521a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802521c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025220:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025224:	1e48      	subs	r0, r1, #1
 8025226:	f102 3cff 	add.w	ip, r2, #4294967295
 802522a:	9b06      	ldr	r3, [sp, #24]
 802522c:	2b00      	cmp	r3, #0
 802522e:	f340 80a9 	ble.w	8025384 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8025232:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025236:	ea4f 4326 	mov.w	r3, r6, asr #16
 802523a:	d406      	bmi.n	802524a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802523c:	4586      	cmp	lr, r0
 802523e:	da04      	bge.n	802524a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025240:	2b00      	cmp	r3, #0
 8025242:	db02      	blt.n	802524a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025244:	4563      	cmp	r3, ip
 8025246:	f2c0 809e 	blt.w	8025386 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802524a:	f11e 0e01 	adds.w	lr, lr, #1
 802524e:	f100 808f 	bmi.w	8025370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025252:	4571      	cmp	r1, lr
 8025254:	f2c0 808c 	blt.w	8025370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025258:	3301      	adds	r3, #1
 802525a:	f100 8089 	bmi.w	8025370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802525e:	429a      	cmp	r2, r3
 8025260:	f2c0 8086 	blt.w	8025370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025264:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025268:	46c8      	mov	r8, r9
 802526a:	f1bb 0f00 	cmp.w	fp, #0
 802526e:	f340 80a6 	ble.w	80253be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8025272:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025274:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025276:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802527a:	689b      	ldr	r3, [r3, #8]
 802527c:	1422      	asrs	r2, r4, #16
 802527e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025282:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025286:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802528a:	f100 80e3 	bmi.w	8025454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802528e:	f103 3aff 	add.w	sl, r3, #4294967295
 8025292:	4552      	cmp	r2, sl
 8025294:	f280 80de 	bge.w	8025454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8025298:	f1bc 0f00 	cmp.w	ip, #0
 802529c:	f2c0 80da 	blt.w	8025454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80252a0:	f10e 3aff 	add.w	sl, lr, #4294967295
 80252a4:	45d4      	cmp	ip, sl
 80252a6:	f280 80d5 	bge.w	8025454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80252aa:	b21b      	sxth	r3, r3
 80252ac:	fb0c 2203 	mla	r2, ip, r3, r2
 80252b0:	9d07      	ldr	r5, [sp, #28]
 80252b2:	eb05 0a02 	add.w	sl, r5, r2
 80252b6:	5caa      	ldrb	r2, [r5, r2]
 80252b8:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80252bc:	2800      	cmp	r0, #0
 80252be:	f000 80c0 	beq.w	8025442 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80252c2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80252c6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80252ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80252cc:	b151      	cbz	r1, 80252e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80252ce:	eb0a 0203 	add.w	r2, sl, r3
 80252d2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80252d6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80252da:	9309      	str	r3, [sp, #36]	; 0x24
 80252dc:	7853      	ldrb	r3, [r2, #1]
 80252de:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80252e2:	930c      	str	r3, [sp, #48]	; 0x30
 80252e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80252e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80252e8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80252ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80252f0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80252f4:	ea4c 0c03 	orr.w	ip, ip, r3
 80252f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80252fa:	041b      	lsls	r3, r3, #16
 80252fc:	fb10 f201 	smulbb	r2, r0, r1
 8025300:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025304:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025308:	10d2      	asrs	r2, r2, #3
 802530a:	432b      	orrs	r3, r5
 802530c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8025310:	4353      	muls	r3, r2
 8025312:	fb0a 330c 	mla	r3, sl, ip, r3
 8025316:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802531a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802531e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025322:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025326:	f1c1 0c10 	rsb	ip, r1, #16
 802532a:	ebac 0c00 	sub.w	ip, ip, r0
 802532e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8025332:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8025336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025338:	0418      	lsls	r0, r3, #16
 802533a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802533e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025342:	4318      	orrs	r0, r3
 8025344:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025348:	fb02 c200 	mla	r2, r2, r0, ip
 802534c:	0d53      	lsrs	r3, r2, #21
 802534e:	0952      	lsrs	r2, r2, #5
 8025350:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025354:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025358:	431a      	orrs	r2, r3
 802535a:	f8a8 2000 	strh.w	r2, [r8]
 802535e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025360:	441c      	add	r4, r3
 8025362:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025364:	f108 0802 	add.w	r8, r8, #2
 8025368:	441e      	add	r6, r3
 802536a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802536e:	e77c      	b.n	802526a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025370:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025372:	441c      	add	r4, r3
 8025374:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025376:	441e      	add	r6, r3
 8025378:	9b06      	ldr	r3, [sp, #24]
 802537a:	3b01      	subs	r3, #1
 802537c:	9306      	str	r3, [sp, #24]
 802537e:	f109 0902 	add.w	r9, r9, #2
 8025382:	e752      	b.n	802522a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8025384:	d020      	beq.n	80253c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8025386:	9b06      	ldr	r3, [sp, #24]
 8025388:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802538a:	3b01      	subs	r3, #1
 802538c:	fb00 4003 	mla	r0, r0, r3, r4
 8025390:	1400      	asrs	r0, r0, #16
 8025392:	f53f af67 	bmi.w	8025264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8025396:	3901      	subs	r1, #1
 8025398:	4288      	cmp	r0, r1
 802539a:	f6bf af63 	bge.w	8025264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802539e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80253a0:	fb01 6303 	mla	r3, r1, r3, r6
 80253a4:	141b      	asrs	r3, r3, #16
 80253a6:	f53f af5d 	bmi.w	8025264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80253aa:	3a01      	subs	r2, #1
 80253ac:	4293      	cmp	r3, r2
 80253ae:	f6bf af59 	bge.w	8025264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80253b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80253b6:	46ca      	mov	sl, r9
 80253b8:	f1b8 0f00 	cmp.w	r8, #0
 80253bc:	dc67      	bgt.n	802548e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80253be:	9b06      	ldr	r3, [sp, #24]
 80253c0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80253c4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80253c8:	9b08      	ldr	r3, [sp, #32]
 80253ca:	2b00      	cmp	r3, #0
 80253cc:	f340 80d7 	ble.w	802557e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80253d0:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80253d4:	ee79 9aab 	vadd.f32	s19, s19, s23
 80253d8:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80253dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80253de:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80253e2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80253e6:	eef0 6a48 	vmov.f32	s13, s16
 80253ea:	ee69 7a27 	vmul.f32	s15, s18, s15
 80253ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80253f2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80253f6:	ee16 4a90 	vmov	r4, s13
 80253fa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80253fe:	eef0 6a68 	vmov.f32	s13, s17
 8025402:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025406:	ee18 2a10 	vmov	r2, s16
 802540a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802540e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025412:	ee18 2a90 	vmov	r2, s17
 8025416:	9329      	str	r3, [sp, #164]	; 0xa4
 8025418:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802541a:	fb92 f3f3 	sdiv	r3, r2, r3
 802541e:	932a      	str	r3, [sp, #168]	; 0xa8
 8025420:	9b08      	ldr	r3, [sp, #32]
 8025422:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025424:	3b01      	subs	r3, #1
 8025426:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802542a:	9308      	str	r3, [sp, #32]
 802542c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802542e:	bf08      	it	eq
 8025430:	4613      	moveq	r3, r2
 8025432:	ee16 6a90 	vmov	r6, s13
 8025436:	9306      	str	r3, [sp, #24]
 8025438:	eef0 8a67 	vmov.f32	s17, s15
 802543c:	eeb0 8a47 	vmov.f32	s16, s14
 8025440:	e6e4      	b.n	802520c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025442:	2900      	cmp	r1, #0
 8025444:	f43f af4e 	beq.w	80252e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8025448:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802544c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025450:	9309      	str	r3, [sp, #36]	; 0x24
 8025452:	e747      	b.n	80252e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8025454:	f112 0a01 	adds.w	sl, r2, #1
 8025458:	d481      	bmi.n	802535e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802545a:	4553      	cmp	r3, sl
 802545c:	f6ff af7f 	blt.w	802535e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025460:	f11c 0a01 	adds.w	sl, ip, #1
 8025464:	f53f af7b 	bmi.w	802535e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025468:	45d6      	cmp	lr, sl
 802546a:	f6ff af78 	blt.w	802535e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802546e:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8025472:	b21b      	sxth	r3, r3
 8025474:	fa0f f28e 	sxth.w	r2, lr
 8025478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802547c:	9201      	str	r2, [sp, #4]
 802547e:	9300      	str	r3, [sp, #0]
 8025480:	9a07      	ldr	r2, [sp, #28]
 8025482:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025484:	463b      	mov	r3, r7
 8025486:	4641      	mov	r1, r8
 8025488:	f7ff fdfe 	bl	8025088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802548c:	e767      	b.n	802535e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802548e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025490:	9d07      	ldr	r5, [sp, #28]
 8025492:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8025496:	1422      	asrs	r2, r4, #16
 8025498:	1431      	asrs	r1, r6, #16
 802549a:	fb03 2101 	mla	r1, r3, r1, r2
 802549e:	9a07      	ldr	r2, [sp, #28]
 80254a0:	440a      	add	r2, r1
 80254a2:	5c69      	ldrb	r1, [r5, r1]
 80254a4:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80254a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80254ac:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80254b0:	f1be 0f00 	cmp.w	lr, #0
 80254b4:	d05c      	beq.n	8025570 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80254b6:	f892 c001 	ldrb.w	ip, [r2, #1]
 80254ba:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80254be:	950d      	str	r5, [sp, #52]	; 0x34
 80254c0:	b150      	cbz	r0, 80254d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80254c2:	eb02 0c03 	add.w	ip, r2, r3
 80254c6:	5cd3      	ldrb	r3, [r2, r3]
 80254c8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80254cc:	930a      	str	r3, [sp, #40]	; 0x28
 80254ce:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80254d2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80254d6:	930e      	str	r3, [sp, #56]	; 0x38
 80254d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80254da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80254dc:	fb1e f200 	smulbb	r2, lr, r0
 80254e0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80254e4:	10d2      	asrs	r2, r2, #3
 80254e6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80254ea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80254ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80254f2:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80254f6:	9311      	str	r3, [sp, #68]	; 0x44
 80254f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80254fa:	041b      	lsls	r3, r3, #16
 80254fc:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8025500:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025504:	ea43 030b 	orr.w	r3, r3, fp
 8025508:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802550a:	4353      	muls	r3, r2
 802550c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025510:	fb05 3c0c 	mla	ip, r5, ip, r3
 8025514:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025518:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 802551c:	ea43 0b01 	orr.w	fp, r3, r1
 8025520:	f1c0 0110 	rsb	r1, r0, #16
 8025524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025526:	eba1 0e0e 	sub.w	lr, r1, lr
 802552a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802552e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8025532:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8025536:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 802553a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802553e:	ea4b 0e0e 	orr.w	lr, fp, lr
 8025542:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8025546:	fb02 cc0e 	mla	ip, r2, lr, ip
 802554a:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802554e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025552:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025556:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802555a:	ea43 0c0c 	orr.w	ip, r3, ip
 802555e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025560:	f82a cb02 	strh.w	ip, [sl], #2
 8025564:	441c      	add	r4, r3
 8025566:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025568:	f108 38ff 	add.w	r8, r8, #4294967295
 802556c:	441e      	add	r6, r3
 802556e:	e723      	b.n	80253b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025570:	2800      	cmp	r0, #0
 8025572:	d0b1      	beq.n	80254d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8025574:	5cd3      	ldrb	r3, [r2, r3]
 8025576:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802557a:	930a      	str	r3, [sp, #40]	; 0x28
 802557c:	e7ac      	b.n	80254d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802557e:	b013      	add	sp, #76	; 0x4c
 8025580:	ecbd 8b0a 	vpop	{d8-d12}
 8025584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025588 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8025588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802558c:	468b      	mov	fp, r1
 802558e:	8809      	ldrh	r1, [r1, #0]
 8025590:	b089      	sub	sp, #36	; 0x24
 8025592:	10cd      	asrs	r5, r1, #3
 8025594:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8025598:	ea4f 2921 	mov.w	r9, r1, asr #8
 802559c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80255a0:	00c9      	lsls	r1, r1, #3
 80255a2:	9500      	str	r5, [sp, #0]
 80255a4:	b2c9      	uxtb	r1, r1
 80255a6:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80255aa:	9101      	str	r1, [sp, #4]
 80255ac:	9900      	ldr	r1, [sp, #0]
 80255ae:	9202      	str	r2, [sp, #8]
 80255b0:	fb04 650e 	mla	r5, r4, lr, r6
 80255b4:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80255b8:	eb02 0805 	add.w	r8, r2, r5
 80255bc:	0209      	lsls	r1, r1, #8
 80255be:	9a01      	ldr	r2, [sp, #4]
 80255c0:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80255c4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80255c8:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80255cc:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 80255d0:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80255d4:	4311      	orrs	r1, r2
 80255d6:	2c00      	cmp	r4, #0
 80255d8:	9107      	str	r1, [sp, #28]
 80255da:	db43      	blt.n	8025664 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 80255dc:	45a2      	cmp	sl, r4
 80255de:	dd41      	ble.n	8025664 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 80255e0:	2e00      	cmp	r6, #0
 80255e2:	db3d      	blt.n	8025660 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 80255e4:	45b6      	cmp	lr, r6
 80255e6:	dd3b      	ble.n	8025660 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 80255e8:	9a02      	ldr	r2, [sp, #8]
 80255ea:	5d55      	ldrb	r5, [r2, r5]
 80255ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80255f0:	441d      	add	r5, r3
 80255f2:	1c72      	adds	r2, r6, #1
 80255f4:	d439      	bmi.n	802566a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 80255f6:	4596      	cmp	lr, r2
 80255f8:	dd37      	ble.n	802566a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 80255fa:	2f00      	cmp	r7, #0
 80255fc:	d035      	beq.n	802566a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 80255fe:	f898 1001 	ldrb.w	r1, [r8, #1]
 8025602:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025606:	4419      	add	r1, r3
 8025608:	3401      	adds	r4, #1
 802560a:	d432      	bmi.n	8025672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 802560c:	45a2      	cmp	sl, r4
 802560e:	dd30      	ble.n	8025672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8025610:	b378      	cbz	r0, 8025672 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8025612:	2e00      	cmp	r6, #0
 8025614:	db2b      	blt.n	802566e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8025616:	45b6      	cmp	lr, r6
 8025618:	dd29      	ble.n	802566e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 802561a:	f818 400e 	ldrb.w	r4, [r8, lr]
 802561e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025622:	441c      	add	r4, r3
 8025624:	3601      	adds	r6, #1
 8025626:	d427      	bmi.n	8025678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8025628:	45b6      	cmp	lr, r6
 802562a:	dd25      	ble.n	8025678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 802562c:	b327      	cbz	r7, 8025678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 802562e:	44c6      	add	lr, r8
 8025630:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025634:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025638:	4413      	add	r3, r2
 802563a:	782a      	ldrb	r2, [r5, #0]
 802563c:	9202      	str	r2, [sp, #8]
 802563e:	780a      	ldrb	r2, [r1, #0]
 8025640:	9203      	str	r2, [sp, #12]
 8025642:	7822      	ldrb	r2, [r4, #0]
 8025644:	9204      	str	r2, [sp, #16]
 8025646:	2f0f      	cmp	r7, #15
 8025648:	781a      	ldrb	r2, [r3, #0]
 802564a:	9205      	str	r2, [sp, #20]
 802564c:	d801      	bhi.n	8025652 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 802564e:	280f      	cmp	r0, #15
 8025650:	d914      	bls.n	802567c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8025652:	4b3f      	ldr	r3, [pc, #252]	; (8025750 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8025654:	4a3f      	ldr	r2, [pc, #252]	; (8025754 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8025656:	4840      	ldr	r0, [pc, #256]	; (8025758 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8025658:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802565c:	f008 fdda 	bl	802e214 <__assert_func>
 8025660:	ad07      	add	r5, sp, #28
 8025662:	e7c6      	b.n	80255f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8025664:	a907      	add	r1, sp, #28
 8025666:	460d      	mov	r5, r1
 8025668:	e7ce      	b.n	8025608 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 802566a:	a907      	add	r1, sp, #28
 802566c:	e7cc      	b.n	8025608 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 802566e:	ac07      	add	r4, sp, #28
 8025670:	e7d8      	b.n	8025624 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8025672:	ab07      	add	r3, sp, #28
 8025674:	461c      	mov	r4, r3
 8025676:	e7e0      	b.n	802563a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8025678:	ab07      	add	r3, sp, #28
 802567a:	e7de      	b.n	802563a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 802567c:	b2ba      	uxth	r2, r7
 802567e:	b280      	uxth	r0, r0
 8025680:	fb02 fa00 	mul.w	sl, r2, r0
 8025684:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025688:	0112      	lsls	r2, r2, #4
 802568a:	b280      	uxth	r0, r0
 802568c:	f891 8002 	ldrb.w	r8, [r1, #2]
 8025690:	7849      	ldrb	r1, [r1, #1]
 8025692:	78ae      	ldrb	r6, [r5, #2]
 8025694:	786d      	ldrb	r5, [r5, #1]
 8025696:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 802569a:	eba2 020a 	sub.w	r2, r2, sl
 802569e:	b292      	uxth	r2, r2
 80256a0:	ebae 0e00 	sub.w	lr, lr, r0
 80256a4:	fa1f fe8e 	uxth.w	lr, lr
 80256a8:	4351      	muls	r1, r2
 80256aa:	fb02 f808 	mul.w	r8, r2, r8
 80256ae:	fb0e 8806 	mla	r8, lr, r6, r8
 80256b2:	fb0e 1505 	mla	r5, lr, r5, r1
 80256b6:	78a6      	ldrb	r6, [r4, #2]
 80256b8:	7861      	ldrb	r1, [r4, #1]
 80256ba:	fa1f f78c 	uxth.w	r7, ip
 80256be:	fb00 8806 	mla	r8, r0, r6, r8
 80256c2:	fb00 5501 	mla	r5, r0, r1, r5
 80256c6:	789e      	ldrb	r6, [r3, #2]
 80256c8:	7859      	ldrb	r1, [r3, #1]
 80256ca:	9b00      	ldr	r3, [sp, #0]
 80256cc:	ea6f 0c0c 	mvn.w	ip, ip
 80256d0:	fa5f fc8c 	uxtb.w	ip, ip
 80256d4:	fb0a 5101 	mla	r1, sl, r1, r5
 80256d8:	fb13 f50c 	smulbb	r5, r3, ip
 80256dc:	9b03      	ldr	r3, [sp, #12]
 80256de:	435a      	muls	r2, r3
 80256e0:	9b02      	ldr	r3, [sp, #8]
 80256e2:	fb0e 2203 	mla	r2, lr, r3, r2
 80256e6:	9b04      	ldr	r3, [sp, #16]
 80256e8:	fb00 2003 	mla	r0, r0, r3, r2
 80256ec:	9b05      	ldr	r3, [sp, #20]
 80256ee:	fb0a 8606 	mla	r6, sl, r6, r8
 80256f2:	fb19 f90c 	smulbb	r9, r9, ip
 80256f6:	fb0a 0a03 	mla	sl, sl, r3, r0
 80256fa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80256fe:	9b01      	ldr	r3, [sp, #4]
 8025700:	fb06 9607 	mla	r6, r6, r7, r9
 8025704:	b2b6      	uxth	r6, r6
 8025706:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802570a:	fb13 fc0c 	smulbb	ip, r3, ip
 802570e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025712:	fb01 5107 	mla	r1, r1, r7, r5
 8025716:	f106 0901 	add.w	r9, r6, #1
 802571a:	fb0a c707 	mla	r7, sl, r7, ip
 802571e:	b2bf      	uxth	r7, r7
 8025720:	b289      	uxth	r1, r1
 8025722:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8025726:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 802572a:	1c4d      	adds	r5, r1, #1
 802572c:	1c7e      	adds	r6, r7, #1
 802572e:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8025732:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8025736:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802573a:	0949      	lsrs	r1, r1, #5
 802573c:	ea46 0609 	orr.w	r6, r6, r9
 8025740:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025744:	430e      	orrs	r6, r1
 8025746:	f8ab 6000 	strh.w	r6, [fp]
 802574a:	b009      	add	sp, #36	; 0x24
 802574c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025750:	08033161 	.word	0x08033161
 8025754:	0803372e 	.word	0x0803372e
 8025758:	080331e5 	.word	0x080331e5

0802575c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025760:	ed2d 8b08 	vpush	{d8-d11}
 8025764:	b095      	sub	sp, #84	; 0x54
 8025766:	eeb0 aa40 	vmov.f32	s20, s0
 802576a:	9212      	str	r2, [sp, #72]	; 0x48
 802576c:	9309      	str	r3, [sp, #36]	; 0x24
 802576e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025770:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8025774:	930f      	str	r3, [sp, #60]	; 0x3c
 8025776:	910e      	str	r1, [sp, #56]	; 0x38
 8025778:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802577c:	9013      	str	r0, [sp, #76]	; 0x4c
 802577e:	6850      	ldr	r0, [r2, #4]
 8025780:	6812      	ldr	r2, [r2, #0]
 8025782:	fb00 1303 	mla	r3, r0, r3, r1
 8025786:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802578a:	930a      	str	r3, [sp, #40]	; 0x28
 802578c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802578e:	681b      	ldr	r3, [r3, #0]
 8025790:	930d      	str	r3, [sp, #52]	; 0x34
 8025792:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025794:	685c      	ldr	r4, [r3, #4]
 8025796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025798:	43db      	mvns	r3, r3
 802579a:	b2db      	uxtb	r3, r3
 802579c:	eef0 9a60 	vmov.f32	s19, s1
 80257a0:	eeb0 9a41 	vmov.f32	s18, s2
 80257a4:	eeb0 8a62 	vmov.f32	s16, s5
 80257a8:	eef0 8a43 	vmov.f32	s17, s6
 80257ac:	eef0 ba44 	vmov.f32	s23, s8
 80257b0:	eeb0 ba64 	vmov.f32	s22, s9
 80257b4:	eef0 aa45 	vmov.f32	s21, s10
 80257b8:	3404      	adds	r4, #4
 80257ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80257bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80257be:	2b00      	cmp	r3, #0
 80257c0:	dc03      	bgt.n	80257ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80257c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80257c4:	2b00      	cmp	r3, #0
 80257c6:	f340 8255 	ble.w	8025c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80257ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80257cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80257d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80257d4:	1e48      	subs	r0, r1, #1
 80257d6:	1e55      	subs	r5, r2, #1
 80257d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257da:	2b00      	cmp	r3, #0
 80257dc:	f340 80f9 	ble.w	80259d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80257e0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80257e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80257e4:	1436      	asrs	r6, r6, #16
 80257e6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80257ea:	d406      	bmi.n	80257fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80257ec:	4286      	cmp	r6, r0
 80257ee:	da04      	bge.n	80257fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80257f0:	2b00      	cmp	r3, #0
 80257f2:	db02      	blt.n	80257fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80257f4:	42ab      	cmp	r3, r5
 80257f6:	f2c0 80ed 	blt.w	80259d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80257fa:	3601      	adds	r6, #1
 80257fc:	f100 80da 	bmi.w	80259b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025800:	42b1      	cmp	r1, r6
 8025802:	f2c0 80d7 	blt.w	80259b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025806:	3301      	adds	r3, #1
 8025808:	f100 80d4 	bmi.w	80259b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802580c:	429a      	cmp	r2, r3
 802580e:	f2c0 80d1 	blt.w	80259b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025814:	9311      	str	r3, [sp, #68]	; 0x44
 8025816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025818:	930c      	str	r3, [sp, #48]	; 0x30
 802581a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802581c:	2b00      	cmp	r3, #0
 802581e:	f340 80fa 	ble.w	8025a16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8025822:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8025824:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025826:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025828:	68c6      	ldr	r6, [r0, #12]
 802582a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802582c:	141d      	asrs	r5, r3, #16
 802582e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025832:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025834:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025836:	1400      	asrs	r0, r0, #16
 8025838:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802583c:	6892      	ldr	r2, [r2, #8]
 802583e:	f100 813e 	bmi.w	8025abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025842:	1e57      	subs	r7, r2, #1
 8025844:	42b8      	cmp	r0, r7
 8025846:	f280 813a 	bge.w	8025abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802584a:	2d00      	cmp	r5, #0
 802584c:	f2c0 8137 	blt.w	8025abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025850:	1e77      	subs	r7, r6, #1
 8025852:	42bd      	cmp	r5, r7
 8025854:	f280 8133 	bge.w	8025abe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025858:	b212      	sxth	r2, r2
 802585a:	fb05 0002 	mla	r0, r5, r2, r0
 802585e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025860:	f815 a000 	ldrb.w	sl, [r5, r0]
 8025864:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8025868:	182e      	adds	r6, r5, r0
 802586a:	eb04 050a 	add.w	r5, r4, sl
 802586e:	2b00      	cmp	r3, #0
 8025870:	f000 8117 	beq.w	8025aa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8025874:	f896 c001 	ldrb.w	ip, [r6, #1]
 8025878:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802587c:	44a4      	add	ip, r4
 802587e:	2900      	cmp	r1, #0
 8025880:	f000 8117 	beq.w	8025ab2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8025884:	18b0      	adds	r0, r6, r2
 8025886:	5cb2      	ldrb	r2, [r6, r2]
 8025888:	7840      	ldrb	r0, [r0, #1]
 802588a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802588e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025892:	4422      	add	r2, r4
 8025894:	4420      	add	r0, r4
 8025896:	b29b      	uxth	r3, r3
 8025898:	b289      	uxth	r1, r1
 802589a:	fb03 f901 	mul.w	r9, r3, r1
 802589e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80258a2:	011b      	lsls	r3, r3, #4
 80258a4:	b289      	uxth	r1, r1
 80258a6:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80258aa:	f895 b002 	ldrb.w	fp, [r5, #2]
 80258ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80258b0:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80258b4:	f8b6 e000 	ldrh.w	lr, [r6]
 80258b8:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80258bc:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80258c0:	eba3 0309 	sub.w	r3, r3, r9
 80258c4:	b29b      	uxth	r3, r3
 80258c6:	eba8 0801 	sub.w	r8, r8, r1
 80258ca:	fa1f f888 	uxth.w	r8, r8
 80258ce:	435f      	muls	r7, r3
 80258d0:	fb08 770b 	mla	r7, r8, fp, r7
 80258d4:	f892 b002 	ldrb.w	fp, [r2, #2]
 80258d8:	9310      	str	r3, [sp, #64]	; 0x40
 80258da:	fb01 770b 	mla	r7, r1, fp, r7
 80258de:	f890 b002 	ldrb.w	fp, [r0, #2]
 80258e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80258e4:	fb09 770b 	mla	r7, r9, fp, r7
 80258e8:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80258ec:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80258f0:	fb1b fb03 	smulbb	fp, fp, r3
 80258f4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80258f8:	fb07 b706 	mla	r7, r7, r6, fp
 80258fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80258fe:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025902:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025906:	f89c c000 	ldrb.w	ip, [ip]
 802590a:	435d      	muls	r5, r3
 802590c:	fb08 550b 	mla	r5, r8, fp, r5
 8025910:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025916:	fb01 550b 	mla	r5, r1, fp, r5
 802591a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802591e:	fb09 550b 	mla	r5, r9, fp, r5
 8025922:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8025926:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802592a:	fb1b fb03 	smulbb	fp, fp, r3
 802592e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025930:	fb03 f30c 	mul.w	r3, r3, ip
 8025934:	f892 c000 	ldrb.w	ip, [r2]
 8025938:	fb08 330a 	mla	r3, r8, sl, r3
 802593c:	fb01 330c 	mla	r3, r1, ip, r3
 8025940:	f890 c000 	ldrb.w	ip, [r0]
 8025944:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025948:	fb09 3c0c 	mla	ip, r9, ip, r3
 802594c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802594e:	fa5f fe8e 	uxtb.w	lr, lr
 8025952:	b2bf      	uxth	r7, r7
 8025954:	fb1e fe03 	smulbb	lr, lr, r3
 8025958:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802595c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025960:	fb05 b506 	mla	r5, r5, r6, fp
 8025964:	1c7b      	adds	r3, r7, #1
 8025966:	fb0c e606 	mla	r6, ip, r6, lr
 802596a:	b2ad      	uxth	r5, r5
 802596c:	b2b6      	uxth	r6, r6
 802596e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8025972:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8025976:	f105 0b01 	add.w	fp, r5, #1
 802597a:	1c77      	adds	r7, r6, #1
 802597c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8025980:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025984:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025988:	096d      	lsrs	r5, r5, #5
 802598a:	431f      	orrs	r7, r3
 802598c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025992:	433d      	orrs	r5, r7
 8025994:	801d      	strh	r5, [r3, #0]
 8025996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025998:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802599a:	3302      	adds	r3, #2
 802599c:	930c      	str	r3, [sp, #48]	; 0x30
 802599e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80259a0:	4413      	add	r3, r2
 80259a2:	9327      	str	r3, [sp, #156]	; 0x9c
 80259a4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80259a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80259a8:	4413      	add	r3, r2
 80259aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80259ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80259ae:	3b01      	subs	r3, #1
 80259b0:	9311      	str	r3, [sp, #68]	; 0x44
 80259b2:	e732      	b.n	802581a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80259b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80259b6:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80259b8:	4433      	add	r3, r6
 80259ba:	9327      	str	r3, [sp, #156]	; 0x9c
 80259bc:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80259be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80259c0:	4433      	add	r3, r6
 80259c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80259c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259c6:	3b01      	subs	r3, #1
 80259c8:	9309      	str	r3, [sp, #36]	; 0x24
 80259ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80259cc:	3302      	adds	r3, #2
 80259ce:	930a      	str	r3, [sp, #40]	; 0x28
 80259d0:	e702      	b.n	80257d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80259d2:	d027      	beq.n	8025a24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80259d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259d6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80259d8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80259da:	3b01      	subs	r3, #1
 80259dc:	fb00 5003 	mla	r0, r0, r3, r5
 80259e0:	1400      	asrs	r0, r0, #16
 80259e2:	f53f af16 	bmi.w	8025812 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80259e6:	3901      	subs	r1, #1
 80259e8:	4288      	cmp	r0, r1
 80259ea:	f6bf af12 	bge.w	8025812 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80259ee:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80259f0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80259f2:	fb01 0303 	mla	r3, r1, r3, r0
 80259f6:	141b      	asrs	r3, r3, #16
 80259f8:	f53f af0b 	bmi.w	8025812 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80259fc:	3a01      	subs	r2, #1
 80259fe:	4293      	cmp	r3, r2
 8025a00:	f6bf af07 	bge.w	8025812 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a06:	9311      	str	r3, [sp, #68]	; 0x44
 8025a08:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8025a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a0e:	930c      	str	r3, [sp, #48]	; 0x30
 8025a10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025a12:	2b00      	cmp	r3, #0
 8025a14:	dc70      	bgt.n	8025af8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025a1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025a1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025a22:	930a      	str	r3, [sp, #40]	; 0x28
 8025a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025a26:	2b00      	cmp	r3, #0
 8025a28:	f340 8124 	ble.w	8025c74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8025a2c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025a34:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025a38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025a3a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025a3e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025a42:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025a46:	eef0 6a48 	vmov.f32	s13, s16
 8025a4a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025a4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a52:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025a56:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8025a5a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025a5e:	eef0 6a68 	vmov.f32	s13, s17
 8025a62:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025a66:	ee18 2a10 	vmov	r2, s16
 8025a6a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a72:	ee18 2a90 	vmov	r2, s17
 8025a76:	9329      	str	r3, [sp, #164]	; 0xa4
 8025a78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a7e:	932a      	str	r3, [sp, #168]	; 0xa8
 8025a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025a82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025a84:	3b01      	subs	r3, #1
 8025a86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a8a:	930e      	str	r3, [sp, #56]	; 0x38
 8025a8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025a8e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8025a92:	bf08      	it	eq
 8025a94:	4613      	moveq	r3, r2
 8025a96:	9309      	str	r3, [sp, #36]	; 0x24
 8025a98:	eef0 8a67 	vmov.f32	s17, s15
 8025a9c:	eeb0 8a47 	vmov.f32	s16, s14
 8025aa0:	e68c      	b.n	80257bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8025aa2:	b149      	cbz	r1, 8025ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8025aa4:	5cb2      	ldrb	r2, [r6, r2]
 8025aa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025aaa:	4422      	add	r2, r4
 8025aac:	4628      	mov	r0, r5
 8025aae:	46ac      	mov	ip, r5
 8025ab0:	e6f1      	b.n	8025896 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8025ab2:	4628      	mov	r0, r5
 8025ab4:	462a      	mov	r2, r5
 8025ab6:	e6ee      	b.n	8025896 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8025ab8:	4628      	mov	r0, r5
 8025aba:	462a      	mov	r2, r5
 8025abc:	e7f7      	b.n	8025aae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8025abe:	1c47      	adds	r7, r0, #1
 8025ac0:	f53f af69 	bmi.w	8025996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025ac4:	42ba      	cmp	r2, r7
 8025ac6:	f6ff af66 	blt.w	8025996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025aca:	1c6f      	adds	r7, r5, #1
 8025acc:	f53f af63 	bmi.w	8025996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025ad0:	42be      	cmp	r6, r7
 8025ad2:	f6ff af60 	blt.w	8025996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025ad6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025ad8:	9002      	str	r0, [sp, #8]
 8025ada:	b236      	sxth	r6, r6
 8025adc:	b212      	sxth	r2, r2
 8025ade:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8025ae2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8025ae6:	9200      	str	r2, [sp, #0]
 8025ae8:	9601      	str	r6, [sp, #4]
 8025aea:	4623      	mov	r3, r4
 8025aec:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8025af0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025af2:	f7ff fd49 	bl	8025588 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8025af6:	e74e      	b.n	8025996 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025af8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025afa:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025afc:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8025afe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025b00:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025b04:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025b06:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025b0a:	142d      	asrs	r5, r5, #16
 8025b0c:	1400      	asrs	r0, r0, #16
 8025b0e:	fb02 5000 	mla	r0, r2, r0, r5
 8025b12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025b14:	f815 9000 	ldrb.w	r9, [r5, r0]
 8025b18:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025b1c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025b20:	182e      	adds	r6, r5, r0
 8025b22:	eb04 0509 	add.w	r5, r4, r9
 8025b26:	2b00      	cmp	r3, #0
 8025b28:	f000 8096 	beq.w	8025c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8025b2c:	7877      	ldrb	r7, [r6, #1]
 8025b2e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025b32:	4427      	add	r7, r4
 8025b34:	2900      	cmp	r1, #0
 8025b36:	f000 8097 	beq.w	8025c68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8025b3a:	18b0      	adds	r0, r6, r2
 8025b3c:	5cb2      	ldrb	r2, [r6, r2]
 8025b3e:	7840      	ldrb	r0, [r0, #1]
 8025b40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025b44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025b48:	4422      	add	r2, r4
 8025b4a:	4420      	add	r0, r4
 8025b4c:	b29b      	uxth	r3, r3
 8025b4e:	b289      	uxth	r1, r1
 8025b50:	fb03 f801 	mul.w	r8, r3, r1
 8025b54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025b56:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025b5a:	f8b6 c000 	ldrh.w	ip, [r6]
 8025b5e:	78be      	ldrb	r6, [r7, #2]
 8025b60:	f814 9009 	ldrb.w	r9, [r4, r9]
 8025b64:	011b      	lsls	r3, r3, #4
 8025b66:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025b6a:	b289      	uxth	r1, r1
 8025b6c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025b70:	eba3 0308 	sub.w	r3, r3, r8
 8025b74:	b29b      	uxth	r3, r3
 8025b76:	ebae 0e01 	sub.w	lr, lr, r1
 8025b7a:	fa1f fe8e 	uxth.w	lr, lr
 8025b7e:	435e      	muls	r6, r3
 8025b80:	fb0e 660b 	mla	r6, lr, fp, r6
 8025b84:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025b88:	9310      	str	r3, [sp, #64]	; 0x40
 8025b8a:	fb01 660b 	mla	r6, r1, fp, r6
 8025b8e:	f890 b002 	ldrb.w	fp, [r0, #2]
 8025b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b94:	fb08 660b 	mla	r6, r8, fp, r6
 8025b98:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8025b9c:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8025ba0:	fb1b fb03 	smulbb	fp, fp, r3
 8025ba4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025ba8:	fb06 b60a 	mla	r6, r6, sl, fp
 8025bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025bae:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025bb2:	787d      	ldrb	r5, [r7, #1]
 8025bb4:	783f      	ldrb	r7, [r7, #0]
 8025bb6:	435d      	muls	r5, r3
 8025bb8:	fb0e 550b 	mla	r5, lr, fp, r5
 8025bbc:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025bc2:	fb01 550b 	mla	r5, r1, fp, r5
 8025bc6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025bca:	fb08 550b 	mla	r5, r8, fp, r5
 8025bce:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8025bd2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025bd6:	fb1b fb03 	smulbb	fp, fp, r3
 8025bda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025bdc:	437b      	muls	r3, r7
 8025bde:	7817      	ldrb	r7, [r2, #0]
 8025be0:	fb0e 3309 	mla	r3, lr, r9, r3
 8025be4:	fb01 3307 	mla	r3, r1, r7, r3
 8025be8:	7807      	ldrb	r7, [r0, #0]
 8025bea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025bee:	fb08 3707 	mla	r7, r8, r7, r3
 8025bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025bf4:	fa5f fc8c 	uxtb.w	ip, ip
 8025bf8:	fb1c fc03 	smulbb	ip, ip, r3
 8025bfc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025c00:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025c04:	fb05 b50a 	mla	r5, r5, sl, fp
 8025c08:	fb07 c70a 	mla	r7, r7, sl, ip
 8025c0c:	b2b6      	uxth	r6, r6
 8025c0e:	b2ad      	uxth	r5, r5
 8025c10:	b2bf      	uxth	r7, r7
 8025c12:	1c73      	adds	r3, r6, #1
 8025c14:	1c7a      	adds	r2, r7, #1
 8025c16:	f105 0b01 	add.w	fp, r5, #1
 8025c1a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025c1e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025c22:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025c26:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025c2a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8025c2e:	096d      	lsrs	r5, r5, #5
 8025c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c32:	4316      	orrs	r6, r2
 8025c34:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025c38:	432e      	orrs	r6, r5
 8025c3a:	f823 6b02 	strh.w	r6, [r3], #2
 8025c3e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025c40:	930c      	str	r3, [sp, #48]	; 0x30
 8025c42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025c44:	4413      	add	r3, r2
 8025c46:	9327      	str	r3, [sp, #156]	; 0x9c
 8025c48:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025c4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025c4c:	4413      	add	r3, r2
 8025c4e:	9328      	str	r3, [sp, #160]	; 0xa0
 8025c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025c52:	3b01      	subs	r3, #1
 8025c54:	9311      	str	r3, [sp, #68]	; 0x44
 8025c56:	e6db      	b.n	8025a10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8025c58:	b149      	cbz	r1, 8025c6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025c5a:	5cb2      	ldrb	r2, [r6, r2]
 8025c5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025c60:	4422      	add	r2, r4
 8025c62:	4628      	mov	r0, r5
 8025c64:	462f      	mov	r7, r5
 8025c66:	e771      	b.n	8025b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025c68:	4628      	mov	r0, r5
 8025c6a:	462a      	mov	r2, r5
 8025c6c:	e76e      	b.n	8025b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8025c6e:	4628      	mov	r0, r5
 8025c70:	462a      	mov	r2, r5
 8025c72:	e7f7      	b.n	8025c64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8025c74:	b015      	add	sp, #84	; 0x54
 8025c76:	ecbd 8b08 	vpop	{d8-d11}
 8025c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025c80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8025c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c84:	880e      	ldrh	r6, [r1, #0]
 8025c86:	b085      	sub	sp, #20
 8025c88:	0230      	lsls	r0, r6, #8
 8025c8a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8025c8e:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8025c92:	0170      	lsls	r0, r6, #5
 8025c94:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8025c98:	9101      	str	r1, [sp, #4]
 8025c9a:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8025c9e:	00f6      	lsls	r6, r6, #3
 8025ca0:	ea4b 0000 	orr.w	r0, fp, r0
 8025ca4:	b2f6      	uxtb	r6, r6
 8025ca6:	4691      	mov	r9, r2
 8025ca8:	fb05 7a0c 	mla	sl, r5, ip, r7
 8025cac:	4306      	orrs	r6, r0
 8025cae:	2d00      	cmp	r5, #0
 8025cb0:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8025cb4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8025cb8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8025cbc:	9603      	str	r6, [sp, #12]
 8025cbe:	eb09 0e0a 	add.w	lr, r9, sl
 8025cc2:	db42      	blt.n	8025d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8025cc4:	45a8      	cmp	r8, r5
 8025cc6:	dd40      	ble.n	8025d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8025cc8:	2f00      	cmp	r7, #0
 8025cca:	db3c      	blt.n	8025d46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8025ccc:	45bc      	cmp	ip, r7
 8025cce:	dd3a      	ble.n	8025d46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8025cd0:	f819 600a 	ldrb.w	r6, [r9, sl]
 8025cd4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025cd8:	441e      	add	r6, r3
 8025cda:	1c78      	adds	r0, r7, #1
 8025cdc:	d438      	bmi.n	8025d50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8025cde:	4584      	cmp	ip, r0
 8025ce0:	dd36      	ble.n	8025d50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8025ce2:	b3aa      	cbz	r2, 8025d50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8025ce4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025ce8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025cec:	4418      	add	r0, r3
 8025cee:	3501      	adds	r5, #1
 8025cf0:	d432      	bmi.n	8025d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025cf2:	45a8      	cmp	r8, r5
 8025cf4:	dd30      	ble.n	8025d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025cf6:	b37c      	cbz	r4, 8025d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025cf8:	2f00      	cmp	r7, #0
 8025cfa:	db2b      	blt.n	8025d54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8025cfc:	45bc      	cmp	ip, r7
 8025cfe:	dd29      	ble.n	8025d54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8025d00:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8025d04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025d08:	441d      	add	r5, r3
 8025d0a:	3701      	adds	r7, #1
 8025d0c:	d427      	bmi.n	8025d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025d0e:	45bc      	cmp	ip, r7
 8025d10:	dd25      	ble.n	8025d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025d12:	b322      	cbz	r2, 8025d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025d14:	44f4      	add	ip, lr
 8025d16:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025d1a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025d1e:	443b      	add	r3, r7
 8025d20:	781f      	ldrb	r7, [r3, #0]
 8025d22:	f896 9000 	ldrb.w	r9, [r6]
 8025d26:	f890 a000 	ldrb.w	sl, [r0]
 8025d2a:	f895 8000 	ldrb.w	r8, [r5]
 8025d2e:	2a0f      	cmp	r2, #15
 8025d30:	4639      	mov	r1, r7
 8025d32:	d801      	bhi.n	8025d38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8025d34:	2c0f      	cmp	r4, #15
 8025d36:	d914      	bls.n	8025d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8025d38:	4b2c      	ldr	r3, [pc, #176]	; (8025dec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8025d3a:	4a2d      	ldr	r2, [pc, #180]	; (8025df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8025d3c:	482d      	ldr	r0, [pc, #180]	; (8025df4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8025d3e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025d42:	f008 fa67 	bl	802e214 <__assert_func>
 8025d46:	ae03      	add	r6, sp, #12
 8025d48:	e7c7      	b.n	8025cda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8025d4a:	a803      	add	r0, sp, #12
 8025d4c:	4606      	mov	r6, r0
 8025d4e:	e7ce      	b.n	8025cee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025d50:	a803      	add	r0, sp, #12
 8025d52:	e7cc      	b.n	8025cee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025d54:	ad03      	add	r5, sp, #12
 8025d56:	e7d8      	b.n	8025d0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8025d58:	ab03      	add	r3, sp, #12
 8025d5a:	461d      	mov	r5, r3
 8025d5c:	e7e0      	b.n	8025d20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8025d5e:	ab03      	add	r3, sp, #12
 8025d60:	e7de      	b.n	8025d20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8025d62:	b292      	uxth	r2, r2
 8025d64:	b2a4      	uxth	r4, r4
 8025d66:	fb02 fe04 	mul.w	lr, r2, r4
 8025d6a:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8025d6e:	0112      	lsls	r2, r2, #4
 8025d70:	b2a4      	uxth	r4, r4
 8025d72:	f890 c002 	ldrb.w	ip, [r0, #2]
 8025d76:	f896 b002 	ldrb.w	fp, [r6, #2]
 8025d7a:	7840      	ldrb	r0, [r0, #1]
 8025d7c:	7876      	ldrb	r6, [r6, #1]
 8025d7e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8025d82:	eba2 020e 	sub.w	r2, r2, lr
 8025d86:	b292      	uxth	r2, r2
 8025d88:	1b3f      	subs	r7, r7, r4
 8025d8a:	b2bf      	uxth	r7, r7
 8025d8c:	fb02 fc0c 	mul.w	ip, r2, ip
 8025d90:	fb07 cc0b 	mla	ip, r7, fp, ip
 8025d94:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025d98:	fb04 cc0b 	mla	ip, r4, fp, ip
 8025d9c:	f893 b002 	ldrb.w	fp, [r3, #2]
 8025da0:	785b      	ldrb	r3, [r3, #1]
 8025da2:	fb0e cc0b 	mla	ip, lr, fp, ip
 8025da6:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8025daa:	fb02 fc0a 	mul.w	ip, r2, sl
 8025dae:	4342      	muls	r2, r0
 8025db0:	7868      	ldrb	r0, [r5, #1]
 8025db2:	fb07 cc09 	mla	ip, r7, r9, ip
 8025db6:	fb07 2206 	mla	r2, r7, r6, r2
 8025dba:	fb04 cc08 	mla	ip, r4, r8, ip
 8025dbe:	fb04 2400 	mla	r4, r4, r0, r2
 8025dc2:	fb0e cc01 	mla	ip, lr, r1, ip
 8025dc6:	fb0e 4e03 	mla	lr, lr, r3, r4
 8025dca:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025dce:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025dd2:	ea4c 0c0b 	orr.w	ip, ip, fp
 8025dd6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025dda:	9b01      	ldr	r3, [sp, #4]
 8025ddc:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025de0:	f8a3 c000 	strh.w	ip, [r3]
 8025de4:	b005      	add	sp, #20
 8025de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025dea:	bf00      	nop
 8025dec:	08033161 	.word	0x08033161
 8025df0:	0803372e 	.word	0x0803372e
 8025df4:	080331e5 	.word	0x080331e5

08025df8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025dfc:	ed2d 8b08 	vpush	{d8-d11}
 8025e00:	b08f      	sub	sp, #60	; 0x3c
 8025e02:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8025e06:	920c      	str	r2, [sp, #48]	; 0x30
 8025e08:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025e0a:	910a      	str	r1, [sp, #40]	; 0x28
 8025e0c:	9306      	str	r3, [sp, #24]
 8025e0e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025e12:	900d      	str	r0, [sp, #52]	; 0x34
 8025e14:	6850      	ldr	r0, [r2, #4]
 8025e16:	6812      	ldr	r2, [r2, #0]
 8025e18:	fb00 1303 	mla	r3, r0, r3, r1
 8025e1c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025e20:	9307      	str	r3, [sp, #28]
 8025e22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e24:	681b      	ldr	r3, [r3, #0]
 8025e26:	9308      	str	r3, [sp, #32]
 8025e28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e2a:	685c      	ldr	r4, [r3, #4]
 8025e2c:	eeb0 aa40 	vmov.f32	s20, s0
 8025e30:	eef0 9a60 	vmov.f32	s19, s1
 8025e34:	eeb0 9a41 	vmov.f32	s18, s2
 8025e38:	eeb0 8a62 	vmov.f32	s16, s5
 8025e3c:	eef0 8a43 	vmov.f32	s17, s6
 8025e40:	eef0 ba44 	vmov.f32	s23, s8
 8025e44:	eeb0 ba64 	vmov.f32	s22, s9
 8025e48:	eef0 aa45 	vmov.f32	s21, s10
 8025e4c:	3404      	adds	r4, #4
 8025e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025e50:	2b00      	cmp	r3, #0
 8025e52:	dc03      	bgt.n	8025e5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8025e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025e56:	2b00      	cmp	r3, #0
 8025e58:	f340 81d6 	ble.w	8026208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025e5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e5e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e62:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025e66:	1e48      	subs	r0, r1, #1
 8025e68:	1e56      	subs	r6, r2, #1
 8025e6a:	9b06      	ldr	r3, [sp, #24]
 8025e6c:	2b00      	cmp	r3, #0
 8025e6e:	f340 80b7 	ble.w	8025fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025e72:	ea5f 472b 	movs.w	r7, fp, asr #16
 8025e76:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025e7a:	d406      	bmi.n	8025e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025e7c:	4287      	cmp	r7, r0
 8025e7e:	da04      	bge.n	8025e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025e80:	2b00      	cmp	r3, #0
 8025e82:	db02      	blt.n	8025e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025e84:	42b3      	cmp	r3, r6
 8025e86:	f2c0 80ac 	blt.w	8025fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025e8a:	3701      	adds	r7, #1
 8025e8c:	f100 809d 	bmi.w	8025fca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025e90:	42b9      	cmp	r1, r7
 8025e92:	f2c0 809a 	blt.w	8025fca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025e96:	3301      	adds	r3, #1
 8025e98:	f100 8097 	bmi.w	8025fca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025e9c:	429a      	cmp	r2, r3
 8025e9e:	f2c0 8094 	blt.w	8025fca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025ea2:	9b06      	ldr	r3, [sp, #24]
 8025ea4:	930b      	str	r3, [sp, #44]	; 0x2c
 8025ea6:	9b07      	ldr	r3, [sp, #28]
 8025ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8025eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025eac:	2b00      	cmp	r3, #0
 8025eae:	f340 80b5 	ble.w	802601c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025eb2:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025eb4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025eb6:	68c7      	ldr	r7, [r0, #12]
 8025eb8:	6892      	ldr	r2, [r2, #8]
 8025eba:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025ebe:	ea4f 4625 	mov.w	r6, r5, asr #16
 8025ec2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025ec6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025eca:	f100 80fb 	bmi.w	80260c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025ece:	f102 3cff 	add.w	ip, r2, #4294967295
 8025ed2:	4560      	cmp	r0, ip
 8025ed4:	f280 80f6 	bge.w	80260c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025ed8:	2e00      	cmp	r6, #0
 8025eda:	f2c0 80f3 	blt.w	80260c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025ede:	f107 3cff 	add.w	ip, r7, #4294967295
 8025ee2:	4566      	cmp	r6, ip
 8025ee4:	f280 80ee 	bge.w	80260c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025ee8:	b212      	sxth	r2, r2
 8025eea:	fb06 0002 	mla	r0, r6, r2, r0
 8025eee:	9e08      	ldr	r6, [sp, #32]
 8025ef0:	1837      	adds	r7, r6, r0
 8025ef2:	5c30      	ldrb	r0, [r6, r0]
 8025ef4:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8025ef8:	eb04 0c08 	add.w	ip, r4, r8
 8025efc:	2b00      	cmp	r3, #0
 8025efe:	f000 80d3 	beq.w	80260a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025f02:	787e      	ldrb	r6, [r7, #1]
 8025f04:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025f08:	4426      	add	r6, r4
 8025f0a:	2900      	cmp	r1, #0
 8025f0c:	f000 80d4 	beq.w	80260b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8025f10:	18b8      	adds	r0, r7, r2
 8025f12:	5cba      	ldrb	r2, [r7, r2]
 8025f14:	7840      	ldrb	r0, [r0, #1]
 8025f16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025f1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025f1e:	4422      	add	r2, r4
 8025f20:	4420      	add	r0, r4
 8025f22:	b29b      	uxth	r3, r3
 8025f24:	b289      	uxth	r1, r1
 8025f26:	fb03 f901 	mul.w	r9, r3, r1
 8025f2a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025f2e:	011b      	lsls	r3, r3, #4
 8025f30:	b289      	uxth	r1, r1
 8025f32:	78b7      	ldrb	r7, [r6, #2]
 8025f34:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025f38:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025f3c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025f40:	eba3 0309 	sub.w	r3, r3, r9
 8025f44:	b29b      	uxth	r3, r3
 8025f46:	ebae 0e01 	sub.w	lr, lr, r1
 8025f4a:	fa1f fe8e 	uxth.w	lr, lr
 8025f4e:	435f      	muls	r7, r3
 8025f50:	fb0e 770a 	mla	r7, lr, sl, r7
 8025f54:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025f58:	fb01 770a 	mla	r7, r1, sl, r7
 8025f5c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025f60:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025f64:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025f68:	f896 8000 	ldrb.w	r8, [r6]
 8025f6c:	7876      	ldrb	r6, [r6, #1]
 8025f6e:	fb03 f808 	mul.w	r8, r3, r8
 8025f72:	fb0e 8807 	mla	r8, lr, r7, r8
 8025f76:	7817      	ldrb	r7, [r2, #0]
 8025f78:	fb01 8807 	mla	r8, r1, r7, r8
 8025f7c:	7807      	ldrb	r7, [r0, #0]
 8025f7e:	fb09 8707 	mla	r7, r9, r7, r8
 8025f82:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025f86:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025f8a:	ea47 070a 	orr.w	r7, r7, sl
 8025f8e:	4373      	muls	r3, r6
 8025f90:	f892 a001 	ldrb.w	sl, [r2, #1]
 8025f94:	fb0e 330c 	mla	r3, lr, ip, r3
 8025f98:	fb01 310a 	mla	r1, r1, sl, r3
 8025f9c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025fa2:	fb09 1a0a 	mla	sl, r9, sl, r1
 8025fa6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025faa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025fae:	ea47 070a 	orr.w	r7, r7, sl
 8025fb2:	801f      	strh	r7, [r3, #0]
 8025fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025fb6:	3302      	adds	r3, #2
 8025fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8025fba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025fbc:	449b      	add	fp, r3
 8025fbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025fc0:	441d      	add	r5, r3
 8025fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025fc4:	3b01      	subs	r3, #1
 8025fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8025fc8:	e76f      	b.n	8025eaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025fca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025fcc:	449b      	add	fp, r3
 8025fce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025fd0:	441d      	add	r5, r3
 8025fd2:	9b06      	ldr	r3, [sp, #24]
 8025fd4:	3b01      	subs	r3, #1
 8025fd6:	9306      	str	r3, [sp, #24]
 8025fd8:	9b07      	ldr	r3, [sp, #28]
 8025fda:	3302      	adds	r3, #2
 8025fdc:	9307      	str	r3, [sp, #28]
 8025fde:	e744      	b.n	8025e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025fe0:	d023      	beq.n	802602a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025fe2:	9b06      	ldr	r3, [sp, #24]
 8025fe4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025fe6:	3b01      	subs	r3, #1
 8025fe8:	fb00 b003 	mla	r0, r0, r3, fp
 8025fec:	1400      	asrs	r0, r0, #16
 8025fee:	f53f af58 	bmi.w	8025ea2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025ff2:	3901      	subs	r1, #1
 8025ff4:	4288      	cmp	r0, r1
 8025ff6:	f6bf af54 	bge.w	8025ea2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025ffa:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025ffc:	fb01 5303 	mla	r3, r1, r3, r5
 8026000:	141b      	asrs	r3, r3, #16
 8026002:	f53f af4e 	bmi.w	8025ea2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026006:	3a01      	subs	r2, #1
 8026008:	4293      	cmp	r3, r2
 802600a:	f6bf af4a 	bge.w	8025ea2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802600e:	9b06      	ldr	r3, [sp, #24]
 8026010:	9309      	str	r3, [sp, #36]	; 0x24
 8026012:	9b07      	ldr	r3, [sp, #28]
 8026014:	930b      	str	r3, [sp, #44]	; 0x2c
 8026016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026018:	2b00      	cmp	r3, #0
 802601a:	dc70      	bgt.n	80260fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802601c:	9b06      	ldr	r3, [sp, #24]
 802601e:	9a07      	ldr	r2, [sp, #28]
 8026020:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026024:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026028:	9307      	str	r3, [sp, #28]
 802602a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802602c:	2b00      	cmp	r3, #0
 802602e:	f340 80eb 	ble.w	8026208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8026032:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802603a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802603e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026040:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026044:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026048:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802604c:	eef0 6a48 	vmov.f32	s13, s16
 8026050:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026054:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026058:	ee37 8a48 	vsub.f32	s16, s14, s16
 802605c:	ee16 ba90 	vmov	fp, s13
 8026060:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026064:	eef0 6a68 	vmov.f32	s13, s17
 8026068:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802606c:	ee18 2a10 	vmov	r2, s16
 8026070:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026074:	fb92 f3f3 	sdiv	r3, r2, r3
 8026078:	ee18 2a90 	vmov	r2, s17
 802607c:	9323      	str	r3, [sp, #140]	; 0x8c
 802607e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026080:	fb92 f3f3 	sdiv	r3, r2, r3
 8026084:	9324      	str	r3, [sp, #144]	; 0x90
 8026086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802608a:	3b01      	subs	r3, #1
 802608c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026090:	930a      	str	r3, [sp, #40]	; 0x28
 8026092:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026094:	bf08      	it	eq
 8026096:	4613      	moveq	r3, r2
 8026098:	ee16 5a90 	vmov	r5, s13
 802609c:	9306      	str	r3, [sp, #24]
 802609e:	eef0 8a67 	vmov.f32	s17, s15
 80260a2:	eeb0 8a47 	vmov.f32	s16, s14
 80260a6:	e6d2      	b.n	8025e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80260a8:	b149      	cbz	r1, 80260be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80260aa:	5cba      	ldrb	r2, [r7, r2]
 80260ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80260b0:	4422      	add	r2, r4
 80260b2:	4660      	mov	r0, ip
 80260b4:	4666      	mov	r6, ip
 80260b6:	e734      	b.n	8025f22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80260b8:	4660      	mov	r0, ip
 80260ba:	4662      	mov	r2, ip
 80260bc:	e731      	b.n	8025f22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80260be:	4660      	mov	r0, ip
 80260c0:	4662      	mov	r2, ip
 80260c2:	e7f7      	b.n	80260b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80260c4:	f110 0c01 	adds.w	ip, r0, #1
 80260c8:	f53f af74 	bmi.w	8025fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80260cc:	4562      	cmp	r2, ip
 80260ce:	f6ff af71 	blt.w	8025fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80260d2:	f116 0c01 	adds.w	ip, r6, #1
 80260d6:	f53f af6d 	bmi.w	8025fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80260da:	4567      	cmp	r7, ip
 80260dc:	f6ff af6a 	blt.w	8025fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80260e0:	b23f      	sxth	r7, r7
 80260e2:	b212      	sxth	r2, r2
 80260e4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80260e8:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80260ec:	9200      	str	r2, [sp, #0]
 80260ee:	9701      	str	r7, [sp, #4]
 80260f0:	4623      	mov	r3, r4
 80260f2:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80260f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80260f8:	f7ff fdc2 	bl	8025c80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80260fc:	e75a      	b.n	8025fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80260fe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8026100:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8026104:	ea4f 462b 	mov.w	r6, fp, asr #16
 8026108:	1428      	asrs	r0, r5, #16
 802610a:	fb02 6000 	mla	r0, r2, r0, r6
 802610e:	9e08      	ldr	r6, [sp, #32]
 8026110:	f816 8000 	ldrb.w	r8, [r6, r0]
 8026114:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026118:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802611c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026120:	1837      	adds	r7, r6, r0
 8026122:	eb04 0c08 	add.w	ip, r4, r8
 8026126:	2b00      	cmp	r3, #0
 8026128:	d060      	beq.n	80261ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802612a:	787e      	ldrb	r6, [r7, #1]
 802612c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026130:	4426      	add	r6, r4
 8026132:	2900      	cmp	r1, #0
 8026134:	d062      	beq.n	80261fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8026136:	18b8      	adds	r0, r7, r2
 8026138:	5cba      	ldrb	r2, [r7, r2]
 802613a:	7840      	ldrb	r0, [r0, #1]
 802613c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026140:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026144:	4422      	add	r2, r4
 8026146:	4420      	add	r0, r4
 8026148:	b29b      	uxth	r3, r3
 802614a:	b289      	uxth	r1, r1
 802614c:	fb03 f901 	mul.w	r9, r3, r1
 8026150:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026154:	011b      	lsls	r3, r3, #4
 8026156:	b289      	uxth	r1, r1
 8026158:	78b7      	ldrb	r7, [r6, #2]
 802615a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802615e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026162:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8026166:	eba3 0309 	sub.w	r3, r3, r9
 802616a:	b29b      	uxth	r3, r3
 802616c:	ebae 0e01 	sub.w	lr, lr, r1
 8026170:	fa1f fe8e 	uxth.w	lr, lr
 8026174:	435f      	muls	r7, r3
 8026176:	fb0e 770a 	mla	r7, lr, sl, r7
 802617a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802617e:	fb01 770a 	mla	r7, r1, sl, r7
 8026182:	f890 a002 	ldrb.w	sl, [r0, #2]
 8026186:	fb09 7a0a 	mla	sl, r9, sl, r7
 802618a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802618e:	f896 8000 	ldrb.w	r8, [r6]
 8026192:	7876      	ldrb	r6, [r6, #1]
 8026194:	fb03 f808 	mul.w	r8, r3, r8
 8026198:	fb0e 8807 	mla	r8, lr, r7, r8
 802619c:	7817      	ldrb	r7, [r2, #0]
 802619e:	fb01 8807 	mla	r8, r1, r7, r8
 80261a2:	7807      	ldrb	r7, [r0, #0]
 80261a4:	fb09 8707 	mla	r7, r9, r7, r8
 80261a8:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80261ac:	4373      	muls	r3, r6
 80261ae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80261b2:	7856      	ldrb	r6, [r2, #1]
 80261b4:	ea47 070a 	orr.w	r7, r7, sl
 80261b8:	fb0e 330c 	mla	r3, lr, ip, r3
 80261bc:	f890 a001 	ldrb.w	sl, [r0, #1]
 80261c0:	fb01 3306 	mla	r3, r1, r6, r3
 80261c4:	fb09 3a0a 	mla	sl, r9, sl, r3
 80261c8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80261cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80261ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80261d2:	ea47 070a 	orr.w	r7, r7, sl
 80261d6:	f823 7b02 	strh.w	r7, [r3], #2
 80261da:	930b      	str	r3, [sp, #44]	; 0x2c
 80261dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80261de:	449b      	add	fp, r3
 80261e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80261e2:	441d      	add	r5, r3
 80261e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80261e6:	3b01      	subs	r3, #1
 80261e8:	9309      	str	r3, [sp, #36]	; 0x24
 80261ea:	e714      	b.n	8026016 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80261ec:	b149      	cbz	r1, 8026202 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80261ee:	5cba      	ldrb	r2, [r7, r2]
 80261f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80261f4:	4422      	add	r2, r4
 80261f6:	4660      	mov	r0, ip
 80261f8:	4666      	mov	r6, ip
 80261fa:	e7a5      	b.n	8026148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80261fc:	4660      	mov	r0, ip
 80261fe:	4662      	mov	r2, ip
 8026200:	e7a2      	b.n	8026148 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8026202:	4660      	mov	r0, ip
 8026204:	4662      	mov	r2, ip
 8026206:	e7f7      	b.n	80261f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8026208:	b00f      	add	sp, #60	; 0x3c
 802620a:	ecbd 8b08 	vpop	{d8-d11}
 802620e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026214 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8026214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026218:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 802621c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8026220:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8026224:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8026228:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 802622c:	fb04 560c 	mla	r6, r4, ip, r5
 8026230:	2c00      	cmp	r4, #0
 8026232:	eb02 0e06 	add.w	lr, r2, r6
 8026236:	db3d      	blt.n	80262b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8026238:	45a0      	cmp	r8, r4
 802623a:	dd3b      	ble.n	80262b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 802623c:	2d00      	cmp	r5, #0
 802623e:	db37      	blt.n	80262b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8026240:	45ac      	cmp	ip, r5
 8026242:	dd35      	ble.n	80262b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8026244:	5d92      	ldrb	r2, [r2, r6]
 8026246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802624a:	1c6e      	adds	r6, r5, #1
 802624c:	d435      	bmi.n	80262ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802624e:	45b4      	cmp	ip, r6
 8026250:	dd33      	ble.n	80262ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8026252:	b3a0      	cbz	r0, 80262be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8026254:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026258:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 802625c:	3401      	adds	r4, #1
 802625e:	d432      	bmi.n	80262c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8026260:	45a0      	cmp	r8, r4
 8026262:	dd30      	ble.n	80262c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8026264:	b397      	cbz	r7, 80262cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8026266:	2d00      	cmp	r5, #0
 8026268:	db2b      	blt.n	80262c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802626a:	45ac      	cmp	ip, r5
 802626c:	dd29      	ble.n	80262c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802626e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8026272:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8026276:	3501      	adds	r5, #1
 8026278:	d42b      	bmi.n	80262d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802627a:	45ac      	cmp	ip, r5
 802627c:	dd29      	ble.n	80262d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802627e:	b350      	cbz	r0, 80262d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8026280:	44f4      	add	ip, lr
 8026282:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8026286:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802628a:	280f      	cmp	r0, #15
 802628c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026290:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026294:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026298:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802629c:	d801      	bhi.n	80262a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 802629e:	2f0f      	cmp	r7, #15
 80262a0:	d91b      	bls.n	80262da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 80262a2:	4b8d      	ldr	r3, [pc, #564]	; (80264d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 80262a4:	4a8d      	ldr	r2, [pc, #564]	; (80264dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 80262a6:	488e      	ldr	r0, [pc, #568]	; (80264e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 80262a8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80262ac:	f007 ffb2 	bl	802e214 <__assert_func>
 80262b0:	2200      	movs	r2, #0
 80262b2:	e7ca      	b.n	802624a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 80262b4:	2600      	movs	r6, #0
 80262b6:	4632      	mov	r2, r6
 80262b8:	e7d0      	b.n	802625c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80262ba:	2600      	movs	r6, #0
 80262bc:	e7ce      	b.n	802625c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80262be:	4606      	mov	r6, r0
 80262c0:	e7cc      	b.n	802625c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80262c2:	2400      	movs	r4, #0
 80262c4:	e7d7      	b.n	8026276 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 80262c6:	2300      	movs	r3, #0
 80262c8:	461c      	mov	r4, r3
 80262ca:	e7de      	b.n	802628a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80262cc:	463b      	mov	r3, r7
 80262ce:	463c      	mov	r4, r7
 80262d0:	e7db      	b.n	802628a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80262d2:	2300      	movs	r3, #0
 80262d4:	e7d9      	b.n	802628a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80262d6:	4603      	mov	r3, r0
 80262d8:	e7d7      	b.n	802628a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80262da:	b280      	uxth	r0, r0
 80262dc:	b2bf      	uxth	r7, r7
 80262de:	fb07 fe00 	mul.w	lr, r7, r0
 80262e2:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80262e6:	0100      	lsls	r0, r0, #4
 80262e8:	eba0 0c0e 	sub.w	ip, r0, lr
 80262ec:	b2bf      	uxth	r7, r7
 80262ee:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80262f2:	fa1f fc8c 	uxth.w	ip, ip
 80262f6:	1bed      	subs	r5, r5, r7
 80262f8:	b2ad      	uxth	r5, r5
 80262fa:	fb0a f00c 	mul.w	r0, sl, ip
 80262fe:	fb0b 0005 	mla	r0, fp, r5, r0
 8026302:	fb07 0009 	mla	r0, r7, r9, r0
 8026306:	fb0e 0008 	mla	r0, lr, r8, r0
 802630a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802630e:	9001      	str	r0, [sp, #4]
 8026310:	2800      	cmp	r0, #0
 8026312:	f000 80de 	beq.w	80264d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8026316:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802631a:	d018      	beq.n	802634e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 802631c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026320:	fb0b f000 	mul.w	r0, fp, r0
 8026324:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026328:	fb0b fb02 	mul.w	fp, fp, r2
 802632c:	0a02      	lsrs	r2, r0, #8
 802632e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026332:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026336:	4402      	add	r2, r0
 8026338:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802633c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026340:	0a12      	lsrs	r2, r2, #8
 8026342:	0a00      	lsrs	r0, r0, #8
 8026344:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026348:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802634c:	4302      	orrs	r2, r0
 802634e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026352:	d01a      	beq.n	802638a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8026354:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8026358:	fb0a f000 	mul.w	r0, sl, r0
 802635c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026360:	fb0a fa06 	mul.w	sl, sl, r6
 8026364:	0a06      	lsrs	r6, r0, #8
 8026366:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802636a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802636e:	4406      	add	r6, r0
 8026370:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026374:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026378:	0a36      	lsrs	r6, r6, #8
 802637a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802637e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026382:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026386:	ea46 060a 	orr.w	r6, r6, sl
 802638a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802638e:	d01b      	beq.n	80263c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8026390:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026394:	fb09 fa0a 	mul.w	sl, r9, sl
 8026398:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802639c:	fb09 f004 	mul.w	r0, r9, r4
 80263a0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80263a4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80263a8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80263ac:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80263b0:	4454      	add	r4, sl
 80263b2:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80263b6:	0a24      	lsrs	r4, r4, #8
 80263b8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80263bc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80263c0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80263c4:	ea44 0409 	orr.w	r4, r4, r9
 80263c8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80263cc:	d01b      	beq.n	8026406 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 80263ce:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80263d2:	fb08 f909 	mul.w	r9, r8, r9
 80263d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80263da:	fb08 f003 	mul.w	r0, r8, r3
 80263de:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80263e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80263e6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80263ea:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80263ee:	444b      	add	r3, r9
 80263f0:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80263f4:	0a1b      	lsrs	r3, r3, #8
 80263f6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80263fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80263fe:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026402:	ea43 0308 	orr.w	r3, r3, r8
 8026406:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802640a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802640e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8026412:	fb0c f808 	mul.w	r8, ip, r8
 8026416:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802641a:	fb0c f606 	mul.w	r6, ip, r6
 802641e:	fb05 8909 	mla	r9, r5, r9, r8
 8026422:	fb05 6502 	mla	r5, r5, r2, r6
 8026426:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802642a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 802642e:	9a01      	ldr	r2, [sp, #4]
 8026430:	8808      	ldrh	r0, [r1, #0]
 8026432:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026436:	fb07 9908 	mla	r9, r7, r8, r9
 802643a:	fb07 5704 	mla	r7, r7, r4, r5
 802643e:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8026442:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026446:	b2b6      	uxth	r6, r6
 8026448:	fb0e 9808 	mla	r8, lr, r8, r9
 802644c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8026450:	4372      	muls	r2, r6
 8026452:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026456:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802645a:	1c53      	adds	r3, r2, #1
 802645c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8026460:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026464:	ea48 0e0e 	orr.w	lr, r8, lr
 8026468:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802646c:	1205      	asrs	r5, r0, #8
 802646e:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8026472:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026476:	b2db      	uxtb	r3, r3
 8026478:	fb12 f206 	smulbb	r2, r2, r6
 802647c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026480:	fb05 2503 	mla	r5, r5, r3, r2
 8026484:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8026488:	10c2      	asrs	r2, r0, #3
 802648a:	fa5f fe8e 	uxtb.w	lr, lr
 802648e:	00c0      	lsls	r0, r0, #3
 8026490:	fb14 f406 	smulbb	r4, r4, r6
 8026494:	b2c0      	uxtb	r0, r0
 8026496:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802649a:	fb1e fe06 	smulbb	lr, lr, r6
 802649e:	fb02 4203 	mla	r2, r2, r3, r4
 80264a2:	b2ad      	uxth	r5, r5
 80264a4:	fb00 e303 	mla	r3, r0, r3, lr
 80264a8:	b298      	uxth	r0, r3
 80264aa:	b294      	uxth	r4, r2
 80264ac:	1c6b      	adds	r3, r5, #1
 80264ae:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80264b2:	1c62      	adds	r2, r4, #1
 80264b4:	1c43      	adds	r3, r0, #1
 80264b6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80264ba:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80264be:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80264c2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80264c6:	0952      	lsrs	r2, r2, #5
 80264c8:	432b      	orrs	r3, r5
 80264ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80264ce:	4313      	orrs	r3, r2
 80264d0:	800b      	strh	r3, [r1, #0]
 80264d2:	b003      	add	sp, #12
 80264d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264d8:	08033161 	.word	0x08033161
 80264dc:	0803372e 	.word	0x0803372e
 80264e0:	080331e5 	.word	0x080331e5

080264e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80264e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264e8:	ed2d 8b08 	vpush	{d8-d11}
 80264ec:	b09f      	sub	sp, #124	; 0x7c
 80264ee:	eeb0 aa40 	vmov.f32	s20, s0
 80264f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80264f4:	9309      	str	r3, [sp, #36]	; 0x24
 80264f6:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80264f8:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80264fc:	931c      	str	r3, [sp, #112]	; 0x70
 80264fe:	9119      	str	r1, [sp, #100]	; 0x64
 8026500:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8026504:	901d      	str	r0, [sp, #116]	; 0x74
 8026506:	6850      	ldr	r0, [r2, #4]
 8026508:	6812      	ldr	r2, [r2, #0]
 802650a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 802650c:	fb00 1303 	mla	r3, r0, r3, r1
 8026510:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026514:	930c      	str	r3, [sp, #48]	; 0x30
 8026516:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026518:	681b      	ldr	r3, [r3, #0]
 802651a:	9312      	str	r3, [sp, #72]	; 0x48
 802651c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802651e:	685e      	ldr	r6, [r3, #4]
 8026520:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8026524:	930d      	str	r3, [sp, #52]	; 0x34
 8026526:	eef0 9a60 	vmov.f32	s19, s1
 802652a:	eeb0 9a41 	vmov.f32	s18, s2
 802652e:	eeb0 8a62 	vmov.f32	s16, s5
 8026532:	eef0 8a43 	vmov.f32	s17, s6
 8026536:	eef0 ba44 	vmov.f32	s23, s8
 802653a:	eeb0 ba64 	vmov.f32	s22, s9
 802653e:	eef0 aa45 	vmov.f32	s21, s10
 8026542:	3604      	adds	r6, #4
 8026544:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026546:	2b00      	cmp	r3, #0
 8026548:	dc03      	bgt.n	8026552 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802654a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802654c:	2b00      	cmp	r3, #0
 802654e:	f340 8388 	ble.w	8026c62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8026552:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026554:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026558:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802655c:	1e48      	subs	r0, r1, #1
 802655e:	1e57      	subs	r7, r2, #1
 8026560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026562:	2b00      	cmp	r3, #0
 8026564:	f340 8195 	ble.w	8026892 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026568:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802656a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802656e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026572:	d406      	bmi.n	8026582 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8026574:	4584      	cmp	ip, r0
 8026576:	da04      	bge.n	8026582 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8026578:	2b00      	cmp	r3, #0
 802657a:	db02      	blt.n	8026582 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802657c:	42bb      	cmp	r3, r7
 802657e:	f2c0 8189 	blt.w	8026894 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8026582:	f11c 0c01 	adds.w	ip, ip, #1
 8026586:	f100 8177 	bmi.w	8026878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802658a:	4561      	cmp	r1, ip
 802658c:	f2c0 8174 	blt.w	8026878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026590:	3301      	adds	r3, #1
 8026592:	f100 8171 	bmi.w	8026878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026596:	429a      	cmp	r2, r3
 8026598:	f2c0 816e 	blt.w	8026878 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802659e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80265a0:	931a      	str	r3, [sp, #104]	; 0x68
 80265a2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80265a4:	2b00      	cmp	r3, #0
 80265a6:	f340 8193 	ble.w	80268d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80265aa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80265ac:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80265b0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80265b2:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80265b6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80265b8:	141b      	asrs	r3, r3, #16
 80265ba:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80265be:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80265c2:	f100 81d6 	bmi.w	8026972 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80265c6:	f100 38ff 	add.w	r8, r0, #4294967295
 80265ca:	4543      	cmp	r3, r8
 80265cc:	f280 81d1 	bge.w	8026972 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80265d0:	f1bc 0f00 	cmp.w	ip, #0
 80265d4:	f2c0 81cd 	blt.w	8026972 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80265d8:	f10e 38ff 	add.w	r8, lr, #4294967295
 80265dc:	45c4      	cmp	ip, r8
 80265de:	f280 81c8 	bge.w	8026972 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80265e2:	b200      	sxth	r0, r0
 80265e4:	fb0c 3300 	mla	r3, ip, r0, r3
 80265e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80265ea:	eb04 0803 	add.w	r8, r4, r3
 80265ee:	5ce3      	ldrb	r3, [r4, r3]
 80265f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80265f4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80265f8:	2a00      	cmp	r2, #0
 80265fa:	f000 81af 	beq.w	802695c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 80265fe:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026602:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026606:	940e      	str	r4, [sp, #56]	; 0x38
 8026608:	0e24      	lsrs	r4, r4, #24
 802660a:	9415      	str	r4, [sp, #84]	; 0x54
 802660c:	b179      	cbz	r1, 802662e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802660e:	eb08 0c00 	add.w	ip, r8, r0
 8026612:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026616:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802661a:	900a      	str	r0, [sp, #40]	; 0x28
 802661c:	0e00      	lsrs	r0, r0, #24
 802661e:	9013      	str	r0, [sp, #76]	; 0x4c
 8026620:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026624:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026628:	900f      	str	r0, [sp, #60]	; 0x3c
 802662a:	0e00      	lsrs	r0, r0, #24
 802662c:	9016      	str	r0, [sp, #88]	; 0x58
 802662e:	b292      	uxth	r2, r2
 8026630:	b289      	uxth	r1, r1
 8026632:	fb02 f901 	mul.w	r9, r2, r1
 8026636:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802663a:	0112      	lsls	r2, r2, #4
 802663c:	eba2 0809 	sub.w	r8, r2, r9
 8026640:	b289      	uxth	r1, r1
 8026642:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026646:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026648:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802664a:	fa1f f888 	uxth.w	r8, r8
 802664e:	1a52      	subs	r2, r2, r1
 8026650:	b292      	uxth	r2, r2
 8026652:	fb08 f000 	mul.w	r0, r8, r0
 8026656:	fb02 000e 	mla	r0, r2, lr, r0
 802665a:	fb01 0004 	mla	r0, r1, r4, r0
 802665e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026660:	fb09 0004 	mla	r0, r9, r4, r0
 8026664:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026668:	2800      	cmp	r0, #0
 802666a:	f000 80fa 	beq.w	8026862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802666e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026672:	d01b      	beq.n	80266ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8026674:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026678:	fb0e fa0a 	mul.w	sl, lr, sl
 802667c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026680:	fb0e fe03 	mul.w	lr, lr, r3
 8026684:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026688:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802668c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026690:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026694:	4453      	add	r3, sl
 8026696:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802669a:	0a1b      	lsrs	r3, r3, #8
 802669c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80266a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80266a4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80266a8:	ea43 030c 	orr.w	r3, r3, ip
 80266ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80266ae:	2cff      	cmp	r4, #255	; 0xff
 80266b0:	d021      	beq.n	80266f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80266b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80266b4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80266b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80266ba:	fb04 fb0b 	mul.w	fp, r4, fp
 80266be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80266c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80266c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80266c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80266ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80266ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80266d6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80266da:	44de      	add	lr, fp
 80266dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80266e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80266f0:	ea4e 040a 	orr.w	r4, lr, sl
 80266f4:	940e      	str	r4, [sp, #56]	; 0x38
 80266f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80266f8:	2cff      	cmp	r4, #255	; 0xff
 80266fa:	d021      	beq.n	8026740 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 80266fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80266fe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026702:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026704:	fb04 fb0b 	mul.w	fp, r4, fp
 8026708:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802670a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802670e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026710:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026714:	fb04 fa0a 	mul.w	sl, r4, sl
 8026718:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802671c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026720:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026724:	44de      	add	lr, fp
 8026726:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802672a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802672e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026732:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026736:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802673a:	ea4e 040a 	orr.w	r4, lr, sl
 802673e:	940a      	str	r4, [sp, #40]	; 0x28
 8026740:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026742:	2cff      	cmp	r4, #255	; 0xff
 8026744:	d021      	beq.n	802678a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8026746:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026748:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802674c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802674e:	fb04 fb0b 	mul.w	fp, r4, fp
 8026752:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026754:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026758:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802675a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802675e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026762:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026766:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802676a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802676e:	44de      	add	lr, fp
 8026770:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026774:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026778:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802677c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026780:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026784:	ea4e 040a 	orr.w	r4, lr, sl
 8026788:	940f      	str	r4, [sp, #60]	; 0x3c
 802678a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802678c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026790:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026792:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026796:	fb08 fc0c 	mul.w	ip, r8, ip
 802679a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802679e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80267a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80267a4:	fb01 cc0e 	mla	ip, r1, lr, ip
 80267a8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80267ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80267ae:	fb09 cc0e 	mla	ip, r9, lr, ip
 80267b2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80267b6:	fb08 f80e 	mul.w	r8, r8, lr
 80267ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80267be:	fb02 8303 	mla	r3, r2, r3, r8
 80267c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80267c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80267c6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80267ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80267cc:	fb01 330a 	mla	r3, r1, sl, r3
 80267d0:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80267d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80267d6:	fb09 3901 	mla	r9, r9, r1, r3
 80267da:	4342      	muls	r2, r0
 80267dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80267e4:	883b      	ldrh	r3, [r7, #0]
 80267e6:	1c50      	adds	r0, r2, #1
 80267e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267ec:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80267f0:	ea4c 0c09 	orr.w	ip, ip, r9
 80267f4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80267f8:	1219      	asrs	r1, r3, #8
 80267fa:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80267fe:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026802:	b2c0      	uxtb	r0, r0
 8026804:	fb12 f204 	smulbb	r2, r2, r4
 8026808:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802680c:	fb01 2100 	mla	r1, r1, r0, r2
 8026810:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026814:	10da      	asrs	r2, r3, #3
 8026816:	fa5f fc8c 	uxtb.w	ip, ip
 802681a:	00db      	lsls	r3, r3, #3
 802681c:	fb1c fc04 	smulbb	ip, ip, r4
 8026820:	b2db      	uxtb	r3, r3
 8026822:	b289      	uxth	r1, r1
 8026824:	fb03 c300 	mla	r3, r3, r0, ip
 8026828:	fa1f fc83 	uxth.w	ip, r3
 802682c:	1c4b      	adds	r3, r1, #1
 802682e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026832:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026836:	fb1e fe04 	smulbb	lr, lr, r4
 802683a:	f10c 0301 	add.w	r3, ip, #1
 802683e:	fb02 e200 	mla	r2, r2, r0, lr
 8026842:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026846:	b292      	uxth	r2, r2
 8026848:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802684c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026850:	430b      	orrs	r3, r1
 8026852:	1c51      	adds	r1, r2, #1
 8026854:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026858:	0952      	lsrs	r2, r2, #5
 802685a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802685e:	4313      	orrs	r3, r2
 8026860:	803b      	strh	r3, [r7, #0]
 8026862:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026864:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026866:	441a      	add	r2, r3
 8026868:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802686a:	9231      	str	r2, [sp, #196]	; 0xc4
 802686c:	441d      	add	r5, r3
 802686e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026870:	3b01      	subs	r3, #1
 8026872:	3702      	adds	r7, #2
 8026874:	931a      	str	r3, [sp, #104]	; 0x68
 8026876:	e694      	b.n	80265a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026878:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 802687a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802687c:	441c      	add	r4, r3
 802687e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026880:	9431      	str	r4, [sp, #196]	; 0xc4
 8026882:	441d      	add	r5, r3
 8026884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026886:	3b01      	subs	r3, #1
 8026888:	9309      	str	r3, [sp, #36]	; 0x24
 802688a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802688c:	3302      	adds	r3, #2
 802688e:	930c      	str	r3, [sp, #48]	; 0x30
 8026890:	e666      	b.n	8026560 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8026892:	d024      	beq.n	80268de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fa>
 8026894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026896:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8026898:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802689a:	3b01      	subs	r3, #1
 802689c:	fb00 4003 	mla	r0, r0, r3, r4
 80268a0:	1400      	asrs	r0, r0, #16
 80268a2:	f53f ae7b 	bmi.w	802659c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80268a6:	3901      	subs	r1, #1
 80268a8:	4288      	cmp	r0, r1
 80268aa:	f6bf ae77 	bge.w	802659c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80268ae:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80268b0:	fb01 5303 	mla	r3, r1, r3, r5
 80268b4:	141b      	asrs	r3, r3, #16
 80268b6:	f53f ae71 	bmi.w	802659c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80268ba:	3a01      	subs	r2, #1
 80268bc:	4293      	cmp	r3, r2
 80268be:	f6bf ae6d 	bge.w	802659c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80268c2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80268c6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80268ca:	f1bb 0f00 	cmp.w	fp, #0
 80268ce:	dc70      	bgt.n	80269b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80268d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80268d2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80268d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80268d8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80268dc:	930c      	str	r3, [sp, #48]	; 0x30
 80268de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80268e0:	2b00      	cmp	r3, #0
 80268e2:	f340 81be 	ble.w	8026c62 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 80268e6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80268ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80268ee:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80268f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80268f4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80268f8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80268fc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026900:	eef0 6a48 	vmov.f32	s13, s16
 8026904:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026908:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802690c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026910:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8026914:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026918:	eef0 6a68 	vmov.f32	s13, s17
 802691c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026920:	ee18 2a10 	vmov	r2, s16
 8026924:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026928:	fb92 f3f3 	sdiv	r3, r2, r3
 802692c:	ee18 2a90 	vmov	r2, s17
 8026930:	9333      	str	r3, [sp, #204]	; 0xcc
 8026932:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026934:	fb92 f3f3 	sdiv	r3, r2, r3
 8026938:	9334      	str	r3, [sp, #208]	; 0xd0
 802693a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802693c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802693e:	3b01      	subs	r3, #1
 8026940:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026944:	9319      	str	r3, [sp, #100]	; 0x64
 8026946:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026948:	bf08      	it	eq
 802694a:	4613      	moveq	r3, r2
 802694c:	ee16 5a90 	vmov	r5, s13
 8026950:	9309      	str	r3, [sp, #36]	; 0x24
 8026952:	eef0 8a67 	vmov.f32	s17, s15
 8026956:	eeb0 8a47 	vmov.f32	s16, s14
 802695a:	e5f3      	b.n	8026544 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802695c:	2900      	cmp	r1, #0
 802695e:	f43f ae66 	beq.w	802662e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026962:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026966:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802696a:	900a      	str	r0, [sp, #40]	; 0x28
 802696c:	0e00      	lsrs	r0, r0, #24
 802696e:	9013      	str	r0, [sp, #76]	; 0x4c
 8026970:	e65d      	b.n	802662e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8026972:	f113 0801 	adds.w	r8, r3, #1
 8026976:	f53f af74 	bmi.w	8026862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802697a:	4540      	cmp	r0, r8
 802697c:	f6ff af71 	blt.w	8026862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026980:	f11c 0801 	adds.w	r8, ip, #1
 8026984:	f53f af6d 	bmi.w	8026862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026988:	45c6      	cmp	lr, r8
 802698a:	f6ff af6a 	blt.w	8026862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802698e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026990:	9302      	str	r3, [sp, #8]
 8026992:	b200      	sxth	r0, r0
 8026994:	fa0f f38e 	sxth.w	r3, lr
 8026998:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802699c:	e9cd c203 	strd	ip, r2, [sp, #12]
 80269a0:	9301      	str	r3, [sp, #4]
 80269a2:	9000      	str	r0, [sp, #0]
 80269a4:	4633      	mov	r3, r6
 80269a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80269a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80269aa:	4639      	mov	r1, r7
 80269ac:	f7ff fc32 	bl	8026214 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80269b0:	e757      	b.n	8026862 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80269b2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80269b4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80269b6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80269ba:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80269bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80269c0:	1427      	asrs	r7, r4, #16
 80269c2:	142b      	asrs	r3, r5, #16
 80269c4:	fb01 7303 	mla	r3, r1, r3, r7
 80269c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80269ca:	18e7      	adds	r7, r4, r3
 80269cc:	5ce3      	ldrb	r3, [r4, r3]
 80269ce:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80269d2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80269d6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80269da:	2a00      	cmp	r2, #0
 80269dc:	f000 8137 	beq.w	8026c4e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 80269e0:	f897 e001 	ldrb.w	lr, [r7, #1]
 80269e4:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80269e8:	9410      	str	r4, [sp, #64]	; 0x40
 80269ea:	0e24      	lsrs	r4, r4, #24
 80269ec:	9417      	str	r4, [sp, #92]	; 0x5c
 80269ee:	b170      	cbz	r0, 8026a0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 80269f0:	eb07 0e01 	add.w	lr, r7, r1
 80269f4:	5c79      	ldrb	r1, [r7, r1]
 80269f6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80269fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80269fc:	0e09      	lsrs	r1, r1, #24
 80269fe:	9114      	str	r1, [sp, #80]	; 0x50
 8026a00:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026a04:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026a08:	9111      	str	r1, [sp, #68]	; 0x44
 8026a0a:	0e09      	lsrs	r1, r1, #24
 8026a0c:	9118      	str	r1, [sp, #96]	; 0x60
 8026a0e:	b292      	uxth	r2, r2
 8026a10:	b280      	uxth	r0, r0
 8026a12:	fb02 f800 	mul.w	r8, r2, r0
 8026a16:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026a1a:	0112      	lsls	r2, r2, #4
 8026a1c:	eba2 0e08 	sub.w	lr, r2, r8
 8026a20:	b280      	uxth	r0, r0
 8026a22:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026a26:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8026a28:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a2a:	fa1f fe8e 	uxth.w	lr, lr
 8026a2e:	1a12      	subs	r2, r2, r0
 8026a30:	b292      	uxth	r2, r2
 8026a32:	fb0e f101 	mul.w	r1, lr, r1
 8026a36:	fb02 110c 	mla	r1, r2, ip, r1
 8026a3a:	fb00 1104 	mla	r1, r0, r4, r1
 8026a3e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026a40:	fb08 1104 	mla	r1, r8, r4, r1
 8026a44:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026a48:	2900      	cmp	r1, #0
 8026a4a:	f000 80f5 	beq.w	8026c38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8026a4e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026a52:	d019      	beq.n	8026a88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8026a54:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026a58:	fb0c fa0a 	mul.w	sl, ip, sl
 8026a5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026a60:	fb0c fc03 	mul.w	ip, ip, r3
 8026a64:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026a68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026a6c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026a70:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026a74:	4453      	add	r3, sl
 8026a76:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026a7a:	0a1b      	lsrs	r3, r3, #8
 8026a7c:	0a3f      	lsrs	r7, r7, #8
 8026a7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026a82:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026a86:	433b      	orrs	r3, r7
 8026a88:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026a8a:	2cff      	cmp	r4, #255	; 0xff
 8026a8c:	d020      	beq.n	8026ad0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8026a8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026a90:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026a94:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026a96:	4367      	muls	r7, r4
 8026a98:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026a9a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026a9e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026aa0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026aa4:	fb04 fa0a 	mul.w	sl, r4, sl
 8026aa8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026aac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ab0:	44bc      	add	ip, r7
 8026ab2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026ab6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026aba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026abe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ac2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ac6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026aca:	ea4c 040a 	orr.w	r4, ip, sl
 8026ace:	9410      	str	r4, [sp, #64]	; 0x40
 8026ad0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026ad2:	2cff      	cmp	r4, #255	; 0xff
 8026ad4:	d020      	beq.n	8026b18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8026ad6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ad8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026adc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026ade:	4367      	muls	r7, r4
 8026ae0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ae2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026ae6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026ae8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026aec:	fb04 fa0a 	mul.w	sl, r4, sl
 8026af0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026af4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026af8:	44bc      	add	ip, r7
 8026afa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026afe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026b02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026b0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026b0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026b12:	ea4c 040a 	orr.w	r4, ip, sl
 8026b16:	940b      	str	r4, [sp, #44]	; 0x2c
 8026b18:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026b1a:	2cff      	cmp	r4, #255	; 0xff
 8026b1c:	d020      	beq.n	8026b60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67c>
 8026b1e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026b20:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026b24:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026b26:	4367      	muls	r7, r4
 8026b28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026b2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026b2e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026b30:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026b34:	fb04 fa0a 	mul.w	sl, r4, sl
 8026b38:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026b3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026b40:	44bc      	add	ip, r7
 8026b42:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026b46:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026b4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026b52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026b56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026b5a:	ea4c 040a 	orr.w	r4, ip, sl
 8026b5e:	9411      	str	r4, [sp, #68]	; 0x44
 8026b60:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026b62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026b66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026b68:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026b6c:	fb0e f707 	mul.w	r7, lr, r7
 8026b70:	fb02 770c 	mla	r7, r2, ip, r7
 8026b74:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026b78:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026b7a:	fb00 770c 	mla	r7, r0, ip, r7
 8026b7e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026b82:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026b84:	fb08 770c 	mla	r7, r8, ip, r7
 8026b88:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026b8c:	fb0e fe0c 	mul.w	lr, lr, ip
 8026b90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b94:	fb02 e303 	mla	r3, r2, r3, lr
 8026b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026b9a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026b9c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026ba0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026ba2:	fb00 330a 	mla	r3, r0, sl, r3
 8026ba6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026baa:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026bb0:	f8b9 0000 	ldrh.w	r0, [r9]
 8026bb4:	434b      	muls	r3, r1
 8026bb6:	0a3f      	lsrs	r7, r7, #8
 8026bb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026bbc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026bc0:	1c59      	adds	r1, r3, #1
 8026bc2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026bc6:	ea47 070c 	orr.w	r7, r7, ip
 8026bca:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026bce:	1202      	asrs	r2, r0, #8
 8026bd0:	0c3b      	lsrs	r3, r7, #16
 8026bd2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026bd6:	b2c9      	uxtb	r1, r1
 8026bd8:	fb13 f304 	smulbb	r3, r3, r4
 8026bdc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026be0:	fb02 3201 	mla	r2, r2, r1, r3
 8026be4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026be8:	10c3      	asrs	r3, r0, #3
 8026bea:	b2ff      	uxtb	r7, r7
 8026bec:	00c0      	lsls	r0, r0, #3
 8026bee:	b292      	uxth	r2, r2
 8026bf0:	fb1c fc04 	smulbb	ip, ip, r4
 8026bf4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026bf8:	b2c0      	uxtb	r0, r0
 8026bfa:	fb17 f704 	smulbb	r7, r7, r4
 8026bfe:	fb03 c301 	mla	r3, r3, r1, ip
 8026c02:	fb00 7001 	mla	r0, r0, r1, r7
 8026c06:	f102 0c01 	add.w	ip, r2, #1
 8026c0a:	b280      	uxth	r0, r0
 8026c0c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026c10:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8026c14:	1c42      	adds	r2, r0, #1
 8026c16:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026c1a:	b29b      	uxth	r3, r3
 8026c1c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026c20:	ea42 020c 	orr.w	r2, r2, ip
 8026c24:	f103 0c01 	add.w	ip, r3, #1
 8026c28:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026c2c:	095b      	lsrs	r3, r3, #5
 8026c2e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026c32:	431a      	orrs	r2, r3
 8026c34:	f8a9 2000 	strh.w	r2, [r9]
 8026c38:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026c3a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026c3c:	441a      	add	r2, r3
 8026c3e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026c40:	9231      	str	r2, [sp, #196]	; 0xc4
 8026c42:	f109 0902 	add.w	r9, r9, #2
 8026c46:	441d      	add	r5, r3
 8026c48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026c4c:	e63d      	b.n	80268ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8026c4e:	2800      	cmp	r0, #0
 8026c50:	f43f aedd 	beq.w	8026a0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8026c54:	5c79      	ldrb	r1, [r7, r1]
 8026c56:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026c5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8026c5c:	0e09      	lsrs	r1, r1, #24
 8026c5e:	9114      	str	r1, [sp, #80]	; 0x50
 8026c60:	e6d5      	b.n	8026a0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8026c62:	b01f      	add	sp, #124	; 0x7c
 8026c64:	ecbd 8b08 	vpop	{d8-d11}
 8026c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026c6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8026c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c70:	880e      	ldrh	r6, [r1, #0]
 8026c72:	b085      	sub	sp, #20
 8026c74:	ea4f 2826 	mov.w	r8, r6, asr #8
 8026c78:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8026c7c:	4691      	mov	r9, r2
 8026c7e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8026c82:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8026c86:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026c8a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8026c8e:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 8026c92:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8026c96:	9200      	str	r2, [sp, #0]
 8026c98:	00f6      	lsls	r6, r6, #3
 8026c9a:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 8026c9e:	9201      	str	r2, [sp, #4]
 8026ca0:	2c00      	cmp	r4, #0
 8026ca2:	b2f2      	uxtb	r2, r6
 8026ca4:	fb04 560c 	mla	r6, r4, ip, r5
 8026ca8:	9202      	str	r2, [sp, #8]
 8026caa:	eb09 0806 	add.w	r8, r9, r6
 8026cae:	db3f      	blt.n	8026d30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8026cb0:	45a6      	cmp	lr, r4
 8026cb2:	dd3d      	ble.n	8026d30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8026cb4:	2d00      	cmp	r5, #0
 8026cb6:	db39      	blt.n	8026d2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8026cb8:	45ac      	cmp	ip, r5
 8026cba:	dd37      	ble.n	8026d2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8026cbc:	f819 2006 	ldrb.w	r2, [r9, r6]
 8026cc0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026cc4:	1c6e      	adds	r6, r5, #1
 8026cc6:	d436      	bmi.n	8026d36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8026cc8:	45b4      	cmp	ip, r6
 8026cca:	dd34      	ble.n	8026d36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8026ccc:	b3a8      	cbz	r0, 8026d3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8026cce:	f898 6001 	ldrb.w	r6, [r8, #1]
 8026cd2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8026cd6:	3401      	adds	r4, #1
 8026cd8:	d433      	bmi.n	8026d42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8026cda:	45a6      	cmp	lr, r4
 8026cdc:	dd31      	ble.n	8026d42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8026cde:	b39f      	cbz	r7, 8026d48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8026ce0:	2d00      	cmp	r5, #0
 8026ce2:	eb08 0e0c 	add.w	lr, r8, ip
 8026ce6:	db2a      	blt.n	8026d3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8026ce8:	45ac      	cmp	ip, r5
 8026cea:	dd28      	ble.n	8026d3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8026cec:	f818 400c 	ldrb.w	r4, [r8, ip]
 8026cf0:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8026cf4:	3501      	adds	r5, #1
 8026cf6:	d42a      	bmi.n	8026d4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8026cf8:	45ac      	cmp	ip, r5
 8026cfa:	dd28      	ble.n	8026d4e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8026cfc:	b348      	cbz	r0, 8026d52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8026cfe:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8026d02:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8026d06:	280f      	cmp	r0, #15
 8026d08:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026d0c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026d10:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026d14:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026d18:	d801      	bhi.n	8026d1e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8026d1a:	2f0f      	cmp	r7, #15
 8026d1c:	d91b      	bls.n	8026d56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8026d1e:	4b7d      	ldr	r3, [pc, #500]	; (8026f14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 8026d20:	4a7d      	ldr	r2, [pc, #500]	; (8026f18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8026d22:	487e      	ldr	r0, [pc, #504]	; (8026f1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8026d24:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8026d28:	f007 fa74 	bl	802e214 <__assert_func>
 8026d2c:	2200      	movs	r2, #0
 8026d2e:	e7c9      	b.n	8026cc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8026d30:	2600      	movs	r6, #0
 8026d32:	4632      	mov	r2, r6
 8026d34:	e7cf      	b.n	8026cd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026d36:	2600      	movs	r6, #0
 8026d38:	e7cd      	b.n	8026cd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026d3a:	4606      	mov	r6, r0
 8026d3c:	e7cb      	b.n	8026cd6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026d3e:	2400      	movs	r4, #0
 8026d40:	e7d8      	b.n	8026cf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8026d42:	2300      	movs	r3, #0
 8026d44:	461c      	mov	r4, r3
 8026d46:	e7de      	b.n	8026d06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026d48:	463b      	mov	r3, r7
 8026d4a:	463c      	mov	r4, r7
 8026d4c:	e7db      	b.n	8026d06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026d4e:	2300      	movs	r3, #0
 8026d50:	e7d9      	b.n	8026d06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026d52:	4603      	mov	r3, r0
 8026d54:	e7d7      	b.n	8026d06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026d56:	b280      	uxth	r0, r0
 8026d58:	b2bf      	uxth	r7, r7
 8026d5a:	fb00 fe07 	mul.w	lr, r0, r7
 8026d5e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026d62:	0100      	lsls	r0, r0, #4
 8026d64:	eba0 0c0e 	sub.w	ip, r0, lr
 8026d68:	b2bf      	uxth	r7, r7
 8026d6a:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8026d6e:	fa1f fc8c 	uxth.w	ip, ip
 8026d72:	1bed      	subs	r5, r5, r7
 8026d74:	b2ad      	uxth	r5, r5
 8026d76:	fb0c f00a 	mul.w	r0, ip, sl
 8026d7a:	fb05 000b 	mla	r0, r5, fp, r0
 8026d7e:	fb07 0009 	mla	r0, r7, r9, r0
 8026d82:	fb0e 0008 	mla	r0, lr, r8, r0
 8026d86:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026d8a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026d8e:	9003      	str	r0, [sp, #12]
 8026d90:	d018      	beq.n	8026dc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x158>
 8026d92:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026d96:	fb0b f000 	mul.w	r0, fp, r0
 8026d9a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026d9e:	fb0b fb02 	mul.w	fp, fp, r2
 8026da2:	0a02      	lsrs	r2, r0, #8
 8026da4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026da8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026dac:	4402      	add	r2, r0
 8026dae:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026db2:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8026db6:	0a12      	lsrs	r2, r2, #8
 8026db8:	0a00      	lsrs	r0, r0, #8
 8026dba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026dbe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026dc2:	4302      	orrs	r2, r0
 8026dc4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026dc8:	d019      	beq.n	8026dfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x192>
 8026dca:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026dce:	fb0a fb0b 	mul.w	fp, sl, fp
 8026dd2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026dd6:	fb0a fa06 	mul.w	sl, sl, r6
 8026dda:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026dde:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026de2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026de6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026dea:	445e      	add	r6, fp
 8026dec:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026df0:	0a36      	lsrs	r6, r6, #8
 8026df2:	0a00      	lsrs	r0, r0, #8
 8026df4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026df8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026dfc:	4306      	orrs	r6, r0
 8026dfe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026e02:	d019      	beq.n	8026e38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1cc>
 8026e04:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026e08:	fb09 fa0a 	mul.w	sl, r9, sl
 8026e0c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026e10:	fb09 f904 	mul.w	r9, r9, r4
 8026e14:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026e18:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026e1c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026e20:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026e24:	4454      	add	r4, sl
 8026e26:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026e2a:	0a24      	lsrs	r4, r4, #8
 8026e2c:	0a00      	lsrs	r0, r0, #8
 8026e2e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026e32:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026e36:	4304      	orrs	r4, r0
 8026e38:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026e3c:	d019      	beq.n	8026e72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x206>
 8026e3e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026e42:	fb08 f909 	mul.w	r9, r8, r9
 8026e46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026e4a:	fb08 f803 	mul.w	r8, r8, r3
 8026e4e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026e52:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026e56:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026e5a:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026e5e:	444b      	add	r3, r9
 8026e60:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026e64:	0a1b      	lsrs	r3, r3, #8
 8026e66:	0a00      	lsrs	r0, r0, #8
 8026e68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026e6c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026e70:	4303      	orrs	r3, r0
 8026e72:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026e76:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026e7a:	fb0c f808 	mul.w	r8, ip, r8
 8026e7e:	fb05 8800 	mla	r8, r5, r0, r8
 8026e82:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026e86:	fb07 8800 	mla	r8, r7, r0, r8
 8026e8a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026e8e:	fb0e 8000 	mla	r0, lr, r0, r8
 8026e92:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026e96:	fb0c f606 	mul.w	r6, ip, r6
 8026e9a:	0a00      	lsrs	r0, r0, #8
 8026e9c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026ea0:	fb05 6202 	mla	r2, r5, r2, r6
 8026ea4:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8026ea8:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8026eac:	fb07 2700 	mla	r7, r7, r0, r2
 8026eb0:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026eb4:	9b03      	ldr	r3, [sp, #12]
 8026eb6:	9d00      	ldr	r5, [sp, #0]
 8026eb8:	9a02      	ldr	r2, [sp, #8]
 8026eba:	fb0e 7000 	mla	r0, lr, r0, r7
 8026ebe:	43dc      	mvns	r4, r3
 8026ec0:	9b01      	ldr	r3, [sp, #4]
 8026ec2:	b2e4      	uxtb	r4, r4
 8026ec4:	0a00      	lsrs	r0, r0, #8
 8026ec6:	4363      	muls	r3, r4
 8026ec8:	4365      	muls	r5, r4
 8026eca:	4362      	muls	r2, r4
 8026ecc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026ed0:	ea48 0000 	orr.w	r0, r8, r0
 8026ed4:	4614      	mov	r4, r2
 8026ed6:	1c5e      	adds	r6, r3, #1
 8026ed8:	1c6a      	adds	r2, r5, #1
 8026eda:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8026ede:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8026ee2:	0a03      	lsrs	r3, r0, #8
 8026ee4:	0c02      	lsrs	r2, r0, #16
 8026ee6:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8026eea:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8026eee:	00db      	lsls	r3, r3, #3
 8026ef0:	0212      	lsls	r2, r2, #8
 8026ef2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026ef6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026efa:	4313      	orrs	r3, r2
 8026efc:	1c62      	adds	r2, r4, #1
 8026efe:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026f02:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8026f06:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8026f0a:	4318      	orrs	r0, r3
 8026f0c:	8008      	strh	r0, [r1, #0]
 8026f0e:	b005      	add	sp, #20
 8026f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f14:	08033161 	.word	0x08033161
 8026f18:	0803372e 	.word	0x0803372e
 8026f1c:	080331e5 	.word	0x080331e5

08026f20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f24:	ed2d 8b08 	vpush	{d8-d11}
 8026f28:	b09b      	sub	sp, #108	; 0x6c
 8026f2a:	eeb0 aa40 	vmov.f32	s20, s0
 8026f2e:	9218      	str	r2, [sp, #96]	; 0x60
 8026f30:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026f32:	9116      	str	r1, [sp, #88]	; 0x58
 8026f34:	9307      	str	r3, [sp, #28]
 8026f36:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8026f3a:	9019      	str	r0, [sp, #100]	; 0x64
 8026f3c:	6850      	ldr	r0, [r2, #4]
 8026f3e:	6812      	ldr	r2, [r2, #0]
 8026f40:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8026f42:	fb00 1303 	mla	r3, r0, r3, r1
 8026f46:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8026f4c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026f4e:	681b      	ldr	r3, [r3, #0]
 8026f50:	930f      	str	r3, [sp, #60]	; 0x3c
 8026f52:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026f54:	685e      	ldr	r6, [r3, #4]
 8026f56:	eef0 9a60 	vmov.f32	s19, s1
 8026f5a:	eeb0 9a41 	vmov.f32	s18, s2
 8026f5e:	eeb0 8a62 	vmov.f32	s16, s5
 8026f62:	eef0 8a43 	vmov.f32	s17, s6
 8026f66:	eef0 ba44 	vmov.f32	s23, s8
 8026f6a:	eeb0 ba64 	vmov.f32	s22, s9
 8026f6e:	eef0 aa45 	vmov.f32	s21, s10
 8026f72:	3604      	adds	r6, #4
 8026f74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026f76:	2b00      	cmp	r3, #0
 8026f78:	dc03      	bgt.n	8026f82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8026f7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026f7c:	2b00      	cmp	r3, #0
 8026f7e:	f340 8373 	ble.w	8027668 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026f82:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026f84:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026f88:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026f8c:	1e48      	subs	r0, r1, #1
 8026f8e:	1e57      	subs	r7, r2, #1
 8026f90:	9b07      	ldr	r3, [sp, #28]
 8026f92:	2b00      	cmp	r3, #0
 8026f94:	f340 8190 	ble.w	80272b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8026f98:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026f9a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026f9e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026fa2:	d406      	bmi.n	8026fb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026fa4:	4584      	cmp	ip, r0
 8026fa6:	da04      	bge.n	8026fb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026fa8:	2b00      	cmp	r3, #0
 8026faa:	db02      	blt.n	8026fb2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026fac:	42bb      	cmp	r3, r7
 8026fae:	f2c0 8184 	blt.w	80272ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8026fb2:	f11c 0c01 	adds.w	ip, ip, #1
 8026fb6:	f100 8172 	bmi.w	802729e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026fba:	4561      	cmp	r1, ip
 8026fbc:	f2c0 816f 	blt.w	802729e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026fc0:	3301      	adds	r3, #1
 8026fc2:	f100 816c 	bmi.w	802729e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026fc6:	429a      	cmp	r2, r3
 8026fc8:	f2c0 8169 	blt.w	802729e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026fcc:	9b07      	ldr	r3, [sp, #28]
 8026fce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026fd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8026fd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026fd4:	2b00      	cmp	r3, #0
 8026fd6:	f340 818e 	ble.w	80272f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8026fda:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026fdc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026fe0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026fe2:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8026fe6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026fe8:	141b      	asrs	r3, r3, #16
 8026fea:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026fee:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026ff2:	f100 81d1 	bmi.w	8027398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026ff6:	f101 38ff 	add.w	r8, r1, #4294967295
 8026ffa:	4543      	cmp	r3, r8
 8026ffc:	f280 81cc 	bge.w	8027398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8027000:	f1bc 0f00 	cmp.w	ip, #0
 8027004:	f2c0 81c8 	blt.w	8027398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8027008:	f10e 38ff 	add.w	r8, lr, #4294967295
 802700c:	45c4      	cmp	ip, r8
 802700e:	f280 81c3 	bge.w	8027398 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8027012:	b209      	sxth	r1, r1
 8027014:	fb0c 3301 	mla	r3, ip, r1, r3
 8027018:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802701a:	eb04 0803 	add.w	r8, r4, r3
 802701e:	5ce3      	ldrb	r3, [r4, r3]
 8027020:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027024:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8027028:	2a00      	cmp	r2, #0
 802702a:	f000 81aa 	beq.w	8027382 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802702e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8027032:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8027036:	940b      	str	r4, [sp, #44]	; 0x2c
 8027038:	0e24      	lsrs	r4, r4, #24
 802703a:	9412      	str	r4, [sp, #72]	; 0x48
 802703c:	b178      	cbz	r0, 802705e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802703e:	eb08 0c01 	add.w	ip, r8, r1
 8027042:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027046:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802704a:	9108      	str	r1, [sp, #32]
 802704c:	0e09      	lsrs	r1, r1, #24
 802704e:	9110      	str	r1, [sp, #64]	; 0x40
 8027050:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8027054:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027058:	910c      	str	r1, [sp, #48]	; 0x30
 802705a:	0e09      	lsrs	r1, r1, #24
 802705c:	9113      	str	r1, [sp, #76]	; 0x4c
 802705e:	b292      	uxth	r2, r2
 8027060:	b280      	uxth	r0, r0
 8027062:	fb02 f900 	mul.w	r9, r2, r0
 8027066:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802706a:	0112      	lsls	r2, r2, #4
 802706c:	eba2 0809 	sub.w	r8, r2, r9
 8027070:	b280      	uxth	r0, r0
 8027072:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027076:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027078:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802707a:	fa1f f888 	uxth.w	r8, r8
 802707e:	1a12      	subs	r2, r2, r0
 8027080:	b292      	uxth	r2, r2
 8027082:	fb08 f101 	mul.w	r1, r8, r1
 8027086:	fb02 110e 	mla	r1, r2, lr, r1
 802708a:	fb00 1104 	mla	r1, r0, r4, r1
 802708e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027090:	fb09 1104 	mla	r1, r9, r4, r1
 8027094:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027098:	2900      	cmp	r1, #0
 802709a:	f000 80f5 	beq.w	8027288 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802709e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80270a2:	d01b      	beq.n	80270dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80270a4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80270a8:	fb0e fa0a 	mul.w	sl, lr, sl
 80270ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80270b0:	fb0e fe03 	mul.w	lr, lr, r3
 80270b4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80270b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80270bc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80270c0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80270c4:	4453      	add	r3, sl
 80270c6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80270ca:	0a1b      	lsrs	r3, r3, #8
 80270cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270d0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80270d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80270d8:	ea43 030c 	orr.w	r3, r3, ip
 80270dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80270de:	2cff      	cmp	r4, #255	; 0xff
 80270e0:	d021      	beq.n	8027126 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80270e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80270e4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80270e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80270ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80270ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80270f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80270f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80270f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80270fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80270fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027102:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027106:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802710a:	44de      	add	lr, fp
 802710c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027110:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027114:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027118:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802711c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027120:	ea4e 040a 	orr.w	r4, lr, sl
 8027124:	940b      	str	r4, [sp, #44]	; 0x2c
 8027126:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027128:	2cff      	cmp	r4, #255	; 0xff
 802712a:	d021      	beq.n	8027170 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802712c:	9c08      	ldr	r4, [sp, #32]
 802712e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027132:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027134:	fb04 fb0b 	mul.w	fp, r4, fp
 8027138:	9c08      	ldr	r4, [sp, #32]
 802713a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802713e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027140:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027144:	fb04 fa0a 	mul.w	sl, r4, sl
 8027148:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802714c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027150:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027154:	44de      	add	lr, fp
 8027156:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802715a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802715e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027162:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027166:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802716a:	ea4e 040a 	orr.w	r4, lr, sl
 802716e:	9408      	str	r4, [sp, #32]
 8027170:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027172:	2cff      	cmp	r4, #255	; 0xff
 8027174:	d021      	beq.n	80271ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8027176:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027178:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802717c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802717e:	fb04 fb0b 	mul.w	fp, r4, fp
 8027182:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027184:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027188:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802718a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802718e:	fb04 fa0a 	mul.w	sl, r4, sl
 8027192:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027196:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802719a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802719e:	44de      	add	lr, fp
 80271a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80271a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80271b4:	ea4e 040a 	orr.w	r4, lr, sl
 80271b8:	940c      	str	r4, [sp, #48]	; 0x30
 80271ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80271bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80271c0:	9c08      	ldr	r4, [sp, #32]
 80271c2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80271c6:	fb08 fc0c 	mul.w	ip, r8, ip
 80271ca:	fb02 cc0e 	mla	ip, r2, lr, ip
 80271ce:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80271d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80271d4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80271d8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80271dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80271de:	fb09 cc0e 	mla	ip, r9, lr, ip
 80271e2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80271e6:	fb08 f80e 	mul.w	r8, r8, lr
 80271ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80271ee:	fb02 8303 	mla	r3, r2, r3, r8
 80271f2:	9a08      	ldr	r2, [sp, #32]
 80271f4:	f8b7 8000 	ldrh.w	r8, [r7]
 80271f8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80271fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80271fe:	fb00 330a 	mla	r3, r0, sl, r3
 8027202:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8027206:	fb09 3900 	mla	r9, r9, r0, r3
 802720a:	43c9      	mvns	r1, r1
 802720c:	ea4f 2228 	mov.w	r2, r8, asr #8
 8027210:	fa5f fe81 	uxtb.w	lr, r1
 8027214:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027218:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802721c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027220:	fb02 f20e 	mul.w	r2, r2, lr
 8027224:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027228:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802722c:	ea4c 0c09 	orr.w	ip, ip, r9
 8027230:	1c53      	adds	r3, r2, #1
 8027232:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027236:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802723a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802723e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027242:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027246:	4a63      	ldr	r2, [pc, #396]	; (80273d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8027248:	fb00 f00e 	mul.w	r0, r0, lr
 802724c:	b2db      	uxtb	r3, r3
 802724e:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8027252:	1c43      	adds	r3, r0, #1
 8027254:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027258:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802725c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8027260:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027264:	b2c9      	uxtb	r1, r1
 8027266:	00db      	lsls	r3, r3, #3
 8027268:	fb01 f10e 	mul.w	r1, r1, lr
 802726c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027270:	4313      	orrs	r3, r2
 8027272:	1c4a      	adds	r2, r1, #1
 8027274:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027278:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802727c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8027280:	ea4c 0c03 	orr.w	ip, ip, r3
 8027284:	f8a7 c000 	strh.w	ip, [r7]
 8027288:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802728a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802728c:	441a      	add	r2, r3
 802728e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027290:	922d      	str	r2, [sp, #180]	; 0xb4
 8027292:	441d      	add	r5, r3
 8027294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027296:	3b01      	subs	r3, #1
 8027298:	3702      	adds	r7, #2
 802729a:	9317      	str	r3, [sp, #92]	; 0x5c
 802729c:	e699      	b.n	8026fd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802729e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80272a0:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80272a2:	441c      	add	r4, r3
 80272a4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80272a6:	942d      	str	r4, [sp, #180]	; 0xb4
 80272a8:	441d      	add	r5, r3
 80272aa:	9b07      	ldr	r3, [sp, #28]
 80272ac:	3b01      	subs	r3, #1
 80272ae:	9307      	str	r3, [sp, #28]
 80272b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80272b2:	3302      	adds	r3, #2
 80272b4:	930a      	str	r3, [sp, #40]	; 0x28
 80272b6:	e66b      	b.n	8026f90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80272b8:	d024      	beq.n	8027304 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80272ba:	9b07      	ldr	r3, [sp, #28]
 80272bc:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80272be:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80272c0:	3b01      	subs	r3, #1
 80272c2:	fb00 4003 	mla	r0, r0, r3, r4
 80272c6:	1400      	asrs	r0, r0, #16
 80272c8:	f53f ae80 	bmi.w	8026fcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80272cc:	3901      	subs	r1, #1
 80272ce:	4288      	cmp	r0, r1
 80272d0:	f6bf ae7c 	bge.w	8026fcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80272d4:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80272d6:	fb01 5303 	mla	r3, r1, r3, r5
 80272da:	141b      	asrs	r3, r3, #16
 80272dc:	f53f ae76 	bmi.w	8026fcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80272e0:	3a01      	subs	r2, #1
 80272e2:	4293      	cmp	r3, r2
 80272e4:	f6bf ae72 	bge.w	8026fcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80272e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80272ec:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80272f0:	f1bb 0f00 	cmp.w	fp, #0
 80272f4:	dc70      	bgt.n	80273d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80272f6:	9b07      	ldr	r3, [sp, #28]
 80272f8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80272fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80272fe:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027302:	930a      	str	r3, [sp, #40]	; 0x28
 8027304:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027306:	2b00      	cmp	r3, #0
 8027308:	f340 81ae 	ble.w	8027668 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802730c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027314:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027318:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802731a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802731e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027322:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027326:	eef0 6a48 	vmov.f32	s13, s16
 802732a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802732e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027332:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027336:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 802733a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802733e:	eef0 6a68 	vmov.f32	s13, s17
 8027342:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027346:	ee18 2a10 	vmov	r2, s16
 802734a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802734e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027352:	ee18 2a90 	vmov	r2, s17
 8027356:	932f      	str	r3, [sp, #188]	; 0xbc
 8027358:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802735a:	fb92 f3f3 	sdiv	r3, r2, r3
 802735e:	9330      	str	r3, [sp, #192]	; 0xc0
 8027360:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027362:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027364:	3b01      	subs	r3, #1
 8027366:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802736a:	9316      	str	r3, [sp, #88]	; 0x58
 802736c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802736e:	bf08      	it	eq
 8027370:	4613      	moveq	r3, r2
 8027372:	ee16 5a90 	vmov	r5, s13
 8027376:	9307      	str	r3, [sp, #28]
 8027378:	eef0 8a67 	vmov.f32	s17, s15
 802737c:	eeb0 8a47 	vmov.f32	s16, s14
 8027380:	e5f8      	b.n	8026f74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8027382:	2800      	cmp	r0, #0
 8027384:	f43f ae6b 	beq.w	802705e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8027388:	f818 1001 	ldrb.w	r1, [r8, r1]
 802738c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027390:	9108      	str	r1, [sp, #32]
 8027392:	0e09      	lsrs	r1, r1, #24
 8027394:	9110      	str	r1, [sp, #64]	; 0x40
 8027396:	e662      	b.n	802705e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8027398:	f113 0801 	adds.w	r8, r3, #1
 802739c:	f53f af74 	bmi.w	8027288 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80273a0:	4541      	cmp	r1, r8
 80273a2:	f6ff af71 	blt.w	8027288 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80273a6:	f11c 0801 	adds.w	r8, ip, #1
 80273aa:	f53f af6d 	bmi.w	8027288 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80273ae:	45c6      	cmp	lr, r8
 80273b0:	f6ff af6a 	blt.w	8027288 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80273b4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80273b8:	b209      	sxth	r1, r1
 80273ba:	fa0f f38e 	sxth.w	r3, lr
 80273be:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80273c2:	9301      	str	r3, [sp, #4]
 80273c4:	9100      	str	r1, [sp, #0]
 80273c6:	4633      	mov	r3, r6
 80273c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80273ca:	9819      	ldr	r0, [sp, #100]	; 0x64
 80273cc:	4639      	mov	r1, r7
 80273ce:	f7ff fc4d 	bl	8026c6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80273d2:	e759      	b.n	8027288 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80273d4:	fffff800 	.word	0xfffff800
 80273d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80273da:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80273dc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80273e0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80273e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80273e6:	1427      	asrs	r7, r4, #16
 80273e8:	142b      	asrs	r3, r5, #16
 80273ea:	fb01 7303 	mla	r3, r1, r3, r7
 80273ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80273f0:	18e7      	adds	r7, r4, r3
 80273f2:	5ce3      	ldrb	r3, [r4, r3]
 80273f4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80273f8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80273fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027400:	2a00      	cmp	r2, #0
 8027402:	f000 8127 	beq.w	8027654 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8027406:	f897 e001 	ldrb.w	lr, [r7, #1]
 802740a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802740e:	940d      	str	r4, [sp, #52]	; 0x34
 8027410:	0e24      	lsrs	r4, r4, #24
 8027412:	9414      	str	r4, [sp, #80]	; 0x50
 8027414:	b170      	cbz	r0, 8027434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027416:	eb07 0e01 	add.w	lr, r7, r1
 802741a:	5c79      	ldrb	r1, [r7, r1]
 802741c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027420:	9109      	str	r1, [sp, #36]	; 0x24
 8027422:	0e09      	lsrs	r1, r1, #24
 8027424:	9111      	str	r1, [sp, #68]	; 0x44
 8027426:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802742a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802742e:	910e      	str	r1, [sp, #56]	; 0x38
 8027430:	0e09      	lsrs	r1, r1, #24
 8027432:	9115      	str	r1, [sp, #84]	; 0x54
 8027434:	b292      	uxth	r2, r2
 8027436:	b280      	uxth	r0, r0
 8027438:	fb02 f800 	mul.w	r8, r2, r0
 802743c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027440:	0112      	lsls	r2, r2, #4
 8027442:	eba2 0e08 	sub.w	lr, r2, r8
 8027446:	b280      	uxth	r0, r0
 8027448:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802744c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802744e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027450:	fa1f fe8e 	uxth.w	lr, lr
 8027454:	1a09      	subs	r1, r1, r0
 8027456:	b289      	uxth	r1, r1
 8027458:	fb0e f202 	mul.w	r2, lr, r2
 802745c:	fb01 220c 	mla	r2, r1, ip, r2
 8027460:	fb00 2204 	mla	r2, r0, r4, r2
 8027464:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027466:	fb08 2204 	mla	r2, r8, r4, r2
 802746a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802746e:	2a00      	cmp	r2, #0
 8027470:	f000 80e5 	beq.w	802763e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027474:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027478:	d019      	beq.n	80274ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 802747a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802747e:	fb0c fa0a 	mul.w	sl, ip, sl
 8027482:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027486:	fb0c fc03 	mul.w	ip, ip, r3
 802748a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802748e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027492:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027496:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802749a:	4453      	add	r3, sl
 802749c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80274a0:	0a1b      	lsrs	r3, r3, #8
 80274a2:	0a3f      	lsrs	r7, r7, #8
 80274a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80274a8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80274ac:	433b      	orrs	r3, r7
 80274ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80274b0:	2cff      	cmp	r4, #255	; 0xff
 80274b2:	d020      	beq.n	80274f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 80274b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80274b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80274ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80274bc:	4367      	muls	r7, r4
 80274be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80274c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80274c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80274c6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80274ca:	fb04 fa0a 	mul.w	sl, r4, sl
 80274ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80274d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80274d6:	44bc      	add	ip, r7
 80274d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80274dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80274e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80274e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80274ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80274f0:	ea4c 040a 	orr.w	r4, ip, sl
 80274f4:	940d      	str	r4, [sp, #52]	; 0x34
 80274f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80274f8:	2cff      	cmp	r4, #255	; 0xff
 80274fa:	d020      	beq.n	802753e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 80274fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80274fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027502:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027504:	4367      	muls	r7, r4
 8027506:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027508:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802750c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802750e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027512:	fb04 fa0a 	mul.w	sl, r4, sl
 8027516:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802751a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802751e:	44bc      	add	ip, r7
 8027520:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027524:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027528:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802752c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027530:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027534:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027538:	ea4c 040a 	orr.w	r4, ip, sl
 802753c:	9409      	str	r4, [sp, #36]	; 0x24
 802753e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027540:	2cff      	cmp	r4, #255	; 0xff
 8027542:	d020      	beq.n	8027586 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8027544:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027546:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802754a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802754c:	4367      	muls	r7, r4
 802754e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027550:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027554:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027556:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802755a:	fb04 fa0a 	mul.w	sl, r4, sl
 802755e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027562:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027566:	44bc      	add	ip, r7
 8027568:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802756c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027570:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027574:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027578:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802757c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027580:	ea4c 040a 	orr.w	r4, ip, sl
 8027584:	940e      	str	r4, [sp, #56]	; 0x38
 8027586:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027588:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802758c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802758e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027592:	fb0e f707 	mul.w	r7, lr, r7
 8027596:	fb01 770c 	mla	r7, r1, ip, r7
 802759a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802759e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80275a0:	fb00 770c 	mla	r7, r0, ip, r7
 80275a4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80275a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80275aa:	fb08 770c 	mla	r7, r8, ip, r7
 80275ae:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80275b2:	fb0e fe0c 	mul.w	lr, lr, ip
 80275b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80275ba:	fb01 e303 	mla	r3, r1, r3, lr
 80275be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80275c0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80275c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80275c6:	fb00 330a 	mla	r3, r0, sl, r3
 80275ca:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80275ce:	fb08 3c0c 	mla	ip, r8, ip, r3
 80275d2:	f8b9 3000 	ldrh.w	r3, [r9]
 80275d6:	43d2      	mvns	r2, r2
 80275d8:	1218      	asrs	r0, r3, #8
 80275da:	b2d2      	uxtb	r2, r2
 80275dc:	10d9      	asrs	r1, r3, #3
 80275de:	0a3f      	lsrs	r7, r7, #8
 80275e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275e4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80275e8:	00db      	lsls	r3, r3, #3
 80275ea:	4350      	muls	r0, r2
 80275ec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80275f0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80275f4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80275f8:	b2db      	uxtb	r3, r3
 80275fa:	ea47 070c 	orr.w	r7, r7, ip
 80275fe:	4351      	muls	r1, r2
 8027600:	4353      	muls	r3, r2
 8027602:	1c42      	adds	r2, r0, #1
 8027604:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027608:	0c3a      	lsrs	r2, r7, #16
 802760a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802760e:	4a19      	ldr	r2, [pc, #100]	; (8027674 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8027610:	b2c0      	uxtb	r0, r0
 8027612:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8027616:	1c4a      	adds	r2, r1, #1
 8027618:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802761c:	0a3a      	lsrs	r2, r7, #8
 802761e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027622:	00c9      	lsls	r1, r1, #3
 8027624:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027628:	4301      	orrs	r1, r0
 802762a:	1c58      	adds	r0, r3, #1
 802762c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027630:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027634:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8027638:	4308      	orrs	r0, r1
 802763a:	f8a9 0000 	strh.w	r0, [r9]
 802763e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027640:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027642:	441a      	add	r2, r3
 8027644:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027646:	922d      	str	r2, [sp, #180]	; 0xb4
 8027648:	f109 0902 	add.w	r9, r9, #2
 802764c:	441d      	add	r5, r3
 802764e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027652:	e64d      	b.n	80272f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8027654:	2800      	cmp	r0, #0
 8027656:	f43f aeed 	beq.w	8027434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802765a:	5c79      	ldrb	r1, [r7, r1]
 802765c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027660:	9109      	str	r1, [sp, #36]	; 0x24
 8027662:	0e09      	lsrs	r1, r1, #24
 8027664:	9111      	str	r1, [sp, #68]	; 0x44
 8027666:	e6e5      	b.n	8027434 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027668:	b01b      	add	sp, #108	; 0x6c
 802766a:	ecbd 8b08 	vpop	{d8-d11}
 802766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027672:	bf00      	nop
 8027674:	fffff800 	.word	0xfffff800

08027678 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8027678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802767c:	b085      	sub	sp, #20
 802767e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8027682:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027686:	9103      	str	r1, [sp, #12]
 8027688:	fb05 7106 	mla	r1, r5, r6, r7
 802768c:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8027690:	2d00      	cmp	r5, #0
 8027692:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027696:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802769a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802769e:	9401      	str	r4, [sp, #4]
 80276a0:	eb03 0901 	add.w	r9, r3, r1
 80276a4:	f2c0 80c0 	blt.w	8027828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80276a8:	45a8      	cmp	r8, r5
 80276aa:	f340 80bd 	ble.w	8027828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80276ae:	2f00      	cmp	r7, #0
 80276b0:	f2c0 80b6 	blt.w	8027820 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80276b4:	42be      	cmp	r6, r7
 80276b6:	f340 80b3 	ble.w	8027820 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80276ba:	f813 c001 	ldrb.w	ip, [r3, r1]
 80276be:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80276c2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80276c6:	d019      	beq.n	80276fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80276c8:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80276cc:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80276d0:	435a      	muls	r2, r3
 80276d2:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80276d6:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80276da:	fb0c f403 	mul.w	r4, ip, r3
 80276de:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80276e2:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80276e6:	441a      	add	r2, r3
 80276e8:	f104 0320 	add.w	r3, r4, #32
 80276ec:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80276f0:	0a1b      	lsrs	r3, r3, #8
 80276f2:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80276f6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80276fa:	4319      	orrs	r1, r3
 80276fc:	b289      	uxth	r1, r1
 80276fe:	1c7b      	adds	r3, r7, #1
 8027700:	f100 8097 	bmi.w	8027832 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8027704:	429e      	cmp	r6, r3
 8027706:	f340 8094 	ble.w	8027832 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802770a:	2800      	cmp	r0, #0
 802770c:	f000 8094 	beq.w	8027838 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8027710:	f899 4001 	ldrb.w	r4, [r9, #1]
 8027714:	9b01      	ldr	r3, [sp, #4]
 8027716:	2cff      	cmp	r4, #255	; 0xff
 8027718:	885b      	ldrh	r3, [r3, #2]
 802771a:	d01b      	beq.n	8027754 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 802771c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8027720:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8027724:	fb0a f202 	mul.w	r2, sl, r2
 8027728:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802772c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027730:	fb04 fa03 	mul.w	sl, r4, r3
 8027734:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8027738:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802773c:	441a      	add	r2, r3
 802773e:	f10a 0320 	add.w	r3, sl, #32
 8027742:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027746:	0a1b      	lsrs	r3, r3, #8
 8027748:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802774c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027750:	ea4b 0303 	orr.w	r3, fp, r3
 8027754:	b29b      	uxth	r3, r3
 8027756:	3501      	adds	r5, #1
 8027758:	d474      	bmi.n	8027844 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802775a:	45a8      	cmp	r8, r5
 802775c:	dd72      	ble.n	8027844 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802775e:	f1be 0f00 	cmp.w	lr, #0
 8027762:	f000 8120 	beq.w	80279a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8027766:	2f00      	cmp	r7, #0
 8027768:	db69      	blt.n	802783e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802776a:	42be      	cmp	r6, r7
 802776c:	dd67      	ble.n	802783e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802776e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027772:	9a01      	ldr	r2, [sp, #4]
 8027774:	2dff      	cmp	r5, #255	; 0xff
 8027776:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802777a:	d01c      	beq.n	80277b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 802777c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8027780:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8027784:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027788:	fb05 fa0b 	mul.w	sl, r5, fp
 802778c:	fb08 f802 	mul.w	r8, r8, r2
 8027790:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027794:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8027798:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802779c:	4490      	add	r8, r2
 802779e:	f10a 0220 	add.w	r2, sl, #32
 80277a2:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80277a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80277aa:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80277ae:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80277b2:	ea4b 0b0a 	orr.w	fp, fp, sl
 80277b6:	fa1f fb8b 	uxth.w	fp, fp
 80277ba:	3701      	adds	r7, #1
 80277bc:	d447      	bmi.n	802784e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80277be:	42be      	cmp	r6, r7
 80277c0:	dd45      	ble.n	802784e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80277c2:	2800      	cmp	r0, #0
 80277c4:	d046      	beq.n	8027854 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 80277c6:	3601      	adds	r6, #1
 80277c8:	9a01      	ldr	r2, [sp, #4]
 80277ca:	f819 7006 	ldrb.w	r7, [r9, r6]
 80277ce:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80277d2:	2fff      	cmp	r7, #255	; 0xff
 80277d4:	d01a      	beq.n	802780c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 80277d6:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80277da:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80277de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80277e2:	fb07 f902 	mul.w	r9, r7, r2
 80277e6:	fb08 f806 	mul.w	r8, r8, r6
 80277ea:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80277ee:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80277f2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80277f6:	44b0      	add	r8, r6
 80277f8:	f109 0620 	add.w	r6, r9, #32
 80277fc:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8027800:	0a36      	lsrs	r6, r6, #8
 8027802:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8027806:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802780a:	4332      	orrs	r2, r6
 802780c:	b292      	uxth	r2, r2
 802780e:	280f      	cmp	r0, #15
 8027810:	d922      	bls.n	8027858 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8027812:	4b69      	ldr	r3, [pc, #420]	; (80279b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8027814:	4a69      	ldr	r2, [pc, #420]	; (80279bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8027816:	486a      	ldr	r0, [pc, #424]	; (80279c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8027818:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802781c:	f006 fcfa 	bl	802e214 <__assert_func>
 8027820:	f04f 0c00 	mov.w	ip, #0
 8027824:	4661      	mov	r1, ip
 8027826:	e76a      	b.n	80276fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8027828:	2400      	movs	r4, #0
 802782a:	46a4      	mov	ip, r4
 802782c:	4623      	mov	r3, r4
 802782e:	4621      	mov	r1, r4
 8027830:	e791      	b.n	8027756 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8027832:	2400      	movs	r4, #0
 8027834:	4623      	mov	r3, r4
 8027836:	e78e      	b.n	8027756 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8027838:	4604      	mov	r4, r0
 802783a:	4603      	mov	r3, r0
 802783c:	e78b      	b.n	8027756 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802783e:	2500      	movs	r5, #0
 8027840:	46ab      	mov	fp, r5
 8027842:	e7ba      	b.n	80277ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8027844:	2700      	movs	r7, #0
 8027846:	463d      	mov	r5, r7
 8027848:	463a      	mov	r2, r7
 802784a:	46bb      	mov	fp, r7
 802784c:	e7df      	b.n	802780e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802784e:	2700      	movs	r7, #0
 8027850:	463a      	mov	r2, r7
 8027852:	e7dc      	b.n	802780e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8027854:	4607      	mov	r7, r0
 8027856:	4602      	mov	r2, r0
 8027858:	f1be 0f0f 	cmp.w	lr, #15
 802785c:	d8d9      	bhi.n	8027812 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802785e:	b286      	uxth	r6, r0
 8027860:	fa1f f98e 	uxth.w	r9, lr
 8027864:	fb06 f809 	mul.w	r8, r6, r9
 8027868:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802786c:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8027870:	0136      	lsls	r6, r6, #4
 8027872:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027876:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802787a:	9601      	str	r6, [sp, #4]
 802787c:	ea4a 0101 	orr.w	r1, sl, r1
 8027880:	fa1f f689 	uxth.w	r6, r9
 8027884:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8027888:	fb10 f90e 	smulbb	r9, r0, lr
 802788c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8027890:	9602      	str	r6, [sp, #8]
 8027892:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027896:	460e      	mov	r6, r1
 8027898:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802789c:	f1ce 0110 	rsb	r1, lr, #16
 80278a0:	1a09      	subs	r1, r1, r0
 80278a2:	ea4a 0303 	orr.w	r3, sl, r3
 80278a6:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80278aa:	4343      	muls	r3, r0
 80278ac:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80278b0:	9801      	ldr	r0, [sp, #4]
 80278b2:	fb01 3106 	mla	r1, r1, r6, r3
 80278b6:	9e02      	ldr	r6, [sp, #8]
 80278b8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80278bc:	1b80      	subs	r0, r0, r6
 80278be:	9e01      	ldr	r6, [sp, #4]
 80278c0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80278c4:	eba6 0608 	sub.w	r6, r6, r8
 80278c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80278cc:	b2b6      	uxth	r6, r6
 80278ce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80278d2:	ea4a 0202 	orr.w	r2, sl, r2
 80278d6:	b280      	uxth	r0, r0
 80278d8:	4374      	muls	r4, r6
 80278da:	fb09 1302 	mla	r3, r9, r2, r1
 80278de:	fb0c 4400 	mla	r4, ip, r0, r4
 80278e2:	9a03      	ldr	r2, [sp, #12]
 80278e4:	9802      	ldr	r0, [sp, #8]
 80278e6:	8811      	ldrh	r1, [r2, #0]
 80278e8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80278ec:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80278f0:	fb00 4505 	mla	r5, r0, r5, r4
 80278f4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80278f8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80278fc:	fb08 5707 	mla	r7, r8, r7, r5
 8027900:	ea4a 0b0b 	orr.w	fp, sl, fp
 8027904:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027908:	b292      	uxth	r2, r2
 802790a:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802790e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8027912:	4357      	muls	r7, r2
 8027914:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8027918:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802791c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027920:	f107 0801 	add.w	r8, r7, #1
 8027924:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027928:	ea43 0e0e 	orr.w	lr, r3, lr
 802792c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8027930:	fa1f f38e 	uxth.w	r3, lr
 8027934:	1208      	asrs	r0, r1, #8
 8027936:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802793a:	b2ff      	uxtb	r7, r7
 802793c:	121c      	asrs	r4, r3, #8
 802793e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027942:	fb10 f007 	smulbb	r0, r0, r7
 8027946:	10cd      	asrs	r5, r1, #3
 8027948:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802794c:	fb04 0402 	mla	r4, r4, r2, r0
 8027950:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027954:	10d8      	asrs	r0, r3, #3
 8027956:	fb15 f507 	smulbb	r5, r5, r7
 802795a:	00db      	lsls	r3, r3, #3
 802795c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027960:	fb00 5002 	mla	r0, r0, r2, r5
 8027964:	b2dd      	uxtb	r5, r3
 8027966:	00cb      	lsls	r3, r1, #3
 8027968:	b2db      	uxtb	r3, r3
 802796a:	fb13 f307 	smulbb	r3, r3, r7
 802796e:	fb05 3202 	mla	r2, r5, r2, r3
 8027972:	b2a4      	uxth	r4, r4
 8027974:	b292      	uxth	r2, r2
 8027976:	1c63      	adds	r3, r4, #1
 8027978:	b280      	uxth	r0, r0
 802797a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802797e:	1c53      	adds	r3, r2, #1
 8027980:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027984:	1c42      	adds	r2, r0, #1
 8027986:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802798a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802798e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027992:	0940      	lsrs	r0, r0, #5
 8027994:	4323      	orrs	r3, r4
 8027996:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802799a:	9a03      	ldr	r2, [sp, #12]
 802799c:	4303      	orrs	r3, r0
 802799e:	8013      	strh	r3, [r2, #0]
 80279a0:	b005      	add	sp, #20
 80279a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279a6:	280f      	cmp	r0, #15
 80279a8:	f63f af33 	bhi.w	8027812 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80279ac:	4677      	mov	r7, lr
 80279ae:	4675      	mov	r5, lr
 80279b0:	4672      	mov	r2, lr
 80279b2:	46f3      	mov	fp, lr
 80279b4:	e753      	b.n	802785e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 80279b6:	bf00      	nop
 80279b8:	08033161 	.word	0x08033161
 80279bc:	0803372e 	.word	0x0803372e
 80279c0:	080331e5 	.word	0x080331e5

080279c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80279c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279c8:	ed2d 8b08 	vpush	{d8-d11}
 80279cc:	b097      	sub	sp, #92	; 0x5c
 80279ce:	eeb0 aa40 	vmov.f32	s20, s0
 80279d2:	9214      	str	r2, [sp, #80]	; 0x50
 80279d4:	9308      	str	r3, [sp, #32]
 80279d6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80279d8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80279dc:	9312      	str	r3, [sp, #72]	; 0x48
 80279de:	9111      	str	r1, [sp, #68]	; 0x44
 80279e0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80279e4:	9015      	str	r0, [sp, #84]	; 0x54
 80279e6:	6850      	ldr	r0, [r2, #4]
 80279e8:	6812      	ldr	r2, [r2, #0]
 80279ea:	fb00 1303 	mla	r3, r0, r3, r1
 80279ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80279f2:	9309      	str	r3, [sp, #36]	; 0x24
 80279f4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80279f6:	681b      	ldr	r3, [r3, #0]
 80279f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80279fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80279fc:	685b      	ldr	r3, [r3, #4]
 80279fe:	930c      	str	r3, [sp, #48]	; 0x30
 8027a00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8027a04:	930a      	str	r3, [sp, #40]	; 0x28
 8027a06:	eef0 9a60 	vmov.f32	s19, s1
 8027a0a:	eeb0 9a41 	vmov.f32	s18, s2
 8027a0e:	eeb0 8a62 	vmov.f32	s16, s5
 8027a12:	eef0 8a43 	vmov.f32	s17, s6
 8027a16:	eef0 ba44 	vmov.f32	s23, s8
 8027a1a:	eeb0 ba64 	vmov.f32	s22, s9
 8027a1e:	eef0 aa45 	vmov.f32	s21, s10
 8027a22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027a24:	2b00      	cmp	r3, #0
 8027a26:	dc03      	bgt.n	8027a30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027a2a:	2b00      	cmp	r3, #0
 8027a2c:	f340 83cb 	ble.w	80281c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8027a30:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027a32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027a36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027a3a:	1e48      	subs	r0, r1, #1
 8027a3c:	1e55      	subs	r5, r2, #1
 8027a3e:	9b08      	ldr	r3, [sp, #32]
 8027a40:	2b00      	cmp	r3, #0
 8027a42:	f340 81a3 	ble.w	8027d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8027a46:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8027a48:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027a4a:	1436      	asrs	r6, r6, #16
 8027a4c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027a50:	d406      	bmi.n	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027a52:	4286      	cmp	r6, r0
 8027a54:	da04      	bge.n	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027a56:	2b00      	cmp	r3, #0
 8027a58:	db02      	blt.n	8027a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027a5a:	42ab      	cmp	r3, r5
 8027a5c:	f2c0 8197 	blt.w	8027d8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8027a60:	3601      	adds	r6, #1
 8027a62:	f100 8184 	bmi.w	8027d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027a66:	42b1      	cmp	r1, r6
 8027a68:	f2c0 8181 	blt.w	8027d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027a6c:	3301      	adds	r3, #1
 8027a6e:	f100 817e 	bmi.w	8027d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027a72:	429a      	cmp	r2, r3
 8027a74:	f2c0 817b 	blt.w	8027d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027a78:	9b08      	ldr	r3, [sp, #32]
 8027a7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027a7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8027a7e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027a82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027a84:	2b00      	cmp	r3, #0
 8027a86:	f340 81a4 	ble.w	8027dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8027a8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027a8c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8027a8e:	1418      	asrs	r0, r3, #16
 8027a90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027a92:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027a96:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027a98:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027a9c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027a9e:	142d      	asrs	r5, r5, #16
 8027aa0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027aa4:	f100 81f8 	bmi.w	8027e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8027aa8:	f102 3eff 	add.w	lr, r2, #4294967295
 8027aac:	4575      	cmp	r5, lr
 8027aae:	f280 81f3 	bge.w	8027e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8027ab2:	2800      	cmp	r0, #0
 8027ab4:	f2c0 81f0 	blt.w	8027e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8027ab8:	f103 3eff 	add.w	lr, r3, #4294967295
 8027abc:	4570      	cmp	r0, lr
 8027abe:	f280 81eb 	bge.w	8027e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8027ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027ac4:	b212      	sxth	r2, r2
 8027ac6:	fb00 5002 	mla	r0, r0, r2, r5
 8027aca:	fa1f fe81 	uxth.w	lr, r1
 8027ace:	eb03 0a00 	add.w	sl, r3, r0
 8027ad2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027ad6:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027ada:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027ade:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027ae2:	b29b      	uxth	r3, r3
 8027ae4:	f1bc 0f00 	cmp.w	ip, #0
 8027ae8:	f000 81b9 	beq.w	8027e5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8027aec:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027af0:	940d      	str	r4, [sp, #52]	; 0x34
 8027af2:	eb0a 0b02 	add.w	fp, sl, r2
 8027af6:	fa1f fa8c 	uxth.w	sl, ip
 8027afa:	fb0a fe0e 	mul.w	lr, sl, lr
 8027afe:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8027b02:	fa1f fa8a 	uxth.w	sl, sl
 8027b06:	eba5 050e 	sub.w	r5, r5, lr
 8027b0a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027b0e:	940e      	str	r4, [sp, #56]	; 0x38
 8027b10:	eba3 030a 	sub.w	r3, r3, sl
 8027b14:	b2ad      	uxth	r5, r5
 8027b16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027b18:	b29b      	uxth	r3, r3
 8027b1a:	fb08 f505 	mul.w	r5, r8, r5
 8027b1e:	fb09 5303 	mla	r3, r9, r3, r5
 8027b22:	fb0a 3304 	mla	r3, sl, r4, r3
 8027b26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027b28:	fb0e 3304 	mla	r3, lr, r4, r3
 8027b2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027b30:	2b00      	cmp	r3, #0
 8027b32:	f000 810f 	beq.w	8027d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027b36:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027b38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027b3c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027b40:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027b44:	f000 8190 	beq.w	8027e68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8027b48:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027b4c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027b50:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027b54:	fb09 f000 	mul.w	r0, r9, r0
 8027b58:	fb0a fe0e 	mul.w	lr, sl, lr
 8027b5c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027b60:	f100 0b20 	add.w	fp, r0, #32
 8027b64:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027b68:	44ce      	add	lr, r9
 8027b6a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027b6e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027b72:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027b76:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027b7a:	ea4e 0909 	orr.w	r9, lr, r9
 8027b7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027b82:	8868      	ldrh	r0, [r5, #2]
 8027b84:	d019      	beq.n	8027bba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8027b86:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027b8a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027b8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027b92:	fb08 f800 	mul.w	r8, r8, r0
 8027b96:	fb0a fe0e 	mul.w	lr, sl, lr
 8027b9a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027b9e:	f108 0b20 	add.w	fp, r8, #32
 8027ba2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027ba6:	4486      	add	lr, r0
 8027ba8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027bac:	0a00      	lsrs	r0, r0, #8
 8027bae:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027bb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027bb6:	ea4e 0000 	orr.w	r0, lr, r0
 8027bba:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027bbe:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027bc2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027bc6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027bca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027bce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027bd2:	ea4e 0909 	orr.w	r9, lr, r9
 8027bd6:	ea4a 0000 	orr.w	r0, sl, r0
 8027bda:	f1bc 0f00 	cmp.w	ip, #0
 8027bde:	f000 8145 	beq.w	8027e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8027be2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8027be6:	3a01      	subs	r2, #1
 8027be8:	0052      	lsls	r2, r2, #1
 8027bea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027bec:	3202      	adds	r2, #2
 8027bee:	2cff      	cmp	r4, #255	; 0xff
 8027bf0:	eb05 0e02 	add.w	lr, r5, r2
 8027bf4:	5aaa      	ldrh	r2, [r5, r2]
 8027bf6:	d018      	beq.n	8027c2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027bf8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027bfc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027c00:	fb04 fa02 	mul.w	sl, r4, r2
 8027c04:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027c08:	fb08 f805 	mul.w	r8, r8, r5
 8027c0c:	f10a 0520 	add.w	r5, sl, #32
 8027c10:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027c14:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027c18:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027c1c:	4442      	add	r2, r8
 8027c1e:	0a2d      	lsrs	r5, r5, #8
 8027c20:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027c24:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027c28:	432a      	orrs	r2, r5
 8027c2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027c2c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027c30:	2cff      	cmp	r4, #255	; 0xff
 8027c32:	d01a      	beq.n	8027c6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8027c34:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027c38:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027c3c:	fb04 fa05 	mul.w	sl, r4, r5
 8027c40:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027c44:	fb08 f80e 	mul.w	r8, r8, lr
 8027c48:	f10a 0e20 	add.w	lr, sl, #32
 8027c4c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027c50:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027c54:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027c58:	4445      	add	r5, r8
 8027c5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027c5e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027c62:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8027c66:	ea45 050e 	orr.w	r5, r5, lr
 8027c6a:	fb1c fe01 	smulbb	lr, ip, r1
 8027c6e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027c72:	f1cc 0810 	rsb	r8, ip, #16
 8027c76:	eba8 0801 	sub.w	r8, r8, r1
 8027c7a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027c7e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027c82:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027c86:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027c8a:	4341      	muls	r1, r0
 8027c8c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027c90:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027c94:	ea4a 0202 	orr.w	r2, sl, r2
 8027c98:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027c9c:	fb09 1108 	mla	r1, r9, r8, r1
 8027ca0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027ca4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027ca8:	fb0c 1102 	mla	r1, ip, r2, r1
 8027cac:	ea4b 0505 	orr.w	r5, fp, r5
 8027cb0:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027cb4:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027cb8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027cbc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027cc0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027cc4:	ea42 0e0e 	orr.w	lr, r2, lr
 8027cc8:	fa1f f28e 	uxth.w	r2, lr
 8027ccc:	2bff      	cmp	r3, #255	; 0xff
 8027cce:	d103      	bne.n	8027cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8027cd0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027cd2:	29ff      	cmp	r1, #255	; 0xff
 8027cd4:	f000 80de 	beq.w	8027e94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8027cd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027cda:	8838      	ldrh	r0, [r7, #0]
 8027cdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027cde:	434b      	muls	r3, r1
 8027ce0:	f103 0c01 	add.w	ip, r3, #1
 8027ce4:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8027ce8:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027cec:	fa5f fc83 	uxtb.w	ip, r3
 8027cf0:	1203      	asrs	r3, r0, #8
 8027cf2:	1215      	asrs	r5, r2, #8
 8027cf4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027cf8:	fb13 f30c 	smulbb	r3, r3, ip
 8027cfc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027d00:	fb05 3501 	mla	r5, r5, r1, r3
 8027d04:	10c3      	asrs	r3, r0, #3
 8027d06:	10d1      	asrs	r1, r2, #3
 8027d08:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027d0c:	fb13 f30c 	smulbb	r3, r3, ip
 8027d10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027d14:	fb01 3104 	mla	r1, r1, r4, r3
 8027d18:	00c3      	lsls	r3, r0, #3
 8027d1a:	00d2      	lsls	r2, r2, #3
 8027d1c:	b2db      	uxtb	r3, r3
 8027d1e:	b2d2      	uxtb	r2, r2
 8027d20:	fb13 f30c 	smulbb	r3, r3, ip
 8027d24:	b2ad      	uxth	r5, r5
 8027d26:	fb02 3304 	mla	r3, r2, r4, r3
 8027d2a:	b29a      	uxth	r2, r3
 8027d2c:	1c6b      	adds	r3, r5, #1
 8027d2e:	b289      	uxth	r1, r1
 8027d30:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027d34:	1c53      	adds	r3, r2, #1
 8027d36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027d3a:	1c4a      	adds	r2, r1, #1
 8027d3c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027d40:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027d44:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027d48:	0949      	lsrs	r1, r1, #5
 8027d4a:	432b      	orrs	r3, r5
 8027d4c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027d50:	430b      	orrs	r3, r1
 8027d52:	803b      	strh	r3, [r7, #0]
 8027d54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027d56:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027d58:	4413      	add	r3, r2
 8027d5a:	9329      	str	r3, [sp, #164]	; 0xa4
 8027d5c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8027d5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027d60:	441a      	add	r2, r3
 8027d62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027d64:	922a      	str	r2, [sp, #168]	; 0xa8
 8027d66:	3b01      	subs	r3, #1
 8027d68:	3702      	adds	r7, #2
 8027d6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8027d6c:	e689      	b.n	8027a82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8027d6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027d70:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8027d72:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8027d74:	4433      	add	r3, r6
 8027d76:	9329      	str	r3, [sp, #164]	; 0xa4
 8027d78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027d7a:	441c      	add	r4, r3
 8027d7c:	9b08      	ldr	r3, [sp, #32]
 8027d7e:	942a      	str	r4, [sp, #168]	; 0xa8
 8027d80:	3b01      	subs	r3, #1
 8027d82:	9308      	str	r3, [sp, #32]
 8027d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027d86:	3302      	adds	r3, #2
 8027d88:	9309      	str	r3, [sp, #36]	; 0x24
 8027d8a:	e658      	b.n	8027a3e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027d8c:	d028      	beq.n	8027de0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8027d8e:	9b08      	ldr	r3, [sp, #32]
 8027d90:	982b      	ldr	r0, [sp, #172]	; 0xac
 8027d92:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8027d94:	3b01      	subs	r3, #1
 8027d96:	fb00 5003 	mla	r0, r0, r3, r5
 8027d9a:	1400      	asrs	r0, r0, #16
 8027d9c:	f53f ae6c 	bmi.w	8027a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027da0:	3901      	subs	r1, #1
 8027da2:	4288      	cmp	r0, r1
 8027da4:	f6bf ae68 	bge.w	8027a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027da8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027daa:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8027dac:	fb01 0303 	mla	r3, r1, r3, r0
 8027db0:	141b      	asrs	r3, r3, #16
 8027db2:	f53f ae61 	bmi.w	8027a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027db6:	3a01      	subs	r2, #1
 8027db8:	4293      	cmp	r3, r2
 8027dba:	f6bf ae5d 	bge.w	8027a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027dbe:	9b08      	ldr	r3, [sp, #32]
 8027dc0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027dc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8027dc6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027dca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027dcc:	2b00      	cmp	r3, #0
 8027dce:	f300 8082 	bgt.w	8027ed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027dd2:	9b08      	ldr	r3, [sp, #32]
 8027dd4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027dda:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027dde:	9309      	str	r3, [sp, #36]	; 0x24
 8027de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027de2:	2b00      	cmp	r3, #0
 8027de4:	f340 81ef 	ble.w	80281c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8027de8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027df0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027df4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027df6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027dfa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027dfe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027e02:	eef0 6a48 	vmov.f32	s13, s16
 8027e06:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027e0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e0e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027e12:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8027e16:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027e1a:	eef0 6a68 	vmov.f32	s13, s17
 8027e1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027e22:	ee18 2a10 	vmov	r2, s16
 8027e26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8027e2e:	ee18 2a90 	vmov	r2, s17
 8027e32:	932b      	str	r3, [sp, #172]	; 0xac
 8027e34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8027e3a:	932c      	str	r3, [sp, #176]	; 0xb0
 8027e3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027e3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027e40:	3b01      	subs	r3, #1
 8027e42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027e46:	9311      	str	r3, [sp, #68]	; 0x44
 8027e48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e4a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8027e4e:	bf08      	it	eq
 8027e50:	4613      	moveq	r3, r2
 8027e52:	9308      	str	r3, [sp, #32]
 8027e54:	eef0 8a67 	vmov.f32	s17, s15
 8027e58:	eeb0 8a47 	vmov.f32	s16, s14
 8027e5c:	e5e1      	b.n	8027a22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027e5e:	fb08 f505 	mul.w	r5, r8, r5
 8027e62:	fb09 5303 	mla	r3, r9, r3, r5
 8027e66:	e661      	b.n	8027b2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8027e68:	4681      	mov	r9, r0
 8027e6a:	e688      	b.n	8027b7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027e6c:	f1c1 0210 	rsb	r2, r1, #16
 8027e70:	4341      	muls	r1, r0
 8027e72:	fb09 1902 	mla	r9, r9, r2, r1
 8027e76:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027e7a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027e7e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027e82:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027e86:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027e8a:	ea42 0909 	orr.w	r9, r2, r9
 8027e8e:	fa1f f289 	uxth.w	r2, r9
 8027e92:	e71b      	b.n	8027ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027e94:	803a      	strh	r2, [r7, #0]
 8027e96:	e75d      	b.n	8027d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027e98:	f115 0e01 	adds.w	lr, r5, #1
 8027e9c:	f53f af5a 	bmi.w	8027d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027ea0:	4572      	cmp	r2, lr
 8027ea2:	f6ff af57 	blt.w	8027d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027ea6:	f110 0e01 	adds.w	lr, r0, #1
 8027eaa:	f53f af53 	bmi.w	8027d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027eae:	4573      	cmp	r3, lr
 8027eb0:	f6ff af50 	blt.w	8027d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027eb4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027eb6:	9502      	str	r5, [sp, #8]
 8027eb8:	b21b      	sxth	r3, r3
 8027eba:	b212      	sxth	r2, r2
 8027ebc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027ec0:	9301      	str	r3, [sp, #4]
 8027ec2:	9200      	str	r2, [sp, #0]
 8027ec4:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027ec8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8027ecc:	4639      	mov	r1, r7
 8027ece:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027ed0:	f7ff fbd2 	bl	8027678 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027ed4:	e73e      	b.n	8027d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027ed6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027ed8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027edc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027ede:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027ee2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027ee4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027ee8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027eea:	141f      	asrs	r7, r3, #16
 8027eec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027eee:	141b      	asrs	r3, r3, #16
 8027ef0:	fb01 3707 	mla	r7, r1, r7, r3
 8027ef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027ef6:	fa1f fc82 	uxth.w	ip, r2
 8027efa:	eb03 0a07 	add.w	sl, r3, r7
 8027efe:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027f02:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027f06:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027f0a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027f0e:	b29b      	uxth	r3, r3
 8027f10:	2d00      	cmp	r5, #0
 8027f12:	f000 813d 	beq.w	8028190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027f16:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027f1a:	940f      	str	r4, [sp, #60]	; 0x3c
 8027f1c:	eb0a 0b01 	add.w	fp, sl, r1
 8027f20:	fa1f fa85 	uxth.w	sl, r5
 8027f24:	fb0a fc0c 	mul.w	ip, sl, ip
 8027f28:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027f2c:	fa1f fa8a 	uxth.w	sl, sl
 8027f30:	eba0 000c 	sub.w	r0, r0, ip
 8027f34:	eba3 030a 	sub.w	r3, r3, sl
 8027f38:	b280      	uxth	r0, r0
 8027f3a:	fb08 f000 	mul.w	r0, r8, r0
 8027f3e:	b29b      	uxth	r3, r3
 8027f40:	fb09 0303 	mla	r3, r9, r3, r0
 8027f44:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027f46:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027f4a:	9410      	str	r4, [sp, #64]	; 0x40
 8027f4c:	fb0a 3300 	mla	r3, sl, r0, r3
 8027f50:	fb0c 3304 	mla	r3, ip, r4, r3
 8027f54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027f58:	2b00      	cmp	r3, #0
 8027f5a:	f000 810b 	beq.w	8028174 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8027f5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027f60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027f62:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027f66:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027f6a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027f6e:	f000 8114 	beq.w	802819a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8027f72:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027f76:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027f7a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027f7e:	fb09 f707 	mul.w	r7, r9, r7
 8027f82:	fb0a fc0c 	mul.w	ip, sl, ip
 8027f86:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027f8a:	f107 0b20 	add.w	fp, r7, #32
 8027f8e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027f92:	44cc      	add	ip, r9
 8027f94:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027f98:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027f9c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027fa0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027fa4:	ea4c 0909 	orr.w	r9, ip, r9
 8027fa8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027fac:	8847      	ldrh	r7, [r0, #2]
 8027fae:	d019      	beq.n	8027fe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 8027fb0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027fb4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027fb8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027fbc:	fb08 f807 	mul.w	r8, r8, r7
 8027fc0:	fb0a fc0c 	mul.w	ip, sl, ip
 8027fc4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027fc8:	f108 0b20 	add.w	fp, r8, #32
 8027fcc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027fd0:	44bc      	add	ip, r7
 8027fd2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027fd6:	0a3f      	lsrs	r7, r7, #8
 8027fd8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027fdc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027fe0:	ea4c 0707 	orr.w	r7, ip, r7
 8027fe4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027fe8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027fec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027ff0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027ff4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027ff8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027ffc:	ea4c 0909 	orr.w	r9, ip, r9
 8028000:	ea4a 0707 	orr.w	r7, sl, r7
 8028004:	2d00      	cmp	r5, #0
 8028006:	f000 80ca 	beq.w	802819e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 802800a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802800e:	3901      	subs	r1, #1
 8028010:	0049      	lsls	r1, r1, #1
 8028012:	3102      	adds	r1, #2
 8028014:	eb00 0c01 	add.w	ip, r0, r1
 8028018:	5a41      	ldrh	r1, [r0, r1]
 802801a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802801c:	28ff      	cmp	r0, #255	; 0xff
 802801e:	d019      	beq.n	8028054 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 8028020:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028022:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028026:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802802a:	fb04 fa01 	mul.w	sl, r4, r1
 802802e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028032:	fb08 f800 	mul.w	r8, r8, r0
 8028036:	f10a 0020 	add.w	r0, sl, #32
 802803a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802803e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028042:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028046:	4441      	add	r1, r8
 8028048:	0a00      	lsrs	r0, r0, #8
 802804a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802804e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028052:	4301      	orrs	r1, r0
 8028054:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028056:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802805a:	2cff      	cmp	r4, #255	; 0xff
 802805c:	d01a      	beq.n	8028094 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802805e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8028062:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028066:	fb04 fa00 	mul.w	sl, r4, r0
 802806a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802806e:	fb08 f80c 	mul.w	r8, r8, ip
 8028072:	f10a 0c20 	add.w	ip, sl, #32
 8028076:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802807a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802807e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028082:	4440      	add	r0, r8
 8028084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028088:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802808c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028090:	ea40 000c 	orr.w	r0, r0, ip
 8028094:	fb15 fc02 	smulbb	ip, r5, r2
 8028098:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802809c:	f1c5 0810 	rsb	r8, r5, #16
 80280a0:	eba8 0802 	sub.w	r8, r8, r2
 80280a4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80280a8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80280ac:	437a      	muls	r2, r7
 80280ae:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80280b2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80280b6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80280ba:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80280be:	fb09 2208 	mla	r2, r9, r8, r2
 80280c2:	ea4a 0101 	orr.w	r1, sl, r1
 80280c6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80280ca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80280ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80280d2:	fb05 2201 	mla	r2, r5, r1, r2
 80280d6:	ea4b 0000 	orr.w	r0, fp, r0
 80280da:	fb0c 2200 	mla	r2, ip, r0, r2
 80280de:	0d57      	lsrs	r7, r2, #21
 80280e0:	0952      	lsrs	r2, r2, #5
 80280e2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80280e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80280ea:	433a      	orrs	r2, r7
 80280ec:	2bff      	cmp	r3, #255	; 0xff
 80280ee:	b292      	uxth	r2, r2
 80280f0:	d102      	bne.n	80280f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80280f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80280f4:	29ff      	cmp	r1, #255	; 0xff
 80280f6:	d063      	beq.n	80281c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 80280f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80280fa:	f8be 1000 	ldrh.w	r1, [lr]
 80280fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028100:	4343      	muls	r3, r0
 8028102:	1c58      	adds	r0, r3, #1
 8028104:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8028108:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802810c:	1208      	asrs	r0, r1, #8
 802810e:	b2db      	uxtb	r3, r3
 8028110:	1215      	asrs	r5, r2, #8
 8028112:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028116:	fb10 f003 	smulbb	r0, r0, r3
 802811a:	10cf      	asrs	r7, r1, #3
 802811c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028120:	00c9      	lsls	r1, r1, #3
 8028122:	fb05 0504 	mla	r5, r5, r4, r0
 8028126:	b2c9      	uxtb	r1, r1
 8028128:	10d0      	asrs	r0, r2, #3
 802812a:	00d2      	lsls	r2, r2, #3
 802812c:	fb11 f103 	smulbb	r1, r1, r3
 8028130:	b2d2      	uxtb	r2, r2
 8028132:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8028136:	fb02 1204 	mla	r2, r2, r4, r1
 802813a:	fb17 f703 	smulbb	r7, r7, r3
 802813e:	b2ad      	uxth	r5, r5
 8028140:	b292      	uxth	r2, r2
 8028142:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028146:	fb00 7004 	mla	r0, r0, r4, r7
 802814a:	1c6b      	adds	r3, r5, #1
 802814c:	1c57      	adds	r7, r2, #1
 802814e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028152:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8028156:	b280      	uxth	r0, r0
 8028158:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802815c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028160:	433d      	orrs	r5, r7
 8028162:	1c47      	adds	r7, r0, #1
 8028164:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8028168:	097f      	lsrs	r7, r7, #5
 802816a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802816e:	433d      	orrs	r5, r7
 8028170:	f8ae 5000 	strh.w	r5, [lr]
 8028174:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028176:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028178:	4413      	add	r3, r2
 802817a:	9329      	str	r3, [sp, #164]	; 0xa4
 802817c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802817e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028180:	441a      	add	r2, r3
 8028182:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028184:	922a      	str	r2, [sp, #168]	; 0xa8
 8028186:	3b01      	subs	r3, #1
 8028188:	f10e 0e02 	add.w	lr, lr, #2
 802818c:	9313      	str	r3, [sp, #76]	; 0x4c
 802818e:	e61c      	b.n	8027dca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8028190:	fb08 f000 	mul.w	r0, r8, r0
 8028194:	fb09 0303 	mla	r3, r9, r3, r0
 8028198:	e6dc      	b.n	8027f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 802819a:	46b9      	mov	r9, r7
 802819c:	e704      	b.n	8027fa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 802819e:	f1c2 0110 	rsb	r1, r2, #16
 80281a2:	437a      	muls	r2, r7
 80281a4:	fb09 2901 	mla	r9, r9, r1, r2
 80281a8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80281ac:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80281b0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80281b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80281b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80281bc:	4302      	orrs	r2, r0
 80281be:	e795      	b.n	80280ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80281c0:	f8ae 2000 	strh.w	r2, [lr]
 80281c4:	e7d6      	b.n	8028174 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 80281c6:	b017      	add	sp, #92	; 0x5c
 80281c8:	ecbd 8b08 	vpop	{d8-d11}
 80281cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080281d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80281d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281d4:	b085      	sub	sp, #20
 80281d6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80281da:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80281de:	9103      	str	r1, [sp, #12]
 80281e0:	fb05 7106 	mla	r1, r5, r6, r7
 80281e4:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 80281e8:	2d00      	cmp	r5, #0
 80281ea:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80281ee:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80281f2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80281f6:	9401      	str	r4, [sp, #4]
 80281f8:	eb02 0901 	add.w	r9, r2, r1
 80281fc:	f2c0 80c0 	blt.w	8028380 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8028200:	45a8      	cmp	r8, r5
 8028202:	f340 80bd 	ble.w	8028380 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8028206:	2f00      	cmp	r7, #0
 8028208:	f2c0 80b6 	blt.w	8028378 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 802820c:	42be      	cmp	r6, r7
 802820e:	f340 80b3 	ble.w	8028378 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8028212:	f812 c001 	ldrb.w	ip, [r2, r1]
 8028216:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 802821a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802821e:	d019      	beq.n	8028254 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8028220:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8028224:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028228:	435a      	muls	r2, r3
 802822a:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 802822e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8028232:	fb0c f403 	mul.w	r4, ip, r3
 8028236:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802823a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802823e:	441a      	add	r2, r3
 8028240:	f104 0320 	add.w	r3, r4, #32
 8028244:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8028248:	0a1b      	lsrs	r3, r3, #8
 802824a:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 802824e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028252:	4319      	orrs	r1, r3
 8028254:	b289      	uxth	r1, r1
 8028256:	1c7b      	adds	r3, r7, #1
 8028258:	f100 8097 	bmi.w	802838a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 802825c:	429e      	cmp	r6, r3
 802825e:	f340 8094 	ble.w	802838a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8028262:	2800      	cmp	r0, #0
 8028264:	f000 8094 	beq.w	8028390 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8028268:	f899 4001 	ldrb.w	r4, [r9, #1]
 802826c:	9b01      	ldr	r3, [sp, #4]
 802826e:	2cff      	cmp	r4, #255	; 0xff
 8028270:	885b      	ldrh	r3, [r3, #2]
 8028272:	d01b      	beq.n	80282ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8028274:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8028278:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 802827c:	fb0a f202 	mul.w	r2, sl, r2
 8028280:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028284:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8028288:	fb04 fa03 	mul.w	sl, r4, r3
 802828c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8028290:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8028294:	441a      	add	r2, r3
 8028296:	f10a 0320 	add.w	r3, sl, #32
 802829a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802829e:	0a1b      	lsrs	r3, r3, #8
 80282a0:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80282a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80282a8:	ea4b 0303 	orr.w	r3, fp, r3
 80282ac:	b29b      	uxth	r3, r3
 80282ae:	3501      	adds	r5, #1
 80282b0:	d474      	bmi.n	802839c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80282b2:	45a8      	cmp	r8, r5
 80282b4:	dd72      	ble.n	802839c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80282b6:	f1be 0f00 	cmp.w	lr, #0
 80282ba:	f000 8110 	beq.w	80284de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 80282be:	2f00      	cmp	r7, #0
 80282c0:	db69      	blt.n	8028396 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80282c2:	42be      	cmp	r6, r7
 80282c4:	dd67      	ble.n	8028396 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80282c6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80282ca:	9a01      	ldr	r2, [sp, #4]
 80282cc:	2dff      	cmp	r5, #255	; 0xff
 80282ce:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80282d2:	d01c      	beq.n	802830e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 80282d4:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80282d8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80282dc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80282e0:	fb05 fa0b 	mul.w	sl, r5, fp
 80282e4:	fb08 f802 	mul.w	r8, r8, r2
 80282e8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80282ec:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80282f0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80282f4:	4490      	add	r8, r2
 80282f6:	f10a 0220 	add.w	r2, sl, #32
 80282fa:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80282fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028302:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8028306:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802830a:	ea4b 0b0a 	orr.w	fp, fp, sl
 802830e:	fa1f fb8b 	uxth.w	fp, fp
 8028312:	3701      	adds	r7, #1
 8028314:	d447      	bmi.n	80283a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8028316:	42be      	cmp	r6, r7
 8028318:	dd45      	ble.n	80283a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802831a:	2800      	cmp	r0, #0
 802831c:	d046      	beq.n	80283ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 802831e:	3601      	adds	r6, #1
 8028320:	9a01      	ldr	r2, [sp, #4]
 8028322:	f819 7006 	ldrb.w	r7, [r9, r6]
 8028326:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 802832a:	2fff      	cmp	r7, #255	; 0xff
 802832c:	d01a      	beq.n	8028364 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 802832e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8028332:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8028336:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802833a:	fb07 f902 	mul.w	r9, r7, r2
 802833e:	fb08 f806 	mul.w	r8, r8, r6
 8028342:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8028346:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 802834a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802834e:	44b0      	add	r8, r6
 8028350:	f109 0620 	add.w	r6, r9, #32
 8028354:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8028358:	0a36      	lsrs	r6, r6, #8
 802835a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802835e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8028362:	4332      	orrs	r2, r6
 8028364:	b292      	uxth	r2, r2
 8028366:	280f      	cmp	r0, #15
 8028368:	d922      	bls.n	80283b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 802836a:	4b61      	ldr	r3, [pc, #388]	; (80284f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 802836c:	4a61      	ldr	r2, [pc, #388]	; (80284f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 802836e:	4862      	ldr	r0, [pc, #392]	; (80284f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8028370:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028374:	f005 ff4e 	bl	802e214 <__assert_func>
 8028378:	f04f 0c00 	mov.w	ip, #0
 802837c:	4661      	mov	r1, ip
 802837e:	e76a      	b.n	8028256 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8028380:	2400      	movs	r4, #0
 8028382:	46a4      	mov	ip, r4
 8028384:	4623      	mov	r3, r4
 8028386:	4621      	mov	r1, r4
 8028388:	e791      	b.n	80282ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802838a:	2400      	movs	r4, #0
 802838c:	4623      	mov	r3, r4
 802838e:	e78e      	b.n	80282ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8028390:	4604      	mov	r4, r0
 8028392:	4603      	mov	r3, r0
 8028394:	e78b      	b.n	80282ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8028396:	2500      	movs	r5, #0
 8028398:	46ab      	mov	fp, r5
 802839a:	e7ba      	b.n	8028312 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 802839c:	2700      	movs	r7, #0
 802839e:	463d      	mov	r5, r7
 80283a0:	463a      	mov	r2, r7
 80283a2:	46bb      	mov	fp, r7
 80283a4:	e7df      	b.n	8028366 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80283a6:	2700      	movs	r7, #0
 80283a8:	463a      	mov	r2, r7
 80283aa:	e7dc      	b.n	8028366 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80283ac:	4607      	mov	r7, r0
 80283ae:	4602      	mov	r2, r0
 80283b0:	f1be 0f0f 	cmp.w	lr, #15
 80283b4:	d8d9      	bhi.n	802836a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80283b6:	b286      	uxth	r6, r0
 80283b8:	fa1f f98e 	uxth.w	r9, lr
 80283bc:	fb06 f809 	mul.w	r8, r6, r9
 80283c0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80283c4:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80283c8:	0136      	lsls	r6, r6, #4
 80283ca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80283ce:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80283d2:	9601      	str	r6, [sp, #4]
 80283d4:	ea4a 0101 	orr.w	r1, sl, r1
 80283d8:	fa1f f689 	uxth.w	r6, r9
 80283dc:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80283e0:	fb10 f90e 	smulbb	r9, r0, lr
 80283e4:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80283e8:	9602      	str	r6, [sp, #8]
 80283ea:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80283ee:	460e      	mov	r6, r1
 80283f0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80283f4:	f1ce 0110 	rsb	r1, lr, #16
 80283f8:	1a09      	subs	r1, r1, r0
 80283fa:	ea4a 0303 	orr.w	r3, sl, r3
 80283fe:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8028402:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028406:	4343      	muls	r3, r0
 8028408:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 802840c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028410:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028414:	fb01 3106 	mla	r1, r1, r6, r3
 8028418:	ea4a 0202 	orr.w	r2, sl, r2
 802841c:	fb09 1302 	mla	r3, r9, r2, r1
 8028420:	9a03      	ldr	r2, [sp, #12]
 8028422:	9802      	ldr	r0, [sp, #8]
 8028424:	8811      	ldrh	r1, [r2, #0]
 8028426:	9a01      	ldr	r2, [sp, #4]
 8028428:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802842c:	1a12      	subs	r2, r2, r0
 802842e:	9801      	ldr	r0, [sp, #4]
 8028430:	eba0 0608 	sub.w	r6, r0, r8
 8028434:	b2b6      	uxth	r6, r6
 8028436:	b292      	uxth	r2, r2
 8028438:	4374      	muls	r4, r6
 802843a:	fb0c 4402 	mla	r4, ip, r2, r4
 802843e:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8028442:	9a02      	ldr	r2, [sp, #8]
 8028444:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028448:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802844c:	fb02 4505 	mla	r5, r2, r5, r4
 8028450:	ea4a 0b0b 	orr.w	fp, sl, fp
 8028454:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8028458:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802845c:	fb08 5707 	mla	r7, r8, r7, r5
 8028460:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8028464:	120a      	asrs	r2, r1, #8
 8028466:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802846a:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802846e:	b2ff      	uxtb	r7, r7
 8028470:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028474:	10c8      	asrs	r0, r1, #3
 8028476:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802847a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802847e:	00c9      	lsls	r1, r1, #3
 8028480:	437a      	muls	r2, r7
 8028482:	ea43 0e0e 	orr.w	lr, r3, lr
 8028486:	b2c9      	uxtb	r1, r1
 8028488:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802848c:	fa1f f38e 	uxth.w	r3, lr
 8028490:	4378      	muls	r0, r7
 8028492:	434f      	muls	r7, r1
 8028494:	1c51      	adds	r1, r2, #1
 8028496:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802849a:	121a      	asrs	r2, r3, #8
 802849c:	f022 0207 	bic.w	r2, r2, #7
 80284a0:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80284a4:	1c41      	adds	r1, r0, #1
 80284a6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80284aa:	10d9      	asrs	r1, r3, #3
 80284ac:	f021 0103 	bic.w	r1, r1, #3
 80284b0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80284b4:	0212      	lsls	r2, r2, #8
 80284b6:	00c9      	lsls	r1, r1, #3
 80284b8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80284bc:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80284c0:	430a      	orrs	r2, r1
 80284c2:	1c79      	adds	r1, r7, #1
 80284c4:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80284c8:	00db      	lsls	r3, r3, #3
 80284ca:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80284ce:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80284d2:	4313      	orrs	r3, r2
 80284d4:	9a03      	ldr	r2, [sp, #12]
 80284d6:	8013      	strh	r3, [r2, #0]
 80284d8:	b005      	add	sp, #20
 80284da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80284de:	280f      	cmp	r0, #15
 80284e0:	f63f af43 	bhi.w	802836a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80284e4:	4677      	mov	r7, lr
 80284e6:	4675      	mov	r5, lr
 80284e8:	4672      	mov	r2, lr
 80284ea:	46f3      	mov	fp, lr
 80284ec:	e763      	b.n	80283b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 80284ee:	bf00      	nop
 80284f0:	08033161 	.word	0x08033161
 80284f4:	0803372e 	.word	0x0803372e
 80284f8:	080331e5 	.word	0x080331e5

080284fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80284fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028500:	ed2d 8b08 	vpush	{d8-d11}
 8028504:	b093      	sub	sp, #76	; 0x4c
 8028506:	eeb0 aa40 	vmov.f32	s20, s0
 802850a:	9210      	str	r2, [sp, #64]	; 0x40
 802850c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802850e:	910e      	str	r1, [sp, #56]	; 0x38
 8028510:	9306      	str	r3, [sp, #24]
 8028512:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8028516:	9011      	str	r0, [sp, #68]	; 0x44
 8028518:	6850      	ldr	r0, [r2, #4]
 802851a:	6812      	ldr	r2, [r2, #0]
 802851c:	fb00 1303 	mla	r3, r0, r3, r1
 8028520:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028524:	9307      	str	r3, [sp, #28]
 8028526:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028528:	681b      	ldr	r3, [r3, #0]
 802852a:	9308      	str	r3, [sp, #32]
 802852c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802852e:	685b      	ldr	r3, [r3, #4]
 8028530:	9309      	str	r3, [sp, #36]	; 0x24
 8028532:	eef0 9a60 	vmov.f32	s19, s1
 8028536:	eeb0 9a41 	vmov.f32	s18, s2
 802853a:	eeb0 8a62 	vmov.f32	s16, s5
 802853e:	eef0 8a43 	vmov.f32	s17, s6
 8028542:	eef0 ba44 	vmov.f32	s23, s8
 8028546:	eeb0 ba64 	vmov.f32	s22, s9
 802854a:	eef0 aa45 	vmov.f32	s21, s10
 802854e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028550:	2b00      	cmp	r3, #0
 8028552:	dc03      	bgt.n	802855c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8028554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028556:	2b00      	cmp	r3, #0
 8028558:	f340 83b4 	ble.w	8028cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 802855c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802855e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028562:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028566:	1e48      	subs	r0, r1, #1
 8028568:	1e55      	subs	r5, r2, #1
 802856a:	9b06      	ldr	r3, [sp, #24]
 802856c:	2b00      	cmp	r3, #0
 802856e:	f340 8163 	ble.w	8028838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8028572:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8028574:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028576:	1436      	asrs	r6, r6, #16
 8028578:	ea4f 4323 	mov.w	r3, r3, asr #16
 802857c:	d406      	bmi.n	802858c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802857e:	4286      	cmp	r6, r0
 8028580:	da04      	bge.n	802858c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028582:	2b00      	cmp	r3, #0
 8028584:	db02      	blt.n	802858c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028586:	42ab      	cmp	r3, r5
 8028588:	f2c0 8157 	blt.w	802883a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802858c:	3601      	adds	r6, #1
 802858e:	f100 8144 	bmi.w	802881a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8028592:	42b1      	cmp	r1, r6
 8028594:	f2c0 8141 	blt.w	802881a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8028598:	3301      	adds	r3, #1
 802859a:	f100 813e 	bmi.w	802881a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802859e:	429a      	cmp	r2, r3
 80285a0:	f2c0 813b 	blt.w	802881a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80285a4:	9b06      	ldr	r3, [sp, #24]
 80285a6:	9f07      	ldr	r7, [sp, #28]
 80285a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80285aa:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80285ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80285b0:	2b00      	cmp	r3, #0
 80285b2:	f340 8164 	ble.w	802887e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80285b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80285b8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80285ba:	1418      	asrs	r0, r3, #16
 80285bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80285be:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80285c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80285c4:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80285c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80285ca:	142d      	asrs	r5, r5, #16
 80285cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80285d0:	f100 81ee 	bmi.w	80289b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80285d4:	f102 3eff 	add.w	lr, r2, #4294967295
 80285d8:	4575      	cmp	r5, lr
 80285da:	f280 81e9 	bge.w	80289b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80285de:	2800      	cmp	r0, #0
 80285e0:	f2c0 81e6 	blt.w	80289b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80285e4:	f103 3eff 	add.w	lr, r3, #4294967295
 80285e8:	4570      	cmp	r0, lr
 80285ea:	f280 81e1 	bge.w	80289b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80285ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80285f0:	b212      	sxth	r2, r2
 80285f2:	fb00 5002 	mla	r0, r0, r2, r5
 80285f6:	fa1f fe81 	uxth.w	lr, r1
 80285fa:	eb03 0a00 	add.w	sl, r3, r0
 80285fe:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8028602:	f813 9000 	ldrb.w	r9, [r3, r0]
 8028606:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802860a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802860e:	b29b      	uxth	r3, r3
 8028610:	f1bc 0f00 	cmp.w	ip, #0
 8028614:	f000 8179 	beq.w	802890a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8028618:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802861c:	940a      	str	r4, [sp, #40]	; 0x28
 802861e:	eb0a 0b02 	add.w	fp, sl, r2
 8028622:	fa1f fa8c 	uxth.w	sl, ip
 8028626:	fb0a fe0e 	mul.w	lr, sl, lr
 802862a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802862e:	fa1f fa8a 	uxth.w	sl, sl
 8028632:	eba5 050e 	sub.w	r5, r5, lr
 8028636:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802863a:	940b      	str	r4, [sp, #44]	; 0x2c
 802863c:	eba3 030a 	sub.w	r3, r3, sl
 8028640:	b2ad      	uxth	r5, r5
 8028642:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028644:	b29b      	uxth	r3, r3
 8028646:	fb08 f505 	mul.w	r5, r8, r5
 802864a:	fb09 5303 	mla	r3, r9, r3, r5
 802864e:	fb0a 3304 	mla	r3, sl, r4, r3
 8028652:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028654:	fb0e 3304 	mla	r3, lr, r4, r3
 8028658:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802865c:	2b00      	cmp	r3, #0
 802865e:	f000 80cf 	beq.w	8028800 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8028662:	9c08      	ldr	r4, [sp, #32]
 8028664:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028668:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802866c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8028670:	f000 8150 	beq.w	8028914 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8028674:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8028678:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802867c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028680:	fb09 f000 	mul.w	r0, r9, r0
 8028684:	fb0a fe0e 	mul.w	lr, sl, lr
 8028688:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802868c:	f100 0b20 	add.w	fp, r0, #32
 8028690:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028694:	44ce      	add	lr, r9
 8028696:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802869a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802869e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80286a2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80286a6:	ea4e 0909 	orr.w	r9, lr, r9
 80286aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80286ae:	8868      	ldrh	r0, [r5, #2]
 80286b0:	d019      	beq.n	80286e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80286b2:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80286b6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80286ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80286be:	fb08 f800 	mul.w	r8, r8, r0
 80286c2:	fb0a fe0e 	mul.w	lr, sl, lr
 80286c6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80286ca:	f108 0b20 	add.w	fp, r8, #32
 80286ce:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80286d2:	4486      	add	lr, r0
 80286d4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80286d8:	0a00      	lsrs	r0, r0, #8
 80286da:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80286de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80286e2:	ea4e 0000 	orr.w	r0, lr, r0
 80286e6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80286ea:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80286ee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80286f2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80286f6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80286fa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80286fe:	ea4e 0909 	orr.w	r9, lr, r9
 8028702:	ea4a 0000 	orr.w	r0, sl, r0
 8028706:	f1bc 0f00 	cmp.w	ip, #0
 802870a:	f000 8105 	beq.w	8028918 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802870e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8028712:	3a01      	subs	r2, #1
 8028714:	0052      	lsls	r2, r2, #1
 8028716:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028718:	3202      	adds	r2, #2
 802871a:	2cff      	cmp	r4, #255	; 0xff
 802871c:	eb05 0e02 	add.w	lr, r5, r2
 8028720:	5aaa      	ldrh	r2, [r5, r2]
 8028722:	d018      	beq.n	8028756 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028724:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8028728:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802872c:	fb04 fa02 	mul.w	sl, r4, r2
 8028730:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028734:	fb08 f805 	mul.w	r8, r8, r5
 8028738:	f10a 0520 	add.w	r5, sl, #32
 802873c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8028740:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8028744:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028748:	4442      	add	r2, r8
 802874a:	0a2d      	lsrs	r5, r5, #8
 802874c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8028750:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028754:	432a      	orrs	r2, r5
 8028756:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028758:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802875c:	2cff      	cmp	r4, #255	; 0xff
 802875e:	d01a      	beq.n	8028796 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8028760:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8028764:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028768:	fb04 fa05 	mul.w	sl, r4, r5
 802876c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028770:	fb08 f80e 	mul.w	r8, r8, lr
 8028774:	f10a 0e20 	add.w	lr, sl, #32
 8028778:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802877c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028780:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028784:	4445      	add	r5, r8
 8028786:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802878a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802878e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8028792:	ea45 050e 	orr.w	r5, r5, lr
 8028796:	fb1c fe01 	smulbb	lr, ip, r1
 802879a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 802879e:	f1cc 0810 	rsb	r8, ip, #16
 80287a2:	eba8 0801 	sub.w	r8, r8, r1
 80287a6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80287aa:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80287ae:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80287b2:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80287b6:	4341      	muls	r1, r0
 80287b8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80287bc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80287c0:	ea4a 0202 	orr.w	r2, sl, r2
 80287c4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80287c8:	fb09 1108 	mla	r1, r9, r8, r1
 80287cc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80287d0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80287d4:	fb0c 1102 	mla	r1, ip, r2, r1
 80287d8:	ea4b 0505 	orr.w	r5, fp, r5
 80287dc:	fb0e 1e05 	mla	lr, lr, r5, r1
 80287e0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80287e4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80287e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80287ec:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80287f0:	ea42 0e0e 	orr.w	lr, r2, lr
 80287f4:	fa1f f28e 	uxth.w	r2, lr
 80287f8:	2bff      	cmp	r3, #255	; 0xff
 80287fa:	f040 80a1 	bne.w	8028940 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x444>
 80287fe:	803a      	strh	r2, [r7, #0]
 8028800:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028802:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8028804:	4413      	add	r3, r2
 8028806:	9325      	str	r3, [sp, #148]	; 0x94
 8028808:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802880a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802880c:	441a      	add	r2, r3
 802880e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028810:	9226      	str	r2, [sp, #152]	; 0x98
 8028812:	3b01      	subs	r3, #1
 8028814:	3702      	adds	r7, #2
 8028816:	930f      	str	r3, [sp, #60]	; 0x3c
 8028818:	e6c9      	b.n	80285ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802881a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802881c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802881e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8028820:	4433      	add	r3, r6
 8028822:	9325      	str	r3, [sp, #148]	; 0x94
 8028824:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028826:	441c      	add	r4, r3
 8028828:	9b06      	ldr	r3, [sp, #24]
 802882a:	9426      	str	r4, [sp, #152]	; 0x98
 802882c:	3b01      	subs	r3, #1
 802882e:	9306      	str	r3, [sp, #24]
 8028830:	9b07      	ldr	r3, [sp, #28]
 8028832:	3302      	adds	r3, #2
 8028834:	9307      	str	r3, [sp, #28]
 8028836:	e698      	b.n	802856a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028838:	d028      	beq.n	802888c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 802883a:	9b06      	ldr	r3, [sp, #24]
 802883c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802883e:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8028840:	3b01      	subs	r3, #1
 8028842:	fb00 5003 	mla	r0, r0, r3, r5
 8028846:	1400      	asrs	r0, r0, #16
 8028848:	f53f aeac 	bmi.w	80285a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802884c:	3901      	subs	r1, #1
 802884e:	4288      	cmp	r0, r1
 8028850:	f6bf aea8 	bge.w	80285a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028854:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028856:	9826      	ldr	r0, [sp, #152]	; 0x98
 8028858:	fb01 0303 	mla	r3, r1, r3, r0
 802885c:	141b      	asrs	r3, r3, #16
 802885e:	f53f aea1 	bmi.w	80285a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028862:	3a01      	subs	r2, #1
 8028864:	4293      	cmp	r3, r2
 8028866:	f6bf ae9d 	bge.w	80285a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802886a:	9b06      	ldr	r3, [sp, #24]
 802886c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8028870:	930f      	str	r3, [sp, #60]	; 0x3c
 8028872:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8028876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028878:	2b00      	cmp	r3, #0
 802887a:	f300 80b6 	bgt.w	80289ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802887e:	9b06      	ldr	r3, [sp, #24]
 8028880:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028884:	9b07      	ldr	r3, [sp, #28]
 8028886:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802888a:	9307      	str	r3, [sp, #28]
 802888c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802888e:	2b00      	cmp	r3, #0
 8028890:	f340 8218 	ble.w	8028cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 8028894:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802889c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80288a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80288a2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80288a6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80288aa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80288ae:	eef0 6a48 	vmov.f32	s13, s16
 80288b2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80288b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288ba:	ee37 8a48 	vsub.f32	s16, s14, s16
 80288be:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80288c2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80288c6:	eef0 6a68 	vmov.f32	s13, s17
 80288ca:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80288ce:	ee18 2a10 	vmov	r2, s16
 80288d2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80288d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80288da:	ee18 2a90 	vmov	r2, s17
 80288de:	9327      	str	r3, [sp, #156]	; 0x9c
 80288e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80288e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80288e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80288e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80288ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80288ec:	3b01      	subs	r3, #1
 80288ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288f2:	930e      	str	r3, [sp, #56]	; 0x38
 80288f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80288f6:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80288fa:	bf08      	it	eq
 80288fc:	4613      	moveq	r3, r2
 80288fe:	9306      	str	r3, [sp, #24]
 8028900:	eef0 8a67 	vmov.f32	s17, s15
 8028904:	eeb0 8a47 	vmov.f32	s16, s14
 8028908:	e621      	b.n	802854e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802890a:	fb08 f505 	mul.w	r5, r8, r5
 802890e:	fb09 5303 	mla	r3, r9, r3, r5
 8028912:	e6a1      	b.n	8028658 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8028914:	4681      	mov	r9, r0
 8028916:	e6c8      	b.n	80286aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8028918:	f1c1 0210 	rsb	r2, r1, #16
 802891c:	4341      	muls	r1, r0
 802891e:	fb09 1902 	mla	r9, r9, r2, r1
 8028922:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028926:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802892a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802892e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028932:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028936:	ea42 0909 	orr.w	r9, r2, r9
 802893a:	fa1f f289 	uxth.w	r2, r9
 802893e:	e75b      	b.n	80287f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028940:	f8b7 c000 	ldrh.w	ip, [r7]
 8028944:	43db      	mvns	r3, r3
 8028946:	ea4f 202c 	mov.w	r0, ip, asr #8
 802894a:	fa5f fe83 	uxtb.w	lr, r3
 802894e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028952:	fb00 f00e 	mul.w	r0, r0, lr
 8028956:	1c41      	adds	r1, r0, #1
 8028958:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802895c:	1211      	asrs	r1, r2, #8
 802895e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8028962:	f021 0107 	bic.w	r1, r1, #7
 8028966:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802896a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802896e:	48d8      	ldr	r0, [pc, #864]	; (8028cd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d4>)
 8028970:	fb05 f50e 	mul.w	r5, r5, lr
 8028974:	b2c9      	uxtb	r1, r1
 8028976:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802897a:	1c69      	adds	r1, r5, #1
 802897c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8028980:	10d1      	asrs	r1, r2, #3
 8028982:	f021 0103 	bic.w	r1, r1, #3
 8028986:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802898a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802898e:	b2db      	uxtb	r3, r3
 8028990:	00c9      	lsls	r1, r1, #3
 8028992:	fb03 f30e 	mul.w	r3, r3, lr
 8028996:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802899a:	4301      	orrs	r1, r0
 802899c:	1c58      	adds	r0, r3, #1
 802899e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80289a2:	00d2      	lsls	r2, r2, #3
 80289a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80289a8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80289ac:	430a      	orrs	r2, r1
 80289ae:	e726      	b.n	80287fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80289b0:	f115 0e01 	adds.w	lr, r5, #1
 80289b4:	f53f af24 	bmi.w	8028800 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80289b8:	4572      	cmp	r2, lr
 80289ba:	f6ff af21 	blt.w	8028800 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80289be:	f110 0e01 	adds.w	lr, r0, #1
 80289c2:	f53f af1d 	bmi.w	8028800 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80289c6:	4573      	cmp	r3, lr
 80289c8:	f6ff af1a 	blt.w	8028800 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80289cc:	b21b      	sxth	r3, r3
 80289ce:	b212      	sxth	r2, r2
 80289d0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80289d4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80289d8:	9301      	str	r3, [sp, #4]
 80289da:	9200      	str	r2, [sp, #0]
 80289dc:	4639      	mov	r1, r7
 80289de:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80289e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80289e4:	f7ff fbf4 	bl	80281d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80289e8:	e70a      	b.n	8028800 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80289ea:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80289ec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80289f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80289f2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80289f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80289f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80289fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80289fe:	141f      	asrs	r7, r3, #16
 8028a00:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028a02:	141b      	asrs	r3, r3, #16
 8028a04:	fb01 3707 	mla	r7, r1, r7, r3
 8028a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a0a:	fa1f fc82 	uxth.w	ip, r2
 8028a0e:	eb03 0a07 	add.w	sl, r3, r7
 8028a12:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8028a16:	f813 9007 	ldrb.w	r9, [r3, r7]
 8028a1a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028a1e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8028a22:	b29b      	uxth	r3, r3
 8028a24:	2d00      	cmp	r5, #0
 8028a26:	f000 80fe 	beq.w	8028c26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 8028a2a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8028a2e:	940c      	str	r4, [sp, #48]	; 0x30
 8028a30:	eb0a 0b01 	add.w	fp, sl, r1
 8028a34:	fa1f fa85 	uxth.w	sl, r5
 8028a38:	fb0a fc0c 	mul.w	ip, sl, ip
 8028a3c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8028a40:	fa1f fa8a 	uxth.w	sl, sl
 8028a44:	eba0 000c 	sub.w	r0, r0, ip
 8028a48:	eba3 030a 	sub.w	r3, r3, sl
 8028a4c:	b280      	uxth	r0, r0
 8028a4e:	fb08 f000 	mul.w	r0, r8, r0
 8028a52:	b29b      	uxth	r3, r3
 8028a54:	fb09 0303 	mla	r3, r9, r3, r0
 8028a58:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028a5a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028a5e:	940d      	str	r4, [sp, #52]	; 0x34
 8028a60:	fb0a 3300 	mla	r3, sl, r0, r3
 8028a64:	fb0c 3304 	mla	r3, ip, r4, r3
 8028a68:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028a6c:	2b00      	cmp	r3, #0
 8028a6e:	f000 80cc 	beq.w	8028c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 8028a72:	9808      	ldr	r0, [sp, #32]
 8028a74:	9c08      	ldr	r4, [sp, #32]
 8028a76:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028a7a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8028a7e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8028a82:	f000 80d5 	beq.w	8028c30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8028a86:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028a8a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028a8e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028a92:	fb09 f707 	mul.w	r7, r9, r7
 8028a96:	fb0a fc0c 	mul.w	ip, sl, ip
 8028a9a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8028a9e:	f107 0b20 	add.w	fp, r7, #32
 8028aa2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028aa6:	44cc      	add	ip, r9
 8028aa8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8028aac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028ab0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028ab4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028ab8:	ea4c 0909 	orr.w	r9, ip, r9
 8028abc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028ac0:	8847      	ldrh	r7, [r0, #2]
 8028ac2:	d019      	beq.n	8028af8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8028ac4:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028ac8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028acc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028ad0:	fb08 f807 	mul.w	r8, r8, r7
 8028ad4:	fb0a fc0c 	mul.w	ip, sl, ip
 8028ad8:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8028adc:	f108 0b20 	add.w	fp, r8, #32
 8028ae0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028ae4:	44bc      	add	ip, r7
 8028ae6:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8028aea:	0a3f      	lsrs	r7, r7, #8
 8028aec:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028af0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028af4:	ea4c 0707 	orr.w	r7, ip, r7
 8028af8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028afc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8028b00:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8028b04:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028b08:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028b0c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028b10:	ea4c 0909 	orr.w	r9, ip, r9
 8028b14:	ea4a 0707 	orr.w	r7, sl, r7
 8028b18:	2d00      	cmp	r5, #0
 8028b1a:	f000 808b 	beq.w	8028c34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8028b1e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028b22:	3901      	subs	r1, #1
 8028b24:	0049      	lsls	r1, r1, #1
 8028b26:	3102      	adds	r1, #2
 8028b28:	eb00 0c01 	add.w	ip, r0, r1
 8028b2c:	5a41      	ldrh	r1, [r0, r1]
 8028b2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028b30:	28ff      	cmp	r0, #255	; 0xff
 8028b32:	d019      	beq.n	8028b68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8028b34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028b36:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028b3a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028b3e:	fb04 fa01 	mul.w	sl, r4, r1
 8028b42:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028b46:	fb08 f800 	mul.w	r8, r8, r0
 8028b4a:	f10a 0020 	add.w	r0, sl, #32
 8028b4e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8028b52:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028b56:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028b5a:	4441      	add	r1, r8
 8028b5c:	0a00      	lsrs	r0, r0, #8
 8028b5e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8028b62:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028b66:	4301      	orrs	r1, r0
 8028b68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028b6a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8028b6e:	2cff      	cmp	r4, #255	; 0xff
 8028b70:	d01a      	beq.n	8028ba8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8028b72:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8028b76:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028b7a:	fb04 fa00 	mul.w	sl, r4, r0
 8028b7e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028b82:	fb08 f80c 	mul.w	r8, r8, ip
 8028b86:	f10a 0c20 	add.w	ip, sl, #32
 8028b8a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8028b8e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8028b92:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028b96:	4440      	add	r0, r8
 8028b98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b9c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8028ba0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028ba4:	ea40 000c 	orr.w	r0, r0, ip
 8028ba8:	fb15 fc02 	smulbb	ip, r5, r2
 8028bac:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8028bb0:	f1c5 0810 	rsb	r8, r5, #16
 8028bb4:	eba8 0802 	sub.w	r8, r8, r2
 8028bb8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028bbc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8028bc0:	437a      	muls	r2, r7
 8028bc2:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028bc6:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8028bca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028bce:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028bd2:	fb09 2208 	mla	r2, r9, r8, r2
 8028bd6:	ea4a 0101 	orr.w	r1, sl, r1
 8028bda:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8028bde:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028be2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028be6:	fb05 2201 	mla	r2, r5, r1, r2
 8028bea:	ea4b 0000 	orr.w	r0, fp, r0
 8028bee:	fb0c 2200 	mla	r2, ip, r0, r2
 8028bf2:	0d57      	lsrs	r7, r2, #21
 8028bf4:	0952      	lsrs	r2, r2, #5
 8028bf6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028bfa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028bfe:	433a      	orrs	r2, r7
 8028c00:	2bff      	cmp	r3, #255	; 0xff
 8028c02:	b292      	uxth	r2, r2
 8028c04:	d127      	bne.n	8028c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8028c06:	f8ae 2000 	strh.w	r2, [lr]
 8028c0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028c0c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8028c0e:	4413      	add	r3, r2
 8028c10:	9325      	str	r3, [sp, #148]	; 0x94
 8028c12:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8028c14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028c16:	441a      	add	r2, r3
 8028c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028c1a:	9226      	str	r2, [sp, #152]	; 0x98
 8028c1c:	3b01      	subs	r3, #1
 8028c1e:	f10e 0e02 	add.w	lr, lr, #2
 8028c22:	930f      	str	r3, [sp, #60]	; 0x3c
 8028c24:	e627      	b.n	8028876 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8028c26:	fb08 f000 	mul.w	r0, r8, r0
 8028c2a:	fb09 0303 	mla	r3, r9, r3, r0
 8028c2e:	e71b      	b.n	8028a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8028c30:	46b9      	mov	r9, r7
 8028c32:	e743      	b.n	8028abc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8028c34:	f1c2 0110 	rsb	r1, r2, #16
 8028c38:	437a      	muls	r2, r7
 8028c3a:	fb09 2901 	mla	r9, r9, r1, r2
 8028c3e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028c42:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028c46:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028c4a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028c4e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028c52:	4302      	orrs	r2, r0
 8028c54:	e7d4      	b.n	8028c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8028c56:	f8be 7000 	ldrh.w	r7, [lr]
 8028c5a:	4c1d      	ldr	r4, [pc, #116]	; (8028cd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d4>)
 8028c5c:	43db      	mvns	r3, r3
 8028c5e:	1238      	asrs	r0, r7, #8
 8028c60:	fa5f fc83 	uxtb.w	ip, r3
 8028c64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028c68:	10fd      	asrs	r5, r7, #3
 8028c6a:	fb00 f00c 	mul.w	r0, r0, ip
 8028c6e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8028c72:	fb05 f10c 	mul.w	r1, r5, ip
 8028c76:	1c45      	adds	r5, r0, #1
 8028c78:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028c7c:	1215      	asrs	r5, r2, #8
 8028c7e:	f025 0507 	bic.w	r5, r5, #7
 8028c82:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028c86:	1c4d      	adds	r5, r1, #1
 8028c88:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028c8c:	10d1      	asrs	r1, r2, #3
 8028c8e:	f021 0103 	bic.w	r1, r1, #3
 8028c92:	00fb      	lsls	r3, r7, #3
 8028c94:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028c98:	b2db      	uxtb	r3, r3
 8028c9a:	b2c0      	uxtb	r0, r0
 8028c9c:	00c9      	lsls	r1, r1, #3
 8028c9e:	fb03 f30c 	mul.w	r3, r3, ip
 8028ca2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028ca6:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8028caa:	4308      	orrs	r0, r1
 8028cac:	1c59      	adds	r1, r3, #1
 8028cae:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028cb2:	00d2      	lsls	r2, r2, #3
 8028cb4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028cb8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8028cbc:	4318      	orrs	r0, r3
 8028cbe:	f8ae 0000 	strh.w	r0, [lr]
 8028cc2:	e7a2      	b.n	8028c0a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 8028cc4:	b013      	add	sp, #76	; 0x4c
 8028cc6:	ecbd 8b08 	vpop	{d8-d11}
 8028cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028cce:	bf00      	nop
 8028cd0:	fffff800 	.word	0xfffff800

08028cd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8028cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028cd8:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8028cdc:	fb0c 4e03 	mla	lr, ip, r3, r4
 8028ce0:	f1bc 0f00 	cmp.w	ip, #0
 8028ce4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8028ce8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8028cec:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8028cf0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8028cf4:	8808      	ldrh	r0, [r1, #0]
 8028cf6:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8028cfa:	db2f      	blt.n	8028d5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8028cfc:	45e2      	cmp	sl, ip
 8028cfe:	dd2d      	ble.n	8028d5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8028d00:	2c00      	cmp	r4, #0
 8028d02:	db29      	blt.n	8028d58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8028d04:	42a3      	cmp	r3, r4
 8028d06:	dd27      	ble.n	8028d58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8028d08:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8028d0c:	1c62      	adds	r2, r4, #1
 8028d0e:	d428      	bmi.n	8028d62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028d10:	4293      	cmp	r3, r2
 8028d12:	dd26      	ble.n	8028d62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028d14:	b32f      	cbz	r7, 8028d62 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028d16:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8028d1a:	f11c 0c01 	adds.w	ip, ip, #1
 8028d1e:	d424      	bmi.n	8028d6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8028d20:	45e2      	cmp	sl, ip
 8028d22:	dd22      	ble.n	8028d6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8028d24:	2e00      	cmp	r6, #0
 8028d26:	f000 809d 	beq.w	8028e64 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8028d2a:	2c00      	cmp	r4, #0
 8028d2c:	db1b      	blt.n	8028d66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8028d2e:	42a3      	cmp	r3, r4
 8028d30:	dd19      	ble.n	8028d66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8028d32:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8028d36:	3401      	adds	r4, #1
 8028d38:	d41a      	bmi.n	8028d70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8028d3a:	42a3      	cmp	r3, r4
 8028d3c:	dd18      	ble.n	8028d70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8028d3e:	b1cf      	cbz	r7, 8028d74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8028d40:	3301      	adds	r3, #1
 8028d42:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8028d46:	2f0f      	cmp	r7, #15
 8028d48:	d915      	bls.n	8028d76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8028d4a:	4b49      	ldr	r3, [pc, #292]	; (8028e70 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8028d4c:	4a49      	ldr	r2, [pc, #292]	; (8028e74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8028d4e:	484a      	ldr	r0, [pc, #296]	; (8028e78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8028d50:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8028d54:	f005 fa5e 	bl	802e214 <__assert_func>
 8028d58:	4681      	mov	r9, r0
 8028d5a:	e7d7      	b.n	8028d0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8028d5c:	4686      	mov	lr, r0
 8028d5e:	4681      	mov	r9, r0
 8028d60:	e7db      	b.n	8028d1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028d62:	4686      	mov	lr, r0
 8028d64:	e7d9      	b.n	8028d1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028d66:	4684      	mov	ip, r0
 8028d68:	e7e5      	b.n	8028d36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8028d6a:	4603      	mov	r3, r0
 8028d6c:	4684      	mov	ip, r0
 8028d6e:	e7ea      	b.n	8028d46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028d70:	4603      	mov	r3, r0
 8028d72:	e7e8      	b.n	8028d46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028d74:	4603      	mov	r3, r0
 8028d76:	2e0f      	cmp	r6, #15
 8028d78:	d8e7      	bhi.n	8028d4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8028d7a:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8028d7e:	fb17 f806 	smulbb	r8, r7, r6
 8028d82:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028d86:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8028d8a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028d8e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8028d92:	ea44 0909 	orr.w	r9, r4, r9
 8028d96:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028d9a:	f1c6 0410 	rsb	r4, r6, #16
 8028d9e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028da2:	1be4      	subs	r4, r4, r7
 8028da4:	041a      	lsls	r2, r3, #16
 8028da6:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8028daa:	ea4a 0e0e 	orr.w	lr, sl, lr
 8028dae:	fb07 fe0e 	mul.w	lr, r7, lr
 8028db2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028db6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8028dba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028dbe:	fb04 e409 	mla	r4, r4, r9, lr
 8028dc2:	4313      	orrs	r3, r2
 8028dc4:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8028dc8:	fb08 4303 	mla	r3, r8, r3, r4
 8028dcc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028dd0:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8028dd4:	4322      	orrs	r2, r4
 8028dd6:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8028dda:	fb06 3202 	mla	r2, r6, r2, r3
 8028dde:	0d53      	lsrs	r3, r2, #21
 8028de0:	0952      	lsrs	r2, r2, #5
 8028de2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028de6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028dea:	431a      	orrs	r2, r3
 8028dec:	b293      	uxth	r3, r2
 8028dee:	b2af      	uxth	r7, r5
 8028df0:	1202      	asrs	r2, r0, #8
 8028df2:	43ed      	mvns	r5, r5
 8028df4:	b2ed      	uxtb	r5, r5
 8028df6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028dfa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028dfe:	fb12 f205 	smulbb	r2, r2, r5
 8028e02:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028e06:	fb0c 2c07 	mla	ip, ip, r7, r2
 8028e0a:	00dc      	lsls	r4, r3, #3
 8028e0c:	10da      	asrs	r2, r3, #3
 8028e0e:	10c6      	asrs	r6, r0, #3
 8028e10:	00c3      	lsls	r3, r0, #3
 8028e12:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8028e16:	b2db      	uxtb	r3, r3
 8028e18:	fb16 f605 	smulbb	r6, r6, r5
 8028e1c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028e20:	b2e4      	uxtb	r4, r4
 8028e22:	fb13 f305 	smulbb	r3, r3, r5
 8028e26:	fa1f fc8c 	uxth.w	ip, ip
 8028e2a:	fb02 6207 	mla	r2, r2, r7, r6
 8028e2e:	fb04 3307 	mla	r3, r4, r7, r3
 8028e32:	b296      	uxth	r6, r2
 8028e34:	b29a      	uxth	r2, r3
 8028e36:	f10c 0301 	add.w	r3, ip, #1
 8028e3a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028e3e:	1c53      	adds	r3, r2, #1
 8028e40:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028e44:	1c72      	adds	r2, r6, #1
 8028e46:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8028e4a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028e4e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028e52:	0952      	lsrs	r2, r2, #5
 8028e54:	ea43 030c 	orr.w	r3, r3, ip
 8028e58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028e5c:	4313      	orrs	r3, r2
 8028e5e:	800b      	strh	r3, [r1, #0]
 8028e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028e64:	2f0f      	cmp	r7, #15
 8028e66:	f63f af70 	bhi.w	8028d4a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8028e6a:	4603      	mov	r3, r0
 8028e6c:	4684      	mov	ip, r0
 8028e6e:	e784      	b.n	8028d7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8028e70:	08033161 	.word	0x08033161
 8028e74:	080337d7 	.word	0x080337d7
 8028e78:	080331e5 	.word	0x080331e5

08028e7c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e80:	ed2d 8b08 	vpush	{d8-d11}
 8028e84:	b093      	sub	sp, #76	; 0x4c
 8028e86:	461d      	mov	r5, r3
 8028e88:	9210      	str	r2, [sp, #64]	; 0x40
 8028e8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028e8c:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8028e90:	920b      	str	r2, [sp, #44]	; 0x2c
 8028e92:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8028e96:	910a      	str	r1, [sp, #40]	; 0x28
 8028e98:	6859      	ldr	r1, [r3, #4]
 8028e9a:	681b      	ldr	r3, [r3, #0]
 8028e9c:	9011      	str	r0, [sp, #68]	; 0x44
 8028e9e:	fb01 2707 	mla	r7, r1, r7, r2
 8028ea2:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028ea6:	9307      	str	r3, [sp, #28]
 8028ea8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028eaa:	681b      	ldr	r3, [r3, #0]
 8028eac:	9309      	str	r3, [sp, #36]	; 0x24
 8028eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028eb0:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028eb4:	43db      	mvns	r3, r3
 8028eb6:	b2db      	uxtb	r3, r3
 8028eb8:	eeb0 aa40 	vmov.f32	s20, s0
 8028ebc:	eef0 9a60 	vmov.f32	s19, s1
 8028ec0:	eeb0 9a41 	vmov.f32	s18, s2
 8028ec4:	eeb0 8a62 	vmov.f32	s16, s5
 8028ec8:	eef0 8a43 	vmov.f32	s17, s6
 8028ecc:	eef0 ba44 	vmov.f32	s23, s8
 8028ed0:	eeb0 ba64 	vmov.f32	s22, s9
 8028ed4:	eef0 aa45 	vmov.f32	s21, s10
 8028ed8:	9308      	str	r3, [sp, #32]
 8028eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028edc:	2b00      	cmp	r3, #0
 8028ede:	dc03      	bgt.n	8028ee8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028ee0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028ee2:	2b00      	cmp	r3, #0
 8028ee4:	f340 8203 	ble.w	80292ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8028ee8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028eea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028eee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028ef2:	1e48      	subs	r0, r1, #1
 8028ef4:	f102 3cff 	add.w	ip, r2, #4294967295
 8028ef8:	2d00      	cmp	r5, #0
 8028efa:	f340 80da 	ble.w	80290b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028efe:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028f02:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028f06:	d406      	bmi.n	8028f16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028f08:	4586      	cmp	lr, r0
 8028f0a:	da04      	bge.n	8028f16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028f0c:	2b00      	cmp	r3, #0
 8028f0e:	db02      	blt.n	8028f16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028f10:	4563      	cmp	r3, ip
 8028f12:	f2c0 80cf 	blt.w	80290b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8028f16:	f11e 0e01 	adds.w	lr, lr, #1
 8028f1a:	f100 80c1 	bmi.w	80290a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028f1e:	4571      	cmp	r1, lr
 8028f20:	f2c0 80be 	blt.w	80290a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028f24:	3301      	adds	r3, #1
 8028f26:	f100 80bb 	bmi.w	80290a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028f2a:	429a      	cmp	r2, r3
 8028f2c:	f2c0 80b8 	blt.w	80290a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028f30:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028f34:	46a9      	mov	r9, r5
 8028f36:	f1b9 0f00 	cmp.w	r9, #0
 8028f3a:	f340 80d8 	ble.w	80290ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8028f3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028f40:	1421      	asrs	r1, r4, #16
 8028f42:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028f46:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028f4a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028f4e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028f52:	f100 8111 	bmi.w	8029178 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028f56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028f5a:	4551      	cmp	r1, sl
 8028f5c:	f280 810c 	bge.w	8029178 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028f60:	2800      	cmp	r0, #0
 8028f62:	f2c0 8109 	blt.w	8029178 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028f66:	f103 3aff 	add.w	sl, r3, #4294967295
 8028f6a:	4550      	cmp	r0, sl
 8028f6c:	f280 8104 	bge.w	8029178 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028f70:	fa0f f38e 	sxth.w	r3, lr
 8028f74:	fb00 1103 	mla	r1, r0, r3, r1
 8028f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028f7a:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028f7e:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8028f82:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028f86:	f1bc 0f00 	cmp.w	ip, #0
 8028f8a:	d007      	beq.n	8028f9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8028f8c:	005b      	lsls	r3, r3, #1
 8028f8e:	eb0a 0003 	add.w	r0, sl, r3
 8028f92:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028f96:	930c      	str	r3, [sp, #48]	; 0x30
 8028f98:	8843      	ldrh	r3, [r0, #2]
 8028f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8028f9c:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8028fa0:	fb12 f30c 	smulbb	r3, r2, ip
 8028fa4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028fa8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028fac:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028fb0:	10db      	asrs	r3, r3, #3
 8028fb2:	ea40 000e 	orr.w	r0, r0, lr
 8028fb6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028fba:	f1cc 0e10 	rsb	lr, ip, #16
 8028fbe:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028fc2:	ebae 0e02 	sub.w	lr, lr, r2
 8028fc6:	ea4a 0101 	orr.w	r1, sl, r1
 8028fca:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028fce:	4351      	muls	r1, r2
 8028fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028fd2:	9f08      	ldr	r7, [sp, #32]
 8028fd4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028fd8:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028fdc:	0410      	lsls	r0, r2, #16
 8028fde:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028fe2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028fe6:	4310      	orrs	r0, r2
 8028fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028fea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028fec:	0412      	lsls	r2, r2, #16
 8028fee:	fb03 e000 	mla	r0, r3, r0, lr
 8028ff2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028ff6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028ffa:	ea42 020e 	orr.w	r2, r2, lr
 8028ffe:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8029002:	fb03 0302 	mla	r3, r3, r2, r0
 8029006:	0d5a      	lsrs	r2, r3, #21
 8029008:	095b      	lsrs	r3, r3, #5
 802900a:	f8b8 0000 	ldrh.w	r0, [r8]
 802900e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029012:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8029016:	4313      	orrs	r3, r2
 8029018:	b29b      	uxth	r3, r3
 802901a:	1201      	asrs	r1, r0, #8
 802901c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8029020:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8029024:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029028:	fb11 f107 	smulbb	r1, r1, r7
 802902c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8029030:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8029034:	00c0      	lsls	r0, r0, #3
 8029036:	fb0c 1c02 	mla	ip, ip, r2, r1
 802903a:	b2c0      	uxtb	r0, r0
 802903c:	10d9      	asrs	r1, r3, #3
 802903e:	00db      	lsls	r3, r3, #3
 8029040:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8029044:	b2db      	uxtb	r3, r3
 8029046:	fb10 f007 	smulbb	r0, r0, r7
 802904a:	fa1f fc8c 	uxth.w	ip, ip
 802904e:	fb03 0302 	mla	r3, r3, r2, r0
 8029052:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029056:	fb1e fe07 	smulbb	lr, lr, r7
 802905a:	fb01 e102 	mla	r1, r1, r2, lr
 802905e:	b29a      	uxth	r2, r3
 8029060:	f10c 0301 	add.w	r3, ip, #1
 8029064:	b289      	uxth	r1, r1
 8029066:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802906a:	1c53      	adds	r3, r2, #1
 802906c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029070:	1c4a      	adds	r2, r1, #1
 8029072:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8029076:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802907a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802907e:	0949      	lsrs	r1, r1, #5
 8029080:	ea43 030c 	orr.w	r3, r3, ip
 8029084:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029088:	430b      	orrs	r3, r1
 802908a:	f8a8 3000 	strh.w	r3, [r8]
 802908e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029090:	441c      	add	r4, r3
 8029092:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029094:	f108 0802 	add.w	r8, r8, #2
 8029098:	441e      	add	r6, r3
 802909a:	f109 39ff 	add.w	r9, r9, #4294967295
 802909e:	e74a      	b.n	8028f36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80290a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80290a2:	441c      	add	r4, r3
 80290a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80290a6:	441e      	add	r6, r3
 80290a8:	9b07      	ldr	r3, [sp, #28]
 80290aa:	3302      	adds	r3, #2
 80290ac:	3d01      	subs	r5, #1
 80290ae:	9307      	str	r3, [sp, #28]
 80290b0:	e722      	b.n	8028ef8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80290b2:	d022      	beq.n	80290fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80290b4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80290b6:	1e6b      	subs	r3, r5, #1
 80290b8:	fb00 4003 	mla	r0, r0, r3, r4
 80290bc:	1400      	asrs	r0, r0, #16
 80290be:	f53f af37 	bmi.w	8028f30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80290c2:	3901      	subs	r1, #1
 80290c4:	4288      	cmp	r0, r1
 80290c6:	f6bf af33 	bge.w	8028f30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80290ca:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80290cc:	fb01 6303 	mla	r3, r1, r3, r6
 80290d0:	141b      	asrs	r3, r3, #16
 80290d2:	f53f af2d 	bmi.w	8028f30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80290d6:	3a01      	subs	r2, #1
 80290d8:	4293      	cmp	r3, r2
 80290da:	f6bf af29 	bge.w	8028f30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80290de:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80290e2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80290e6:	46a8      	mov	r8, r5
 80290e8:	f1b8 0f00 	cmp.w	r8, #0
 80290ec:	dc5e      	bgt.n	80291ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80290ee:	9b07      	ldr	r3, [sp, #28]
 80290f0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80290f4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80290f8:	9307      	str	r3, [sp, #28]
 80290fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80290fc:	2b00      	cmp	r3, #0
 80290fe:	f340 80f6 	ble.w	80292ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8029102:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802910a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802910e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029110:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029114:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029118:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802911c:	eef0 6a48 	vmov.f32	s13, s16
 8029120:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029124:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029128:	ee37 8a48 	vsub.f32	s16, s14, s16
 802912c:	ee16 4a90 	vmov	r4, s13
 8029130:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029134:	eef0 6a68 	vmov.f32	s13, s17
 8029138:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802913c:	ee18 2a10 	vmov	r2, s16
 8029140:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029144:	fb92 f3f3 	sdiv	r3, r2, r3
 8029148:	ee18 2a90 	vmov	r2, s17
 802914c:	9327      	str	r3, [sp, #156]	; 0x9c
 802914e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029150:	fb92 f3f3 	sdiv	r3, r2, r3
 8029154:	9328      	str	r3, [sp, #160]	; 0xa0
 8029156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029158:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802915a:	3b01      	subs	r3, #1
 802915c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029160:	930a      	str	r3, [sp, #40]	; 0x28
 8029162:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029164:	ee16 6a90 	vmov	r6, s13
 8029168:	bf14      	ite	ne
 802916a:	461d      	movne	r5, r3
 802916c:	4615      	moveq	r5, r2
 802916e:	eef0 8a67 	vmov.f32	s17, s15
 8029172:	eeb0 8a47 	vmov.f32	s16, s14
 8029176:	e6b0      	b.n	8028eda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8029178:	f111 0a01 	adds.w	sl, r1, #1
 802917c:	d487      	bmi.n	802908e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802917e:	45d6      	cmp	lr, sl
 8029180:	db85      	blt.n	802908e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8029182:	f110 0a01 	adds.w	sl, r0, #1
 8029186:	d482      	bmi.n	802908e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8029188:	4553      	cmp	r3, sl
 802918a:	db80      	blt.n	802908e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802918c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802918e:	9101      	str	r1, [sp, #4]
 8029190:	b21b      	sxth	r3, r3
 8029192:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8029196:	9300      	str	r3, [sp, #0]
 8029198:	e9cd c704 	strd	ip, r7, [sp, #16]
 802919c:	fa0f f38e 	sxth.w	r3, lr
 80291a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80291a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80291a4:	4641      	mov	r1, r8
 80291a6:	f7ff fd95 	bl	8028cd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80291aa:	e770      	b.n	802908e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80291ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80291ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80291b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80291b4:	1430      	asrs	r0, r6, #16
 80291b6:	1423      	asrs	r3, r4, #16
 80291b8:	fb01 3000 	mla	r0, r1, r0, r3
 80291bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80291be:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80291c2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80291c6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80291ca:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80291ce:	8858      	ldrh	r0, [r3, #2]
 80291d0:	f1be 0f00 	cmp.w	lr, #0
 80291d4:	d00b      	beq.n	80291ee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80291d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80291da:	3901      	subs	r1, #1
 80291dc:	0049      	lsls	r1, r1, #1
 80291de:	3102      	adds	r1, #2
 80291e0:	eb03 0b01 	add.w	fp, r3, r1
 80291e4:	5a5b      	ldrh	r3, [r3, r1]
 80291e6:	930e      	str	r3, [sp, #56]	; 0x38
 80291e8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80291ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80291ee:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80291f2:	fb12 f30e 	smulbb	r3, r2, lr
 80291f6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80291fa:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80291fe:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8029202:	10db      	asrs	r3, r3, #3
 8029204:	ea41 010c 	orr.w	r1, r1, ip
 8029208:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802920c:	f1ce 0c10 	rsb	ip, lr, #16
 8029210:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029214:	ebac 0c02 	sub.w	ip, ip, r2
 8029218:	ea4b 0000 	orr.w	r0, fp, r0
 802921c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029220:	4350      	muls	r0, r2
 8029222:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029224:	9f08      	ldr	r7, [sp, #32]
 8029226:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802922a:	fb0c 0c01 	mla	ip, ip, r1, r0
 802922e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029232:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8029236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029238:	980e      	ldr	r0, [sp, #56]	; 0x38
 802923a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802923e:	0412      	lsls	r2, r2, #16
 8029240:	ea4b 0101 	orr.w	r1, fp, r1
 8029244:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029248:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802924c:	fb03 c101 	mla	r1, r3, r1, ip
 8029250:	4302      	orrs	r2, r0
 8029252:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029256:	fb03 1202 	mla	r2, r3, r2, r1
 802925a:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802925e:	0952      	lsrs	r2, r2, #5
 8029260:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8029264:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8029268:	f8b9 2000 	ldrh.w	r2, [r9]
 802926c:	ea4b 0303 	orr.w	r3, fp, r3
 8029270:	b29b      	uxth	r3, r3
 8029272:	1211      	asrs	r1, r2, #8
 8029274:	1218      	asrs	r0, r3, #8
 8029276:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802927a:	fb11 f107 	smulbb	r1, r1, r7
 802927e:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8029282:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029286:	00d2      	lsls	r2, r2, #3
 8029288:	fb00 100a 	mla	r0, r0, sl, r1
 802928c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8029290:	10d9      	asrs	r1, r3, #3
 8029292:	b2d2      	uxtb	r2, r2
 8029294:	00db      	lsls	r3, r3, #3
 8029296:	fb1c fc07 	smulbb	ip, ip, r7
 802929a:	fb12 f207 	smulbb	r2, r2, r7
 802929e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80292a2:	b2db      	uxtb	r3, r3
 80292a4:	b280      	uxth	r0, r0
 80292a6:	fb01 c10a 	mla	r1, r1, sl, ip
 80292aa:	fb03 230a 	mla	r3, r3, sl, r2
 80292ae:	b29b      	uxth	r3, r3
 80292b0:	b289      	uxth	r1, r1
 80292b2:	1c42      	adds	r2, r0, #1
 80292b4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80292b8:	f101 0c01 	add.w	ip, r1, #1
 80292bc:	1c5a      	adds	r2, r3, #1
 80292be:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80292c2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80292c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80292c8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80292cc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80292d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80292d4:	4310      	orrs	r0, r2
 80292d6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80292da:	441c      	add	r4, r3
 80292dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80292de:	ea40 000c 	orr.w	r0, r0, ip
 80292e2:	f829 0b02 	strh.w	r0, [r9], #2
 80292e6:	441e      	add	r6, r3
 80292e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80292ec:	e6fc      	b.n	80290e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80292ee:	b013      	add	sp, #76	; 0x4c
 80292f0:	ecbd 8b08 	vpop	{d8-d11}
 80292f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080292f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80292f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292fc:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8029300:	fb06 5c03 	mla	ip, r6, r3, r5
 8029304:	2e00      	cmp	r6, #0
 8029306:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 802930a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802930e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8029312:	8808      	ldrh	r0, [r1, #0]
 8029314:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8029318:	db2e      	blt.n	8029378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802931a:	45b0      	cmp	r8, r6
 802931c:	dd2c      	ble.n	8029378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802931e:	2d00      	cmp	r5, #0
 8029320:	db28      	blt.n	8029374 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8029322:	42ab      	cmp	r3, r5
 8029324:	dd26      	ble.n	8029374 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8029326:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 802932a:	1c6a      	adds	r2, r5, #1
 802932c:	d427      	bmi.n	802937e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802932e:	4293      	cmp	r3, r2
 8029330:	dd25      	ble.n	802937e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8029332:	b324      	cbz	r4, 802937e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8029334:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8029338:	3601      	adds	r6, #1
 802933a:	d424      	bmi.n	8029386 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802933c:	45b0      	cmp	r8, r6
 802933e:	dd22      	ble.n	8029386 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8029340:	b31f      	cbz	r7, 802938a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8029342:	2d00      	cmp	r5, #0
 8029344:	db1d      	blt.n	8029382 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8029346:	42ab      	cmp	r3, r5
 8029348:	dd1b      	ble.n	8029382 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802934a:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802934e:	3501      	adds	r5, #1
 8029350:	d405      	bmi.n	802935e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8029352:	42ab      	cmp	r3, r5
 8029354:	dd03      	ble.n	802935e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8029356:	b124      	cbz	r4, 8029362 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8029358:	3301      	adds	r3, #1
 802935a:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802935e:	2c0f      	cmp	r4, #15
 8029360:	d801      	bhi.n	8029366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8029362:	2f0f      	cmp	r7, #15
 8029364:	d914      	bls.n	8029390 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8029366:	4b27      	ldr	r3, [pc, #156]	; (8029404 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8029368:	4a27      	ldr	r2, [pc, #156]	; (8029408 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 802936a:	4828      	ldr	r0, [pc, #160]	; (802940c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 802936c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8029370:	f004 ff50 	bl	802e214 <__assert_func>
 8029374:	4684      	mov	ip, r0
 8029376:	e7d8      	b.n	802932a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8029378:	4602      	mov	r2, r0
 802937a:	4684      	mov	ip, r0
 802937c:	e7dc      	b.n	8029338 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 802937e:	4602      	mov	r2, r0
 8029380:	e7da      	b.n	8029338 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8029382:	4606      	mov	r6, r0
 8029384:	e7e3      	b.n	802934e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8029386:	4606      	mov	r6, r0
 8029388:	e7e9      	b.n	802935e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802938a:	2c0f      	cmp	r4, #15
 802938c:	d8eb      	bhi.n	8029366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802938e:	4606      	mov	r6, r0
 8029390:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8029394:	fb14 f307 	smulbb	r3, r4, r7
 8029398:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802939c:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80293a0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80293a4:	10db      	asrs	r3, r3, #3
 80293a6:	ea45 0c0c 	orr.w	ip, r5, ip
 80293aa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80293ae:	f1c7 0510 	rsb	r5, r7, #16
 80293b2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80293b6:	1b2d      	subs	r5, r5, r4
 80293b8:	ea4e 0202 	orr.w	r2, lr, r2
 80293bc:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80293c0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80293c4:	4354      	muls	r4, r2
 80293c6:	fb05 450c 	mla	r5, r5, ip, r4
 80293ca:	0404      	lsls	r4, r0, #16
 80293cc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80293d0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80293d4:	4320      	orrs	r0, r4
 80293d6:	fb03 5400 	mla	r4, r3, r0, r5
 80293da:	0430      	lsls	r0, r6, #16
 80293dc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80293e0:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80293e4:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 80293e8:	4330      	orrs	r0, r6
 80293ea:	fb07 4000 	mla	r0, r7, r0, r4
 80293ee:	0d43      	lsrs	r3, r0, #21
 80293f0:	0940      	lsrs	r0, r0, #5
 80293f2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80293f6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80293fa:	4318      	orrs	r0, r3
 80293fc:	8008      	strh	r0, [r1, #0]
 80293fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029402:	bf00      	nop
 8029404:	08033161 	.word	0x08033161
 8029408:	080337d7 	.word	0x080337d7
 802940c:	080331e5 	.word	0x080331e5

08029410 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029414:	ed2d 8b08 	vpush	{d8-d11}
 8029418:	b08f      	sub	sp, #60	; 0x3c
 802941a:	461d      	mov	r5, r3
 802941c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802941e:	920c      	str	r2, [sp, #48]	; 0x30
 8029420:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8029424:	9107      	str	r1, [sp, #28]
 8029426:	6859      	ldr	r1, [r3, #4]
 8029428:	681b      	ldr	r3, [r3, #0]
 802942a:	900d      	str	r0, [sp, #52]	; 0x34
 802942c:	fb01 2707 	mla	r7, r1, r7, r2
 8029430:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8029434:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029436:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802943a:	f8d3 8000 	ldr.w	r8, [r3]
 802943e:	eeb0 aa40 	vmov.f32	s20, s0
 8029442:	eef0 9a60 	vmov.f32	s19, s1
 8029446:	eeb0 9a41 	vmov.f32	s18, s2
 802944a:	eeb0 8a62 	vmov.f32	s16, s5
 802944e:	eef0 8a43 	vmov.f32	s17, s6
 8029452:	eef0 ba44 	vmov.f32	s23, s8
 8029456:	eeb0 ba64 	vmov.f32	s22, s9
 802945a:	eef0 aa45 	vmov.f32	s21, s10
 802945e:	9b07      	ldr	r3, [sp, #28]
 8029460:	2b00      	cmp	r3, #0
 8029462:	dc03      	bgt.n	802946c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029466:	2b00      	cmp	r3, #0
 8029468:	f340 8181 	ble.w	802976e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802946c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802946e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029472:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029476:	1e48      	subs	r0, r1, #1
 8029478:	f102 3cff 	add.w	ip, r2, #4294967295
 802947c:	2d00      	cmp	r5, #0
 802947e:	f340 809b 	ble.w	80295b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8029482:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029486:	ea4f 4326 	mov.w	r3, r6, asr #16
 802948a:	d406      	bmi.n	802949a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802948c:	4586      	cmp	lr, r0
 802948e:	da04      	bge.n	802949a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029490:	2b00      	cmp	r3, #0
 8029492:	db02      	blt.n	802949a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029494:	4563      	cmp	r3, ip
 8029496:	f2c0 8090 	blt.w	80295ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802949a:	f11e 0e01 	adds.w	lr, lr, #1
 802949e:	f100 8084 	bmi.w	80295aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80294a2:	4571      	cmp	r1, lr
 80294a4:	f2c0 8081 	blt.w	80295aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80294a8:	3301      	adds	r3, #1
 80294aa:	d47e      	bmi.n	80295aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80294ac:	429a      	cmp	r2, r3
 80294ae:	db7c      	blt.n	80295aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80294b0:	46aa      	mov	sl, r5
 80294b2:	46b9      	mov	r9, r7
 80294b4:	f1ba 0f00 	cmp.w	sl, #0
 80294b8:	f340 8099 	ble.w	80295ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80294bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80294be:	1421      	asrs	r1, r4, #16
 80294c0:	ea4f 4026 	mov.w	r0, r6, asr #16
 80294c4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80294c8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80294cc:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80294d0:	f100 80d0 	bmi.w	8029674 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80294d4:	f10e 3bff 	add.w	fp, lr, #4294967295
 80294d8:	4559      	cmp	r1, fp
 80294da:	f280 80cb 	bge.w	8029674 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80294de:	2800      	cmp	r0, #0
 80294e0:	f2c0 80c8 	blt.w	8029674 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80294e4:	f103 3bff 	add.w	fp, r3, #4294967295
 80294e8:	4558      	cmp	r0, fp
 80294ea:	f280 80c3 	bge.w	8029674 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80294ee:	fa0f fe8e 	sxth.w	lr, lr
 80294f2:	fb00 110e 	mla	r1, r0, lr, r1
 80294f6:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80294fa:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80294fe:	8841      	ldrh	r1, [r0, #2]
 8029500:	f1bc 0f00 	cmp.w	ip, #0
 8029504:	d00b      	beq.n	802951e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8029506:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802950a:	3b01      	subs	r3, #1
 802950c:	005b      	lsls	r3, r3, #1
 802950e:	3302      	adds	r3, #2
 8029510:	eb00 0e03 	add.w	lr, r0, r3
 8029514:	5ac3      	ldrh	r3, [r0, r3]
 8029516:	9308      	str	r3, [sp, #32]
 8029518:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802951c:	9309      	str	r3, [sp, #36]	; 0x24
 802951e:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8029522:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029526:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802952a:	ea40 000b 	orr.w	r0, r0, fp
 802952e:	fb12 f30c 	smulbb	r3, r2, ip
 8029532:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029536:	10db      	asrs	r3, r3, #3
 8029538:	f1cc 0e10 	rsb	lr, ip, #16
 802953c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029540:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029544:	ebae 0e02 	sub.w	lr, lr, r2
 8029548:	ea4b 0101 	orr.w	r1, fp, r1
 802954c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029550:	4351      	muls	r1, r2
 8029552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029554:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029558:	fb0e 1e00 	mla	lr, lr, r0, r1
 802955c:	0410      	lsls	r0, r2, #16
 802955e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029562:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029566:	4310      	orrs	r0, r2
 8029568:	9a08      	ldr	r2, [sp, #32]
 802956a:	9908      	ldr	r1, [sp, #32]
 802956c:	0412      	lsls	r2, r2, #16
 802956e:	fb03 e000 	mla	r0, r3, r0, lr
 8029572:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029576:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802957a:	ea42 020e 	orr.w	r2, r2, lr
 802957e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8029582:	fb03 0302 	mla	r3, r3, r2, r0
 8029586:	0d5a      	lsrs	r2, r3, #21
 8029588:	095b      	lsrs	r3, r3, #5
 802958a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802958e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8029592:	4313      	orrs	r3, r2
 8029594:	f8a9 3000 	strh.w	r3, [r9]
 8029598:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802959a:	441c      	add	r4, r3
 802959c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802959e:	f109 0902 	add.w	r9, r9, #2
 80295a2:	441e      	add	r6, r3
 80295a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80295a8:	e784      	b.n	80294b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80295aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80295ac:	441c      	add	r4, r3
 80295ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80295b0:	3d01      	subs	r5, #1
 80295b2:	441e      	add	r6, r3
 80295b4:	3702      	adds	r7, #2
 80295b6:	e761      	b.n	802947c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80295b8:	d01d      	beq.n	80295f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80295ba:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80295bc:	1e6b      	subs	r3, r5, #1
 80295be:	fb00 4003 	mla	r0, r0, r3, r4
 80295c2:	1400      	asrs	r0, r0, #16
 80295c4:	f53f af74 	bmi.w	80294b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80295c8:	3901      	subs	r1, #1
 80295ca:	4288      	cmp	r0, r1
 80295cc:	f6bf af70 	bge.w	80294b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80295d0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80295d2:	fb01 6303 	mla	r3, r1, r3, r6
 80295d6:	141b      	asrs	r3, r3, #16
 80295d8:	f53f af6a 	bmi.w	80294b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80295dc:	3a01      	subs	r2, #1
 80295de:	4293      	cmp	r3, r2
 80295e0:	f6bf af66 	bge.w	80294b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80295e4:	46a9      	mov	r9, r5
 80295e6:	46ba      	mov	sl, r7
 80295e8:	f1b9 0f00 	cmp.w	r9, #0
 80295ec:	dc5a      	bgt.n	80296a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80295ee:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80295f2:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80295f6:	9b07      	ldr	r3, [sp, #28]
 80295f8:	2b00      	cmp	r3, #0
 80295fa:	f340 80b8 	ble.w	802976e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80295fe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029606:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802960a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802960c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029610:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029614:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029618:	eef0 6a48 	vmov.f32	s13, s16
 802961c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029620:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029624:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029628:	ee16 4a90 	vmov	r4, s13
 802962c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029630:	eef0 6a68 	vmov.f32	s13, s17
 8029634:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029638:	ee18 2a10 	vmov	r2, s16
 802963c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029640:	fb92 f3f3 	sdiv	r3, r2, r3
 8029644:	ee18 2a90 	vmov	r2, s17
 8029648:	9323      	str	r3, [sp, #140]	; 0x8c
 802964a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802964c:	fb92 f3f3 	sdiv	r3, r2, r3
 8029650:	9324      	str	r3, [sp, #144]	; 0x90
 8029652:	9b07      	ldr	r3, [sp, #28]
 8029654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029656:	3b01      	subs	r3, #1
 8029658:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802965c:	9307      	str	r3, [sp, #28]
 802965e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029660:	ee16 6a90 	vmov	r6, s13
 8029664:	bf14      	ite	ne
 8029666:	461d      	movne	r5, r3
 8029668:	4615      	moveq	r5, r2
 802966a:	eef0 8a67 	vmov.f32	s17, s15
 802966e:	eeb0 8a47 	vmov.f32	s16, s14
 8029672:	e6f4      	b.n	802945e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8029674:	f111 0b01 	adds.w	fp, r1, #1
 8029678:	d48e      	bmi.n	8029598 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802967a:	45de      	cmp	lr, fp
 802967c:	db8c      	blt.n	8029598 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802967e:	f110 0b01 	adds.w	fp, r0, #1
 8029682:	d489      	bmi.n	8029598 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8029684:	455b      	cmp	r3, fp
 8029686:	db87      	blt.n	8029598 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8029688:	b21b      	sxth	r3, r3
 802968a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802968e:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8029692:	9300      	str	r3, [sp, #0]
 8029694:	4642      	mov	r2, r8
 8029696:	fa0f f38e 	sxth.w	r3, lr
 802969a:	4649      	mov	r1, r9
 802969c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802969e:	f7ff fe2b 	bl	80292f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80296a2:	e779      	b.n	8029598 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80296a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80296a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80296aa:	1420      	asrs	r0, r4, #16
 80296ac:	1431      	asrs	r1, r6, #16
 80296ae:	fb03 0101 	mla	r1, r3, r1, r0
 80296b2:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80296b6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80296ba:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80296be:	8841      	ldrh	r1, [r0, #2]
 80296c0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80296c4:	f1be 0f00 	cmp.w	lr, #0
 80296c8:	d00b      	beq.n	80296e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 80296ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80296ce:	3b01      	subs	r3, #1
 80296d0:	005b      	lsls	r3, r3, #1
 80296d2:	3302      	adds	r3, #2
 80296d4:	eb00 0b03 	add.w	fp, r0, r3
 80296d8:	5ac3      	ldrh	r3, [r0, r3]
 80296da:	930a      	str	r3, [sp, #40]	; 0x28
 80296dc:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80296e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80296e2:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80296e6:	fb12 f30e 	smulbb	r3, r2, lr
 80296ea:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80296ee:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80296f2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80296f6:	10db      	asrs	r3, r3, #3
 80296f8:	ea40 000c 	orr.w	r0, r0, ip
 80296fc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029700:	f1ce 0c10 	rsb	ip, lr, #16
 8029704:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029708:	ebac 0c02 	sub.w	ip, ip, r2
 802970c:	ea4b 0101 	orr.w	r1, fp, r1
 8029710:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029714:	4351      	muls	r1, r2
 8029716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029718:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802971c:	fb0c 1c00 	mla	ip, ip, r0, r1
 8029720:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029724:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8029728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802972a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802972c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029730:	0412      	lsls	r2, r2, #16
 8029732:	ea4b 0000 	orr.w	r0, fp, r0
 8029736:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802973a:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802973e:	fb03 c000 	mla	r0, r3, r0, ip
 8029742:	ea42 0b0b 	orr.w	fp, r2, fp
 8029746:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802974a:	fb03 000b 	mla	r0, r3, fp, r0
 802974e:	0d43      	lsrs	r3, r0, #21
 8029750:	0940      	lsrs	r0, r0, #5
 8029752:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029756:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802975a:	4318      	orrs	r0, r3
 802975c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802975e:	f82a 0b02 	strh.w	r0, [sl], #2
 8029762:	441c      	add	r4, r3
 8029764:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029766:	f109 39ff 	add.w	r9, r9, #4294967295
 802976a:	441e      	add	r6, r3
 802976c:	e73c      	b.n	80295e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802976e:	b00f      	add	sp, #60	; 0x3c
 8029770:	ecbd 8b08 	vpop	{d8-d11}
 8029774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029778 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8029778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802977c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8029780:	fb04 5603 	mla	r6, r4, r3, r5
 8029784:	2c00      	cmp	r4, #0
 8029786:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802978a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802978e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8029792:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8029796:	db36      	blt.n	8029806 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8029798:	45a6      	cmp	lr, r4
 802979a:	dd34      	ble.n	8029806 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 802979c:	2d00      	cmp	r5, #0
 802979e:	db30      	blt.n	8029802 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80297a0:	42ab      	cmp	r3, r5
 80297a2:	dd2e      	ble.n	8029802 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80297a4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80297a8:	1c6e      	adds	r6, r5, #1
 80297aa:	d42f      	bmi.n	802980c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80297ac:	42b3      	cmp	r3, r6
 80297ae:	dd2d      	ble.n	802980c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80297b0:	b370      	cbz	r0, 8029810 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80297b2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80297b6:	3401      	adds	r4, #1
 80297b8:	d42e      	bmi.n	8029818 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80297ba:	45a6      	cmp	lr, r4
 80297bc:	dd2c      	ble.n	8029818 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80297be:	b377      	cbz	r7, 802981e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 80297c0:	2d00      	cmp	r5, #0
 80297c2:	db27      	blt.n	8029814 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80297c4:	42ab      	cmp	r3, r5
 80297c6:	dd25      	ble.n	8029814 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80297c8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80297cc:	3501      	adds	r5, #1
 80297ce:	d429      	bmi.n	8029824 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 80297d0:	42ab      	cmp	r3, r5
 80297d2:	dd27      	ble.n	8029824 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 80297d4:	b340      	cbz	r0, 8029828 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 80297d6:	3301      	adds	r3, #1
 80297d8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80297dc:	280f      	cmp	r0, #15
 80297de:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80297e2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80297e6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80297ea:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80297ee:	d801      	bhi.n	80297f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 80297f0:	2f0f      	cmp	r7, #15
 80297f2:	d91b      	bls.n	802982c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 80297f4:	4b8d      	ldr	r3, [pc, #564]	; (8029a2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 80297f6:	4a8e      	ldr	r2, [pc, #568]	; (8029a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 80297f8:	488e      	ldr	r0, [pc, #568]	; (8029a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 80297fa:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80297fe:	f004 fd09 	bl	802e214 <__assert_func>
 8029802:	2200      	movs	r2, #0
 8029804:	e7d0      	b.n	80297a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8029806:	2600      	movs	r6, #0
 8029808:	4632      	mov	r2, r6
 802980a:	e7d4      	b.n	80297b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 802980c:	2600      	movs	r6, #0
 802980e:	e7d2      	b.n	80297b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8029810:	4606      	mov	r6, r0
 8029812:	e7d0      	b.n	80297b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8029814:	2400      	movs	r4, #0
 8029816:	e7d9      	b.n	80297cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8029818:	2300      	movs	r3, #0
 802981a:	461c      	mov	r4, r3
 802981c:	e7de      	b.n	80297dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802981e:	463b      	mov	r3, r7
 8029820:	463c      	mov	r4, r7
 8029822:	e7db      	b.n	80297dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029824:	2300      	movs	r3, #0
 8029826:	e7d9      	b.n	80297dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029828:	4603      	mov	r3, r0
 802982a:	e7d7      	b.n	80297dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802982c:	b280      	uxth	r0, r0
 802982e:	b2bf      	uxth	r7, r7
 8029830:	fb07 fe00 	mul.w	lr, r7, r0
 8029834:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8029838:	0100      	lsls	r0, r0, #4
 802983a:	eba0 0c0e 	sub.w	ip, r0, lr
 802983e:	b2bf      	uxth	r7, r7
 8029840:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8029844:	fa1f fc8c 	uxth.w	ip, ip
 8029848:	1bed      	subs	r5, r5, r7
 802984a:	b2ad      	uxth	r5, r5
 802984c:	fb0a f00c 	mul.w	r0, sl, ip
 8029850:	fb0b 0005 	mla	r0, fp, r5, r0
 8029854:	fb07 0009 	mla	r0, r7, r9, r0
 8029858:	fb0e 0008 	mla	r0, lr, r8, r0
 802985c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029860:	9001      	str	r0, [sp, #4]
 8029862:	2800      	cmp	r0, #0
 8029864:	f000 80de 	beq.w	8029a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8029868:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802986c:	d018      	beq.n	80298a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 802986e:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8029872:	fb0b f000 	mul.w	r0, fp, r0
 8029876:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802987a:	fb0b fb02 	mul.w	fp, fp, r2
 802987e:	0a02      	lsrs	r2, r0, #8
 8029880:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029884:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029888:	4402      	add	r2, r0
 802988a:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802988e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029892:	0a12      	lsrs	r2, r2, #8
 8029894:	0a00      	lsrs	r0, r0, #8
 8029896:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802989a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802989e:	4302      	orrs	r2, r0
 80298a0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80298a4:	d01a      	beq.n	80298dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 80298a6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80298aa:	fb0a f000 	mul.w	r0, sl, r0
 80298ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80298b2:	fb0a fa06 	mul.w	sl, sl, r6
 80298b6:	0a06      	lsrs	r6, r0, #8
 80298b8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80298bc:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80298c0:	4406      	add	r6, r0
 80298c2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80298c6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80298ca:	0a36      	lsrs	r6, r6, #8
 80298cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80298d0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80298d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80298d8:	ea46 060a 	orr.w	r6, r6, sl
 80298dc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80298e0:	d01b      	beq.n	802991a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 80298e2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80298e6:	fb09 fa0a 	mul.w	sl, r9, sl
 80298ea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80298ee:	fb09 f004 	mul.w	r0, r9, r4
 80298f2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80298f6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80298fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80298fe:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8029902:	4454      	add	r4, sl
 8029904:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8029908:	0a24      	lsrs	r4, r4, #8
 802990a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802990e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029912:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029916:	ea44 0409 	orr.w	r4, r4, r9
 802991a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802991e:	d01b      	beq.n	8029958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8029920:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8029924:	fb08 f909 	mul.w	r9, r8, r9
 8029928:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802992c:	fb08 f003 	mul.w	r0, r8, r3
 8029930:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8029934:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029938:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802993c:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8029940:	444b      	add	r3, r9
 8029942:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8029946:	0a1b      	lsrs	r3, r3, #8
 8029948:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802994c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029950:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8029954:	ea43 0308 	orr.w	r3, r3, r8
 8029958:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802995c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8029960:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8029964:	fb0c f808 	mul.w	r8, ip, r8
 8029968:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802996c:	fb0c f606 	mul.w	r6, ip, r6
 8029970:	fb05 8909 	mla	r9, r5, r9, r8
 8029974:	fb05 6502 	mla	r5, r5, r2, r6
 8029978:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802997c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8029980:	9a01      	ldr	r2, [sp, #4]
 8029982:	8808      	ldrh	r0, [r1, #0]
 8029984:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029988:	fb07 9908 	mla	r9, r7, r8, r9
 802998c:	fb07 5704 	mla	r7, r7, r4, r5
 8029990:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8029994:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029998:	b2b6      	uxth	r6, r6
 802999a:	fb0e 9808 	mla	r8, lr, r8, r9
 802999e:	fb0e 7e03 	mla	lr, lr, r3, r7
 80299a2:	4372      	muls	r2, r6
 80299a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80299a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80299ac:	1c53      	adds	r3, r2, #1
 80299ae:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80299b2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80299b6:	ea48 0e0e 	orr.w	lr, r8, lr
 80299ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80299be:	1205      	asrs	r5, r0, #8
 80299c0:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80299c4:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80299c8:	b2db      	uxtb	r3, r3
 80299ca:	fb12 f206 	smulbb	r2, r2, r6
 80299ce:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80299d2:	fb05 2503 	mla	r5, r5, r3, r2
 80299d6:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80299da:	10c2      	asrs	r2, r0, #3
 80299dc:	fa5f fe8e 	uxtb.w	lr, lr
 80299e0:	00c0      	lsls	r0, r0, #3
 80299e2:	fb14 f406 	smulbb	r4, r4, r6
 80299e6:	b2c0      	uxtb	r0, r0
 80299e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80299ec:	fb1e fe06 	smulbb	lr, lr, r6
 80299f0:	fb02 4203 	mla	r2, r2, r3, r4
 80299f4:	b2ad      	uxth	r5, r5
 80299f6:	fb00 e303 	mla	r3, r0, r3, lr
 80299fa:	b298      	uxth	r0, r3
 80299fc:	b294      	uxth	r4, r2
 80299fe:	1c6b      	adds	r3, r5, #1
 8029a00:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029a04:	1c62      	adds	r2, r4, #1
 8029a06:	1c43      	adds	r3, r0, #1
 8029a08:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8029a0c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8029a10:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029a14:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029a18:	0952      	lsrs	r2, r2, #5
 8029a1a:	432b      	orrs	r3, r5
 8029a1c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029a20:	4313      	orrs	r3, r2
 8029a22:	800b      	strh	r3, [r1, #0]
 8029a24:	b003      	add	sp, #12
 8029a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a2a:	bf00      	nop
 8029a2c:	08033161 	.word	0x08033161
 8029a30:	0803372e 	.word	0x0803372e
 8029a34:	080331e5 	.word	0x080331e5

08029a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a3c:	ed2d 8b08 	vpush	{d8-d11}
 8029a40:	b09d      	sub	sp, #116	; 0x74
 8029a42:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8029a46:	9219      	str	r2, [sp, #100]	; 0x64
 8029a48:	9307      	str	r3, [sp, #28]
 8029a4a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8029a4c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8029a50:	931a      	str	r3, [sp, #104]	; 0x68
 8029a52:	9117      	str	r1, [sp, #92]	; 0x5c
 8029a54:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8029a58:	901b      	str	r0, [sp, #108]	; 0x6c
 8029a5a:	6850      	ldr	r0, [r2, #4]
 8029a5c:	6812      	ldr	r2, [r2, #0]
 8029a5e:	fb00 1303 	mla	r3, r0, r3, r1
 8029a62:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029a66:	930a      	str	r3, [sp, #40]	; 0x28
 8029a68:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029a6a:	681b      	ldr	r3, [r3, #0]
 8029a6c:	9310      	str	r3, [sp, #64]	; 0x40
 8029a6e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8029a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8029a74:	eeb0 aa40 	vmov.f32	s20, s0
 8029a78:	eef0 9a60 	vmov.f32	s19, s1
 8029a7c:	eeb0 9a41 	vmov.f32	s18, s2
 8029a80:	eeb0 8a62 	vmov.f32	s16, s5
 8029a84:	eef0 8a43 	vmov.f32	s17, s6
 8029a88:	eef0 ba44 	vmov.f32	s23, s8
 8029a8c:	eeb0 ba64 	vmov.f32	s22, s9
 8029a90:	eef0 aa45 	vmov.f32	s21, s10
 8029a94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029a96:	2b00      	cmp	r3, #0
 8029a98:	dc03      	bgt.n	8029aa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8029a9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8029a9c:	2b00      	cmp	r3, #0
 8029a9e:	f340 8375 	ble.w	802a18c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8029aa2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029aa4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029aa8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029aac:	1e48      	subs	r0, r1, #1
 8029aae:	1e57      	subs	r7, r2, #1
 8029ab0:	9b07      	ldr	r3, [sp, #28]
 8029ab2:	2b00      	cmp	r3, #0
 8029ab4:	f340 818e 	ble.w	8029dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8029ab8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029abc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029ac0:	d406      	bmi.n	8029ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029ac2:	4584      	cmp	ip, r0
 8029ac4:	da04      	bge.n	8029ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029ac6:	2b00      	cmp	r3, #0
 8029ac8:	db02      	blt.n	8029ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029aca:	42bb      	cmp	r3, r7
 8029acc:	f2c0 8183 	blt.w	8029dd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8029ad0:	f11c 0c01 	adds.w	ip, ip, #1
 8029ad4:	f100 8173 	bmi.w	8029dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029ad8:	4561      	cmp	r1, ip
 8029ada:	f2c0 8170 	blt.w	8029dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029ade:	3301      	adds	r3, #1
 8029ae0:	f100 816d 	bmi.w	8029dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029ae4:	429a      	cmp	r2, r3
 8029ae6:	f2c0 816a 	blt.w	8029dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029aea:	9b07      	ldr	r3, [sp, #28]
 8029aec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8029aee:	9318      	str	r3, [sp, #96]	; 0x60
 8029af0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029af2:	2b00      	cmp	r3, #0
 8029af4:	f340 818c 	ble.w	8029e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8029af8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8029afa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029afc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029b00:	689b      	ldr	r3, [r3, #8]
 8029b02:	1422      	asrs	r2, r4, #16
 8029b04:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029b08:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029b0c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029b10:	f100 81cd 	bmi.w	8029eae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029b14:	f103 38ff 	add.w	r8, r3, #4294967295
 8029b18:	4542      	cmp	r2, r8
 8029b1a:	f280 81c8 	bge.w	8029eae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029b1e:	f1bc 0f00 	cmp.w	ip, #0
 8029b22:	f2c0 81c4 	blt.w	8029eae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029b26:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029b2a:	45c4      	cmp	ip, r8
 8029b2c:	f280 81bf 	bge.w	8029eae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029b30:	b21b      	sxth	r3, r3
 8029b32:	fb0c 2203 	mla	r2, ip, r3, r2
 8029b36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029b38:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029b3c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029b40:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029b44:	2800      	cmp	r0, #0
 8029b46:	f000 81a9 	beq.w	8029e9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8029b4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029b4e:	950c      	str	r5, [sp, #48]	; 0x30
 8029b50:	0e2d      	lsrs	r5, r5, #24
 8029b52:	9513      	str	r5, [sp, #76]	; 0x4c
 8029b54:	b181      	cbz	r1, 8029b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029b56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029b5a:	3b01      	subs	r3, #1
 8029b5c:	009b      	lsls	r3, r3, #2
 8029b5e:	3304      	adds	r3, #4
 8029b60:	eb08 0c03 	add.w	ip, r8, r3
 8029b64:	f858 3003 	ldr.w	r3, [r8, r3]
 8029b68:	9308      	str	r3, [sp, #32]
 8029b6a:	0e1b      	lsrs	r3, r3, #24
 8029b6c:	9311      	str	r3, [sp, #68]	; 0x44
 8029b6e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029b72:	930d      	str	r3, [sp, #52]	; 0x34
 8029b74:	0e1b      	lsrs	r3, r3, #24
 8029b76:	9314      	str	r3, [sp, #80]	; 0x50
 8029b78:	b280      	uxth	r0, r0
 8029b7a:	b289      	uxth	r1, r1
 8029b7c:	fb00 f901 	mul.w	r9, r0, r1
 8029b80:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8029b84:	0100      	lsls	r0, r0, #4
 8029b86:	eba0 0809 	sub.w	r8, r0, r9
 8029b8a:	b289      	uxth	r1, r1
 8029b8c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8029b90:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029b92:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029b94:	fa1f f888 	uxth.w	r8, r8
 8029b98:	1a5b      	subs	r3, r3, r1
 8029b9a:	b29b      	uxth	r3, r3
 8029b9c:	fb08 f000 	mul.w	r0, r8, r0
 8029ba0:	fb03 000e 	mla	r0, r3, lr, r0
 8029ba4:	fb01 0005 	mla	r0, r1, r5, r0
 8029ba8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029baa:	fb09 0005 	mla	r0, r9, r5, r0
 8029bae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029bb2:	2800      	cmp	r0, #0
 8029bb4:	f000 80fa 	beq.w	8029dac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029bb8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8029bbc:	d01b      	beq.n	8029bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8029bbe:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8029bc2:	fb0e fa0a 	mul.w	sl, lr, sl
 8029bc6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029bca:	fb0e fe02 	mul.w	lr, lr, r2
 8029bce:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029bd2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029bd6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029bda:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8029bde:	4452      	add	r2, sl
 8029be0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029be4:	0a12      	lsrs	r2, r2, #8
 8029be6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029bea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029bee:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029bf2:	ea42 020c 	orr.w	r2, r2, ip
 8029bf6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029bf8:	2dff      	cmp	r5, #255	; 0xff
 8029bfa:	d021      	beq.n	8029c40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8029bfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029bfe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029c02:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029c04:	fb05 fb0b 	mul.w	fp, r5, fp
 8029c08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029c0a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029c0e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029c10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029c14:	fb05 fa0a 	mul.w	sl, r5, sl
 8029c18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029c1c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029c20:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029c24:	44de      	add	lr, fp
 8029c26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029c2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029c2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029c36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029c3a:	ea4e 050a 	orr.w	r5, lr, sl
 8029c3e:	950c      	str	r5, [sp, #48]	; 0x30
 8029c40:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029c42:	2dff      	cmp	r5, #255	; 0xff
 8029c44:	d021      	beq.n	8029c8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8029c46:	9d08      	ldr	r5, [sp, #32]
 8029c48:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029c4c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029c4e:	fb05 fb0b 	mul.w	fp, r5, fp
 8029c52:	9d08      	ldr	r5, [sp, #32]
 8029c54:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029c58:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029c5a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029c5e:	fb05 fa0a 	mul.w	sl, r5, sl
 8029c62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029c66:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029c6a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029c6e:	44de      	add	lr, fp
 8029c70:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029c74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029c78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029c80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029c84:	ea4e 050a 	orr.w	r5, lr, sl
 8029c88:	9508      	str	r5, [sp, #32]
 8029c8a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029c8c:	2dff      	cmp	r5, #255	; 0xff
 8029c8e:	d021      	beq.n	8029cd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8029c90:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029c92:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029c96:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029c98:	fb05 fb0b 	mul.w	fp, r5, fp
 8029c9c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029c9e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029ca2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029ca4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029ca8:	fb05 fa0a 	mul.w	sl, r5, sl
 8029cac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029cb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029cb4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029cb8:	44de      	add	lr, fp
 8029cba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029cbe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029cc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029cc6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029cca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029cce:	ea4e 050a 	orr.w	r5, lr, sl
 8029cd2:	950d      	str	r5, [sp, #52]	; 0x34
 8029cd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029cd6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029cda:	9d08      	ldr	r5, [sp, #32]
 8029cdc:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8029ce0:	fb08 fc0c 	mul.w	ip, r8, ip
 8029ce4:	fb03 cc0e 	mla	ip, r3, lr, ip
 8029ce8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029cec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029cee:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029cf2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029cf8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029cfc:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029d00:	fb08 f80e 	mul.w	r8, r8, lr
 8029d04:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029d08:	fb03 8202 	mla	r2, r3, r2, r8
 8029d0c:	9b08      	ldr	r3, [sp, #32]
 8029d0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029d10:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8029d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029d16:	fb01 220a 	mla	r2, r1, sl, r2
 8029d1a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8029d1e:	fb09 2901 	mla	r9, r9, r1, r2
 8029d22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029d24:	883b      	ldrh	r3, [r7, #0]
 8029d26:	4342      	muls	r2, r0
 8029d28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d2c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029d30:	1c50      	adds	r0, r2, #1
 8029d32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d36:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029d3a:	ea4c 0c09 	orr.w	ip, ip, r9
 8029d3e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029d42:	1219      	asrs	r1, r3, #8
 8029d44:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029d48:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029d4c:	b2c0      	uxtb	r0, r0
 8029d4e:	fb12 f205 	smulbb	r2, r2, r5
 8029d52:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029d56:	fb01 2100 	mla	r1, r1, r0, r2
 8029d5a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8029d5e:	10da      	asrs	r2, r3, #3
 8029d60:	fa5f fc8c 	uxtb.w	ip, ip
 8029d64:	00db      	lsls	r3, r3, #3
 8029d66:	fb1c fc05 	smulbb	ip, ip, r5
 8029d6a:	b2db      	uxtb	r3, r3
 8029d6c:	b289      	uxth	r1, r1
 8029d6e:	fb03 c300 	mla	r3, r3, r0, ip
 8029d72:	fa1f fc83 	uxth.w	ip, r3
 8029d76:	1c4b      	adds	r3, r1, #1
 8029d78:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029d7c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029d80:	fb1e fe05 	smulbb	lr, lr, r5
 8029d84:	f10c 0301 	add.w	r3, ip, #1
 8029d88:	fb02 e200 	mla	r2, r2, r0, lr
 8029d8c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029d90:	b292      	uxth	r2, r2
 8029d92:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029d96:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029d9a:	430b      	orrs	r3, r1
 8029d9c:	1c51      	adds	r1, r2, #1
 8029d9e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029da2:	0952      	lsrs	r2, r2, #5
 8029da4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029da8:	4313      	orrs	r3, r2
 8029daa:	803b      	strh	r3, [r7, #0]
 8029dac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029dae:	441c      	add	r4, r3
 8029db0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029db2:	441e      	add	r6, r3
 8029db4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029db6:	3b01      	subs	r3, #1
 8029db8:	3702      	adds	r7, #2
 8029dba:	9318      	str	r3, [sp, #96]	; 0x60
 8029dbc:	e698      	b.n	8029af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8029dbe:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029dc0:	441c      	add	r4, r3
 8029dc2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029dc4:	441e      	add	r6, r3
 8029dc6:	9b07      	ldr	r3, [sp, #28]
 8029dc8:	3b01      	subs	r3, #1
 8029dca:	9307      	str	r3, [sp, #28]
 8029dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029dce:	3302      	adds	r3, #2
 8029dd0:	930a      	str	r3, [sp, #40]	; 0x28
 8029dd2:	e66d      	b.n	8029ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029dd4:	d023      	beq.n	8029e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8029dd6:	9b07      	ldr	r3, [sp, #28]
 8029dd8:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8029dda:	3b01      	subs	r3, #1
 8029ddc:	fb00 4003 	mla	r0, r0, r3, r4
 8029de0:	1400      	asrs	r0, r0, #16
 8029de2:	f53f ae82 	bmi.w	8029aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029de6:	3901      	subs	r1, #1
 8029de8:	4288      	cmp	r0, r1
 8029dea:	f6bf ae7e 	bge.w	8029aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029dee:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8029df0:	fb01 6303 	mla	r3, r1, r3, r6
 8029df4:	141b      	asrs	r3, r3, #16
 8029df6:	f53f ae78 	bmi.w	8029aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029dfa:	3a01      	subs	r2, #1
 8029dfc:	4293      	cmp	r3, r2
 8029dfe:	f6bf ae74 	bge.w	8029aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029e02:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029e06:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8029e0a:	f1bb 0f00 	cmp.w	fp, #0
 8029e0e:	dc6c      	bgt.n	8029eea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029e10:	9b07      	ldr	r3, [sp, #28]
 8029e12:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029e18:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029e1c:	930a      	str	r3, [sp, #40]	; 0x28
 8029e1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029e20:	2b00      	cmp	r3, #0
 8029e22:	f340 81b3 	ble.w	802a18c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8029e26:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029e2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029e2e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029e32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029e34:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029e38:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029e3c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029e40:	eef0 6a48 	vmov.f32	s13, s16
 8029e44:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029e48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029e4c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029e50:	ee16 4a90 	vmov	r4, s13
 8029e54:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029e58:	eef0 6a68 	vmov.f32	s13, s17
 8029e5c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029e60:	ee18 2a10 	vmov	r2, s16
 8029e64:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029e68:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e6c:	ee18 2a90 	vmov	r2, s17
 8029e70:	9331      	str	r3, [sp, #196]	; 0xc4
 8029e72:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029e74:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e78:	9332      	str	r3, [sp, #200]	; 0xc8
 8029e7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029e7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8029e7e:	3b01      	subs	r3, #1
 8029e80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029e84:	9317      	str	r3, [sp, #92]	; 0x5c
 8029e86:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029e88:	bf08      	it	eq
 8029e8a:	4613      	moveq	r3, r2
 8029e8c:	ee16 6a90 	vmov	r6, s13
 8029e90:	9307      	str	r3, [sp, #28]
 8029e92:	eef0 8a67 	vmov.f32	s17, s15
 8029e96:	eeb0 8a47 	vmov.f32	s16, s14
 8029e9a:	e5fb      	b.n	8029a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029e9c:	2900      	cmp	r1, #0
 8029e9e:	f43f ae6b 	beq.w	8029b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029ea2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029ea6:	9308      	str	r3, [sp, #32]
 8029ea8:	0e1b      	lsrs	r3, r3, #24
 8029eaa:	9311      	str	r3, [sp, #68]	; 0x44
 8029eac:	e664      	b.n	8029b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029eae:	f112 0801 	adds.w	r8, r2, #1
 8029eb2:	f53f af7b 	bmi.w	8029dac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029eb6:	4543      	cmp	r3, r8
 8029eb8:	f6ff af78 	blt.w	8029dac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029ebc:	f11c 0801 	adds.w	r8, ip, #1
 8029ec0:	f53f af74 	bmi.w	8029dac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029ec4:	45c6      	cmp	lr, r8
 8029ec6:	f6ff af71 	blt.w	8029dac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029eca:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8029ecc:	9201      	str	r2, [sp, #4]
 8029ece:	fa0f f28e 	sxth.w	r2, lr
 8029ed2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8029ed6:	e9cd c002 	strd	ip, r0, [sp, #8]
 8029eda:	9200      	str	r2, [sp, #0]
 8029edc:	b21b      	sxth	r3, r3
 8029ede:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029ee0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029ee2:	4639      	mov	r1, r7
 8029ee4:	f7ff fc48 	bl	8029778 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8029ee8:	e760      	b.n	8029dac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029eea:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029eec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029eee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029ef2:	1427      	asrs	r7, r4, #16
 8029ef4:	1433      	asrs	r3, r6, #16
 8029ef6:	fb01 7303 	mla	r3, r1, r3, r7
 8029efa:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029efe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029f02:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029f06:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029f0a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029f0e:	2a00      	cmp	r2, #0
 8029f10:	f000 8133 	beq.w	802a17a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8029f14:	687d      	ldr	r5, [r7, #4]
 8029f16:	950e      	str	r5, [sp, #56]	; 0x38
 8029f18:	0e2d      	lsrs	r5, r5, #24
 8029f1a:	9515      	str	r5, [sp, #84]	; 0x54
 8029f1c:	b178      	cbz	r0, 8029f3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029f1e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8029f22:	3901      	subs	r1, #1
 8029f24:	0089      	lsls	r1, r1, #2
 8029f26:	3104      	adds	r1, #4
 8029f28:	eb07 0e01 	add.w	lr, r7, r1
 8029f2c:	5879      	ldr	r1, [r7, r1]
 8029f2e:	9109      	str	r1, [sp, #36]	; 0x24
 8029f30:	0e09      	lsrs	r1, r1, #24
 8029f32:	9112      	str	r1, [sp, #72]	; 0x48
 8029f34:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029f38:	910f      	str	r1, [sp, #60]	; 0x3c
 8029f3a:	0e09      	lsrs	r1, r1, #24
 8029f3c:	9116      	str	r1, [sp, #88]	; 0x58
 8029f3e:	b292      	uxth	r2, r2
 8029f40:	b280      	uxth	r0, r0
 8029f42:	fb02 f800 	mul.w	r8, r2, r0
 8029f46:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029f4a:	0112      	lsls	r2, r2, #4
 8029f4c:	eba2 0e08 	sub.w	lr, r2, r8
 8029f50:	b280      	uxth	r0, r0
 8029f52:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8029f56:	9915      	ldr	r1, [sp, #84]	; 0x54
 8029f58:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029f5a:	fa1f fe8e 	uxth.w	lr, lr
 8029f5e:	1a12      	subs	r2, r2, r0
 8029f60:	b292      	uxth	r2, r2
 8029f62:	fb0e f101 	mul.w	r1, lr, r1
 8029f66:	fb02 110c 	mla	r1, r2, ip, r1
 8029f6a:	fb00 1105 	mla	r1, r0, r5, r1
 8029f6e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029f70:	fb08 1105 	mla	r1, r8, r5, r1
 8029f74:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029f78:	2900      	cmp	r1, #0
 8029f7a:	f000 80f5 	beq.w	802a168 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029f7e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029f82:	d019      	beq.n	8029fb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8029f84:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029f88:	fb0c fa0a 	mul.w	sl, ip, sl
 8029f8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029f90:	fb0c fc03 	mul.w	ip, ip, r3
 8029f94:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029f98:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029f9c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029fa0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029fa4:	4453      	add	r3, sl
 8029fa6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029faa:	0a1b      	lsrs	r3, r3, #8
 8029fac:	0a3f      	lsrs	r7, r7, #8
 8029fae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029fb2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029fb6:	433b      	orrs	r3, r7
 8029fb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029fba:	2dff      	cmp	r5, #255	; 0xff
 8029fbc:	d020      	beq.n	802a000 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8029fbe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029fc0:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029fc4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029fc6:	436f      	muls	r7, r5
 8029fc8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029fca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029fce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029fd0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029fd4:	fb05 fa0a 	mul.w	sl, r5, sl
 8029fd8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029fdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029fe0:	44bc      	add	ip, r7
 8029fe2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029fe6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029fea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029fee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029ff2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029ff6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029ffa:	ea4c 050a 	orr.w	r5, ip, sl
 8029ffe:	950e      	str	r5, [sp, #56]	; 0x38
 802a000:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a002:	2dff      	cmp	r5, #255	; 0xff
 802a004:	d020      	beq.n	802a048 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802a006:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a008:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a00c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a00e:	436f      	muls	r7, r5
 802a010:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a012:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a016:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a018:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a01c:	fb05 fa0a 	mul.w	sl, r5, sl
 802a020:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a024:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a028:	44bc      	add	ip, r7
 802a02a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a02e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a032:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a036:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a03a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a03e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a042:	ea4c 050a 	orr.w	r5, ip, sl
 802a046:	9509      	str	r5, [sp, #36]	; 0x24
 802a048:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a04a:	2dff      	cmp	r5, #255	; 0xff
 802a04c:	d020      	beq.n	802a090 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 802a04e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a050:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a054:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a056:	436f      	muls	r7, r5
 802a058:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a05a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a05e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a060:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a064:	fb05 fa0a 	mul.w	sl, r5, sl
 802a068:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a06c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a070:	44bc      	add	ip, r7
 802a072:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a076:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a07a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a07e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a082:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a086:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a08a:	ea4c 050a 	orr.w	r5, ip, sl
 802a08e:	950f      	str	r5, [sp, #60]	; 0x3c
 802a090:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a092:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a096:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a098:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802a09c:	fb0e f707 	mul.w	r7, lr, r7
 802a0a0:	fb02 770c 	mla	r7, r2, ip, r7
 802a0a4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a0a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a0aa:	fb00 770c 	mla	r7, r0, ip, r7
 802a0ae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a0b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a0b4:	fb08 770c 	mla	r7, r8, ip, r7
 802a0b8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a0bc:	fb0e fe0c 	mul.w	lr, lr, ip
 802a0c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a0c4:	fb02 e303 	mla	r3, r2, r3, lr
 802a0c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a0ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a0cc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802a0d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a0d2:	fb00 330a 	mla	r3, r0, sl, r3
 802a0d6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802a0da:	fb08 3c0c 	mla	ip, r8, ip, r3
 802a0de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a0e0:	f8b9 0000 	ldrh.w	r0, [r9]
 802a0e4:	4359      	muls	r1, r3
 802a0e6:	0a3f      	lsrs	r7, r7, #8
 802a0e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a0ec:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a0f0:	1c4b      	adds	r3, r1, #1
 802a0f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802a0f6:	ea47 070c 	orr.w	r7, r7, ip
 802a0fa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a0fe:	1202      	asrs	r2, r0, #8
 802a100:	0c3b      	lsrs	r3, r7, #16
 802a102:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802a106:	b2c9      	uxtb	r1, r1
 802a108:	fb13 f305 	smulbb	r3, r3, r5
 802a10c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802a110:	fb02 3201 	mla	r2, r2, r1, r3
 802a114:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802a118:	10c3      	asrs	r3, r0, #3
 802a11a:	b2ff      	uxtb	r7, r7
 802a11c:	00c0      	lsls	r0, r0, #3
 802a11e:	b2c0      	uxtb	r0, r0
 802a120:	fb17 f705 	smulbb	r7, r7, r5
 802a124:	fb00 7001 	mla	r0, r0, r1, r7
 802a128:	b292      	uxth	r2, r2
 802a12a:	fb1c fc05 	smulbb	ip, ip, r5
 802a12e:	b280      	uxth	r0, r0
 802a130:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802a134:	fb03 c301 	mla	r3, r3, r1, ip
 802a138:	1c51      	adds	r1, r2, #1
 802a13a:	f100 0c01 	add.w	ip, r0, #1
 802a13e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a142:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802a146:	b29b      	uxth	r3, r3
 802a148:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802a14c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802a150:	ea4c 0202 	orr.w	r2, ip, r2
 802a154:	f103 0c01 	add.w	ip, r3, #1
 802a158:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802a15c:	095b      	lsrs	r3, r3, #5
 802a15e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a162:	431a      	orrs	r2, r3
 802a164:	f8a9 2000 	strh.w	r2, [r9]
 802a168:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802a16a:	441c      	add	r4, r3
 802a16c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802a16e:	f109 0902 	add.w	r9, r9, #2
 802a172:	441e      	add	r6, r3
 802a174:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a178:	e647      	b.n	8029e0a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 802a17a:	2800      	cmp	r0, #0
 802a17c:	f43f aedf 	beq.w	8029f3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802a180:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802a184:	9109      	str	r1, [sp, #36]	; 0x24
 802a186:	0e09      	lsrs	r1, r1, #24
 802a188:	9112      	str	r1, [sp, #72]	; 0x48
 802a18a:	e6d8      	b.n	8029f3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802a18c:	b01d      	add	sp, #116	; 0x74
 802a18e:	ecbd 8b08 	vpop	{d8-d11}
 802a192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802a198 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802a198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a19c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 802a1a0:	fb04 5603 	mla	r6, r4, r3, r5
 802a1a4:	2c00      	cmp	r4, #0
 802a1a6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802a1aa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802a1ae:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802a1b2:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802a1b6:	db37      	blt.n	802a228 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 802a1b8:	45a6      	cmp	lr, r4
 802a1ba:	dd35      	ble.n	802a228 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 802a1bc:	2d00      	cmp	r5, #0
 802a1be:	db31      	blt.n	802a224 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a1c0:	42ab      	cmp	r3, r5
 802a1c2:	dd2f      	ble.n	802a224 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a1c4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802a1c8:	1c6e      	adds	r6, r5, #1
 802a1ca:	d430      	bmi.n	802a22e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 802a1cc:	42b3      	cmp	r3, r6
 802a1ce:	dd2e      	ble.n	802a22e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 802a1d0:	b378      	cbz	r0, 802a232 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 802a1d2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802a1d6:	3401      	adds	r4, #1
 802a1d8:	d42f      	bmi.n	802a23a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802a1da:	45a6      	cmp	lr, r4
 802a1dc:	dd2d      	ble.n	802a23a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802a1de:	b37f      	cbz	r7, 802a240 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 802a1e0:	2d00      	cmp	r5, #0
 802a1e2:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 802a1e6:	db26      	blt.n	802a236 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 802a1e8:	42ab      	cmp	r3, r5
 802a1ea:	dd24      	ble.n	802a236 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 802a1ec:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802a1f0:	3501      	adds	r5, #1
 802a1f2:	d428      	bmi.n	802a246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802a1f4:	42ab      	cmp	r3, r5
 802a1f6:	dd26      	ble.n	802a246 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802a1f8:	b338      	cbz	r0, 802a24a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 802a1fa:	f8de 3004 	ldr.w	r3, [lr, #4]
 802a1fe:	280f      	cmp	r0, #15
 802a200:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802a204:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802a208:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802a20c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802a210:	d801      	bhi.n	802a216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 802a212:	2f0f      	cmp	r7, #15
 802a214:	d91b      	bls.n	802a24e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 802a216:	4b87      	ldr	r3, [pc, #540]	; (802a434 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 802a218:	4a87      	ldr	r2, [pc, #540]	; (802a438 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 802a21a:	4888      	ldr	r0, [pc, #544]	; (802a43c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 802a21c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802a220:	f003 fff8 	bl	802e214 <__assert_func>
 802a224:	2200      	movs	r2, #0
 802a226:	e7cf      	b.n	802a1c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 802a228:	2600      	movs	r6, #0
 802a22a:	4632      	mov	r2, r6
 802a22c:	e7d3      	b.n	802a1d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802a22e:	2600      	movs	r6, #0
 802a230:	e7d1      	b.n	802a1d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802a232:	4606      	mov	r6, r0
 802a234:	e7cf      	b.n	802a1d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802a236:	2400      	movs	r4, #0
 802a238:	e7da      	b.n	802a1f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 802a23a:	2300      	movs	r3, #0
 802a23c:	461c      	mov	r4, r3
 802a23e:	e7de      	b.n	802a1fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802a240:	463b      	mov	r3, r7
 802a242:	463c      	mov	r4, r7
 802a244:	e7db      	b.n	802a1fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802a246:	2300      	movs	r3, #0
 802a248:	e7d9      	b.n	802a1fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802a24a:	4603      	mov	r3, r0
 802a24c:	e7d7      	b.n	802a1fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802a24e:	b280      	uxth	r0, r0
 802a250:	b2bf      	uxth	r7, r7
 802a252:	fb07 fe00 	mul.w	lr, r7, r0
 802a256:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802a25a:	0100      	lsls	r0, r0, #4
 802a25c:	eba0 0c0e 	sub.w	ip, r0, lr
 802a260:	b2bf      	uxth	r7, r7
 802a262:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802a266:	fa1f fc8c 	uxth.w	ip, ip
 802a26a:	1bed      	subs	r5, r5, r7
 802a26c:	b2ad      	uxth	r5, r5
 802a26e:	fb0c f00a 	mul.w	r0, ip, sl
 802a272:	fb0b 0005 	mla	r0, fp, r5, r0
 802a276:	fb07 0009 	mla	r0, r7, r9, r0
 802a27a:	fb0e 0008 	mla	r0, lr, r8, r0
 802a27e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802a282:	9001      	str	r0, [sp, #4]
 802a284:	2800      	cmp	r0, #0
 802a286:	f000 80d1 	beq.w	802a42c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 802a28a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802a28e:	d018      	beq.n	802a2c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 802a290:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802a294:	fb0b f000 	mul.w	r0, fp, r0
 802a298:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a29c:	fb0b fb02 	mul.w	fp, fp, r2
 802a2a0:	0a02      	lsrs	r2, r0, #8
 802a2a2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a2a6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802a2aa:	4402      	add	r2, r0
 802a2ac:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802a2b0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802a2b4:	0a12      	lsrs	r2, r2, #8
 802a2b6:	0a00      	lsrs	r0, r0, #8
 802a2b8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a2bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802a2c0:	4302      	orrs	r2, r0
 802a2c2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802a2c6:	d01a      	beq.n	802a2fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 802a2c8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802a2cc:	fb0a f000 	mul.w	r0, sl, r0
 802a2d0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802a2d4:	fb0a fa06 	mul.w	sl, sl, r6
 802a2d8:	0a06      	lsrs	r6, r0, #8
 802a2da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802a2de:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802a2e2:	4406      	add	r6, r0
 802a2e4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802a2e8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802a2ec:	0a36      	lsrs	r6, r6, #8
 802a2ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a2f2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802a2f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a2fa:	ea46 060a 	orr.w	r6, r6, sl
 802a2fe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802a302:	d01b      	beq.n	802a33c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 802a304:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802a308:	fb09 fa0a 	mul.w	sl, r9, sl
 802a30c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a310:	fb09 f004 	mul.w	r0, r9, r4
 802a314:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802a318:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802a31c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a320:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802a324:	4454      	add	r4, sl
 802a326:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802a32a:	0a24      	lsrs	r4, r4, #8
 802a32c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a330:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802a334:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a338:	ea44 0409 	orr.w	r4, r4, r9
 802a33c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802a340:	d01b      	beq.n	802a37a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 802a342:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802a346:	fb08 f909 	mul.w	r9, r8, r9
 802a34a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a34e:	fb08 f003 	mul.w	r0, r8, r3
 802a352:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802a356:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a35a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802a35e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802a362:	444b      	add	r3, r9
 802a364:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802a368:	0a1b      	lsrs	r3, r3, #8
 802a36a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a36e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a372:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802a376:	ea43 0308 	orr.w	r3, r3, r8
 802a37a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802a37e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802a382:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802a386:	fb0c f808 	mul.w	r8, ip, r8
 802a38a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a38e:	fb0c f606 	mul.w	r6, ip, r6
 802a392:	fb05 8909 	mla	r9, r5, r9, r8
 802a396:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802a39a:	fb05 6502 	mla	r5, r5, r2, r6
 802a39e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a3a2:	fb07 9908 	mla	r9, r7, r8, r9
 802a3a6:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802a3aa:	fb07 5704 	mla	r7, r7, r4, r5
 802a3ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a3b2:	8808      	ldrh	r0, [r1, #0]
 802a3b4:	fb0e 9808 	mla	r8, lr, r8, r9
 802a3b8:	fb0e 7e03 	mla	lr, lr, r3, r7
 802a3bc:	9b01      	ldr	r3, [sp, #4]
 802a3be:	43da      	mvns	r2, r3
 802a3c0:	1203      	asrs	r3, r0, #8
 802a3c2:	b2d2      	uxtb	r2, r2
 802a3c4:	10c4      	asrs	r4, r0, #3
 802a3c6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a3ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a3ce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802a3d2:	00c0      	lsls	r0, r0, #3
 802a3d4:	4353      	muls	r3, r2
 802a3d6:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802a3da:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802a3de:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802a3e2:	b2c0      	uxtb	r0, r0
 802a3e4:	ea48 0e0e 	orr.w	lr, r8, lr
 802a3e8:	4354      	muls	r4, r2
 802a3ea:	4350      	muls	r0, r2
 802a3ec:	1c5a      	adds	r2, r3, #1
 802a3ee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a3f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802a3f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a3fa:	1c62      	adds	r2, r4, #1
 802a3fc:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802a400:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802a404:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802a408:	021b      	lsls	r3, r3, #8
 802a40a:	00d2      	lsls	r2, r2, #3
 802a40c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a410:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a414:	4313      	orrs	r3, r2
 802a416:	1c42      	adds	r2, r0, #1
 802a418:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a41c:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 802a420:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 802a424:	ea4e 0e03 	orr.w	lr, lr, r3
 802a428:	f8a1 e000 	strh.w	lr, [r1]
 802a42c:	b003      	add	sp, #12
 802a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a432:	bf00      	nop
 802a434:	08033161 	.word	0x08033161
 802a438:	0803372e 	.word	0x0803372e
 802a43c:	080331e5 	.word	0x080331e5

0802a440 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a444:	ed2d 8b08 	vpush	{d8-d11}
 802a448:	b09b      	sub	sp, #108	; 0x6c
 802a44a:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 802a44e:	9218      	str	r2, [sp, #96]	; 0x60
 802a450:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802a452:	9116      	str	r1, [sp, #88]	; 0x58
 802a454:	9307      	str	r3, [sp, #28]
 802a456:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802a45a:	9019      	str	r0, [sp, #100]	; 0x64
 802a45c:	6850      	ldr	r0, [r2, #4]
 802a45e:	6812      	ldr	r2, [r2, #0]
 802a460:	fb00 1303 	mla	r3, r0, r3, r1
 802a464:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a468:	930a      	str	r3, [sp, #40]	; 0x28
 802a46a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a46c:	681b      	ldr	r3, [r3, #0]
 802a46e:	930f      	str	r3, [sp, #60]	; 0x3c
 802a470:	eeb0 aa40 	vmov.f32	s20, s0
 802a474:	eef0 9a60 	vmov.f32	s19, s1
 802a478:	eeb0 9a41 	vmov.f32	s18, s2
 802a47c:	eeb0 8a62 	vmov.f32	s16, s5
 802a480:	eef0 8a43 	vmov.f32	s17, s6
 802a484:	eef0 ba44 	vmov.f32	s23, s8
 802a488:	eeb0 ba64 	vmov.f32	s22, s9
 802a48c:	eef0 aa45 	vmov.f32	s21, s10
 802a490:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a492:	2b00      	cmp	r3, #0
 802a494:	dc03      	bgt.n	802a49e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802a496:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a498:	2b00      	cmp	r3, #0
 802a49a:	f340 8386 	ble.w	802abaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802a49e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a4a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a4a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a4a8:	1e48      	subs	r0, r1, #1
 802a4aa:	1e57      	subs	r7, r2, #1
 802a4ac:	9b07      	ldr	r3, [sp, #28]
 802a4ae:	2b00      	cmp	r3, #0
 802a4b0:	f340 8166 	ble.w	802a780 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802a4b4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a4b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a4bc:	d406      	bmi.n	802a4cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a4be:	4584      	cmp	ip, r0
 802a4c0:	da04      	bge.n	802a4cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a4c2:	2b00      	cmp	r3, #0
 802a4c4:	db02      	blt.n	802a4cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a4c6:	42bb      	cmp	r3, r7
 802a4c8:	f2c0 815b 	blt.w	802a782 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a4cc:	f11c 0c01 	adds.w	ip, ip, #1
 802a4d0:	f100 814b 	bmi.w	802a76a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a4d4:	4561      	cmp	r1, ip
 802a4d6:	f2c0 8148 	blt.w	802a76a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a4da:	3301      	adds	r3, #1
 802a4dc:	f100 8145 	bmi.w	802a76a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a4e0:	429a      	cmp	r2, r3
 802a4e2:	f2c0 8142 	blt.w	802a76a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a4e6:	9b07      	ldr	r3, [sp, #28]
 802a4e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802a4ea:	9317      	str	r3, [sp, #92]	; 0x5c
 802a4ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a4ee:	2b00      	cmp	r3, #0
 802a4f0:	f340 8165 	ble.w	802a7be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802a4f4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802a4f6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a4f8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a4fc:	689b      	ldr	r3, [r3, #8]
 802a4fe:	1422      	asrs	r2, r4, #16
 802a500:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a504:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a508:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a50c:	f100 81d5 	bmi.w	802a8ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a510:	f103 38ff 	add.w	r8, r3, #4294967295
 802a514:	4542      	cmp	r2, r8
 802a516:	f280 81d0 	bge.w	802a8ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a51a:	f1bc 0f00 	cmp.w	ip, #0
 802a51e:	f2c0 81cc 	blt.w	802a8ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a522:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a526:	45c4      	cmp	ip, r8
 802a528:	f280 81c7 	bge.w	802a8ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a52c:	b21b      	sxth	r3, r3
 802a52e:	fb0c 2203 	mla	r2, ip, r3, r2
 802a532:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a534:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802a538:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802a53c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802a540:	2900      	cmp	r1, #0
 802a542:	f000 8182 	beq.w	802a84a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802a546:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802a54a:	950b      	str	r5, [sp, #44]	; 0x2c
 802a54c:	0e2d      	lsrs	r5, r5, #24
 802a54e:	9512      	str	r5, [sp, #72]	; 0x48
 802a550:	b180      	cbz	r0, 802a574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a552:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802a556:	3b01      	subs	r3, #1
 802a558:	009b      	lsls	r3, r3, #2
 802a55a:	3304      	adds	r3, #4
 802a55c:	eb08 0c03 	add.w	ip, r8, r3
 802a560:	f858 3003 	ldr.w	r3, [r8, r3]
 802a564:	9308      	str	r3, [sp, #32]
 802a566:	0e1b      	lsrs	r3, r3, #24
 802a568:	9310      	str	r3, [sp, #64]	; 0x40
 802a56a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802a56e:	930c      	str	r3, [sp, #48]	; 0x30
 802a570:	0e1b      	lsrs	r3, r3, #24
 802a572:	9313      	str	r3, [sp, #76]	; 0x4c
 802a574:	b289      	uxth	r1, r1
 802a576:	b280      	uxth	r0, r0
 802a578:	fb01 f900 	mul.w	r9, r1, r0
 802a57c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a580:	0109      	lsls	r1, r1, #4
 802a582:	eba1 0809 	sub.w	r8, r1, r9
 802a586:	b280      	uxth	r0, r0
 802a588:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802a58c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a58e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a590:	fa1f f888 	uxth.w	r8, r8
 802a594:	1a09      	subs	r1, r1, r0
 802a596:	b289      	uxth	r1, r1
 802a598:	fb08 f303 	mul.w	r3, r8, r3
 802a59c:	fb01 330e 	mla	r3, r1, lr, r3
 802a5a0:	fb00 3305 	mla	r3, r0, r5, r3
 802a5a4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a5a6:	fb09 3305 	mla	r3, r9, r5, r3
 802a5aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a5ae:	2b00      	cmp	r3, #0
 802a5b0:	f000 80d2 	beq.w	802a758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a5b4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802a5b8:	d01b      	beq.n	802a5f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802a5ba:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802a5be:	fb0e fa0a 	mul.w	sl, lr, sl
 802a5c2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a5c6:	fb0e fe02 	mul.w	lr, lr, r2
 802a5ca:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802a5ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a5d2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a5d6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802a5da:	4452      	add	r2, sl
 802a5dc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a5e0:	0a12      	lsrs	r2, r2, #8
 802a5e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a5e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a5ea:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a5ee:	ea42 020c 	orr.w	r2, r2, ip
 802a5f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a5f4:	2dff      	cmp	r5, #255	; 0xff
 802a5f6:	d021      	beq.n	802a63c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a5f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a5fa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a5fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a600:	fb05 fb0b 	mul.w	fp, r5, fp
 802a604:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a606:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a60a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a60c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a610:	fb05 fa0a 	mul.w	sl, r5, sl
 802a614:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a618:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a61c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a620:	44de      	add	lr, fp
 802a622:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a626:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a62a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a62e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a632:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a636:	ea4e 050a 	orr.w	r5, lr, sl
 802a63a:	950b      	str	r5, [sp, #44]	; 0x2c
 802a63c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a63e:	2dff      	cmp	r5, #255	; 0xff
 802a640:	d021      	beq.n	802a686 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802a642:	9d08      	ldr	r5, [sp, #32]
 802a644:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a648:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a64a:	fb05 fb0b 	mul.w	fp, r5, fp
 802a64e:	9d08      	ldr	r5, [sp, #32]
 802a650:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a654:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a656:	fb05 fa0e 	mul.w	sl, r5, lr
 802a65a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a65e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a662:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a666:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a66a:	44de      	add	lr, fp
 802a66c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a670:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a674:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a678:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a67c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a680:	ea4e 050a 	orr.w	r5, lr, sl
 802a684:	9508      	str	r5, [sp, #32]
 802a686:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a688:	2dff      	cmp	r5, #255	; 0xff
 802a68a:	d021      	beq.n	802a6d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802a68c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a68e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a692:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a694:	fb05 fb0b 	mul.w	fp, r5, fp
 802a698:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a69a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a69e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a6a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a6a4:	fb05 fa0a 	mul.w	sl, r5, sl
 802a6a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a6ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a6b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a6b4:	44de      	add	lr, fp
 802a6b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a6ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a6be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a6c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a6c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a6ca:	ea4e 050a 	orr.w	r5, lr, sl
 802a6ce:	950c      	str	r5, [sp, #48]	; 0x30
 802a6d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a6d2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a6d6:	9d08      	ldr	r5, [sp, #32]
 802a6d8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802a6dc:	fb08 fc0c 	mul.w	ip, r8, ip
 802a6e0:	fb01 cc0e 	mla	ip, r1, lr, ip
 802a6e4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a6e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a6ea:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a6ee:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a6f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a6f4:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a6f8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a6fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a700:	fb08 f80e 	mul.w	r8, r8, lr
 802a704:	fb01 8202 	mla	r2, r1, r2, r8
 802a708:	9908      	ldr	r1, [sp, #32]
 802a70a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a70e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a710:	fb00 220a 	mla	r2, r0, sl, r2
 802a714:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802a718:	fb09 2900 	mla	r9, r9, r0, r2
 802a71c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a720:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a724:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a728:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a72c:	ea4c 0c09 	orr.w	ip, ip, r9
 802a730:	2bff      	cmp	r3, #255	; 0xff
 802a732:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802a736:	f040 8091 	bne.w	802a85c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a73a:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802a73e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802a742:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a746:	f022 0207 	bic.w	r2, r2, #7
 802a74a:	431a      	orrs	r2, r3
 802a74c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a750:	ea4c 0c02 	orr.w	ip, ip, r2
 802a754:	f8a7 c000 	strh.w	ip, [r7]
 802a758:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a75a:	441c      	add	r4, r3
 802a75c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a75e:	441e      	add	r6, r3
 802a760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a762:	3b01      	subs	r3, #1
 802a764:	3702      	adds	r7, #2
 802a766:	9317      	str	r3, [sp, #92]	; 0x5c
 802a768:	e6c0      	b.n	802a4ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802a76a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a76c:	441c      	add	r4, r3
 802a76e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a770:	441e      	add	r6, r3
 802a772:	9b07      	ldr	r3, [sp, #28]
 802a774:	3b01      	subs	r3, #1
 802a776:	9307      	str	r3, [sp, #28]
 802a778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a77a:	3302      	adds	r3, #2
 802a77c:	930a      	str	r3, [sp, #40]	; 0x28
 802a77e:	e695      	b.n	802a4ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a780:	d024      	beq.n	802a7cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802a782:	9b07      	ldr	r3, [sp, #28]
 802a784:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802a786:	3b01      	subs	r3, #1
 802a788:	fb00 4003 	mla	r0, r0, r3, r4
 802a78c:	1400      	asrs	r0, r0, #16
 802a78e:	f53f aeaa 	bmi.w	802a4e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a792:	3901      	subs	r1, #1
 802a794:	4288      	cmp	r0, r1
 802a796:	f6bf aea6 	bge.w	802a4e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a79a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802a79c:	fb01 6303 	mla	r3, r1, r3, r6
 802a7a0:	141b      	asrs	r3, r3, #16
 802a7a2:	f53f aea0 	bmi.w	802a4e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a7a6:	3a01      	subs	r2, #1
 802a7a8:	4293      	cmp	r3, r2
 802a7aa:	f6bf ae9c 	bge.w	802a4e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a7ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a7b2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802a7b6:	f1bb 0f00 	cmp.w	fp, #0
 802a7ba:	f300 809a 	bgt.w	802a8f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 802a7be:	9b07      	ldr	r3, [sp, #28]
 802a7c0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a7c6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a7ca:	930a      	str	r3, [sp, #40]	; 0x28
 802a7cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a7ce:	2b00      	cmp	r3, #0
 802a7d0:	f340 81eb 	ble.w	802abaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802a7d4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a7d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a7dc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a7e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a7e2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a7e6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a7ea:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a7ee:	eef0 6a48 	vmov.f32	s13, s16
 802a7f2:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a7f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a7fa:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a7fe:	ee16 4a90 	vmov	r4, s13
 802a802:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a806:	eef0 6a68 	vmov.f32	s13, s17
 802a80a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a80e:	ee18 2a10 	vmov	r2, s16
 802a812:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a816:	fb92 f3f3 	sdiv	r3, r2, r3
 802a81a:	ee18 2a90 	vmov	r2, s17
 802a81e:	932f      	str	r3, [sp, #188]	; 0xbc
 802a820:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a822:	fb92 f3f3 	sdiv	r3, r2, r3
 802a826:	9330      	str	r3, [sp, #192]	; 0xc0
 802a828:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a82a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802a82c:	3b01      	subs	r3, #1
 802a82e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a832:	9316      	str	r3, [sp, #88]	; 0x58
 802a834:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a836:	bf08      	it	eq
 802a838:	4613      	moveq	r3, r2
 802a83a:	ee16 6a90 	vmov	r6, s13
 802a83e:	9307      	str	r3, [sp, #28]
 802a840:	eef0 8a67 	vmov.f32	s17, s15
 802a844:	eeb0 8a47 	vmov.f32	s16, s14
 802a848:	e622      	b.n	802a490 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802a84a:	2800      	cmp	r0, #0
 802a84c:	f43f ae92 	beq.w	802a574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a850:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802a854:	9308      	str	r3, [sp, #32]
 802a856:	0e1b      	lsrs	r3, r3, #24
 802a858:	9310      	str	r3, [sp, #64]	; 0x40
 802a85a:	e68b      	b.n	802a574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a85c:	8839      	ldrh	r1, [r7, #0]
 802a85e:	4dd5      	ldr	r5, [pc, #852]	; (802abb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>)
 802a860:	43db      	mvns	r3, r3
 802a862:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802a866:	fa5f f883 	uxtb.w	r8, r3
 802a86a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802a86e:	fb0e fe08 	mul.w	lr, lr, r8
 802a872:	10c8      	asrs	r0, r1, #3
 802a874:	00cb      	lsls	r3, r1, #3
 802a876:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a87a:	f10e 0101 	add.w	r1, lr, #1
 802a87e:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802a882:	fb00 f008 	mul.w	r0, r0, r8
 802a886:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802a88a:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802a88e:	f100 0e01 	add.w	lr, r0, #1
 802a892:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802a896:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a89a:	b2db      	uxtb	r3, r3
 802a89c:	b2c9      	uxtb	r1, r1
 802a89e:	00d2      	lsls	r2, r2, #3
 802a8a0:	fb03 f308 	mul.w	r3, r3, r8
 802a8a4:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802a8a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a8ac:	430a      	orrs	r2, r1
 802a8ae:	1c59      	adds	r1, r3, #1
 802a8b0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a8b4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802a8b8:	e748      	b.n	802a74c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802a8ba:	f112 0801 	adds.w	r8, r2, #1
 802a8be:	f53f af4b 	bmi.w	802a758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a8c2:	4543      	cmp	r3, r8
 802a8c4:	f6ff af48 	blt.w	802a758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a8c8:	f11c 0801 	adds.w	r8, ip, #1
 802a8cc:	f53f af44 	bmi.w	802a758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a8d0:	45c6      	cmp	lr, r8
 802a8d2:	f6ff af41 	blt.w	802a758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a8d6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802a8da:	fa0f f28e 	sxth.w	r2, lr
 802a8de:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802a8e2:	9200      	str	r2, [sp, #0]
 802a8e4:	b21b      	sxth	r3, r3
 802a8e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a8e8:	9819      	ldr	r0, [sp, #100]	; 0x64
 802a8ea:	4639      	mov	r1, r7
 802a8ec:	f7ff fc54 	bl	802a198 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802a8f0:	e732      	b.n	802a758 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a8f2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a8f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a8f6:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802a8fa:	1421      	asrs	r1, r4, #16
 802a8fc:	1433      	asrs	r3, r6, #16
 802a8fe:	fb07 1303 	mla	r3, r7, r3, r1
 802a902:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a904:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802a908:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a90c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a910:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a914:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a918:	2a00      	cmp	r2, #0
 802a91a:	f000 8107 	beq.w	802ab2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ec>
 802a91e:	684d      	ldr	r5, [r1, #4]
 802a920:	950d      	str	r5, [sp, #52]	; 0x34
 802a922:	0e2d      	lsrs	r5, r5, #24
 802a924:	9514      	str	r5, [sp, #80]	; 0x50
 802a926:	b178      	cbz	r0, 802a948 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a928:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802a92c:	3f01      	subs	r7, #1
 802a92e:	00bf      	lsls	r7, r7, #2
 802a930:	3704      	adds	r7, #4
 802a932:	eb01 0e07 	add.w	lr, r1, r7
 802a936:	59c9      	ldr	r1, [r1, r7]
 802a938:	9109      	str	r1, [sp, #36]	; 0x24
 802a93a:	0e09      	lsrs	r1, r1, #24
 802a93c:	9111      	str	r1, [sp, #68]	; 0x44
 802a93e:	f8de 1004 	ldr.w	r1, [lr, #4]
 802a942:	910e      	str	r1, [sp, #56]	; 0x38
 802a944:	0e09      	lsrs	r1, r1, #24
 802a946:	9115      	str	r1, [sp, #84]	; 0x54
 802a948:	b292      	uxth	r2, r2
 802a94a:	b280      	uxth	r0, r0
 802a94c:	fb02 f900 	mul.w	r9, r2, r0
 802a950:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a954:	0112      	lsls	r2, r2, #4
 802a956:	eba2 0e09 	sub.w	lr, r2, r9
 802a95a:	b280      	uxth	r0, r0
 802a95c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802a960:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a962:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a964:	fa1f fe8e 	uxth.w	lr, lr
 802a968:	1a09      	subs	r1, r1, r0
 802a96a:	b289      	uxth	r1, r1
 802a96c:	fb0e f202 	mul.w	r2, lr, r2
 802a970:	fb01 220c 	mla	r2, r1, ip, r2
 802a974:	fb00 2205 	mla	r2, r0, r5, r2
 802a978:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a97a:	fb09 2205 	mla	r2, r9, r5, r2
 802a97e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802a982:	2a00      	cmp	r2, #0
 802a984:	f000 80c9 	beq.w	802ab1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802a988:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802a98c:	d019      	beq.n	802a9c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 802a98e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802a992:	fb0c fa0a 	mul.w	sl, ip, sl
 802a996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a99a:	fb0c fc03 	mul.w	ip, ip, r3
 802a99e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a9a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a9a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a9aa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802a9ae:	4453      	add	r3, sl
 802a9b0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a9b4:	0a1b      	lsrs	r3, r3, #8
 802a9b6:	0a3f      	lsrs	r7, r7, #8
 802a9b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a9bc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802a9c0:	433b      	orrs	r3, r7
 802a9c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a9c4:	2dff      	cmp	r5, #255	; 0xff
 802a9c6:	d020      	beq.n	802aa0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802a9c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a9ca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a9ce:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a9d0:	436f      	muls	r7, r5
 802a9d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a9d4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a9d8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a9da:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a9de:	fb05 fa0a 	mul.w	sl, r5, sl
 802a9e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a9e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a9ea:	44bc      	add	ip, r7
 802a9ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a9f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a9f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a9f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a9fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802aa00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802aa04:	ea4c 050a 	orr.w	r5, ip, sl
 802aa08:	950d      	str	r5, [sp, #52]	; 0x34
 802aa0a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802aa0c:	2dff      	cmp	r5, #255	; 0xff
 802aa0e:	d020      	beq.n	802aa52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 802aa10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802aa12:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802aa16:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802aa18:	436f      	muls	r7, r5
 802aa1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802aa1c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802aa20:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802aa22:	fb05 fa0c 	mul.w	sl, r5, ip
 802aa26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802aa2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802aa2e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802aa32:	44bc      	add	ip, r7
 802aa34:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802aa38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802aa3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802aa40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802aa44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802aa48:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802aa4c:	ea4c 050a 	orr.w	r5, ip, sl
 802aa50:	9509      	str	r5, [sp, #36]	; 0x24
 802aa52:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802aa54:	2dff      	cmp	r5, #255	; 0xff
 802aa56:	d020      	beq.n	802aa9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 802aa58:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802aa5a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802aa5e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802aa60:	436f      	muls	r7, r5
 802aa62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802aa64:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802aa68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802aa6a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802aa6e:	fb05 fa0a 	mul.w	sl, r5, sl
 802aa72:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802aa76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802aa7a:	44bc      	add	ip, r7
 802aa7c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802aa80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802aa84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802aa88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802aa8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802aa90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802aa94:	ea4c 050a 	orr.w	r5, ip, sl
 802aa98:	950e      	str	r5, [sp, #56]	; 0x38
 802aa9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802aa9c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802aaa0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802aaa2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802aaa6:	fb0e f707 	mul.w	r7, lr, r7
 802aaaa:	fb01 770c 	mla	r7, r1, ip, r7
 802aaae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802aab2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802aab4:	fb00 770c 	mla	r7, r0, ip, r7
 802aab8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802aabc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802aabe:	fb09 770c 	mla	r7, r9, ip, r7
 802aac2:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802aac6:	fb0e fe0c 	mul.w	lr, lr, ip
 802aaca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802aace:	fb01 e303 	mla	r3, r1, r3, lr
 802aad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 802aad4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802aad8:	990e      	ldr	r1, [sp, #56]	; 0x38
 802aada:	fb00 330a 	mla	r3, r0, sl, r3
 802aade:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802aae2:	fb09 3c0c 	mla	ip, r9, ip, r3
 802aae6:	0a3f      	lsrs	r7, r7, #8
 802aae8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802aaec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802aaf0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802aaf4:	ea47 070c 	orr.w	r7, r7, ip
 802aaf8:	2aff      	cmp	r2, #255	; 0xff
 802aafa:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802aafe:	d11e      	bne.n	802ab3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 802ab00:	097a      	lsrs	r2, r7, #5
 802ab02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802ab06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ab0a:	f023 0307 	bic.w	r3, r3, #7
 802ab0e:	4313      	orrs	r3, r2
 802ab10:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802ab14:	431f      	orrs	r7, r3
 802ab16:	f8a8 7000 	strh.w	r7, [r8]
 802ab1a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802ab1c:	441c      	add	r4, r3
 802ab1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802ab20:	f108 0802 	add.w	r8, r8, #2
 802ab24:	441e      	add	r6, r3
 802ab26:	f10b 3bff 	add.w	fp, fp, #4294967295
 802ab2a:	e644      	b.n	802a7b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802ab2c:	2800      	cmp	r0, #0
 802ab2e:	f43f af0b 	beq.w	802a948 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802ab32:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802ab36:	9109      	str	r1, [sp, #36]	; 0x24
 802ab38:	0e09      	lsrs	r1, r1, #24
 802ab3a:	9111      	str	r1, [sp, #68]	; 0x44
 802ab3c:	e704      	b.n	802a948 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802ab3e:	f8b8 1000 	ldrh.w	r1, [r8]
 802ab42:	43d2      	mvns	r2, r2
 802ab44:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802ab48:	fa5f fe82 	uxtb.w	lr, r2
 802ab4c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802ab50:	fb0c fc0e 	mul.w	ip, ip, lr
 802ab54:	10c8      	asrs	r0, r1, #3
 802ab56:	00ca      	lsls	r2, r1, #3
 802ab58:	f10c 0101 	add.w	r1, ip, #1
 802ab5c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802ab60:	0c39      	lsrs	r1, r7, #16
 802ab62:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802ab66:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802ab6a:	4912      	ldr	r1, [pc, #72]	; (802abb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>)
 802ab6c:	fb00 f00e 	mul.w	r0, r0, lr
 802ab70:	fa5f fc8c 	uxtb.w	ip, ip
 802ab74:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802ab78:	b2d2      	uxtb	r2, r2
 802ab7a:	1c41      	adds	r1, r0, #1
 802ab7c:	fb02 f20e 	mul.w	r2, r2, lr
 802ab80:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802ab84:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802ab88:	1c51      	adds	r1, r2, #1
 802ab8a:	00c0      	lsls	r0, r0, #3
 802ab8c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802ab90:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802ab94:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802ab98:	ea4c 0c00 	orr.w	ip, ip, r0
 802ab9c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802aba0:	ea47 0c0c 	orr.w	ip, r7, ip
 802aba4:	f8a8 c000 	strh.w	ip, [r8]
 802aba8:	e7b7      	b.n	802ab1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802abaa:	b01b      	add	sp, #108	; 0x6c
 802abac:	ecbd 8b08 	vpop	{d8-d11}
 802abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802abb4:	fffff800 	.word	0xfffff800

0802abb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802abb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802abbc:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802abc0:	2c00      	cmp	r4, #0
 802abc2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802abc6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802abca:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802abce:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802abd2:	fb04 ce03 	mla	lr, r4, r3, ip
 802abd6:	db60      	blt.n	802ac9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802abd8:	45a1      	cmp	r9, r4
 802abda:	dd5e      	ble.n	802ac9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802abdc:	f1bc 0f00 	cmp.w	ip, #0
 802abe0:	db59      	blt.n	802ac96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802abe2:	45e0      	cmp	r8, ip
 802abe4:	dd57      	ble.n	802ac96 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802abe6:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802abea:	f01e 0f01 	tst.w	lr, #1
 802abee:	5c16      	ldrb	r6, [r2, r0]
 802abf0:	bf0c      	ite	eq
 802abf2:	f006 060f 	andeq.w	r6, r6, #15
 802abf6:	1136      	asrne	r6, r6, #4
 802abf8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802abfc:	b2f6      	uxtb	r6, r6
 802abfe:	f11c 0001 	adds.w	r0, ip, #1
 802ac02:	d44d      	bmi.n	802aca0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802ac04:	4580      	cmp	r8, r0
 802ac06:	dd4b      	ble.n	802aca0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802ac08:	2d00      	cmp	r5, #0
 802ac0a:	d04b      	beq.n	802aca4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 802ac0c:	f10e 0a01 	add.w	sl, lr, #1
 802ac10:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802ac14:	f01a 0f01 	tst.w	sl, #1
 802ac18:	5c10      	ldrb	r0, [r2, r0]
 802ac1a:	bf0c      	ite	eq
 802ac1c:	f000 000f 	andeq.w	r0, r0, #15
 802ac20:	1100      	asrne	r0, r0, #4
 802ac22:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802ac26:	b2c0      	uxtb	r0, r0
 802ac28:	3401      	adds	r4, #1
 802ac2a:	d43f      	bmi.n	802acac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802ac2c:	45a1      	cmp	r9, r4
 802ac2e:	dd3d      	ble.n	802acac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802ac30:	2f00      	cmp	r7, #0
 802ac32:	f000 80a8 	beq.w	802ad86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 802ac36:	f1bc 0f00 	cmp.w	ip, #0
 802ac3a:	db35      	blt.n	802aca8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802ac3c:	45e0      	cmp	r8, ip
 802ac3e:	dd33      	ble.n	802aca8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802ac40:	eb03 090e 	add.w	r9, r3, lr
 802ac44:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802ac48:	f019 0f01 	tst.w	r9, #1
 802ac4c:	5d14      	ldrb	r4, [r2, r4]
 802ac4e:	bf0c      	ite	eq
 802ac50:	f004 040f 	andeq.w	r4, r4, #15
 802ac54:	1124      	asrne	r4, r4, #4
 802ac56:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802ac5a:	b2e4      	uxtb	r4, r4
 802ac5c:	f11c 0c01 	adds.w	ip, ip, #1
 802ac60:	d427      	bmi.n	802acb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802ac62:	45e0      	cmp	r8, ip
 802ac64:	dd25      	ble.n	802acb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802ac66:	b335      	cbz	r5, 802acb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802ac68:	3301      	adds	r3, #1
 802ac6a:	449e      	add	lr, r3
 802ac6c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802ac70:	f01e 0f01 	tst.w	lr, #1
 802ac74:	5cd2      	ldrb	r2, [r2, r3]
 802ac76:	bf0c      	ite	eq
 802ac78:	f002 020f 	andeq.w	r2, r2, #15
 802ac7c:	1112      	asrne	r2, r2, #4
 802ac7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802ac82:	b2d3      	uxtb	r3, r2
 802ac84:	2d0f      	cmp	r5, #15
 802ac86:	d917      	bls.n	802acb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802ac88:	4b42      	ldr	r3, [pc, #264]	; (802ad94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 802ac8a:	4a43      	ldr	r2, [pc, #268]	; (802ad98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 802ac8c:	4843      	ldr	r0, [pc, #268]	; (802ad9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 802ac8e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802ac92:	f003 fabf 	bl	802e214 <__assert_func>
 802ac96:	2600      	movs	r6, #0
 802ac98:	e7b1      	b.n	802abfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802ac9a:	2000      	movs	r0, #0
 802ac9c:	4606      	mov	r6, r0
 802ac9e:	e7c3      	b.n	802ac28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802aca0:	2000      	movs	r0, #0
 802aca2:	e7c1      	b.n	802ac28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802aca4:	4628      	mov	r0, r5
 802aca6:	e7bf      	b.n	802ac28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802aca8:	2400      	movs	r4, #0
 802acaa:	e7d7      	b.n	802ac5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802acac:	2300      	movs	r3, #0
 802acae:	461c      	mov	r4, r3
 802acb0:	e7e8      	b.n	802ac84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802acb2:	2300      	movs	r3, #0
 802acb4:	e7e6      	b.n	802ac84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802acb6:	462b      	mov	r3, r5
 802acb8:	2f0f      	cmp	r7, #15
 802acba:	d8e5      	bhi.n	802ac88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802acbc:	b2ad      	uxth	r5, r5
 802acbe:	b2bf      	uxth	r7, r7
 802acc0:	fb05 fc07 	mul.w	ip, r5, r7
 802acc4:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802acc8:	012d      	lsls	r5, r5, #4
 802acca:	b2bf      	uxth	r7, r7
 802accc:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802acd0:	eba5 050c 	sub.w	r5, r5, ip
 802acd4:	1bd2      	subs	r2, r2, r7
 802acd6:	b2ad      	uxth	r5, r5
 802acd8:	b292      	uxth	r2, r2
 802acda:	4368      	muls	r0, r5
 802acdc:	fb06 0002 	mla	r0, r6, r2, r0
 802ace0:	fb07 0404 	mla	r4, r7, r4, r0
 802ace4:	fb0c 4303 	mla	r3, ip, r3, r4
 802ace8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802acec:	b1b3      	cbz	r3, 802ad1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802acee:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802acf2:	435a      	muls	r2, r3
 802acf4:	1c53      	adds	r3, r2, #1
 802acf6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802acfa:	4a29      	ldr	r2, [pc, #164]	; (802ada0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 802acfc:	121b      	asrs	r3, r3, #8
 802acfe:	6812      	ldr	r2, [r2, #0]
 802ad00:	2bff      	cmp	r3, #255	; 0xff
 802ad02:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802ad06:	d10b      	bne.n	802ad20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 802ad08:	4b26      	ldr	r3, [pc, #152]	; (802ada4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 802ad0a:	0950      	lsrs	r0, r2, #5
 802ad0c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802ad10:	4033      	ands	r3, r6
 802ad12:	4318      	orrs	r0, r3
 802ad14:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ad18:	4302      	orrs	r2, r0
 802ad1a:	800a      	strh	r2, [r1, #0]
 802ad1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ad20:	880d      	ldrh	r5, [r1, #0]
 802ad22:	b29f      	uxth	r7, r3
 802ad24:	122c      	asrs	r4, r5, #8
 802ad26:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802ad2a:	43db      	mvns	r3, r3
 802ad2c:	b2db      	uxtb	r3, r3
 802ad2e:	fb10 f007 	smulbb	r0, r0, r7
 802ad32:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802ad36:	fb04 0403 	mla	r4, r4, r3, r0
 802ad3a:	b2f6      	uxtb	r6, r6
 802ad3c:	10e8      	asrs	r0, r5, #3
 802ad3e:	b2d2      	uxtb	r2, r2
 802ad40:	00ed      	lsls	r5, r5, #3
 802ad42:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802ad46:	fb12 f207 	smulbb	r2, r2, r7
 802ad4a:	fb16 f607 	smulbb	r6, r6, r7
 802ad4e:	b2ed      	uxtb	r5, r5
 802ad50:	b2a4      	uxth	r4, r4
 802ad52:	fb00 6603 	mla	r6, r0, r3, r6
 802ad56:	fb05 2303 	mla	r3, r5, r3, r2
 802ad5a:	b29a      	uxth	r2, r3
 802ad5c:	1c63      	adds	r3, r4, #1
 802ad5e:	b2b0      	uxth	r0, r6
 802ad60:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802ad64:	1c53      	adds	r3, r2, #1
 802ad66:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802ad6a:	1c42      	adds	r2, r0, #1
 802ad6c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802ad70:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802ad74:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802ad78:	0940      	lsrs	r0, r0, #5
 802ad7a:	4323      	orrs	r3, r4
 802ad7c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802ad80:	4303      	orrs	r3, r0
 802ad82:	800b      	strh	r3, [r1, #0]
 802ad84:	e7ca      	b.n	802ad1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802ad86:	2d0f      	cmp	r5, #15
 802ad88:	f63f af7e 	bhi.w	802ac88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802ad8c:	463b      	mov	r3, r7
 802ad8e:	463c      	mov	r4, r7
 802ad90:	e794      	b.n	802acbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 802ad92:	bf00      	nop
 802ad94:	08033161 	.word	0x08033161
 802ad98:	0803372e 	.word	0x0803372e
 802ad9c:	080331e5 	.word	0x080331e5
 802ada0:	20009828 	.word	0x20009828
 802ada4:	00fff800 	.word	0x00fff800

0802ada8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802adac:	ed2d 8b08 	vpush	{d8-d11}
 802adb0:	b097      	sub	sp, #92	; 0x5c
 802adb2:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802adb6:	9214      	str	r2, [sp, #80]	; 0x50
 802adb8:	9309      	str	r3, [sp, #36]	; 0x24
 802adba:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802adbc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802adc0:	910d      	str	r1, [sp, #52]	; 0x34
 802adc2:	930f      	str	r3, [sp, #60]	; 0x3c
 802adc4:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802adc8:	9015      	str	r0, [sp, #84]	; 0x54
 802adca:	6850      	ldr	r0, [r2, #4]
 802adcc:	6812      	ldr	r2, [r2, #0]
 802adce:	fb00 1303 	mla	r3, r0, r3, r1
 802add2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802add6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802add8:	689b      	ldr	r3, [r3, #8]
 802adda:	3301      	adds	r3, #1
 802addc:	f023 0301 	bic.w	r3, r3, #1
 802ade0:	930a      	str	r3, [sp, #40]	; 0x28
 802ade2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802ade4:	681f      	ldr	r7, [r3, #0]
 802ade6:	eeb0 aa40 	vmov.f32	s20, s0
 802adea:	eef0 9a60 	vmov.f32	s19, s1
 802adee:	eeb0 9a41 	vmov.f32	s18, s2
 802adf2:	eeb0 8a62 	vmov.f32	s16, s5
 802adf6:	eef0 8a43 	vmov.f32	s17, s6
 802adfa:	eef0 ba44 	vmov.f32	s23, s8
 802adfe:	eeb0 ba64 	vmov.f32	s22, s9
 802ae02:	eef0 aa45 	vmov.f32	s21, s10
 802ae06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ae08:	2b00      	cmp	r3, #0
 802ae0a:	dc03      	bgt.n	802ae14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802ae0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802ae0e:	2b00      	cmp	r3, #0
 802ae10:	f340 8287 	ble.w	802b322 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802ae14:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802ae16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802ae1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802ae1e:	1e48      	subs	r0, r1, #1
 802ae20:	f102 3cff 	add.w	ip, r2, #4294967295
 802ae24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ae26:	2b00      	cmp	r3, #0
 802ae28:	f340 80c4 	ble.w	802afb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802ae2c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802ae30:	ea4f 4326 	mov.w	r3, r6, asr #16
 802ae34:	d406      	bmi.n	802ae44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802ae36:	4586      	cmp	lr, r0
 802ae38:	da04      	bge.n	802ae44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802ae3a:	2b00      	cmp	r3, #0
 802ae3c:	db02      	blt.n	802ae44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802ae3e:	4563      	cmp	r3, ip
 802ae40:	f2c0 80b9 	blt.w	802afb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802ae44:	f11e 0e01 	adds.w	lr, lr, #1
 802ae48:	f100 80aa 	bmi.w	802afa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ae4c:	4571      	cmp	r1, lr
 802ae4e:	f2c0 80a7 	blt.w	802afa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ae52:	3301      	adds	r3, #1
 802ae54:	f100 80a4 	bmi.w	802afa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ae58:	429a      	cmp	r2, r3
 802ae5a:	f2c0 80a1 	blt.w	802afa0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802ae5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ae60:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802ae64:	930e      	str	r3, [sp, #56]	; 0x38
 802ae66:	46c8      	mov	r8, r9
 802ae68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ae6a:	2b00      	cmp	r3, #0
 802ae6c:	f340 80c3 	ble.w	802aff6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802ae70:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802ae72:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802ae76:	1423      	asrs	r3, r4, #16
 802ae78:	ea4f 4026 	mov.w	r0, r6, asr #16
 802ae7c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ae80:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802ae84:	f100 814d 	bmi.w	802b122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802ae88:	f10c 3bff 	add.w	fp, ip, #4294967295
 802ae8c:	455b      	cmp	r3, fp
 802ae8e:	f280 8148 	bge.w	802b122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802ae92:	2800      	cmp	r0, #0
 802ae94:	f2c0 8145 	blt.w	802b122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802ae98:	f10e 3bff 	add.w	fp, lr, #4294967295
 802ae9c:	4558      	cmp	r0, fp
 802ae9e:	f280 8140 	bge.w	802b122 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802aea2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802aea4:	fb00 3305 	mla	r3, r0, r5, r3
 802aea8:	0858      	lsrs	r0, r3, #1
 802aeaa:	07dd      	lsls	r5, r3, #31
 802aeac:	f817 c000 	ldrb.w	ip, [r7, r0]
 802aeb0:	bf54      	ite	pl
 802aeb2:	f00c 0c0f 	andpl.w	ip, ip, #15
 802aeb6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802aeba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802aebe:	fa5f fc8c 	uxtb.w	ip, ip
 802aec2:	2a00      	cmp	r2, #0
 802aec4:	f000 80db 	beq.w	802b07e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802aec8:	1c58      	adds	r0, r3, #1
 802aeca:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802aece:	07c0      	lsls	r0, r0, #31
 802aed0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802aed4:	bf54      	ite	pl
 802aed6:	f00e 0e0f 	andpl.w	lr, lr, #15
 802aeda:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802aede:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802aee2:	fa5f f08e 	uxtb.w	r0, lr
 802aee6:	9010      	str	r0, [sp, #64]	; 0x40
 802aee8:	b1c9      	cbz	r1, 802af1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802aeea:	4453      	add	r3, sl
 802aeec:	0858      	lsrs	r0, r3, #1
 802aeee:	07dd      	lsls	r5, r3, #31
 802aef0:	5c38      	ldrb	r0, [r7, r0]
 802aef2:	bf54      	ite	pl
 802aef4:	f000 000f 	andpl.w	r0, r0, #15
 802aef8:	1100      	asrmi	r0, r0, #4
 802aefa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802aefe:	3301      	adds	r3, #1
 802af00:	b2c0      	uxtb	r0, r0
 802af02:	900b      	str	r0, [sp, #44]	; 0x2c
 802af04:	0858      	lsrs	r0, r3, #1
 802af06:	07dd      	lsls	r5, r3, #31
 802af08:	f817 e000 	ldrb.w	lr, [r7, r0]
 802af0c:	bf54      	ite	pl
 802af0e:	f00e 030f 	andpl.w	r3, lr, #15
 802af12:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802af16:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802af1a:	b2db      	uxtb	r3, r3
 802af1c:	9311      	str	r3, [sp, #68]	; 0x44
 802af1e:	b292      	uxth	r2, r2
 802af20:	b289      	uxth	r1, r1
 802af22:	fb02 f301 	mul.w	r3, r2, r1
 802af26:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802af2a:	0112      	lsls	r2, r2, #4
 802af2c:	b289      	uxth	r1, r1
 802af2e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802af32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802af34:	1ad2      	subs	r2, r2, r3
 802af36:	1a40      	subs	r0, r0, r1
 802af38:	b292      	uxth	r2, r2
 802af3a:	436a      	muls	r2, r5
 802af3c:	b280      	uxth	r0, r0
 802af3e:	fb0c 2c00 	mla	ip, ip, r0, r2
 802af42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802af44:	fb01 c102 	mla	r1, r1, r2, ip
 802af48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802af4a:	fb03 1302 	mla	r3, r3, r2, r1
 802af4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802af52:	b1db      	cbz	r3, 802af8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802af54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802af56:	4353      	muls	r3, r2
 802af58:	1c5a      	adds	r2, r3, #1
 802af5a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802af5e:	4ac6      	ldr	r2, [pc, #792]	; (802b278 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>)
 802af60:	121b      	asrs	r3, r3, #8
 802af62:	6812      	ldr	r2, [r2, #0]
 802af64:	2bff      	cmp	r3, #255	; 0xff
 802af66:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802af6a:	f040 8099 	bne.w	802b0a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802af6e:	0953      	lsrs	r3, r2, #5
 802af70:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802af74:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802af78:	f02c 0c07 	bic.w	ip, ip, #7
 802af7c:	ea43 0c0c 	orr.w	ip, r3, ip
 802af80:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802af84:	ea4c 0202 	orr.w	r2, ip, r2
 802af88:	f8a8 2000 	strh.w	r2, [r8]
 802af8c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802af8e:	441c      	add	r4, r3
 802af90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802af92:	441e      	add	r6, r3
 802af94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802af96:	3b01      	subs	r3, #1
 802af98:	f108 0802 	add.w	r8, r8, #2
 802af9c:	930e      	str	r3, [sp, #56]	; 0x38
 802af9e:	e763      	b.n	802ae68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802afa0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802afa2:	441c      	add	r4, r3
 802afa4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802afa6:	441e      	add	r6, r3
 802afa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802afaa:	3b01      	subs	r3, #1
 802afac:	9309      	str	r3, [sp, #36]	; 0x24
 802afae:	f109 0902 	add.w	r9, r9, #2
 802afb2:	e737      	b.n	802ae24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802afb4:	d024      	beq.n	802b000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802afb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802afb8:	982b      	ldr	r0, [sp, #172]	; 0xac
 802afba:	3b01      	subs	r3, #1
 802afbc:	fb00 4003 	mla	r0, r0, r3, r4
 802afc0:	1400      	asrs	r0, r0, #16
 802afc2:	f53f af4c 	bmi.w	802ae5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802afc6:	3901      	subs	r1, #1
 802afc8:	4288      	cmp	r0, r1
 802afca:	f6bf af48 	bge.w	802ae5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802afce:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802afd0:	fb01 6303 	mla	r3, r1, r3, r6
 802afd4:	141b      	asrs	r3, r3, #16
 802afd6:	f53f af42 	bmi.w	802ae5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802afda:	3a01      	subs	r2, #1
 802afdc:	4293      	cmp	r3, r2
 802afde:	f6bf af3e 	bge.w	802ae5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802afe2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802afe6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802afea:	930e      	str	r3, [sp, #56]	; 0x38
 802afec:	46c8      	mov	r8, r9
 802afee:	f1bb 0f00 	cmp.w	fp, #0
 802aff2:	f300 80b7 	bgt.w	802b164 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 802aff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aff8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802affc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b002:	2b00      	cmp	r3, #0
 802b004:	f340 818d 	ble.w	802b322 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802b008:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b00c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b010:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b014:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b016:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b01a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b01e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802b022:	eef0 6a48 	vmov.f32	s13, s16
 802b026:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b02a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b02e:	ee37 8a48 	vsub.f32	s16, s14, s16
 802b032:	ee16 4a90 	vmov	r4, s13
 802b036:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802b03a:	eef0 6a68 	vmov.f32	s13, s17
 802b03e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802b042:	ee18 2a10 	vmov	r2, s16
 802b046:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802b04a:	fb92 f3f3 	sdiv	r3, r2, r3
 802b04e:	ee18 2a90 	vmov	r2, s17
 802b052:	932b      	str	r3, [sp, #172]	; 0xac
 802b054:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b056:	fb92 f3f3 	sdiv	r3, r2, r3
 802b05a:	932c      	str	r3, [sp, #176]	; 0xb0
 802b05c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b05e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802b060:	3b01      	subs	r3, #1
 802b062:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b066:	930d      	str	r3, [sp, #52]	; 0x34
 802b068:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b06a:	bf08      	it	eq
 802b06c:	4613      	moveq	r3, r2
 802b06e:	ee16 6a90 	vmov	r6, s13
 802b072:	9309      	str	r3, [sp, #36]	; 0x24
 802b074:	eef0 8a67 	vmov.f32	s17, s15
 802b078:	eeb0 8a47 	vmov.f32	s16, s14
 802b07c:	e6c3      	b.n	802ae06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802b07e:	2900      	cmp	r1, #0
 802b080:	f43f af4d 	beq.w	802af1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802b084:	eb0a 0003 	add.w	r0, sl, r3
 802b088:	0843      	lsrs	r3, r0, #1
 802b08a:	07c0      	lsls	r0, r0, #31
 802b08c:	5cfb      	ldrb	r3, [r7, r3]
 802b08e:	bf54      	ite	pl
 802b090:	f003 030f 	andpl.w	r3, r3, #15
 802b094:	111b      	asrmi	r3, r3, #4
 802b096:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b09a:	b2db      	uxtb	r3, r3
 802b09c:	930b      	str	r3, [sp, #44]	; 0x2c
 802b09e:	e73e      	b.n	802af1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802b0a0:	f8b8 e000 	ldrh.w	lr, [r8]
 802b0a4:	fa1f fb83 	uxth.w	fp, r3
 802b0a8:	ea4f 202e 	mov.w	r0, lr, asr #8
 802b0ac:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802b0b0:	43db      	mvns	r3, r3
 802b0b2:	b2db      	uxtb	r3, r3
 802b0b4:	fb11 f10b 	smulbb	r1, r1, fp
 802b0b8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802b0bc:	fb00 1003 	mla	r0, r0, r3, r1
 802b0c0:	fa5f fc8c 	uxtb.w	ip, ip
 802b0c4:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802b0c8:	b2d2      	uxtb	r2, r2
 802b0ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b0ce:	b280      	uxth	r0, r0
 802b0d0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802b0d4:	fb1c fc0b 	smulbb	ip, ip, fp
 802b0d8:	fa5f fe8e 	uxtb.w	lr, lr
 802b0dc:	fb12 fb0b 	smulbb	fp, r2, fp
 802b0e0:	fb01 cc03 	mla	ip, r1, r3, ip
 802b0e4:	fb0e bb03 	mla	fp, lr, r3, fp
 802b0e8:	1c43      	adds	r3, r0, #1
 802b0ea:	fa1f fc8c 	uxth.w	ip, ip
 802b0ee:	fa1f fb8b 	uxth.w	fp, fp
 802b0f2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b0f6:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802b0fa:	f10c 0101 	add.w	r1, ip, #1
 802b0fe:	f10b 0001 	add.w	r0, fp, #1
 802b102:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802b106:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802b10a:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802b10e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802b112:	4318      	orrs	r0, r3
 802b114:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802b118:	ea40 000c 	orr.w	r0, r0, ip
 802b11c:	f8a8 0000 	strh.w	r0, [r8]
 802b120:	e734      	b.n	802af8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802b122:	f113 0b01 	adds.w	fp, r3, #1
 802b126:	f53f af31 	bmi.w	802af8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802b12a:	45dc      	cmp	ip, fp
 802b12c:	f6ff af2e 	blt.w	802af8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802b130:	f110 0b01 	adds.w	fp, r0, #1
 802b134:	f53f af2a 	bmi.w	802af8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802b138:	45de      	cmp	lr, fp
 802b13a:	f6ff af27 	blt.w	802af8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802b13e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802b140:	9302      	str	r3, [sp, #8]
 802b142:	fa0f f38e 	sxth.w	r3, lr
 802b146:	9301      	str	r3, [sp, #4]
 802b148:	fa0f f38c 	sxth.w	r3, ip
 802b14c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b150:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802b154:	9300      	str	r3, [sp, #0]
 802b156:	463a      	mov	r2, r7
 802b158:	4653      	mov	r3, sl
 802b15a:	4641      	mov	r1, r8
 802b15c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802b15e:	f7ff fd2b 	bl	802abb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802b162:	e713      	b.n	802af8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802b164:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802b166:	1422      	asrs	r2, r4, #16
 802b168:	1433      	asrs	r3, r6, #16
 802b16a:	fb05 2303 	mla	r3, r5, r3, r2
 802b16e:	085a      	lsrs	r2, r3, #1
 802b170:	07dd      	lsls	r5, r3, #31
 802b172:	5cba      	ldrb	r2, [r7, r2]
 802b174:	bf54      	ite	pl
 802b176:	f002 020f 	andpl.w	r2, r2, #15
 802b17a:	1112      	asrmi	r2, r2, #4
 802b17c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b180:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802b184:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802b188:	b2d2      	uxtb	r2, r2
 802b18a:	2900      	cmp	r1, #0
 802b18c:	d076      	beq.n	802b27c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802b18e:	f103 0e01 	add.w	lr, r3, #1
 802b192:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802b196:	f01e 0f01 	tst.w	lr, #1
 802b19a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b19e:	bf0c      	ite	eq
 802b1a0:	f00c 0c0f 	andeq.w	ip, ip, #15
 802b1a4:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802b1a8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b1ac:	fa5f f58c 	uxtb.w	r5, ip
 802b1b0:	9512      	str	r5, [sp, #72]	; 0x48
 802b1b2:	b300      	cbz	r0, 802b1f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802b1b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b1b6:	442b      	add	r3, r5
 802b1b8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b1bc:	07dd      	lsls	r5, r3, #31
 802b1be:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b1c2:	bf54      	ite	pl
 802b1c4:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b1c8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b1cc:	3301      	adds	r3, #1
 802b1ce:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b1d2:	fa5f f58c 	uxtb.w	r5, ip
 802b1d6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b1da:	950c      	str	r5, [sp, #48]	; 0x30
 802b1dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b1e0:	07dd      	lsls	r5, r3, #31
 802b1e2:	bf54      	ite	pl
 802b1e4:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b1e8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b1ec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b1f0:	fa5f f38c 	uxtb.w	r3, ip
 802b1f4:	9313      	str	r3, [sp, #76]	; 0x4c
 802b1f6:	b289      	uxth	r1, r1
 802b1f8:	b280      	uxth	r0, r0
 802b1fa:	fb01 f300 	mul.w	r3, r1, r0
 802b1fe:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802b202:	0109      	lsls	r1, r1, #4
 802b204:	b280      	uxth	r0, r0
 802b206:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802b20a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802b20c:	1ac9      	subs	r1, r1, r3
 802b20e:	ebac 0c00 	sub.w	ip, ip, r0
 802b212:	b289      	uxth	r1, r1
 802b214:	4369      	muls	r1, r5
 802b216:	fa1f fc8c 	uxth.w	ip, ip
 802b21a:	fb02 120c 	mla	r2, r2, ip, r1
 802b21e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802b220:	fb00 2001 	mla	r0, r0, r1, r2
 802b224:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b226:	fb03 0302 	mla	r3, r3, r2, r0
 802b22a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b22e:	b1d3      	cbz	r3, 802b266 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 802b230:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b232:	4353      	muls	r3, r2
 802b234:	1c5a      	adds	r2, r3, #1
 802b236:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b23a:	4a0f      	ldr	r2, [pc, #60]	; (802b278 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>)
 802b23c:	121b      	asrs	r3, r3, #8
 802b23e:	6812      	ldr	r2, [r2, #0]
 802b240:	2bff      	cmp	r3, #255	; 0xff
 802b242:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802b246:	d12d      	bne.n	802b2a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 802b248:	0953      	lsrs	r3, r2, #5
 802b24a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802b24e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802b252:	f02c 0c07 	bic.w	ip, ip, #7
 802b256:	ea43 0c0c 	orr.w	ip, r3, ip
 802b25a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b25e:	ea4c 0202 	orr.w	r2, ip, r2
 802b262:	f8a8 2000 	strh.w	r2, [r8]
 802b266:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802b268:	441c      	add	r4, r3
 802b26a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b26c:	f108 0802 	add.w	r8, r8, #2
 802b270:	441e      	add	r6, r3
 802b272:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b276:	e6ba      	b.n	802afee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802b278:	20009828 	.word	0x20009828
 802b27c:	2800      	cmp	r0, #0
 802b27e:	d0ba      	beq.n	802b1f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802b280:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b282:	442b      	add	r3, r5
 802b284:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b288:	07db      	lsls	r3, r3, #31
 802b28a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b28e:	bf54      	ite	pl
 802b290:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b294:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b298:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b29c:	fa5f f38c 	uxtb.w	r3, ip
 802b2a0:	930c      	str	r3, [sp, #48]	; 0x30
 802b2a2:	e7a8      	b.n	802b1f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802b2a4:	f8b8 e000 	ldrh.w	lr, [r8]
 802b2a8:	fa1f fa83 	uxth.w	sl, r3
 802b2ac:	ea4f 202e 	mov.w	r0, lr, asr #8
 802b2b0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802b2b4:	43db      	mvns	r3, r3
 802b2b6:	b2db      	uxtb	r3, r3
 802b2b8:	fb11 f10a 	smulbb	r1, r1, sl
 802b2bc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802b2c0:	fb00 1003 	mla	r0, r0, r3, r1
 802b2c4:	b2d2      	uxtb	r2, r2
 802b2c6:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802b2ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b2ce:	fa5f fe8e 	uxtb.w	lr, lr
 802b2d2:	fb12 f20a 	smulbb	r2, r2, sl
 802b2d6:	fb0e 2203 	mla	r2, lr, r3, r2
 802b2da:	fa5f fc8c 	uxtb.w	ip, ip
 802b2de:	b280      	uxth	r0, r0
 802b2e0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802b2e4:	b292      	uxth	r2, r2
 802b2e6:	fb1c fc0a 	smulbb	ip, ip, sl
 802b2ea:	fb01 cc03 	mla	ip, r1, r3, ip
 802b2ee:	1c43      	adds	r3, r0, #1
 802b2f0:	1c51      	adds	r1, r2, #1
 802b2f2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b2f6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802b2fa:	fa1f fc8c 	uxth.w	ip, ip
 802b2fe:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b302:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802b306:	4308      	orrs	r0, r1
 802b308:	f10c 0101 	add.w	r1, ip, #1
 802b30c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802b310:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802b314:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802b318:	ea40 000c 	orr.w	r0, r0, ip
 802b31c:	f8a8 0000 	strh.w	r0, [r8]
 802b320:	e7a1      	b.n	802b266 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 802b322:	b017      	add	sp, #92	; 0x5c
 802b324:	ecbd 8b08 	vpop	{d8-d11}
 802b328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b32c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b330:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802b334:	2c00      	cmp	r4, #0
 802b336:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802b33a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802b33e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802b342:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802b346:	fb04 ce03 	mla	lr, r4, r3, ip
 802b34a:	db60      	blt.n	802b40e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802b34c:	45a1      	cmp	r9, r4
 802b34e:	dd5e      	ble.n	802b40e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802b350:	f1bc 0f00 	cmp.w	ip, #0
 802b354:	db59      	blt.n	802b40a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802b356:	45e0      	cmp	r8, ip
 802b358:	dd57      	ble.n	802b40a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802b35a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802b35e:	f01e 0f01 	tst.w	lr, #1
 802b362:	5c16      	ldrb	r6, [r2, r0]
 802b364:	bf0c      	ite	eq
 802b366:	f006 060f 	andeq.w	r6, r6, #15
 802b36a:	1136      	asrne	r6, r6, #4
 802b36c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b370:	b2f6      	uxtb	r6, r6
 802b372:	f11c 0001 	adds.w	r0, ip, #1
 802b376:	d44d      	bmi.n	802b414 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802b378:	4580      	cmp	r8, r0
 802b37a:	dd4b      	ble.n	802b414 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802b37c:	2d00      	cmp	r5, #0
 802b37e:	d04b      	beq.n	802b418 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802b380:	f10e 0a01 	add.w	sl, lr, #1
 802b384:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802b388:	f01a 0f01 	tst.w	sl, #1
 802b38c:	5c10      	ldrb	r0, [r2, r0]
 802b38e:	bf0c      	ite	eq
 802b390:	f000 000f 	andeq.w	r0, r0, #15
 802b394:	1100      	asrne	r0, r0, #4
 802b396:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b39a:	b2c0      	uxtb	r0, r0
 802b39c:	3401      	adds	r4, #1
 802b39e:	d43f      	bmi.n	802b420 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802b3a0:	45a1      	cmp	r9, r4
 802b3a2:	dd3d      	ble.n	802b420 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802b3a4:	2f00      	cmp	r7, #0
 802b3a6:	f000 8093 	beq.w	802b4d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802b3aa:	f1bc 0f00 	cmp.w	ip, #0
 802b3ae:	db35      	blt.n	802b41c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802b3b0:	45e0      	cmp	r8, ip
 802b3b2:	dd33      	ble.n	802b41c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802b3b4:	eb03 090e 	add.w	r9, r3, lr
 802b3b8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802b3bc:	f019 0f01 	tst.w	r9, #1
 802b3c0:	5d14      	ldrb	r4, [r2, r4]
 802b3c2:	bf0c      	ite	eq
 802b3c4:	f004 040f 	andeq.w	r4, r4, #15
 802b3c8:	1124      	asrne	r4, r4, #4
 802b3ca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b3ce:	b2e4      	uxtb	r4, r4
 802b3d0:	f11c 0c01 	adds.w	ip, ip, #1
 802b3d4:	d427      	bmi.n	802b426 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b3d6:	45e0      	cmp	r8, ip
 802b3d8:	dd25      	ble.n	802b426 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b3da:	b335      	cbz	r5, 802b42a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802b3dc:	3301      	adds	r3, #1
 802b3de:	449e      	add	lr, r3
 802b3e0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b3e4:	f01e 0f01 	tst.w	lr, #1
 802b3e8:	5cd2      	ldrb	r2, [r2, r3]
 802b3ea:	bf0c      	ite	eq
 802b3ec:	f002 020f 	andeq.w	r2, r2, #15
 802b3f0:	1112      	asrne	r2, r2, #4
 802b3f2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b3f6:	b2d3      	uxtb	r3, r2
 802b3f8:	2d0f      	cmp	r5, #15
 802b3fa:	d917      	bls.n	802b42c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802b3fc:	4b37      	ldr	r3, [pc, #220]	; (802b4dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802b3fe:	4a38      	ldr	r2, [pc, #224]	; (802b4e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802b400:	4838      	ldr	r0, [pc, #224]	; (802b4e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802b402:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802b406:	f002 ff05 	bl	802e214 <__assert_func>
 802b40a:	2600      	movs	r6, #0
 802b40c:	e7b1      	b.n	802b372 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802b40e:	2000      	movs	r0, #0
 802b410:	4606      	mov	r6, r0
 802b412:	e7c3      	b.n	802b39c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b414:	2000      	movs	r0, #0
 802b416:	e7c1      	b.n	802b39c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b418:	4628      	mov	r0, r5
 802b41a:	e7bf      	b.n	802b39c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b41c:	2400      	movs	r4, #0
 802b41e:	e7d7      	b.n	802b3d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802b420:	2300      	movs	r3, #0
 802b422:	461c      	mov	r4, r3
 802b424:	e7e8      	b.n	802b3f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b426:	2300      	movs	r3, #0
 802b428:	e7e6      	b.n	802b3f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b42a:	462b      	mov	r3, r5
 802b42c:	2f0f      	cmp	r7, #15
 802b42e:	d8e5      	bhi.n	802b3fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b430:	b2ad      	uxth	r5, r5
 802b432:	b2bf      	uxth	r7, r7
 802b434:	fb05 fc07 	mul.w	ip, r5, r7
 802b438:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802b43c:	012d      	lsls	r5, r5, #4
 802b43e:	b2bf      	uxth	r7, r7
 802b440:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802b444:	eba5 050c 	sub.w	r5, r5, ip
 802b448:	1bd2      	subs	r2, r2, r7
 802b44a:	b2ad      	uxth	r5, r5
 802b44c:	b292      	uxth	r2, r2
 802b44e:	4368      	muls	r0, r5
 802b450:	fb06 0002 	mla	r0, r6, r2, r0
 802b454:	fb07 0404 	mla	r4, r7, r4, r0
 802b458:	fb0c 4303 	mla	r3, ip, r3, r4
 802b45c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b460:	b3a3      	cbz	r3, 802b4cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b462:	4a21      	ldr	r2, [pc, #132]	; (802b4e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802b464:	880e      	ldrh	r6, [r1, #0]
 802b466:	6815      	ldr	r5, [r2, #0]
 802b468:	1234      	asrs	r4, r6, #8
 802b46a:	b29a      	uxth	r2, r3
 802b46c:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802b470:	43db      	mvns	r3, r3
 802b472:	b2db      	uxtb	r3, r3
 802b474:	fb10 f002 	smulbb	r0, r0, r2
 802b478:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b47c:	fb04 0403 	mla	r4, r4, r3, r0
 802b480:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802b484:	10f0      	asrs	r0, r6, #3
 802b486:	b2ed      	uxtb	r5, r5
 802b488:	00f6      	lsls	r6, r6, #3
 802b48a:	fb17 f702 	smulbb	r7, r7, r2
 802b48e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802b492:	fb15 f202 	smulbb	r2, r5, r2
 802b496:	b2f6      	uxtb	r6, r6
 802b498:	b2a4      	uxth	r4, r4
 802b49a:	fb00 7003 	mla	r0, r0, r3, r7
 802b49e:	fb06 2303 	mla	r3, r6, r3, r2
 802b4a2:	b29a      	uxth	r2, r3
 802b4a4:	1c63      	adds	r3, r4, #1
 802b4a6:	b280      	uxth	r0, r0
 802b4a8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802b4ac:	1c53      	adds	r3, r2, #1
 802b4ae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b4b2:	1c42      	adds	r2, r0, #1
 802b4b4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b4b8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802b4bc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b4c0:	0940      	lsrs	r0, r0, #5
 802b4c2:	4323      	orrs	r3, r4
 802b4c4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802b4c8:	4303      	orrs	r3, r0
 802b4ca:	800b      	strh	r3, [r1, #0]
 802b4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b4d0:	2d0f      	cmp	r5, #15
 802b4d2:	d893      	bhi.n	802b3fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b4d4:	463b      	mov	r3, r7
 802b4d6:	463c      	mov	r4, r7
 802b4d8:	e7aa      	b.n	802b430 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802b4da:	bf00      	nop
 802b4dc:	08033161 	.word	0x08033161
 802b4e0:	0803372e 	.word	0x0803372e
 802b4e4:	080331e5 	.word	0x080331e5
 802b4e8:	20009828 	.word	0x20009828

0802b4ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b4f0:	ed2d 8b08 	vpush	{d8-d11}
 802b4f4:	b093      	sub	sp, #76	; 0x4c
 802b4f6:	461d      	mov	r5, r3
 802b4f8:	920c      	str	r2, [sp, #48]	; 0x30
 802b4fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802b4fc:	9107      	str	r1, [sp, #28]
 802b4fe:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802b502:	9011      	str	r0, [sp, #68]	; 0x44
 802b504:	6850      	ldr	r0, [r2, #4]
 802b506:	6812      	ldr	r2, [r2, #0]
 802b508:	fb00 1303 	mla	r3, r0, r3, r1
 802b50c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b510:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b512:	689b      	ldr	r3, [r3, #8]
 802b514:	3301      	adds	r3, #1
 802b516:	f023 0301 	bic.w	r3, r3, #1
 802b51a:	9306      	str	r3, [sp, #24]
 802b51c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b51e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802b522:	681f      	ldr	r7, [r3, #0]
 802b524:	eeb0 aa40 	vmov.f32	s20, s0
 802b528:	eef0 9a60 	vmov.f32	s19, s1
 802b52c:	eeb0 9a41 	vmov.f32	s18, s2
 802b530:	eeb0 8a62 	vmov.f32	s16, s5
 802b534:	eef0 8a43 	vmov.f32	s17, s6
 802b538:	eef0 ba44 	vmov.f32	s23, s8
 802b53c:	eeb0 ba64 	vmov.f32	s22, s9
 802b540:	eef0 aa45 	vmov.f32	s21, s10
 802b544:	9b07      	ldr	r3, [sp, #28]
 802b546:	2b00      	cmp	r3, #0
 802b548:	dc03      	bgt.n	802b552 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802b54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b54c:	2b00      	cmp	r3, #0
 802b54e:	f340 8267 	ble.w	802ba20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b552:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b554:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b558:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b55c:	1e48      	subs	r0, r1, #1
 802b55e:	f102 3cff 	add.w	ip, r2, #4294967295
 802b562:	2d00      	cmp	r5, #0
 802b564:	f340 80b8 	ble.w	802b6d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802b568:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b56c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b570:	d406      	bmi.n	802b580 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b572:	4586      	cmp	lr, r0
 802b574:	da04      	bge.n	802b580 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b576:	2b00      	cmp	r3, #0
 802b578:	db02      	blt.n	802b580 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b57a:	4563      	cmp	r3, ip
 802b57c:	f2c0 80ad 	blt.w	802b6da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802b580:	f11e 0e01 	adds.w	lr, lr, #1
 802b584:	f100 80a0 	bmi.w	802b6c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b588:	4571      	cmp	r1, lr
 802b58a:	f2c0 809d 	blt.w	802b6c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b58e:	3301      	adds	r3, #1
 802b590:	f100 809a 	bmi.w	802b6c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b594:	429a      	cmp	r2, r3
 802b596:	f2c0 8097 	blt.w	802b6c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b59a:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802b59e:	9509      	str	r5, [sp, #36]	; 0x24
 802b5a0:	46c8      	mov	r8, r9
 802b5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b5a4:	2b00      	cmp	r3, #0
 802b5a6:	f340 80b6 	ble.w	802b716 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802b5aa:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802b5ae:	9308      	str	r3, [sp, #32]
 802b5b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b5b2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b5b6:	1423      	asrs	r3, r4, #16
 802b5b8:	ea4f 4026 	mov.w	r0, r6, asr #16
 802b5bc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b5c0:	f100 813e 	bmi.w	802b840 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b5c4:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b5c8:	455b      	cmp	r3, fp
 802b5ca:	f280 8139 	bge.w	802b840 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b5ce:	2800      	cmp	r0, #0
 802b5d0:	f2c0 8136 	blt.w	802b840 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b5d4:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b5d8:	4558      	cmp	r0, fp
 802b5da:	f280 8131 	bge.w	802b840 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b5de:	9a06      	ldr	r2, [sp, #24]
 802b5e0:	fb00 3302 	mla	r3, r0, r2, r3
 802b5e4:	0858      	lsrs	r0, r3, #1
 802b5e6:	07da      	lsls	r2, r3, #31
 802b5e8:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b5ec:	9a08      	ldr	r2, [sp, #32]
 802b5ee:	bf54      	ite	pl
 802b5f0:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b5f4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b5f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b5fc:	fa5f fc8c 	uxtb.w	ip, ip
 802b600:	2a00      	cmp	r2, #0
 802b602:	f000 80cb 	beq.w	802b79c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802b606:	1c58      	adds	r0, r3, #1
 802b608:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b60c:	07c0      	lsls	r0, r0, #31
 802b60e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b612:	bf54      	ite	pl
 802b614:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b618:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b61c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b620:	fa5f fe8e 	uxtb.w	lr, lr
 802b624:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802b628:	b1b9      	cbz	r1, 802b65a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b62a:	4453      	add	r3, sl
 802b62c:	0858      	lsrs	r0, r3, #1
 802b62e:	07da      	lsls	r2, r3, #31
 802b630:	5c38      	ldrb	r0, [r7, r0]
 802b632:	bf54      	ite	pl
 802b634:	f000 000f 	andpl.w	r0, r0, #15
 802b638:	1100      	asrmi	r0, r0, #4
 802b63a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b63e:	b2c0      	uxtb	r0, r0
 802b640:	900a      	str	r0, [sp, #40]	; 0x28
 802b642:	1c58      	adds	r0, r3, #1
 802b644:	0843      	lsrs	r3, r0, #1
 802b646:	07c2      	lsls	r2, r0, #31
 802b648:	5cfb      	ldrb	r3, [r7, r3]
 802b64a:	bf54      	ite	pl
 802b64c:	f003 030f 	andpl.w	r3, r3, #15
 802b650:	111b      	asrmi	r3, r3, #4
 802b652:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b656:	b2db      	uxtb	r3, r3
 802b658:	930e      	str	r3, [sp, #56]	; 0x38
 802b65a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802b65e:	b289      	uxth	r1, r1
 802b660:	fb02 f301 	mul.w	r3, r2, r1
 802b664:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b668:	0112      	lsls	r2, r2, #4
 802b66a:	b289      	uxth	r1, r1
 802b66c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b670:	1a40      	subs	r0, r0, r1
 802b672:	fa1f fe80 	uxth.w	lr, r0
 802b676:	1ad2      	subs	r2, r2, r3
 802b678:	980d      	ldr	r0, [sp, #52]	; 0x34
 802b67a:	b292      	uxth	r2, r2
 802b67c:	4342      	muls	r2, r0
 802b67e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802b682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b684:	fb01 c102 	mla	r1, r1, r2, ip
 802b688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b68a:	fb03 1302 	mla	r3, r3, r2, r1
 802b68e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b692:	2bff      	cmp	r3, #255	; 0xff
 802b694:	f040 8093 	bne.w	802b7be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802b698:	4bbe      	ldr	r3, [pc, #760]	; (802b994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b69a:	681a      	ldr	r2, [r3, #0]
 802b69c:	4bbe      	ldr	r3, [pc, #760]	; (802b998 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b69e:	0951      	lsrs	r1, r2, #5
 802b6a0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b6a4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b6a8:	430b      	orrs	r3, r1
 802b6aa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b6ae:	4313      	orrs	r3, r2
 802b6b0:	f8a8 3000 	strh.w	r3, [r8]
 802b6b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b6b6:	441c      	add	r4, r3
 802b6b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b6ba:	441e      	add	r6, r3
 802b6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b6be:	3b01      	subs	r3, #1
 802b6c0:	f108 0802 	add.w	r8, r8, #2
 802b6c4:	9309      	str	r3, [sp, #36]	; 0x24
 802b6c6:	e76c      	b.n	802b5a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802b6c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b6ca:	441c      	add	r4, r3
 802b6cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b6ce:	3d01      	subs	r5, #1
 802b6d0:	441e      	add	r6, r3
 802b6d2:	f109 0902 	add.w	r9, r9, #2
 802b6d6:	e744      	b.n	802b562 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802b6d8:	d021      	beq.n	802b71e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802b6da:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802b6dc:	1e6b      	subs	r3, r5, #1
 802b6de:	fb00 4003 	mla	r0, r0, r3, r4
 802b6e2:	1400      	asrs	r0, r0, #16
 802b6e4:	f53f af59 	bmi.w	802b59a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b6e8:	3901      	subs	r1, #1
 802b6ea:	4288      	cmp	r0, r1
 802b6ec:	f6bf af55 	bge.w	802b59a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b6f0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802b6f2:	fb01 6303 	mla	r3, r1, r3, r6
 802b6f6:	141b      	asrs	r3, r3, #16
 802b6f8:	f53f af4f 	bmi.w	802b59a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b6fc:	3a01      	subs	r2, #1
 802b6fe:	4293      	cmp	r3, r2
 802b700:	f6bf af4b 	bge.w	802b59a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b704:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802b708:	9308      	str	r3, [sp, #32]
 802b70a:	46a8      	mov	r8, r5
 802b70c:	46ce      	mov	lr, r9
 802b70e:	f1b8 0f00 	cmp.w	r8, #0
 802b712:	f300 80b5 	bgt.w	802b880 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802b716:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802b71a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b71e:	9b07      	ldr	r3, [sp, #28]
 802b720:	2b00      	cmp	r3, #0
 802b722:	f340 817d 	ble.w	802ba20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b726:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b72a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b72e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b732:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b734:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b738:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b73c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802b740:	eef0 6a48 	vmov.f32	s13, s16
 802b744:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b748:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b74c:	ee37 8a48 	vsub.f32	s16, s14, s16
 802b750:	ee16 4a90 	vmov	r4, s13
 802b754:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802b758:	eef0 6a68 	vmov.f32	s13, s17
 802b75c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802b760:	ee18 2a10 	vmov	r2, s16
 802b764:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802b768:	fb92 f3f3 	sdiv	r3, r2, r3
 802b76c:	ee18 2a90 	vmov	r2, s17
 802b770:	9327      	str	r3, [sp, #156]	; 0x9c
 802b772:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b774:	fb92 f3f3 	sdiv	r3, r2, r3
 802b778:	9328      	str	r3, [sp, #160]	; 0xa0
 802b77a:	9b07      	ldr	r3, [sp, #28]
 802b77c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b77e:	3b01      	subs	r3, #1
 802b780:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b784:	9307      	str	r3, [sp, #28]
 802b786:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b788:	ee16 6a90 	vmov	r6, s13
 802b78c:	bf14      	ite	ne
 802b78e:	461d      	movne	r5, r3
 802b790:	4615      	moveq	r5, r2
 802b792:	eef0 8a67 	vmov.f32	s17, s15
 802b796:	eeb0 8a47 	vmov.f32	s16, s14
 802b79a:	e6d3      	b.n	802b544 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802b79c:	2900      	cmp	r1, #0
 802b79e:	f43f af5c 	beq.w	802b65a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b7a2:	eb0a 0003 	add.w	r0, sl, r3
 802b7a6:	0843      	lsrs	r3, r0, #1
 802b7a8:	07c0      	lsls	r0, r0, #31
 802b7aa:	5cfb      	ldrb	r3, [r7, r3]
 802b7ac:	bf54      	ite	pl
 802b7ae:	f003 030f 	andpl.w	r3, r3, #15
 802b7b2:	111b      	asrmi	r3, r3, #4
 802b7b4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b7b8:	b2db      	uxtb	r3, r3
 802b7ba:	930a      	str	r3, [sp, #40]	; 0x28
 802b7bc:	e74d      	b.n	802b65a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b7be:	2b00      	cmp	r3, #0
 802b7c0:	f43f af78 	beq.w	802b6b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b7c4:	4a73      	ldr	r2, [pc, #460]	; (802b994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b7c6:	f8b8 c000 	ldrh.w	ip, [r8]
 802b7ca:	6810      	ldr	r0, [r2, #0]
 802b7cc:	fa1f fe83 	uxth.w	lr, r3
 802b7d0:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b7d4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b7d8:	43db      	mvns	r3, r3
 802b7da:	b2db      	uxtb	r3, r3
 802b7dc:	fb12 f20e 	smulbb	r2, r2, lr
 802b7e0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b7e4:	fb01 2103 	mla	r1, r1, r3, r2
 802b7e8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b7ec:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b7f0:	b2c0      	uxtb	r0, r0
 802b7f2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b7f6:	fb1b fb0e 	smulbb	fp, fp, lr
 802b7fa:	b289      	uxth	r1, r1
 802b7fc:	fb10 fe0e 	smulbb	lr, r0, lr
 802b800:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b804:	fa5f fc8c 	uxtb.w	ip, ip
 802b808:	fb02 b203 	mla	r2, r2, r3, fp
 802b80c:	1c48      	adds	r0, r1, #1
 802b80e:	fb0c e303 	mla	r3, ip, r3, lr
 802b812:	b292      	uxth	r2, r2
 802b814:	b29b      	uxth	r3, r3
 802b816:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802b81a:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802b81e:	f102 0b01 	add.w	fp, r2, #1
 802b822:	1c59      	adds	r1, r3, #1
 802b824:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802b828:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b82c:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b830:	0952      	lsrs	r2, r2, #5
 802b832:	4301      	orrs	r1, r0
 802b834:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b838:	4311      	orrs	r1, r2
 802b83a:	f8a8 1000 	strh.w	r1, [r8]
 802b83e:	e739      	b.n	802b6b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b840:	f113 0b01 	adds.w	fp, r3, #1
 802b844:	f53f af36 	bmi.w	802b6b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b848:	45dc      	cmp	ip, fp
 802b84a:	f6ff af33 	blt.w	802b6b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b84e:	f110 0b01 	adds.w	fp, r0, #1
 802b852:	f53f af2f 	bmi.w	802b6b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b856:	45de      	cmp	lr, fp
 802b858:	f6ff af2c 	blt.w	802b6b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b85c:	9a08      	ldr	r2, [sp, #32]
 802b85e:	9302      	str	r3, [sp, #8]
 802b860:	fa0f f38e 	sxth.w	r3, lr
 802b864:	9301      	str	r3, [sp, #4]
 802b866:	fa0f f38c 	sxth.w	r3, ip
 802b86a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b86e:	9105      	str	r1, [sp, #20]
 802b870:	9300      	str	r3, [sp, #0]
 802b872:	463a      	mov	r2, r7
 802b874:	4653      	mov	r3, sl
 802b876:	4641      	mov	r1, r8
 802b878:	9811      	ldr	r0, [sp, #68]	; 0x44
 802b87a:	f7ff fd57 	bl	802b32c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802b87e:	e719      	b.n	802b6b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b880:	9906      	ldr	r1, [sp, #24]
 802b882:	1422      	asrs	r2, r4, #16
 802b884:	1433      	asrs	r3, r6, #16
 802b886:	fb01 2303 	mla	r3, r1, r3, r2
 802b88a:	085a      	lsrs	r2, r3, #1
 802b88c:	07d9      	lsls	r1, r3, #31
 802b88e:	5cba      	ldrb	r2, [r7, r2]
 802b890:	bf54      	ite	pl
 802b892:	f002 020f 	andpl.w	r2, r2, #15
 802b896:	1112      	asrmi	r2, r2, #4
 802b898:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b89c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b8a0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802b8a4:	b2d2      	uxtb	r2, r2
 802b8a6:	2800      	cmp	r0, #0
 802b8a8:	d062      	beq.n	802b970 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802b8aa:	f103 0a01 	add.w	sl, r3, #1
 802b8ae:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802b8b2:	f01a 0f01 	tst.w	sl, #1
 802b8b6:	5c79      	ldrb	r1, [r7, r1]
 802b8b8:	bf0c      	ite	eq
 802b8ba:	f001 010f 	andeq.w	r1, r1, #15
 802b8be:	1109      	asrne	r1, r1, #4
 802b8c0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b8c4:	b2c9      	uxtb	r1, r1
 802b8c6:	910f      	str	r1, [sp, #60]	; 0x3c
 802b8c8:	f1bc 0f00 	cmp.w	ip, #0
 802b8cc:	d019      	beq.n	802b902 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b8ce:	9908      	ldr	r1, [sp, #32]
 802b8d0:	440b      	add	r3, r1
 802b8d2:	0859      	lsrs	r1, r3, #1
 802b8d4:	f013 0f01 	tst.w	r3, #1
 802b8d8:	5c79      	ldrb	r1, [r7, r1]
 802b8da:	bf0c      	ite	eq
 802b8dc:	f001 010f 	andeq.w	r1, r1, #15
 802b8e0:	1109      	asrne	r1, r1, #4
 802b8e2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b8e6:	b2c9      	uxtb	r1, r1
 802b8e8:	3301      	adds	r3, #1
 802b8ea:	910b      	str	r1, [sp, #44]	; 0x2c
 802b8ec:	0859      	lsrs	r1, r3, #1
 802b8ee:	07db      	lsls	r3, r3, #31
 802b8f0:	5c79      	ldrb	r1, [r7, r1]
 802b8f2:	bf54      	ite	pl
 802b8f4:	f001 010f 	andpl.w	r1, r1, #15
 802b8f8:	1109      	asrmi	r1, r1, #4
 802b8fa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b8fe:	b2c9      	uxtb	r1, r1
 802b900:	9110      	str	r1, [sp, #64]	; 0x40
 802b902:	b280      	uxth	r0, r0
 802b904:	fa1f fc8c 	uxth.w	ip, ip
 802b908:	fb00 f30c 	mul.w	r3, r0, ip
 802b90c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802b910:	0100      	lsls	r0, r0, #4
 802b912:	fa1f fc8c 	uxth.w	ip, ip
 802b916:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802b91a:	eba1 010c 	sub.w	r1, r1, ip
 802b91e:	fa1f fa81 	uxth.w	sl, r1
 802b922:	1ac0      	subs	r0, r0, r3
 802b924:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b926:	b280      	uxth	r0, r0
 802b928:	4348      	muls	r0, r1
 802b92a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802b92c:	fb02 020a 	mla	r2, r2, sl, r0
 802b930:	fb0c 2c01 	mla	ip, ip, r1, r2
 802b934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b936:	fb03 c302 	mla	r3, r3, r2, ip
 802b93a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b93e:	2bff      	cmp	r3, #255	; 0xff
 802b940:	d12c      	bne.n	802b99c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802b942:	4b14      	ldr	r3, [pc, #80]	; (802b994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b944:	681a      	ldr	r2, [r3, #0]
 802b946:	4b14      	ldr	r3, [pc, #80]	; (802b998 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b948:	0951      	lsrs	r1, r2, #5
 802b94a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b94e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b952:	430b      	orrs	r3, r1
 802b954:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b958:	4313      	orrs	r3, r2
 802b95a:	f8ae 3000 	strh.w	r3, [lr]
 802b95e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b960:	441c      	add	r4, r3
 802b962:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b964:	f10e 0e02 	add.w	lr, lr, #2
 802b968:	441e      	add	r6, r3
 802b96a:	f108 38ff 	add.w	r8, r8, #4294967295
 802b96e:	e6ce      	b.n	802b70e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802b970:	f1bc 0f00 	cmp.w	ip, #0
 802b974:	d0c5      	beq.n	802b902 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b976:	9908      	ldr	r1, [sp, #32]
 802b978:	440b      	add	r3, r1
 802b97a:	0859      	lsrs	r1, r3, #1
 802b97c:	07db      	lsls	r3, r3, #31
 802b97e:	5c79      	ldrb	r1, [r7, r1]
 802b980:	bf54      	ite	pl
 802b982:	f001 010f 	andpl.w	r1, r1, #15
 802b986:	1109      	asrmi	r1, r1, #4
 802b988:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b98c:	b2c9      	uxtb	r1, r1
 802b98e:	910b      	str	r1, [sp, #44]	; 0x2c
 802b990:	e7b7      	b.n	802b902 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b992:	bf00      	nop
 802b994:	20009828 	.word	0x20009828
 802b998:	fffff800 	.word	0xfffff800
 802b99c:	2b00      	cmp	r3, #0
 802b99e:	d0de      	beq.n	802b95e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802b9a0:	4a22      	ldr	r2, [pc, #136]	; (802ba2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802b9a2:	f8be c000 	ldrh.w	ip, [lr]
 802b9a6:	6810      	ldr	r0, [r2, #0]
 802b9a8:	fa1f fa83 	uxth.w	sl, r3
 802b9ac:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b9b0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b9b4:	43db      	mvns	r3, r3
 802b9b6:	b2db      	uxtb	r3, r3
 802b9b8:	fb12 f20a 	smulbb	r2, r2, sl
 802b9bc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b9c0:	fb01 2103 	mla	r1, r1, r3, r2
 802b9c4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b9c8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b9cc:	b2c0      	uxtb	r0, r0
 802b9ce:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b9d2:	fa5f fc8c 	uxtb.w	ip, ip
 802b9d6:	fb10 f00a 	smulbb	r0, r0, sl
 802b9da:	fb0c 0003 	mla	r0, ip, r3, r0
 802b9de:	b289      	uxth	r1, r1
 802b9e0:	fb1b fb0a 	smulbb	fp, fp, sl
 802b9e4:	b280      	uxth	r0, r0
 802b9e6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b9ea:	fb02 b203 	mla	r2, r2, r3, fp
 802b9ee:	1c4b      	adds	r3, r1, #1
 802b9f0:	f100 0b01 	add.w	fp, r0, #1
 802b9f4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b9f8:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802b9fc:	b292      	uxth	r2, r2
 802b9fe:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802ba02:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802ba06:	ea4b 0101 	orr.w	r1, fp, r1
 802ba0a:	f102 0b01 	add.w	fp, r2, #1
 802ba0e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802ba12:	0952      	lsrs	r2, r2, #5
 802ba14:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ba18:	4311      	orrs	r1, r2
 802ba1a:	f8ae 1000 	strh.w	r1, [lr]
 802ba1e:	e79e      	b.n	802b95e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802ba20:	b013      	add	sp, #76	; 0x4c
 802ba22:	ecbd 8b08 	vpop	{d8-d11}
 802ba26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ba2a:	bf00      	nop
 802ba2c:	20009828 	.word	0x20009828

0802ba30 <CRC_Lock>:
 802ba30:	b530      	push	{r4, r5, lr}
 802ba32:	4a20      	ldr	r2, [pc, #128]	; (802bab4 <CRC_Lock+0x84>)
 802ba34:	6813      	ldr	r3, [r2, #0]
 802ba36:	f023 0301 	bic.w	r3, r3, #1
 802ba3a:	6013      	str	r3, [r2, #0]
 802ba3c:	4b1e      	ldr	r3, [pc, #120]	; (802bab8 <CRC_Lock+0x88>)
 802ba3e:	681a      	ldr	r2, [r3, #0]
 802ba40:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802ba44:	4022      	ands	r2, r4
 802ba46:	f24c 2540 	movw	r5, #49728	; 0xc240
 802ba4a:	42aa      	cmp	r2, r5
 802ba4c:	d005      	beq.n	802ba5a <CRC_Lock+0x2a>
 802ba4e:	681b      	ldr	r3, [r3, #0]
 802ba50:	f24c 2270 	movw	r2, #49776	; 0xc270
 802ba54:	4023      	ands	r3, r4
 802ba56:	4293      	cmp	r3, r2
 802ba58:	d124      	bne.n	802baa4 <CRC_Lock+0x74>
 802ba5a:	4b18      	ldr	r3, [pc, #96]	; (802babc <CRC_Lock+0x8c>)
 802ba5c:	681b      	ldr	r3, [r3, #0]
 802ba5e:	bb0b      	cbnz	r3, 802baa4 <CRC_Lock+0x74>
 802ba60:	4b17      	ldr	r3, [pc, #92]	; (802bac0 <CRC_Lock+0x90>)
 802ba62:	681a      	ldr	r2, [r3, #0]
 802ba64:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802ba68:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802ba6c:	d00d      	beq.n	802ba8a <CRC_Lock+0x5a>
 802ba6e:	681a      	ldr	r2, [r3, #0]
 802ba70:	f240 4483 	movw	r4, #1155	; 0x483
 802ba74:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802ba78:	42a2      	cmp	r2, r4
 802ba7a:	d006      	beq.n	802ba8a <CRC_Lock+0x5a>
 802ba7c:	681b      	ldr	r3, [r3, #0]
 802ba7e:	f240 4285 	movw	r2, #1157	; 0x485
 802ba82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802ba86:	4293      	cmp	r3, r2
 802ba88:	d10c      	bne.n	802baa4 <CRC_Lock+0x74>
 802ba8a:	4b0e      	ldr	r3, [pc, #56]	; (802bac4 <CRC_Lock+0x94>)
 802ba8c:	2201      	movs	r2, #1
 802ba8e:	601a      	str	r2, [r3, #0]
 802ba90:	681a      	ldr	r2, [r3, #0]
 802ba92:	2a00      	cmp	r2, #0
 802ba94:	d1fc      	bne.n	802ba90 <CRC_Lock+0x60>
 802ba96:	4b0c      	ldr	r3, [pc, #48]	; (802bac8 <CRC_Lock+0x98>)
 802ba98:	6018      	str	r0, [r3, #0]
 802ba9a:	6818      	ldr	r0, [r3, #0]
 802ba9c:	1a43      	subs	r3, r0, r1
 802ba9e:	4258      	negs	r0, r3
 802baa0:	4158      	adcs	r0, r3
 802baa2:	bd30      	pop	{r4, r5, pc}
 802baa4:	4b09      	ldr	r3, [pc, #36]	; (802bacc <CRC_Lock+0x9c>)
 802baa6:	2201      	movs	r2, #1
 802baa8:	601a      	str	r2, [r3, #0]
 802baaa:	681a      	ldr	r2, [r3, #0]
 802baac:	2a00      	cmp	r2, #0
 802baae:	d1fc      	bne.n	802baaa <CRC_Lock+0x7a>
 802bab0:	4b07      	ldr	r3, [pc, #28]	; (802bad0 <CRC_Lock+0xa0>)
 802bab2:	e7f1      	b.n	802ba98 <CRC_Lock+0x68>
 802bab4:	e0002000 	.word	0xe0002000
 802bab8:	e000ed00 	.word	0xe000ed00
 802babc:	e0042000 	.word	0xe0042000
 802bac0:	5c001000 	.word	0x5c001000
 802bac4:	58024c08 	.word	0x58024c08
 802bac8:	58024c00 	.word	0x58024c00
 802bacc:	40023008 	.word	0x40023008
 802bad0:	40023000 	.word	0x40023000

0802bad4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802bad4:	6101      	str	r1, [r0, #16]
 802bad6:	4770      	bx	lr

0802bad8 <_ZN8touchgfx8Gestures4tickEv>:
 802bad8:	7b83      	ldrb	r3, [r0, #14]
 802bada:	b14b      	cbz	r3, 802baf0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802badc:	8903      	ldrh	r3, [r0, #8]
 802bade:	3301      	adds	r3, #1
 802bae0:	b29b      	uxth	r3, r3
 802bae2:	2b07      	cmp	r3, #7
 802bae4:	8103      	strh	r3, [r0, #8]
 802bae6:	bf81      	itttt	hi
 802bae8:	2300      	movhi	r3, #0
 802baea:	8143      	strhhi	r3, [r0, #10]
 802baec:	8183      	strhhi	r3, [r0, #12]
 802baee:	7383      	strbhi	r3, [r0, #14]
 802baf0:	4770      	bx	lr
	...

0802baf4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802baf4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802baf8:	4604      	mov	r4, r0
 802bafa:	8880      	ldrh	r0, [r0, #4]
 802bafc:	f8ad 0006 	strh.w	r0, [sp, #6]
 802bb00:	4698      	mov	r8, r3
 802bb02:	eba8 0000 	sub.w	r0, r8, r0
 802bb06:	4b1c      	ldr	r3, [pc, #112]	; (802bb78 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802bb08:	9300      	str	r3, [sp, #0]
 802bb0a:	b280      	uxth	r0, r0
 802bb0c:	2300      	movs	r3, #0
 802bb0e:	f88d 3004 	strb.w	r3, [sp, #4]
 802bb12:	b203      	sxth	r3, r0
 802bb14:	2b00      	cmp	r3, #0
 802bb16:	bfb8      	it	lt
 802bb18:	4240      	neglt	r0, r0
 802bb1a:	4617      	mov	r7, r2
 802bb1c:	8aa2      	ldrh	r2, [r4, #20]
 802bb1e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802bb22:	f8ad 800a 	strh.w	r8, [sp, #10]
 802bb26:	bfb8      	it	lt
 802bb28:	b203      	sxthlt	r3, r0
 802bb2a:	460e      	mov	r6, r1
 802bb2c:	4293      	cmp	r3, r2
 802bb2e:	88e1      	ldrh	r1, [r4, #6]
 802bb30:	f8ad 1008 	strh.w	r1, [sp, #8]
 802bb34:	f8ad 500c 	strh.w	r5, [sp, #12]
 802bb38:	dc08      	bgt.n	802bb4c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802bb3a:	1a69      	subs	r1, r5, r1
 802bb3c:	b289      	uxth	r1, r1
 802bb3e:	b20b      	sxth	r3, r1
 802bb40:	2b00      	cmp	r3, #0
 802bb42:	bfbc      	itt	lt
 802bb44:	4249      	neglt	r1, r1
 802bb46:	b20b      	sxthlt	r3, r1
 802bb48:	429a      	cmp	r2, r3
 802bb4a:	da13      	bge.n	802bb74 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802bb4c:	6920      	ldr	r0, [r4, #16]
 802bb4e:	6803      	ldr	r3, [r0, #0]
 802bb50:	4669      	mov	r1, sp
 802bb52:	685b      	ldr	r3, [r3, #4]
 802bb54:	4798      	blx	r3
 802bb56:	eba8 0606 	sub.w	r6, r8, r6
 802bb5a:	2300      	movs	r3, #0
 802bb5c:	1bef      	subs	r7, r5, r7
 802bb5e:	2001      	movs	r0, #1
 802bb60:	8123      	strh	r3, [r4, #8]
 802bb62:	8166      	strh	r6, [r4, #10]
 802bb64:	81a7      	strh	r7, [r4, #12]
 802bb66:	f8a4 8004 	strh.w	r8, [r4, #4]
 802bb6a:	80e5      	strh	r5, [r4, #6]
 802bb6c:	73a0      	strb	r0, [r4, #14]
 802bb6e:	b004      	add	sp, #16
 802bb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bb74:	2000      	movs	r0, #0
 802bb76:	e7fa      	b.n	802bb6e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802bb78:	080325b4 	.word	0x080325b4

0802bb7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802bb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bb7e:	461e      	mov	r6, r3
 802bb80:	1e4b      	subs	r3, r1, #1
 802bb82:	2b01      	cmp	r3, #1
 802bb84:	b085      	sub	sp, #20
 802bb86:	4604      	mov	r4, r0
 802bb88:	460d      	mov	r5, r1
 802bb8a:	4617      	mov	r7, r2
 802bb8c:	d84b      	bhi.n	802bc26 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802bb8e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802bb92:	1cd3      	adds	r3, r2, #3
 802bb94:	b29b      	uxth	r3, r3
 802bb96:	2b06      	cmp	r3, #6
 802bb98:	d916      	bls.n	802bbc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802bb9a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802bc3c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802bb9e:	f8cd c004 	str.w	ip, [sp, #4]
 802bba2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802bba6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802bbaa:	6900      	ldr	r0, [r0, #16]
 802bbac:	f8ad 100c 	strh.w	r1, [sp, #12]
 802bbb0:	f04f 0c00 	mov.w	ip, #0
 802bbb4:	f88d c008 	strb.w	ip, [sp, #8]
 802bbb8:	f8ad 200a 	strh.w	r2, [sp, #10]
 802bbbc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bbc0:	6803      	ldr	r3, [r0, #0]
 802bbc2:	a901      	add	r1, sp, #4
 802bbc4:	689b      	ldr	r3, [r3, #8]
 802bbc6:	4798      	blx	r3
 802bbc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802bbcc:	1cd3      	adds	r3, r2, #3
 802bbce:	b29b      	uxth	r3, r3
 802bbd0:	2b06      	cmp	r3, #6
 802bbd2:	d916      	bls.n	802bc02 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802bbd4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802bc3c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802bbd8:	f8cd c004 	str.w	ip, [sp, #4]
 802bbdc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802bbe0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802bbe4:	6920      	ldr	r0, [r4, #16]
 802bbe6:	f8ad 100c 	strh.w	r1, [sp, #12]
 802bbea:	f04f 0c01 	mov.w	ip, #1
 802bbee:	f88d c008 	strb.w	ip, [sp, #8]
 802bbf2:	f8ad 200a 	strh.w	r2, [sp, #10]
 802bbf6:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bbfa:	6803      	ldr	r3, [r0, #0]
 802bbfc:	a901      	add	r1, sp, #4
 802bbfe:	689b      	ldr	r3, [r3, #8]
 802bc00:	4798      	blx	r3
 802bc02:	4b0d      	ldr	r3, [pc, #52]	; (802bc38 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802bc04:	9301      	str	r3, [sp, #4]
 802bc06:	6920      	ldr	r0, [r4, #16]
 802bc08:	f88d 5008 	strb.w	r5, [sp, #8]
 802bc0c:	2300      	movs	r3, #0
 802bc0e:	f8ad 700a 	strh.w	r7, [sp, #10]
 802bc12:	f8ad 600c 	strh.w	r6, [sp, #12]
 802bc16:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bc1a:	6803      	ldr	r3, [r0, #0]
 802bc1c:	a901      	add	r1, sp, #4
 802bc1e:	681b      	ldr	r3, [r3, #0]
 802bc20:	4798      	blx	r3
 802bc22:	b005      	add	sp, #20
 802bc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bc26:	2900      	cmp	r1, #0
 802bc28:	d1eb      	bne.n	802bc02 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802bc2a:	80a2      	strh	r2, [r4, #4]
 802bc2c:	80c6      	strh	r6, [r0, #6]
 802bc2e:	60a1      	str	r1, [r4, #8]
 802bc30:	81a1      	strh	r1, [r4, #12]
 802bc32:	73a1      	strb	r1, [r4, #14]
 802bc34:	e7e5      	b.n	802bc02 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802bc36:	bf00      	nop
 802bc38:	080325a0 	.word	0x080325a0
 802bc3c:	080325c8 	.word	0x080325c8

0802bc40 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 802bc40:	10c9      	asrs	r1, r1, #3
 802bc42:	2900      	cmp	r1, #0
 802bc44:	bfb8      	it	lt
 802bc46:	4249      	neglt	r1, r1
 802bc48:	2801      	cmp	r0, #1
 802bc4a:	d108      	bne.n	802bc5e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802bc4c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802bc50:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802bc54:	4601      	mov	r1, r0
 802bc56:	dd02      	ble.n	802bc5e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802bc58:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802bc5c:	4770      	bx	lr
 802bc5e:	29ff      	cmp	r1, #255	; 0xff
 802bc60:	bfa8      	it	ge
 802bc62:	21ff      	movge	r1, #255	; 0xff
 802bc64:	4608      	mov	r0, r1
 802bc66:	4770      	bx	lr

0802bc68 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 802bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc6c:	688c      	ldr	r4, [r1, #8]
 802bc6e:	2c00      	cmp	r4, #0
 802bc70:	b087      	sub	sp, #28
 802bc72:	4607      	mov	r7, r0
 802bc74:	db2b      	blt.n	802bcce <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802bc76:	6803      	ldr	r3, [r0, #0]
 802bc78:	691a      	ldr	r2, [r3, #16]
 802bc7a:	42a2      	cmp	r2, r4
 802bc7c:	dd27      	ble.n	802bcce <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802bc7e:	685a      	ldr	r2, [r3, #4]
 802bc80:	695e      	ldr	r6, [r3, #20]
 802bc82:	68cd      	ldr	r5, [r1, #12]
 802bc84:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802bc88:	f893 a008 	ldrb.w	sl, [r3, #8]
 802bc8c:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802bc90:	fb06 2604 	mla	r6, r6, r4, r2
 802bc94:	698a      	ldr	r2, [r1, #24]
 802bc96:	9205      	str	r2, [sp, #20]
 802bc98:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802bc9c:	9b05      	ldr	r3, [sp, #20]
 802bc9e:	6839      	ldr	r1, [r7, #0]
 802bca0:	eb03 0c02 	add.w	ip, r3, r2
 802bca4:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 802bca8:	68c9      	ldr	r1, [r1, #12]
 802bcaa:	1898      	adds	r0, r3, r2
 802bcac:	4288      	cmp	r0, r1
 802bcae:	db02      	blt.n	802bcb6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802bcb0:	1a8b      	subs	r3, r1, r2
 802bcb2:	2b00      	cmp	r3, #0
 802bcb4:	dd09      	ble.n	802bcca <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802bcb6:	6878      	ldr	r0, [r7, #4]
 802bcb8:	6801      	ldr	r1, [r0, #0]
 802bcba:	9400      	str	r4, [sp, #0]
 802bcbc:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802bcc0:	4653      	mov	r3, sl
 802bcc2:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802bcc6:	4631      	mov	r1, r6
 802bcc8:	47d8      	blx	fp
 802bcca:	3d01      	subs	r5, #1
 802bccc:	d1e4      	bne.n	802bc98 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802bcce:	b007      	add	sp, #28
 802bcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802bcd4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802bcd4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802bcd8:	b90b      	cbnz	r3, 802bcde <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802bcda:	f001 b999 	b.w	802d010 <_ZN8touchgfx7Outline6lineToEii>
 802bcde:	4770      	bx	lr

0802bce0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802bce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bce4:	4b90      	ldr	r3, [pc, #576]	; (802bf28 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802bce6:	4604      	mov	r4, r0
 802bce8:	2600      	movs	r6, #0
 802bcea:	f100 0518 	add.w	r5, r0, #24
 802bcee:	e9c0 3100 	strd	r3, r1, [r0]
 802bcf2:	b086      	sub	sp, #24
 802bcf4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802bcf8:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802bcfc:	f104 0730 	add.w	r7, r4, #48	; 0x30
 802bd00:	4628      	mov	r0, r5
 802bd02:	4690      	mov	r8, r2
 802bd04:	f001 fc4e 	bl	802d5a4 <_ZN8touchgfx15RenderingBufferC1Ev>
 802bd08:	4638      	mov	r0, r7
 802bd0a:	f000 fb45 	bl	802c398 <_ZN8touchgfx7OutlineC1Ev>
 802bd0e:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802bd12:	f001 fbef 	bl	802d4f4 <_ZN8touchgfx8ScanlineC1Ev>
 802bd16:	2301      	movs	r3, #1
 802bd18:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 802bd1c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 802bd20:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 802bd24:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bd28:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802bd2c:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 802bd30:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802bd34:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 802bd38:	f001 fb8c 	bl	802d454 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802bd3c:	b928      	cbnz	r0, 802bd4a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802bd3e:	4b7b      	ldr	r3, [pc, #492]	; (802bf2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802bd40:	4a7b      	ldr	r2, [pc, #492]	; (802bf30 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802bd42:	212d      	movs	r1, #45	; 0x2d
 802bd44:	487b      	ldr	r0, [pc, #492]	; (802bf34 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802bd46:	f002 fa65 	bl	802e214 <__assert_func>
 802bd4a:	f9b8 2000 	ldrsh.w	r2, [r8]
 802bd4e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802bd52:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802bd56:	9602      	str	r6, [sp, #8]
 802bd58:	4410      	add	r0, r2
 802bd5a:	b280      	uxth	r0, r0
 802bd5c:	fa0f fa80 	sxth.w	sl, r0
 802bd60:	f1ba 0f00 	cmp.w	sl, #0
 802bd64:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802bd68:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802bd6c:	dd70      	ble.n	802be50 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802bd6e:	4591      	cmp	r9, r2
 802bd70:	dd6e      	ble.n	802be50 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802bd72:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802bd76:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802bd7a:	440b      	add	r3, r1
 802bd7c:	b29b      	uxth	r3, r3
 802bd7e:	b21e      	sxth	r6, r3
 802bd80:	2e00      	cmp	r6, #0
 802bd82:	dd65      	ble.n	802be50 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802bd84:	458e      	cmp	lr, r1
 802bd86:	dd63      	ble.n	802be50 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802bd88:	45d1      	cmp	r9, sl
 802bd8a:	bfb8      	it	lt
 802bd8c:	fa1f f089 	uxthlt.w	r0, r9
 802bd90:	45b6      	cmp	lr, r6
 802bd92:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802bd96:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802bd9a:	bfb8      	it	lt
 802bd9c:	fa1f f38e 	uxthlt.w	r3, lr
 802bda0:	1a80      	subs	r0, r0, r2
 802bda2:	1a5b      	subs	r3, r3, r1
 802bda4:	f8ad 000c 	strh.w	r0, [sp, #12]
 802bda8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bdac:	f8ad 2008 	strh.w	r2, [sp, #8]
 802bdb0:	f8ad 100a 	strh.w	r1, [sp, #10]
 802bdb4:	f10d 0808 	add.w	r8, sp, #8
 802bdb8:	e898 0003 	ldmia.w	r8, {r0, r1}
 802bdbc:	ae04      	add	r6, sp, #16
 802bdbe:	e886 0003 	stmia.w	r6, {r0, r1}
 802bdc2:	f8dc 3000 	ldr.w	r3, [ip]
 802bdc6:	4660      	mov	r0, ip
 802bdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bdca:	4631      	mov	r1, r6
 802bdcc:	4798      	blx	r3
 802bdce:	6861      	ldr	r1, [r4, #4]
 802bdd0:	4640      	mov	r0, r8
 802bdd2:	3104      	adds	r1, #4
 802bdd4:	f7f0 f98a 	bl	801c0ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802bdd8:	4630      	mov	r0, r6
 802bdda:	f7f0 f943 	bl	801c064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802bdde:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802bde2:	f001 fac7 	bl	802d374 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802bde6:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802bdea:	4638      	mov	r0, r7
 802bdec:	f000 fab0 	bl	802c350 <_ZN8touchgfx7Outline5resetEv>
 802bdf0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802bdf4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 802bdf8:	015b      	lsls	r3, r3, #5
 802bdfa:	60e3      	str	r3, [r4, #12]
 802bdfc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802be00:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802be04:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802be08:	015b      	lsls	r3, r3, #5
 802be0a:	6123      	str	r3, [r4, #16]
 802be0c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802be10:	015b      	lsls	r3, r3, #5
 802be12:	6163      	str	r3, [r4, #20]
 802be14:	4b48      	ldr	r3, [pc, #288]	; (802bf38 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802be16:	0152      	lsls	r2, r2, #5
 802be18:	6818      	ldr	r0, [r3, #0]
 802be1a:	60a2      	str	r2, [r4, #8]
 802be1c:	6803      	ldr	r3, [r0, #0]
 802be1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802be20:	4798      	blx	r3
 802be22:	4606      	mov	r6, r0
 802be24:	f7e3 fe0e 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 802be28:	6803      	ldr	r3, [r0, #0]
 802be2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802be2c:	4798      	blx	r3
 802be2e:	4607      	mov	r7, r0
 802be30:	f7e3 fe08 	bl	800fa44 <_ZN8touchgfx3HAL3lcdEv>
 802be34:	6803      	ldr	r3, [r0, #0]
 802be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802be38:	4798      	blx	r3
 802be3a:	280d      	cmp	r0, #13
 802be3c:	d855      	bhi.n	802beea <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x20a>
 802be3e:	e8df f000 	tbb	[pc, r0]
 802be42:	564c      	.short	0x564c
 802be44:	2b6f0a67 	.word	0x2b6f0a67
 802be48:	6060603b 	.word	0x6060603b
 802be4c:	6f6f6060 	.word	0x6f6f6060
 802be50:	2300      	movs	r3, #0
 802be52:	9303      	str	r3, [sp, #12]
 802be54:	e7ae      	b.n	802bdb4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 802be56:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802be5a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802be5e:	2108      	movs	r1, #8
 802be60:	fb92 f1f1 	sdiv	r1, r2, r1
 802be64:	fb07 1303 	mla	r3, r7, r3, r1
 802be68:	441e      	add	r6, r3
 802be6a:	4253      	negs	r3, r2
 802be6c:	f003 0307 	and.w	r3, r3, #7
 802be70:	f002 0207 	and.w	r2, r2, #7
 802be74:	bf58      	it	pl
 802be76:	425a      	negpl	r2, r3
 802be78:	b2d2      	uxtb	r2, r2
 802be7a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802be7e:	6721      	str	r1, [r4, #112]	; 0x70
 802be80:	e9cd 1700 	strd	r1, r7, [sp]
 802be84:	4628      	mov	r0, r5
 802be86:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802be8a:	4631      	mov	r1, r6
 802be8c:	f001 fb96 	bl	802d5bc <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802be90:	4620      	mov	r0, r4
 802be92:	b006      	add	sp, #24
 802be94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802be98:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802be9c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bea0:	2104      	movs	r1, #4
 802bea2:	fb92 f1f1 	sdiv	r1, r2, r1
 802bea6:	fb07 1303 	mla	r3, r7, r3, r1
 802beaa:	441e      	add	r6, r3
 802beac:	4253      	negs	r3, r2
 802beae:	f003 0303 	and.w	r3, r3, #3
 802beb2:	f002 0203 	and.w	r2, r2, #3
 802beb6:	e7dd      	b.n	802be74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802beb8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bebc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bec0:	2a00      	cmp	r2, #0
 802bec2:	f04f 0102 	mov.w	r1, #2
 802bec6:	fb92 f1f1 	sdiv	r1, r2, r1
 802beca:	f002 0201 	and.w	r2, r2, #1
 802bece:	fb07 1303 	mla	r3, r7, r3, r1
 802bed2:	441e      	add	r6, r3
 802bed4:	bfb8      	it	lt
 802bed6:	4252      	neglt	r2, r2
 802bed8:	e7ce      	b.n	802be78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 802beda:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bede:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bee2:	437b      	muls	r3, r7
 802bee4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802bee8:	441e      	add	r6, r3
 802beea:	2200      	movs	r2, #0
 802beec:	e7c5      	b.n	802be7a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 802beee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bef2:	fb07 f203 	mul.w	r2, r7, r3
 802bef6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802befa:	2103      	movs	r1, #3
 802befc:	fb13 2301 	smlabb	r3, r3, r1, r2
 802bf00:	e7f2      	b.n	802bee8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bf02:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bf06:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bf0a:	fb07 2303 	mla	r3, r7, r3, r2
 802bf0e:	e7eb      	b.n	802bee8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bf10:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bf14:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bf18:	437b      	muls	r3, r7
 802bf1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802bf1e:	e7e3      	b.n	802bee8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bf20:	4b06      	ldr	r3, [pc, #24]	; (802bf3c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 802bf22:	4a03      	ldr	r2, [pc, #12]	; (802bf30 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802bf24:	216c      	movs	r1, #108	; 0x6c
 802bf26:	e70d      	b.n	802bd44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 802bf28:	08033a20 	.word	0x08033a20
 802bf2c:	08033969 	.word	0x08033969
 802bf30:	08033a28 	.word	0x08033a28
 802bf34:	080339c5 	.word	0x080339c5
 802bf38:	20009820 	.word	0x20009820
 802bf3c:	080339f9 	.word	0x080339f9

0802bf40 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802bf40:	6812      	ldr	r2, [r2, #0]
 802bf42:	2a00      	cmp	r2, #0
 802bf44:	db0b      	blt.n	802bf5e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802bf46:	9800      	ldr	r0, [sp, #0]
 802bf48:	6800      	ldr	r0, [r0, #0]
 802bf4a:	4290      	cmp	r0, r2
 802bf4c:	bfd4      	ite	le
 802bf4e:	2002      	movle	r0, #2
 802bf50:	2000      	movgt	r0, #0
 802bf52:	680a      	ldr	r2, [r1, #0]
 802bf54:	2a00      	cmp	r2, #0
 802bf56:	da04      	bge.n	802bf62 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 802bf58:	f040 0004 	orr.w	r0, r0, #4
 802bf5c:	4770      	bx	lr
 802bf5e:	2001      	movs	r0, #1
 802bf60:	e7f7      	b.n	802bf52 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802bf62:	681b      	ldr	r3, [r3, #0]
 802bf64:	4293      	cmp	r3, r2
 802bf66:	bfd8      	it	le
 802bf68:	f040 0008 	orrle.w	r0, r0, #8
 802bf6c:	4770      	bx	lr
	...

0802bf70 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802bf70:	b510      	push	{r4, lr}
 802bf72:	4b07      	ldr	r3, [pc, #28]	; (802bf90 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802bf74:	781b      	ldrb	r3, [r3, #0]
 802bf76:	2b01      	cmp	r3, #1
 802bf78:	d108      	bne.n	802bf8c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802bf7a:	6843      	ldr	r3, [r0, #4]
 802bf7c:	6814      	ldr	r4, [r2, #0]
 802bf7e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802bf82:	680b      	ldr	r3, [r1, #0]
 802bf84:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802bf88:	6013      	str	r3, [r2, #0]
 802bf8a:	600c      	str	r4, [r1, #0]
 802bf8c:	bd10      	pop	{r4, pc}
 802bf8e:	bf00      	nop
 802bf90:	20009818 	.word	0x20009818

0802bf94 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bf96:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bf9a:	b085      	sub	sp, #20
 802bf9c:	4604      	mov	r4, r0
 802bf9e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802bfa2:	b33b      	cbz	r3, 802bff4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 802bfa4:	aa02      	add	r2, sp, #8
 802bfa6:	a903      	add	r1, sp, #12
 802bfa8:	f7ff ffe2 	bl	802bf70 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802bfac:	68a3      	ldr	r3, [r4, #8]
 802bfae:	9e03      	ldr	r6, [sp, #12]
 802bfb0:	9f02      	ldr	r7, [sp, #8]
 802bfb2:	1af6      	subs	r6, r6, r3
 802bfb4:	68e3      	ldr	r3, [r4, #12]
 802bfb6:	9603      	str	r6, [sp, #12]
 802bfb8:	1aff      	subs	r7, r7, r3
 802bfba:	f104 0314 	add.w	r3, r4, #20
 802bfbe:	9300      	str	r3, [sp, #0]
 802bfc0:	aa02      	add	r2, sp, #8
 802bfc2:	f104 0310 	add.w	r3, r4, #16
 802bfc6:	a903      	add	r1, sp, #12
 802bfc8:	4620      	mov	r0, r4
 802bfca:	9702      	str	r7, [sp, #8]
 802bfcc:	f7ff ffb8 	bl	802bf40 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802bfd0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802bfd4:	4605      	mov	r5, r0
 802bfd6:	b97b      	cbnz	r3, 802bff8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802bfd8:	463a      	mov	r2, r7
 802bfda:	4631      	mov	r1, r6
 802bfdc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bfe0:	f7ff fe78 	bl	802bcd4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bfe4:	9b03      	ldr	r3, [sp, #12]
 802bfe6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802bfea:	9b02      	ldr	r3, [sp, #8]
 802bfec:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 802bff0:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802bff4:	b005      	add	sp, #20
 802bff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bff8:	b110      	cbz	r0, 802c000 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802bffa:	ea13 0200 	ands.w	r2, r3, r0
 802bffe:	d11c      	bne.n	802c03a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802c000:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 802c004:	f104 0630 	add.w	r6, r4, #48	; 0x30
 802c008:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802c00c:	b188      	cbz	r0, 802c032 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802c00e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802c012:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802c016:	b913      	cbnz	r3, 802c01e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802c018:	4630      	mov	r0, r6
 802c01a:	f001 f829 	bl	802d070 <_ZN8touchgfx7Outline6moveToEii>
 802c01e:	2300      	movs	r3, #0
 802c020:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802c024:	2301      	movs	r3, #1
 802c026:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802c02a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802c02e:	4630      	mov	r0, r6
 802c030:	e7d6      	b.n	802bfe0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802c032:	4630      	mov	r0, r6
 802c034:	f7ff fe4e 	bl	802bcd4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c038:	e7f7      	b.n	802c02a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802c03a:	4615      	mov	r5, r2
 802c03c:	e7d2      	b.n	802bfe4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802c03e <_ZN8touchgfx6Canvas5closeEv>:
 802c03e:	b538      	push	{r3, r4, r5, lr}
 802c040:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802c044:	4604      	mov	r4, r0
 802c046:	b993      	cbnz	r3, 802c06e <_ZN8touchgfx6Canvas5closeEv+0x30>
 802c048:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802c04c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802c050:	4213      	tst	r3, r2
 802c052:	d10c      	bne.n	802c06e <_ZN8touchgfx6Canvas5closeEv+0x30>
 802c054:	f100 0530 	add.w	r5, r0, #48	; 0x30
 802c058:	b123      	cbz	r3, 802c064 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802c05a:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802c05e:	4628      	mov	r0, r5
 802c060:	f7ff fe38 	bl	802bcd4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c064:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802c068:	4628      	mov	r0, r5
 802c06a:	f7ff fe33 	bl	802bcd4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c06e:	2300      	movs	r3, #0
 802c070:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802c074:	bd38      	pop	{r3, r4, r5, pc}

0802c076 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802c076:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c078:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802c07c:	b085      	sub	sp, #20
 802c07e:	4604      	mov	r4, r0
 802c080:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802c084:	b353      	cbz	r3, 802c0dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802c086:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802c08a:	b90b      	cbnz	r3, 802c090 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802c08c:	f7ff ffd7 	bl	802c03e <_ZN8touchgfx6Canvas5closeEv>
 802c090:	aa02      	add	r2, sp, #8
 802c092:	a903      	add	r1, sp, #12
 802c094:	4620      	mov	r0, r4
 802c096:	f7ff ff6b 	bl	802bf70 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802c09a:	68a3      	ldr	r3, [r4, #8]
 802c09c:	9d03      	ldr	r5, [sp, #12]
 802c09e:	9e02      	ldr	r6, [sp, #8]
 802c0a0:	1aed      	subs	r5, r5, r3
 802c0a2:	68e3      	ldr	r3, [r4, #12]
 802c0a4:	9503      	str	r5, [sp, #12]
 802c0a6:	1af6      	subs	r6, r6, r3
 802c0a8:	f104 0314 	add.w	r3, r4, #20
 802c0ac:	9300      	str	r3, [sp, #0]
 802c0ae:	aa02      	add	r2, sp, #8
 802c0b0:	f104 0310 	add.w	r3, r4, #16
 802c0b4:	a903      	add	r1, sp, #12
 802c0b6:	4620      	mov	r0, r4
 802c0b8:	9602      	str	r6, [sp, #8]
 802c0ba:	f7ff ff41 	bl	802bf40 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802c0be:	4607      	mov	r7, r0
 802c0c0:	b170      	cbz	r0, 802c0e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802c0c2:	2301      	movs	r3, #1
 802c0c4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802c0c8:	9a03      	ldr	r2, [sp, #12]
 802c0ca:	9b02      	ldr	r3, [sp, #8]
 802c0cc:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802c0d0:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802c0d4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 802c0d8:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 802c0dc:	b005      	add	sp, #20
 802c0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c0e0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802c0e4:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 802c0e8:	b92b      	cbnz	r3, 802c0f6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802c0ea:	4632      	mov	r2, r6
 802c0ec:	4629      	mov	r1, r5
 802c0ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802c0f2:	f000 ffbd 	bl	802d070 <_ZN8touchgfx7Outline6moveToEii>
 802c0f6:	2300      	movs	r3, #0
 802c0f8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802c0fc:	2301      	movs	r3, #1
 802c0fe:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802c102:	e7e1      	b.n	802c0c8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802c104 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802c104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c108:	b087      	sub	sp, #28
 802c10a:	4604      	mov	r4, r0
 802c10c:	9105      	str	r1, [sp, #20]
 802c10e:	f001 f8f6 	bl	802d2fe <_ZN8touchgfx7Outline8getCellsEv>
 802c112:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802c116:	4605      	mov	r5, r0
 802c118:	f1b9 0f00 	cmp.w	r9, #0
 802c11c:	d103      	bne.n	802c126 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802c11e:	2001      	movs	r0, #1
 802c120:	b007      	add	sp, #28
 802c122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c126:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802c12a:	2e00      	cmp	r6, #0
 802c12c:	d139      	bne.n	802c1a2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802c12e:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802c132:	4640      	mov	r0, r8
 802c134:	f001 f9c8 	bl	802d4c8 <_ZN8touchgfx8Scanline5resetEv>
 802c138:	f109 33ff 	add.w	r3, r9, #4294967295
 802c13c:	f105 0708 	add.w	r7, r5, #8
 802c140:	9303      	str	r3, [sp, #12]
 802c142:	f9b5 b000 	ldrsh.w	fp, [r5]
 802c146:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802c14a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802c14e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802c152:	46da      	mov	sl, fp
 802c154:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802c158:	9b03      	ldr	r3, [sp, #12]
 802c15a:	9504      	str	r5, [sp, #16]
 802c15c:	3b01      	subs	r3, #1
 802c15e:	9303      	str	r3, [sp, #12]
 802c160:	3301      	adds	r3, #1
 802c162:	4416      	add	r6, r2
 802c164:	463d      	mov	r5, r7
 802c166:	d01e      	beq.n	802c1a6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802c168:	3708      	adds	r7, #8
 802c16a:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802c16e:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802c172:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802c176:	4290      	cmp	r0, r2
 802c178:	d11e      	bne.n	802c1b8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802c17a:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802c17e:	4411      	add	r1, r2
 802c180:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802c184:	e7e8      	b.n	802c158 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802c186:	1c91      	adds	r1, r2, #2
 802c188:	f04f 0301 	mov.w	r3, #1
 802c18c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802c18e:	8053      	strh	r3, [r2, #2]
 802c190:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802c192:	1c91      	adds	r1, r2, #2
 802c194:	65a1      	str	r1, [r4, #88]	; 0x58
 802c196:	f8a2 b002 	strh.w	fp, [r2, #2]
 802c19a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802c19c:	3201      	adds	r2, #1
 802c19e:	6562      	str	r2, [r4, #84]	; 0x54
 802c1a0:	e03a      	b.n	802c218 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802c1a2:	2000      	movs	r0, #0
 802c1a4:	e7bc      	b.n	802c120 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802c1a6:	b951      	cbnz	r1, 802c1be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802c1a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802c1aa:	2b00      	cmp	r3, #0
 802c1ac:	d0b7      	beq.n	802c11e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802c1ae:	4641      	mov	r1, r8
 802c1b0:	9805      	ldr	r0, [sp, #20]
 802c1b2:	f7ff fd59 	bl	802bc68 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802c1b6:	e7b2      	b.n	802c11e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802c1b8:	2900      	cmp	r1, #0
 802c1ba:	d035      	beq.n	802c228 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802c1bc:	9504      	str	r5, [sp, #16]
 802c1be:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802c1c2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802c1c6:	f7ff fd3b 	bl	802bc40 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802c1ca:	4605      	mov	r5, r0
 802c1cc:	b330      	cbz	r0, 802c21c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802c1ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802c1d0:	b182      	cbz	r2, 802c1f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802c1d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802c1d4:	4591      	cmp	r9, r2
 802c1d6:	d00d      	beq.n	802c1f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802c1d8:	4641      	mov	r1, r8
 802c1da:	9805      	ldr	r0, [sp, #20]
 802c1dc:	f7ff fd44 	bl	802bc68 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802c1e0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802c1e4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802c1e6:	65e2      	str	r2, [r4, #92]	; 0x5c
 802c1e8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802c1ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802c1ee:	65a2      	str	r2, [r4, #88]	; 0x58
 802c1f0:	2300      	movs	r3, #0
 802c1f2:	6563      	str	r3, [r4, #84]	; 0x54
 802c1f4:	f1bb 0f00 	cmp.w	fp, #0
 802c1f8:	db10      	blt.n	802c21c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802c1fa:	f001 f939 	bl	802d470 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802c1fe:	4583      	cmp	fp, r0
 802c200:	da0c      	bge.n	802c21c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802c202:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802c204:	f802 500b 	strb.w	r5, [r2, fp]
 802c208:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802c20a:	3201      	adds	r2, #1
 802c20c:	4593      	cmp	fp, r2
 802c20e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c210:	d1b9      	bne.n	802c186 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802c212:	8811      	ldrh	r1, [r2, #0]
 802c214:	3101      	adds	r1, #1
 802c216:	8011      	strh	r1, [r2, #0]
 802c218:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802c21c:	9b03      	ldr	r3, [sp, #12]
 802c21e:	3301      	adds	r3, #1
 802c220:	d0c2      	beq.n	802c1a8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802c222:	9d04      	ldr	r5, [sp, #16]
 802c224:	f10b 0a01 	add.w	sl, fp, #1
 802c228:	f9b5 3000 	ldrsh.w	r3, [r5]
 802c22c:	4553      	cmp	r3, sl
 802c22e:	dd88      	ble.n	802c142 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802c230:	01b1      	lsls	r1, r6, #6
 802c232:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802c236:	f7ff fd03 	bl	802bc40 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802c23a:	4683      	mov	fp, r0
 802c23c:	2800      	cmp	r0, #0
 802c23e:	d080      	beq.n	802c142 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802c240:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802c242:	b183      	cbz	r3, 802c266 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802c244:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802c246:	4599      	cmp	r9, r3
 802c248:	d00d      	beq.n	802c266 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802c24a:	4641      	mov	r1, r8
 802c24c:	9805      	ldr	r0, [sp, #20]
 802c24e:	f7ff fd0b 	bl	802bc68 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802c252:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802c256:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802c25a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802c25c:	65e3      	str	r3, [r4, #92]	; 0x5c
 802c25e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c260:	65a3      	str	r3, [r4, #88]	; 0x58
 802c262:	2300      	movs	r3, #0
 802c264:	6563      	str	r3, [r4, #84]	; 0x54
 802c266:	f9b5 3000 	ldrsh.w	r3, [r5]
 802c26a:	f8cd b000 	str.w	fp, [sp]
 802c26e:	eba3 030a 	sub.w	r3, r3, sl
 802c272:	464a      	mov	r2, r9
 802c274:	4651      	mov	r1, sl
 802c276:	4640      	mov	r0, r8
 802c278:	f001 f952 	bl	802d520 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802c27c:	e761      	b.n	802c142 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802c27e <_ZN8touchgfx6Canvas6renderEh>:
 802c27e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c280:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802c284:	4604      	mov	r4, r0
 802c286:	460d      	mov	r5, r1
 802c288:	b913      	cbnz	r3, 802c290 <_ZN8touchgfx6Canvas6renderEh+0x12>
 802c28a:	2001      	movs	r0, #1
 802c28c:	b003      	add	sp, #12
 802c28e:	bd30      	pop	{r4, r5, pc}
 802c290:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802c294:	2b00      	cmp	r3, #0
 802c296:	d12f      	bne.n	802c2f8 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 802c298:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802c29c:	2b00      	cmp	r3, #0
 802c29e:	d0f4      	beq.n	802c28a <_ZN8touchgfx6Canvas6renderEh+0xc>
 802c2a0:	6840      	ldr	r0, [r0, #4]
 802c2a2:	6803      	ldr	r3, [r0, #0]
 802c2a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802c2a6:	4798      	blx	r3
 802c2a8:	fb10 f105 	smulbb	r1, r0, r5
 802c2ac:	b288      	uxth	r0, r1
 802c2ae:	1c41      	adds	r1, r0, #1
 802c2b0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802c2b4:	120d      	asrs	r5, r1, #8
 802c2b6:	d0e8      	beq.n	802c28a <_ZN8touchgfx6Canvas6renderEh+0xc>
 802c2b8:	4620      	mov	r0, r4
 802c2ba:	f7ff fec0 	bl	802c03e <_ZN8touchgfx6Canvas5closeEv>
 802c2be:	6860      	ldr	r0, [r4, #4]
 802c2c0:	6803      	ldr	r3, [r0, #0]
 802c2c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c2c4:	4798      	blx	r3
 802c2c6:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802c2ca:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802c2ce:	80c3      	strh	r3, [r0, #6]
 802c2d0:	8082      	strh	r2, [r0, #4]
 802c2d2:	6860      	ldr	r0, [r4, #4]
 802c2d4:	6803      	ldr	r3, [r0, #0]
 802c2d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c2d8:	4798      	blx	r3
 802c2da:	7205      	strb	r5, [r0, #8]
 802c2dc:	6860      	ldr	r0, [r4, #4]
 802c2de:	6803      	ldr	r3, [r0, #0]
 802c2e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c2e2:	4798      	blx	r3
 802c2e4:	f104 0318 	add.w	r3, r4, #24
 802c2e8:	e9cd 3000 	strd	r3, r0, [sp]
 802c2ec:	4669      	mov	r1, sp
 802c2ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802c2f2:	f7ff ff07 	bl	802c104 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802c2f6:	e7c9      	b.n	802c28c <_ZN8touchgfx6Canvas6renderEh+0xe>
 802c2f8:	2000      	movs	r0, #0
 802c2fa:	e7c7      	b.n	802c28c <_ZN8touchgfx6Canvas6renderEh+0xe>

0802c2fc <_ZN8touchgfx6CanvasD1Ev>:
 802c2fc:	b538      	push	{r3, r4, r5, lr}
 802c2fe:	4605      	mov	r5, r0
 802c300:	4b08      	ldr	r3, [pc, #32]	; (802c324 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802c302:	f845 3b30 	str.w	r3, [r5], #48
 802c306:	4b08      	ldr	r3, [pc, #32]	; (802c328 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802c308:	4604      	mov	r4, r0
 802c30a:	6818      	ldr	r0, [r3, #0]
 802c30c:	6803      	ldr	r3, [r0, #0]
 802c30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c310:	4798      	blx	r3
 802c312:	4628      	mov	r0, r5
 802c314:	f000 f814 	bl	802c340 <_ZN8touchgfx7OutlineD1Ev>
 802c318:	f104 0018 	add.w	r0, r4, #24
 802c31c:	f001 f939 	bl	802d592 <_ZN8touchgfx15RenderingBufferD1Ev>
 802c320:	4620      	mov	r0, r4
 802c322:	bd38      	pop	{r3, r4, r5, pc}
 802c324:	08033a20 	.word	0x08033a20
 802c328:	20009820 	.word	0x20009820

0802c32c <_ZN8touchgfx6CanvasD0Ev>:
 802c32c:	b510      	push	{r4, lr}
 802c32e:	4604      	mov	r4, r0
 802c330:	f7ff ffe4 	bl	802c2fc <_ZN8touchgfx6CanvasD1Ev>
 802c334:	4620      	mov	r0, r4
 802c336:	21bc      	movs	r1, #188	; 0xbc
 802c338:	f001 f94d 	bl	802d5d6 <_ZdlPvj>
 802c33c:	4620      	mov	r0, r4
 802c33e:	bd10      	pop	{r4, pc}

0802c340 <_ZN8touchgfx7OutlineD1Ev>:
 802c340:	4770      	bx	lr

0802c342 <_ZN8touchgfx7OutlineD0Ev>:
 802c342:	b510      	push	{r4, lr}
 802c344:	2148      	movs	r1, #72	; 0x48
 802c346:	4604      	mov	r4, r0
 802c348:	f001 f945 	bl	802d5d6 <_ZdlPvj>
 802c34c:	4620      	mov	r0, r4
 802c34e:	bd10      	pop	{r4, pc}

0802c350 <_ZN8touchgfx7Outline5resetEv>:
 802c350:	b510      	push	{r4, lr}
 802c352:	4604      	mov	r4, r0
 802c354:	f001 f8a4 	bl	802d4a0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802c358:	60e0      	str	r0, [r4, #12]
 802c35a:	f001 f8a7 	bl	802d4ac <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802c35e:	68e3      	ldr	r3, [r4, #12]
 802c360:	6123      	str	r3, [r4, #16]
 802c362:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802c366:	82a3      	strh	r3, [r4, #20]
 802c368:	82e3      	strh	r3, [r4, #22]
 802c36a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c36c:	f023 0301 	bic.w	r3, r3, #1
 802c370:	f043 0302 	orr.w	r3, r3, #2
 802c374:	63e3      	str	r3, [r4, #60]	; 0x3c
 802c376:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802c37a:	2200      	movs	r2, #0
 802c37c:	08c0      	lsrs	r0, r0, #3
 802c37e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802c382:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802c386:	6060      	str	r0, [r4, #4]
 802c388:	60a2      	str	r2, [r4, #8]
 802c38a:	8322      	strh	r2, [r4, #24]
 802c38c:	8362      	strh	r2, [r4, #26]
 802c38e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802c392:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c396:	bd10      	pop	{r4, pc}

0802c398 <_ZN8touchgfx7OutlineC1Ev>:
 802c398:	b510      	push	{r4, lr}
 802c39a:	4b0f      	ldr	r3, [pc, #60]	; (802c3d8 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802c39c:	6003      	str	r3, [r0, #0]
 802c39e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802c3a2:	2300      	movs	r3, #0
 802c3a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802c3a8:	4604      	mov	r4, r0
 802c3aa:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802c3ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c3b2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802c3b6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802c3ba:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802c3be:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802c3c2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802c3c6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802c3ca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802c3ce:	f7ff ffbf 	bl	802c350 <_ZN8touchgfx7Outline5resetEv>
 802c3d2:	4620      	mov	r0, r4
 802c3d4:	bd10      	pop	{r4, pc}
 802c3d6:	bf00      	nop
 802c3d8:	08033af0 	.word	0x08033af0

0802c3dc <_ZN8touchgfx7Outline10renderLineEiiii>:
 802c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c3e0:	b095      	sub	sp, #84	; 0x54
 802c3e2:	4604      	mov	r4, r0
 802c3e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 802c3e6:	9304      	str	r3, [sp, #16]
 802c3e8:	1153      	asrs	r3, r2, #5
 802c3ea:	9300      	str	r3, [sp, #0]
 802c3ec:	1143      	asrs	r3, r0, #5
 802c3ee:	930c      	str	r3, [sp, #48]	; 0x30
 802c3f0:	f000 031f 	and.w	r3, r0, #31
 802c3f4:	9303      	str	r3, [sp, #12]
 802c3f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802c3f8:	1155      	asrs	r5, r2, #5
 802c3fa:	42ab      	cmp	r3, r5
 802c3fc:	bfc4      	itt	gt
 802c3fe:	462b      	movgt	r3, r5
 802c400:	6323      	strgt	r3, [r4, #48]	; 0x30
 802c402:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c404:	1155      	asrs	r5, r2, #5
 802c406:	42ab      	cmp	r3, r5
 802c408:	bfde      	ittt	le
 802c40a:	462b      	movle	r3, r5
 802c40c:	3301      	addle	r3, #1
 802c40e:	63a3      	strle	r3, [r4, #56]	; 0x38
 802c410:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802c412:	1145      	asrs	r5, r0, #5
 802c414:	42ab      	cmp	r3, r5
 802c416:	bfc4      	itt	gt
 802c418:	462b      	movgt	r3, r5
 802c41a:	6323      	strgt	r3, [r4, #48]	; 0x30
 802c41c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c41e:	1145      	asrs	r5, r0, #5
 802c420:	42ab      	cmp	r3, r5
 802c422:	bfde      	ittt	le
 802c424:	462b      	movle	r3, r5
 802c426:	3301      	addle	r3, #1
 802c428:	63a3      	strle	r3, [r4, #56]	; 0x38
 802c42a:	9b04      	ldr	r3, [sp, #16]
 802c42c:	1157      	asrs	r7, r2, #5
 802c42e:	eba3 0a01 	sub.w	sl, r3, r1
 802c432:	1143      	asrs	r3, r0, #5
 802c434:	429f      	cmp	r7, r3
 802c436:	f002 061f 	and.w	r6, r2, #31
 802c43a:	ea4f 1561 	mov.w	r5, r1, asr #5
 802c43e:	f040 8122 	bne.w	802c686 <_ZN8touchgfx7Outline10renderLineEiiii+0x2aa>
 802c442:	9b04      	ldr	r3, [sp, #16]
 802c444:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802c448:	9b03      	ldr	r3, [sp, #12]
 802c44a:	429e      	cmp	r6, r3
 802c44c:	d131      	bne.n	802c4b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xd6>
 802c44e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802c452:	f9bd 2000 	ldrsh.w	r2, [sp]
 802c456:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c45a:	fa0f fb8b 	sxth.w	fp, fp
 802c45e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c462:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802c466:	4281      	cmp	r1, r0
 802c468:	f000 80eb 	beq.w	802c642 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c46c:	8b60      	ldrh	r0, [r4, #26]
 802c46e:	8b21      	ldrh	r1, [r4, #24]
 802c470:	4301      	orrs	r1, r0
 802c472:	d00b      	beq.n	802c48c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c474:	2b00      	cmp	r3, #0
 802c476:	db09      	blt.n	802c48c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c478:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c47a:	428b      	cmp	r3, r1
 802c47c:	da06      	bge.n	802c48c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c47e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c482:	4299      	cmp	r1, r3
 802c484:	d308      	bcc.n	802c498 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc>
 802c486:	2301      	movs	r3, #1
 802c488:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c48c:	f8a4 b014 	strh.w	fp, [r4, #20]
 802c490:	2300      	movs	r3, #0
 802c492:	82e2      	strh	r2, [r4, #22]
 802c494:	8323      	strh	r3, [r4, #24]
 802c496:	e01f      	b.n	802c4d8 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802c498:	f104 0314 	add.w	r3, r4, #20
 802c49c:	cb03      	ldmia	r3!, {r0, r1}
 802c49e:	6925      	ldr	r5, [r4, #16]
 802c4a0:	6028      	str	r0, [r5, #0]
 802c4a2:	6069      	str	r1, [r5, #4]
 802c4a4:	6923      	ldr	r3, [r4, #16]
 802c4a6:	3308      	adds	r3, #8
 802c4a8:	6123      	str	r3, [r4, #16]
 802c4aa:	68a3      	ldr	r3, [r4, #8]
 802c4ac:	3301      	adds	r3, #1
 802c4ae:	60a3      	str	r3, [r4, #8]
 802c4b0:	e7ec      	b.n	802c48c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c4b2:	9b04      	ldr	r3, [sp, #16]
 802c4b4:	8b20      	ldrh	r0, [r4, #24]
 802c4b6:	8b62      	ldrh	r2, [r4, #26]
 802c4b8:	f003 031f 	and.w	r3, r3, #31
 802c4bc:	9305      	str	r3, [sp, #20]
 802c4be:	9b03      	ldr	r3, [sp, #12]
 802c4c0:	45ab      	cmp	fp, r5
 802c4c2:	f001 011f 	and.w	r1, r1, #31
 802c4c6:	eba3 0306 	sub.w	r3, r3, r6
 802c4ca:	d107      	bne.n	802c4dc <_ZN8touchgfx7Outline10renderLineEiiii+0x100>
 802c4cc:	4418      	add	r0, r3
 802c4ce:	8320      	strh	r0, [r4, #24]
 802c4d0:	9805      	ldr	r0, [sp, #20]
 802c4d2:	4401      	add	r1, r0
 802c4d4:	fb03 2301 	mla	r3, r3, r1, r2
 802c4d8:	8363      	strh	r3, [r4, #26]
 802c4da:	e0b2      	b.n	802c642 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c4dc:	f1ba 0f00 	cmp.w	sl, #0
 802c4e0:	db35      	blt.n	802c54e <_ZN8touchgfx7Outline10renderLineEiiii+0x172>
 802c4e2:	2701      	movs	r7, #1
 802c4e4:	f1c1 0c20 	rsb	ip, r1, #32
 802c4e8:	9702      	str	r7, [sp, #8]
 802c4ea:	fb03 f30c 	mul.w	r3, r3, ip
 802c4ee:	2720      	movs	r7, #32
 802c4f0:	9701      	str	r7, [sp, #4]
 802c4f2:	fb93 fcfa 	sdiv	ip, r3, sl
 802c4f6:	9f01      	ldr	r7, [sp, #4]
 802c4f8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802c4fc:	fb0a 331c 	mls	r3, sl, ip, r3
 802c500:	2b00      	cmp	r3, #0
 802c502:	bfb8      	it	lt
 802c504:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802c508:	4439      	add	r1, r7
 802c50a:	fb0c 2101 	mla	r1, ip, r1, r2
 802c50e:	9a02      	ldr	r2, [sp, #8]
 802c510:	4415      	add	r5, r2
 802c512:	f9bd 2000 	ldrsh.w	r2, [sp]
 802c516:	9200      	str	r2, [sp, #0]
 802c518:	ea4f 4702 	mov.w	r7, r2, lsl #16
 802c51c:	9704      	str	r7, [sp, #16]
 802c51e:	9a04      	ldr	r2, [sp, #16]
 802c520:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 802c524:	fa0f fe85 	sxth.w	lr, r5
 802c528:	4460      	add	r0, ip
 802c52a:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802c52e:	eb0e 0902 	add.w	r9, lr, r2
 802c532:	bfb8      	it	lt
 802c534:	4453      	addlt	r3, sl
 802c536:	b200      	sxth	r0, r0
 802c538:	b209      	sxth	r1, r1
 802c53a:	454f      	cmp	r7, r9
 802c53c:	8320      	strh	r0, [r4, #24]
 802c53e:	8361      	strh	r1, [r4, #26]
 802c540:	d10d      	bne.n	802c55e <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 802c542:	4ba1      	ldr	r3, [pc, #644]	; (802c7c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ec>)
 802c544:	4aa1      	ldr	r2, [pc, #644]	; (802c7cc <_ZN8touchgfx7Outline10renderLineEiiii+0x3f0>)
 802c546:	48a2      	ldr	r0, [pc, #648]	; (802c7d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802c548:	2177      	movs	r1, #119	; 0x77
 802c54a:	f001 fe63 	bl	802e214 <__assert_func>
 802c54e:	f04f 37ff 	mov.w	r7, #4294967295
 802c552:	9702      	str	r7, [sp, #8]
 802c554:	434b      	muls	r3, r1
 802c556:	f1ca 0a00 	rsb	sl, sl, #0
 802c55a:	2700      	movs	r7, #0
 802c55c:	e7c8      	b.n	802c4f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x114>
 802c55e:	ea50 0201 	orrs.w	r2, r0, r1
 802c562:	d00c      	beq.n	802c57e <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c564:	f1b8 0f00 	cmp.w	r8, #0
 802c568:	db09      	blt.n	802c57e <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c56a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c56c:	4588      	cmp	r8, r1
 802c56e:	da06      	bge.n	802c57e <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c570:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c574:	4288      	cmp	r0, r1
 802c576:	d367      	bcc.n	802c648 <_ZN8touchgfx7Outline10renderLineEiiii+0x26c>
 802c578:	2101      	movs	r1, #1
 802c57a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c57e:	2100      	movs	r1, #0
 802c580:	9a00      	ldr	r2, [sp, #0]
 802c582:	f8a4 e014 	strh.w	lr, [r4, #20]
 802c586:	45ab      	cmp	fp, r5
 802c588:	82e2      	strh	r2, [r4, #22]
 802c58a:	8321      	strh	r1, [r4, #24]
 802c58c:	8361      	strh	r1, [r4, #26]
 802c58e:	4466      	add	r6, ip
 802c590:	d04e      	beq.n	802c630 <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 802c592:	9a03      	ldr	r2, [sp, #12]
 802c594:	1b91      	subs	r1, r2, r6
 802c596:	448c      	add	ip, r1
 802c598:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802c59c:	fb9c f7fa 	sdiv	r7, ip, sl
 802c5a0:	fb0a cc17 	mls	ip, sl, r7, ip
 802c5a4:	f1bc 0f00 	cmp.w	ip, #0
 802c5a8:	bfb8      	it	lt
 802c5aa:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802c5ae:	f107 0201 	add.w	r2, r7, #1
 802c5b2:	bfb8      	it	lt
 802c5b4:	44d4      	addlt	ip, sl
 802c5b6:	eba3 030a 	sub.w	r3, r3, sl
 802c5ba:	9207      	str	r2, [sp, #28]
 802c5bc:	f04f 0800 	mov.w	r8, #0
 802c5c0:	eb13 030c 	adds.w	r3, r3, ip
 802c5c4:	bf58      	it	pl
 802c5c6:	9807      	ldrpl	r0, [sp, #28]
 802c5c8:	9a02      	ldr	r2, [sp, #8]
 802c5ca:	bf48      	it	mi
 802c5cc:	4638      	movmi	r0, r7
 802c5ce:	fa0f fe80 	sxth.w	lr, r0
 802c5d2:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802c5d6:	4415      	add	r5, r2
 802c5d8:	4406      	add	r6, r0
 802c5da:	9a04      	ldr	r2, [sp, #16]
 802c5dc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c5e0:	f8a4 e018 	strh.w	lr, [r4, #24]
 802c5e4:	fa0f f985 	sxth.w	r9, r5
 802c5e8:	4410      	add	r0, r2
 802c5ea:	444a      	add	r2, r9
 802c5ec:	bf58      	it	pl
 802c5ee:	eba3 030a 	subpl.w	r3, r3, sl
 802c5f2:	b209      	sxth	r1, r1
 802c5f4:	4290      	cmp	r0, r2
 802c5f6:	8361      	strh	r1, [r4, #26]
 802c5f8:	d0a3      	beq.n	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c5fa:	ea5e 0201 	orrs.w	r2, lr, r1
 802c5fe:	d00d      	beq.n	802c61c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c600:	9a00      	ldr	r2, [sp, #0]
 802c602:	2a00      	cmp	r2, #0
 802c604:	db0a      	blt.n	802c61c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c606:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c608:	428a      	cmp	r2, r1
 802c60a:	da07      	bge.n	802c61c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c60c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c610:	4288      	cmp	r0, r1
 802c612:	d329      	bcc.n	802c668 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 802c614:	f04f 0201 	mov.w	r2, #1
 802c618:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c61c:	9a00      	ldr	r2, [sp, #0]
 802c61e:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c622:	45ab      	cmp	fp, r5
 802c624:	82e2      	strh	r2, [r4, #22]
 802c626:	f8a4 8018 	strh.w	r8, [r4, #24]
 802c62a:	f8a4 801a 	strh.w	r8, [r4, #26]
 802c62e:	d1c7      	bne.n	802c5c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 802c630:	9b03      	ldr	r3, [sp, #12]
 802c632:	9a01      	ldr	r2, [sp, #4]
 802c634:	1b9e      	subs	r6, r3, r6
 802c636:	9b05      	ldr	r3, [sp, #20]
 802c638:	8326      	strh	r6, [r4, #24]
 802c63a:	3320      	adds	r3, #32
 802c63c:	1a9b      	subs	r3, r3, r2
 802c63e:	435e      	muls	r6, r3
 802c640:	8366      	strh	r6, [r4, #26]
 802c642:	b015      	add	sp, #84	; 0x54
 802c644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c648:	f104 0714 	add.w	r7, r4, #20
 802c64c:	cf03      	ldmia	r7!, {r0, r1}
 802c64e:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802c652:	f8c8 0000 	str.w	r0, [r8]
 802c656:	f8c8 1004 	str.w	r1, [r8, #4]
 802c65a:	6921      	ldr	r1, [r4, #16]
 802c65c:	3108      	adds	r1, #8
 802c65e:	6121      	str	r1, [r4, #16]
 802c660:	68a1      	ldr	r1, [r4, #8]
 802c662:	3101      	adds	r1, #1
 802c664:	60a1      	str	r1, [r4, #8]
 802c666:	e78a      	b.n	802c57e <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c668:	f104 0e14 	add.w	lr, r4, #20
 802c66c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c670:	6922      	ldr	r2, [r4, #16]
 802c672:	9206      	str	r2, [sp, #24]
 802c674:	6010      	str	r0, [r2, #0]
 802c676:	6051      	str	r1, [r2, #4]
 802c678:	6921      	ldr	r1, [r4, #16]
 802c67a:	3108      	adds	r1, #8
 802c67c:	6121      	str	r1, [r4, #16]
 802c67e:	68a1      	ldr	r1, [r4, #8]
 802c680:	3101      	adds	r1, #1
 802c682:	60a1      	str	r1, [r4, #8]
 802c684:	e7ca      	b.n	802c61c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c686:	eba0 0b02 	sub.w	fp, r0, r2
 802c68a:	f1ba 0f00 	cmp.w	sl, #0
 802c68e:	f040 80a1 	bne.w	802c7d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>
 802c692:	f1bb 0f00 	cmp.w	fp, #0
 802c696:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802c69a:	8b62      	ldrh	r2, [r4, #26]
 802c69c:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802c6a0:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802c6a4:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802c6a8:	bfa8      	it	ge
 802c6aa:	f04f 0a20 	movge.w	sl, #32
 802c6ae:	8b21      	ldrh	r1, [r4, #24]
 802c6b0:	ebaa 0606 	sub.w	r6, sl, r6
 802c6b4:	4431      	add	r1, r6
 802c6b6:	fb06 2603 	mla	r6, r6, r3, r2
 802c6ba:	9a00      	ldr	r2, [sp, #0]
 802c6bc:	bfb4      	ite	lt
 802c6be:	f04f 39ff 	movlt.w	r9, #4294967295
 802c6c2:	f04f 0901 	movge.w	r9, #1
 802c6c6:	444a      	add	r2, r9
 802c6c8:	b22d      	sxth	r5, r5
 802c6ca:	b217      	sxth	r7, r2
 802c6cc:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 802c6d0:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 802c6d4:	b209      	sxth	r1, r1
 802c6d6:	b236      	sxth	r6, r6
 802c6d8:	45f4      	cmp	ip, lr
 802c6da:	8321      	strh	r1, [r4, #24]
 802c6dc:	8366      	strh	r6, [r4, #26]
 802c6de:	f43f af30 	beq.w	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c6e2:	4331      	orrs	r1, r6
 802c6e4:	d00b      	beq.n	802c6fe <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c6e6:	2800      	cmp	r0, #0
 802c6e8:	db09      	blt.n	802c6fe <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c6ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c6ec:	4288      	cmp	r0, r1
 802c6ee:	da06      	bge.n	802c6fe <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c6f0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c6f4:	4288      	cmp	r0, r1
 802c6f6:	d33b      	bcc.n	802c770 <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 802c6f8:	2101      	movs	r1, #1
 802c6fa:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c6fe:	f1aa 0610 	sub.w	r6, sl, #16
 802c702:	0076      	lsls	r6, r6, #1
 802c704:	fb06 fc03 	mul.w	ip, r6, r3
 802c708:	fa0f fc8c 	sxth.w	ip, ip
 802c70c:	b236      	sxth	r6, r6
 802c70e:	82e7      	strh	r7, [r4, #22]
 802c710:	ea46 010c 	orr.w	r1, r6, ip
 802c714:	2700      	movs	r7, #0
 802c716:	82a5      	strh	r5, [r4, #20]
 802c718:	8327      	strh	r7, [r4, #24]
 802c71a:	8367      	strh	r7, [r4, #26]
 802c71c:	9100      	str	r1, [sp, #0]
 802c71e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802c720:	428a      	cmp	r2, r1
 802c722:	d046      	beq.n	802c7b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d6>
 802c724:	444a      	add	r2, r9
 802c726:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802c72a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c72e:	8326      	strh	r6, [r4, #24]
 802c730:	fa0f f882 	sxth.w	r8, r2
 802c734:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802c738:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 802c73c:	4570      	cmp	r0, lr
 802c73e:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802c742:	f43f aefe 	beq.w	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c746:	9800      	ldr	r0, [sp, #0]
 802c748:	b160      	cbz	r0, 802c764 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c74a:	2900      	cmp	r1, #0
 802c74c:	db0a      	blt.n	802c764 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c74e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802c750:	4281      	cmp	r1, r0
 802c752:	da07      	bge.n	802c764 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c754:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c758:	4288      	cmp	r0, r1
 802c75a:	d319      	bcc.n	802c790 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b4>
 802c75c:	f04f 0101 	mov.w	r1, #1
 802c760:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c764:	82a5      	strh	r5, [r4, #20]
 802c766:	f8a4 8016 	strh.w	r8, [r4, #22]
 802c76a:	8327      	strh	r7, [r4, #24]
 802c76c:	8367      	strh	r7, [r4, #26]
 802c76e:	e7d6      	b.n	802c71e <_ZN8touchgfx7Outline10renderLineEiiii+0x342>
 802c770:	f104 0614 	add.w	r6, r4, #20
 802c774:	ce03      	ldmia	r6!, {r0, r1}
 802c776:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802c77a:	f8cc 0000 	str.w	r0, [ip]
 802c77e:	f8cc 1004 	str.w	r1, [ip, #4]
 802c782:	6921      	ldr	r1, [r4, #16]
 802c784:	3108      	adds	r1, #8
 802c786:	6121      	str	r1, [r4, #16]
 802c788:	68a1      	ldr	r1, [r4, #8]
 802c78a:	3101      	adds	r1, #1
 802c78c:	60a1      	str	r1, [r4, #8]
 802c78e:	e7b6      	b.n	802c6fe <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c790:	f104 0e14 	add.w	lr, r4, #20
 802c794:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c798:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802c79c:	f8cb 0000 	str.w	r0, [fp]
 802c7a0:	f8cb 1004 	str.w	r1, [fp, #4]
 802c7a4:	6921      	ldr	r1, [r4, #16]
 802c7a6:	3108      	adds	r1, #8
 802c7a8:	6121      	str	r1, [r4, #16]
 802c7aa:	68a1      	ldr	r1, [r4, #8]
 802c7ac:	3101      	adds	r1, #1
 802c7ae:	60a1      	str	r1, [r4, #8]
 802c7b0:	e7d8      	b.n	802c764 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c7b2:	9a03      	ldr	r2, [sp, #12]
 802c7b4:	8b61      	ldrh	r1, [r4, #26]
 802c7b6:	f1a2 0e20 	sub.w	lr, r2, #32
 802c7ba:	8b22      	ldrh	r2, [r4, #24]
 802c7bc:	44d6      	add	lr, sl
 802c7be:	4472      	add	r2, lr
 802c7c0:	8322      	strh	r2, [r4, #24]
 802c7c2:	fb0e 1303 	mla	r3, lr, r3, r1
 802c7c6:	e687      	b.n	802c4d8 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802c7c8:	08033a77 	.word	0x08033a77
 802c7cc:	08033af8 	.word	0x08033af8
 802c7d0:	08033aa8 	.word	0x08033aa8
 802c7d4:	f1bb 0f00 	cmp.w	fp, #0
 802c7d8:	f2c0 8124 	blt.w	802ca24 <_ZN8touchgfx7Outline10renderLineEiiii+0x648>
 802c7dc:	2201      	movs	r2, #1
 802c7de:	f1c6 0320 	rsb	r3, r6, #32
 802c7e2:	920b      	str	r2, [sp, #44]	; 0x2c
 802c7e4:	fb0a f303 	mul.w	r3, sl, r3
 802c7e8:	2220      	movs	r2, #32
 802c7ea:	fb93 fcfb 	sdiv	ip, r3, fp
 802c7ee:	fb0b 331c 	mls	r3, fp, ip, r3
 802c7f2:	2b00      	cmp	r3, #0
 802c7f4:	9308      	str	r3, [sp, #32]
 802c7f6:	bfbe      	ittt	lt
 802c7f8:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802c7fc:	445b      	addlt	r3, fp
 802c7fe:	9308      	strlt	r3, [sp, #32]
 802c800:	eb0c 0301 	add.w	r3, ip, r1
 802c804:	9301      	str	r3, [sp, #4]
 802c806:	115b      	asrs	r3, r3, #5
 802c808:	9305      	str	r3, [sp, #20]
 802c80a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802c80e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 802c812:	9202      	str	r2, [sp, #8]
 802c814:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802c818:	461f      	mov	r7, r3
 802c81a:	9b02      	ldr	r3, [sp, #8]
 802c81c:	42b3      	cmp	r3, r6
 802c81e:	f040 8117 	bne.w	802ca50 <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 802c822:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802c826:	f9bd 3000 	ldrsh.w	r3, [sp]
 802c82a:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802c82e:	42b9      	cmp	r1, r7
 802c830:	d016      	beq.n	802c860 <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c832:	8b60      	ldrh	r0, [r4, #26]
 802c834:	8b21      	ldrh	r1, [r4, #24]
 802c836:	4301      	orrs	r1, r0
 802c838:	d00d      	beq.n	802c856 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c83a:	f1b8 0f00 	cmp.w	r8, #0
 802c83e:	db0a      	blt.n	802c856 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c840:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c842:	4541      	cmp	r1, r8
 802c844:	dd07      	ble.n	802c856 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c846:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c84a:	4288      	cmp	r0, r1
 802c84c:	f0c0 80f3 	bcc.w	802ca36 <_ZN8touchgfx7Outline10renderLineEiiii+0x65a>
 802c850:	2101      	movs	r1, #1
 802c852:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c856:	82e3      	strh	r3, [r4, #22]
 802c858:	2300      	movs	r3, #0
 802c85a:	82a2      	strh	r2, [r4, #20]
 802c85c:	8323      	strh	r3, [r4, #24]
 802c85e:	8363      	strh	r3, [r4, #26]
 802c860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c862:	9a00      	ldr	r2, [sp, #0]
 802c864:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c868:	441a      	add	r2, r3
 802c86a:	4691      	mov	r9, r2
 802c86c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802c870:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802c874:	fa0f f589 	sxth.w	r5, r9
 802c878:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802c87c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802c880:	4281      	cmp	r1, r0
 802c882:	d015      	beq.n	802c8b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d4>
 802c884:	8b60      	ldrh	r0, [r4, #26]
 802c886:	8b21      	ldrh	r1, [r4, #24]
 802c888:	4301      	orrs	r1, r0
 802c88a:	d00c      	beq.n	802c8a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c88c:	2a00      	cmp	r2, #0
 802c88e:	db0a      	blt.n	802c8a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c890:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c892:	428a      	cmp	r2, r1
 802c894:	da07      	bge.n	802c8a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c896:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802c89a:	4291      	cmp	r1, r2
 802c89c:	f0c0 81b4 	bcc.w	802cc08 <_ZN8touchgfx7Outline10renderLineEiiii+0x82c>
 802c8a0:	2201      	movs	r2, #1
 802c8a2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c8a6:	82a3      	strh	r3, [r4, #20]
 802c8a8:	2300      	movs	r3, #0
 802c8aa:	82e5      	strh	r5, [r4, #22]
 802c8ac:	8323      	strh	r3, [r4, #24]
 802c8ae:	8363      	strh	r3, [r4, #26]
 802c8b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c8b2:	454b      	cmp	r3, r9
 802c8b4:	f000 808a 	beq.w	802c9cc <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 802c8b8:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802c8bc:	fb93 f2fb 	sdiv	r2, r3, fp
 802c8c0:	fb0b 3312 	mls	r3, fp, r2, r3
 802c8c4:	2b00      	cmp	r3, #0
 802c8c6:	9205      	str	r2, [sp, #20]
 802c8c8:	9307      	str	r3, [sp, #28]
 802c8ca:	da04      	bge.n	802c8d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4fa>
 802c8cc:	1e53      	subs	r3, r2, #1
 802c8ce:	9305      	str	r3, [sp, #20]
 802c8d0:	9b07      	ldr	r3, [sp, #28]
 802c8d2:	445b      	add	r3, fp
 802c8d4:	9307      	str	r3, [sp, #28]
 802c8d6:	9b08      	ldr	r3, [sp, #32]
 802c8d8:	eba3 030b 	sub.w	r3, r3, fp
 802c8dc:	9308      	str	r3, [sp, #32]
 802c8de:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802c8e2:	f1c3 0320 	rsb	r3, r3, #32
 802c8e6:	930a      	str	r3, [sp, #40]	; 0x28
 802c8e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c8ea:	9b02      	ldr	r3, [sp, #8]
 802c8ec:	1a9b      	subs	r3, r3, r2
 802c8ee:	9309      	str	r3, [sp, #36]	; 0x24
 802c8f0:	f04f 0a00 	mov.w	sl, #0
 802c8f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802c8f8:	189b      	adds	r3, r3, r2
 802c8fa:	9308      	str	r3, [sp, #32]
 802c8fc:	bf5d      	ittte	pl
 802c8fe:	eba3 030b 	subpl.w	r3, r3, fp
 802c902:	9308      	strpl	r3, [sp, #32]
 802c904:	9b05      	ldrpl	r3, [sp, #20]
 802c906:	9b05      	ldrmi	r3, [sp, #20]
 802c908:	9902      	ldr	r1, [sp, #8]
 802c90a:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802c90e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802c912:	bf58      	it	pl
 802c914:	3301      	addpl	r3, #1
 802c916:	9300      	str	r3, [sp, #0]
 802c918:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c91c:	4413      	add	r3, r2
 802c91e:	9301      	str	r3, [sp, #4]
 802c920:	115b      	asrs	r3, r3, #5
 802c922:	9306      	str	r3, [sp, #24]
 802c924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c926:	428b      	cmp	r3, r1
 802c928:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802c92c:	f040 8186 	bne.w	802cc3c <_ZN8touchgfx7Outline10renderLineEiiii+0x860>
 802c930:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802c934:	fa0f f389 	sxth.w	r3, r9
 802c938:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802c93c:	4541      	cmp	r1, r8
 802c93e:	d017      	beq.n	802c970 <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802c940:	8b60      	ldrh	r0, [r4, #26]
 802c942:	8b21      	ldrh	r1, [r4, #24]
 802c944:	4301      	orrs	r1, r0
 802c946:	d00d      	beq.n	802c964 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c948:	2e00      	cmp	r6, #0
 802c94a:	db0b      	blt.n	802c964 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c94c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c94e:	42b1      	cmp	r1, r6
 802c950:	dd08      	ble.n	802c964 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c952:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c956:	4288      	cmp	r0, r1
 802c958:	f0c0 8163 	bcc.w	802cc22 <_ZN8touchgfx7Outline10renderLineEiiii+0x846>
 802c95c:	f04f 0101 	mov.w	r1, #1
 802c960:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c964:	82a2      	strh	r2, [r4, #20]
 802c966:	82e3      	strh	r3, [r4, #22]
 802c968:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c96c:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c972:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802c976:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c97a:	4499      	add	r9, r3
 802c97c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802c980:	fa0f f589 	sxth.w	r5, r9
 802c984:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802c988:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802c98c:	4281      	cmp	r1, r0
 802c98e:	f43f add8 	beq.w	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c992:	8b60      	ldrh	r0, [r4, #26]
 802c994:	8b21      	ldrh	r1, [r4, #24]
 802c996:	4301      	orrs	r1, r0
 802c998:	d00d      	beq.n	802c9b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c99a:	2a00      	cmp	r2, #0
 802c99c:	db0b      	blt.n	802c9b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c99e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c9a0:	428a      	cmp	r2, r1
 802c9a2:	da08      	bge.n	802c9b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c9a4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802c9a8:	4291      	cmp	r1, r2
 802c9aa:	f0c0 8230 	bcc.w	802ce0e <_ZN8touchgfx7Outline10renderLineEiiii+0xa32>
 802c9ae:	f04f 0201 	mov.w	r2, #1
 802c9b2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c9b6:	82a3      	strh	r3, [r4, #20]
 802c9b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c9ba:	82e5      	strh	r5, [r4, #22]
 802c9bc:	454b      	cmp	r3, r9
 802c9be:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c9c2:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c9c6:	f8dd c004 	ldr.w	ip, [sp, #4]
 802c9ca:	d193      	bne.n	802c8f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x518>
 802c9cc:	9b02      	ldr	r3, [sp, #8]
 802c9ce:	f1c3 0e20 	rsb	lr, r3, #32
 802c9d2:	9b04      	ldr	r3, [sp, #16]
 802c9d4:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802c9d8:	9b03      	ldr	r3, [sp, #12]
 802c9da:	459e      	cmp	lr, r3
 802c9dc:	f040 8231 	bne.w	802ce42 <_ZN8touchgfx7Outline10renderLineEiiii+0xa66>
 802c9e0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802c9e4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c9e8:	fa0f f58b 	sxth.w	r5, fp
 802c9ec:	fa0f f289 	sxth.w	r2, r9
 802c9f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c9f4:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 802c9f8:	4281      	cmp	r1, r0
 802c9fa:	f43f ae22 	beq.w	802c642 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c9fe:	8b60      	ldrh	r0, [r4, #26]
 802ca00:	8b21      	ldrh	r1, [r4, #24]
 802ca02:	4301      	orrs	r1, r0
 802ca04:	d00c      	beq.n	802ca20 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802ca06:	2b00      	cmp	r3, #0
 802ca08:	db0a      	blt.n	802ca20 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802ca0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ca0c:	428b      	cmp	r3, r1
 802ca0e:	da07      	bge.n	802ca20 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802ca10:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802ca14:	4299      	cmp	r1, r3
 802ca16:	f0c0 8207 	bcc.w	802ce28 <_ZN8touchgfx7Outline10renderLineEiiii+0xa4c>
 802ca1a:	2301      	movs	r3, #1
 802ca1c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802ca20:	82a5      	strh	r5, [r4, #20]
 802ca22:	e535      	b.n	802c490 <_ZN8touchgfx7Outline10renderLineEiiii+0xb4>
 802ca24:	f04f 32ff 	mov.w	r2, #4294967295
 802ca28:	920b      	str	r2, [sp, #44]	; 0x2c
 802ca2a:	fb0a f306 	mul.w	r3, sl, r6
 802ca2e:	f1cb 0b00 	rsb	fp, fp, #0
 802ca32:	2200      	movs	r2, #0
 802ca34:	e6d9      	b.n	802c7ea <_ZN8touchgfx7Outline10renderLineEiiii+0x40e>
 802ca36:	f104 0514 	add.w	r5, r4, #20
 802ca3a:	cd03      	ldmia	r5!, {r0, r1}
 802ca3c:	6926      	ldr	r6, [r4, #16]
 802ca3e:	6030      	str	r0, [r6, #0]
 802ca40:	6071      	str	r1, [r6, #4]
 802ca42:	6921      	ldr	r1, [r4, #16]
 802ca44:	3108      	adds	r1, #8
 802ca46:	6121      	str	r1, [r4, #16]
 802ca48:	68a1      	ldr	r1, [r4, #8]
 802ca4a:	3101      	adds	r1, #1
 802ca4c:	60a1      	str	r1, [r4, #8]
 802ca4e:	e702      	b.n	802c856 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802ca50:	9b01      	ldr	r3, [sp, #4]
 802ca52:	8b20      	ldrh	r0, [r4, #24]
 802ca54:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802ca58:	f003 031f 	and.w	r3, r3, #31
 802ca5c:	930d      	str	r3, [sp, #52]	; 0x34
 802ca5e:	9b02      	ldr	r3, [sp, #8]
 802ca60:	1b9a      	subs	r2, r3, r6
 802ca62:	9b05      	ldr	r3, [sp, #20]
 802ca64:	42ab      	cmp	r3, r5
 802ca66:	f001 011f 	and.w	r1, r1, #31
 802ca6a:	d107      	bne.n	802ca7c <_ZN8touchgfx7Outline10renderLineEiiii+0x6a0>
 802ca6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ca6e:	4419      	add	r1, r3
 802ca70:	4410      	add	r0, r2
 802ca72:	fb02 9201 	mla	r2, r2, r1, r9
 802ca76:	8320      	strh	r0, [r4, #24]
 802ca78:	8362      	strh	r2, [r4, #26]
 802ca7a:	e6f1      	b.n	802c860 <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802ca7c:	f1bc 0f00 	cmp.w	ip, #0
 802ca80:	f2c0 8099 	blt.w	802cbb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7da>
 802ca84:	f1c1 0320 	rsb	r3, r1, #32
 802ca88:	435a      	muls	r2, r3
 802ca8a:	2301      	movs	r3, #1
 802ca8c:	9309      	str	r3, [sp, #36]	; 0x24
 802ca8e:	2320      	movs	r3, #32
 802ca90:	9307      	str	r3, [sp, #28]
 802ca92:	fb92 fefc 	sdiv	lr, r2, ip
 802ca96:	9b07      	ldr	r3, [sp, #28]
 802ca98:	fb0c 221e 	mls	r2, ip, lr, r2
 802ca9c:	2a00      	cmp	r2, #0
 802ca9e:	bfb8      	it	lt
 802caa0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802caa4:	4419      	add	r1, r3
 802caa6:	fb0e 9101 	mla	r1, lr, r1, r9
 802caaa:	b20b      	sxth	r3, r1
 802caac:	9909      	ldr	r1, [sp, #36]	; 0x24
 802caae:	8363      	strh	r3, [r4, #26]
 802cab0:	440d      	add	r5, r1
 802cab2:	f9bd 1000 	ldrsh.w	r1, [sp]
 802cab6:	9106      	str	r1, [sp, #24]
 802cab8:	fa0f f985 	sxth.w	r9, r5
 802cabc:	ea4f 4101 	mov.w	r1, r1, lsl #16
 802cac0:	4470      	add	r0, lr
 802cac2:	910a      	str	r1, [sp, #40]	; 0x28
 802cac4:	4449      	add	r1, r9
 802cac6:	bfb8      	it	lt
 802cac8:	4462      	addlt	r2, ip
 802caca:	b200      	sxth	r0, r0
 802cacc:	42b9      	cmp	r1, r7
 802cace:	8320      	strh	r0, [r4, #24]
 802cad0:	f43f ad37 	beq.w	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cad4:	4303      	orrs	r3, r0
 802cad6:	d00c      	beq.n	802caf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802cad8:	f1b8 0f00 	cmp.w	r8, #0
 802cadc:	db09      	blt.n	802caf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802cade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802cae0:	4543      	cmp	r3, r8
 802cae2:	dd06      	ble.n	802caf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802cae4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802cae8:	4299      	cmp	r1, r3
 802caea:	d36c      	bcc.n	802cbc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ea>
 802caec:	2301      	movs	r3, #1
 802caee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802caf2:	9b06      	ldr	r3, [sp, #24]
 802caf4:	82e3      	strh	r3, [r4, #22]
 802caf6:	2300      	movs	r3, #0
 802caf8:	8323      	strh	r3, [r4, #24]
 802cafa:	8363      	strh	r3, [r4, #26]
 802cafc:	9b05      	ldr	r3, [sp, #20]
 802cafe:	f8a4 9014 	strh.w	r9, [r4, #20]
 802cb02:	42ab      	cmp	r3, r5
 802cb04:	4476      	add	r6, lr
 802cb06:	d04c      	beq.n	802cba2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7c6>
 802cb08:	9b02      	ldr	r3, [sp, #8]
 802cb0a:	1b9b      	subs	r3, r3, r6
 802cb0c:	4473      	add	r3, lr
 802cb0e:	015b      	lsls	r3, r3, #5
 802cb10:	fb93 f8fc 	sdiv	r8, r3, ip
 802cb14:	fb0c 3318 	mls	r3, ip, r8, r3
 802cb18:	2b00      	cmp	r3, #0
 802cb1a:	bfb8      	it	lt
 802cb1c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802cb20:	f108 0101 	add.w	r1, r8, #1
 802cb24:	bfb8      	it	lt
 802cb26:	4463      	addlt	r3, ip
 802cb28:	eba2 020c 	sub.w	r2, r2, ip
 802cb2c:	910f      	str	r1, [sp, #60]	; 0x3c
 802cb2e:	18d2      	adds	r2, r2, r3
 802cb30:	bf58      	it	pl
 802cb32:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 802cb34:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802cb36:	bf48      	it	mi
 802cb38:	4640      	movmi	r0, r8
 802cb3a:	fa0f fe80 	sxth.w	lr, r0
 802cb3e:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802cb42:	4406      	add	r6, r0
 802cb44:	9809      	ldr	r0, [sp, #36]	; 0x24
 802cb46:	f8a4 e018 	strh.w	lr, [r4, #24]
 802cb4a:	4405      	add	r5, r0
 802cb4c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802cb50:	fa0f f985 	sxth.w	r9, r5
 802cb54:	4438      	add	r0, r7
 802cb56:	444f      	add	r7, r9
 802cb58:	bf58      	it	pl
 802cb5a:	eba2 020c 	subpl.w	r2, r2, ip
 802cb5e:	b209      	sxth	r1, r1
 802cb60:	42b8      	cmp	r0, r7
 802cb62:	8361      	strh	r1, [r4, #26]
 802cb64:	f43f aced 	beq.w	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cb68:	ea5e 0101 	orrs.w	r1, lr, r1
 802cb6c:	d00e      	beq.n	802cb8c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802cb6e:	9906      	ldr	r1, [sp, #24]
 802cb70:	2900      	cmp	r1, #0
 802cb72:	db0b      	blt.n	802cb8c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802cb74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cb76:	9806      	ldr	r0, [sp, #24]
 802cb78:	4288      	cmp	r0, r1
 802cb7a:	da07      	bge.n	802cb8c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802cb7c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cb80:	4288      	cmp	r0, r1
 802cb82:	d330      	bcc.n	802cbe6 <_ZN8touchgfx7Outline10renderLineEiiii+0x80a>
 802cb84:	f04f 0101 	mov.w	r1, #1
 802cb88:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802cb8c:	9906      	ldr	r1, [sp, #24]
 802cb8e:	82e1      	strh	r1, [r4, #22]
 802cb90:	f04f 0100 	mov.w	r1, #0
 802cb94:	8321      	strh	r1, [r4, #24]
 802cb96:	8361      	strh	r1, [r4, #26]
 802cb98:	9905      	ldr	r1, [sp, #20]
 802cb9a:	f8a4 9014 	strh.w	r9, [r4, #20]
 802cb9e:	42a9      	cmp	r1, r5
 802cba0:	d1c5      	bne.n	802cb2e <_ZN8touchgfx7Outline10renderLineEiiii+0x752>
 802cba2:	9b02      	ldr	r3, [sp, #8]
 802cba4:	990d      	ldr	r1, [sp, #52]	; 0x34
 802cba6:	1b9e      	subs	r6, r3, r6
 802cba8:	9b07      	ldr	r3, [sp, #28]
 802cbaa:	8326      	strh	r6, [r4, #24]
 802cbac:	3120      	adds	r1, #32
 802cbae:	1ac9      	subs	r1, r1, r3
 802cbb0:	434e      	muls	r6, r1
 802cbb2:	8366      	strh	r6, [r4, #26]
 802cbb4:	e654      	b.n	802c860 <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802cbb6:	f04f 33ff 	mov.w	r3, #4294967295
 802cbba:	9309      	str	r3, [sp, #36]	; 0x24
 802cbbc:	434a      	muls	r2, r1
 802cbbe:	f1cc 0c00 	rsb	ip, ip, #0
 802cbc2:	2300      	movs	r3, #0
 802cbc4:	e764      	b.n	802ca90 <_ZN8touchgfx7Outline10renderLineEiiii+0x6b4>
 802cbc6:	f104 0314 	add.w	r3, r4, #20
 802cbca:	cb03      	ldmia	r3!, {r0, r1}
 802cbcc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802cbd0:	f8c8 0000 	str.w	r0, [r8]
 802cbd4:	f8c8 1004 	str.w	r1, [r8, #4]
 802cbd8:	6923      	ldr	r3, [r4, #16]
 802cbda:	3308      	adds	r3, #8
 802cbdc:	6123      	str	r3, [r4, #16]
 802cbde:	68a3      	ldr	r3, [r4, #8]
 802cbe0:	3301      	adds	r3, #1
 802cbe2:	60a3      	str	r3, [r4, #8]
 802cbe4:	e785      	b.n	802caf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802cbe6:	6921      	ldr	r1, [r4, #16]
 802cbe8:	910e      	str	r1, [sp, #56]	; 0x38
 802cbea:	f104 0e14 	add.w	lr, r4, #20
 802cbee:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802cbf2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802cbf4:	6038      	str	r0, [r7, #0]
 802cbf6:	6079      	str	r1, [r7, #4]
 802cbf8:	6921      	ldr	r1, [r4, #16]
 802cbfa:	3108      	adds	r1, #8
 802cbfc:	6121      	str	r1, [r4, #16]
 802cbfe:	68a1      	ldr	r1, [r4, #8]
 802cc00:	3101      	adds	r1, #1
 802cc02:	4638      	mov	r0, r7
 802cc04:	60a1      	str	r1, [r4, #8]
 802cc06:	e7c1      	b.n	802cb8c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802cc08:	f104 0214 	add.w	r2, r4, #20
 802cc0c:	ca03      	ldmia	r2!, {r0, r1}
 802cc0e:	6926      	ldr	r6, [r4, #16]
 802cc10:	6030      	str	r0, [r6, #0]
 802cc12:	6071      	str	r1, [r6, #4]
 802cc14:	6922      	ldr	r2, [r4, #16]
 802cc16:	3208      	adds	r2, #8
 802cc18:	6122      	str	r2, [r4, #16]
 802cc1a:	68a2      	ldr	r2, [r4, #8]
 802cc1c:	3201      	adds	r2, #1
 802cc1e:	60a2      	str	r2, [r4, #8]
 802cc20:	e641      	b.n	802c8a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802cc22:	f104 0514 	add.w	r5, r4, #20
 802cc26:	cd03      	ldmia	r5!, {r0, r1}
 802cc28:	6926      	ldr	r6, [r4, #16]
 802cc2a:	6030      	str	r0, [r6, #0]
 802cc2c:	6071      	str	r1, [r6, #4]
 802cc2e:	6921      	ldr	r1, [r4, #16]
 802cc30:	3108      	adds	r1, #8
 802cc32:	6121      	str	r1, [r4, #16]
 802cc34:	68a1      	ldr	r1, [r4, #8]
 802cc36:	3101      	adds	r1, #1
 802cc38:	60a1      	str	r1, [r4, #8]
 802cc3a:	e693      	b.n	802c964 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802cc3c:	9b01      	ldr	r3, [sp, #4]
 802cc3e:	8b20      	ldrh	r0, [r4, #24]
 802cc40:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 802cc44:	f003 031f 	and.w	r3, r3, #31
 802cc48:	9310      	str	r3, [sp, #64]	; 0x40
 802cc4a:	9b06      	ldr	r3, [sp, #24]
 802cc4c:	ea4f 176c 	mov.w	r7, ip, asr #5
 802cc50:	429f      	cmp	r7, r3
 802cc52:	f00c 0c1f 	and.w	ip, ip, #31
 802cc56:	d10a      	bne.n	802cc6e <_ZN8touchgfx7Outline10renderLineEiiii+0x892>
 802cc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cc5a:	4418      	add	r0, r3
 802cc5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802cc5e:	8320      	strh	r0, [r4, #24]
 802cc60:	449c      	add	ip, r3
 802cc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cc64:	fb03 ee0c 	mla	lr, r3, ip, lr
 802cc68:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802cc6c:	e680      	b.n	802c970 <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802cc6e:	9b00      	ldr	r3, [sp, #0]
 802cc70:	2b00      	cmp	r3, #0
 802cc72:	f2c0 80a2 	blt.w	802cdba <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 802cc76:	9909      	ldr	r1, [sp, #36]	; 0x24
 802cc78:	f1cc 0320 	rsb	r3, ip, #32
 802cc7c:	434b      	muls	r3, r1
 802cc7e:	2101      	movs	r1, #1
 802cc80:	910e      	str	r1, [sp, #56]	; 0x38
 802cc82:	2120      	movs	r1, #32
 802cc84:	9a00      	ldr	r2, [sp, #0]
 802cc86:	910d      	str	r1, [sp, #52]	; 0x34
 802cc88:	fb93 f5f2 	sdiv	r5, r3, r2
 802cc8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802cc8e:	fb02 3315 	mls	r3, r2, r5, r3
 802cc92:	2b00      	cmp	r3, #0
 802cc94:	bfbc      	itt	lt
 802cc96:	f105 35ff 	addlt.w	r5, r5, #4294967295
 802cc9a:	189b      	addlt	r3, r3, r2
 802cc9c:	448c      	add	ip, r1
 802cc9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802cca0:	fb05 ec0c 	mla	ip, r5, ip, lr
 802cca4:	fa0f f18c 	sxth.w	r1, ip
 802cca8:	4417      	add	r7, r2
 802ccaa:	fa0f fc89 	sxth.w	ip, r9
 802ccae:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802ccb2:	fa0f fe87 	sxth.w	lr, r7
 802ccb6:	4428      	add	r0, r5
 802ccb8:	920f      	str	r2, [sp, #60]	; 0x3c
 802ccba:	4472      	add	r2, lr
 802ccbc:	b200      	sxth	r0, r0
 802ccbe:	4542      	cmp	r2, r8
 802ccc0:	8320      	strh	r0, [r4, #24]
 802ccc2:	8361      	strh	r1, [r4, #26]
 802ccc4:	f43f ac3d 	beq.w	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802ccc8:	ea50 0201 	orrs.w	r2, r0, r1
 802cccc:	d00c      	beq.n	802cce8 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802ccce:	2e00      	cmp	r6, #0
 802ccd0:	db0a      	blt.n	802cce8 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802ccd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ccd4:	42b1      	cmp	r1, r6
 802ccd6:	dd07      	ble.n	802cce8 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802ccd8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ccdc:	4288      	cmp	r0, r1
 802ccde:	d377      	bcc.n	802cdd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9f4>
 802cce0:	f04f 0201 	mov.w	r2, #1
 802cce4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802cce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ccea:	f8a4 e014 	strh.w	lr, [r4, #20]
 802ccee:	1956      	adds	r6, r2, r5
 802ccf0:	9a06      	ldr	r2, [sp, #24]
 802ccf2:	f8a4 c016 	strh.w	ip, [r4, #22]
 802ccf6:	42ba      	cmp	r2, r7
 802ccf8:	f8a4 a018 	strh.w	sl, [r4, #24]
 802ccfc:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802cd00:	d04e      	beq.n	802cda0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9c4>
 802cd02:	9a02      	ldr	r2, [sp, #8]
 802cd04:	1b91      	subs	r1, r2, r6
 802cd06:	440d      	add	r5, r1
 802cd08:	9a00      	ldr	r2, [sp, #0]
 802cd0a:	016d      	lsls	r5, r5, #5
 802cd0c:	fb95 fef2 	sdiv	lr, r5, r2
 802cd10:	fb02 551e 	mls	r5, r2, lr, r5
 802cd14:	2d00      	cmp	r5, #0
 802cd16:	bfb8      	it	lt
 802cd18:	18ad      	addlt	r5, r5, r2
 802cd1a:	9a00      	ldr	r2, [sp, #0]
 802cd1c:	bfb8      	it	lt
 802cd1e:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802cd22:	1a9b      	subs	r3, r3, r2
 802cd24:	f10e 0201 	add.w	r2, lr, #1
 802cd28:	9213      	str	r2, [sp, #76]	; 0x4c
 802cd2a:	195b      	adds	r3, r3, r5
 802cd2c:	bf5e      	ittt	pl
 802cd2e:	9a00      	ldrpl	r2, [sp, #0]
 802cd30:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802cd32:	1a9b      	subpl	r3, r3, r2
 802cd34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802cd36:	4417      	add	r7, r2
 802cd38:	bf48      	it	mi
 802cd3a:	4670      	movmi	r0, lr
 802cd3c:	b23a      	sxth	r2, r7
 802cd3e:	fa0f f880 	sxth.w	r8, r0
 802cd42:	0141      	lsls	r1, r0, #5
 802cd44:	9211      	str	r2, [sp, #68]	; 0x44
 802cd46:	4406      	add	r6, r0
 802cd48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802cd4a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802cd4e:	f8a4 8018 	strh.w	r8, [r4, #24]
 802cd52:	1882      	adds	r2, r0, r2
 802cd54:	9212      	str	r2, [sp, #72]	; 0x48
 802cd56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802cd58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802cd5a:	4402      	add	r2, r0
 802cd5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802cd5e:	b209      	sxth	r1, r1
 802cd60:	4290      	cmp	r0, r2
 802cd62:	8361      	strh	r1, [r4, #26]
 802cd64:	f43f abed 	beq.w	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cd68:	ea58 0201 	orrs.w	r2, r8, r1
 802cd6c:	d00d      	beq.n	802cd8a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802cd6e:	f1bc 0f00 	cmp.w	ip, #0
 802cd72:	db0a      	blt.n	802cd8a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802cd74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cd76:	458c      	cmp	ip, r1
 802cd78:	da07      	bge.n	802cd8a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802cd7a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cd7e:	4288      	cmp	r0, r1
 802cd80:	d336      	bcc.n	802cdf0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa14>
 802cd82:	f04f 0201 	mov.w	r2, #1
 802cd86:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802cd8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802cd8c:	82a2      	strh	r2, [r4, #20]
 802cd8e:	9a06      	ldr	r2, [sp, #24]
 802cd90:	f8a4 c016 	strh.w	ip, [r4, #22]
 802cd94:	42ba      	cmp	r2, r7
 802cd96:	f8a4 a018 	strh.w	sl, [r4, #24]
 802cd9a:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802cd9e:	d1c4      	bne.n	802cd2a <_ZN8touchgfx7Outline10renderLineEiiii+0x94e>
 802cda0:	9b02      	ldr	r3, [sp, #8]
 802cda2:	1b9e      	subs	r6, r3, r6
 802cda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802cda6:	8326      	strh	r6, [r4, #24]
 802cda8:	f103 0c20 	add.w	ip, r3, #32
 802cdac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802cdae:	ebac 0c03 	sub.w	ip, ip, r3
 802cdb2:	fb06 f60c 	mul.w	r6, r6, ip
 802cdb6:	8366      	strh	r6, [r4, #26]
 802cdb8:	e5da      	b.n	802c970 <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802cdba:	9a00      	ldr	r2, [sp, #0]
 802cdbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cdbe:	f04f 31ff 	mov.w	r1, #4294967295
 802cdc2:	4252      	negs	r2, r2
 802cdc4:	910e      	str	r1, [sp, #56]	; 0x38
 802cdc6:	fb03 f30c 	mul.w	r3, r3, ip
 802cdca:	9200      	str	r2, [sp, #0]
 802cdcc:	2100      	movs	r1, #0
 802cdce:	e759      	b.n	802cc84 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a8>
 802cdd0:	f104 0614 	add.w	r6, r4, #20
 802cdd4:	ce03      	ldmia	r6!, {r0, r1}
 802cdd6:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802cdda:	f8c8 0000 	str.w	r0, [r8]
 802cdde:	f8c8 1004 	str.w	r1, [r8, #4]
 802cde2:	6921      	ldr	r1, [r4, #16]
 802cde4:	3108      	adds	r1, #8
 802cde6:	6121      	str	r1, [r4, #16]
 802cde8:	68a1      	ldr	r1, [r4, #8]
 802cdea:	3101      	adds	r1, #1
 802cdec:	60a1      	str	r1, [r4, #8]
 802cdee:	e77b      	b.n	802cce8 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802cdf0:	f104 0814 	add.w	r8, r4, #20
 802cdf4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802cdf8:	6922      	ldr	r2, [r4, #16]
 802cdfa:	9212      	str	r2, [sp, #72]	; 0x48
 802cdfc:	6010      	str	r0, [r2, #0]
 802cdfe:	6051      	str	r1, [r2, #4]
 802ce00:	6921      	ldr	r1, [r4, #16]
 802ce02:	3108      	adds	r1, #8
 802ce04:	6121      	str	r1, [r4, #16]
 802ce06:	68a1      	ldr	r1, [r4, #8]
 802ce08:	3101      	adds	r1, #1
 802ce0a:	60a1      	str	r1, [r4, #8]
 802ce0c:	e7bd      	b.n	802cd8a <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802ce0e:	f104 0214 	add.w	r2, r4, #20
 802ce12:	ca03      	ldmia	r2!, {r0, r1}
 802ce14:	6926      	ldr	r6, [r4, #16]
 802ce16:	6030      	str	r0, [r6, #0]
 802ce18:	6071      	str	r1, [r6, #4]
 802ce1a:	6922      	ldr	r2, [r4, #16]
 802ce1c:	3208      	adds	r2, #8
 802ce1e:	6122      	str	r2, [r4, #16]
 802ce20:	68a2      	ldr	r2, [r4, #8]
 802ce22:	3201      	adds	r2, #1
 802ce24:	60a2      	str	r2, [r4, #8]
 802ce26:	e5c6      	b.n	802c9b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802ce28:	f104 0314 	add.w	r3, r4, #20
 802ce2c:	cb03      	ldmia	r3!, {r0, r1}
 802ce2e:	6926      	ldr	r6, [r4, #16]
 802ce30:	6030      	str	r0, [r6, #0]
 802ce32:	6071      	str	r1, [r6, #4]
 802ce34:	6923      	ldr	r3, [r4, #16]
 802ce36:	3308      	adds	r3, #8
 802ce38:	6123      	str	r3, [r4, #16]
 802ce3a:	68a3      	ldr	r3, [r4, #8]
 802ce3c:	3301      	adds	r3, #1
 802ce3e:	60a3      	str	r3, [r4, #8]
 802ce40:	e5ee      	b.n	802ca20 <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802ce42:	9b01      	ldr	r3, [sp, #4]
 802ce44:	8b20      	ldrh	r0, [r4, #24]
 802ce46:	8b66      	ldrh	r6, [r4, #26]
 802ce48:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802ce4c:	f003 021f 	and.w	r2, r3, #31
 802ce50:	9b04      	ldr	r3, [sp, #16]
 802ce52:	f003 031f 	and.w	r3, r3, #31
 802ce56:	9305      	str	r3, [sp, #20]
 802ce58:	9b03      	ldr	r3, [sp, #12]
 802ce5a:	45dc      	cmp	ip, fp
 802ce5c:	eba3 050e 	sub.w	r5, r3, lr
 802ce60:	d108      	bne.n	802ce74 <_ZN8touchgfx7Outline10renderLineEiiii+0xa98>
 802ce62:	9b05      	ldr	r3, [sp, #20]
 802ce64:	441a      	add	r2, r3
 802ce66:	4428      	add	r0, r5
 802ce68:	fb05 6502 	mla	r5, r5, r2, r6
 802ce6c:	8320      	strh	r0, [r4, #24]
 802ce6e:	8365      	strh	r5, [r4, #26]
 802ce70:	f7ff bbe7 	b.w	802c642 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802ce74:	9b04      	ldr	r3, [sp, #16]
 802ce76:	9901      	ldr	r1, [sp, #4]
 802ce78:	1a5b      	subs	r3, r3, r1
 802ce7a:	9300      	str	r3, [sp, #0]
 802ce7c:	f100 809f 	bmi.w	802cfbe <_ZN8touchgfx7Outline10renderLineEiiii+0xbe2>
 802ce80:	f1c2 0120 	rsb	r1, r2, #32
 802ce84:	434d      	muls	r5, r1
 802ce86:	2101      	movs	r1, #1
 802ce88:	9102      	str	r1, [sp, #8]
 802ce8a:	2120      	movs	r1, #32
 802ce8c:	9b00      	ldr	r3, [sp, #0]
 802ce8e:	9101      	str	r1, [sp, #4]
 802ce90:	fb95 f7f3 	sdiv	r7, r5, r3
 802ce94:	9901      	ldr	r1, [sp, #4]
 802ce96:	fb03 5517 	mls	r5, r3, r7, r5
 802ce9a:	2d00      	cmp	r5, #0
 802ce9c:	bfb8      	it	lt
 802ce9e:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802cea2:	440a      	add	r2, r1
 802cea4:	fb07 6202 	mla	r2, r7, r2, r6
 802cea8:	b211      	sxth	r1, r2
 802ceaa:	9a02      	ldr	r2, [sp, #8]
 802ceac:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802ceb0:	8361      	strh	r1, [r4, #26]
 802ceb2:	4494      	add	ip, r2
 802ceb4:	fa0f f289 	sxth.w	r2, r9
 802ceb8:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802cebc:	bfb8      	it	lt
 802cebe:	18ed      	addlt	r5, r5, r3
 802cec0:	fa0f f88c 	sxth.w	r8, ip
 802cec4:	0413      	lsls	r3, r2, #16
 802cec6:	4438      	add	r0, r7
 802cec8:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 802cecc:	eb08 0a03 	add.w	sl, r8, r3
 802ced0:	b200      	sxth	r0, r0
 802ced2:	45d1      	cmp	r9, sl
 802ced4:	8320      	strh	r0, [r4, #24]
 802ced6:	9304      	str	r3, [sp, #16]
 802ced8:	f43f ab33 	beq.w	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cedc:	ea50 0301 	orrs.w	r3, r0, r1
 802cee0:	d00b      	beq.n	802cefa <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cee2:	2e00      	cmp	r6, #0
 802cee4:	db09      	blt.n	802cefa <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cee6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cee8:	428e      	cmp	r6, r1
 802ceea:	da06      	bge.n	802cefa <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802ceec:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cef0:	4288      	cmp	r0, r1
 802cef2:	d36d      	bcc.n	802cfd0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbf4>
 802cef4:	2101      	movs	r1, #1
 802cef6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802cefa:	2100      	movs	r1, #0
 802cefc:	45e3      	cmp	fp, ip
 802cefe:	f8a4 8014 	strh.w	r8, [r4, #20]
 802cf02:	82e2      	strh	r2, [r4, #22]
 802cf04:	8321      	strh	r1, [r4, #24]
 802cf06:	8361      	strh	r1, [r4, #26]
 802cf08:	44be      	add	lr, r7
 802cf0a:	d049      	beq.n	802cfa0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc4>
 802cf0c:	9b03      	ldr	r3, [sp, #12]
 802cf0e:	eba3 060e 	sub.w	r6, r3, lr
 802cf12:	443e      	add	r6, r7
 802cf14:	9b00      	ldr	r3, [sp, #0]
 802cf16:	0176      	lsls	r6, r6, #5
 802cf18:	fb96 f7f3 	sdiv	r7, r6, r3
 802cf1c:	fb03 6617 	mls	r6, r3, r7, r6
 802cf20:	428e      	cmp	r6, r1
 802cf22:	bfb8      	it	lt
 802cf24:	18f6      	addlt	r6, r6, r3
 802cf26:	9b00      	ldr	r3, [sp, #0]
 802cf28:	bfb8      	it	lt
 802cf2a:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802cf2e:	1aed      	subs	r5, r5, r3
 802cf30:	1c7b      	adds	r3, r7, #1
 802cf32:	9307      	str	r3, [sp, #28]
 802cf34:	f04f 0900 	mov.w	r9, #0
 802cf38:	19ad      	adds	r5, r5, r6
 802cf3a:	bf5e      	ittt	pl
 802cf3c:	9b00      	ldrpl	r3, [sp, #0]
 802cf3e:	9807      	ldrpl	r0, [sp, #28]
 802cf40:	1aed      	subpl	r5, r5, r3
 802cf42:	9b02      	ldr	r3, [sp, #8]
 802cf44:	bf48      	it	mi
 802cf46:	4638      	movmi	r0, r7
 802cf48:	fa0f f880 	sxth.w	r8, r0
 802cf4c:	0141      	lsls	r1, r0, #5
 802cf4e:	449c      	add	ip, r3
 802cf50:	4486      	add	lr, r0
 802cf52:	9b04      	ldr	r3, [sp, #16]
 802cf54:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802cf58:	f8a4 8018 	strh.w	r8, [r4, #24]
 802cf5c:	fa0f fa8c 	sxth.w	sl, ip
 802cf60:	4418      	add	r0, r3
 802cf62:	4453      	add	r3, sl
 802cf64:	b209      	sxth	r1, r1
 802cf66:	4298      	cmp	r0, r3
 802cf68:	8361      	strh	r1, [r4, #26]
 802cf6a:	f43f aaea 	beq.w	802c542 <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cf6e:	ea58 0301 	orrs.w	r3, r8, r1
 802cf72:	d00c      	beq.n	802cf8e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cf74:	2a00      	cmp	r2, #0
 802cf76:	db0a      	blt.n	802cf8e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cf78:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cf7a:	428a      	cmp	r2, r1
 802cf7c:	da07      	bge.n	802cf8e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cf7e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cf82:	4288      	cmp	r0, r1
 802cf84:	d334      	bcc.n	802cff0 <_ZN8touchgfx7Outline10renderLineEiiii+0xc14>
 802cf86:	f04f 0301 	mov.w	r3, #1
 802cf8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802cf8e:	45e3      	cmp	fp, ip
 802cf90:	f8a4 a014 	strh.w	sl, [r4, #20]
 802cf94:	82e2      	strh	r2, [r4, #22]
 802cf96:	f8a4 9018 	strh.w	r9, [r4, #24]
 802cf9a:	f8a4 901a 	strh.w	r9, [r4, #26]
 802cf9e:	d1cb      	bne.n	802cf38 <_ZN8touchgfx7Outline10renderLineEiiii+0xb5c>
 802cfa0:	9b03      	ldr	r3, [sp, #12]
 802cfa2:	9e05      	ldr	r6, [sp, #20]
 802cfa4:	eba3 0e0e 	sub.w	lr, r3, lr
 802cfa8:	9b01      	ldr	r3, [sp, #4]
 802cfaa:	f8a4 e018 	strh.w	lr, [r4, #24]
 802cfae:	3620      	adds	r6, #32
 802cfb0:	1af6      	subs	r6, r6, r3
 802cfb2:	fb0e fe06 	mul.w	lr, lr, r6
 802cfb6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802cfba:	f7ff bb42 	b.w	802c642 <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802cfbe:	9b00      	ldr	r3, [sp, #0]
 802cfc0:	f04f 31ff 	mov.w	r1, #4294967295
 802cfc4:	425b      	negs	r3, r3
 802cfc6:	9102      	str	r1, [sp, #8]
 802cfc8:	4355      	muls	r5, r2
 802cfca:	9300      	str	r3, [sp, #0]
 802cfcc:	2100      	movs	r1, #0
 802cfce:	e75d      	b.n	802ce8c <_ZN8touchgfx7Outline10renderLineEiiii+0xab0>
 802cfd0:	f104 0614 	add.w	r6, r4, #20
 802cfd4:	ce03      	ldmia	r6!, {r0, r1}
 802cfd6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802cfda:	f8c9 0000 	str.w	r0, [r9]
 802cfde:	f8c9 1004 	str.w	r1, [r9, #4]
 802cfe2:	6921      	ldr	r1, [r4, #16]
 802cfe4:	3108      	adds	r1, #8
 802cfe6:	6121      	str	r1, [r4, #16]
 802cfe8:	68a1      	ldr	r1, [r4, #8]
 802cfea:	3101      	adds	r1, #1
 802cfec:	60a1      	str	r1, [r4, #8]
 802cfee:	e784      	b.n	802cefa <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cff0:	f104 0814 	add.w	r8, r4, #20
 802cff4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802cff8:	6923      	ldr	r3, [r4, #16]
 802cffa:	9306      	str	r3, [sp, #24]
 802cffc:	6018      	str	r0, [r3, #0]
 802cffe:	6059      	str	r1, [r3, #4]
 802d000:	6921      	ldr	r1, [r4, #16]
 802d002:	3108      	adds	r1, #8
 802d004:	6121      	str	r1, [r4, #16]
 802d006:	68a1      	ldr	r1, [r4, #8]
 802d008:	3101      	adds	r1, #1
 802d00a:	60a1      	str	r1, [r4, #8]
 802d00c:	e7bf      	b.n	802cf8e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802d00e:	bf00      	nop

0802d010 <_ZN8touchgfx7Outline6lineToEii>:
 802d010:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d012:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802d014:	079b      	lsls	r3, r3, #30
 802d016:	4604      	mov	r4, r0
 802d018:	460d      	mov	r5, r1
 802d01a:	4616      	mov	r6, r2
 802d01c:	d526      	bpl.n	802d06c <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802d01e:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802d022:	ea85 0001 	eor.w	r0, r5, r1
 802d026:	ea86 0302 	eor.w	r3, r6, r2
 802d02a:	4303      	orrs	r3, r0
 802d02c:	d01e      	beq.n	802d06c <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802d02e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802d030:	9600      	str	r6, [sp, #0]
 802d032:	114b      	asrs	r3, r1, #5
 802d034:	4283      	cmp	r3, r0
 802d036:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802d038:	bfb8      	it	lt
 802d03a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802d03c:	3301      	adds	r3, #1
 802d03e:	4283      	cmp	r3, r0
 802d040:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802d042:	bfc8      	it	gt
 802d044:	6363      	strgt	r3, [r4, #52]	; 0x34
 802d046:	116b      	asrs	r3, r5, #5
 802d048:	4283      	cmp	r3, r0
 802d04a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802d04c:	bfb8      	it	lt
 802d04e:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802d050:	3301      	adds	r3, #1
 802d052:	4283      	cmp	r3, r0
 802d054:	bfc8      	it	gt
 802d056:	6363      	strgt	r3, [r4, #52]	; 0x34
 802d058:	4620      	mov	r0, r4
 802d05a:	462b      	mov	r3, r5
 802d05c:	f7ff f9be 	bl	802c3dc <_ZN8touchgfx7Outline10renderLineEiiii>
 802d060:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802d062:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802d066:	f043 0301 	orr.w	r3, r3, #1
 802d06a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802d06c:	b002      	add	sp, #8
 802d06e:	bd70      	pop	{r4, r5, r6, pc}

0802d070 <_ZN8touchgfx7Outline6moveToEii>:
 802d070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d072:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802d074:	4615      	mov	r5, r2
 802d076:	079a      	lsls	r2, r3, #30
 802d078:	4604      	mov	r4, r0
 802d07a:	460e      	mov	r6, r1
 802d07c:	d401      	bmi.n	802d082 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802d07e:	f7ff f967 	bl	802c350 <_ZN8touchgfx7Outline5resetEv>
 802d082:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802d084:	07db      	lsls	r3, r3, #31
 802d086:	d504      	bpl.n	802d092 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802d088:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802d08c:	4620      	mov	r0, r4
 802d08e:	f7ff ffbf 	bl	802d010 <_ZN8touchgfx7Outline6lineToEii>
 802d092:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802d096:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802d09a:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802d09e:	f345 174f 	sbfx	r7, r5, #5, #16
 802d0a2:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802d0a6:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802d0aa:	428a      	cmp	r2, r1
 802d0ac:	d015      	beq.n	802d0da <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802d0ae:	8b61      	ldrh	r1, [r4, #26]
 802d0b0:	8b22      	ldrh	r2, [r4, #24]
 802d0b2:	430a      	orrs	r2, r1
 802d0b4:	d00b      	beq.n	802d0ce <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802d0b6:	2b00      	cmp	r3, #0
 802d0b8:	db09      	blt.n	802d0ce <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802d0ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802d0bc:	4293      	cmp	r3, r2
 802d0be:	da06      	bge.n	802d0ce <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802d0c0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802d0c4:	429a      	cmp	r2, r3
 802d0c6:	d30d      	bcc.n	802d0e4 <_ZN8touchgfx7Outline6moveToEii+0x74>
 802d0c8:	2301      	movs	r3, #1
 802d0ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802d0ce:	2300      	movs	r3, #0
 802d0d0:	f8a4 c014 	strh.w	ip, [r4, #20]
 802d0d4:	82e7      	strh	r7, [r4, #22]
 802d0d6:	8323      	strh	r3, [r4, #24]
 802d0d8:	8363      	strh	r3, [r4, #26]
 802d0da:	61e6      	str	r6, [r4, #28]
 802d0dc:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802d0e0:	62a5      	str	r5, [r4, #40]	; 0x28
 802d0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d0e4:	f104 0314 	add.w	r3, r4, #20
 802d0e8:	cb03      	ldmia	r3!, {r0, r1}
 802d0ea:	6922      	ldr	r2, [r4, #16]
 802d0ec:	6010      	str	r0, [r2, #0]
 802d0ee:	6051      	str	r1, [r2, #4]
 802d0f0:	6923      	ldr	r3, [r4, #16]
 802d0f2:	3308      	adds	r3, #8
 802d0f4:	6123      	str	r3, [r4, #16]
 802d0f6:	68a3      	ldr	r3, [r4, #8]
 802d0f8:	3301      	adds	r3, #1
 802d0fa:	60a3      	str	r3, [r4, #8]
 802d0fc:	e7e7      	b.n	802d0ce <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802d0fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802d0fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d102:	b0d1      	sub	sp, #324	; 0x144
 802d104:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802d108:	466c      	mov	r4, sp
 802d10a:	1a0d      	subs	r5, r1, r0
 802d10c:	2d48      	cmp	r5, #72	; 0x48
 802d10e:	f100 0208 	add.w	r2, r0, #8
 802d112:	f340 80bb 	ble.w	802d28c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802d116:	112d      	asrs	r5, r5, #4
 802d118:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802d11c:	f9b0 8000 	ldrsh.w	r8, [r0]
 802d120:	681e      	ldr	r6, [r3, #0]
 802d122:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802d126:	6006      	str	r6, [r0, #0]
 802d128:	685e      	ldr	r6, [r3, #4]
 802d12a:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802d12e:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802d132:	6046      	str	r6, [r0, #4]
 802d134:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802d138:	f8a3 e002 	strh.w	lr, [r3, #2]
 802d13c:	f8a3 c004 	strh.w	ip, [r3, #4]
 802d140:	80df      	strh	r7, [r3, #6]
 802d142:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802d146:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802d14a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802d14e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802d152:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802d156:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802d15a:	4565      	cmp	r5, ip
 802d15c:	f1a1 0308 	sub.w	r3, r1, #8
 802d160:	da0f      	bge.n	802d182 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802d162:	681d      	ldr	r5, [r3, #0]
 802d164:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802d168:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802d16c:	6015      	str	r5, [r2, #0]
 802d16e:	685d      	ldr	r5, [r3, #4]
 802d170:	6055      	str	r5, [r2, #4]
 802d172:	f821 7c08 	strh.w	r7, [r1, #-8]
 802d176:	f821 6c06 	strh.w	r6, [r1, #-6]
 802d17a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802d17e:	f821 cc02 	strh.w	ip, [r1, #-2]
 802d182:	f9b0 7000 	ldrsh.w	r7, [r0]
 802d186:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802d18a:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802d18e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802d192:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802d196:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802d19a:	45ac      	cmp	ip, r5
 802d19c:	da0d      	bge.n	802d1ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802d19e:	6815      	ldr	r5, [r2, #0]
 802d1a0:	6005      	str	r5, [r0, #0]
 802d1a2:	6855      	ldr	r5, [r2, #4]
 802d1a4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802d1a8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802d1ac:	8107      	strh	r7, [r0, #8]
 802d1ae:	6045      	str	r5, [r0, #4]
 802d1b0:	8146      	strh	r6, [r0, #10]
 802d1b2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802d1b6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802d1ba:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802d1be:	f9b0 7000 	ldrsh.w	r7, [r0]
 802d1c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802d1c6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802d1ca:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802d1ce:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802d1d2:	4565      	cmp	r5, ip
 802d1d4:	da0f      	bge.n	802d1f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802d1d6:	681d      	ldr	r5, [r3, #0]
 802d1d8:	6005      	str	r5, [r0, #0]
 802d1da:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802d1de:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802d1e2:	685d      	ldr	r5, [r3, #4]
 802d1e4:	6045      	str	r5, [r0, #4]
 802d1e6:	f821 7c08 	strh.w	r7, [r1, #-8]
 802d1ea:	f821 6c06 	strh.w	r6, [r1, #-6]
 802d1ee:	f821 ec04 	strh.w	lr, [r1, #-4]
 802d1f2:	f821 cc02 	strh.w	ip, [r1, #-2]
 802d1f6:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802d1fa:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802d1fe:	f9b0 e000 	ldrsh.w	lr, [r0]
 802d202:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802d206:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802d20a:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802d20e:	f102 0508 	add.w	r5, r2, #8
 802d212:	4556      	cmp	r6, sl
 802d214:	462f      	mov	r7, r5
 802d216:	db18      	blt.n	802d24a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802d218:	3b08      	subs	r3, #8
 802d21a:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802d21e:	f9b3 6000 	ldrsh.w	r6, [r3]
 802d222:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802d226:	45b2      	cmp	sl, r6
 802d228:	dbf6      	blt.n	802d218 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802d22a:	42ab      	cmp	r3, r5
 802d22c:	681e      	ldr	r6, [r3, #0]
 802d22e:	d30e      	bcc.n	802d24e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802d230:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802d234:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802d238:	602e      	str	r6, [r5, #0]
 802d23a:	685e      	ldr	r6, [r3, #4]
 802d23c:	606e      	str	r6, [r5, #4]
 802d23e:	f8a3 9000 	strh.w	r9, [r3]
 802d242:	f8a3 8002 	strh.w	r8, [r3, #2]
 802d246:	809f      	strh	r7, [r3, #4]
 802d248:	80da      	strh	r2, [r3, #6]
 802d24a:	462a      	mov	r2, r5
 802d24c:	e7d3      	b.n	802d1f6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802d24e:	6006      	str	r6, [r0, #0]
 802d250:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802d254:	685e      	ldr	r6, [r3, #4]
 802d256:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802d25a:	6046      	str	r6, [r0, #4]
 802d25c:	80da      	strh	r2, [r3, #6]
 802d25e:	1b4a      	subs	r2, r1, r5
 802d260:	1a1e      	subs	r6, r3, r0
 802d262:	10d2      	asrs	r2, r2, #3
 802d264:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802d268:	bfb8      	it	lt
 802d26a:	e9c4 0300 	strdlt	r0, r3, [r4]
 802d26e:	f8a3 e000 	strh.w	lr, [r3]
 802d272:	f8a3 c002 	strh.w	ip, [r3, #2]
 802d276:	f8a3 8004 	strh.w	r8, [r3, #4]
 802d27a:	bfaa      	itet	ge
 802d27c:	4607      	movge	r7, r0
 802d27e:	460b      	movlt	r3, r1
 802d280:	e9c4 5100 	strdge	r5, r1, [r4]
 802d284:	4638      	mov	r0, r7
 802d286:	3408      	adds	r4, #8
 802d288:	4619      	mov	r1, r3
 802d28a:	e73e      	b.n	802d10a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802d28c:	4291      	cmp	r1, r2
 802d28e:	d926      	bls.n	802d2de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e0>
 802d290:	f1a2 0310 	sub.w	r3, r2, #16
 802d294:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802d298:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802d29c:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802d2a0:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802d2a4:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802d2a8:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802d2ac:	42ae      	cmp	r6, r5
 802d2ae:	da14      	bge.n	802d2da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802d2b0:	461d      	mov	r5, r3
 802d2b2:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802d2b6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802d2ba:	611e      	str	r6, [r3, #16]
 802d2bc:	686e      	ldr	r6, [r5, #4]
 802d2be:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802d2c2:	f8a3 c008 	strh.w	ip, [r3, #8]
 802d2c6:	42a8      	cmp	r0, r5
 802d2c8:	615e      	str	r6, [r3, #20]
 802d2ca:	815f      	strh	r7, [r3, #10]
 802d2cc:	f8a3 800c 	strh.w	r8, [r3, #12]
 802d2d0:	f8a3 e00e 	strh.w	lr, [r3, #14]
 802d2d4:	f1a3 0308 	sub.w	r3, r3, #8
 802d2d8:	d1dc      	bne.n	802d294 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x196>
 802d2da:	3208      	adds	r2, #8
 802d2dc:	e7d6      	b.n	802d28c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802d2de:	466b      	mov	r3, sp
 802d2e0:	429c      	cmp	r4, r3
 802d2e2:	d903      	bls.n	802d2ec <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ee>
 802d2e4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802d2e8:	3c08      	subs	r4, #8
 802d2ea:	e70e      	b.n	802d10a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802d2ec:	b051      	add	sp, #324	; 0x144
 802d2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802d2f2 <_ZN8touchgfx7Outline9sortCellsEv>:
 802d2f2:	6881      	ldr	r1, [r0, #8]
 802d2f4:	b111      	cbz	r1, 802d2fc <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802d2f6:	68c0      	ldr	r0, [r0, #12]
 802d2f8:	f7ff bf01 	b.w	802d0fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802d2fc:	4770      	bx	lr

0802d2fe <_ZN8touchgfx7Outline8getCellsEv>:
 802d2fe:	b510      	push	{r4, lr}
 802d300:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802d302:	07da      	lsls	r2, r3, #31
 802d304:	4604      	mov	r4, r0
 802d306:	d507      	bpl.n	802d318 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802d308:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802d30c:	f7ff fe80 	bl	802d010 <_ZN8touchgfx7Outline6lineToEii>
 802d310:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802d312:	f023 0301 	bic.w	r3, r3, #1
 802d316:	63e3      	str	r3, [r4, #60]	; 0x3c
 802d318:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802d31a:	079b      	lsls	r3, r3, #30
 802d31c:	d51a      	bpl.n	802d354 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802d31e:	8b62      	ldrh	r2, [r4, #26]
 802d320:	8b23      	ldrh	r3, [r4, #24]
 802d322:	4313      	orrs	r3, r2
 802d324:	d00d      	beq.n	802d342 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802d326:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802d32a:	2b00      	cmp	r3, #0
 802d32c:	db09      	blt.n	802d342 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802d32e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802d330:	4293      	cmp	r3, r2
 802d332:	da06      	bge.n	802d342 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802d334:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802d338:	429a      	cmp	r2, r3
 802d33a:	d80d      	bhi.n	802d358 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802d33c:	2301      	movs	r3, #1
 802d33e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802d342:	68a0      	ldr	r0, [r4, #8]
 802d344:	b138      	cbz	r0, 802d356 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802d346:	4620      	mov	r0, r4
 802d348:	f7ff ffd3 	bl	802d2f2 <_ZN8touchgfx7Outline9sortCellsEv>
 802d34c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802d34e:	f023 0302 	bic.w	r3, r3, #2
 802d352:	63e3      	str	r3, [r4, #60]	; 0x3c
 802d354:	68e0      	ldr	r0, [r4, #12]
 802d356:	bd10      	pop	{r4, pc}
 802d358:	f104 0314 	add.w	r3, r4, #20
 802d35c:	cb03      	ldmia	r3!, {r0, r1}
 802d35e:	6922      	ldr	r2, [r4, #16]
 802d360:	6010      	str	r0, [r2, #0]
 802d362:	6051      	str	r1, [r2, #4]
 802d364:	6923      	ldr	r3, [r4, #16]
 802d366:	3308      	adds	r3, #8
 802d368:	6123      	str	r3, [r4, #16]
 802d36a:	68a3      	ldr	r3, [r4, #8]
 802d36c:	3301      	adds	r3, #1
 802d36e:	60a3      	str	r3, [r4, #8]
 802d370:	e7e7      	b.n	802d342 <_ZN8touchgfx7Outline8getCellsEv+0x44>
	...

0802d374 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 802d374:	b538      	push	{r3, r4, r5, lr}
 802d376:	4c2b      	ldr	r4, [pc, #172]	; (802d424 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 802d378:	4b2b      	ldr	r3, [pc, #172]	; (802d428 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 802d37a:	6821      	ldr	r1, [r4, #0]
 802d37c:	681a      	ldr	r2, [r3, #0]
 802d37e:	4d2b      	ldr	r5, [pc, #172]	; (802d42c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 802d380:	4281      	cmp	r1, r0
 802d382:	492b      	ldr	r1, [pc, #172]	; (802d430 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 802d384:	d108      	bne.n	802d398 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802d386:	682b      	ldr	r3, [r5, #0]
 802d388:	4293      	cmp	r3, r2
 802d38a:	d105      	bne.n	802d398 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802d38c:	6808      	ldr	r0, [r1, #0]
 802d38e:	280f      	cmp	r0, #15
 802d390:	bf94      	ite	ls
 802d392:	2000      	movls	r0, #0
 802d394:	2001      	movhi	r0, #1
 802d396:	bd38      	pop	{r3, r4, r5, pc}
 802d398:	4b26      	ldr	r3, [pc, #152]	; (802d434 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 802d39a:	6020      	str	r0, [r4, #0]
 802d39c:	681b      	ldr	r3, [r3, #0]
 802d39e:	602a      	str	r2, [r5, #0]
 802d3a0:	4298      	cmp	r0, r3
 802d3a2:	d905      	bls.n	802d3b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 802d3a4:	4b24      	ldr	r3, [pc, #144]	; (802d438 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d3a6:	4a25      	ldr	r2, [pc, #148]	; (802d43c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d3a8:	2137      	movs	r1, #55	; 0x37
 802d3aa:	4825      	ldr	r0, [pc, #148]	; (802d440 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 802d3ac:	f000 ff32 	bl	802e214 <__assert_func>
 802d3b0:	f010 0403 	ands.w	r4, r0, #3
 802d3b4:	bf1f      	itttt	ne
 802d3b6:	f1c4 0504 	rsbne	r5, r4, #4
 802d3ba:	3b04      	subne	r3, #4
 802d3bc:	1952      	addne	r2, r2, r5
 802d3be:	191b      	addne	r3, r3, r4
 802d3c0:	4402      	add	r2, r0
 802d3c2:	1a1b      	subs	r3, r3, r0
 802d3c4:	3001      	adds	r0, #1
 802d3c6:	f020 0401 	bic.w	r4, r0, #1
 802d3ca:	4d1e      	ldr	r5, [pc, #120]	; (802d444 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 802d3cc:	42a3      	cmp	r3, r4
 802d3ce:	602a      	str	r2, [r5, #0]
 802d3d0:	d203      	bcs.n	802d3da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 802d3d2:	4b19      	ldr	r3, [pc, #100]	; (802d438 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d3d4:	4a19      	ldr	r2, [pc, #100]	; (802d43c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d3d6:	214a      	movs	r1, #74	; 0x4a
 802d3d8:	e7e7      	b.n	802d3aa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d3da:	f010 0002 	ands.w	r0, r0, #2
 802d3de:	bf1f      	itttt	ne
 802d3e0:	f1c0 0504 	rsbne	r5, r0, #4
 802d3e4:	1952      	addne	r2, r2, r5
 802d3e6:	1f05      	subne	r5, r0, #4
 802d3e8:	195b      	addne	r3, r3, r5
 802d3ea:	1b1b      	subs	r3, r3, r4
 802d3ec:	4d16      	ldr	r5, [pc, #88]	; (802d448 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 802d3ee:	4422      	add	r2, r4
 802d3f0:	429c      	cmp	r4, r3
 802d3f2:	602a      	str	r2, [r5, #0]
 802d3f4:	d903      	bls.n	802d3fe <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 802d3f6:	4b10      	ldr	r3, [pc, #64]	; (802d438 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d3f8:	4a10      	ldr	r2, [pc, #64]	; (802d43c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d3fa:	215d      	movs	r1, #93	; 0x5d
 802d3fc:	e7d5      	b.n	802d3aa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d3fe:	b120      	cbz	r0, 802d40a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 802d400:	f1c0 0504 	rsb	r5, r0, #4
 802d404:	3804      	subs	r0, #4
 802d406:	442a      	add	r2, r5
 802d408:	4403      	add	r3, r0
 802d40a:	1b1b      	subs	r3, r3, r4
 802d40c:	480f      	ldr	r0, [pc, #60]	; (802d44c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 802d40e:	600b      	str	r3, [r1, #0]
 802d410:	4422      	add	r2, r4
 802d412:	2b0f      	cmp	r3, #15
 802d414:	6002      	str	r2, [r0, #0]
 802d416:	d803      	bhi.n	802d420 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 802d418:	4b0d      	ldr	r3, [pc, #52]	; (802d450 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 802d41a:	4a08      	ldr	r2, [pc, #32]	; (802d43c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d41c:	2170      	movs	r1, #112	; 0x70
 802d41e:	e7c4      	b.n	802d3aa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d420:	2001      	movs	r0, #1
 802d422:	e7b8      	b.n	802d396 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 802d424:	20009924 	.word	0x20009924
 802d428:	2000991c 	.word	0x2000991c
 802d42c:	2000992c 	.word	0x2000992c
 802d430:	20009934 	.word	0x20009934
 802d434:	20009930 	.word	0x20009930
 802d438:	08033b28 	.word	0x08033b28
 802d43c:	08033bf0 	.word	0x08033bf0
 802d440:	08033b61 	.word	0x08033b61
 802d444:	20009938 	.word	0x20009938
 802d448:	20009928 	.word	0x20009928
 802d44c:	20009920 	.word	0x20009920
 802d450:	08033bab 	.word	0x08033bab

0802d454 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 802d454:	4b04      	ldr	r3, [pc, #16]	; (802d468 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 802d456:	6818      	ldr	r0, [r3, #0]
 802d458:	b120      	cbz	r0, 802d464 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 802d45a:	4b04      	ldr	r3, [pc, #16]	; (802d46c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 802d45c:	6818      	ldr	r0, [r3, #0]
 802d45e:	3000      	adds	r0, #0
 802d460:	bf18      	it	ne
 802d462:	2001      	movne	r0, #1
 802d464:	4770      	bx	lr
 802d466:	bf00      	nop
 802d468:	2000991c 	.word	0x2000991c
 802d46c:	20009930 	.word	0x20009930

0802d470 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 802d470:	4b01      	ldr	r3, [pc, #4]	; (802d478 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 802d472:	6818      	ldr	r0, [r3, #0]
 802d474:	4770      	bx	lr
 802d476:	bf00      	nop
 802d478:	20009924 	.word	0x20009924

0802d47c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 802d47c:	4b01      	ldr	r3, [pc, #4]	; (802d484 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 802d47e:	6818      	ldr	r0, [r3, #0]
 802d480:	4770      	bx	lr
 802d482:	bf00      	nop
 802d484:	2000992c 	.word	0x2000992c

0802d488 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 802d488:	4b01      	ldr	r3, [pc, #4]	; (802d490 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 802d48a:	6818      	ldr	r0, [r3, #0]
 802d48c:	4770      	bx	lr
 802d48e:	bf00      	nop
 802d490:	20009938 	.word	0x20009938

0802d494 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 802d494:	4b01      	ldr	r3, [pc, #4]	; (802d49c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 802d496:	6818      	ldr	r0, [r3, #0]
 802d498:	4770      	bx	lr
 802d49a:	bf00      	nop
 802d49c:	20009928 	.word	0x20009928

0802d4a0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 802d4a0:	4b01      	ldr	r3, [pc, #4]	; (802d4a8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 802d4a2:	6818      	ldr	r0, [r3, #0]
 802d4a4:	4770      	bx	lr
 802d4a6:	bf00      	nop
 802d4a8:	20009920 	.word	0x20009920

0802d4ac <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 802d4ac:	4b01      	ldr	r3, [pc, #4]	; (802d4b4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 802d4ae:	6818      	ldr	r0, [r3, #0]
 802d4b0:	4770      	bx	lr
 802d4b2:	bf00      	nop
 802d4b4:	20009934 	.word	0x20009934

0802d4b8 <_ZN8touchgfx8ScanlineD1Ev>:
 802d4b8:	4770      	bx	lr

0802d4ba <_ZN8touchgfx8ScanlineD0Ev>:
 802d4ba:	b510      	push	{r4, lr}
 802d4bc:	2124      	movs	r1, #36	; 0x24
 802d4be:	4604      	mov	r4, r0
 802d4c0:	f000 f889 	bl	802d5d6 <_ZdlPvj>
 802d4c4:	4620      	mov	r0, r4
 802d4c6:	bd10      	pop	{r4, pc}

0802d4c8 <_ZN8touchgfx8Scanline5resetEv>:
 802d4c8:	b510      	push	{r4, lr}
 802d4ca:	4604      	mov	r4, r0
 802d4cc:	f7ff ffd6 	bl	802d47c <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802d4d0:	61a0      	str	r0, [r4, #24]
 802d4d2:	f7ff ffd9 	bl	802d488 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802d4d6:	61e0      	str	r0, [r4, #28]
 802d4d8:	f7ff ffdc 	bl	802d494 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802d4dc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802d4e0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802d4e4:	69e3      	ldr	r3, [r4, #28]
 802d4e6:	6123      	str	r3, [r4, #16]
 802d4e8:	2300      	movs	r3, #0
 802d4ea:	6220      	str	r0, [r4, #32]
 802d4ec:	6160      	str	r0, [r4, #20]
 802d4ee:	60e3      	str	r3, [r4, #12]
 802d4f0:	bd10      	pop	{r4, pc}
	...

0802d4f4 <_ZN8touchgfx8ScanlineC1Ev>:
 802d4f4:	b510      	push	{r4, lr}
 802d4f6:	4b09      	ldr	r3, [pc, #36]	; (802d51c <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 802d4f8:	6003      	str	r3, [r0, #0]
 802d4fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802d4fe:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802d502:	2300      	movs	r3, #0
 802d504:	4604      	mov	r4, r0
 802d506:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802d50a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802d50e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802d512:	f7ff ffd9 	bl	802d4c8 <_ZN8touchgfx8Scanline5resetEv>
 802d516:	4620      	mov	r0, r4
 802d518:	bd10      	pop	{r4, pc}
 802d51a:	bf00      	nop
 802d51c:	08033c44 	.word	0x08033c44

0802d520 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802d520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d524:	1e0c      	subs	r4, r1, #0
 802d526:	4605      	mov	r5, r0
 802d528:	4617      	mov	r7, r2
 802d52a:	461e      	mov	r6, r3
 802d52c:	da03      	bge.n	802d536 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802d52e:	4426      	add	r6, r4
 802d530:	2e01      	cmp	r6, #1
 802d532:	d421      	bmi.n	802d578 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802d534:	2400      	movs	r4, #0
 802d536:	f7ff ff9b 	bl	802d470 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d53a:	42a0      	cmp	r0, r4
 802d53c:	dd1c      	ble.n	802d578 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802d53e:	f7ff ff97 	bl	802d470 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d542:	eb04 0806 	add.w	r8, r4, r6
 802d546:	4580      	cmp	r8, r0
 802d548:	d902      	bls.n	802d550 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802d54a:	f7ff ff91 	bl	802d470 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d54e:	1b06      	subs	r6, r0, r4
 802d550:	69a8      	ldr	r0, [r5, #24]
 802d552:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802d556:	4632      	mov	r2, r6
 802d558:	4420      	add	r0, r4
 802d55a:	f7f0 f83d 	bl	801d5d8 <_ZN8touchgfx6memsetEPvhm>
 802d55e:	686b      	ldr	r3, [r5, #4]
 802d560:	3301      	adds	r3, #1
 802d562:	42a3      	cmp	r3, r4
 802d564:	b2b2      	uxth	r2, r6
 802d566:	696b      	ldr	r3, [r5, #20]
 802d568:	d108      	bne.n	802d57c <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802d56a:	8819      	ldrh	r1, [r3, #0]
 802d56c:	440a      	add	r2, r1
 802d56e:	801a      	strh	r2, [r3, #0]
 802d570:	3c01      	subs	r4, #1
 802d572:	4434      	add	r4, r6
 802d574:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802d578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d57c:	1c99      	adds	r1, r3, #2
 802d57e:	6169      	str	r1, [r5, #20]
 802d580:	805a      	strh	r2, [r3, #2]
 802d582:	692b      	ldr	r3, [r5, #16]
 802d584:	1c9a      	adds	r2, r3, #2
 802d586:	612a      	str	r2, [r5, #16]
 802d588:	805c      	strh	r4, [r3, #2]
 802d58a:	68eb      	ldr	r3, [r5, #12]
 802d58c:	3301      	adds	r3, #1
 802d58e:	60eb      	str	r3, [r5, #12]
 802d590:	e7ee      	b.n	802d570 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802d592 <_ZN8touchgfx15RenderingBufferD1Ev>:
 802d592:	4770      	bx	lr

0802d594 <_ZN8touchgfx15RenderingBufferD0Ev>:
 802d594:	b510      	push	{r4, lr}
 802d596:	2118      	movs	r1, #24
 802d598:	4604      	mov	r4, r0
 802d59a:	f000 f81c 	bl	802d5d6 <_ZdlPvj>
 802d59e:	4620      	mov	r0, r4
 802d5a0:	bd10      	pop	{r4, pc}
	...

0802d5a4 <_ZN8touchgfx15RenderingBufferC1Ev>:
 802d5a4:	4a04      	ldr	r2, [pc, #16]	; (802d5b8 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802d5a6:	6002      	str	r2, [r0, #0]
 802d5a8:	2200      	movs	r2, #0
 802d5aa:	6042      	str	r2, [r0, #4]
 802d5ac:	7202      	strb	r2, [r0, #8]
 802d5ae:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802d5b2:	6142      	str	r2, [r0, #20]
 802d5b4:	4770      	bx	lr
 802d5b6:	bf00      	nop
 802d5b8:	08033c54 	.word	0x08033c54

0802d5bc <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802d5bc:	60c3      	str	r3, [r0, #12]
 802d5be:	9b00      	ldr	r3, [sp, #0]
 802d5c0:	6103      	str	r3, [r0, #16]
 802d5c2:	9b01      	ldr	r3, [sp, #4]
 802d5c4:	6041      	str	r1, [r0, #4]
 802d5c6:	7202      	strb	r2, [r0, #8]
 802d5c8:	6143      	str	r3, [r0, #20]
 802d5ca:	4770      	bx	lr

0802d5cc <__aeabi_atexit>:
 802d5cc:	460b      	mov	r3, r1
 802d5ce:	4601      	mov	r1, r0
 802d5d0:	4618      	mov	r0, r3
 802d5d2:	f000 be4b 	b.w	802e26c <__cxa_atexit>

0802d5d6 <_ZdlPvj>:
 802d5d6:	f000 b812 	b.w	802d5fe <_ZdlPv>

0802d5da <__cxa_guard_acquire>:
 802d5da:	6803      	ldr	r3, [r0, #0]
 802d5dc:	07db      	lsls	r3, r3, #31
 802d5de:	d406      	bmi.n	802d5ee <__cxa_guard_acquire+0x14>
 802d5e0:	7843      	ldrb	r3, [r0, #1]
 802d5e2:	b103      	cbz	r3, 802d5e6 <__cxa_guard_acquire+0xc>
 802d5e4:	deff      	udf	#255	; 0xff
 802d5e6:	2301      	movs	r3, #1
 802d5e8:	7043      	strb	r3, [r0, #1]
 802d5ea:	4618      	mov	r0, r3
 802d5ec:	4770      	bx	lr
 802d5ee:	2000      	movs	r0, #0
 802d5f0:	4770      	bx	lr

0802d5f2 <__cxa_guard_release>:
 802d5f2:	2301      	movs	r3, #1
 802d5f4:	6003      	str	r3, [r0, #0]
 802d5f6:	4770      	bx	lr

0802d5f8 <__cxa_pure_virtual>:
 802d5f8:	b508      	push	{r3, lr}
 802d5fa:	f000 f80f 	bl	802d61c <_ZSt9terminatev>

0802d5fe <_ZdlPv>:
 802d5fe:	f000 bf81 	b.w	802e504 <free>

0802d602 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802d602:	b508      	push	{r3, lr}
 802d604:	4780      	blx	r0
 802d606:	f000 fdfd 	bl	802e204 <abort>
	...

0802d60c <_ZSt13get_terminatev>:
 802d60c:	4b02      	ldr	r3, [pc, #8]	; (802d618 <_ZSt13get_terminatev+0xc>)
 802d60e:	6818      	ldr	r0, [r3, #0]
 802d610:	f3bf 8f5b 	dmb	ish
 802d614:	4770      	bx	lr
 802d616:	bf00      	nop
 802d618:	20000094 	.word	0x20000094

0802d61c <_ZSt9terminatev>:
 802d61c:	b508      	push	{r3, lr}
 802d61e:	f7ff fff5 	bl	802d60c <_ZSt13get_terminatev>
 802d622:	f7ff ffee 	bl	802d602 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802d628 <ceilf>:
 802d628:	ee10 3a10 	vmov	r3, s0
 802d62c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d630:	3a7f      	subs	r2, #127	; 0x7f
 802d632:	2a16      	cmp	r2, #22
 802d634:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d638:	dc2a      	bgt.n	802d690 <ceilf+0x68>
 802d63a:	2a00      	cmp	r2, #0
 802d63c:	da11      	bge.n	802d662 <ceilf+0x3a>
 802d63e:	eddf 7a19 	vldr	s15, [pc, #100]	; 802d6a4 <ceilf+0x7c>
 802d642:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d646:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d64e:	dd05      	ble.n	802d65c <ceilf+0x34>
 802d650:	2b00      	cmp	r3, #0
 802d652:	db23      	blt.n	802d69c <ceilf+0x74>
 802d654:	2900      	cmp	r1, #0
 802d656:	bf18      	it	ne
 802d658:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802d65c:	ee00 3a10 	vmov	s0, r3
 802d660:	4770      	bx	lr
 802d662:	4911      	ldr	r1, [pc, #68]	; (802d6a8 <ceilf+0x80>)
 802d664:	4111      	asrs	r1, r2
 802d666:	420b      	tst	r3, r1
 802d668:	d0fa      	beq.n	802d660 <ceilf+0x38>
 802d66a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802d6a4 <ceilf+0x7c>
 802d66e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d672:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d67a:	ddef      	ble.n	802d65c <ceilf+0x34>
 802d67c:	2b00      	cmp	r3, #0
 802d67e:	bfc2      	ittt	gt
 802d680:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802d684:	fa40 f202 	asrgt.w	r2, r0, r2
 802d688:	189b      	addgt	r3, r3, r2
 802d68a:	ea23 0301 	bic.w	r3, r3, r1
 802d68e:	e7e5      	b.n	802d65c <ceilf+0x34>
 802d690:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802d694:	d3e4      	bcc.n	802d660 <ceilf+0x38>
 802d696:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d69a:	4770      	bx	lr
 802d69c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802d6a0:	e7dc      	b.n	802d65c <ceilf+0x34>
 802d6a2:	bf00      	nop
 802d6a4:	7149f2ca 	.word	0x7149f2ca
 802d6a8:	007fffff 	.word	0x007fffff

0802d6ac <cosf>:
 802d6ac:	ee10 3a10 	vmov	r3, s0
 802d6b0:	b507      	push	{r0, r1, r2, lr}
 802d6b2:	4a1c      	ldr	r2, [pc, #112]	; (802d724 <cosf+0x78>)
 802d6b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d6b8:	4293      	cmp	r3, r2
 802d6ba:	dc04      	bgt.n	802d6c6 <cosf+0x1a>
 802d6bc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802d728 <cosf+0x7c>
 802d6c0:	f000 f9f4 	bl	802daac <__kernel_cosf>
 802d6c4:	e004      	b.n	802d6d0 <cosf+0x24>
 802d6c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802d6ca:	db04      	blt.n	802d6d6 <cosf+0x2a>
 802d6cc:	ee30 0a40 	vsub.f32	s0, s0, s0
 802d6d0:	b003      	add	sp, #12
 802d6d2:	f85d fb04 	ldr.w	pc, [sp], #4
 802d6d6:	4668      	mov	r0, sp
 802d6d8:	f000 f8ac 	bl	802d834 <__ieee754_rem_pio2f>
 802d6dc:	f000 0003 	and.w	r0, r0, #3
 802d6e0:	2801      	cmp	r0, #1
 802d6e2:	d007      	beq.n	802d6f4 <cosf+0x48>
 802d6e4:	2802      	cmp	r0, #2
 802d6e6:	d00e      	beq.n	802d706 <cosf+0x5a>
 802d6e8:	b9a0      	cbnz	r0, 802d714 <cosf+0x68>
 802d6ea:	eddd 0a01 	vldr	s1, [sp, #4]
 802d6ee:	ed9d 0a00 	vldr	s0, [sp]
 802d6f2:	e7e5      	b.n	802d6c0 <cosf+0x14>
 802d6f4:	eddd 0a01 	vldr	s1, [sp, #4]
 802d6f8:	ed9d 0a00 	vldr	s0, [sp]
 802d6fc:	f000 fcc0 	bl	802e080 <__kernel_sinf>
 802d700:	eeb1 0a40 	vneg.f32	s0, s0
 802d704:	e7e4      	b.n	802d6d0 <cosf+0x24>
 802d706:	eddd 0a01 	vldr	s1, [sp, #4]
 802d70a:	ed9d 0a00 	vldr	s0, [sp]
 802d70e:	f000 f9cd 	bl	802daac <__kernel_cosf>
 802d712:	e7f5      	b.n	802d700 <cosf+0x54>
 802d714:	eddd 0a01 	vldr	s1, [sp, #4]
 802d718:	ed9d 0a00 	vldr	s0, [sp]
 802d71c:	2001      	movs	r0, #1
 802d71e:	f000 fcaf 	bl	802e080 <__kernel_sinf>
 802d722:	e7d5      	b.n	802d6d0 <cosf+0x24>
 802d724:	3f490fd8 	.word	0x3f490fd8
 802d728:	00000000 	.word	0x00000000

0802d72c <floorf>:
 802d72c:	ee10 3a10 	vmov	r3, s0
 802d730:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d734:	3a7f      	subs	r2, #127	; 0x7f
 802d736:	2a16      	cmp	r2, #22
 802d738:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d73c:	dc2a      	bgt.n	802d794 <floorf+0x68>
 802d73e:	2a00      	cmp	r2, #0
 802d740:	da11      	bge.n	802d766 <floorf+0x3a>
 802d742:	eddf 7a18 	vldr	s15, [pc, #96]	; 802d7a4 <floorf+0x78>
 802d746:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d74a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d752:	dd05      	ble.n	802d760 <floorf+0x34>
 802d754:	2b00      	cmp	r3, #0
 802d756:	da23      	bge.n	802d7a0 <floorf+0x74>
 802d758:	4a13      	ldr	r2, [pc, #76]	; (802d7a8 <floorf+0x7c>)
 802d75a:	2900      	cmp	r1, #0
 802d75c:	bf18      	it	ne
 802d75e:	4613      	movne	r3, r2
 802d760:	ee00 3a10 	vmov	s0, r3
 802d764:	4770      	bx	lr
 802d766:	4911      	ldr	r1, [pc, #68]	; (802d7ac <floorf+0x80>)
 802d768:	4111      	asrs	r1, r2
 802d76a:	420b      	tst	r3, r1
 802d76c:	d0fa      	beq.n	802d764 <floorf+0x38>
 802d76e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802d7a4 <floorf+0x78>
 802d772:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d776:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d77e:	ddef      	ble.n	802d760 <floorf+0x34>
 802d780:	2b00      	cmp	r3, #0
 802d782:	bfbe      	ittt	lt
 802d784:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802d788:	fa40 f202 	asrlt.w	r2, r0, r2
 802d78c:	189b      	addlt	r3, r3, r2
 802d78e:	ea23 0301 	bic.w	r3, r3, r1
 802d792:	e7e5      	b.n	802d760 <floorf+0x34>
 802d794:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802d798:	d3e4      	bcc.n	802d764 <floorf+0x38>
 802d79a:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d79e:	4770      	bx	lr
 802d7a0:	2300      	movs	r3, #0
 802d7a2:	e7dd      	b.n	802d760 <floorf+0x34>
 802d7a4:	7149f2ca 	.word	0x7149f2ca
 802d7a8:	bf800000 	.word	0xbf800000
 802d7ac:	007fffff 	.word	0x007fffff

0802d7b0 <sinf>:
 802d7b0:	ee10 3a10 	vmov	r3, s0
 802d7b4:	b507      	push	{r0, r1, r2, lr}
 802d7b6:	4a1d      	ldr	r2, [pc, #116]	; (802d82c <sinf+0x7c>)
 802d7b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d7bc:	4293      	cmp	r3, r2
 802d7be:	dc05      	bgt.n	802d7cc <sinf+0x1c>
 802d7c0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802d830 <sinf+0x80>
 802d7c4:	2000      	movs	r0, #0
 802d7c6:	f000 fc5b 	bl	802e080 <__kernel_sinf>
 802d7ca:	e004      	b.n	802d7d6 <sinf+0x26>
 802d7cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802d7d0:	db04      	blt.n	802d7dc <sinf+0x2c>
 802d7d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 802d7d6:	b003      	add	sp, #12
 802d7d8:	f85d fb04 	ldr.w	pc, [sp], #4
 802d7dc:	4668      	mov	r0, sp
 802d7de:	f000 f829 	bl	802d834 <__ieee754_rem_pio2f>
 802d7e2:	f000 0003 	and.w	r0, r0, #3
 802d7e6:	2801      	cmp	r0, #1
 802d7e8:	d008      	beq.n	802d7fc <sinf+0x4c>
 802d7ea:	2802      	cmp	r0, #2
 802d7ec:	d00d      	beq.n	802d80a <sinf+0x5a>
 802d7ee:	b9b0      	cbnz	r0, 802d81e <sinf+0x6e>
 802d7f0:	eddd 0a01 	vldr	s1, [sp, #4]
 802d7f4:	ed9d 0a00 	vldr	s0, [sp]
 802d7f8:	2001      	movs	r0, #1
 802d7fa:	e7e4      	b.n	802d7c6 <sinf+0x16>
 802d7fc:	eddd 0a01 	vldr	s1, [sp, #4]
 802d800:	ed9d 0a00 	vldr	s0, [sp]
 802d804:	f000 f952 	bl	802daac <__kernel_cosf>
 802d808:	e7e5      	b.n	802d7d6 <sinf+0x26>
 802d80a:	eddd 0a01 	vldr	s1, [sp, #4]
 802d80e:	ed9d 0a00 	vldr	s0, [sp]
 802d812:	2001      	movs	r0, #1
 802d814:	f000 fc34 	bl	802e080 <__kernel_sinf>
 802d818:	eeb1 0a40 	vneg.f32	s0, s0
 802d81c:	e7db      	b.n	802d7d6 <sinf+0x26>
 802d81e:	eddd 0a01 	vldr	s1, [sp, #4]
 802d822:	ed9d 0a00 	vldr	s0, [sp]
 802d826:	f000 f941 	bl	802daac <__kernel_cosf>
 802d82a:	e7f5      	b.n	802d818 <sinf+0x68>
 802d82c:	3f490fd8 	.word	0x3f490fd8
 802d830:	00000000 	.word	0x00000000

0802d834 <__ieee754_rem_pio2f>:
 802d834:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d836:	ee10 6a10 	vmov	r6, s0
 802d83a:	4b8e      	ldr	r3, [pc, #568]	; (802da74 <__ieee754_rem_pio2f+0x240>)
 802d83c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802d840:	429d      	cmp	r5, r3
 802d842:	b087      	sub	sp, #28
 802d844:	eef0 7a40 	vmov.f32	s15, s0
 802d848:	4604      	mov	r4, r0
 802d84a:	dc05      	bgt.n	802d858 <__ieee754_rem_pio2f+0x24>
 802d84c:	2300      	movs	r3, #0
 802d84e:	ed80 0a00 	vstr	s0, [r0]
 802d852:	6043      	str	r3, [r0, #4]
 802d854:	2000      	movs	r0, #0
 802d856:	e01a      	b.n	802d88e <__ieee754_rem_pio2f+0x5a>
 802d858:	4b87      	ldr	r3, [pc, #540]	; (802da78 <__ieee754_rem_pio2f+0x244>)
 802d85a:	429d      	cmp	r5, r3
 802d85c:	dc46      	bgt.n	802d8ec <__ieee754_rem_pio2f+0xb8>
 802d85e:	2e00      	cmp	r6, #0
 802d860:	ed9f 0a86 	vldr	s0, [pc, #536]	; 802da7c <__ieee754_rem_pio2f+0x248>
 802d864:	4b86      	ldr	r3, [pc, #536]	; (802da80 <__ieee754_rem_pio2f+0x24c>)
 802d866:	f025 050f 	bic.w	r5, r5, #15
 802d86a:	dd1f      	ble.n	802d8ac <__ieee754_rem_pio2f+0x78>
 802d86c:	429d      	cmp	r5, r3
 802d86e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d872:	d00e      	beq.n	802d892 <__ieee754_rem_pio2f+0x5e>
 802d874:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802da84 <__ieee754_rem_pio2f+0x250>
 802d878:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802d87c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d880:	ed80 0a00 	vstr	s0, [r0]
 802d884:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d888:	2001      	movs	r0, #1
 802d88a:	edc4 7a01 	vstr	s15, [r4, #4]
 802d88e:	b007      	add	sp, #28
 802d890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d892:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 802da88 <__ieee754_rem_pio2f+0x254>
 802d896:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802da8c <__ieee754_rem_pio2f+0x258>
 802d89a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d89e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802d8a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d8a6:	edc0 6a00 	vstr	s13, [r0]
 802d8aa:	e7eb      	b.n	802d884 <__ieee754_rem_pio2f+0x50>
 802d8ac:	429d      	cmp	r5, r3
 802d8ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 802d8b2:	d00e      	beq.n	802d8d2 <__ieee754_rem_pio2f+0x9e>
 802d8b4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802da84 <__ieee754_rem_pio2f+0x250>
 802d8b8:	ee37 0a87 	vadd.f32	s0, s15, s14
 802d8bc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d8c0:	ed80 0a00 	vstr	s0, [r0]
 802d8c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d8c8:	f04f 30ff 	mov.w	r0, #4294967295
 802d8cc:	edc4 7a01 	vstr	s15, [r4, #4]
 802d8d0:	e7dd      	b.n	802d88e <__ieee754_rem_pio2f+0x5a>
 802d8d2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 802da88 <__ieee754_rem_pio2f+0x254>
 802d8d6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 802da8c <__ieee754_rem_pio2f+0x258>
 802d8da:	ee77 7a80 	vadd.f32	s15, s15, s0
 802d8de:	ee77 6a87 	vadd.f32	s13, s15, s14
 802d8e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d8e6:	edc0 6a00 	vstr	s13, [r0]
 802d8ea:	e7eb      	b.n	802d8c4 <__ieee754_rem_pio2f+0x90>
 802d8ec:	4b68      	ldr	r3, [pc, #416]	; (802da90 <__ieee754_rem_pio2f+0x25c>)
 802d8ee:	429d      	cmp	r5, r3
 802d8f0:	dc72      	bgt.n	802d9d8 <__ieee754_rem_pio2f+0x1a4>
 802d8f2:	f000 fc0d 	bl	802e110 <fabsf>
 802d8f6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802da94 <__ieee754_rem_pio2f+0x260>
 802d8fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802d8fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 802d902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802d90a:	ee17 0a90 	vmov	r0, s15
 802d90e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802da7c <__ieee754_rem_pio2f+0x248>
 802d912:	eea7 0a67 	vfms.f32	s0, s14, s15
 802d916:	281f      	cmp	r0, #31
 802d918:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802da84 <__ieee754_rem_pio2f+0x250>
 802d91c:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d920:	eeb1 6a47 	vneg.f32	s12, s14
 802d924:	ee70 6a67 	vsub.f32	s13, s0, s15
 802d928:	ee16 2a90 	vmov	r2, s13
 802d92c:	dc1c      	bgt.n	802d968 <__ieee754_rem_pio2f+0x134>
 802d92e:	495a      	ldr	r1, [pc, #360]	; (802da98 <__ieee754_rem_pio2f+0x264>)
 802d930:	1e47      	subs	r7, r0, #1
 802d932:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802d936:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802d93a:	428b      	cmp	r3, r1
 802d93c:	d014      	beq.n	802d968 <__ieee754_rem_pio2f+0x134>
 802d93e:	6022      	str	r2, [r4, #0]
 802d940:	ed94 7a00 	vldr	s14, [r4]
 802d944:	ee30 0a47 	vsub.f32	s0, s0, s14
 802d948:	2e00      	cmp	r6, #0
 802d94a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d94e:	ed84 0a01 	vstr	s0, [r4, #4]
 802d952:	da9c      	bge.n	802d88e <__ieee754_rem_pio2f+0x5a>
 802d954:	eeb1 7a47 	vneg.f32	s14, s14
 802d958:	eeb1 0a40 	vneg.f32	s0, s0
 802d95c:	ed84 7a00 	vstr	s14, [r4]
 802d960:	ed84 0a01 	vstr	s0, [r4, #4]
 802d964:	4240      	negs	r0, r0
 802d966:	e792      	b.n	802d88e <__ieee754_rem_pio2f+0x5a>
 802d968:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d96c:	15eb      	asrs	r3, r5, #23
 802d96e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802d972:	2d08      	cmp	r5, #8
 802d974:	dde3      	ble.n	802d93e <__ieee754_rem_pio2f+0x10a>
 802d976:	eddf 7a44 	vldr	s15, [pc, #272]	; 802da88 <__ieee754_rem_pio2f+0x254>
 802d97a:	eef0 6a40 	vmov.f32	s13, s0
 802d97e:	eee6 6a27 	vfma.f32	s13, s12, s15
 802d982:	ee30 0a66 	vsub.f32	s0, s0, s13
 802d986:	eea6 0a27 	vfma.f32	s0, s12, s15
 802d98a:	eddf 7a40 	vldr	s15, [pc, #256]	; 802da8c <__ieee754_rem_pio2f+0x258>
 802d98e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 802d992:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802d996:	eef0 7a40 	vmov.f32	s15, s0
 802d99a:	ee15 2a90 	vmov	r2, s11
 802d99e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d9a2:	1a5b      	subs	r3, r3, r1
 802d9a4:	2b19      	cmp	r3, #25
 802d9a6:	dc04      	bgt.n	802d9b2 <__ieee754_rem_pio2f+0x17e>
 802d9a8:	edc4 5a00 	vstr	s11, [r4]
 802d9ac:	eeb0 0a66 	vmov.f32	s0, s13
 802d9b0:	e7c6      	b.n	802d940 <__ieee754_rem_pio2f+0x10c>
 802d9b2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802da9c <__ieee754_rem_pio2f+0x268>
 802d9b6:	eeb0 0a66 	vmov.f32	s0, s13
 802d9ba:	eea6 0a25 	vfma.f32	s0, s12, s11
 802d9be:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802d9c2:	eddf 6a37 	vldr	s13, [pc, #220]	; 802daa0 <__ieee754_rem_pio2f+0x26c>
 802d9c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d9ca:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802d9ce:	ee30 7a67 	vsub.f32	s14, s0, s15
 802d9d2:	ed84 7a00 	vstr	s14, [r4]
 802d9d6:	e7b3      	b.n	802d940 <__ieee754_rem_pio2f+0x10c>
 802d9d8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802d9dc:	db06      	blt.n	802d9ec <__ieee754_rem_pio2f+0x1b8>
 802d9de:	ee70 7a40 	vsub.f32	s15, s0, s0
 802d9e2:	edc0 7a01 	vstr	s15, [r0, #4]
 802d9e6:	edc0 7a00 	vstr	s15, [r0]
 802d9ea:	e733      	b.n	802d854 <__ieee754_rem_pio2f+0x20>
 802d9ec:	15ea      	asrs	r2, r5, #23
 802d9ee:	3a86      	subs	r2, #134	; 0x86
 802d9f0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802d9f4:	ee07 3a90 	vmov	s15, r3
 802d9f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d9fc:	eddf 6a29 	vldr	s13, [pc, #164]	; 802daa4 <__ieee754_rem_pio2f+0x270>
 802da00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802da04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802da08:	ed8d 7a03 	vstr	s14, [sp, #12]
 802da0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802da10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802da14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802da18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802da1c:	ed8d 7a04 	vstr	s14, [sp, #16]
 802da20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802da24:	eef5 7a40 	vcmp.f32	s15, #0.0
 802da28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802da2c:	edcd 7a05 	vstr	s15, [sp, #20]
 802da30:	d11e      	bne.n	802da70 <__ieee754_rem_pio2f+0x23c>
 802da32:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802da36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802da3a:	bf14      	ite	ne
 802da3c:	2302      	movne	r3, #2
 802da3e:	2301      	moveq	r3, #1
 802da40:	4919      	ldr	r1, [pc, #100]	; (802daa8 <__ieee754_rem_pio2f+0x274>)
 802da42:	9101      	str	r1, [sp, #4]
 802da44:	2102      	movs	r1, #2
 802da46:	9100      	str	r1, [sp, #0]
 802da48:	a803      	add	r0, sp, #12
 802da4a:	4621      	mov	r1, r4
 802da4c:	f000 f88e 	bl	802db6c <__kernel_rem_pio2f>
 802da50:	2e00      	cmp	r6, #0
 802da52:	f6bf af1c 	bge.w	802d88e <__ieee754_rem_pio2f+0x5a>
 802da56:	edd4 7a00 	vldr	s15, [r4]
 802da5a:	eef1 7a67 	vneg.f32	s15, s15
 802da5e:	edc4 7a00 	vstr	s15, [r4]
 802da62:	edd4 7a01 	vldr	s15, [r4, #4]
 802da66:	eef1 7a67 	vneg.f32	s15, s15
 802da6a:	edc4 7a01 	vstr	s15, [r4, #4]
 802da6e:	e779      	b.n	802d964 <__ieee754_rem_pio2f+0x130>
 802da70:	2303      	movs	r3, #3
 802da72:	e7e5      	b.n	802da40 <__ieee754_rem_pio2f+0x20c>
 802da74:	3f490fd8 	.word	0x3f490fd8
 802da78:	4016cbe3 	.word	0x4016cbe3
 802da7c:	3fc90f80 	.word	0x3fc90f80
 802da80:	3fc90fd0 	.word	0x3fc90fd0
 802da84:	37354443 	.word	0x37354443
 802da88:	37354400 	.word	0x37354400
 802da8c:	2e85a308 	.word	0x2e85a308
 802da90:	43490f80 	.word	0x43490f80
 802da94:	3f22f984 	.word	0x3f22f984
 802da98:	08033c5c 	.word	0x08033c5c
 802da9c:	2e85a300 	.word	0x2e85a300
 802daa0:	248d3132 	.word	0x248d3132
 802daa4:	43800000 	.word	0x43800000
 802daa8:	08033cdc 	.word	0x08033cdc

0802daac <__kernel_cosf>:
 802daac:	ee10 3a10 	vmov	r3, s0
 802dab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802dab4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802dab8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802dabc:	da05      	bge.n	802daca <__kernel_cosf+0x1e>
 802dabe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802dac2:	ee17 2a90 	vmov	r2, s15
 802dac6:	2a00      	cmp	r2, #0
 802dac8:	d03d      	beq.n	802db46 <__kernel_cosf+0x9a>
 802daca:	ee60 5a00 	vmul.f32	s11, s0, s0
 802dace:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802db4c <__kernel_cosf+0xa0>
 802dad2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 802db50 <__kernel_cosf+0xa4>
 802dad6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 802db54 <__kernel_cosf+0xa8>
 802dada:	4a1f      	ldr	r2, [pc, #124]	; (802db58 <__kernel_cosf+0xac>)
 802dadc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802dae0:	4293      	cmp	r3, r2
 802dae2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802db5c <__kernel_cosf+0xb0>
 802dae6:	eee7 7a25 	vfma.f32	s15, s14, s11
 802daea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 802db60 <__kernel_cosf+0xb4>
 802daee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802daf2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802db64 <__kernel_cosf+0xb8>
 802daf6:	eee7 7a25 	vfma.f32	s15, s14, s11
 802dafa:	eeb0 7a66 	vmov.f32	s14, s13
 802dafe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802db02:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802db06:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802db0a:	ee67 6a25 	vmul.f32	s13, s14, s11
 802db0e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802db12:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802db16:	dc04      	bgt.n	802db22 <__kernel_cosf+0x76>
 802db18:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802db1c:	ee36 0a47 	vsub.f32	s0, s12, s14
 802db20:	4770      	bx	lr
 802db22:	4a11      	ldr	r2, [pc, #68]	; (802db68 <__kernel_cosf+0xbc>)
 802db24:	4293      	cmp	r3, r2
 802db26:	bfda      	itte	le
 802db28:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802db2c:	ee06 3a90 	vmovle	s13, r3
 802db30:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 802db34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802db38:	ee36 0a66 	vsub.f32	s0, s12, s13
 802db3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802db40:	ee30 0a67 	vsub.f32	s0, s0, s15
 802db44:	4770      	bx	lr
 802db46:	eeb0 0a46 	vmov.f32	s0, s12
 802db4a:	4770      	bx	lr
 802db4c:	ad47d74e 	.word	0xad47d74e
 802db50:	310f74f6 	.word	0x310f74f6
 802db54:	3d2aaaab 	.word	0x3d2aaaab
 802db58:	3e999999 	.word	0x3e999999
 802db5c:	b493f27c 	.word	0xb493f27c
 802db60:	37d00d01 	.word	0x37d00d01
 802db64:	bab60b61 	.word	0xbab60b61
 802db68:	3f480000 	.word	0x3f480000

0802db6c <__kernel_rem_pio2f>:
 802db6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802db70:	ed2d 8b04 	vpush	{d8-d9}
 802db74:	b0d7      	sub	sp, #348	; 0x15c
 802db76:	4616      	mov	r6, r2
 802db78:	4698      	mov	r8, r3
 802db7a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802db7c:	4bbb      	ldr	r3, [pc, #748]	; (802de6c <__kernel_rem_pio2f+0x300>)
 802db7e:	9001      	str	r0, [sp, #4]
 802db80:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 802db84:	1d33      	adds	r3, r6, #4
 802db86:	460d      	mov	r5, r1
 802db88:	f108 39ff 	add.w	r9, r8, #4294967295
 802db8c:	db29      	blt.n	802dbe2 <__kernel_rem_pio2f+0x76>
 802db8e:	1ef1      	subs	r1, r6, #3
 802db90:	bf48      	it	mi
 802db92:	1d31      	addmi	r1, r6, #4
 802db94:	10c9      	asrs	r1, r1, #3
 802db96:	1c4c      	adds	r4, r1, #1
 802db98:	00e3      	lsls	r3, r4, #3
 802db9a:	9302      	str	r3, [sp, #8]
 802db9c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802db9e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 802de7c <__kernel_rem_pio2f+0x310>
 802dba2:	eba1 0009 	sub.w	r0, r1, r9
 802dba6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 802dbaa:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 802dbae:	eb07 0c09 	add.w	ip, r7, r9
 802dbb2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 802dbb6:	2300      	movs	r3, #0
 802dbb8:	4563      	cmp	r3, ip
 802dbba:	dd14      	ble.n	802dbe6 <__kernel_rem_pio2f+0x7a>
 802dbbc:	ab1a      	add	r3, sp, #104	; 0x68
 802dbbe:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 802dbc2:	46cc      	mov	ip, r9
 802dbc4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 802dbc8:	f1c8 0b01 	rsb	fp, r8, #1
 802dbcc:	eb0b 020c 	add.w	r2, fp, ip
 802dbd0:	4297      	cmp	r7, r2
 802dbd2:	db27      	blt.n	802dc24 <__kernel_rem_pio2f+0xb8>
 802dbd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 802dbd8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 802de7c <__kernel_rem_pio2f+0x310>
 802dbdc:	4618      	mov	r0, r3
 802dbde:	2200      	movs	r2, #0
 802dbe0:	e016      	b.n	802dc10 <__kernel_rem_pio2f+0xa4>
 802dbe2:	2100      	movs	r1, #0
 802dbe4:	e7d7      	b.n	802db96 <__kernel_rem_pio2f+0x2a>
 802dbe6:	42d8      	cmn	r0, r3
 802dbe8:	bf5d      	ittte	pl
 802dbea:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 802dbee:	ee07 2a90 	vmovpl	s15, r2
 802dbf2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802dbf6:	eef0 7a47 	vmovmi.f32	s15, s14
 802dbfa:	ecea 7a01 	vstmia	sl!, {s15}
 802dbfe:	3301      	adds	r3, #1
 802dc00:	e7da      	b.n	802dbb8 <__kernel_rem_pio2f+0x4c>
 802dc02:	ecfe 6a01 	vldmia	lr!, {s13}
 802dc06:	ed90 7a00 	vldr	s14, [r0]
 802dc0a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802dc0e:	3201      	adds	r2, #1
 802dc10:	454a      	cmp	r2, r9
 802dc12:	f1a0 0004 	sub.w	r0, r0, #4
 802dc16:	ddf4      	ble.n	802dc02 <__kernel_rem_pio2f+0x96>
 802dc18:	ecea 7a01 	vstmia	sl!, {s15}
 802dc1c:	3304      	adds	r3, #4
 802dc1e:	f10c 0c01 	add.w	ip, ip, #1
 802dc22:	e7d3      	b.n	802dbcc <__kernel_rem_pio2f+0x60>
 802dc24:	ab06      	add	r3, sp, #24
 802dc26:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 802dc2a:	9304      	str	r3, [sp, #16]
 802dc2c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802dc2e:	eddf 8a92 	vldr	s17, [pc, #584]	; 802de78 <__kernel_rem_pio2f+0x30c>
 802dc32:	ed9f 9a90 	vldr	s18, [pc, #576]	; 802de74 <__kernel_rem_pio2f+0x308>
 802dc36:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802dc3a:	9303      	str	r3, [sp, #12]
 802dc3c:	46ba      	mov	sl, r7
 802dc3e:	ab56      	add	r3, sp, #344	; 0x158
 802dc40:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802dc44:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802dc48:	ab06      	add	r3, sp, #24
 802dc4a:	4618      	mov	r0, r3
 802dc4c:	4652      	mov	r2, sl
 802dc4e:	2a00      	cmp	r2, #0
 802dc50:	dc51      	bgt.n	802dcf6 <__kernel_rem_pio2f+0x18a>
 802dc52:	4620      	mov	r0, r4
 802dc54:	9305      	str	r3, [sp, #20]
 802dc56:	f000 fa63 	bl	802e120 <scalbnf>
 802dc5a:	eeb0 8a40 	vmov.f32	s16, s0
 802dc5e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802dc62:	ee28 0a00 	vmul.f32	s0, s16, s0
 802dc66:	f7ff fd61 	bl	802d72c <floorf>
 802dc6a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802dc6e:	eea0 8a67 	vfms.f32	s16, s0, s15
 802dc72:	2c00      	cmp	r4, #0
 802dc74:	9b05      	ldr	r3, [sp, #20]
 802dc76:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802dc7a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 802dc7e:	edcd 7a00 	vstr	s15, [sp]
 802dc82:	ee38 8a40 	vsub.f32	s16, s16, s0
 802dc86:	dd4b      	ble.n	802dd20 <__kernel_rem_pio2f+0x1b4>
 802dc88:	f10a 3cff 	add.w	ip, sl, #4294967295
 802dc8c:	aa06      	add	r2, sp, #24
 802dc8e:	f1c4 0e08 	rsb	lr, r4, #8
 802dc92:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802dc96:	ee17 1a90 	vmov	r1, s15
 802dc9a:	fa42 f00e 	asr.w	r0, r2, lr
 802dc9e:	4401      	add	r1, r0
 802dca0:	9100      	str	r1, [sp, #0]
 802dca2:	fa00 f00e 	lsl.w	r0, r0, lr
 802dca6:	a906      	add	r1, sp, #24
 802dca8:	1a12      	subs	r2, r2, r0
 802dcaa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802dcae:	f1c4 0007 	rsb	r0, r4, #7
 802dcb2:	fa42 fb00 	asr.w	fp, r2, r0
 802dcb6:	f1bb 0f00 	cmp.w	fp, #0
 802dcba:	dd43      	ble.n	802dd44 <__kernel_rem_pio2f+0x1d8>
 802dcbc:	9a00      	ldr	r2, [sp, #0]
 802dcbe:	f04f 0e00 	mov.w	lr, #0
 802dcc2:	3201      	adds	r2, #1
 802dcc4:	9200      	str	r2, [sp, #0]
 802dcc6:	4670      	mov	r0, lr
 802dcc8:	45f2      	cmp	sl, lr
 802dcca:	dc6c      	bgt.n	802dda6 <__kernel_rem_pio2f+0x23a>
 802dccc:	2c00      	cmp	r4, #0
 802dcce:	dd04      	ble.n	802dcda <__kernel_rem_pio2f+0x16e>
 802dcd0:	2c01      	cmp	r4, #1
 802dcd2:	d079      	beq.n	802ddc8 <__kernel_rem_pio2f+0x25c>
 802dcd4:	2c02      	cmp	r4, #2
 802dcd6:	f000 8082 	beq.w	802ddde <__kernel_rem_pio2f+0x272>
 802dcda:	f1bb 0f02 	cmp.w	fp, #2
 802dcde:	d131      	bne.n	802dd44 <__kernel_rem_pio2f+0x1d8>
 802dce0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802dce4:	ee30 8a48 	vsub.f32	s16, s0, s16
 802dce8:	b360      	cbz	r0, 802dd44 <__kernel_rem_pio2f+0x1d8>
 802dcea:	4620      	mov	r0, r4
 802dcec:	f000 fa18 	bl	802e120 <scalbnf>
 802dcf0:	ee38 8a40 	vsub.f32	s16, s16, s0
 802dcf4:	e026      	b.n	802dd44 <__kernel_rem_pio2f+0x1d8>
 802dcf6:	ee60 7a28 	vmul.f32	s15, s0, s17
 802dcfa:	3a01      	subs	r2, #1
 802dcfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802dd00:	a942      	add	r1, sp, #264	; 0x108
 802dd02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802dd06:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 802dd0a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802dd0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802dd12:	eca0 0a01 	vstmia	r0!, {s0}
 802dd16:	ed9c 0a00 	vldr	s0, [ip]
 802dd1a:	ee37 0a80 	vadd.f32	s0, s15, s0
 802dd1e:	e796      	b.n	802dc4e <__kernel_rem_pio2f+0xe2>
 802dd20:	d107      	bne.n	802dd32 <__kernel_rem_pio2f+0x1c6>
 802dd22:	f10a 32ff 	add.w	r2, sl, #4294967295
 802dd26:	a906      	add	r1, sp, #24
 802dd28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802dd2c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 802dd30:	e7c1      	b.n	802dcb6 <__kernel_rem_pio2f+0x14a>
 802dd32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802dd36:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802dd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802dd3e:	da2f      	bge.n	802dda0 <__kernel_rem_pio2f+0x234>
 802dd40:	f04f 0b00 	mov.w	fp, #0
 802dd44:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802dd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802dd4c:	f040 8098 	bne.w	802de80 <__kernel_rem_pio2f+0x314>
 802dd50:	f10a 33ff 	add.w	r3, sl, #4294967295
 802dd54:	469c      	mov	ip, r3
 802dd56:	2200      	movs	r2, #0
 802dd58:	45bc      	cmp	ip, r7
 802dd5a:	da48      	bge.n	802ddee <__kernel_rem_pio2f+0x282>
 802dd5c:	2a00      	cmp	r2, #0
 802dd5e:	d05f      	beq.n	802de20 <__kernel_rem_pio2f+0x2b4>
 802dd60:	aa06      	add	r2, sp, #24
 802dd62:	3c08      	subs	r4, #8
 802dd64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802dd68:	2900      	cmp	r1, #0
 802dd6a:	d07d      	beq.n	802de68 <__kernel_rem_pio2f+0x2fc>
 802dd6c:	4620      	mov	r0, r4
 802dd6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802dd72:	9301      	str	r3, [sp, #4]
 802dd74:	f000 f9d4 	bl	802e120 <scalbnf>
 802dd78:	9b01      	ldr	r3, [sp, #4]
 802dd7a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 802de78 <__kernel_rem_pio2f+0x30c>
 802dd7e:	4619      	mov	r1, r3
 802dd80:	2900      	cmp	r1, #0
 802dd82:	f280 80af 	bge.w	802dee4 <__kernel_rem_pio2f+0x378>
 802dd86:	4618      	mov	r0, r3
 802dd88:	2400      	movs	r4, #0
 802dd8a:	2800      	cmp	r0, #0
 802dd8c:	f2c0 80d0 	blt.w	802df30 <__kernel_rem_pio2f+0x3c4>
 802dd90:	a942      	add	r1, sp, #264	; 0x108
 802dd92:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 802dd96:	4a36      	ldr	r2, [pc, #216]	; (802de70 <__kernel_rem_pio2f+0x304>)
 802dd98:	eddf 7a38 	vldr	s15, [pc, #224]	; 802de7c <__kernel_rem_pio2f+0x310>
 802dd9c:	2100      	movs	r1, #0
 802dd9e:	e0bb      	b.n	802df18 <__kernel_rem_pio2f+0x3ac>
 802dda0:	f04f 0b02 	mov.w	fp, #2
 802dda4:	e78a      	b.n	802dcbc <__kernel_rem_pio2f+0x150>
 802dda6:	681a      	ldr	r2, [r3, #0]
 802dda8:	b948      	cbnz	r0, 802ddbe <__kernel_rem_pio2f+0x252>
 802ddaa:	b11a      	cbz	r2, 802ddb4 <__kernel_rem_pio2f+0x248>
 802ddac:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802ddb0:	601a      	str	r2, [r3, #0]
 802ddb2:	2201      	movs	r2, #1
 802ddb4:	f10e 0e01 	add.w	lr, lr, #1
 802ddb8:	3304      	adds	r3, #4
 802ddba:	4610      	mov	r0, r2
 802ddbc:	e784      	b.n	802dcc8 <__kernel_rem_pio2f+0x15c>
 802ddbe:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 802ddc2:	601a      	str	r2, [r3, #0]
 802ddc4:	4602      	mov	r2, r0
 802ddc6:	e7f5      	b.n	802ddb4 <__kernel_rem_pio2f+0x248>
 802ddc8:	f10a 3cff 	add.w	ip, sl, #4294967295
 802ddcc:	ab06      	add	r3, sp, #24
 802ddce:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802ddd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802ddd6:	aa06      	add	r2, sp, #24
 802ddd8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 802dddc:	e77d      	b.n	802dcda <__kernel_rem_pio2f+0x16e>
 802ddde:	f10a 3cff 	add.w	ip, sl, #4294967295
 802dde2:	ab06      	add	r3, sp, #24
 802dde4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802dde8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802ddec:	e7f3      	b.n	802ddd6 <__kernel_rem_pio2f+0x26a>
 802ddee:	a906      	add	r1, sp, #24
 802ddf0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 802ddf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 802ddf8:	4302      	orrs	r2, r0
 802ddfa:	e7ad      	b.n	802dd58 <__kernel_rem_pio2f+0x1ec>
 802ddfc:	3001      	adds	r0, #1
 802ddfe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802de02:	2a00      	cmp	r2, #0
 802de04:	d0fa      	beq.n	802ddfc <__kernel_rem_pio2f+0x290>
 802de06:	a91a      	add	r1, sp, #104	; 0x68
 802de08:	eb0a 0208 	add.w	r2, sl, r8
 802de0c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802de10:	f10a 0301 	add.w	r3, sl, #1
 802de14:	eb0a 0100 	add.w	r1, sl, r0
 802de18:	4299      	cmp	r1, r3
 802de1a:	da04      	bge.n	802de26 <__kernel_rem_pio2f+0x2ba>
 802de1c:	468a      	mov	sl, r1
 802de1e:	e70e      	b.n	802dc3e <__kernel_rem_pio2f+0xd2>
 802de20:	9b04      	ldr	r3, [sp, #16]
 802de22:	2001      	movs	r0, #1
 802de24:	e7eb      	b.n	802ddfe <__kernel_rem_pio2f+0x292>
 802de26:	9803      	ldr	r0, [sp, #12]
 802de28:	f8dd c004 	ldr.w	ip, [sp, #4]
 802de2c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802de30:	9000      	str	r0, [sp, #0]
 802de32:	ee07 0a90 	vmov	s15, r0
 802de36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802de3a:	2000      	movs	r0, #0
 802de3c:	ece2 7a01 	vstmia	r2!, {s15}
 802de40:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802de7c <__kernel_rem_pio2f+0x310>
 802de44:	4696      	mov	lr, r2
 802de46:	4548      	cmp	r0, r9
 802de48:	dd06      	ble.n	802de58 <__kernel_rem_pio2f+0x2ec>
 802de4a:	a842      	add	r0, sp, #264	; 0x108
 802de4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802de50:	edc0 7a00 	vstr	s15, [r0]
 802de54:	3301      	adds	r3, #1
 802de56:	e7df      	b.n	802de18 <__kernel_rem_pio2f+0x2ac>
 802de58:	ecfc 6a01 	vldmia	ip!, {s13}
 802de5c:	ed3e 7a01 	vldmdb	lr!, {s14}
 802de60:	3001      	adds	r0, #1
 802de62:	eee6 7a87 	vfma.f32	s15, s13, s14
 802de66:	e7ee      	b.n	802de46 <__kernel_rem_pio2f+0x2da>
 802de68:	3b01      	subs	r3, #1
 802de6a:	e779      	b.n	802dd60 <__kernel_rem_pio2f+0x1f4>
 802de6c:	08034020 	.word	0x08034020
 802de70:	08033ff4 	.word	0x08033ff4
 802de74:	43800000 	.word	0x43800000
 802de78:	3b800000 	.word	0x3b800000
 802de7c:	00000000 	.word	0x00000000
 802de80:	9b02      	ldr	r3, [sp, #8]
 802de82:	eeb0 0a48 	vmov.f32	s0, s16
 802de86:	1b98      	subs	r0, r3, r6
 802de88:	f000 f94a 	bl	802e120 <scalbnf>
 802de8c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802de74 <__kernel_rem_pio2f+0x308>
 802de90:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802de94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802de98:	db1b      	blt.n	802ded2 <__kernel_rem_pio2f+0x366>
 802de9a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802de78 <__kernel_rem_pio2f+0x30c>
 802de9e:	ee60 7a27 	vmul.f32	s15, s0, s15
 802dea2:	aa06      	add	r2, sp, #24
 802dea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802dea8:	a906      	add	r1, sp, #24
 802deaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802deae:	3408      	adds	r4, #8
 802deb0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802deb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802deb8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802debc:	ee10 3a10 	vmov	r3, s0
 802dec0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802dec4:	ee17 2a90 	vmov	r2, s15
 802dec8:	f10a 0301 	add.w	r3, sl, #1
 802decc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802ded0:	e74c      	b.n	802dd6c <__kernel_rem_pio2f+0x200>
 802ded2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802ded6:	aa06      	add	r2, sp, #24
 802ded8:	ee10 3a10 	vmov	r3, s0
 802dedc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802dee0:	4653      	mov	r3, sl
 802dee2:	e743      	b.n	802dd6c <__kernel_rem_pio2f+0x200>
 802dee4:	aa42      	add	r2, sp, #264	; 0x108
 802dee6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802deea:	aa06      	add	r2, sp, #24
 802deec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802def0:	9201      	str	r2, [sp, #4]
 802def2:	ee07 2a90 	vmov	s15, r2
 802def6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802defa:	3901      	subs	r1, #1
 802defc:	ee67 7a80 	vmul.f32	s15, s15, s0
 802df00:	ee20 0a07 	vmul.f32	s0, s0, s14
 802df04:	edc0 7a00 	vstr	s15, [r0]
 802df08:	e73a      	b.n	802dd80 <__kernel_rem_pio2f+0x214>
 802df0a:	ecf2 6a01 	vldmia	r2!, {s13}
 802df0e:	ecb6 7a01 	vldmia	r6!, {s14}
 802df12:	eee6 7a87 	vfma.f32	s15, s13, s14
 802df16:	3101      	adds	r1, #1
 802df18:	42b9      	cmp	r1, r7
 802df1a:	dc01      	bgt.n	802df20 <__kernel_rem_pio2f+0x3b4>
 802df1c:	428c      	cmp	r4, r1
 802df1e:	daf4      	bge.n	802df0a <__kernel_rem_pio2f+0x39e>
 802df20:	aa56      	add	r2, sp, #344	; 0x158
 802df22:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 802df26:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802df2a:	3801      	subs	r0, #1
 802df2c:	3401      	adds	r4, #1
 802df2e:	e72c      	b.n	802dd8a <__kernel_rem_pio2f+0x21e>
 802df30:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802df32:	2a02      	cmp	r2, #2
 802df34:	dc0a      	bgt.n	802df4c <__kernel_rem_pio2f+0x3e0>
 802df36:	2a00      	cmp	r2, #0
 802df38:	dc61      	bgt.n	802dffe <__kernel_rem_pio2f+0x492>
 802df3a:	d03c      	beq.n	802dfb6 <__kernel_rem_pio2f+0x44a>
 802df3c:	9b00      	ldr	r3, [sp, #0]
 802df3e:	f003 0007 	and.w	r0, r3, #7
 802df42:	b057      	add	sp, #348	; 0x15c
 802df44:	ecbd 8b04 	vpop	{d8-d9}
 802df48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802df4c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802df4e:	2a03      	cmp	r2, #3
 802df50:	d1f4      	bne.n	802df3c <__kernel_rem_pio2f+0x3d0>
 802df52:	aa2e      	add	r2, sp, #184	; 0xb8
 802df54:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802df58:	4608      	mov	r0, r1
 802df5a:	461c      	mov	r4, r3
 802df5c:	2c00      	cmp	r4, #0
 802df5e:	f1a0 0004 	sub.w	r0, r0, #4
 802df62:	dc59      	bgt.n	802e018 <__kernel_rem_pio2f+0x4ac>
 802df64:	4618      	mov	r0, r3
 802df66:	2801      	cmp	r0, #1
 802df68:	f1a1 0104 	sub.w	r1, r1, #4
 802df6c:	dc64      	bgt.n	802e038 <__kernel_rem_pio2f+0x4cc>
 802df6e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 802de7c <__kernel_rem_pio2f+0x310>
 802df72:	2b01      	cmp	r3, #1
 802df74:	dc70      	bgt.n	802e058 <__kernel_rem_pio2f+0x4ec>
 802df76:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802df7a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802df7e:	f1bb 0f00 	cmp.w	fp, #0
 802df82:	d172      	bne.n	802e06a <__kernel_rem_pio2f+0x4fe>
 802df84:	edc5 6a00 	vstr	s13, [r5]
 802df88:	ed85 7a01 	vstr	s14, [r5, #4]
 802df8c:	edc5 7a02 	vstr	s15, [r5, #8]
 802df90:	e7d4      	b.n	802df3c <__kernel_rem_pio2f+0x3d0>
 802df92:	aa2e      	add	r2, sp, #184	; 0xb8
 802df94:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802df98:	ed91 7a00 	vldr	s14, [r1]
 802df9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dfa0:	3b01      	subs	r3, #1
 802dfa2:	2b00      	cmp	r3, #0
 802dfa4:	daf5      	bge.n	802df92 <__kernel_rem_pio2f+0x426>
 802dfa6:	f1bb 0f00 	cmp.w	fp, #0
 802dfaa:	d001      	beq.n	802dfb0 <__kernel_rem_pio2f+0x444>
 802dfac:	eef1 7a67 	vneg.f32	s15, s15
 802dfb0:	edc5 7a00 	vstr	s15, [r5]
 802dfb4:	e7c2      	b.n	802df3c <__kernel_rem_pio2f+0x3d0>
 802dfb6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802de7c <__kernel_rem_pio2f+0x310>
 802dfba:	e7f2      	b.n	802dfa2 <__kernel_rem_pio2f+0x436>
 802dfbc:	aa2e      	add	r2, sp, #184	; 0xb8
 802dfbe:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802dfc2:	edd0 7a00 	vldr	s15, [r0]
 802dfc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 802dfca:	3901      	subs	r1, #1
 802dfcc:	2900      	cmp	r1, #0
 802dfce:	daf5      	bge.n	802dfbc <__kernel_rem_pio2f+0x450>
 802dfd0:	f1bb 0f00 	cmp.w	fp, #0
 802dfd4:	d017      	beq.n	802e006 <__kernel_rem_pio2f+0x49a>
 802dfd6:	eef1 7a47 	vneg.f32	s15, s14
 802dfda:	edc5 7a00 	vstr	s15, [r5]
 802dfde:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802dfe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dfe6:	a82f      	add	r0, sp, #188	; 0xbc
 802dfe8:	2101      	movs	r1, #1
 802dfea:	428b      	cmp	r3, r1
 802dfec:	da0e      	bge.n	802e00c <__kernel_rem_pio2f+0x4a0>
 802dfee:	f1bb 0f00 	cmp.w	fp, #0
 802dff2:	d001      	beq.n	802dff8 <__kernel_rem_pio2f+0x48c>
 802dff4:	eef1 7a67 	vneg.f32	s15, s15
 802dff8:	edc5 7a01 	vstr	s15, [r5, #4]
 802dffc:	e79e      	b.n	802df3c <__kernel_rem_pio2f+0x3d0>
 802dffe:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 802de7c <__kernel_rem_pio2f+0x310>
 802e002:	4619      	mov	r1, r3
 802e004:	e7e2      	b.n	802dfcc <__kernel_rem_pio2f+0x460>
 802e006:	eef0 7a47 	vmov.f32	s15, s14
 802e00a:	e7e6      	b.n	802dfda <__kernel_rem_pio2f+0x46e>
 802e00c:	ecb0 7a01 	vldmia	r0!, {s14}
 802e010:	3101      	adds	r1, #1
 802e012:	ee77 7a87 	vadd.f32	s15, s15, s14
 802e016:	e7e8      	b.n	802dfea <__kernel_rem_pio2f+0x47e>
 802e018:	edd0 7a00 	vldr	s15, [r0]
 802e01c:	edd0 6a01 	vldr	s13, [r0, #4]
 802e020:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802e024:	3c01      	subs	r4, #1
 802e026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802e02a:	ed80 7a00 	vstr	s14, [r0]
 802e02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802e032:	edc0 7a01 	vstr	s15, [r0, #4]
 802e036:	e791      	b.n	802df5c <__kernel_rem_pio2f+0x3f0>
 802e038:	edd1 7a00 	vldr	s15, [r1]
 802e03c:	edd1 6a01 	vldr	s13, [r1, #4]
 802e040:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802e044:	3801      	subs	r0, #1
 802e046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802e04a:	ed81 7a00 	vstr	s14, [r1]
 802e04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802e052:	edc1 7a01 	vstr	s15, [r1, #4]
 802e056:	e786      	b.n	802df66 <__kernel_rem_pio2f+0x3fa>
 802e058:	aa2e      	add	r2, sp, #184	; 0xb8
 802e05a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802e05e:	ed91 7a00 	vldr	s14, [r1]
 802e062:	3b01      	subs	r3, #1
 802e064:	ee77 7a87 	vadd.f32	s15, s15, s14
 802e068:	e783      	b.n	802df72 <__kernel_rem_pio2f+0x406>
 802e06a:	eef1 6a66 	vneg.f32	s13, s13
 802e06e:	eeb1 7a47 	vneg.f32	s14, s14
 802e072:	edc5 6a00 	vstr	s13, [r5]
 802e076:	ed85 7a01 	vstr	s14, [r5, #4]
 802e07a:	eef1 7a67 	vneg.f32	s15, s15
 802e07e:	e785      	b.n	802df8c <__kernel_rem_pio2f+0x420>

0802e080 <__kernel_sinf>:
 802e080:	ee10 3a10 	vmov	r3, s0
 802e084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e088:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802e08c:	da04      	bge.n	802e098 <__kernel_sinf+0x18>
 802e08e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802e092:	ee17 3a90 	vmov	r3, s15
 802e096:	b35b      	cbz	r3, 802e0f0 <__kernel_sinf+0x70>
 802e098:	ee20 7a00 	vmul.f32	s14, s0, s0
 802e09c:	eddf 7a15 	vldr	s15, [pc, #84]	; 802e0f4 <__kernel_sinf+0x74>
 802e0a0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802e0f8 <__kernel_sinf+0x78>
 802e0a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 802e0a8:	eddf 7a14 	vldr	s15, [pc, #80]	; 802e0fc <__kernel_sinf+0x7c>
 802e0ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 802e0b0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802e100 <__kernel_sinf+0x80>
 802e0b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 802e0b8:	eddf 7a12 	vldr	s15, [pc, #72]	; 802e104 <__kernel_sinf+0x84>
 802e0bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 802e0c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 802e0c4:	b930      	cbnz	r0, 802e0d4 <__kernel_sinf+0x54>
 802e0c6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802e108 <__kernel_sinf+0x88>
 802e0ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 802e0ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 802e0d2:	4770      	bx	lr
 802e0d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802e0d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802e0dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 802e0e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802e0e4:	eddf 7a09 	vldr	s15, [pc, #36]	; 802e10c <__kernel_sinf+0x8c>
 802e0e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802e0ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 802e0f0:	4770      	bx	lr
 802e0f2:	bf00      	nop
 802e0f4:	2f2ec9d3 	.word	0x2f2ec9d3
 802e0f8:	b2d72f34 	.word	0xb2d72f34
 802e0fc:	3638ef1b 	.word	0x3638ef1b
 802e100:	b9500d01 	.word	0xb9500d01
 802e104:	3c088889 	.word	0x3c088889
 802e108:	be2aaaab 	.word	0xbe2aaaab
 802e10c:	3e2aaaab 	.word	0x3e2aaaab

0802e110 <fabsf>:
 802e110:	ee10 3a10 	vmov	r3, s0
 802e114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e118:	ee00 3a10 	vmov	s0, r3
 802e11c:	4770      	bx	lr
	...

0802e120 <scalbnf>:
 802e120:	ee10 3a10 	vmov	r3, s0
 802e124:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802e128:	d025      	beq.n	802e176 <scalbnf+0x56>
 802e12a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802e12e:	d302      	bcc.n	802e136 <scalbnf+0x16>
 802e130:	ee30 0a00 	vadd.f32	s0, s0, s0
 802e134:	4770      	bx	lr
 802e136:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802e13a:	d122      	bne.n	802e182 <scalbnf+0x62>
 802e13c:	4b2a      	ldr	r3, [pc, #168]	; (802e1e8 <scalbnf+0xc8>)
 802e13e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802e1ec <scalbnf+0xcc>
 802e142:	4298      	cmp	r0, r3
 802e144:	ee20 0a27 	vmul.f32	s0, s0, s15
 802e148:	db16      	blt.n	802e178 <scalbnf+0x58>
 802e14a:	ee10 3a10 	vmov	r3, s0
 802e14e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802e152:	3a19      	subs	r2, #25
 802e154:	4402      	add	r2, r0
 802e156:	2afe      	cmp	r2, #254	; 0xfe
 802e158:	dd15      	ble.n	802e186 <scalbnf+0x66>
 802e15a:	ee10 3a10 	vmov	r3, s0
 802e15e:	eddf 7a24 	vldr	s15, [pc, #144]	; 802e1f0 <scalbnf+0xd0>
 802e162:	eddf 6a24 	vldr	s13, [pc, #144]	; 802e1f4 <scalbnf+0xd4>
 802e166:	2b00      	cmp	r3, #0
 802e168:	eeb0 7a67 	vmov.f32	s14, s15
 802e16c:	bfb8      	it	lt
 802e16e:	eef0 7a66 	vmovlt.f32	s15, s13
 802e172:	ee27 0a27 	vmul.f32	s0, s14, s15
 802e176:	4770      	bx	lr
 802e178:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802e1f8 <scalbnf+0xd8>
 802e17c:	ee20 0a27 	vmul.f32	s0, s0, s15
 802e180:	4770      	bx	lr
 802e182:	0dd2      	lsrs	r2, r2, #23
 802e184:	e7e6      	b.n	802e154 <scalbnf+0x34>
 802e186:	2a00      	cmp	r2, #0
 802e188:	dd06      	ble.n	802e198 <scalbnf+0x78>
 802e18a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802e18e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802e192:	ee00 3a10 	vmov	s0, r3
 802e196:	4770      	bx	lr
 802e198:	f112 0f16 	cmn.w	r2, #22
 802e19c:	da1a      	bge.n	802e1d4 <scalbnf+0xb4>
 802e19e:	f24c 3350 	movw	r3, #50000	; 0xc350
 802e1a2:	4298      	cmp	r0, r3
 802e1a4:	ee10 3a10 	vmov	r3, s0
 802e1a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e1ac:	dd0a      	ble.n	802e1c4 <scalbnf+0xa4>
 802e1ae:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802e1f0 <scalbnf+0xd0>
 802e1b2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802e1f4 <scalbnf+0xd4>
 802e1b6:	eef0 7a40 	vmov.f32	s15, s0
 802e1ba:	2b00      	cmp	r3, #0
 802e1bc:	bf18      	it	ne
 802e1be:	eeb0 0a47 	vmovne.f32	s0, s14
 802e1c2:	e7db      	b.n	802e17c <scalbnf+0x5c>
 802e1c4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802e1f8 <scalbnf+0xd8>
 802e1c8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 802e1fc <scalbnf+0xdc>
 802e1cc:	eef0 7a40 	vmov.f32	s15, s0
 802e1d0:	2b00      	cmp	r3, #0
 802e1d2:	e7f3      	b.n	802e1bc <scalbnf+0x9c>
 802e1d4:	3219      	adds	r2, #25
 802e1d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802e1da:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802e1de:	eddf 7a08 	vldr	s15, [pc, #32]	; 802e200 <scalbnf+0xe0>
 802e1e2:	ee07 3a10 	vmov	s14, r3
 802e1e6:	e7c4      	b.n	802e172 <scalbnf+0x52>
 802e1e8:	ffff3cb0 	.word	0xffff3cb0
 802e1ec:	4c000000 	.word	0x4c000000
 802e1f0:	7149f2ca 	.word	0x7149f2ca
 802e1f4:	f149f2ca 	.word	0xf149f2ca
 802e1f8:	0da24260 	.word	0x0da24260
 802e1fc:	8da24260 	.word	0x8da24260
 802e200:	33000000 	.word	0x33000000

0802e204 <abort>:
 802e204:	b508      	push	{r3, lr}
 802e206:	2006      	movs	r0, #6
 802e208:	f000 fde4 	bl	802edd4 <raise>
 802e20c:	2001      	movs	r0, #1
 802e20e:	f7d5 ffa3 	bl	8004158 <_exit>
	...

0802e214 <__assert_func>:
 802e214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802e216:	4614      	mov	r4, r2
 802e218:	461a      	mov	r2, r3
 802e21a:	4b09      	ldr	r3, [pc, #36]	; (802e240 <__assert_func+0x2c>)
 802e21c:	681b      	ldr	r3, [r3, #0]
 802e21e:	4605      	mov	r5, r0
 802e220:	68d8      	ldr	r0, [r3, #12]
 802e222:	b14c      	cbz	r4, 802e238 <__assert_func+0x24>
 802e224:	4b07      	ldr	r3, [pc, #28]	; (802e244 <__assert_func+0x30>)
 802e226:	9100      	str	r1, [sp, #0]
 802e228:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802e22c:	4906      	ldr	r1, [pc, #24]	; (802e248 <__assert_func+0x34>)
 802e22e:	462b      	mov	r3, r5
 802e230:	f000 f906 	bl	802e440 <fiprintf>
 802e234:	f7ff ffe6 	bl	802e204 <abort>
 802e238:	4b04      	ldr	r3, [pc, #16]	; (802e24c <__assert_func+0x38>)
 802e23a:	461c      	mov	r4, r3
 802e23c:	e7f3      	b.n	802e226 <__assert_func+0x12>
 802e23e:	bf00      	nop
 802e240:	20000098 	.word	0x20000098
 802e244:	0803402c 	.word	0x0803402c
 802e248:	08034039 	.word	0x08034039
 802e24c:	08034067 	.word	0x08034067

0802e250 <atexit>:
 802e250:	2300      	movs	r3, #0
 802e252:	4601      	mov	r1, r0
 802e254:	461a      	mov	r2, r3
 802e256:	4618      	mov	r0, r3
 802e258:	f000 bef6 	b.w	802f048 <__register_exitproc>

0802e25c <calloc>:
 802e25c:	4b02      	ldr	r3, [pc, #8]	; (802e268 <calloc+0xc>)
 802e25e:	460a      	mov	r2, r1
 802e260:	4601      	mov	r1, r0
 802e262:	6818      	ldr	r0, [r3, #0]
 802e264:	f000 b96c 	b.w	802e540 <_calloc_r>
 802e268:	20000098 	.word	0x20000098

0802e26c <__cxa_atexit>:
 802e26c:	b510      	push	{r4, lr}
 802e26e:	4c05      	ldr	r4, [pc, #20]	; (802e284 <__cxa_atexit+0x18>)
 802e270:	4613      	mov	r3, r2
 802e272:	b12c      	cbz	r4, 802e280 <__cxa_atexit+0x14>
 802e274:	460a      	mov	r2, r1
 802e276:	4601      	mov	r1, r0
 802e278:	2002      	movs	r0, #2
 802e27a:	f000 fee5 	bl	802f048 <__register_exitproc>
 802e27e:	bd10      	pop	{r4, pc}
 802e280:	4620      	mov	r0, r4
 802e282:	e7fc      	b.n	802e27e <__cxa_atexit+0x12>
 802e284:	0802f049 	.word	0x0802f049

0802e288 <__errno>:
 802e288:	4b01      	ldr	r3, [pc, #4]	; (802e290 <__errno+0x8>)
 802e28a:	6818      	ldr	r0, [r3, #0]
 802e28c:	4770      	bx	lr
 802e28e:	bf00      	nop
 802e290:	20000098 	.word	0x20000098

0802e294 <std>:
 802e294:	2300      	movs	r3, #0
 802e296:	b510      	push	{r4, lr}
 802e298:	4604      	mov	r4, r0
 802e29a:	e9c0 3300 	strd	r3, r3, [r0]
 802e29e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802e2a2:	6083      	str	r3, [r0, #8]
 802e2a4:	8181      	strh	r1, [r0, #12]
 802e2a6:	6643      	str	r3, [r0, #100]	; 0x64
 802e2a8:	81c2      	strh	r2, [r0, #14]
 802e2aa:	6183      	str	r3, [r0, #24]
 802e2ac:	4619      	mov	r1, r3
 802e2ae:	2208      	movs	r2, #8
 802e2b0:	305c      	adds	r0, #92	; 0x5c
 802e2b2:	f000 f93d 	bl	802e530 <memset>
 802e2b6:	4b05      	ldr	r3, [pc, #20]	; (802e2cc <std+0x38>)
 802e2b8:	6263      	str	r3, [r4, #36]	; 0x24
 802e2ba:	4b05      	ldr	r3, [pc, #20]	; (802e2d0 <std+0x3c>)
 802e2bc:	62a3      	str	r3, [r4, #40]	; 0x28
 802e2be:	4b05      	ldr	r3, [pc, #20]	; (802e2d4 <std+0x40>)
 802e2c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 802e2c2:	4b05      	ldr	r3, [pc, #20]	; (802e2d8 <std+0x44>)
 802e2c4:	6224      	str	r4, [r4, #32]
 802e2c6:	6323      	str	r3, [r4, #48]	; 0x30
 802e2c8:	bd10      	pop	{r4, pc}
 802e2ca:	bf00      	nop
 802e2cc:	0802ee0d 	.word	0x0802ee0d
 802e2d0:	0802ee2f 	.word	0x0802ee2f
 802e2d4:	0802ee67 	.word	0x0802ee67
 802e2d8:	0802ee8b 	.word	0x0802ee8b

0802e2dc <_cleanup_r>:
 802e2dc:	4901      	ldr	r1, [pc, #4]	; (802e2e4 <_cleanup_r+0x8>)
 802e2de:	f000 b8c1 	b.w	802e464 <_fwalk_reent>
 802e2e2:	bf00      	nop
 802e2e4:	0802f239 	.word	0x0802f239

0802e2e8 <__sfmoreglue>:
 802e2e8:	b570      	push	{r4, r5, r6, lr}
 802e2ea:	1e4a      	subs	r2, r1, #1
 802e2ec:	2568      	movs	r5, #104	; 0x68
 802e2ee:	4355      	muls	r5, r2
 802e2f0:	460e      	mov	r6, r1
 802e2f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802e2f6:	f000 f983 	bl	802e600 <_malloc_r>
 802e2fa:	4604      	mov	r4, r0
 802e2fc:	b140      	cbz	r0, 802e310 <__sfmoreglue+0x28>
 802e2fe:	2100      	movs	r1, #0
 802e300:	e9c0 1600 	strd	r1, r6, [r0]
 802e304:	300c      	adds	r0, #12
 802e306:	60a0      	str	r0, [r4, #8]
 802e308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802e30c:	f000 f910 	bl	802e530 <memset>
 802e310:	4620      	mov	r0, r4
 802e312:	bd70      	pop	{r4, r5, r6, pc}

0802e314 <__sfp_lock_acquire>:
 802e314:	4801      	ldr	r0, [pc, #4]	; (802e31c <__sfp_lock_acquire+0x8>)
 802e316:	f000 b8ea 	b.w	802e4ee <__retarget_lock_acquire_recursive>
 802e31a:	bf00      	nop
 802e31c:	2000b69c 	.word	0x2000b69c

0802e320 <__sfp_lock_release>:
 802e320:	4801      	ldr	r0, [pc, #4]	; (802e328 <__sfp_lock_release+0x8>)
 802e322:	f000 b8e6 	b.w	802e4f2 <__retarget_lock_release_recursive>
 802e326:	bf00      	nop
 802e328:	2000b69c 	.word	0x2000b69c

0802e32c <__sinit_lock_acquire>:
 802e32c:	4801      	ldr	r0, [pc, #4]	; (802e334 <__sinit_lock_acquire+0x8>)
 802e32e:	f000 b8de 	b.w	802e4ee <__retarget_lock_acquire_recursive>
 802e332:	bf00      	nop
 802e334:	2000b697 	.word	0x2000b697

0802e338 <__sinit_lock_release>:
 802e338:	4801      	ldr	r0, [pc, #4]	; (802e340 <__sinit_lock_release+0x8>)
 802e33a:	f000 b8da 	b.w	802e4f2 <__retarget_lock_release_recursive>
 802e33e:	bf00      	nop
 802e340:	2000b697 	.word	0x2000b697

0802e344 <__sinit>:
 802e344:	b510      	push	{r4, lr}
 802e346:	4604      	mov	r4, r0
 802e348:	f7ff fff0 	bl	802e32c <__sinit_lock_acquire>
 802e34c:	69a3      	ldr	r3, [r4, #24]
 802e34e:	b11b      	cbz	r3, 802e358 <__sinit+0x14>
 802e350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e354:	f7ff bff0 	b.w	802e338 <__sinit_lock_release>
 802e358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802e35c:	6523      	str	r3, [r4, #80]	; 0x50
 802e35e:	4b13      	ldr	r3, [pc, #76]	; (802e3ac <__sinit+0x68>)
 802e360:	4a13      	ldr	r2, [pc, #76]	; (802e3b0 <__sinit+0x6c>)
 802e362:	681b      	ldr	r3, [r3, #0]
 802e364:	62a2      	str	r2, [r4, #40]	; 0x28
 802e366:	42a3      	cmp	r3, r4
 802e368:	bf04      	itt	eq
 802e36a:	2301      	moveq	r3, #1
 802e36c:	61a3      	streq	r3, [r4, #24]
 802e36e:	4620      	mov	r0, r4
 802e370:	f000 f820 	bl	802e3b4 <__sfp>
 802e374:	6060      	str	r0, [r4, #4]
 802e376:	4620      	mov	r0, r4
 802e378:	f000 f81c 	bl	802e3b4 <__sfp>
 802e37c:	60a0      	str	r0, [r4, #8]
 802e37e:	4620      	mov	r0, r4
 802e380:	f000 f818 	bl	802e3b4 <__sfp>
 802e384:	2200      	movs	r2, #0
 802e386:	60e0      	str	r0, [r4, #12]
 802e388:	2104      	movs	r1, #4
 802e38a:	6860      	ldr	r0, [r4, #4]
 802e38c:	f7ff ff82 	bl	802e294 <std>
 802e390:	68a0      	ldr	r0, [r4, #8]
 802e392:	2201      	movs	r2, #1
 802e394:	2109      	movs	r1, #9
 802e396:	f7ff ff7d 	bl	802e294 <std>
 802e39a:	68e0      	ldr	r0, [r4, #12]
 802e39c:	2202      	movs	r2, #2
 802e39e:	2112      	movs	r1, #18
 802e3a0:	f7ff ff78 	bl	802e294 <std>
 802e3a4:	2301      	movs	r3, #1
 802e3a6:	61a3      	str	r3, [r4, #24]
 802e3a8:	e7d2      	b.n	802e350 <__sinit+0xc>
 802e3aa:	bf00      	nop
 802e3ac:	080340c8 	.word	0x080340c8
 802e3b0:	0802e2dd 	.word	0x0802e2dd

0802e3b4 <__sfp>:
 802e3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e3b6:	4607      	mov	r7, r0
 802e3b8:	f7ff ffac 	bl	802e314 <__sfp_lock_acquire>
 802e3bc:	4b1e      	ldr	r3, [pc, #120]	; (802e438 <__sfp+0x84>)
 802e3be:	681e      	ldr	r6, [r3, #0]
 802e3c0:	69b3      	ldr	r3, [r6, #24]
 802e3c2:	b913      	cbnz	r3, 802e3ca <__sfp+0x16>
 802e3c4:	4630      	mov	r0, r6
 802e3c6:	f7ff ffbd 	bl	802e344 <__sinit>
 802e3ca:	3648      	adds	r6, #72	; 0x48
 802e3cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e3d0:	3b01      	subs	r3, #1
 802e3d2:	d503      	bpl.n	802e3dc <__sfp+0x28>
 802e3d4:	6833      	ldr	r3, [r6, #0]
 802e3d6:	b30b      	cbz	r3, 802e41c <__sfp+0x68>
 802e3d8:	6836      	ldr	r6, [r6, #0]
 802e3da:	e7f7      	b.n	802e3cc <__sfp+0x18>
 802e3dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e3e0:	b9d5      	cbnz	r5, 802e418 <__sfp+0x64>
 802e3e2:	4b16      	ldr	r3, [pc, #88]	; (802e43c <__sfp+0x88>)
 802e3e4:	60e3      	str	r3, [r4, #12]
 802e3e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e3ea:	6665      	str	r5, [r4, #100]	; 0x64
 802e3ec:	f000 f87e 	bl	802e4ec <__retarget_lock_init_recursive>
 802e3f0:	f7ff ff96 	bl	802e320 <__sfp_lock_release>
 802e3f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802e3f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802e3fc:	6025      	str	r5, [r4, #0]
 802e3fe:	61a5      	str	r5, [r4, #24]
 802e400:	2208      	movs	r2, #8
 802e402:	4629      	mov	r1, r5
 802e404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e408:	f000 f892 	bl	802e530 <memset>
 802e40c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e414:	4620      	mov	r0, r4
 802e416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e418:	3468      	adds	r4, #104	; 0x68
 802e41a:	e7d9      	b.n	802e3d0 <__sfp+0x1c>
 802e41c:	2104      	movs	r1, #4
 802e41e:	4638      	mov	r0, r7
 802e420:	f7ff ff62 	bl	802e2e8 <__sfmoreglue>
 802e424:	4604      	mov	r4, r0
 802e426:	6030      	str	r0, [r6, #0]
 802e428:	2800      	cmp	r0, #0
 802e42a:	d1d5      	bne.n	802e3d8 <__sfp+0x24>
 802e42c:	f7ff ff78 	bl	802e320 <__sfp_lock_release>
 802e430:	230c      	movs	r3, #12
 802e432:	603b      	str	r3, [r7, #0]
 802e434:	e7ee      	b.n	802e414 <__sfp+0x60>
 802e436:	bf00      	nop
 802e438:	080340c8 	.word	0x080340c8
 802e43c:	ffff0001 	.word	0xffff0001

0802e440 <fiprintf>:
 802e440:	b40e      	push	{r1, r2, r3}
 802e442:	b503      	push	{r0, r1, lr}
 802e444:	4601      	mov	r1, r0
 802e446:	ab03      	add	r3, sp, #12
 802e448:	4805      	ldr	r0, [pc, #20]	; (802e460 <fiprintf+0x20>)
 802e44a:	f853 2b04 	ldr.w	r2, [r3], #4
 802e44e:	6800      	ldr	r0, [r0, #0]
 802e450:	9301      	str	r3, [sp, #4]
 802e452:	f000 f959 	bl	802e708 <_vfiprintf_r>
 802e456:	b002      	add	sp, #8
 802e458:	f85d eb04 	ldr.w	lr, [sp], #4
 802e45c:	b003      	add	sp, #12
 802e45e:	4770      	bx	lr
 802e460:	20000098 	.word	0x20000098

0802e464 <_fwalk_reent>:
 802e464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e468:	4606      	mov	r6, r0
 802e46a:	4688      	mov	r8, r1
 802e46c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e470:	2700      	movs	r7, #0
 802e472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e476:	f1b9 0901 	subs.w	r9, r9, #1
 802e47a:	d505      	bpl.n	802e488 <_fwalk_reent+0x24>
 802e47c:	6824      	ldr	r4, [r4, #0]
 802e47e:	2c00      	cmp	r4, #0
 802e480:	d1f7      	bne.n	802e472 <_fwalk_reent+0xe>
 802e482:	4638      	mov	r0, r7
 802e484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e488:	89ab      	ldrh	r3, [r5, #12]
 802e48a:	2b01      	cmp	r3, #1
 802e48c:	d907      	bls.n	802e49e <_fwalk_reent+0x3a>
 802e48e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e492:	3301      	adds	r3, #1
 802e494:	d003      	beq.n	802e49e <_fwalk_reent+0x3a>
 802e496:	4629      	mov	r1, r5
 802e498:	4630      	mov	r0, r6
 802e49a:	47c0      	blx	r8
 802e49c:	4307      	orrs	r7, r0
 802e49e:	3568      	adds	r5, #104	; 0x68
 802e4a0:	e7e9      	b.n	802e476 <_fwalk_reent+0x12>
	...

0802e4a4 <__libc_init_array>:
 802e4a4:	b570      	push	{r4, r5, r6, lr}
 802e4a6:	4d0d      	ldr	r5, [pc, #52]	; (802e4dc <__libc_init_array+0x38>)
 802e4a8:	4c0d      	ldr	r4, [pc, #52]	; (802e4e0 <__libc_init_array+0x3c>)
 802e4aa:	1b64      	subs	r4, r4, r5
 802e4ac:	10a4      	asrs	r4, r4, #2
 802e4ae:	2600      	movs	r6, #0
 802e4b0:	42a6      	cmp	r6, r4
 802e4b2:	d109      	bne.n	802e4c8 <__libc_init_array+0x24>
 802e4b4:	4d0b      	ldr	r5, [pc, #44]	; (802e4e4 <__libc_init_array+0x40>)
 802e4b6:	4c0c      	ldr	r4, [pc, #48]	; (802e4e8 <__libc_init_array+0x44>)
 802e4b8:	f000 ffb0 	bl	802f41c <_init>
 802e4bc:	1b64      	subs	r4, r4, r5
 802e4be:	10a4      	asrs	r4, r4, #2
 802e4c0:	2600      	movs	r6, #0
 802e4c2:	42a6      	cmp	r6, r4
 802e4c4:	d105      	bne.n	802e4d2 <__libc_init_array+0x2e>
 802e4c6:	bd70      	pop	{r4, r5, r6, pc}
 802e4c8:	f855 3b04 	ldr.w	r3, [r5], #4
 802e4cc:	4798      	blx	r3
 802e4ce:	3601      	adds	r6, #1
 802e4d0:	e7ee      	b.n	802e4b0 <__libc_init_array+0xc>
 802e4d2:	f855 3b04 	ldr.w	r3, [r5], #4
 802e4d6:	4798      	blx	r3
 802e4d8:	3601      	adds	r6, #1
 802e4da:	e7f2      	b.n	802e4c2 <__libc_init_array+0x1e>
 802e4dc:	080ad304 	.word	0x080ad304
 802e4e0:	080ad304 	.word	0x080ad304
 802e4e4:	080ad304 	.word	0x080ad304
 802e4e8:	080ad318 	.word	0x080ad318

0802e4ec <__retarget_lock_init_recursive>:
 802e4ec:	4770      	bx	lr

0802e4ee <__retarget_lock_acquire_recursive>:
 802e4ee:	4770      	bx	lr

0802e4f0 <__retarget_lock_release>:
 802e4f0:	4770      	bx	lr

0802e4f2 <__retarget_lock_release_recursive>:
 802e4f2:	4770      	bx	lr

0802e4f4 <malloc>:
 802e4f4:	4b02      	ldr	r3, [pc, #8]	; (802e500 <malloc+0xc>)
 802e4f6:	4601      	mov	r1, r0
 802e4f8:	6818      	ldr	r0, [r3, #0]
 802e4fa:	f000 b881 	b.w	802e600 <_malloc_r>
 802e4fe:	bf00      	nop
 802e500:	20000098 	.word	0x20000098

0802e504 <free>:
 802e504:	4b02      	ldr	r3, [pc, #8]	; (802e510 <free+0xc>)
 802e506:	4601      	mov	r1, r0
 802e508:	6818      	ldr	r0, [r3, #0]
 802e50a:	f000 b829 	b.w	802e560 <_free_r>
 802e50e:	bf00      	nop
 802e510:	20000098 	.word	0x20000098

0802e514 <memcpy>:
 802e514:	440a      	add	r2, r1
 802e516:	4291      	cmp	r1, r2
 802e518:	f100 33ff 	add.w	r3, r0, #4294967295
 802e51c:	d100      	bne.n	802e520 <memcpy+0xc>
 802e51e:	4770      	bx	lr
 802e520:	b510      	push	{r4, lr}
 802e522:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e526:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e52a:	4291      	cmp	r1, r2
 802e52c:	d1f9      	bne.n	802e522 <memcpy+0xe>
 802e52e:	bd10      	pop	{r4, pc}

0802e530 <memset>:
 802e530:	4402      	add	r2, r0
 802e532:	4603      	mov	r3, r0
 802e534:	4293      	cmp	r3, r2
 802e536:	d100      	bne.n	802e53a <memset+0xa>
 802e538:	4770      	bx	lr
 802e53a:	f803 1b01 	strb.w	r1, [r3], #1
 802e53e:	e7f9      	b.n	802e534 <memset+0x4>

0802e540 <_calloc_r>:
 802e540:	b513      	push	{r0, r1, r4, lr}
 802e542:	434a      	muls	r2, r1
 802e544:	4611      	mov	r1, r2
 802e546:	9201      	str	r2, [sp, #4]
 802e548:	f000 f85a 	bl	802e600 <_malloc_r>
 802e54c:	4604      	mov	r4, r0
 802e54e:	b118      	cbz	r0, 802e558 <_calloc_r+0x18>
 802e550:	9a01      	ldr	r2, [sp, #4]
 802e552:	2100      	movs	r1, #0
 802e554:	f7ff ffec 	bl	802e530 <memset>
 802e558:	4620      	mov	r0, r4
 802e55a:	b002      	add	sp, #8
 802e55c:	bd10      	pop	{r4, pc}
	...

0802e560 <_free_r>:
 802e560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e562:	2900      	cmp	r1, #0
 802e564:	d048      	beq.n	802e5f8 <_free_r+0x98>
 802e566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e56a:	9001      	str	r0, [sp, #4]
 802e56c:	2b00      	cmp	r3, #0
 802e56e:	f1a1 0404 	sub.w	r4, r1, #4
 802e572:	bfb8      	it	lt
 802e574:	18e4      	addlt	r4, r4, r3
 802e576:	f000 ff11 	bl	802f39c <__malloc_lock>
 802e57a:	4a20      	ldr	r2, [pc, #128]	; (802e5fc <_free_r+0x9c>)
 802e57c:	9801      	ldr	r0, [sp, #4]
 802e57e:	6813      	ldr	r3, [r2, #0]
 802e580:	4615      	mov	r5, r2
 802e582:	b933      	cbnz	r3, 802e592 <_free_r+0x32>
 802e584:	6063      	str	r3, [r4, #4]
 802e586:	6014      	str	r4, [r2, #0]
 802e588:	b003      	add	sp, #12
 802e58a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e58e:	f000 bf0b 	b.w	802f3a8 <__malloc_unlock>
 802e592:	42a3      	cmp	r3, r4
 802e594:	d90b      	bls.n	802e5ae <_free_r+0x4e>
 802e596:	6821      	ldr	r1, [r4, #0]
 802e598:	1862      	adds	r2, r4, r1
 802e59a:	4293      	cmp	r3, r2
 802e59c:	bf04      	itt	eq
 802e59e:	681a      	ldreq	r2, [r3, #0]
 802e5a0:	685b      	ldreq	r3, [r3, #4]
 802e5a2:	6063      	str	r3, [r4, #4]
 802e5a4:	bf04      	itt	eq
 802e5a6:	1852      	addeq	r2, r2, r1
 802e5a8:	6022      	streq	r2, [r4, #0]
 802e5aa:	602c      	str	r4, [r5, #0]
 802e5ac:	e7ec      	b.n	802e588 <_free_r+0x28>
 802e5ae:	461a      	mov	r2, r3
 802e5b0:	685b      	ldr	r3, [r3, #4]
 802e5b2:	b10b      	cbz	r3, 802e5b8 <_free_r+0x58>
 802e5b4:	42a3      	cmp	r3, r4
 802e5b6:	d9fa      	bls.n	802e5ae <_free_r+0x4e>
 802e5b8:	6811      	ldr	r1, [r2, #0]
 802e5ba:	1855      	adds	r5, r2, r1
 802e5bc:	42a5      	cmp	r5, r4
 802e5be:	d10b      	bne.n	802e5d8 <_free_r+0x78>
 802e5c0:	6824      	ldr	r4, [r4, #0]
 802e5c2:	4421      	add	r1, r4
 802e5c4:	1854      	adds	r4, r2, r1
 802e5c6:	42a3      	cmp	r3, r4
 802e5c8:	6011      	str	r1, [r2, #0]
 802e5ca:	d1dd      	bne.n	802e588 <_free_r+0x28>
 802e5cc:	681c      	ldr	r4, [r3, #0]
 802e5ce:	685b      	ldr	r3, [r3, #4]
 802e5d0:	6053      	str	r3, [r2, #4]
 802e5d2:	4421      	add	r1, r4
 802e5d4:	6011      	str	r1, [r2, #0]
 802e5d6:	e7d7      	b.n	802e588 <_free_r+0x28>
 802e5d8:	d902      	bls.n	802e5e0 <_free_r+0x80>
 802e5da:	230c      	movs	r3, #12
 802e5dc:	6003      	str	r3, [r0, #0]
 802e5de:	e7d3      	b.n	802e588 <_free_r+0x28>
 802e5e0:	6825      	ldr	r5, [r4, #0]
 802e5e2:	1961      	adds	r1, r4, r5
 802e5e4:	428b      	cmp	r3, r1
 802e5e6:	bf04      	itt	eq
 802e5e8:	6819      	ldreq	r1, [r3, #0]
 802e5ea:	685b      	ldreq	r3, [r3, #4]
 802e5ec:	6063      	str	r3, [r4, #4]
 802e5ee:	bf04      	itt	eq
 802e5f0:	1949      	addeq	r1, r1, r5
 802e5f2:	6021      	streq	r1, [r4, #0]
 802e5f4:	6054      	str	r4, [r2, #4]
 802e5f6:	e7c7      	b.n	802e588 <_free_r+0x28>
 802e5f8:	b003      	add	sp, #12
 802e5fa:	bd30      	pop	{r4, r5, pc}
 802e5fc:	2000993c 	.word	0x2000993c

0802e600 <_malloc_r>:
 802e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e602:	1ccd      	adds	r5, r1, #3
 802e604:	f025 0503 	bic.w	r5, r5, #3
 802e608:	3508      	adds	r5, #8
 802e60a:	2d0c      	cmp	r5, #12
 802e60c:	bf38      	it	cc
 802e60e:	250c      	movcc	r5, #12
 802e610:	2d00      	cmp	r5, #0
 802e612:	4606      	mov	r6, r0
 802e614:	db01      	blt.n	802e61a <_malloc_r+0x1a>
 802e616:	42a9      	cmp	r1, r5
 802e618:	d903      	bls.n	802e622 <_malloc_r+0x22>
 802e61a:	230c      	movs	r3, #12
 802e61c:	6033      	str	r3, [r6, #0]
 802e61e:	2000      	movs	r0, #0
 802e620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e622:	f000 febb 	bl	802f39c <__malloc_lock>
 802e626:	4921      	ldr	r1, [pc, #132]	; (802e6ac <_malloc_r+0xac>)
 802e628:	680a      	ldr	r2, [r1, #0]
 802e62a:	4614      	mov	r4, r2
 802e62c:	b99c      	cbnz	r4, 802e656 <_malloc_r+0x56>
 802e62e:	4f20      	ldr	r7, [pc, #128]	; (802e6b0 <_malloc_r+0xb0>)
 802e630:	683b      	ldr	r3, [r7, #0]
 802e632:	b923      	cbnz	r3, 802e63e <_malloc_r+0x3e>
 802e634:	4621      	mov	r1, r4
 802e636:	4630      	mov	r0, r6
 802e638:	f000 fb94 	bl	802ed64 <_sbrk_r>
 802e63c:	6038      	str	r0, [r7, #0]
 802e63e:	4629      	mov	r1, r5
 802e640:	4630      	mov	r0, r6
 802e642:	f000 fb8f 	bl	802ed64 <_sbrk_r>
 802e646:	1c43      	adds	r3, r0, #1
 802e648:	d123      	bne.n	802e692 <_malloc_r+0x92>
 802e64a:	230c      	movs	r3, #12
 802e64c:	6033      	str	r3, [r6, #0]
 802e64e:	4630      	mov	r0, r6
 802e650:	f000 feaa 	bl	802f3a8 <__malloc_unlock>
 802e654:	e7e3      	b.n	802e61e <_malloc_r+0x1e>
 802e656:	6823      	ldr	r3, [r4, #0]
 802e658:	1b5b      	subs	r3, r3, r5
 802e65a:	d417      	bmi.n	802e68c <_malloc_r+0x8c>
 802e65c:	2b0b      	cmp	r3, #11
 802e65e:	d903      	bls.n	802e668 <_malloc_r+0x68>
 802e660:	6023      	str	r3, [r4, #0]
 802e662:	441c      	add	r4, r3
 802e664:	6025      	str	r5, [r4, #0]
 802e666:	e004      	b.n	802e672 <_malloc_r+0x72>
 802e668:	6863      	ldr	r3, [r4, #4]
 802e66a:	42a2      	cmp	r2, r4
 802e66c:	bf0c      	ite	eq
 802e66e:	600b      	streq	r3, [r1, #0]
 802e670:	6053      	strne	r3, [r2, #4]
 802e672:	4630      	mov	r0, r6
 802e674:	f000 fe98 	bl	802f3a8 <__malloc_unlock>
 802e678:	f104 000b 	add.w	r0, r4, #11
 802e67c:	1d23      	adds	r3, r4, #4
 802e67e:	f020 0007 	bic.w	r0, r0, #7
 802e682:	1ac2      	subs	r2, r0, r3
 802e684:	d0cc      	beq.n	802e620 <_malloc_r+0x20>
 802e686:	1a1b      	subs	r3, r3, r0
 802e688:	50a3      	str	r3, [r4, r2]
 802e68a:	e7c9      	b.n	802e620 <_malloc_r+0x20>
 802e68c:	4622      	mov	r2, r4
 802e68e:	6864      	ldr	r4, [r4, #4]
 802e690:	e7cc      	b.n	802e62c <_malloc_r+0x2c>
 802e692:	1cc4      	adds	r4, r0, #3
 802e694:	f024 0403 	bic.w	r4, r4, #3
 802e698:	42a0      	cmp	r0, r4
 802e69a:	d0e3      	beq.n	802e664 <_malloc_r+0x64>
 802e69c:	1a21      	subs	r1, r4, r0
 802e69e:	4630      	mov	r0, r6
 802e6a0:	f000 fb60 	bl	802ed64 <_sbrk_r>
 802e6a4:	3001      	adds	r0, #1
 802e6a6:	d1dd      	bne.n	802e664 <_malloc_r+0x64>
 802e6a8:	e7cf      	b.n	802e64a <_malloc_r+0x4a>
 802e6aa:	bf00      	nop
 802e6ac:	2000993c 	.word	0x2000993c
 802e6b0:	20009940 	.word	0x20009940

0802e6b4 <__sfputc_r>:
 802e6b4:	6893      	ldr	r3, [r2, #8]
 802e6b6:	3b01      	subs	r3, #1
 802e6b8:	2b00      	cmp	r3, #0
 802e6ba:	b410      	push	{r4}
 802e6bc:	6093      	str	r3, [r2, #8]
 802e6be:	da08      	bge.n	802e6d2 <__sfputc_r+0x1e>
 802e6c0:	6994      	ldr	r4, [r2, #24]
 802e6c2:	42a3      	cmp	r3, r4
 802e6c4:	db01      	blt.n	802e6ca <__sfputc_r+0x16>
 802e6c6:	290a      	cmp	r1, #10
 802e6c8:	d103      	bne.n	802e6d2 <__sfputc_r+0x1e>
 802e6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e6ce:	f000 bbe9 	b.w	802eea4 <__swbuf_r>
 802e6d2:	6813      	ldr	r3, [r2, #0]
 802e6d4:	1c58      	adds	r0, r3, #1
 802e6d6:	6010      	str	r0, [r2, #0]
 802e6d8:	7019      	strb	r1, [r3, #0]
 802e6da:	4608      	mov	r0, r1
 802e6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e6e0:	4770      	bx	lr

0802e6e2 <__sfputs_r>:
 802e6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e6e4:	4606      	mov	r6, r0
 802e6e6:	460f      	mov	r7, r1
 802e6e8:	4614      	mov	r4, r2
 802e6ea:	18d5      	adds	r5, r2, r3
 802e6ec:	42ac      	cmp	r4, r5
 802e6ee:	d101      	bne.n	802e6f4 <__sfputs_r+0x12>
 802e6f0:	2000      	movs	r0, #0
 802e6f2:	e007      	b.n	802e704 <__sfputs_r+0x22>
 802e6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e6f8:	463a      	mov	r2, r7
 802e6fa:	4630      	mov	r0, r6
 802e6fc:	f7ff ffda 	bl	802e6b4 <__sfputc_r>
 802e700:	1c43      	adds	r3, r0, #1
 802e702:	d1f3      	bne.n	802e6ec <__sfputs_r+0xa>
 802e704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e708 <_vfiprintf_r>:
 802e708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e70c:	460d      	mov	r5, r1
 802e70e:	b09d      	sub	sp, #116	; 0x74
 802e710:	4614      	mov	r4, r2
 802e712:	4698      	mov	r8, r3
 802e714:	4606      	mov	r6, r0
 802e716:	b118      	cbz	r0, 802e720 <_vfiprintf_r+0x18>
 802e718:	6983      	ldr	r3, [r0, #24]
 802e71a:	b90b      	cbnz	r3, 802e720 <_vfiprintf_r+0x18>
 802e71c:	f7ff fe12 	bl	802e344 <__sinit>
 802e720:	4b89      	ldr	r3, [pc, #548]	; (802e948 <_vfiprintf_r+0x240>)
 802e722:	429d      	cmp	r5, r3
 802e724:	d11b      	bne.n	802e75e <_vfiprintf_r+0x56>
 802e726:	6875      	ldr	r5, [r6, #4]
 802e728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e72a:	07d9      	lsls	r1, r3, #31
 802e72c:	d405      	bmi.n	802e73a <_vfiprintf_r+0x32>
 802e72e:	89ab      	ldrh	r3, [r5, #12]
 802e730:	059a      	lsls	r2, r3, #22
 802e732:	d402      	bmi.n	802e73a <_vfiprintf_r+0x32>
 802e734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e736:	f7ff feda 	bl	802e4ee <__retarget_lock_acquire_recursive>
 802e73a:	89ab      	ldrh	r3, [r5, #12]
 802e73c:	071b      	lsls	r3, r3, #28
 802e73e:	d501      	bpl.n	802e744 <_vfiprintf_r+0x3c>
 802e740:	692b      	ldr	r3, [r5, #16]
 802e742:	b9eb      	cbnz	r3, 802e780 <_vfiprintf_r+0x78>
 802e744:	4629      	mov	r1, r5
 802e746:	4630      	mov	r0, r6
 802e748:	f000 fc10 	bl	802ef6c <__swsetup_r>
 802e74c:	b1c0      	cbz	r0, 802e780 <_vfiprintf_r+0x78>
 802e74e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e750:	07dc      	lsls	r4, r3, #31
 802e752:	d50e      	bpl.n	802e772 <_vfiprintf_r+0x6a>
 802e754:	f04f 30ff 	mov.w	r0, #4294967295
 802e758:	b01d      	add	sp, #116	; 0x74
 802e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e75e:	4b7b      	ldr	r3, [pc, #492]	; (802e94c <_vfiprintf_r+0x244>)
 802e760:	429d      	cmp	r5, r3
 802e762:	d101      	bne.n	802e768 <_vfiprintf_r+0x60>
 802e764:	68b5      	ldr	r5, [r6, #8]
 802e766:	e7df      	b.n	802e728 <_vfiprintf_r+0x20>
 802e768:	4b79      	ldr	r3, [pc, #484]	; (802e950 <_vfiprintf_r+0x248>)
 802e76a:	429d      	cmp	r5, r3
 802e76c:	bf08      	it	eq
 802e76e:	68f5      	ldreq	r5, [r6, #12]
 802e770:	e7da      	b.n	802e728 <_vfiprintf_r+0x20>
 802e772:	89ab      	ldrh	r3, [r5, #12]
 802e774:	0598      	lsls	r0, r3, #22
 802e776:	d4ed      	bmi.n	802e754 <_vfiprintf_r+0x4c>
 802e778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e77a:	f7ff feba 	bl	802e4f2 <__retarget_lock_release_recursive>
 802e77e:	e7e9      	b.n	802e754 <_vfiprintf_r+0x4c>
 802e780:	2300      	movs	r3, #0
 802e782:	9309      	str	r3, [sp, #36]	; 0x24
 802e784:	2320      	movs	r3, #32
 802e786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e78a:	f8cd 800c 	str.w	r8, [sp, #12]
 802e78e:	2330      	movs	r3, #48	; 0x30
 802e790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802e954 <_vfiprintf_r+0x24c>
 802e794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e798:	f04f 0901 	mov.w	r9, #1
 802e79c:	4623      	mov	r3, r4
 802e79e:	469a      	mov	sl, r3
 802e7a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e7a4:	b10a      	cbz	r2, 802e7aa <_vfiprintf_r+0xa2>
 802e7a6:	2a25      	cmp	r2, #37	; 0x25
 802e7a8:	d1f9      	bne.n	802e79e <_vfiprintf_r+0x96>
 802e7aa:	ebba 0b04 	subs.w	fp, sl, r4
 802e7ae:	d00b      	beq.n	802e7c8 <_vfiprintf_r+0xc0>
 802e7b0:	465b      	mov	r3, fp
 802e7b2:	4622      	mov	r2, r4
 802e7b4:	4629      	mov	r1, r5
 802e7b6:	4630      	mov	r0, r6
 802e7b8:	f7ff ff93 	bl	802e6e2 <__sfputs_r>
 802e7bc:	3001      	adds	r0, #1
 802e7be:	f000 80aa 	beq.w	802e916 <_vfiprintf_r+0x20e>
 802e7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e7c4:	445a      	add	r2, fp
 802e7c6:	9209      	str	r2, [sp, #36]	; 0x24
 802e7c8:	f89a 3000 	ldrb.w	r3, [sl]
 802e7cc:	2b00      	cmp	r3, #0
 802e7ce:	f000 80a2 	beq.w	802e916 <_vfiprintf_r+0x20e>
 802e7d2:	2300      	movs	r3, #0
 802e7d4:	f04f 32ff 	mov.w	r2, #4294967295
 802e7d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e7dc:	f10a 0a01 	add.w	sl, sl, #1
 802e7e0:	9304      	str	r3, [sp, #16]
 802e7e2:	9307      	str	r3, [sp, #28]
 802e7e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e7e8:	931a      	str	r3, [sp, #104]	; 0x68
 802e7ea:	4654      	mov	r4, sl
 802e7ec:	2205      	movs	r2, #5
 802e7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e7f2:	4858      	ldr	r0, [pc, #352]	; (802e954 <_vfiprintf_r+0x24c>)
 802e7f4:	f7d1 fd04 	bl	8000200 <memchr>
 802e7f8:	9a04      	ldr	r2, [sp, #16]
 802e7fa:	b9d8      	cbnz	r0, 802e834 <_vfiprintf_r+0x12c>
 802e7fc:	06d1      	lsls	r1, r2, #27
 802e7fe:	bf44      	itt	mi
 802e800:	2320      	movmi	r3, #32
 802e802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e806:	0713      	lsls	r3, r2, #28
 802e808:	bf44      	itt	mi
 802e80a:	232b      	movmi	r3, #43	; 0x2b
 802e80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e810:	f89a 3000 	ldrb.w	r3, [sl]
 802e814:	2b2a      	cmp	r3, #42	; 0x2a
 802e816:	d015      	beq.n	802e844 <_vfiprintf_r+0x13c>
 802e818:	9a07      	ldr	r2, [sp, #28]
 802e81a:	4654      	mov	r4, sl
 802e81c:	2000      	movs	r0, #0
 802e81e:	f04f 0c0a 	mov.w	ip, #10
 802e822:	4621      	mov	r1, r4
 802e824:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e828:	3b30      	subs	r3, #48	; 0x30
 802e82a:	2b09      	cmp	r3, #9
 802e82c:	d94e      	bls.n	802e8cc <_vfiprintf_r+0x1c4>
 802e82e:	b1b0      	cbz	r0, 802e85e <_vfiprintf_r+0x156>
 802e830:	9207      	str	r2, [sp, #28]
 802e832:	e014      	b.n	802e85e <_vfiprintf_r+0x156>
 802e834:	eba0 0308 	sub.w	r3, r0, r8
 802e838:	fa09 f303 	lsl.w	r3, r9, r3
 802e83c:	4313      	orrs	r3, r2
 802e83e:	9304      	str	r3, [sp, #16]
 802e840:	46a2      	mov	sl, r4
 802e842:	e7d2      	b.n	802e7ea <_vfiprintf_r+0xe2>
 802e844:	9b03      	ldr	r3, [sp, #12]
 802e846:	1d19      	adds	r1, r3, #4
 802e848:	681b      	ldr	r3, [r3, #0]
 802e84a:	9103      	str	r1, [sp, #12]
 802e84c:	2b00      	cmp	r3, #0
 802e84e:	bfbb      	ittet	lt
 802e850:	425b      	neglt	r3, r3
 802e852:	f042 0202 	orrlt.w	r2, r2, #2
 802e856:	9307      	strge	r3, [sp, #28]
 802e858:	9307      	strlt	r3, [sp, #28]
 802e85a:	bfb8      	it	lt
 802e85c:	9204      	strlt	r2, [sp, #16]
 802e85e:	7823      	ldrb	r3, [r4, #0]
 802e860:	2b2e      	cmp	r3, #46	; 0x2e
 802e862:	d10c      	bne.n	802e87e <_vfiprintf_r+0x176>
 802e864:	7863      	ldrb	r3, [r4, #1]
 802e866:	2b2a      	cmp	r3, #42	; 0x2a
 802e868:	d135      	bne.n	802e8d6 <_vfiprintf_r+0x1ce>
 802e86a:	9b03      	ldr	r3, [sp, #12]
 802e86c:	1d1a      	adds	r2, r3, #4
 802e86e:	681b      	ldr	r3, [r3, #0]
 802e870:	9203      	str	r2, [sp, #12]
 802e872:	2b00      	cmp	r3, #0
 802e874:	bfb8      	it	lt
 802e876:	f04f 33ff 	movlt.w	r3, #4294967295
 802e87a:	3402      	adds	r4, #2
 802e87c:	9305      	str	r3, [sp, #20]
 802e87e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802e964 <_vfiprintf_r+0x25c>
 802e882:	7821      	ldrb	r1, [r4, #0]
 802e884:	2203      	movs	r2, #3
 802e886:	4650      	mov	r0, sl
 802e888:	f7d1 fcba 	bl	8000200 <memchr>
 802e88c:	b140      	cbz	r0, 802e8a0 <_vfiprintf_r+0x198>
 802e88e:	2340      	movs	r3, #64	; 0x40
 802e890:	eba0 000a 	sub.w	r0, r0, sl
 802e894:	fa03 f000 	lsl.w	r0, r3, r0
 802e898:	9b04      	ldr	r3, [sp, #16]
 802e89a:	4303      	orrs	r3, r0
 802e89c:	3401      	adds	r4, #1
 802e89e:	9304      	str	r3, [sp, #16]
 802e8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e8a4:	482c      	ldr	r0, [pc, #176]	; (802e958 <_vfiprintf_r+0x250>)
 802e8a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e8aa:	2206      	movs	r2, #6
 802e8ac:	f7d1 fca8 	bl	8000200 <memchr>
 802e8b0:	2800      	cmp	r0, #0
 802e8b2:	d03f      	beq.n	802e934 <_vfiprintf_r+0x22c>
 802e8b4:	4b29      	ldr	r3, [pc, #164]	; (802e95c <_vfiprintf_r+0x254>)
 802e8b6:	bb1b      	cbnz	r3, 802e900 <_vfiprintf_r+0x1f8>
 802e8b8:	9b03      	ldr	r3, [sp, #12]
 802e8ba:	3307      	adds	r3, #7
 802e8bc:	f023 0307 	bic.w	r3, r3, #7
 802e8c0:	3308      	adds	r3, #8
 802e8c2:	9303      	str	r3, [sp, #12]
 802e8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e8c6:	443b      	add	r3, r7
 802e8c8:	9309      	str	r3, [sp, #36]	; 0x24
 802e8ca:	e767      	b.n	802e79c <_vfiprintf_r+0x94>
 802e8cc:	fb0c 3202 	mla	r2, ip, r2, r3
 802e8d0:	460c      	mov	r4, r1
 802e8d2:	2001      	movs	r0, #1
 802e8d4:	e7a5      	b.n	802e822 <_vfiprintf_r+0x11a>
 802e8d6:	2300      	movs	r3, #0
 802e8d8:	3401      	adds	r4, #1
 802e8da:	9305      	str	r3, [sp, #20]
 802e8dc:	4619      	mov	r1, r3
 802e8de:	f04f 0c0a 	mov.w	ip, #10
 802e8e2:	4620      	mov	r0, r4
 802e8e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e8e8:	3a30      	subs	r2, #48	; 0x30
 802e8ea:	2a09      	cmp	r2, #9
 802e8ec:	d903      	bls.n	802e8f6 <_vfiprintf_r+0x1ee>
 802e8ee:	2b00      	cmp	r3, #0
 802e8f0:	d0c5      	beq.n	802e87e <_vfiprintf_r+0x176>
 802e8f2:	9105      	str	r1, [sp, #20]
 802e8f4:	e7c3      	b.n	802e87e <_vfiprintf_r+0x176>
 802e8f6:	fb0c 2101 	mla	r1, ip, r1, r2
 802e8fa:	4604      	mov	r4, r0
 802e8fc:	2301      	movs	r3, #1
 802e8fe:	e7f0      	b.n	802e8e2 <_vfiprintf_r+0x1da>
 802e900:	ab03      	add	r3, sp, #12
 802e902:	9300      	str	r3, [sp, #0]
 802e904:	462a      	mov	r2, r5
 802e906:	4b16      	ldr	r3, [pc, #88]	; (802e960 <_vfiprintf_r+0x258>)
 802e908:	a904      	add	r1, sp, #16
 802e90a:	4630      	mov	r0, r6
 802e90c:	f3af 8000 	nop.w
 802e910:	4607      	mov	r7, r0
 802e912:	1c78      	adds	r0, r7, #1
 802e914:	d1d6      	bne.n	802e8c4 <_vfiprintf_r+0x1bc>
 802e916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e918:	07d9      	lsls	r1, r3, #31
 802e91a:	d405      	bmi.n	802e928 <_vfiprintf_r+0x220>
 802e91c:	89ab      	ldrh	r3, [r5, #12]
 802e91e:	059a      	lsls	r2, r3, #22
 802e920:	d402      	bmi.n	802e928 <_vfiprintf_r+0x220>
 802e922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e924:	f7ff fde5 	bl	802e4f2 <__retarget_lock_release_recursive>
 802e928:	89ab      	ldrh	r3, [r5, #12]
 802e92a:	065b      	lsls	r3, r3, #25
 802e92c:	f53f af12 	bmi.w	802e754 <_vfiprintf_r+0x4c>
 802e930:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e932:	e711      	b.n	802e758 <_vfiprintf_r+0x50>
 802e934:	ab03      	add	r3, sp, #12
 802e936:	9300      	str	r3, [sp, #0]
 802e938:	462a      	mov	r2, r5
 802e93a:	4b09      	ldr	r3, [pc, #36]	; (802e960 <_vfiprintf_r+0x258>)
 802e93c:	a904      	add	r1, sp, #16
 802e93e:	4630      	mov	r0, r6
 802e940:	f000 f880 	bl	802ea44 <_printf_i>
 802e944:	e7e4      	b.n	802e910 <_vfiprintf_r+0x208>
 802e946:	bf00      	nop
 802e948:	08034088 	.word	0x08034088
 802e94c:	080340a8 	.word	0x080340a8
 802e950:	08034068 	.word	0x08034068
 802e954:	080340cc 	.word	0x080340cc
 802e958:	080340d6 	.word	0x080340d6
 802e95c:	00000000 	.word	0x00000000
 802e960:	0802e6e3 	.word	0x0802e6e3
 802e964:	080340d2 	.word	0x080340d2

0802e968 <_printf_common>:
 802e968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e96c:	4616      	mov	r6, r2
 802e96e:	4699      	mov	r9, r3
 802e970:	688a      	ldr	r2, [r1, #8]
 802e972:	690b      	ldr	r3, [r1, #16]
 802e974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e978:	4293      	cmp	r3, r2
 802e97a:	bfb8      	it	lt
 802e97c:	4613      	movlt	r3, r2
 802e97e:	6033      	str	r3, [r6, #0]
 802e980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e984:	4607      	mov	r7, r0
 802e986:	460c      	mov	r4, r1
 802e988:	b10a      	cbz	r2, 802e98e <_printf_common+0x26>
 802e98a:	3301      	adds	r3, #1
 802e98c:	6033      	str	r3, [r6, #0]
 802e98e:	6823      	ldr	r3, [r4, #0]
 802e990:	0699      	lsls	r1, r3, #26
 802e992:	bf42      	ittt	mi
 802e994:	6833      	ldrmi	r3, [r6, #0]
 802e996:	3302      	addmi	r3, #2
 802e998:	6033      	strmi	r3, [r6, #0]
 802e99a:	6825      	ldr	r5, [r4, #0]
 802e99c:	f015 0506 	ands.w	r5, r5, #6
 802e9a0:	d106      	bne.n	802e9b0 <_printf_common+0x48>
 802e9a2:	f104 0a19 	add.w	sl, r4, #25
 802e9a6:	68e3      	ldr	r3, [r4, #12]
 802e9a8:	6832      	ldr	r2, [r6, #0]
 802e9aa:	1a9b      	subs	r3, r3, r2
 802e9ac:	42ab      	cmp	r3, r5
 802e9ae:	dc26      	bgt.n	802e9fe <_printf_common+0x96>
 802e9b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e9b4:	1e13      	subs	r3, r2, #0
 802e9b6:	6822      	ldr	r2, [r4, #0]
 802e9b8:	bf18      	it	ne
 802e9ba:	2301      	movne	r3, #1
 802e9bc:	0692      	lsls	r2, r2, #26
 802e9be:	d42b      	bmi.n	802ea18 <_printf_common+0xb0>
 802e9c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e9c4:	4649      	mov	r1, r9
 802e9c6:	4638      	mov	r0, r7
 802e9c8:	47c0      	blx	r8
 802e9ca:	3001      	adds	r0, #1
 802e9cc:	d01e      	beq.n	802ea0c <_printf_common+0xa4>
 802e9ce:	6823      	ldr	r3, [r4, #0]
 802e9d0:	68e5      	ldr	r5, [r4, #12]
 802e9d2:	6832      	ldr	r2, [r6, #0]
 802e9d4:	f003 0306 	and.w	r3, r3, #6
 802e9d8:	2b04      	cmp	r3, #4
 802e9da:	bf08      	it	eq
 802e9dc:	1aad      	subeq	r5, r5, r2
 802e9de:	68a3      	ldr	r3, [r4, #8]
 802e9e0:	6922      	ldr	r2, [r4, #16]
 802e9e2:	bf0c      	ite	eq
 802e9e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e9e8:	2500      	movne	r5, #0
 802e9ea:	4293      	cmp	r3, r2
 802e9ec:	bfc4      	itt	gt
 802e9ee:	1a9b      	subgt	r3, r3, r2
 802e9f0:	18ed      	addgt	r5, r5, r3
 802e9f2:	2600      	movs	r6, #0
 802e9f4:	341a      	adds	r4, #26
 802e9f6:	42b5      	cmp	r5, r6
 802e9f8:	d11a      	bne.n	802ea30 <_printf_common+0xc8>
 802e9fa:	2000      	movs	r0, #0
 802e9fc:	e008      	b.n	802ea10 <_printf_common+0xa8>
 802e9fe:	2301      	movs	r3, #1
 802ea00:	4652      	mov	r2, sl
 802ea02:	4649      	mov	r1, r9
 802ea04:	4638      	mov	r0, r7
 802ea06:	47c0      	blx	r8
 802ea08:	3001      	adds	r0, #1
 802ea0a:	d103      	bne.n	802ea14 <_printf_common+0xac>
 802ea0c:	f04f 30ff 	mov.w	r0, #4294967295
 802ea10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ea14:	3501      	adds	r5, #1
 802ea16:	e7c6      	b.n	802e9a6 <_printf_common+0x3e>
 802ea18:	18e1      	adds	r1, r4, r3
 802ea1a:	1c5a      	adds	r2, r3, #1
 802ea1c:	2030      	movs	r0, #48	; 0x30
 802ea1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802ea22:	4422      	add	r2, r4
 802ea24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ea28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ea2c:	3302      	adds	r3, #2
 802ea2e:	e7c7      	b.n	802e9c0 <_printf_common+0x58>
 802ea30:	2301      	movs	r3, #1
 802ea32:	4622      	mov	r2, r4
 802ea34:	4649      	mov	r1, r9
 802ea36:	4638      	mov	r0, r7
 802ea38:	47c0      	blx	r8
 802ea3a:	3001      	adds	r0, #1
 802ea3c:	d0e6      	beq.n	802ea0c <_printf_common+0xa4>
 802ea3e:	3601      	adds	r6, #1
 802ea40:	e7d9      	b.n	802e9f6 <_printf_common+0x8e>
	...

0802ea44 <_printf_i>:
 802ea44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ea48:	460c      	mov	r4, r1
 802ea4a:	4691      	mov	r9, r2
 802ea4c:	7e27      	ldrb	r7, [r4, #24]
 802ea4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802ea50:	2f78      	cmp	r7, #120	; 0x78
 802ea52:	4680      	mov	r8, r0
 802ea54:	469a      	mov	sl, r3
 802ea56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802ea5a:	d807      	bhi.n	802ea6c <_printf_i+0x28>
 802ea5c:	2f62      	cmp	r7, #98	; 0x62
 802ea5e:	d80a      	bhi.n	802ea76 <_printf_i+0x32>
 802ea60:	2f00      	cmp	r7, #0
 802ea62:	f000 80d8 	beq.w	802ec16 <_printf_i+0x1d2>
 802ea66:	2f58      	cmp	r7, #88	; 0x58
 802ea68:	f000 80a3 	beq.w	802ebb2 <_printf_i+0x16e>
 802ea6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802ea70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ea74:	e03a      	b.n	802eaec <_printf_i+0xa8>
 802ea76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ea7a:	2b15      	cmp	r3, #21
 802ea7c:	d8f6      	bhi.n	802ea6c <_printf_i+0x28>
 802ea7e:	a001      	add	r0, pc, #4	; (adr r0, 802ea84 <_printf_i+0x40>)
 802ea80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802ea84:	0802eadd 	.word	0x0802eadd
 802ea88:	0802eaf1 	.word	0x0802eaf1
 802ea8c:	0802ea6d 	.word	0x0802ea6d
 802ea90:	0802ea6d 	.word	0x0802ea6d
 802ea94:	0802ea6d 	.word	0x0802ea6d
 802ea98:	0802ea6d 	.word	0x0802ea6d
 802ea9c:	0802eaf1 	.word	0x0802eaf1
 802eaa0:	0802ea6d 	.word	0x0802ea6d
 802eaa4:	0802ea6d 	.word	0x0802ea6d
 802eaa8:	0802ea6d 	.word	0x0802ea6d
 802eaac:	0802ea6d 	.word	0x0802ea6d
 802eab0:	0802ebfd 	.word	0x0802ebfd
 802eab4:	0802eb21 	.word	0x0802eb21
 802eab8:	0802ebdf 	.word	0x0802ebdf
 802eabc:	0802ea6d 	.word	0x0802ea6d
 802eac0:	0802ea6d 	.word	0x0802ea6d
 802eac4:	0802ec1f 	.word	0x0802ec1f
 802eac8:	0802ea6d 	.word	0x0802ea6d
 802eacc:	0802eb21 	.word	0x0802eb21
 802ead0:	0802ea6d 	.word	0x0802ea6d
 802ead4:	0802ea6d 	.word	0x0802ea6d
 802ead8:	0802ebe7 	.word	0x0802ebe7
 802eadc:	680b      	ldr	r3, [r1, #0]
 802eade:	1d1a      	adds	r2, r3, #4
 802eae0:	681b      	ldr	r3, [r3, #0]
 802eae2:	600a      	str	r2, [r1, #0]
 802eae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802eae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802eaec:	2301      	movs	r3, #1
 802eaee:	e0a3      	b.n	802ec38 <_printf_i+0x1f4>
 802eaf0:	6825      	ldr	r5, [r4, #0]
 802eaf2:	6808      	ldr	r0, [r1, #0]
 802eaf4:	062e      	lsls	r6, r5, #24
 802eaf6:	f100 0304 	add.w	r3, r0, #4
 802eafa:	d50a      	bpl.n	802eb12 <_printf_i+0xce>
 802eafc:	6805      	ldr	r5, [r0, #0]
 802eafe:	600b      	str	r3, [r1, #0]
 802eb00:	2d00      	cmp	r5, #0
 802eb02:	da03      	bge.n	802eb0c <_printf_i+0xc8>
 802eb04:	232d      	movs	r3, #45	; 0x2d
 802eb06:	426d      	negs	r5, r5
 802eb08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802eb0c:	485e      	ldr	r0, [pc, #376]	; (802ec88 <_printf_i+0x244>)
 802eb0e:	230a      	movs	r3, #10
 802eb10:	e019      	b.n	802eb46 <_printf_i+0x102>
 802eb12:	f015 0f40 	tst.w	r5, #64	; 0x40
 802eb16:	6805      	ldr	r5, [r0, #0]
 802eb18:	600b      	str	r3, [r1, #0]
 802eb1a:	bf18      	it	ne
 802eb1c:	b22d      	sxthne	r5, r5
 802eb1e:	e7ef      	b.n	802eb00 <_printf_i+0xbc>
 802eb20:	680b      	ldr	r3, [r1, #0]
 802eb22:	6825      	ldr	r5, [r4, #0]
 802eb24:	1d18      	adds	r0, r3, #4
 802eb26:	6008      	str	r0, [r1, #0]
 802eb28:	0628      	lsls	r0, r5, #24
 802eb2a:	d501      	bpl.n	802eb30 <_printf_i+0xec>
 802eb2c:	681d      	ldr	r5, [r3, #0]
 802eb2e:	e002      	b.n	802eb36 <_printf_i+0xf2>
 802eb30:	0669      	lsls	r1, r5, #25
 802eb32:	d5fb      	bpl.n	802eb2c <_printf_i+0xe8>
 802eb34:	881d      	ldrh	r5, [r3, #0]
 802eb36:	4854      	ldr	r0, [pc, #336]	; (802ec88 <_printf_i+0x244>)
 802eb38:	2f6f      	cmp	r7, #111	; 0x6f
 802eb3a:	bf0c      	ite	eq
 802eb3c:	2308      	moveq	r3, #8
 802eb3e:	230a      	movne	r3, #10
 802eb40:	2100      	movs	r1, #0
 802eb42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802eb46:	6866      	ldr	r6, [r4, #4]
 802eb48:	60a6      	str	r6, [r4, #8]
 802eb4a:	2e00      	cmp	r6, #0
 802eb4c:	bfa2      	ittt	ge
 802eb4e:	6821      	ldrge	r1, [r4, #0]
 802eb50:	f021 0104 	bicge.w	r1, r1, #4
 802eb54:	6021      	strge	r1, [r4, #0]
 802eb56:	b90d      	cbnz	r5, 802eb5c <_printf_i+0x118>
 802eb58:	2e00      	cmp	r6, #0
 802eb5a:	d04d      	beq.n	802ebf8 <_printf_i+0x1b4>
 802eb5c:	4616      	mov	r6, r2
 802eb5e:	fbb5 f1f3 	udiv	r1, r5, r3
 802eb62:	fb03 5711 	mls	r7, r3, r1, r5
 802eb66:	5dc7      	ldrb	r7, [r0, r7]
 802eb68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802eb6c:	462f      	mov	r7, r5
 802eb6e:	42bb      	cmp	r3, r7
 802eb70:	460d      	mov	r5, r1
 802eb72:	d9f4      	bls.n	802eb5e <_printf_i+0x11a>
 802eb74:	2b08      	cmp	r3, #8
 802eb76:	d10b      	bne.n	802eb90 <_printf_i+0x14c>
 802eb78:	6823      	ldr	r3, [r4, #0]
 802eb7a:	07df      	lsls	r7, r3, #31
 802eb7c:	d508      	bpl.n	802eb90 <_printf_i+0x14c>
 802eb7e:	6923      	ldr	r3, [r4, #16]
 802eb80:	6861      	ldr	r1, [r4, #4]
 802eb82:	4299      	cmp	r1, r3
 802eb84:	bfde      	ittt	le
 802eb86:	2330      	movle	r3, #48	; 0x30
 802eb88:	f806 3c01 	strble.w	r3, [r6, #-1]
 802eb8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 802eb90:	1b92      	subs	r2, r2, r6
 802eb92:	6122      	str	r2, [r4, #16]
 802eb94:	f8cd a000 	str.w	sl, [sp]
 802eb98:	464b      	mov	r3, r9
 802eb9a:	aa03      	add	r2, sp, #12
 802eb9c:	4621      	mov	r1, r4
 802eb9e:	4640      	mov	r0, r8
 802eba0:	f7ff fee2 	bl	802e968 <_printf_common>
 802eba4:	3001      	adds	r0, #1
 802eba6:	d14c      	bne.n	802ec42 <_printf_i+0x1fe>
 802eba8:	f04f 30ff 	mov.w	r0, #4294967295
 802ebac:	b004      	add	sp, #16
 802ebae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ebb2:	4835      	ldr	r0, [pc, #212]	; (802ec88 <_printf_i+0x244>)
 802ebb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802ebb8:	6823      	ldr	r3, [r4, #0]
 802ebba:	680e      	ldr	r6, [r1, #0]
 802ebbc:	061f      	lsls	r7, r3, #24
 802ebbe:	f856 5b04 	ldr.w	r5, [r6], #4
 802ebc2:	600e      	str	r6, [r1, #0]
 802ebc4:	d514      	bpl.n	802ebf0 <_printf_i+0x1ac>
 802ebc6:	07d9      	lsls	r1, r3, #31
 802ebc8:	bf44      	itt	mi
 802ebca:	f043 0320 	orrmi.w	r3, r3, #32
 802ebce:	6023      	strmi	r3, [r4, #0]
 802ebd0:	b91d      	cbnz	r5, 802ebda <_printf_i+0x196>
 802ebd2:	6823      	ldr	r3, [r4, #0]
 802ebd4:	f023 0320 	bic.w	r3, r3, #32
 802ebd8:	6023      	str	r3, [r4, #0]
 802ebda:	2310      	movs	r3, #16
 802ebdc:	e7b0      	b.n	802eb40 <_printf_i+0xfc>
 802ebde:	6823      	ldr	r3, [r4, #0]
 802ebe0:	f043 0320 	orr.w	r3, r3, #32
 802ebe4:	6023      	str	r3, [r4, #0]
 802ebe6:	2378      	movs	r3, #120	; 0x78
 802ebe8:	4828      	ldr	r0, [pc, #160]	; (802ec8c <_printf_i+0x248>)
 802ebea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802ebee:	e7e3      	b.n	802ebb8 <_printf_i+0x174>
 802ebf0:	065e      	lsls	r6, r3, #25
 802ebf2:	bf48      	it	mi
 802ebf4:	b2ad      	uxthmi	r5, r5
 802ebf6:	e7e6      	b.n	802ebc6 <_printf_i+0x182>
 802ebf8:	4616      	mov	r6, r2
 802ebfa:	e7bb      	b.n	802eb74 <_printf_i+0x130>
 802ebfc:	680b      	ldr	r3, [r1, #0]
 802ebfe:	6826      	ldr	r6, [r4, #0]
 802ec00:	6960      	ldr	r0, [r4, #20]
 802ec02:	1d1d      	adds	r5, r3, #4
 802ec04:	600d      	str	r5, [r1, #0]
 802ec06:	0635      	lsls	r5, r6, #24
 802ec08:	681b      	ldr	r3, [r3, #0]
 802ec0a:	d501      	bpl.n	802ec10 <_printf_i+0x1cc>
 802ec0c:	6018      	str	r0, [r3, #0]
 802ec0e:	e002      	b.n	802ec16 <_printf_i+0x1d2>
 802ec10:	0671      	lsls	r1, r6, #25
 802ec12:	d5fb      	bpl.n	802ec0c <_printf_i+0x1c8>
 802ec14:	8018      	strh	r0, [r3, #0]
 802ec16:	2300      	movs	r3, #0
 802ec18:	6123      	str	r3, [r4, #16]
 802ec1a:	4616      	mov	r6, r2
 802ec1c:	e7ba      	b.n	802eb94 <_printf_i+0x150>
 802ec1e:	680b      	ldr	r3, [r1, #0]
 802ec20:	1d1a      	adds	r2, r3, #4
 802ec22:	600a      	str	r2, [r1, #0]
 802ec24:	681e      	ldr	r6, [r3, #0]
 802ec26:	6862      	ldr	r2, [r4, #4]
 802ec28:	2100      	movs	r1, #0
 802ec2a:	4630      	mov	r0, r6
 802ec2c:	f7d1 fae8 	bl	8000200 <memchr>
 802ec30:	b108      	cbz	r0, 802ec36 <_printf_i+0x1f2>
 802ec32:	1b80      	subs	r0, r0, r6
 802ec34:	6060      	str	r0, [r4, #4]
 802ec36:	6863      	ldr	r3, [r4, #4]
 802ec38:	6123      	str	r3, [r4, #16]
 802ec3a:	2300      	movs	r3, #0
 802ec3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ec40:	e7a8      	b.n	802eb94 <_printf_i+0x150>
 802ec42:	6923      	ldr	r3, [r4, #16]
 802ec44:	4632      	mov	r2, r6
 802ec46:	4649      	mov	r1, r9
 802ec48:	4640      	mov	r0, r8
 802ec4a:	47d0      	blx	sl
 802ec4c:	3001      	adds	r0, #1
 802ec4e:	d0ab      	beq.n	802eba8 <_printf_i+0x164>
 802ec50:	6823      	ldr	r3, [r4, #0]
 802ec52:	079b      	lsls	r3, r3, #30
 802ec54:	d413      	bmi.n	802ec7e <_printf_i+0x23a>
 802ec56:	68e0      	ldr	r0, [r4, #12]
 802ec58:	9b03      	ldr	r3, [sp, #12]
 802ec5a:	4298      	cmp	r0, r3
 802ec5c:	bfb8      	it	lt
 802ec5e:	4618      	movlt	r0, r3
 802ec60:	e7a4      	b.n	802ebac <_printf_i+0x168>
 802ec62:	2301      	movs	r3, #1
 802ec64:	4632      	mov	r2, r6
 802ec66:	4649      	mov	r1, r9
 802ec68:	4640      	mov	r0, r8
 802ec6a:	47d0      	blx	sl
 802ec6c:	3001      	adds	r0, #1
 802ec6e:	d09b      	beq.n	802eba8 <_printf_i+0x164>
 802ec70:	3501      	adds	r5, #1
 802ec72:	68e3      	ldr	r3, [r4, #12]
 802ec74:	9903      	ldr	r1, [sp, #12]
 802ec76:	1a5b      	subs	r3, r3, r1
 802ec78:	42ab      	cmp	r3, r5
 802ec7a:	dcf2      	bgt.n	802ec62 <_printf_i+0x21e>
 802ec7c:	e7eb      	b.n	802ec56 <_printf_i+0x212>
 802ec7e:	2500      	movs	r5, #0
 802ec80:	f104 0619 	add.w	r6, r4, #25
 802ec84:	e7f5      	b.n	802ec72 <_printf_i+0x22e>
 802ec86:	bf00      	nop
 802ec88:	080340dd 	.word	0x080340dd
 802ec8c:	080340ee 	.word	0x080340ee

0802ec90 <cleanup_glue>:
 802ec90:	b538      	push	{r3, r4, r5, lr}
 802ec92:	460c      	mov	r4, r1
 802ec94:	6809      	ldr	r1, [r1, #0]
 802ec96:	4605      	mov	r5, r0
 802ec98:	b109      	cbz	r1, 802ec9e <cleanup_glue+0xe>
 802ec9a:	f7ff fff9 	bl	802ec90 <cleanup_glue>
 802ec9e:	4621      	mov	r1, r4
 802eca0:	4628      	mov	r0, r5
 802eca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802eca6:	f7ff bc5b 	b.w	802e560 <_free_r>
	...

0802ecac <_reclaim_reent>:
 802ecac:	4b2c      	ldr	r3, [pc, #176]	; (802ed60 <_reclaim_reent+0xb4>)
 802ecae:	681b      	ldr	r3, [r3, #0]
 802ecb0:	4283      	cmp	r3, r0
 802ecb2:	b570      	push	{r4, r5, r6, lr}
 802ecb4:	4604      	mov	r4, r0
 802ecb6:	d051      	beq.n	802ed5c <_reclaim_reent+0xb0>
 802ecb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802ecba:	b143      	cbz	r3, 802ecce <_reclaim_reent+0x22>
 802ecbc:	68db      	ldr	r3, [r3, #12]
 802ecbe:	2b00      	cmp	r3, #0
 802ecc0:	d14a      	bne.n	802ed58 <_reclaim_reent+0xac>
 802ecc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ecc4:	6819      	ldr	r1, [r3, #0]
 802ecc6:	b111      	cbz	r1, 802ecce <_reclaim_reent+0x22>
 802ecc8:	4620      	mov	r0, r4
 802ecca:	f7ff fc49 	bl	802e560 <_free_r>
 802ecce:	6961      	ldr	r1, [r4, #20]
 802ecd0:	b111      	cbz	r1, 802ecd8 <_reclaim_reent+0x2c>
 802ecd2:	4620      	mov	r0, r4
 802ecd4:	f7ff fc44 	bl	802e560 <_free_r>
 802ecd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802ecda:	b111      	cbz	r1, 802ece2 <_reclaim_reent+0x36>
 802ecdc:	4620      	mov	r0, r4
 802ecde:	f7ff fc3f 	bl	802e560 <_free_r>
 802ece2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802ece4:	b111      	cbz	r1, 802ecec <_reclaim_reent+0x40>
 802ece6:	4620      	mov	r0, r4
 802ece8:	f7ff fc3a 	bl	802e560 <_free_r>
 802ecec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802ecee:	b111      	cbz	r1, 802ecf6 <_reclaim_reent+0x4a>
 802ecf0:	4620      	mov	r0, r4
 802ecf2:	f7ff fc35 	bl	802e560 <_free_r>
 802ecf6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ecf8:	b111      	cbz	r1, 802ed00 <_reclaim_reent+0x54>
 802ecfa:	4620      	mov	r0, r4
 802ecfc:	f7ff fc30 	bl	802e560 <_free_r>
 802ed00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802ed02:	b111      	cbz	r1, 802ed0a <_reclaim_reent+0x5e>
 802ed04:	4620      	mov	r0, r4
 802ed06:	f7ff fc2b 	bl	802e560 <_free_r>
 802ed0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802ed0c:	b111      	cbz	r1, 802ed14 <_reclaim_reent+0x68>
 802ed0e:	4620      	mov	r0, r4
 802ed10:	f7ff fc26 	bl	802e560 <_free_r>
 802ed14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ed16:	b111      	cbz	r1, 802ed1e <_reclaim_reent+0x72>
 802ed18:	4620      	mov	r0, r4
 802ed1a:	f7ff fc21 	bl	802e560 <_free_r>
 802ed1e:	69a3      	ldr	r3, [r4, #24]
 802ed20:	b1e3      	cbz	r3, 802ed5c <_reclaim_reent+0xb0>
 802ed22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802ed24:	4620      	mov	r0, r4
 802ed26:	4798      	blx	r3
 802ed28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802ed2a:	b1b9      	cbz	r1, 802ed5c <_reclaim_reent+0xb0>
 802ed2c:	4620      	mov	r0, r4
 802ed2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802ed32:	f7ff bfad 	b.w	802ec90 <cleanup_glue>
 802ed36:	5949      	ldr	r1, [r1, r5]
 802ed38:	b941      	cbnz	r1, 802ed4c <_reclaim_reent+0xa0>
 802ed3a:	3504      	adds	r5, #4
 802ed3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802ed3e:	2d80      	cmp	r5, #128	; 0x80
 802ed40:	68d9      	ldr	r1, [r3, #12]
 802ed42:	d1f8      	bne.n	802ed36 <_reclaim_reent+0x8a>
 802ed44:	4620      	mov	r0, r4
 802ed46:	f7ff fc0b 	bl	802e560 <_free_r>
 802ed4a:	e7ba      	b.n	802ecc2 <_reclaim_reent+0x16>
 802ed4c:	680e      	ldr	r6, [r1, #0]
 802ed4e:	4620      	mov	r0, r4
 802ed50:	f7ff fc06 	bl	802e560 <_free_r>
 802ed54:	4631      	mov	r1, r6
 802ed56:	e7ef      	b.n	802ed38 <_reclaim_reent+0x8c>
 802ed58:	2500      	movs	r5, #0
 802ed5a:	e7ef      	b.n	802ed3c <_reclaim_reent+0x90>
 802ed5c:	bd70      	pop	{r4, r5, r6, pc}
 802ed5e:	bf00      	nop
 802ed60:	20000098 	.word	0x20000098

0802ed64 <_sbrk_r>:
 802ed64:	b538      	push	{r3, r4, r5, lr}
 802ed66:	4d06      	ldr	r5, [pc, #24]	; (802ed80 <_sbrk_r+0x1c>)
 802ed68:	2300      	movs	r3, #0
 802ed6a:	4604      	mov	r4, r0
 802ed6c:	4608      	mov	r0, r1
 802ed6e:	602b      	str	r3, [r5, #0]
 802ed70:	f7d5 fa6a 	bl	8004248 <_sbrk>
 802ed74:	1c43      	adds	r3, r0, #1
 802ed76:	d102      	bne.n	802ed7e <_sbrk_r+0x1a>
 802ed78:	682b      	ldr	r3, [r5, #0]
 802ed7a:	b103      	cbz	r3, 802ed7e <_sbrk_r+0x1a>
 802ed7c:	6023      	str	r3, [r4, #0]
 802ed7e:	bd38      	pop	{r3, r4, r5, pc}
 802ed80:	2000b6a0 	.word	0x2000b6a0

0802ed84 <_raise_r>:
 802ed84:	291f      	cmp	r1, #31
 802ed86:	b538      	push	{r3, r4, r5, lr}
 802ed88:	4604      	mov	r4, r0
 802ed8a:	460d      	mov	r5, r1
 802ed8c:	d904      	bls.n	802ed98 <_raise_r+0x14>
 802ed8e:	2316      	movs	r3, #22
 802ed90:	6003      	str	r3, [r0, #0]
 802ed92:	f04f 30ff 	mov.w	r0, #4294967295
 802ed96:	bd38      	pop	{r3, r4, r5, pc}
 802ed98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ed9a:	b112      	cbz	r2, 802eda2 <_raise_r+0x1e>
 802ed9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802eda0:	b94b      	cbnz	r3, 802edb6 <_raise_r+0x32>
 802eda2:	4620      	mov	r0, r4
 802eda4:	f000 f830 	bl	802ee08 <_getpid_r>
 802eda8:	462a      	mov	r2, r5
 802edaa:	4601      	mov	r1, r0
 802edac:	4620      	mov	r0, r4
 802edae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802edb2:	f000 b817 	b.w	802ede4 <_kill_r>
 802edb6:	2b01      	cmp	r3, #1
 802edb8:	d00a      	beq.n	802edd0 <_raise_r+0x4c>
 802edba:	1c59      	adds	r1, r3, #1
 802edbc:	d103      	bne.n	802edc6 <_raise_r+0x42>
 802edbe:	2316      	movs	r3, #22
 802edc0:	6003      	str	r3, [r0, #0]
 802edc2:	2001      	movs	r0, #1
 802edc4:	e7e7      	b.n	802ed96 <_raise_r+0x12>
 802edc6:	2400      	movs	r4, #0
 802edc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802edcc:	4628      	mov	r0, r5
 802edce:	4798      	blx	r3
 802edd0:	2000      	movs	r0, #0
 802edd2:	e7e0      	b.n	802ed96 <_raise_r+0x12>

0802edd4 <raise>:
 802edd4:	4b02      	ldr	r3, [pc, #8]	; (802ede0 <raise+0xc>)
 802edd6:	4601      	mov	r1, r0
 802edd8:	6818      	ldr	r0, [r3, #0]
 802edda:	f7ff bfd3 	b.w	802ed84 <_raise_r>
 802edde:	bf00      	nop
 802ede0:	20000098 	.word	0x20000098

0802ede4 <_kill_r>:
 802ede4:	b538      	push	{r3, r4, r5, lr}
 802ede6:	4d07      	ldr	r5, [pc, #28]	; (802ee04 <_kill_r+0x20>)
 802ede8:	2300      	movs	r3, #0
 802edea:	4604      	mov	r4, r0
 802edec:	4608      	mov	r0, r1
 802edee:	4611      	mov	r1, r2
 802edf0:	602b      	str	r3, [r5, #0]
 802edf2:	f7d5 f9a1 	bl	8004138 <_kill>
 802edf6:	1c43      	adds	r3, r0, #1
 802edf8:	d102      	bne.n	802ee00 <_kill_r+0x1c>
 802edfa:	682b      	ldr	r3, [r5, #0]
 802edfc:	b103      	cbz	r3, 802ee00 <_kill_r+0x1c>
 802edfe:	6023      	str	r3, [r4, #0]
 802ee00:	bd38      	pop	{r3, r4, r5, pc}
 802ee02:	bf00      	nop
 802ee04:	2000b6a0 	.word	0x2000b6a0

0802ee08 <_getpid_r>:
 802ee08:	f7d5 b98e 	b.w	8004128 <_getpid>

0802ee0c <__sread>:
 802ee0c:	b510      	push	{r4, lr}
 802ee0e:	460c      	mov	r4, r1
 802ee10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ee14:	f000 face 	bl	802f3b4 <_read_r>
 802ee18:	2800      	cmp	r0, #0
 802ee1a:	bfab      	itete	ge
 802ee1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ee1e:	89a3      	ldrhlt	r3, [r4, #12]
 802ee20:	181b      	addge	r3, r3, r0
 802ee22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ee26:	bfac      	ite	ge
 802ee28:	6563      	strge	r3, [r4, #84]	; 0x54
 802ee2a:	81a3      	strhlt	r3, [r4, #12]
 802ee2c:	bd10      	pop	{r4, pc}

0802ee2e <__swrite>:
 802ee2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ee32:	461f      	mov	r7, r3
 802ee34:	898b      	ldrh	r3, [r1, #12]
 802ee36:	05db      	lsls	r3, r3, #23
 802ee38:	4605      	mov	r5, r0
 802ee3a:	460c      	mov	r4, r1
 802ee3c:	4616      	mov	r6, r2
 802ee3e:	d505      	bpl.n	802ee4c <__swrite+0x1e>
 802ee40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ee44:	2302      	movs	r3, #2
 802ee46:	2200      	movs	r2, #0
 802ee48:	f000 fa32 	bl	802f2b0 <_lseek_r>
 802ee4c:	89a3      	ldrh	r3, [r4, #12]
 802ee4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ee52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ee56:	81a3      	strh	r3, [r4, #12]
 802ee58:	4632      	mov	r2, r6
 802ee5a:	463b      	mov	r3, r7
 802ee5c:	4628      	mov	r0, r5
 802ee5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ee62:	f000 b871 	b.w	802ef48 <_write_r>

0802ee66 <__sseek>:
 802ee66:	b510      	push	{r4, lr}
 802ee68:	460c      	mov	r4, r1
 802ee6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ee6e:	f000 fa1f 	bl	802f2b0 <_lseek_r>
 802ee72:	1c43      	adds	r3, r0, #1
 802ee74:	89a3      	ldrh	r3, [r4, #12]
 802ee76:	bf15      	itete	ne
 802ee78:	6560      	strne	r0, [r4, #84]	; 0x54
 802ee7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ee7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ee82:	81a3      	strheq	r3, [r4, #12]
 802ee84:	bf18      	it	ne
 802ee86:	81a3      	strhne	r3, [r4, #12]
 802ee88:	bd10      	pop	{r4, pc}

0802ee8a <__sclose>:
 802ee8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ee8e:	f000 b93d 	b.w	802f10c <_close_r>

0802ee92 <strcpy>:
 802ee92:	4603      	mov	r3, r0
 802ee94:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ee98:	f803 2b01 	strb.w	r2, [r3], #1
 802ee9c:	2a00      	cmp	r2, #0
 802ee9e:	d1f9      	bne.n	802ee94 <strcpy+0x2>
 802eea0:	4770      	bx	lr
	...

0802eea4 <__swbuf_r>:
 802eea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eea6:	460e      	mov	r6, r1
 802eea8:	4614      	mov	r4, r2
 802eeaa:	4605      	mov	r5, r0
 802eeac:	b118      	cbz	r0, 802eeb6 <__swbuf_r+0x12>
 802eeae:	6983      	ldr	r3, [r0, #24]
 802eeb0:	b90b      	cbnz	r3, 802eeb6 <__swbuf_r+0x12>
 802eeb2:	f7ff fa47 	bl	802e344 <__sinit>
 802eeb6:	4b21      	ldr	r3, [pc, #132]	; (802ef3c <__swbuf_r+0x98>)
 802eeb8:	429c      	cmp	r4, r3
 802eeba:	d12b      	bne.n	802ef14 <__swbuf_r+0x70>
 802eebc:	686c      	ldr	r4, [r5, #4]
 802eebe:	69a3      	ldr	r3, [r4, #24]
 802eec0:	60a3      	str	r3, [r4, #8]
 802eec2:	89a3      	ldrh	r3, [r4, #12]
 802eec4:	071a      	lsls	r2, r3, #28
 802eec6:	d52f      	bpl.n	802ef28 <__swbuf_r+0x84>
 802eec8:	6923      	ldr	r3, [r4, #16]
 802eeca:	b36b      	cbz	r3, 802ef28 <__swbuf_r+0x84>
 802eecc:	6923      	ldr	r3, [r4, #16]
 802eece:	6820      	ldr	r0, [r4, #0]
 802eed0:	1ac0      	subs	r0, r0, r3
 802eed2:	6963      	ldr	r3, [r4, #20]
 802eed4:	b2f6      	uxtb	r6, r6
 802eed6:	4283      	cmp	r3, r0
 802eed8:	4637      	mov	r7, r6
 802eeda:	dc04      	bgt.n	802eee6 <__swbuf_r+0x42>
 802eedc:	4621      	mov	r1, r4
 802eede:	4628      	mov	r0, r5
 802eee0:	f000 f9aa 	bl	802f238 <_fflush_r>
 802eee4:	bb30      	cbnz	r0, 802ef34 <__swbuf_r+0x90>
 802eee6:	68a3      	ldr	r3, [r4, #8]
 802eee8:	3b01      	subs	r3, #1
 802eeea:	60a3      	str	r3, [r4, #8]
 802eeec:	6823      	ldr	r3, [r4, #0]
 802eeee:	1c5a      	adds	r2, r3, #1
 802eef0:	6022      	str	r2, [r4, #0]
 802eef2:	701e      	strb	r6, [r3, #0]
 802eef4:	6963      	ldr	r3, [r4, #20]
 802eef6:	3001      	adds	r0, #1
 802eef8:	4283      	cmp	r3, r0
 802eefa:	d004      	beq.n	802ef06 <__swbuf_r+0x62>
 802eefc:	89a3      	ldrh	r3, [r4, #12]
 802eefe:	07db      	lsls	r3, r3, #31
 802ef00:	d506      	bpl.n	802ef10 <__swbuf_r+0x6c>
 802ef02:	2e0a      	cmp	r6, #10
 802ef04:	d104      	bne.n	802ef10 <__swbuf_r+0x6c>
 802ef06:	4621      	mov	r1, r4
 802ef08:	4628      	mov	r0, r5
 802ef0a:	f000 f995 	bl	802f238 <_fflush_r>
 802ef0e:	b988      	cbnz	r0, 802ef34 <__swbuf_r+0x90>
 802ef10:	4638      	mov	r0, r7
 802ef12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ef14:	4b0a      	ldr	r3, [pc, #40]	; (802ef40 <__swbuf_r+0x9c>)
 802ef16:	429c      	cmp	r4, r3
 802ef18:	d101      	bne.n	802ef1e <__swbuf_r+0x7a>
 802ef1a:	68ac      	ldr	r4, [r5, #8]
 802ef1c:	e7cf      	b.n	802eebe <__swbuf_r+0x1a>
 802ef1e:	4b09      	ldr	r3, [pc, #36]	; (802ef44 <__swbuf_r+0xa0>)
 802ef20:	429c      	cmp	r4, r3
 802ef22:	bf08      	it	eq
 802ef24:	68ec      	ldreq	r4, [r5, #12]
 802ef26:	e7ca      	b.n	802eebe <__swbuf_r+0x1a>
 802ef28:	4621      	mov	r1, r4
 802ef2a:	4628      	mov	r0, r5
 802ef2c:	f000 f81e 	bl	802ef6c <__swsetup_r>
 802ef30:	2800      	cmp	r0, #0
 802ef32:	d0cb      	beq.n	802eecc <__swbuf_r+0x28>
 802ef34:	f04f 37ff 	mov.w	r7, #4294967295
 802ef38:	e7ea      	b.n	802ef10 <__swbuf_r+0x6c>
 802ef3a:	bf00      	nop
 802ef3c:	08034088 	.word	0x08034088
 802ef40:	080340a8 	.word	0x080340a8
 802ef44:	08034068 	.word	0x08034068

0802ef48 <_write_r>:
 802ef48:	b538      	push	{r3, r4, r5, lr}
 802ef4a:	4d07      	ldr	r5, [pc, #28]	; (802ef68 <_write_r+0x20>)
 802ef4c:	4604      	mov	r4, r0
 802ef4e:	4608      	mov	r0, r1
 802ef50:	4611      	mov	r1, r2
 802ef52:	2200      	movs	r2, #0
 802ef54:	602a      	str	r2, [r5, #0]
 802ef56:	461a      	mov	r2, r3
 802ef58:	f7d5 f925 	bl	80041a6 <_write>
 802ef5c:	1c43      	adds	r3, r0, #1
 802ef5e:	d102      	bne.n	802ef66 <_write_r+0x1e>
 802ef60:	682b      	ldr	r3, [r5, #0]
 802ef62:	b103      	cbz	r3, 802ef66 <_write_r+0x1e>
 802ef64:	6023      	str	r3, [r4, #0]
 802ef66:	bd38      	pop	{r3, r4, r5, pc}
 802ef68:	2000b6a0 	.word	0x2000b6a0

0802ef6c <__swsetup_r>:
 802ef6c:	4b32      	ldr	r3, [pc, #200]	; (802f038 <__swsetup_r+0xcc>)
 802ef6e:	b570      	push	{r4, r5, r6, lr}
 802ef70:	681d      	ldr	r5, [r3, #0]
 802ef72:	4606      	mov	r6, r0
 802ef74:	460c      	mov	r4, r1
 802ef76:	b125      	cbz	r5, 802ef82 <__swsetup_r+0x16>
 802ef78:	69ab      	ldr	r3, [r5, #24]
 802ef7a:	b913      	cbnz	r3, 802ef82 <__swsetup_r+0x16>
 802ef7c:	4628      	mov	r0, r5
 802ef7e:	f7ff f9e1 	bl	802e344 <__sinit>
 802ef82:	4b2e      	ldr	r3, [pc, #184]	; (802f03c <__swsetup_r+0xd0>)
 802ef84:	429c      	cmp	r4, r3
 802ef86:	d10f      	bne.n	802efa8 <__swsetup_r+0x3c>
 802ef88:	686c      	ldr	r4, [r5, #4]
 802ef8a:	89a3      	ldrh	r3, [r4, #12]
 802ef8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ef90:	0719      	lsls	r1, r3, #28
 802ef92:	d42c      	bmi.n	802efee <__swsetup_r+0x82>
 802ef94:	06dd      	lsls	r5, r3, #27
 802ef96:	d411      	bmi.n	802efbc <__swsetup_r+0x50>
 802ef98:	2309      	movs	r3, #9
 802ef9a:	6033      	str	r3, [r6, #0]
 802ef9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802efa0:	81a3      	strh	r3, [r4, #12]
 802efa2:	f04f 30ff 	mov.w	r0, #4294967295
 802efa6:	e03e      	b.n	802f026 <__swsetup_r+0xba>
 802efa8:	4b25      	ldr	r3, [pc, #148]	; (802f040 <__swsetup_r+0xd4>)
 802efaa:	429c      	cmp	r4, r3
 802efac:	d101      	bne.n	802efb2 <__swsetup_r+0x46>
 802efae:	68ac      	ldr	r4, [r5, #8]
 802efb0:	e7eb      	b.n	802ef8a <__swsetup_r+0x1e>
 802efb2:	4b24      	ldr	r3, [pc, #144]	; (802f044 <__swsetup_r+0xd8>)
 802efb4:	429c      	cmp	r4, r3
 802efb6:	bf08      	it	eq
 802efb8:	68ec      	ldreq	r4, [r5, #12]
 802efba:	e7e6      	b.n	802ef8a <__swsetup_r+0x1e>
 802efbc:	0758      	lsls	r0, r3, #29
 802efbe:	d512      	bpl.n	802efe6 <__swsetup_r+0x7a>
 802efc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802efc2:	b141      	cbz	r1, 802efd6 <__swsetup_r+0x6a>
 802efc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802efc8:	4299      	cmp	r1, r3
 802efca:	d002      	beq.n	802efd2 <__swsetup_r+0x66>
 802efcc:	4630      	mov	r0, r6
 802efce:	f7ff fac7 	bl	802e560 <_free_r>
 802efd2:	2300      	movs	r3, #0
 802efd4:	6363      	str	r3, [r4, #52]	; 0x34
 802efd6:	89a3      	ldrh	r3, [r4, #12]
 802efd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802efdc:	81a3      	strh	r3, [r4, #12]
 802efde:	2300      	movs	r3, #0
 802efe0:	6063      	str	r3, [r4, #4]
 802efe2:	6923      	ldr	r3, [r4, #16]
 802efe4:	6023      	str	r3, [r4, #0]
 802efe6:	89a3      	ldrh	r3, [r4, #12]
 802efe8:	f043 0308 	orr.w	r3, r3, #8
 802efec:	81a3      	strh	r3, [r4, #12]
 802efee:	6923      	ldr	r3, [r4, #16]
 802eff0:	b94b      	cbnz	r3, 802f006 <__swsetup_r+0x9a>
 802eff2:	89a3      	ldrh	r3, [r4, #12]
 802eff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802eff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802effc:	d003      	beq.n	802f006 <__swsetup_r+0x9a>
 802effe:	4621      	mov	r1, r4
 802f000:	4630      	mov	r0, r6
 802f002:	f000 f98b 	bl	802f31c <__smakebuf_r>
 802f006:	89a0      	ldrh	r0, [r4, #12]
 802f008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802f00c:	f010 0301 	ands.w	r3, r0, #1
 802f010:	d00a      	beq.n	802f028 <__swsetup_r+0xbc>
 802f012:	2300      	movs	r3, #0
 802f014:	60a3      	str	r3, [r4, #8]
 802f016:	6963      	ldr	r3, [r4, #20]
 802f018:	425b      	negs	r3, r3
 802f01a:	61a3      	str	r3, [r4, #24]
 802f01c:	6923      	ldr	r3, [r4, #16]
 802f01e:	b943      	cbnz	r3, 802f032 <__swsetup_r+0xc6>
 802f020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802f024:	d1ba      	bne.n	802ef9c <__swsetup_r+0x30>
 802f026:	bd70      	pop	{r4, r5, r6, pc}
 802f028:	0781      	lsls	r1, r0, #30
 802f02a:	bf58      	it	pl
 802f02c:	6963      	ldrpl	r3, [r4, #20]
 802f02e:	60a3      	str	r3, [r4, #8]
 802f030:	e7f4      	b.n	802f01c <__swsetup_r+0xb0>
 802f032:	2000      	movs	r0, #0
 802f034:	e7f7      	b.n	802f026 <__swsetup_r+0xba>
 802f036:	bf00      	nop
 802f038:	20000098 	.word	0x20000098
 802f03c:	08034088 	.word	0x08034088
 802f040:	080340a8 	.word	0x080340a8
 802f044:	08034068 	.word	0x08034068

0802f048 <__register_exitproc>:
 802f048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f04c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802f108 <__register_exitproc+0xc0>
 802f050:	4606      	mov	r6, r0
 802f052:	f8d8 0000 	ldr.w	r0, [r8]
 802f056:	461f      	mov	r7, r3
 802f058:	460d      	mov	r5, r1
 802f05a:	4691      	mov	r9, r2
 802f05c:	f7ff fa47 	bl	802e4ee <__retarget_lock_acquire_recursive>
 802f060:	4b25      	ldr	r3, [pc, #148]	; (802f0f8 <__register_exitproc+0xb0>)
 802f062:	681c      	ldr	r4, [r3, #0]
 802f064:	b934      	cbnz	r4, 802f074 <__register_exitproc+0x2c>
 802f066:	4c25      	ldr	r4, [pc, #148]	; (802f0fc <__register_exitproc+0xb4>)
 802f068:	601c      	str	r4, [r3, #0]
 802f06a:	4b25      	ldr	r3, [pc, #148]	; (802f100 <__register_exitproc+0xb8>)
 802f06c:	b113      	cbz	r3, 802f074 <__register_exitproc+0x2c>
 802f06e:	681b      	ldr	r3, [r3, #0]
 802f070:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802f074:	6863      	ldr	r3, [r4, #4]
 802f076:	2b1f      	cmp	r3, #31
 802f078:	dd07      	ble.n	802f08a <__register_exitproc+0x42>
 802f07a:	f8d8 0000 	ldr.w	r0, [r8]
 802f07e:	f7ff fa38 	bl	802e4f2 <__retarget_lock_release_recursive>
 802f082:	f04f 30ff 	mov.w	r0, #4294967295
 802f086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f08a:	b34e      	cbz	r6, 802f0e0 <__register_exitproc+0x98>
 802f08c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802f090:	b988      	cbnz	r0, 802f0b6 <__register_exitproc+0x6e>
 802f092:	4b1c      	ldr	r3, [pc, #112]	; (802f104 <__register_exitproc+0xbc>)
 802f094:	b923      	cbnz	r3, 802f0a0 <__register_exitproc+0x58>
 802f096:	f8d8 0000 	ldr.w	r0, [r8]
 802f09a:	f7ff fa29 	bl	802e4f0 <__retarget_lock_release>
 802f09e:	e7f0      	b.n	802f082 <__register_exitproc+0x3a>
 802f0a0:	f44f 7084 	mov.w	r0, #264	; 0x108
 802f0a4:	f7ff fa26 	bl	802e4f4 <malloc>
 802f0a8:	2800      	cmp	r0, #0
 802f0aa:	d0f4      	beq.n	802f096 <__register_exitproc+0x4e>
 802f0ac:	2300      	movs	r3, #0
 802f0ae:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802f0b2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802f0b6:	6863      	ldr	r3, [r4, #4]
 802f0b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802f0bc:	2201      	movs	r2, #1
 802f0be:	409a      	lsls	r2, r3
 802f0c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802f0c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802f0c8:	4313      	orrs	r3, r2
 802f0ca:	2e02      	cmp	r6, #2
 802f0cc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802f0d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802f0d4:	bf02      	ittt	eq
 802f0d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802f0da:	431a      	orreq	r2, r3
 802f0dc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802f0e0:	6863      	ldr	r3, [r4, #4]
 802f0e2:	f8d8 0000 	ldr.w	r0, [r8]
 802f0e6:	1c5a      	adds	r2, r3, #1
 802f0e8:	3302      	adds	r3, #2
 802f0ea:	6062      	str	r2, [r4, #4]
 802f0ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802f0f0:	f7ff f9ff 	bl	802e4f2 <__retarget_lock_release_recursive>
 802f0f4:	2000      	movs	r0, #0
 802f0f6:	e7c6      	b.n	802f086 <__register_exitproc+0x3e>
 802f0f8:	20009ad8 	.word	0x20009ad8
 802f0fc:	20009a4c 	.word	0x20009a4c
 802f100:	08034100 	.word	0x08034100
 802f104:	0802e4f5 	.word	0x0802e4f5
 802f108:	200000fc 	.word	0x200000fc

0802f10c <_close_r>:
 802f10c:	b538      	push	{r3, r4, r5, lr}
 802f10e:	4d06      	ldr	r5, [pc, #24]	; (802f128 <_close_r+0x1c>)
 802f110:	2300      	movs	r3, #0
 802f112:	4604      	mov	r4, r0
 802f114:	4608      	mov	r0, r1
 802f116:	602b      	str	r3, [r5, #0]
 802f118:	f7d5 f861 	bl	80041de <_close>
 802f11c:	1c43      	adds	r3, r0, #1
 802f11e:	d102      	bne.n	802f126 <_close_r+0x1a>
 802f120:	682b      	ldr	r3, [r5, #0]
 802f122:	b103      	cbz	r3, 802f126 <_close_r+0x1a>
 802f124:	6023      	str	r3, [r4, #0]
 802f126:	bd38      	pop	{r3, r4, r5, pc}
 802f128:	2000b6a0 	.word	0x2000b6a0

0802f12c <__sflush_r>:
 802f12c:	898a      	ldrh	r2, [r1, #12]
 802f12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f132:	4605      	mov	r5, r0
 802f134:	0710      	lsls	r0, r2, #28
 802f136:	460c      	mov	r4, r1
 802f138:	d458      	bmi.n	802f1ec <__sflush_r+0xc0>
 802f13a:	684b      	ldr	r3, [r1, #4]
 802f13c:	2b00      	cmp	r3, #0
 802f13e:	dc05      	bgt.n	802f14c <__sflush_r+0x20>
 802f140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802f142:	2b00      	cmp	r3, #0
 802f144:	dc02      	bgt.n	802f14c <__sflush_r+0x20>
 802f146:	2000      	movs	r0, #0
 802f148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f14c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802f14e:	2e00      	cmp	r6, #0
 802f150:	d0f9      	beq.n	802f146 <__sflush_r+0x1a>
 802f152:	2300      	movs	r3, #0
 802f154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802f158:	682f      	ldr	r7, [r5, #0]
 802f15a:	602b      	str	r3, [r5, #0]
 802f15c:	d032      	beq.n	802f1c4 <__sflush_r+0x98>
 802f15e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802f160:	89a3      	ldrh	r3, [r4, #12]
 802f162:	075a      	lsls	r2, r3, #29
 802f164:	d505      	bpl.n	802f172 <__sflush_r+0x46>
 802f166:	6863      	ldr	r3, [r4, #4]
 802f168:	1ac0      	subs	r0, r0, r3
 802f16a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802f16c:	b10b      	cbz	r3, 802f172 <__sflush_r+0x46>
 802f16e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802f170:	1ac0      	subs	r0, r0, r3
 802f172:	2300      	movs	r3, #0
 802f174:	4602      	mov	r2, r0
 802f176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802f178:	6a21      	ldr	r1, [r4, #32]
 802f17a:	4628      	mov	r0, r5
 802f17c:	47b0      	blx	r6
 802f17e:	1c43      	adds	r3, r0, #1
 802f180:	89a3      	ldrh	r3, [r4, #12]
 802f182:	d106      	bne.n	802f192 <__sflush_r+0x66>
 802f184:	6829      	ldr	r1, [r5, #0]
 802f186:	291d      	cmp	r1, #29
 802f188:	d82c      	bhi.n	802f1e4 <__sflush_r+0xb8>
 802f18a:	4a2a      	ldr	r2, [pc, #168]	; (802f234 <__sflush_r+0x108>)
 802f18c:	40ca      	lsrs	r2, r1
 802f18e:	07d6      	lsls	r6, r2, #31
 802f190:	d528      	bpl.n	802f1e4 <__sflush_r+0xb8>
 802f192:	2200      	movs	r2, #0
 802f194:	6062      	str	r2, [r4, #4]
 802f196:	04d9      	lsls	r1, r3, #19
 802f198:	6922      	ldr	r2, [r4, #16]
 802f19a:	6022      	str	r2, [r4, #0]
 802f19c:	d504      	bpl.n	802f1a8 <__sflush_r+0x7c>
 802f19e:	1c42      	adds	r2, r0, #1
 802f1a0:	d101      	bne.n	802f1a6 <__sflush_r+0x7a>
 802f1a2:	682b      	ldr	r3, [r5, #0]
 802f1a4:	b903      	cbnz	r3, 802f1a8 <__sflush_r+0x7c>
 802f1a6:	6560      	str	r0, [r4, #84]	; 0x54
 802f1a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802f1aa:	602f      	str	r7, [r5, #0]
 802f1ac:	2900      	cmp	r1, #0
 802f1ae:	d0ca      	beq.n	802f146 <__sflush_r+0x1a>
 802f1b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802f1b4:	4299      	cmp	r1, r3
 802f1b6:	d002      	beq.n	802f1be <__sflush_r+0x92>
 802f1b8:	4628      	mov	r0, r5
 802f1ba:	f7ff f9d1 	bl	802e560 <_free_r>
 802f1be:	2000      	movs	r0, #0
 802f1c0:	6360      	str	r0, [r4, #52]	; 0x34
 802f1c2:	e7c1      	b.n	802f148 <__sflush_r+0x1c>
 802f1c4:	6a21      	ldr	r1, [r4, #32]
 802f1c6:	2301      	movs	r3, #1
 802f1c8:	4628      	mov	r0, r5
 802f1ca:	47b0      	blx	r6
 802f1cc:	1c41      	adds	r1, r0, #1
 802f1ce:	d1c7      	bne.n	802f160 <__sflush_r+0x34>
 802f1d0:	682b      	ldr	r3, [r5, #0]
 802f1d2:	2b00      	cmp	r3, #0
 802f1d4:	d0c4      	beq.n	802f160 <__sflush_r+0x34>
 802f1d6:	2b1d      	cmp	r3, #29
 802f1d8:	d001      	beq.n	802f1de <__sflush_r+0xb2>
 802f1da:	2b16      	cmp	r3, #22
 802f1dc:	d101      	bne.n	802f1e2 <__sflush_r+0xb6>
 802f1de:	602f      	str	r7, [r5, #0]
 802f1e0:	e7b1      	b.n	802f146 <__sflush_r+0x1a>
 802f1e2:	89a3      	ldrh	r3, [r4, #12]
 802f1e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f1e8:	81a3      	strh	r3, [r4, #12]
 802f1ea:	e7ad      	b.n	802f148 <__sflush_r+0x1c>
 802f1ec:	690f      	ldr	r7, [r1, #16]
 802f1ee:	2f00      	cmp	r7, #0
 802f1f0:	d0a9      	beq.n	802f146 <__sflush_r+0x1a>
 802f1f2:	0793      	lsls	r3, r2, #30
 802f1f4:	680e      	ldr	r6, [r1, #0]
 802f1f6:	bf08      	it	eq
 802f1f8:	694b      	ldreq	r3, [r1, #20]
 802f1fa:	600f      	str	r7, [r1, #0]
 802f1fc:	bf18      	it	ne
 802f1fe:	2300      	movne	r3, #0
 802f200:	eba6 0807 	sub.w	r8, r6, r7
 802f204:	608b      	str	r3, [r1, #8]
 802f206:	f1b8 0f00 	cmp.w	r8, #0
 802f20a:	dd9c      	ble.n	802f146 <__sflush_r+0x1a>
 802f20c:	6a21      	ldr	r1, [r4, #32]
 802f20e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802f210:	4643      	mov	r3, r8
 802f212:	463a      	mov	r2, r7
 802f214:	4628      	mov	r0, r5
 802f216:	47b0      	blx	r6
 802f218:	2800      	cmp	r0, #0
 802f21a:	dc06      	bgt.n	802f22a <__sflush_r+0xfe>
 802f21c:	89a3      	ldrh	r3, [r4, #12]
 802f21e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f222:	81a3      	strh	r3, [r4, #12]
 802f224:	f04f 30ff 	mov.w	r0, #4294967295
 802f228:	e78e      	b.n	802f148 <__sflush_r+0x1c>
 802f22a:	4407      	add	r7, r0
 802f22c:	eba8 0800 	sub.w	r8, r8, r0
 802f230:	e7e9      	b.n	802f206 <__sflush_r+0xda>
 802f232:	bf00      	nop
 802f234:	20400001 	.word	0x20400001

0802f238 <_fflush_r>:
 802f238:	b538      	push	{r3, r4, r5, lr}
 802f23a:	690b      	ldr	r3, [r1, #16]
 802f23c:	4605      	mov	r5, r0
 802f23e:	460c      	mov	r4, r1
 802f240:	b913      	cbnz	r3, 802f248 <_fflush_r+0x10>
 802f242:	2500      	movs	r5, #0
 802f244:	4628      	mov	r0, r5
 802f246:	bd38      	pop	{r3, r4, r5, pc}
 802f248:	b118      	cbz	r0, 802f252 <_fflush_r+0x1a>
 802f24a:	6983      	ldr	r3, [r0, #24]
 802f24c:	b90b      	cbnz	r3, 802f252 <_fflush_r+0x1a>
 802f24e:	f7ff f879 	bl	802e344 <__sinit>
 802f252:	4b14      	ldr	r3, [pc, #80]	; (802f2a4 <_fflush_r+0x6c>)
 802f254:	429c      	cmp	r4, r3
 802f256:	d11b      	bne.n	802f290 <_fflush_r+0x58>
 802f258:	686c      	ldr	r4, [r5, #4]
 802f25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f25e:	2b00      	cmp	r3, #0
 802f260:	d0ef      	beq.n	802f242 <_fflush_r+0xa>
 802f262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802f264:	07d0      	lsls	r0, r2, #31
 802f266:	d404      	bmi.n	802f272 <_fflush_r+0x3a>
 802f268:	0599      	lsls	r1, r3, #22
 802f26a:	d402      	bmi.n	802f272 <_fflush_r+0x3a>
 802f26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802f26e:	f7ff f93e 	bl	802e4ee <__retarget_lock_acquire_recursive>
 802f272:	4628      	mov	r0, r5
 802f274:	4621      	mov	r1, r4
 802f276:	f7ff ff59 	bl	802f12c <__sflush_r>
 802f27a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802f27c:	07da      	lsls	r2, r3, #31
 802f27e:	4605      	mov	r5, r0
 802f280:	d4e0      	bmi.n	802f244 <_fflush_r+0xc>
 802f282:	89a3      	ldrh	r3, [r4, #12]
 802f284:	059b      	lsls	r3, r3, #22
 802f286:	d4dd      	bmi.n	802f244 <_fflush_r+0xc>
 802f288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802f28a:	f7ff f932 	bl	802e4f2 <__retarget_lock_release_recursive>
 802f28e:	e7d9      	b.n	802f244 <_fflush_r+0xc>
 802f290:	4b05      	ldr	r3, [pc, #20]	; (802f2a8 <_fflush_r+0x70>)
 802f292:	429c      	cmp	r4, r3
 802f294:	d101      	bne.n	802f29a <_fflush_r+0x62>
 802f296:	68ac      	ldr	r4, [r5, #8]
 802f298:	e7df      	b.n	802f25a <_fflush_r+0x22>
 802f29a:	4b04      	ldr	r3, [pc, #16]	; (802f2ac <_fflush_r+0x74>)
 802f29c:	429c      	cmp	r4, r3
 802f29e:	bf08      	it	eq
 802f2a0:	68ec      	ldreq	r4, [r5, #12]
 802f2a2:	e7da      	b.n	802f25a <_fflush_r+0x22>
 802f2a4:	08034088 	.word	0x08034088
 802f2a8:	080340a8 	.word	0x080340a8
 802f2ac:	08034068 	.word	0x08034068

0802f2b0 <_lseek_r>:
 802f2b0:	b538      	push	{r3, r4, r5, lr}
 802f2b2:	4d07      	ldr	r5, [pc, #28]	; (802f2d0 <_lseek_r+0x20>)
 802f2b4:	4604      	mov	r4, r0
 802f2b6:	4608      	mov	r0, r1
 802f2b8:	4611      	mov	r1, r2
 802f2ba:	2200      	movs	r2, #0
 802f2bc:	602a      	str	r2, [r5, #0]
 802f2be:	461a      	mov	r2, r3
 802f2c0:	f7d4 ffb4 	bl	800422c <_lseek>
 802f2c4:	1c43      	adds	r3, r0, #1
 802f2c6:	d102      	bne.n	802f2ce <_lseek_r+0x1e>
 802f2c8:	682b      	ldr	r3, [r5, #0]
 802f2ca:	b103      	cbz	r3, 802f2ce <_lseek_r+0x1e>
 802f2cc:	6023      	str	r3, [r4, #0]
 802f2ce:	bd38      	pop	{r3, r4, r5, pc}
 802f2d0:	2000b6a0 	.word	0x2000b6a0

0802f2d4 <__swhatbuf_r>:
 802f2d4:	b570      	push	{r4, r5, r6, lr}
 802f2d6:	460e      	mov	r6, r1
 802f2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f2dc:	2900      	cmp	r1, #0
 802f2de:	b096      	sub	sp, #88	; 0x58
 802f2e0:	4614      	mov	r4, r2
 802f2e2:	461d      	mov	r5, r3
 802f2e4:	da07      	bge.n	802f2f6 <__swhatbuf_r+0x22>
 802f2e6:	2300      	movs	r3, #0
 802f2e8:	602b      	str	r3, [r5, #0]
 802f2ea:	89b3      	ldrh	r3, [r6, #12]
 802f2ec:	061a      	lsls	r2, r3, #24
 802f2ee:	d410      	bmi.n	802f312 <__swhatbuf_r+0x3e>
 802f2f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802f2f4:	e00e      	b.n	802f314 <__swhatbuf_r+0x40>
 802f2f6:	466a      	mov	r2, sp
 802f2f8:	f000 f86e 	bl	802f3d8 <_fstat_r>
 802f2fc:	2800      	cmp	r0, #0
 802f2fe:	dbf2      	blt.n	802f2e6 <__swhatbuf_r+0x12>
 802f300:	9a01      	ldr	r2, [sp, #4]
 802f302:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802f306:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802f30a:	425a      	negs	r2, r3
 802f30c:	415a      	adcs	r2, r3
 802f30e:	602a      	str	r2, [r5, #0]
 802f310:	e7ee      	b.n	802f2f0 <__swhatbuf_r+0x1c>
 802f312:	2340      	movs	r3, #64	; 0x40
 802f314:	2000      	movs	r0, #0
 802f316:	6023      	str	r3, [r4, #0]
 802f318:	b016      	add	sp, #88	; 0x58
 802f31a:	bd70      	pop	{r4, r5, r6, pc}

0802f31c <__smakebuf_r>:
 802f31c:	898b      	ldrh	r3, [r1, #12]
 802f31e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802f320:	079d      	lsls	r5, r3, #30
 802f322:	4606      	mov	r6, r0
 802f324:	460c      	mov	r4, r1
 802f326:	d507      	bpl.n	802f338 <__smakebuf_r+0x1c>
 802f328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802f32c:	6023      	str	r3, [r4, #0]
 802f32e:	6123      	str	r3, [r4, #16]
 802f330:	2301      	movs	r3, #1
 802f332:	6163      	str	r3, [r4, #20]
 802f334:	b002      	add	sp, #8
 802f336:	bd70      	pop	{r4, r5, r6, pc}
 802f338:	ab01      	add	r3, sp, #4
 802f33a:	466a      	mov	r2, sp
 802f33c:	f7ff ffca 	bl	802f2d4 <__swhatbuf_r>
 802f340:	9900      	ldr	r1, [sp, #0]
 802f342:	4605      	mov	r5, r0
 802f344:	4630      	mov	r0, r6
 802f346:	f7ff f95b 	bl	802e600 <_malloc_r>
 802f34a:	b948      	cbnz	r0, 802f360 <__smakebuf_r+0x44>
 802f34c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802f350:	059a      	lsls	r2, r3, #22
 802f352:	d4ef      	bmi.n	802f334 <__smakebuf_r+0x18>
 802f354:	f023 0303 	bic.w	r3, r3, #3
 802f358:	f043 0302 	orr.w	r3, r3, #2
 802f35c:	81a3      	strh	r3, [r4, #12]
 802f35e:	e7e3      	b.n	802f328 <__smakebuf_r+0xc>
 802f360:	4b0d      	ldr	r3, [pc, #52]	; (802f398 <__smakebuf_r+0x7c>)
 802f362:	62b3      	str	r3, [r6, #40]	; 0x28
 802f364:	89a3      	ldrh	r3, [r4, #12]
 802f366:	6020      	str	r0, [r4, #0]
 802f368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802f36c:	81a3      	strh	r3, [r4, #12]
 802f36e:	9b00      	ldr	r3, [sp, #0]
 802f370:	6163      	str	r3, [r4, #20]
 802f372:	9b01      	ldr	r3, [sp, #4]
 802f374:	6120      	str	r0, [r4, #16]
 802f376:	b15b      	cbz	r3, 802f390 <__smakebuf_r+0x74>
 802f378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f37c:	4630      	mov	r0, r6
 802f37e:	f000 f83d 	bl	802f3fc <_isatty_r>
 802f382:	b128      	cbz	r0, 802f390 <__smakebuf_r+0x74>
 802f384:	89a3      	ldrh	r3, [r4, #12]
 802f386:	f023 0303 	bic.w	r3, r3, #3
 802f38a:	f043 0301 	orr.w	r3, r3, #1
 802f38e:	81a3      	strh	r3, [r4, #12]
 802f390:	89a0      	ldrh	r0, [r4, #12]
 802f392:	4305      	orrs	r5, r0
 802f394:	81a5      	strh	r5, [r4, #12]
 802f396:	e7cd      	b.n	802f334 <__smakebuf_r+0x18>
 802f398:	0802e2dd 	.word	0x0802e2dd

0802f39c <__malloc_lock>:
 802f39c:	4801      	ldr	r0, [pc, #4]	; (802f3a4 <__malloc_lock+0x8>)
 802f39e:	f7ff b8a6 	b.w	802e4ee <__retarget_lock_acquire_recursive>
 802f3a2:	bf00      	nop
 802f3a4:	2000b698 	.word	0x2000b698

0802f3a8 <__malloc_unlock>:
 802f3a8:	4801      	ldr	r0, [pc, #4]	; (802f3b0 <__malloc_unlock+0x8>)
 802f3aa:	f7ff b8a2 	b.w	802e4f2 <__retarget_lock_release_recursive>
 802f3ae:	bf00      	nop
 802f3b0:	2000b698 	.word	0x2000b698

0802f3b4 <_read_r>:
 802f3b4:	b538      	push	{r3, r4, r5, lr}
 802f3b6:	4d07      	ldr	r5, [pc, #28]	; (802f3d4 <_read_r+0x20>)
 802f3b8:	4604      	mov	r4, r0
 802f3ba:	4608      	mov	r0, r1
 802f3bc:	4611      	mov	r1, r2
 802f3be:	2200      	movs	r2, #0
 802f3c0:	602a      	str	r2, [r5, #0]
 802f3c2:	461a      	mov	r2, r3
 802f3c4:	f7d4 fed2 	bl	800416c <_read>
 802f3c8:	1c43      	adds	r3, r0, #1
 802f3ca:	d102      	bne.n	802f3d2 <_read_r+0x1e>
 802f3cc:	682b      	ldr	r3, [r5, #0]
 802f3ce:	b103      	cbz	r3, 802f3d2 <_read_r+0x1e>
 802f3d0:	6023      	str	r3, [r4, #0]
 802f3d2:	bd38      	pop	{r3, r4, r5, pc}
 802f3d4:	2000b6a0 	.word	0x2000b6a0

0802f3d8 <_fstat_r>:
 802f3d8:	b538      	push	{r3, r4, r5, lr}
 802f3da:	4d07      	ldr	r5, [pc, #28]	; (802f3f8 <_fstat_r+0x20>)
 802f3dc:	2300      	movs	r3, #0
 802f3de:	4604      	mov	r4, r0
 802f3e0:	4608      	mov	r0, r1
 802f3e2:	4611      	mov	r1, r2
 802f3e4:	602b      	str	r3, [r5, #0]
 802f3e6:	f7d4 ff06 	bl	80041f6 <_fstat>
 802f3ea:	1c43      	adds	r3, r0, #1
 802f3ec:	d102      	bne.n	802f3f4 <_fstat_r+0x1c>
 802f3ee:	682b      	ldr	r3, [r5, #0]
 802f3f0:	b103      	cbz	r3, 802f3f4 <_fstat_r+0x1c>
 802f3f2:	6023      	str	r3, [r4, #0]
 802f3f4:	bd38      	pop	{r3, r4, r5, pc}
 802f3f6:	bf00      	nop
 802f3f8:	2000b6a0 	.word	0x2000b6a0

0802f3fc <_isatty_r>:
 802f3fc:	b538      	push	{r3, r4, r5, lr}
 802f3fe:	4d06      	ldr	r5, [pc, #24]	; (802f418 <_isatty_r+0x1c>)
 802f400:	2300      	movs	r3, #0
 802f402:	4604      	mov	r4, r0
 802f404:	4608      	mov	r0, r1
 802f406:	602b      	str	r3, [r5, #0]
 802f408:	f7d4 ff05 	bl	8004216 <_isatty>
 802f40c:	1c43      	adds	r3, r0, #1
 802f40e:	d102      	bne.n	802f416 <_isatty_r+0x1a>
 802f410:	682b      	ldr	r3, [r5, #0]
 802f412:	b103      	cbz	r3, 802f416 <_isatty_r+0x1a>
 802f414:	6023      	str	r3, [r4, #0]
 802f416:	bd38      	pop	{r3, r4, r5, pc}
 802f418:	2000b6a0 	.word	0x2000b6a0

0802f41c <_init>:
 802f41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f41e:	bf00      	nop
 802f420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f422:	bc08      	pop	{r3}
 802f424:	469e      	mov	lr, r3
 802f426:	4770      	bx	lr

0802f428 <_fini>:
 802f428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f42a:	bf00      	nop
 802f42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f42e:	bc08      	pop	{r3}
 802f430:	469e      	mov	lr, r3
 802f432:	4770      	bx	lr
