
429IG_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002eec0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004aa4  0802f070  0802f070  0003f070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00009178  08033b14  08033b14  00043b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000010  0803cc8c  0803cc8c  0004cc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 000abfac  0803cc9c  0803cc9c  0004cc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000140  080e8c48  080e8c48  000f8c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080e8d88  080e8d88  00100100  2**0
                  CONTENTS
  8 .ARM          00000008  080e8d88  080e8d88  000f8d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080e8d90  080e8d90  00100100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080e8d90  080e8d90  000f8d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080e8da4  080e8da4  000f8da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000100  20000000  080e8dac  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ccmram       00000000  10000000  10000000  00100100  2**0
                  CONTENTS
 14 .bss          0000b52c  20000100  20000100  00100100  2**2
                  ALLOC
 15 ._user_heap_stack 00000c04  2000b62c  2000b62c  00100100  2**0
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  00100100  2**0
                  CONTENTS, READONLY
 17 .debug_info   00097a3b  00000000  00000000  00100130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00010ac2  00000000  00000000  00197b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003888  00000000  00000000  001a8630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000032f0  00000000  00000000  001abeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00032da0  00000000  00000000  001af1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00040c97  00000000  00000000  001e1f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0011078d  00000000  00000000  00222bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000d2  00000000  00000000  0033336c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000f494  00000000  00000000  00333440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802f058 	.word	0x0802f058

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0802f058 	.word	0x0802f058

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96e 	b.w	8000d70 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f040 8083 	bne.w	8000bc2 <__udivmoddi4+0x116>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d947      	bls.n	8000b52 <__udivmoddi4+0xa6>
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b142      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	f1c2 0020 	rsb	r0, r2, #32
 8000acc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad0:	4091      	lsls	r1, r2
 8000ad2:	4097      	lsls	r7, r2
 8000ad4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ad8:	4094      	lsls	r4, r2
 8000ada:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ade:	0c23      	lsrs	r3, r4, #16
 8000ae0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae4:	fa1f fe87 	uxth.w	lr, r7
 8000ae8:	fb08 c116 	mls	r1, r8, r6, ip
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb06 f10e 	mul.w	r1, r6, lr
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x60>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000afe:	f080 8119 	bcs.w	8000d34 <__udivmoddi4+0x288>
 8000b02:	4299      	cmp	r1, r3
 8000b04:	f240 8116 	bls.w	8000d34 <__udivmoddi4+0x288>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	443b      	add	r3, r7
 8000b0c:	1a5b      	subs	r3, r3, r1
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3310 	mls	r3, r8, r0, r3
 8000b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d909      	bls.n	8000b38 <__udivmoddi4+0x8c>
 8000b24:	193c      	adds	r4, r7, r4
 8000b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2a:	f080 8105 	bcs.w	8000d38 <__udivmoddi4+0x28c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f240 8102 	bls.w	8000d38 <__udivmoddi4+0x28c>
 8000b34:	3802      	subs	r0, #2
 8000b36:	443c      	add	r4, r7
 8000b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3c:	eba4 040e 	sub.w	r4, r4, lr
 8000b40:	2600      	movs	r6, #0
 8000b42:	b11d      	cbz	r5, 8000b4c <__udivmoddi4+0xa0>
 8000b44:	40d4      	lsrs	r4, r2
 8000b46:	2300      	movs	r3, #0
 8000b48:	e9c5 4300 	strd	r4, r3, [r5]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	b902      	cbnz	r2, 8000b56 <__udivmoddi4+0xaa>
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	d150      	bne.n	8000c00 <__udivmoddi4+0x154>
 8000b5e:	1bcb      	subs	r3, r1, r7
 8000b60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b64:	fa1f f887 	uxth.w	r8, r7
 8000b68:	2601      	movs	r6, #1
 8000b6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b6e:	0c21      	lsrs	r1, r4, #16
 8000b70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb08 f30c 	mul.w	r3, r8, ip
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xe4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0xe2>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	f200 80e9 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000b8e:	4684      	mov	ip, r0
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	b2a3      	uxth	r3, r4
 8000b94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba0:	fb08 f800 	mul.w	r8, r8, r0
 8000ba4:	45a0      	cmp	r8, r4
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x10c>
 8000ba8:	193c      	adds	r4, r7, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x10a>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	f200 80d9 	bhi.w	8000d68 <__udivmoddi4+0x2bc>
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	eba4 0408 	sub.w	r4, r4, r8
 8000bbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc0:	e7bf      	b.n	8000b42 <__udivmoddi4+0x96>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0x12e>
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	f000 80b1 	beq.w	8000d2e <__udivmoddi4+0x282>
 8000bcc:	2600      	movs	r6, #0
 8000bce:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f683 	clz	r6, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d14a      	bne.n	8000c78 <__udivmoddi4+0x1cc>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0x140>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80b8 	bhi.w	8000d5c <__udivmoddi4+0x2b0>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d0a8      	beq.n	8000b4c <__udivmoddi4+0xa0>
 8000bfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bfe:	e7a5      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f603 	lsr.w	r6, r0, r3
 8000c08:	4097      	lsls	r7, r2
 8000c0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c12:	40d9      	lsrs	r1, r3
 8000c14:	4330      	orrs	r0, r6
 8000c16:	0c03      	lsrs	r3, r0, #16
 8000c18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c1c:	fa1f f887 	uxth.w	r8, r7
 8000c20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb06 f108 	mul.w	r1, r6, r8
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x19c>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3a:	f080 808d 	bcs.w	8000d58 <__udivmoddi4+0x2ac>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 808a 	bls.w	8000d58 <__udivmoddi4+0x2ac>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b281      	uxth	r1, r0
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb00 f308 	mul.w	r3, r0, r8
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x1c4>
 8000c60:	1879      	adds	r1, r7, r1
 8000c62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c66:	d273      	bcs.n	8000d50 <__udivmoddi4+0x2a4>
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d971      	bls.n	8000d50 <__udivmoddi4+0x2a4>
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	4439      	add	r1, r7
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c76:	e778      	b.n	8000b6a <__udivmoddi4+0xbe>
 8000c78:	f1c6 0c20 	rsb	ip, r6, #32
 8000c7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c84:	431c      	orrs	r4, r3
 8000c86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c96:	431f      	orrs	r7, r3
 8000c98:	0c3b      	lsrs	r3, r7, #16
 8000c9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c9e:	fa1f f884 	uxth.w	r8, r4
 8000ca2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000caa:	fb09 fa08 	mul.w	sl, r9, r8
 8000cae:	458a      	cmp	sl, r1
 8000cb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x220>
 8000cba:	1861      	adds	r1, r4, r1
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	d248      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc2:	458a      	cmp	sl, r1
 8000cc4:	d946      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4421      	add	r1, r4
 8000ccc:	eba1 010a 	sub.w	r1, r1, sl
 8000cd0:	b2bf      	uxth	r7, r7
 8000cd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cde:	fb00 f808 	mul.w	r8, r0, r8
 8000ce2:	45b8      	cmp	r8, r7
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x24a>
 8000ce6:	19e7      	adds	r7, r4, r7
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cec:	d22e      	bcs.n	8000d4c <__udivmoddi4+0x2a0>
 8000cee:	45b8      	cmp	r8, r7
 8000cf0:	d92c      	bls.n	8000d4c <__udivmoddi4+0x2a0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4427      	add	r7, r4
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	eba7 0708 	sub.w	r7, r7, r8
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	454f      	cmp	r7, r9
 8000d04:	46c6      	mov	lr, r8
 8000d06:	4649      	mov	r1, r9
 8000d08:	d31a      	bcc.n	8000d40 <__udivmoddi4+0x294>
 8000d0a:	d017      	beq.n	8000d3c <__udivmoddi4+0x290>
 8000d0c:	b15d      	cbz	r5, 8000d26 <__udivmoddi4+0x27a>
 8000d0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d12:	eb67 0701 	sbc.w	r7, r7, r1
 8000d16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d20:	40f7      	lsrs	r7, r6
 8000d22:	e9c5 2700 	strd	r2, r7, [r5]
 8000d26:	2600      	movs	r6, #0
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e70b      	b.n	8000b4c <__udivmoddi4+0xa0>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e9      	b.n	8000b0c <__udivmoddi4+0x60>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6fd      	b.n	8000b38 <__udivmoddi4+0x8c>
 8000d3c:	4543      	cmp	r3, r8
 8000d3e:	d2e5      	bcs.n	8000d0c <__udivmoddi4+0x260>
 8000d40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d44:	eb69 0104 	sbc.w	r1, r9, r4
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7df      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e7d2      	b.n	8000cf6 <__udivmoddi4+0x24a>
 8000d50:	4660      	mov	r0, ip
 8000d52:	e78d      	b.n	8000c70 <__udivmoddi4+0x1c4>
 8000d54:	4681      	mov	r9, r0
 8000d56:	e7b9      	b.n	8000ccc <__udivmoddi4+0x220>
 8000d58:	4666      	mov	r6, ip
 8000d5a:	e775      	b.n	8000c48 <__udivmoddi4+0x19c>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e74a      	b.n	8000bf6 <__udivmoddi4+0x14a>
 8000d60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d64:	4439      	add	r1, r7
 8000d66:	e713      	b.n	8000b90 <__udivmoddi4+0xe4>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	443c      	add	r4, r7
 8000d6c:	e724      	b.n	8000bb8 <__udivmoddi4+0x10c>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_idiv0>:
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <BH1750_send_command>:

	return HAL_OK;
}

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	1cfa      	adds	r2, r7, #3
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	f005 fa6b 	bl	800626c <HAL_I2C_Master_Transmit>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <BH1750_send_command+0x2e>

	return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f8aa 	bl	8000f0c <BH1750_get_lumen>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 8000dce:	2114      	movs	r1, #20
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f02d f861 	bl	802de98 <calloc>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <BH1750_init_dev_struct+0x24>
 8000de0:	2300      	movs	r3, #0
 8000de2:	e02d      	b.n	8000e40 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2247      	movs	r2, #71	; 0x47
 8000dee:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2246      	movs	r2, #70	; 0x46
 8000df4:	725a      	strb	r2, [r3, #9]
 8000df6:	e005      	b.n	8000e04 <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	22ba      	movs	r2, #186	; 0xba
 8000dfc:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	22b9      	movs	r2, #185	; 0xb9
 8000e02:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8000e04:	68b8      	ldr	r0, [r7, #8]
 8000e06:	f7ff f9f3 	bl	80001f0 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f02d f98f 	bl	802e130 <malloc>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <BH1750_init_dev_struct+0x66>
 8000e22:	2300      	movs	r3, #0
 8000e24:	e00c      	b.n	8000e40 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f02d fe4b 	bl	802eace <strcpy>

	init->poll = &BH1750_poll_self;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <BH1750_init_dev_struct+0x88>)
 8000e3c:	611a      	str	r2, [r3, #16]

	return init;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	08000dab 	.word	0x08000dab

08000e4c <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8000e54:	2101      	movs	r1, #1
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ff8c 	bl	8000d74 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff88 	bl	8000d74 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8000e64:	2110      	movs	r1, #16
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff84 	bl	8000d74 <BH1750_send_command>

	return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af02      	add	r7, sp, #8
 8000e7c:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e86:	b299      	uxth	r1, r3
			dev->buffer,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e8e:	230a      	movs	r3, #10
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2302      	movs	r3, #2
 8000e94:	f005 fae8 	bl	8006468 <HAL_I2C_Master_Receive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <BH1750_read_dev+0x2e>

	return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	895b      	ldrh	r3, [r3, #10]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b5b      	ldrb	r3, [r3, #13]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	815a      	strh	r2, [r3, #10]

	//TODO check float stuff
	dev->value/=1.2;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	895b      	ldrh	r3, [r3, #10]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb32 	bl	8000544 <__aeabi_i2d>
 8000ee0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <BH1750_convert+0x5c>)
 8000ee6:	f7ff fcc1 	bl	800086c <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fda3 	bl	8000a3c <__aeabi_d2uiz>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	815a      	strh	r2, [r3, #10]

	return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	3ff33333 	.word	0x3ff33333

08000f0c <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffae 	bl	8000e76 <BH1750_read_dev>
	BH1750_convert(dev);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffc6 	bl	8000eac <BH1750_convert>
	return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <DMA_Callback>:
#include "WS2812_Lib.h"

uint16_t WS2812_TIM_BUF[WS2812_BUFLEN];
uint8_t dma_ready = 1;

void DMA_Callback(void) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	dma_ready = 1;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <DMA_Callback+0x14>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000004 	.word	0x20000004
 8000f44:	00000000 	.word	0x00000000

08000f48 <calcBuf>:
/**
 * Internal function, calculates the HI or LO values for the 800 kHz WS2812 signal and puts them into a buffer for the Timer-DMA
 *
 */
void calcBuf(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  uint32_t n;
  uint32_t pos;
  WS2812_RGB_t led;

  pos=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
  // set timings for all LEDs
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	f000 bce5 	b.w	8001924 <calcBuf+0x9dc>
    led=WS2812_LED_BUF_CH1[n];
 8000f5a:	49ab      	ldr	r1, [pc, #684]	; (8001208 <calcBuf+0x2c0>)
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	18ca      	adds	r2, r1, r3
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	8811      	ldrh	r1, [r2, #0]
 8000f6a:	7892      	ldrb	r2, [r2, #2]
 8000f6c:	8019      	strh	r1, [r3, #0]
 8000f6e:	709a      	strb	r2, [r3, #2]

    // Col:Green , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.green&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da13      	bge.n	8000fa0 <calcBuf+0x58>
 8000f78:	4ba4      	ldr	r3, [pc, #656]	; (800120c <calcBuf+0x2c4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fad0 	bl	8000524 <__aeabi_ui2d>
 8000f84:	a39c      	add	r3, pc, #624	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fc6f 	bl	800086c <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fd51 	bl	8000a3c <__aeabi_d2uiz>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	e012      	b.n	8000fc6 <calcBuf+0x7e>
 8000fa0:	4b9a      	ldr	r3, [pc, #616]	; (800120c <calcBuf+0x2c4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fabc 	bl	8000524 <__aeabi_ui2d>
 8000fac:	a394      	add	r3, pc, #592	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fc5b 	bl	800086c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd3d 	bl	8000a3c <__aeabi_d2uiz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	4990      	ldr	r1, [pc, #576]	; (8001210 <calcBuf+0x2c8>)
 8000fce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000fd2:	797b      	ldrb	r3, [r7, #5]
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d013      	beq.n	8001004 <calcBuf+0xbc>
 8000fdc:	4b8b      	ldr	r3, [pc, #556]	; (800120c <calcBuf+0x2c4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fa9e 	bl	8000524 <__aeabi_ui2d>
 8000fe8:	a383      	add	r3, pc, #524	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fc3d 	bl	800086c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fd1f 	bl	8000a3c <__aeabi_d2uiz>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	e012      	b.n	800102a <calcBuf+0xe2>
 8001004:	4b81      	ldr	r3, [pc, #516]	; (800120c <calcBuf+0x2c4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa8a 	bl	8000524 <__aeabi_ui2d>
 8001010:	a37b      	add	r3, pc, #492	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff fc29 	bl	800086c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd0b 	bl	8000a3c <__aeabi_d2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1c59      	adds	r1, r3, #1
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	4977      	ldr	r1, [pc, #476]	; (8001210 <calcBuf+0x2c8>)
 8001032:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001036:	797b      	ldrb	r3, [r7, #5]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <calcBuf+0x120>
 8001040:	4b72      	ldr	r3, [pc, #456]	; (800120c <calcBuf+0x2c4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa6c 	bl	8000524 <__aeabi_ui2d>
 800104c:	a36a      	add	r3, pc, #424	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fc0b 	bl	800086c <__aeabi_ddiv>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fced 	bl	8000a3c <__aeabi_d2uiz>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	e012      	b.n	800108e <calcBuf+0x146>
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <calcBuf+0x2c4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa58 	bl	8000524 <__aeabi_ui2d>
 8001074:	a362      	add	r3, pc, #392	; (adr r3, 8001200 <calcBuf+0x2b8>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fbf7 	bl	800086c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fcd9 	bl	8000a3c <__aeabi_d2uiz>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1c59      	adds	r1, r3, #1
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	495e      	ldr	r1, [pc, #376]	; (8001210 <calcBuf+0x2c8>)
 8001096:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <calcBuf+0x184>
 80010a4:	4b59      	ldr	r3, [pc, #356]	; (800120c <calcBuf+0x2c4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa3a 	bl	8000524 <__aeabi_ui2d>
 80010b0:	a351      	add	r3, pc, #324	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fbd9 	bl	800086c <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fcbb 	bl	8000a3c <__aeabi_d2uiz>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	e012      	b.n	80010f2 <calcBuf+0x1aa>
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <calcBuf+0x2c4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa26 	bl	8000524 <__aeabi_ui2d>
 80010d8:	a349      	add	r3, pc, #292	; (adr r3, 8001200 <calcBuf+0x2b8>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fbc5 	bl	800086c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fca7 	bl	8000a3c <__aeabi_d2uiz>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1c59      	adds	r1, r3, #1
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	4945      	ldr	r1, [pc, #276]	; (8001210 <calcBuf+0x2c8>)
 80010fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <calcBuf+0x1e8>
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <calcBuf+0x2c4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa08 	bl	8000524 <__aeabi_ui2d>
 8001114:	a338      	add	r3, pc, #224	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fba7 	bl	800086c <__aeabi_ddiv>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fc89 	bl	8000a3c <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	e012      	b.n	8001156 <calcBuf+0x20e>
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <calcBuf+0x2c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9f4 	bl	8000524 <__aeabi_ui2d>
 800113c:	a330      	add	r3, pc, #192	; (adr r3, 8001200 <calcBuf+0x2b8>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fb93 	bl	800086c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fc75 	bl	8000a3c <__aeabi_d2uiz>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	492c      	ldr	r1, [pc, #176]	; (8001210 <calcBuf+0x2c8>)
 800115e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d013      	beq.n	8001194 <calcBuf+0x24c>
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <calcBuf+0x2c4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9d6 	bl	8000524 <__aeabi_ui2d>
 8001178:	a31f      	add	r3, pc, #124	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fb75 	bl	800086c <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fc57 	bl	8000a3c <__aeabi_d2uiz>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	e012      	b.n	80011ba <calcBuf+0x272>
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <calcBuf+0x2c4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9c2 	bl	8000524 <__aeabi_ui2d>
 80011a0:	a317      	add	r3, pc, #92	; (adr r3, 8001200 <calcBuf+0x2b8>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fb61 	bl	800086c <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc43 	bl	8000a3c <__aeabi_d2uiz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1c59      	adds	r1, r3, #1
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	4913      	ldr	r1, [pc, #76]	; (8001210 <calcBuf+0x2c8>)
 80011c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d021      	beq.n	8001214 <calcBuf+0x2cc>
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <calcBuf+0x2c4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9a4 	bl	8000524 <__aeabi_ui2d>
 80011dc:	a306      	add	r3, pc, #24	; (adr r3, 80011f8 <calcBuf+0x2b0>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fb43 	bl	800086c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc25 	bl	8000a3c <__aeabi_d2uiz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	e020      	b.n	800123a <calcBuf+0x2f2>
 80011f8:	08d3dcb1 	.word	0x08d3dcb1
 80011fc:	40013dcb 	.word	0x40013dcb
 8001200:	8ba2e8ba 	.word	0x8ba2e8ba
 8001204:	4016ba2e 	.word	0x4016ba2e
 8001208:	2000a40c 	.word	0x2000a40c
 800120c:	20009ac4 	.word	0x20009ac4
 8001210:	20009b0c 	.word	0x20009b0c
 8001214:	4bb2      	ldr	r3, [pc, #712]	; (80014e0 <calcBuf+0x598>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f982 	bl	8000524 <__aeabi_ui2d>
 8001220:	a3ab      	add	r3, pc, #684	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb21 	bl	800086c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fc03 	bl	8000a3c <__aeabi_d2uiz>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	49a8      	ldr	r1, [pc, #672]	; (80014e4 <calcBuf+0x59c>)
 8001242:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <calcBuf+0x330>
 8001250:	4ba3      	ldr	r3, [pc, #652]	; (80014e0 <calcBuf+0x598>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f964 	bl	8000524 <__aeabi_ui2d>
 800125c:	a39e      	add	r3, pc, #632	; (adr r3, 80014d8 <calcBuf+0x590>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff fb03 	bl	800086c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fbe5 	bl	8000a3c <__aeabi_d2uiz>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	e012      	b.n	800129e <calcBuf+0x356>
 8001278:	4b99      	ldr	r3, [pc, #612]	; (80014e0 <calcBuf+0x598>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f950 	bl	8000524 <__aeabi_ui2d>
 8001284:	a392      	add	r3, pc, #584	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff faef 	bl	800086c <__aeabi_ddiv>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fbd1 	bl	8000a3c <__aeabi_d2uiz>
 800129a:	4603      	mov	r3, r0
 800129c:	b29a      	uxth	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1c59      	adds	r1, r3, #1
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	498f      	ldr	r1, [pc, #572]	; (80014e4 <calcBuf+0x59c>)
 80012a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Col:Red , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.red&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80012aa:	793b      	ldrb	r3, [r7, #4]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	da13      	bge.n	80012da <calcBuf+0x392>
 80012b2:	4b8b      	ldr	r3, [pc, #556]	; (80014e0 <calcBuf+0x598>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f933 	bl	8000524 <__aeabi_ui2d>
 80012be:	a386      	add	r3, pc, #536	; (adr r3, 80014d8 <calcBuf+0x590>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f7ff fad2 	bl	800086c <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fbb4 	bl	8000a3c <__aeabi_d2uiz>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	e012      	b.n	8001300 <calcBuf+0x3b8>
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <calcBuf+0x598>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f91f 	bl	8000524 <__aeabi_ui2d>
 80012e6:	a37a      	add	r3, pc, #488	; (adr r3, 80014d0 <calcBuf+0x588>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff fabe 	bl	800086c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fba0 	bl	8000a3c <__aeabi_d2uiz>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	4977      	ldr	r1, [pc, #476]	; (80014e4 <calcBuf+0x59c>)
 8001308:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800130c:	793b      	ldrb	r3, [r7, #4]
 800130e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d013      	beq.n	800133e <calcBuf+0x3f6>
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <calcBuf+0x598>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f901 	bl	8000524 <__aeabi_ui2d>
 8001322:	a36d      	add	r3, pc, #436	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff faa0 	bl	800086c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb82 	bl	8000a3c <__aeabi_d2uiz>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	e012      	b.n	8001364 <calcBuf+0x41c>
 800133e:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <calcBuf+0x598>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ed 	bl	8000524 <__aeabi_ui2d>
 800134a:	a361      	add	r3, pc, #388	; (adr r3, 80014d0 <calcBuf+0x588>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f7ff fa8c 	bl	800086c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fb6e 	bl	8000a3c <__aeabi_d2uiz>
 8001360:	4603      	mov	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	1c59      	adds	r1, r3, #1
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	495e      	ldr	r1, [pc, #376]	; (80014e4 <calcBuf+0x59c>)
 800136c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001370:	793b      	ldrb	r3, [r7, #4]
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	2b00      	cmp	r3, #0
 8001378:	d013      	beq.n	80013a2 <calcBuf+0x45a>
 800137a:	4b59      	ldr	r3, [pc, #356]	; (80014e0 <calcBuf+0x598>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8cf 	bl	8000524 <__aeabi_ui2d>
 8001386:	a354      	add	r3, pc, #336	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff fa6e 	bl	800086c <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb50 	bl	8000a3c <__aeabi_d2uiz>
 800139c:	4603      	mov	r3, r0
 800139e:	b29a      	uxth	r2, r3
 80013a0:	e012      	b.n	80013c8 <calcBuf+0x480>
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <calcBuf+0x598>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8bb 	bl	8000524 <__aeabi_ui2d>
 80013ae:	a348      	add	r3, pc, #288	; (adr r3, 80014d0 <calcBuf+0x588>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff fa5a 	bl	800086c <__aeabi_ddiv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb3c 	bl	8000a3c <__aeabi_d2uiz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c59      	adds	r1, r3, #1
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	4945      	ldr	r1, [pc, #276]	; (80014e4 <calcBuf+0x59c>)
 80013d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80013d4:	793b      	ldrb	r3, [r7, #4]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d013      	beq.n	8001406 <calcBuf+0x4be>
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <calcBuf+0x598>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f89d 	bl	8000524 <__aeabi_ui2d>
 80013ea:	a33b      	add	r3, pc, #236	; (adr r3, 80014d8 <calcBuf+0x590>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff fa3c 	bl	800086c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb1e 	bl	8000a3c <__aeabi_d2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	e012      	b.n	800142c <calcBuf+0x4e4>
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <calcBuf+0x598>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f889 	bl	8000524 <__aeabi_ui2d>
 8001412:	a32f      	add	r3, pc, #188	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fa28 	bl	800086c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb0a 	bl	8000a3c <__aeabi_d2uiz>
 8001428:	4603      	mov	r3, r0
 800142a:	b29a      	uxth	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	492c      	ldr	r1, [pc, #176]	; (80014e4 <calcBuf+0x59c>)
 8001434:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001438:	793b      	ldrb	r3, [r7, #4]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d013      	beq.n	800146a <calcBuf+0x522>
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <calcBuf+0x598>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_ui2d>
 800144e:	a322      	add	r3, pc, #136	; (adr r3, 80014d8 <calcBuf+0x590>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff fa0a 	bl	800086c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff faec 	bl	8000a3c <__aeabi_d2uiz>
 8001464:	4603      	mov	r3, r0
 8001466:	b29a      	uxth	r2, r3
 8001468:	e012      	b.n	8001490 <calcBuf+0x548>
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <calcBuf+0x598>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f857 	bl	8000524 <__aeabi_ui2d>
 8001476:	a316      	add	r3, pc, #88	; (adr r3, 80014d0 <calcBuf+0x588>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7ff f9f6 	bl	800086c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fad8 	bl	8000a3c <__aeabi_d2uiz>
 800148c:	4603      	mov	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c59      	adds	r1, r3, #1
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	4913      	ldr	r1, [pc, #76]	; (80014e4 <calcBuf+0x59c>)
 8001498:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d020      	beq.n	80014e8 <calcBuf+0x5a0>
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <calcBuf+0x598>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f839 	bl	8000524 <__aeabi_ui2d>
 80014b2:	a309      	add	r3, pc, #36	; (adr r3, 80014d8 <calcBuf+0x590>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9d8 	bl	800086c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff faba 	bl	8000a3c <__aeabi_d2uiz>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	e01f      	b.n	800150e <calcBuf+0x5c6>
 80014ce:	bf00      	nop
 80014d0:	8ba2e8ba 	.word	0x8ba2e8ba
 80014d4:	4016ba2e 	.word	0x4016ba2e
 80014d8:	08d3dcb1 	.word	0x08d3dcb1
 80014dc:	40013dcb 	.word	0x40013dcb
 80014e0:	20009ac4 	.word	0x20009ac4
 80014e4:	20009b0c 	.word	0x20009b0c
 80014e8:	4bb3      	ldr	r3, [pc, #716]	; (80017b8 <calcBuf+0x870>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f818 	bl	8000524 <__aeabi_ui2d>
 80014f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80017a8 <calcBuf+0x860>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f9b7 	bl	800086c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fa99 	bl	8000a3c <__aeabi_d2uiz>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1c59      	adds	r1, r3, #1
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	49a9      	ldr	r1, [pc, #676]	; (80017bc <calcBuf+0x874>)
 8001516:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800151a:	793b      	ldrb	r3, [r7, #4]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <calcBuf+0x604>
 8001524:	4ba4      	ldr	r3, [pc, #656]	; (80017b8 <calcBuf+0x870>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fffa 	bl	8000524 <__aeabi_ui2d>
 8001530:	a39f      	add	r3, pc, #636	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f999 	bl	800086c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fa7b 	bl	8000a3c <__aeabi_d2uiz>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	e012      	b.n	8001572 <calcBuf+0x62a>
 800154c:	4b9a      	ldr	r3, [pc, #616]	; (80017b8 <calcBuf+0x870>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffe6 	bl	8000524 <__aeabi_ui2d>
 8001558:	a393      	add	r3, pc, #588	; (adr r3, 80017a8 <calcBuf+0x860>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f985 	bl	800086c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fa67 	bl	8000a3c <__aeabi_d2uiz>
 800156e:	4603      	mov	r3, r0
 8001570:	b29a      	uxth	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1c59      	adds	r1, r3, #1
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	4990      	ldr	r1, [pc, #576]	; (80017bc <calcBuf+0x874>)
 800157a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800157e:	793b      	ldrb	r3, [r7, #4]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <calcBuf+0x668>
 8001588:	4b8b      	ldr	r3, [pc, #556]	; (80017b8 <calcBuf+0x870>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffc8 	bl	8000524 <__aeabi_ui2d>
 8001594:	a386      	add	r3, pc, #536	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f967 	bl	800086c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fa49 	bl	8000a3c <__aeabi_d2uiz>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	e012      	b.n	80015d6 <calcBuf+0x68e>
 80015b0:	4b81      	ldr	r3, [pc, #516]	; (80017b8 <calcBuf+0x870>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffb4 	bl	8000524 <__aeabi_ui2d>
 80015bc:	a37a      	add	r3, pc, #488	; (adr r3, 80017a8 <calcBuf+0x860>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f953 	bl	800086c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa35 	bl	8000a3c <__aeabi_d2uiz>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	4977      	ldr	r1, [pc, #476]	; (80017bc <calcBuf+0x874>)
 80015de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	// Col:Blue , Bit:7..0
	WS2812_TIM_BUF[pos++]=((led.blue&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da13      	bge.n	8001612 <calcBuf+0x6ca>
 80015ea:	4b73      	ldr	r3, [pc, #460]	; (80017b8 <calcBuf+0x870>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff97 	bl	8000524 <__aeabi_ui2d>
 80015f6:	a36e      	add	r3, pc, #440	; (adr r3, 80017b0 <calcBuf+0x868>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff f936 	bl	800086c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff fa18 	bl	8000a3c <__aeabi_d2uiz>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	e012      	b.n	8001638 <calcBuf+0x6f0>
 8001612:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <calcBuf+0x870>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ff83 	bl	8000524 <__aeabi_ui2d>
 800161e:	a362      	add	r3, pc, #392	; (adr r3, 80017a8 <calcBuf+0x860>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f922 	bl	800086c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fa04 	bl	8000a3c <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c59      	adds	r1, r3, #1
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	495f      	ldr	r1, [pc, #380]	; (80017bc <calcBuf+0x874>)
 8001640:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164a:	2b00      	cmp	r3, #0
 800164c:	d013      	beq.n	8001676 <calcBuf+0x72e>
 800164e:	4b5a      	ldr	r3, [pc, #360]	; (80017b8 <calcBuf+0x870>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff65 	bl	8000524 <__aeabi_ui2d>
 800165a:	a355      	add	r3, pc, #340	; (adr r3, 80017b0 <calcBuf+0x868>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff f904 	bl	800086c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff f9e6 	bl	8000a3c <__aeabi_d2uiz>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	e012      	b.n	800169c <calcBuf+0x754>
 8001676:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <calcBuf+0x870>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff51 	bl	8000524 <__aeabi_ui2d>
 8001682:	a349      	add	r3, pc, #292	; (adr r3, 80017a8 <calcBuf+0x860>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7ff f8f0 	bl	800086c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff f9d2 	bl	8000a3c <__aeabi_d2uiz>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1c59      	adds	r1, r3, #1
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	4946      	ldr	r1, [pc, #280]	; (80017bc <calcBuf+0x874>)
 80016a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d013      	beq.n	80016da <calcBuf+0x792>
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <calcBuf+0x870>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff33 	bl	8000524 <__aeabi_ui2d>
 80016be:	a33c      	add	r3, pc, #240	; (adr r3, 80017b0 <calcBuf+0x868>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7ff f8d2 	bl	800086c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff f9b4 	bl	8000a3c <__aeabi_d2uiz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	e012      	b.n	8001700 <calcBuf+0x7b8>
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <calcBuf+0x870>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff1f 	bl	8000524 <__aeabi_ui2d>
 80016e6:	a330      	add	r3, pc, #192	; (adr r3, 80017a8 <calcBuf+0x860>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f8be 	bl	800086c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff f9a0 	bl	8000a3c <__aeabi_d2uiz>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	492d      	ldr	r1, [pc, #180]	; (80017bc <calcBuf+0x874>)
 8001708:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <calcBuf+0x7f6>
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <calcBuf+0x870>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff01 	bl	8000524 <__aeabi_ui2d>
 8001722:	a323      	add	r3, pc, #140	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7ff f8a0 	bl	800086c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f982 	bl	8000a3c <__aeabi_d2uiz>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	e012      	b.n	8001764 <calcBuf+0x81c>
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <calcBuf+0x870>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe feed 	bl	8000524 <__aeabi_ui2d>
 800174a:	a317      	add	r3, pc, #92	; (adr r3, 80017a8 <calcBuf+0x860>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f88c 	bl	800086c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f96e 	bl	8000a3c <__aeabi_d2uiz>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4914      	ldr	r1, [pc, #80]	; (80017bc <calcBuf+0x874>)
 800176c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d022      	beq.n	80017c0 <calcBuf+0x878>
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <calcBuf+0x870>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fecf 	bl	8000524 <__aeabi_ui2d>
 8001786:	a30a      	add	r3, pc, #40	; (adr r3, 80017b0 <calcBuf+0x868>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	f7ff f86e 	bl	800086c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f950 	bl	8000a3c <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	e021      	b.n	80017e6 <calcBuf+0x89e>
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	8ba2e8ba 	.word	0x8ba2e8ba
 80017ac:	4016ba2e 	.word	0x4016ba2e
 80017b0:	08d3dcb1 	.word	0x08d3dcb1
 80017b4:	40013dcb 	.word	0x40013dcb
 80017b8:	20009ac4 	.word	0x20009ac4
 80017bc:	20009b0c 	.word	0x20009b0c
 80017c0:	4b69      	ldr	r3, [pc, #420]	; (8001968 <calcBuf+0xa20>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feac 	bl	8000524 <__aeabi_ui2d>
 80017cc:	a362      	add	r3, pc, #392	; (adr r3, 8001958 <calcBuf+0xa10>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7ff f84b 	bl	800086c <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f92d 	bl	8000a3c <__aeabi_d2uiz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1c59      	adds	r1, r3, #1
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	495f      	ldr	r1, [pc, #380]	; (800196c <calcBuf+0xa24>)
 80017ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <calcBuf+0x8dc>
 80017fc:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <calcBuf+0xa20>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe8e 	bl	8000524 <__aeabi_ui2d>
 8001808:	a355      	add	r3, pc, #340	; (adr r3, 8001960 <calcBuf+0xa18>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7ff f82d 	bl	800086c <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f90f 	bl	8000a3c <__aeabi_d2uiz>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	e012      	b.n	800184a <calcBuf+0x902>
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <calcBuf+0xa20>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe7a 	bl	8000524 <__aeabi_ui2d>
 8001830:	a349      	add	r3, pc, #292	; (adr r3, 8001958 <calcBuf+0xa10>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7ff f819 	bl	800086c <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f8fb 	bl	8000a3c <__aeabi_d2uiz>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1c59      	adds	r1, r3, #1
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	4946      	ldr	r1, [pc, #280]	; (800196c <calcBuf+0xa24>)
 8001852:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001856:	79bb      	ldrb	r3, [r7, #6]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <calcBuf+0x940>
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <calcBuf+0xa20>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe5c 	bl	8000524 <__aeabi_ui2d>
 800186c:	a33c      	add	r3, pc, #240	; (adr r3, 8001960 <calcBuf+0xa18>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fffb 	bl	800086c <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f8dd 	bl	8000a3c <__aeabi_d2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	e012      	b.n	80018ae <calcBuf+0x966>
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <calcBuf+0xa20>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe48 	bl	8000524 <__aeabi_ui2d>
 8001894:	a330      	add	r3, pc, #192	; (adr r3, 8001958 <calcBuf+0xa10>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe ffe7 	bl	800086c <__aeabi_ddiv>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f8c9 	bl	8000a3c <__aeabi_d2uiz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c59      	adds	r1, r3, #1
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	492d      	ldr	r1, [pc, #180]	; (800196c <calcBuf+0xa24>)
 80018b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <calcBuf+0x9a4>
 80018c4:	4b28      	ldr	r3, [pc, #160]	; (8001968 <calcBuf+0xa20>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe2a 	bl	8000524 <__aeabi_ui2d>
 80018d0:	a323      	add	r3, pc, #140	; (adr r3, 8001960 <calcBuf+0xa18>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe ffc9 	bl	800086c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f8ab 	bl	8000a3c <__aeabi_d2uiz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	e012      	b.n	8001912 <calcBuf+0x9ca>
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <calcBuf+0xa20>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe16 	bl	8000524 <__aeabi_ui2d>
 80018f8:	a317      	add	r3, pc, #92	; (adr r3, 8001958 <calcBuf+0xa10>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe ffb5 	bl	800086c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f897 	bl	8000a3c <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	4914      	ldr	r1, [pc, #80]	; (800196c <calcBuf+0xa24>)
 800191a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b2d      	cmp	r3, #45	; 0x2d
 8001928:	f67f ab17 	bls.w	8000f5a <calcBuf+0x12>
  }

  // short pause after all LEDs have been updated
  for(n=0;n<48;n++) {
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e009      	b.n	8001946 <calcBuf+0x9fe>
    WS2812_TIM_BUF[pos++]=0;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <calcBuf+0xa24>)
 800193a:	2100      	movs	r1, #0
 800193c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(n=0;n<48;n++) {
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3301      	adds	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b2f      	cmp	r3, #47	; 0x2f
 800194a:	d9f2      	bls.n	8001932 <calcBuf+0x9ea>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	8ba2e8ba 	.word	0x8ba2e8ba
 800195c:	4016ba2e 	.word	0x4016ba2e
 8001960:	08d3dcb1 	.word	0x08d3dcb1
 8001964:	40013dcb 	.word	0x40013dcb
 8001968:	20009ac4 	.word	0x20009ac4
 800196c:	20009b0c 	.word	0x20009b0c

08001970 <startDMA>:

/**
 * Internal function; start DMA transfer
 */
void startDMA(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	//uint8_t test[8] = {10};
	dma_ready = 0;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <startDMA+0x1c>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)WS2812_TIM_BUF, WS2812_BUFLEN);
 800197a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <startDMA+0x20>)
 8001980:	2100      	movs	r1, #0
 8001982:	4804      	ldr	r0, [pc, #16]	; (8001994 <startDMA+0x24>)
 8001984:	f008 f83c 	bl	8009a00 <HAL_TIM_PWM_Start_DMA>
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000004 	.word	0x20000004
 8001990:	20009b0c 	.word	0x20009b0c
 8001994:	20009ac4 	.word	0x20009ac4

08001998 <WS2812_Refresh>:

void WS2812_Refresh(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	while(!dma_ready);
 800199c:	bf00      	nop
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <WS2812_Refresh+0x1c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0fb      	beq.n	800199e <WS2812_Refresh+0x6>
	calcBuf();
 80019a6:	f7ff facf 	bl	8000f48 <calcBuf>
	startDMA();
 80019aa:	f7ff ffe1 	bl	8001970 <startDMA>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000004 	.word	0x20000004

080019b8 <WS2812_Clear>:

/**
 * Set all LEDs to 0 (off) and update
 */
void WS2812_Clear(uint8_t refresh) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	uint16_t num;

	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	81fb      	strh	r3, [r7, #14]
 80019c6:	e01a      	b.n	80019fe <WS2812_Clear+0x46>
		WS2812_LED_BUF_CH1[num] = (WS2812_RGB_t){0,0,0};
 80019c8:	89fa      	ldrh	r2, [r7, #14]
 80019ca:	4913      	ldr	r1, [pc, #76]	; (8001a18 <WS2812_Clear+0x60>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	2100      	movs	r1, #0
 80019d6:	7019      	strb	r1, [r3, #0]
 80019d8:	490f      	ldr	r1, [pc, #60]	; (8001a18 <WS2812_Clear+0x60>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	3301      	adds	r3, #1
 80019e4:	2100      	movs	r1, #0
 80019e6:	7019      	strb	r1, [r3, #0]
 80019e8:	490b      	ldr	r1, [pc, #44]	; (8001a18 <WS2812_Clear+0x60>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	3302      	adds	r3, #2
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	3301      	adds	r3, #1
 80019fc:	81fb      	strh	r3, [r7, #14]
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	2b2d      	cmp	r3, #45	; 0x2d
 8001a02:	d9e1      	bls.n	80019c8 <WS2812_Clear+0x10>
	}

	 if(refresh==1) WS2812_Refresh();
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <WS2812_Clear+0x56>
 8001a0a:	f7ff ffc5 	bl	8001998 <WS2812_Refresh>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000a40c 	.word	0x2000a40c

08001a1c <WS2812_One_RGB>:

/**
 * Set one LED (R, G, B values). If refresh == 1, update LEDs, otherwise just update buffer (if several function calls are to be done before refresh)
 */
void WS2812_One_RGB(uint32_t nr, WS2812_RGB_t rgb_col, uint8_t refresh)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	4613      	mov	r3, r2
 8001a28:	71fb      	strb	r3, [r7, #7]
  if(nr<WS2812_NUM_LEDS_CH1) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b2d      	cmp	r3, #45	; 0x2d
 8001a2e:	d811      	bhi.n	8001a54 <WS2812_One_RGB+0x38>
	  WS2812_LED_BUF_CH1[nr]=rgb_col;
 8001a30:	490a      	ldr	r1, [pc, #40]	; (8001a5c <WS2812_One_RGB+0x40>)
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	8819      	ldrh	r1, [r3, #0]
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	8011      	strh	r1, [r2, #0]
 8001a48:	7093      	strb	r3, [r2, #2]

    if(refresh==1) WS2812_Refresh();
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <WS2812_One_RGB+0x38>
 8001a50:	f7ff ffa2 	bl	8001998 <WS2812_Refresh>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000a40c 	.word	0x2000a40c

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BufferIsSet = 0;
 8001a64:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <main+0x12c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a6a:	f002 fc8b 	bl	8004384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6e:	f000 f8d5 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a72:	f000 fce1 	bl	8002438 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001a76:	f000 fa7d 	bl	8001f74 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001a7a:	f000 f9f3 	bl	8001e64 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001a7e:	f000 fc7d 	bl	800237c <MX_FMC_Init>
  MX_CRC_Init();
 8001a82:	f000 f9db 	bl	8001e3c <MX_CRC_Init>
  MX_TIM13_Init();
 8001a86:	f000 fc0b 	bl	80022a0 <MX_TIM13_Init>
  MX_DMA_Init();
 8001a8a:	f000 fc57 	bl	800233c <MX_DMA_Init>
  MX_TIM1_Init();
 8001a8e:	f000 fb15 	bl	80020bc <MX_TIM1_Init>
  MX_TIM9_Init();
 8001a92:	f000 fbb3 	bl	80021fc <MX_TIM9_Init>
  MX_CAN1_Init();
 8001a96:	f000 f92d 	bl	8001cf4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001a9a:	f000 f999 	bl	8001dd0 <MX_CAN2_Init>
  MX_I2C2_Init();
 8001a9e:	f000 fa29 	bl	8001ef4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001aa2:	f000 faeb 	bl	800207c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001aa6:	f009 ff95 	bl	800b9d4 <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8001aaa:	f00d feaf 	bl	800f80c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4837      	ldr	r0, [pc, #220]	; (8001b90 <main+0x130>)
 8001ab2:	f007 fedd 	bl	8009870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4836      	ldr	r0, [pc, #216]	; (8001b94 <main+0x134>)
 8001aba:	f007 fed9 	bl	8009870 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4834      	ldr	r0, [pc, #208]	; (8001b94 <main+0x134>)
 8001ac2:	f007 fed5 	bl	8009870 <HAL_TIM_PWM_Start>


  BH1750_sensor = BH1750_init_dev_struct(&hi2c2, "BH1750 device", true);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4933      	ldr	r1, [pc, #204]	; (8001b98 <main+0x138>)
 8001aca:	4834      	ldr	r0, [pc, #208]	; (8001b9c <main+0x13c>)
 8001acc:	f7ff f978 	bl	8000dc0 <BH1750_init_dev_struct>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a33      	ldr	r2, [pc, #204]	; (8001ba0 <main+0x140>)
 8001ad4:	6013      	str	r3, [r2, #0]

  BH1750_init_dev(BH1750_sensor);
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <main+0x140>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f9b6 	bl	8000e4c <BH1750_init_dev>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ae0:	f00a fa5c 	bl	800bf9c <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of START_Task */
  START_TaskHandle = osThreadNew(Start_START_Task, NULL, &START_Task_attributes);
 8001ae4:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <main+0x144>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	482f      	ldr	r0, [pc, #188]	; (8001ba8 <main+0x148>)
 8001aea:	f00a fad8 	bl	800c09e <osThreadNew>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a2e      	ldr	r2, [pc, #184]	; (8001bac <main+0x14c>)
 8001af2:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001af4:	4a2e      	ldr	r2, [pc, #184]	; (8001bb0 <main+0x150>)
 8001af6:	2100      	movs	r1, #0
 8001af8:	482e      	ldr	r0, [pc, #184]	; (8001bb4 <main+0x154>)
 8001afa:	f00a fad0 	bl	800c09e <osThreadNew>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a2d      	ldr	r2, [pc, #180]	; (8001bb8 <main+0x158>)
 8001b02:	6013      	str	r3, [r2, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(Start_SD_Task, NULL, &SD_Task_attributes);
 8001b04:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <main+0x15c>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <main+0x160>)
 8001b0a:	f00a fac8 	bl	800c09e <osThreadNew>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <main+0x164>)
 8001b12:	6013      	str	r3, [r2, #0]

  /* creation of LED_Task */
  LED_TaskHandle = osThreadNew(Start_LED_Task, NULL, &LED_Task_attributes);
 8001b14:	4a2c      	ldr	r2, [pc, #176]	; (8001bc8 <main+0x168>)
 8001b16:	2100      	movs	r1, #0
 8001b18:	482c      	ldr	r0, [pc, #176]	; (8001bcc <main+0x16c>)
 8001b1a:	f00a fac0 	bl	800c09e <osThreadNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <main+0x170>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Task */
  CAN_TaskHandle = osThreadNew(Start_CAN_Task, NULL, &CAN_Task_attributes);
 8001b24:	4a2b      	ldr	r2, [pc, #172]	; (8001bd4 <main+0x174>)
 8001b26:	2100      	movs	r1, #0
 8001b28:	482b      	ldr	r0, [pc, #172]	; (8001bd8 <main+0x178>)
 8001b2a:	f00a fab8 	bl	800c09e <osThreadNew>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a2a      	ldr	r2, [pc, #168]	; (8001bdc <main+0x17c>)
 8001b32:	6013      	str	r3, [r2, #0]

  /* creation of BTN_Task */
  BTN_TaskHandle = osThreadNew(Start_BTN_Task, NULL, &BTN_Task_attributes);
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <main+0x180>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	482a      	ldr	r0, [pc, #168]	; (8001be4 <main+0x184>)
 8001b3a:	f00a fab0 	bl	800c09e <osThreadNew>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <main+0x188>)
 8001b42:	6013      	str	r3, [r2, #0]

  /* creation of BARO_Task */
  BARO_TaskHandle = osThreadNew(Start_BARO_Task, NULL, &BARO_Task_attributes);
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <main+0x18c>)
 8001b46:	2100      	movs	r1, #0
 8001b48:	4829      	ldr	r0, [pc, #164]	; (8001bf0 <main+0x190>)
 8001b4a:	f00a faa8 	bl	800c09e <osThreadNew>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <main+0x194>)
 8001b52:	6013      	str	r3, [r2, #0]

  /* creation of RGB_Task */
  RGB_TaskHandle = osThreadNew(Start_RGB_Task, NULL, &RGB_Task_attributes);
 8001b54:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <main+0x198>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	4828      	ldr	r0, [pc, #160]	; (8001bfc <main+0x19c>)
 8001b5a:	f00a faa0 	bl	800c09e <osThreadNew>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <main+0x1a0>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* creation of BH1750_Task */
  BH1750_TaskHandle = osThreadNew(Start_BH1750_Task, NULL, &BH1750_Task_attributes);
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <main+0x1a4>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4827      	ldr	r0, [pc, #156]	; (8001c08 <main+0x1a8>)
 8001b6a:	f00a fa98 	bl	800c09e <osThreadNew>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <main+0x1ac>)
 8001b72:	6013      	str	r3, [r2, #0]

  /* creation of LPS22_Task */
  LPS22_TaskHandle = osThreadNew(Start_LPS22_Task, NULL, &LPS22_Task_attributes);
 8001b74:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <main+0x1b0>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4826      	ldr	r0, [pc, #152]	; (8001c14 <main+0x1b4>)
 8001b7a:	f00a fa90 	bl	800c09e <osThreadNew>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <main+0x1b8>)
 8001b82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b84:	f00a fa50 	bl	800c028 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8001b88:	e7fe      	b.n	8001b88 <main+0x128>
 8001b8a:	bf00      	nop
 8001b8c:	2000a49c 	.word	0x2000a49c
 8001b90:	2000a698 	.word	0x2000a698
 8001b94:	2000af68 	.word	0x2000af68
 8001b98:	0802f0e8 	.word	0x0802f0e8
 8001b9c:	2000a4b0 	.word	0x2000a4b0
 8001ba0:	2000b11c 	.word	0x2000b11c
 8001ba4:	0802fc1c 	.word	0x0802fc1c
 8001ba8:	080026f9 	.word	0x080026f9
 8001bac:	2000a5c0 	.word	0x2000a5c0
 8001bb0:	0802fc40 	.word	0x0802fc40
 8001bb4:	0800f819 	.word	0x0800f819
 8001bb8:	2000a694 	.word	0x2000a694
 8001bbc:	0802fc64 	.word	0x0802fc64
 8001bc0:	08002749 	.word	0x08002749
 8001bc4:	2000a4a4 	.word	0x2000a4a4
 8001bc8:	0802fc88 	.word	0x0802fc88
 8001bcc:	08002759 	.word	0x08002759
 8001bd0:	2000a5a4 	.word	0x2000a5a4
 8001bd4:	0802fcac 	.word	0x0802fcac
 8001bd8:	08002769 	.word	0x08002769
 8001bdc:	2000b03c 	.word	0x2000b03c
 8001be0:	0802fcd0 	.word	0x0802fcd0
 8001be4:	080032a9 	.word	0x080032a9
 8001be8:	2000afb0 	.word	0x2000afb0
 8001bec:	0802fcf4 	.word	0x0802fcf4
 8001bf0:	080033b5 	.word	0x080033b5
 8001bf4:	2000b120 	.word	0x2000b120
 8001bf8:	0802fd18 	.word	0x0802fd18
 8001bfc:	080033c5 	.word	0x080033c5
 8001c00:	2000a498 	.word	0x2000a498
 8001c04:	0802fd3c 	.word	0x0802fd3c
 8001c08:	080035b5 	.word	0x080035b5
 8001c0c:	2000a4a0 	.word	0x2000a4a0
 8001c10:	0802fd60 	.word	0x0802fd60
 8001c14:	080035cb 	.word	0x080035cb
 8001c18:	2000b118 	.word	0x2000b118

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	; 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2230      	movs	r2, #48	; 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f02c fa9e 	bl	802e16c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <SystemClock_Config+0xd0>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	4a28      	ldr	r2, [pc, #160]	; (8001cec <SystemClock_Config+0xd0>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <SystemClock_Config+0xd0>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <SystemClock_Config+0xd4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <SystemClock_Config+0xd4>)
 8001c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <SystemClock_Config+0xd4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c90:	23a8      	movs	r3, #168	; 0xa8
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f005 fd45 	bl	8007730 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cac:	f001 fca8 	bl	8003600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2105      	movs	r1, #5
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f005 ffa6 	bl	8007c20 <HAL_RCC_ClockConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cda:	f001 fc91 	bl	8003600 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001cde:	f006 f885 	bl	8007dec <HAL_RCC_EnableCSS>
}
 8001ce2:	bf00      	nop
 8001ce4:	3750      	adds	r7, #80	; 0x50
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cfa:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001cfc:	4a32      	ldr	r2, [pc, #200]	; (8001dc8 <MX_CAN1_Init+0xd4>)
 8001cfe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8001d00:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d06:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001d12:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d18:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d20:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d28:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d2e:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d46:	481f      	ldr	r0, [pc, #124]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d48:	f002 fb82 	bl	8004450 <HAL_CAN_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001d52:	f001 fc55 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 15;
 8001d56:	230f      	movs	r3, #15
 8001d58:	61fb      	str	r3, [r7, #28]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  	sFilterConfig.FilterIdHigh = 0x0000;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterIdLow = 0x0000;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterActivation = ENABLE;
 8001d76:	2301      	movs	r3, #1
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  	//sFilterConfig.SlaveStartFilterBank = 14;
  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d82:	f002 fc61 	bl	8004648 <HAL_CAN_ConfigFilter>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_CAN1_Init+0x9c>
  		/* Filter configuration Error */
  		Error_Handler();
 8001d8c:	f001 fc38 	bl	8003600 <Error_Handler>
  	}
  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <MX_CAN1_Init+0xd0>)
 8001d92:	f002 fd39 	bl	8004808 <HAL_CAN_Start>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_CAN1_Init+0xac>
  		/* Start Error */
  		Error_Handler();
 8001d9c:	f001 fc30 	bl	8003600 <Error_Handler>
  	}

	__HAL_RCC_CAN1_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_CAN1_Init+0xd8>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <MX_CAN1_Init+0xd8>)
 8001daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_CAN1_Init+0xd8>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
  	//__HAL_RCC_CAN2_CLK_ENABLE();
  /* USER CODE END CAN1_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	3730      	adds	r7, #48	; 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000b088 	.word	0x2000b088
 8001dc8:	40006400 	.word	0x40006400
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <MX_CAN2_Init+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001ddc:	220c      	movs	r2, #12
 8001dde:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001dee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001df6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001dfa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001e20:	4804      	ldr	r0, [pc, #16]	; (8001e34 <MX_CAN2_Init+0x64>)
 8001e22:	f002 fb15 	bl	8004450 <HAL_CAN_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001e2c:	f001 fbe8 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000a66c 	.word	0x2000a66c
 8001e38:	40006800 	.word	0x40006800

08001e3c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_CRC_Init+0x20>)
 8001e42:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <MX_CRC_Init+0x24>)
 8001e44:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_CRC_Init+0x20>)
 8001e48:	f003 f950 	bl	80050ec <HAL_CRC_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001e52:	f001 fbd5 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000a4a8 	.word	0x2000a4a8
 8001e60:	40023000 	.word	0x40023000

08001e64 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001e68:	4b20      	ldr	r3, [pc, #128]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001e6a:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <MX_DMA2D_Init+0x8c>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e74:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001eb2:	480e      	ldr	r0, [pc, #56]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001eb4:	f003 fcb2 	bl	800581c <HAL_DMA2D_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8001ebe:	f001 fb9f 	bl	8003600 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4809      	ldr	r0, [pc, #36]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001ec6:	f003 fe03 	bl	8005ad0 <HAL_DMA2D_ConfigLayer>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8001ed0:	f001 fb96 	bl	8003600 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_DMA2D_Init+0x88>)
 8001ed8:	f003 fdfa 	bl	8005ad0 <HAL_DMA2D_ConfigLayer>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8001ee2:	f001 fb8d 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000b040 	.word	0x2000b040
 8001ef0:	4002b000 	.word	0x4002b000

08001ef4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <MX_I2C2_Init+0x78>)
 8001efc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <MX_I2C2_Init+0x7c>)
 8001f02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f30:	480d      	ldr	r0, [pc, #52]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f32:	f004 f857 	bl	8005fe4 <HAL_I2C_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f3c:	f001 fb60 	bl	8003600 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f40:	2100      	movs	r1, #0
 8001f42:	4809      	ldr	r0, [pc, #36]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f44:	f004 ffe3 	bl	8006f0e <HAL_I2CEx_ConfigAnalogFilter>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001f4e:	f001 fb57 	bl	8003600 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f52:	2100      	movs	r1, #0
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <MX_I2C2_Init+0x74>)
 8001f56:	f005 f816 	bl	8006f86 <HAL_I2CEx_ConfigDigitalFilter>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001f60:	f001 fb4e 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	2000a4b0 	.word	0x2000a4b0
 8001f6c:	40005800 	.word	0x40005800
 8001f70:	00061a80 	.word	0x00061a80

08001f74 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2234      	movs	r2, #52	; 0x34
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f02c f8f3 	bl	802e16c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <MX_LTDC_Init+0x100>)
 8001f88:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <MX_LTDC_Init+0x104>)
 8001f8a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <MX_LTDC_Init+0x100>)
 8001f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f92:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8001f94:	4b37      	ldr	r3, [pc, #220]	; (8002074 <MX_LTDC_Init+0x100>)
 8001f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f9a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f9c:	4b35      	ldr	r3, [pc, #212]	; (8002074 <MX_LTDC_Init+0x100>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001fa2:	4b34      	ldr	r3, [pc, #208]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8001fa8:	4b32      	ldr	r3, [pc, #200]	; (8002074 <MX_LTDC_Init+0x100>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 80;
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fb6:	2250      	movs	r2, #80	; 0x50
 8001fb8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 40;
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fbc:	2228      	movs	r2, #40	; 0x28
 8001fbe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1104;
 8001fc0:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fc2:	f44f 628a 	mov.w	r2, #1104	; 0x450
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 640;
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1304;
 8001fd0:	4b28      	ldr	r3, [pc, #160]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fd2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 662;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fda:	f240 2296 	movw	r2, #662	; 0x296
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <MX_LTDC_Init+0x100>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <MX_LTDC_Init+0x100>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ff8:	481e      	ldr	r0, [pc, #120]	; (8002074 <MX_LTDC_Init+0x100>)
 8001ffa:	f005 f803 	bl	8007004 <HAL_LTDC_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8002004:	f001 fafc 	bl	8003600 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 1024;
 800200c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002010:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8002016:	f44f 7316 	mov.w	r3, #600	; 0x258
 800201a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800201c:	2302      	movs	r3, #2
 800201e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002020:	23ff      	movs	r3, #255	; 0xff
 8002022:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002028:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800202c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800202e:	2307      	movs	r3, #7
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8002032:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 1024;
 8002038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 800203e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_LTDC_Init+0x100>)
 800205e:	f005 f959 	bl	8007314 <HAL_LTDC_ConfigLayer>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8002068:	f001 faca 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3738      	adds	r7, #56	; 0x38
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000a5c4 	.word	0x2000a5c4
 8002078:	40016800 	.word	0x40016800

0800207c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_SDIO_SD_Init+0x38>)
 8002082:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <MX_SDIO_SD_Init+0x3c>)
 8002084:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_SDIO_SD_Init+0x38>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_SDIO_SD_Init+0x38>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <MX_SDIO_SD_Init+0x38>)
 8002094:	2200      	movs	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_SDIO_SD_Init+0x38>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <MX_SDIO_SD_Init+0x38>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <MX_SDIO_SD_Init+0x38>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	2000afb4 	.word	0x2000afb4
 80020b8:	40012c00 	.word	0x40012c00

080020bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b096      	sub	sp, #88	; 0x58
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]
 80020ea:	615a      	str	r2, [r3, #20]
 80020ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2220      	movs	r2, #32
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f02c f839 	bl	802e16c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020fa:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <MX_TIM1_Init+0x138>)
 80020fc:	4a3e      	ldr	r2, [pc, #248]	; (80021f8 <MX_TIM1_Init+0x13c>)
 80020fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002100:	4b3c      	ldr	r3, [pc, #240]	; (80021f4 <MX_TIM1_Init+0x138>)
 8002102:	2200      	movs	r2, #0
 8002104:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <MX_TIM1_Init+0x138>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210-1;
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <MX_TIM1_Init+0x138>)
 800210e:	22d1      	movs	r2, #209	; 0xd1
 8002110:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <MX_TIM1_Init+0x138>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002118:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <MX_TIM1_Init+0x138>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211e:	4b35      	ldr	r3, [pc, #212]	; (80021f4 <MX_TIM1_Init+0x138>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002124:	4833      	ldr	r0, [pc, #204]	; (80021f4 <MX_TIM1_Init+0x138>)
 8002126:	f007 fa93 	bl	8009650 <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002130:	f001 fa66 	bl	8003600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002138:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800213a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800213e:	4619      	mov	r1, r3
 8002140:	482c      	ldr	r0, [pc, #176]	; (80021f4 <MX_TIM1_Init+0x138>)
 8002142:	f007 ffef 	bl	800a124 <HAL_TIM_ConfigClockSource>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800214c:	f001 fa58 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002150:	4828      	ldr	r0, [pc, #160]	; (80021f4 <MX_TIM1_Init+0x138>)
 8002152:	f007 fb3d 	bl	80097d0 <HAL_TIM_PWM_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800215c:	f001 fa50 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002168:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800216c:	4619      	mov	r1, r3
 800216e:	4821      	ldr	r0, [pc, #132]	; (80021f4 <MX_TIM1_Init+0x138>)
 8002170:	f008 fcbc 	bl	800aaec <HAL_TIMEx_MasterConfigSynchronization>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800217a:	f001 fa41 	bl	8003600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217e:	2360      	movs	r3, #96	; 0x60
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800218a:	2300      	movs	r3, #0
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219e:	2200      	movs	r2, #0
 80021a0:	4619      	mov	r1, r3
 80021a2:	4814      	ldr	r0, [pc, #80]	; (80021f4 <MX_TIM1_Init+0x138>)
 80021a4:	f007 fefc 	bl	8009fa0 <HAL_TIM_PWM_ConfigChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80021ae:	f001 fa27 	bl	8003600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	4807      	ldr	r0, [pc, #28]	; (80021f4 <MX_TIM1_Init+0x138>)
 80021d6:	f008 fd05 	bl	800abe4 <HAL_TIMEx_ConfigBreakDeadTime>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80021e0:	f001 fa0e 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021e4:	4803      	ldr	r0, [pc, #12]	; (80021f4 <MX_TIM1_Init+0x138>)
 80021e6:	f001 fde1 	bl	8003dac <HAL_TIM_MspPostInit>

}
 80021ea:	bf00      	nop
 80021ec:	3758      	adds	r7, #88	; 0x58
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20009ac4 	.word	0x20009ac4
 80021f8:	40010000 	.word	0x40010000

080021fc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
 8002210:	615a      	str	r2, [r3, #20]
 8002212:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002214:	4b20      	ldr	r3, [pc, #128]	; (8002298 <MX_TIM9_Init+0x9c>)
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <MX_TIM9_Init+0xa0>)
 8002218:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = (840 * 3) -1;
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MX_TIM9_Init+0x9c>)
 800221c:	f640 12d7 	movw	r2, #2519	; 0x9d7
 8002220:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <MX_TIM9_Init+0x9c>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000 -1;
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <MX_TIM9_Init+0x9c>)
 800222a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800222e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <MX_TIM9_Init+0x9c>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <MX_TIM9_Init+0x9c>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800223c:	4816      	ldr	r0, [pc, #88]	; (8002298 <MX_TIM9_Init+0x9c>)
 800223e:	f007 fac7 	bl	80097d0 <HAL_TIM_PWM_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8002248:	f001 f9da 	bl	8003600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224c:	2360      	movs	r3, #96	; 0x60
 800224e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 8002250:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2200      	movs	r2, #0
 8002262:	4619      	mov	r1, r3
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <MX_TIM9_Init+0x9c>)
 8002266:	f007 fe9b 	bl	8009fa0 <HAL_TIM_PWM_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8002270:	f001 f9c6 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2204      	movs	r2, #4
 8002278:	4619      	mov	r1, r3
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_TIM9_Init+0x9c>)
 800227c:	f007 fe90 	bl	8009fa0 <HAL_TIM_PWM_ConfigChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 8002286:	f001 f9bb 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800228a:	4803      	ldr	r0, [pc, #12]	; (8002298 <MX_TIM9_Init+0x9c>)
 800228c:	f001 fd8e 	bl	8003dac <HAL_TIM_MspPostInit>

}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000af68 	.word	0x2000af68
 800229c:	40014000 	.word	0x40014000

080022a0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
 80022b4:	615a      	str	r2, [r3, #20]
 80022b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <MX_TIM13_Init+0x94>)
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <MX_TIM13_Init+0x98>)
 80022bc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <MX_TIM13_Init+0x94>)
 80022c0:	2253      	movs	r2, #83	; 0x53
 80022c2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <MX_TIM13_Init+0x94>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_TIM13_Init+0x94>)
 80022cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022d0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b18      	ldr	r3, [pc, #96]	; (8002334 <MX_TIM13_Init+0x94>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022d8:	4b16      	ldr	r3, [pc, #88]	; (8002334 <MX_TIM13_Init+0x94>)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80022de:	4815      	ldr	r0, [pc, #84]	; (8002334 <MX_TIM13_Init+0x94>)
 80022e0:	f007 f9b6 	bl	8009650 <HAL_TIM_Base_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80022ea:	f001 f989 	bl	8003600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80022ee:	4811      	ldr	r0, [pc, #68]	; (8002334 <MX_TIM13_Init+0x94>)
 80022f0:	f007 fa6e 	bl	80097d0 <HAL_TIM_PWM_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80022fa:	f001 f981 	bl	8003600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fe:	2360      	movs	r3, #96	; 0x60
 8002300:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	4619      	mov	r1, r3
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <MX_TIM13_Init+0x94>)
 8002316:	f007 fe43 	bl	8009fa0 <HAL_TIM_PWM_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002320:	f001 f96e 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002324:	4803      	ldr	r0, [pc, #12]	; (8002334 <MX_TIM13_Init+0x94>)
 8002326:	f001 fd41 	bl	8003dac <HAL_TIM_MspPostInit>

}
 800232a:	bf00      	nop
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000a698 	.word	0x2000a698
 8002338:	40001c00 	.word	0x40001c00

0800233c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_DMA_Init+0x3c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <MX_DMA_Init+0x3c>)
 800234c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_DMA_Init+0x3c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2105      	movs	r1, #5
 8002362:	2039      	movs	r0, #57	; 0x39
 8002364:	f002 fe98 	bl	8005098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002368:	2039      	movs	r0, #57	; 0x39
 800236a:	f002 feb1 	bl	80050d0 <HAL_NVIC_EnableIRQ>

}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800

0800237c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <MX_FMC_Init+0xb4>)
 8002398:	4a26      	ldr	r2, [pc, #152]	; (8002434 <MX_FMC_Init+0xb8>)
 800239a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <MX_FMC_Init+0xb4>)
 800239e:	2201      	movs	r2, #1
 80023a0:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80023a2:	4b23      	ldr	r3, [pc, #140]	; (8002430 <MX_FMC_Init+0xb4>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <MX_FMC_Init+0xb4>)
 80023aa:	2208      	movs	r2, #8
 80023ac:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <MX_FMC_Init+0xb4>)
 80023b0:	2210      	movs	r2, #16
 80023b2:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <MX_FMC_Init+0xb4>)
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <MX_FMC_Init+0xb4>)
 80023bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80023c0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <MX_FMC_Init+0xb4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <MX_FMC_Init+0xb4>)
 80023ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ce:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <MX_FMC_Init+0xb4>)
 80023d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <MX_FMC_Init+0xb4>)
 80023da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80023e0:	2302      	movs	r3, #2
 80023e2:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 8;
 80023e4:	2308      	movs	r3, #8
 80023e6:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 80023e8:	2306      	movs	r3, #6
 80023ea:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 80023ec:	2307      	movs	r3, #7
 80023ee:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 5;
 80023f0:	2305      	movs	r3, #5
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 80023f4:	2302      	movs	r3, #2
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 80023f8:	2302      	movs	r3, #2
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	480b      	ldr	r0, [pc, #44]	; (8002430 <MX_FMC_Init+0xb4>)
 8002404:	f007 f8a1 	bl	800954a <HAL_SDRAM_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 800240e:	f001 f8f7 	bl	8003600 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	FMC_SDRAM_CommandTypeDef command;
	if (SDRAM_Initialization_Sequence(&hsdram1, &command) != HAL_OK) {
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4806      	ldr	r0, [pc, #24]	; (8002430 <MX_FMC_Init+0xb4>)
 8002418:	f001 f914 	bl	8003644 <SDRAM_Initialization_Sequence>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_FMC_Init+0xaa>
		Error_Handler();
 8002422:	f001 f8ed 	bl	8003600 <Error_Handler>
	}
  /* USER CODE END FMC_Init 2 */
}
 8002426:	bf00      	nop
 8002428:	3730      	adds	r7, #48	; 0x30
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000b0c8 	.word	0x2000b0c8
 8002434:	a0000140 	.word	0xa0000140

08002438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b090      	sub	sp, #64	; 0x40
 800243c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
 8002452:	4b87      	ldr	r3, [pc, #540]	; (8002670 <MX_GPIO_Init+0x238>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a86      	ldr	r2, [pc, #536]	; (8002670 <MX_GPIO_Init+0x238>)
 8002458:	f043 0310 	orr.w	r3, r3, #16
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b84      	ldr	r3, [pc, #528]	; (8002670 <MX_GPIO_Init+0x238>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	4b80      	ldr	r3, [pc, #512]	; (8002670 <MX_GPIO_Init+0x238>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a7f      	ldr	r2, [pc, #508]	; (8002670 <MX_GPIO_Init+0x238>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b7d      	ldr	r3, [pc, #500]	; (8002670 <MX_GPIO_Init+0x238>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	4b79      	ldr	r3, [pc, #484]	; (8002670 <MX_GPIO_Init+0x238>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a78      	ldr	r2, [pc, #480]	; (8002670 <MX_GPIO_Init+0x238>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b76      	ldr	r3, [pc, #472]	; (8002670 <MX_GPIO_Init+0x238>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	4b72      	ldr	r3, [pc, #456]	; (8002670 <MX_GPIO_Init+0x238>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a71      	ldr	r2, [pc, #452]	; (8002670 <MX_GPIO_Init+0x238>)
 80024ac:	f043 0320 	orr.w	r3, r3, #32
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b6f      	ldr	r3, [pc, #444]	; (8002670 <MX_GPIO_Init+0x238>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	4b6b      	ldr	r3, [pc, #428]	; (8002670 <MX_GPIO_Init+0x238>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a6a      	ldr	r2, [pc, #424]	; (8002670 <MX_GPIO_Init+0x238>)
 80024c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b68      	ldr	r3, [pc, #416]	; (8002670 <MX_GPIO_Init+0x238>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	4b64      	ldr	r3, [pc, #400]	; (8002670 <MX_GPIO_Init+0x238>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a63      	ldr	r2, [pc, #396]	; (8002670 <MX_GPIO_Init+0x238>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b61      	ldr	r3, [pc, #388]	; (8002670 <MX_GPIO_Init+0x238>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <MX_GPIO_Init+0x238>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a5c      	ldr	r2, [pc, #368]	; (8002670 <MX_GPIO_Init+0x238>)
 8002500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b5a      	ldr	r3, [pc, #360]	; (8002670 <MX_GPIO_Init+0x238>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	4b56      	ldr	r3, [pc, #344]	; (8002670 <MX_GPIO_Init+0x238>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a55      	ldr	r2, [pc, #340]	; (8002670 <MX_GPIO_Init+0x238>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b53      	ldr	r3, [pc, #332]	; (8002670 <MX_GPIO_Init+0x238>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <MX_GPIO_Init+0x238>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a4e      	ldr	r2, [pc, #312]	; (8002670 <MX_GPIO_Init+0x238>)
 8002538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <MX_GPIO_Init+0x238>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	4b48      	ldr	r3, [pc, #288]	; (8002670 <MX_GPIO_Init+0x238>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a47      	ldr	r2, [pc, #284]	; (8002670 <MX_GPIO_Init+0x238>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b45      	ldr	r3, [pc, #276]	; (8002670 <MX_GPIO_Init+0x238>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PI3_GPIO_Port, LED_PI3_Pin, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	2108      	movs	r1, #8
 800256a:	4842      	ldr	r0, [pc, #264]	; (8002674 <MX_GPIO_Init+0x23c>)
 800256c:	f003 fd06 	bl	8005f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PD4_GPIO_Port, LED_PD4_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	2110      	movs	r1, #16
 8002574:	4840      	ldr	r0, [pc, #256]	; (8002678 <MX_GPIO_Init+0x240>)
 8002576:	f003 fd01 	bl	8005f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin|LED_PJ15_Pin, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002580:	483e      	ldr	r0, [pc, #248]	; (800267c <MX_GPIO_Init+0x244>)
 8002582:	f003 fcfb 	bl	8005f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 8002586:	230c      	movs	r3, #12
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258a:	2300      	movs	r3, #0
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002596:	4619      	mov	r1, r3
 8002598:	4839      	ldr	r0, [pc, #228]	; (8002680 <MX_GPIO_Init+0x248>)
 800259a:	f003 fb2b 	bl	8005bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_4_Pin;
 800259e:	23c0      	movs	r3, #192	; 0xc0
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a2:	2300      	movs	r3, #0
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80025aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ae:	4619      	mov	r1, r3
 80025b0:	4832      	ldr	r0, [pc, #200]	; (800267c <MX_GPIO_Init+0x244>)
 80025b2:	f003 fb1f 	bl	8005bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_ENT_Pin */
  GPIO_InitStruct.Pin = SDIO_ENT_Pin;
 80025b6:	2308      	movs	r3, #8
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ba:	2300      	movs	r3, #0
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO_ENT_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c6:	4619      	mov	r1, r3
 80025c8:	482e      	ldr	r0, [pc, #184]	; (8002684 <MX_GPIO_Init+0x24c>)
 80025ca:	f003 fb13 	bl	8005bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025e0:	2307      	movs	r3, #7
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e8:	4619      	mov	r1, r3
 80025ea:	4827      	ldr	r0, [pc, #156]	; (8002688 <MX_GPIO_Init+0x250>)
 80025ec:	f003 fb02 	bl	8005bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PI3_Pin */
  GPIO_InitStruct.Pin = LED_PI3_Pin;
 80025f0:	2308      	movs	r3, #8
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f4:	2301      	movs	r3, #1
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PI3_GPIO_Port, &GPIO_InitStruct);
 8002600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002604:	4619      	mov	r1, r3
 8002606:	481b      	ldr	r0, [pc, #108]	; (8002674 <MX_GPIO_Init+0x23c>)
 8002608:	f003 faf4 	bl	8005bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PD4_Pin */
  GPIO_InitStruct.Pin = LED_PD4_Pin;
 800260c:	2310      	movs	r3, #16
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002610:	2301      	movs	r3, #1
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PD4_GPIO_Port, &GPIO_InitStruct);
 800261c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002620:	4619      	mov	r1, r3
 8002622:	4815      	ldr	r0, [pc, #84]	; (8002678 <MX_GPIO_Init+0x240>)
 8002624:	f003 fae6 	bl	8005bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PJ12_Pin LED_PJ13_Pin LED_PJ14_Pin LED_PJ15_Pin */
  GPIO_InitStruct.Pin = LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin|LED_PJ15_Pin;
 8002628:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262e:	2301      	movs	r3, #1
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800263a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263e:	4619      	mov	r1, r3
 8002640:	480e      	ldr	r0, [pc, #56]	; (800267c <MX_GPIO_Init+0x244>)
 8002642:	f003 fad7 	bl	8005bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002646:	2338      	movs	r3, #56	; 0x38
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002656:	2305      	movs	r3, #5
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800265e:	4619      	mov	r1, r3
 8002660:	480a      	ldr	r0, [pc, #40]	; (800268c <MX_GPIO_Init+0x254>)
 8002662:	f003 fac7 	bl	8005bf4 <HAL_GPIO_Init>

}
 8002666:	bf00      	nop
 8002668:	3740      	adds	r7, #64	; 0x40
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40022000 	.word	0x40022000
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40022400 	.word	0x40022400
 8002680:	40021000 	.word	0x40021000
 8002684:	40021800 	.word	0x40021800
 8002688:	40020000 	.word	0x40020000
 800268c:	40020400 	.word	0x40020400

08002690 <mapInt>:
float mapFloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

long mapInt(float x, float in_min, float in_max, int out_min, int out_max) {
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	ed87 0a05 	vstr	s0, [r7, #20]
 800269a:	edc7 0a04 	vstr	s1, [r7, #16]
 800269e:	ed87 1a03 	vstr	s2, [r7, #12]
 80026a2:	60b8      	str	r0, [r7, #8]
 80026a4:	6079      	str	r1, [r7, #4]
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 80026a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80026aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80026c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			+ out_min);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026de:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 80026e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e6:	ee17 3a90 	vmov	r3, s15
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <Start_START_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_START_Task */
void Start_START_Task(void *argument)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//htim13.Instance->CCR1 = (htim13.Instance->ARR) * 0.99;

	Current_Status.LED_BRIGHTNESS  = LED_DEFAULT_BRIGHTNESS;
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <Start_START_Task+0x48>)
 8002702:	2205      	movs	r2, #5
 8002704:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	Current_Status.LCD_BRIGHTNESS = LCD_DEFAULT_BRIGHTNESS;
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <Start_START_Task+0x48>)
 800270a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800270e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <Start_START_Task+0x48>)
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	/* Infinite loop */
	for (;;) {
		if(Current_Status.LCD_BRIGHTNESS_CHANGED == 1)
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <Start_START_Task+0x48>)
 800271c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002720:	2b01      	cmp	r3, #1
 8002722:	d109      	bne.n	8002738 <Start_START_Task+0x40>
		{
			htim13.Instance->CCR1 = Current_Status.LCD_BRIGHTNESS;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <Start_START_Task+0x48>)
 8002726:	f8b3 2096 	ldrh.w	r2, [r3, #150]	; 0x96
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <Start_START_Task+0x4c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	635a      	str	r2, [r3, #52]	; 0x34
			Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <Start_START_Task+0x48>)
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		}
		 osDelay(10);
 8002738:	200a      	movs	r0, #10
 800273a:	f009 fd42 	bl	800c1c2 <osDelay>
		if(Current_Status.LCD_BRIGHTNESS_CHANGED == 1)
 800273e:	e7ec      	b.n	800271a <Start_START_Task+0x22>
 8002740:	2000a504 	.word	0x2000a504
 8002744:	2000a698 	.word	0x2000a698

08002748 <Start_SD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_Task */
void Start_SD_Task(void *argument)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002750:	2001      	movs	r0, #1
 8002752:	f009 fd36 	bl	800c1c2 <osDelay>
 8002756:	e7fb      	b.n	8002750 <Start_SD_Task+0x8>

08002758 <Start_LED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LED_Task */
void Start_LED_Task(void *argument)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LED_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002760:	2001      	movs	r0, #1
 8002762:	f009 fd2e 	bl	800c1c2 <osDelay>
 8002766:	e7fb      	b.n	8002760 <Start_LED_Task+0x8>

08002768 <Start_CAN_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_CAN_Task */
void Start_CAN_Task(void *argument)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_CAN_Task */
  /* Infinite loop */
	Current_Status.CAN_PROTOCOL = CAN_LINK;
 8002770:	4bc5      	ldr	r3, [pc, #788]	; (8002a88 <Start_CAN_Task+0x320>)
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  for(;;)
  {
	  if (CAN_ENABLED) {

	  			if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8002778:	4bc4      	ldr	r3, [pc, #784]	; (8002a8c <Start_CAN_Task+0x324>)
 800277a:	4ac5      	ldr	r2, [pc, #788]	; (8002a90 <Start_CAN_Task+0x328>)
 800277c:	2100      	movs	r1, #0
 800277e:	48c5      	ldr	r0, [pc, #788]	; (8002a94 <Start_CAN_Task+0x32c>)
 8002780:	f002 f886 	bl	8004890 <HAL_CAN_GetRxMessage>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 8582 	bne.w	8003290 <Start_CAN_Task+0xb28>
	  			{
	  				if(Current_Status.CAN_PROTOCOL == CAN_LINK)
 800278c:	4bbe      	ldr	r3, [pc, #760]	; (8002a88 <Start_CAN_Task+0x320>)
 800278e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 8384 	bne.w	8002ea0 <Start_CAN_Task+0x738>
	  				{
	  					switch (RxHeader.StdId) {
 8002798:	4bbd      	ldr	r3, [pc, #756]	; (8002a90 <Start_CAN_Task+0x328>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a0:	f000 814a 	beq.w	8002a38 <Start_CAN_Task+0x2d0>
 80027a4:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 80027a8:	f040 836d 	bne.w	8002e86 <Start_CAN_Task+0x71e>
	  						case 0x7E8:
	  							switch (RxData[2]) {
 80027ac:	4bb7      	ldr	r3, [pc, #732]	; (8002a8c <Start_CAN_Task+0x324>)
 80027ae:	789b      	ldrb	r3, [r3, #2]
 80027b0:	3b05      	subs	r3, #5
 80027b2:	2b5b      	cmp	r3, #91	; 0x5b
 80027b4:	f200 813e 	bhi.w	8002a34 <Start_CAN_Task+0x2cc>
 80027b8:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <Start_CAN_Task+0x58>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	08002931 	.word	0x08002931
 80027c4:	08002a35 	.word	0x08002a35
 80027c8:	08002a35 	.word	0x08002a35
 80027cc:	08002a35 	.word	0x08002a35
 80027d0:	08002a35 	.word	0x08002a35
 80027d4:	08002a35 	.word	0x08002a35
 80027d8:	08002943 	.word	0x08002943
 80027dc:	08002951 	.word	0x08002951
 80027e0:	0800296b 	.word	0x0800296b
 80027e4:	08002977 	.word	0x08002977
 80027e8:	0800298b 	.word	0x0800298b
 80027ec:	08002a35 	.word	0x08002a35
 80027f0:	0800299d 	.word	0x0800299d
 80027f4:	08002a35 	.word	0x08002a35
 80027f8:	08002a35 	.word	0x08002a35
 80027fc:	08002a35 	.word	0x08002a35
 8002800:	08002a35 	.word	0x08002a35
 8002804:	08002a35 	.word	0x08002a35
 8002808:	08002a35 	.word	0x08002a35
 800280c:	08002a35 	.word	0x08002a35
 8002810:	08002a35 	.word	0x08002a35
 8002814:	08002a35 	.word	0x08002a35
 8002818:	08002a35 	.word	0x08002a35
 800281c:	08002a35 	.word	0x08002a35
 8002820:	08002a35 	.word	0x08002a35
 8002824:	08002a35 	.word	0x08002a35
 8002828:	08002a35 	.word	0x08002a35
 800282c:	08002a35 	.word	0x08002a35
 8002830:	08002a35 	.word	0x08002a35
 8002834:	080029a7 	.word	0x080029a7
 8002838:	08002a35 	.word	0x08002a35
 800283c:	080029e1 	.word	0x080029e1
 8002840:	080029e9 	.word	0x080029e9
 8002844:	08002a35 	.word	0x08002a35
 8002848:	08002a35 	.word	0x08002a35
 800284c:	08002a35 	.word	0x08002a35
 8002850:	08002a35 	.word	0x08002a35
 8002854:	08002a35 	.word	0x08002a35
 8002858:	08002a35 	.word	0x08002a35
 800285c:	08002a35 	.word	0x08002a35
 8002860:	08002a35 	.word	0x08002a35
 8002864:	08002a35 	.word	0x08002a35
 8002868:	08002a35 	.word	0x08002a35
 800286c:	08002a35 	.word	0x08002a35
 8002870:	08002a35 	.word	0x08002a35
 8002874:	08002a35 	.word	0x08002a35
 8002878:	080029f1 	.word	0x080029f1
 800287c:	08002a35 	.word	0x08002a35
 8002880:	08002a35 	.word	0x08002a35
 8002884:	08002a35 	.word	0x08002a35
 8002888:	08002a35 	.word	0x08002a35
 800288c:	08002a35 	.word	0x08002a35
 8002890:	08002a35 	.word	0x08002a35
 8002894:	08002a35 	.word	0x08002a35
 8002898:	08002a35 	.word	0x08002a35
 800289c:	08002a35 	.word	0x08002a35
 80028a0:	08002a35 	.word	0x08002a35
 80028a4:	08002a35 	.word	0x08002a35
 80028a8:	08002a35 	.word	0x08002a35
 80028ac:	08002a35 	.word	0x08002a35
 80028b0:	08002a35 	.word	0x08002a35
 80028b4:	080029ff 	.word	0x080029ff
 80028b8:	08002a35 	.word	0x08002a35
 80028bc:	08002a35 	.word	0x08002a35
 80028c0:	08002a35 	.word	0x08002a35
 80028c4:	08002a35 	.word	0x08002a35
 80028c8:	08002a35 	.word	0x08002a35
 80028cc:	08002a35 	.word	0x08002a35
 80028d0:	08002a35 	.word	0x08002a35
 80028d4:	08002a35 	.word	0x08002a35
 80028d8:	08002a35 	.word	0x08002a35
 80028dc:	08002a35 	.word	0x08002a35
 80028e0:	08002a35 	.word	0x08002a35
 80028e4:	08002a35 	.word	0x08002a35
 80028e8:	08002a35 	.word	0x08002a35
 80028ec:	08002a35 	.word	0x08002a35
 80028f0:	08002a35 	.word	0x08002a35
 80028f4:	08002a19 	.word	0x08002a19
 80028f8:	08002a35 	.word	0x08002a35
 80028fc:	08002a35 	.word	0x08002a35
 8002900:	08002a35 	.word	0x08002a35
 8002904:	08002a35 	.word	0x08002a35
 8002908:	08002a35 	.word	0x08002a35
 800290c:	08002a35 	.word	0x08002a35
 8002910:	08002a35 	.word	0x08002a35
 8002914:	08002a35 	.word	0x08002a35
 8002918:	08002a35 	.word	0x08002a35
 800291c:	08002a23 	.word	0x08002a23
 8002920:	08002a35 	.word	0x08002a35
 8002924:	08002a35 	.word	0x08002a35
 8002928:	08002a35 	.word	0x08002a35
 800292c:	08002a35 	.word	0x08002a35
	  								case 0x05: //PID-0x05 Engine coolant temperature , range is -40 to 215 deg C , formula == A-40
	  									Current_Status.ECT = RxData[3] - 40;
 8002930:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <Start_CAN_Task+0x324>)
 8002932:	78db      	ldrb	r3, [r3, #3]
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b28      	subs	r3, #40	; 0x28
 8002938:	b29a      	uxth	r2, r3
 800293a:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <Start_CAN_Task+0x320>)
 800293c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  									break;
 8002940:	e079      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x0B: // PID-0x0B , MAP , range is 0 to 255 kPa , Formula == A
	  									Current_Status.MAP = RxData[3];
 8002942:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <Start_CAN_Task+0x324>)
 8002944:	78db      	ldrb	r3, [r3, #3]
 8002946:	b21a      	sxth	r2, r3
 8002948:	4b4f      	ldr	r3, [pc, #316]	; (8002a88 <Start_CAN_Task+0x320>)
 800294a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  									break;
 800294e:	e072      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x0C: // PID-0x0C , RPM  , range is 0 to 16383.75 rpm , Formula == 256A+B / 4
	  									Current_Status.RPM = (uint16_t)((RxData[4] << 8) + (RxData[3] & 0x00ff));
 8002950:	4b4e      	ldr	r3, [pc, #312]	; (8002a8c <Start_CAN_Task+0x324>)
 8002952:	791b      	ldrb	r3, [r3, #4]
 8002954:	b29b      	uxth	r3, r3
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	b29a      	uxth	r2, r3
 800295a:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <Start_CAN_Task+0x324>)
 800295c:	78db      	ldrb	r3, [r3, #3]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4413      	add	r3, r2
 8002962:	b29a      	uxth	r2, r3
 8002964:	4b48      	ldr	r3, [pc, #288]	; (8002a88 <Start_CAN_Task+0x320>)
 8002966:	801a      	strh	r2, [r3, #0]
	  									break;
 8002968:	e065      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x0D: //PID-0x0D , Vehicle speed , range is 0 to 255 km/h , formula == A
	  									Current_Status.LF_SPEED = RxData[3];
 800296a:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <Start_CAN_Task+0x324>)
 800296c:	78db      	ldrb	r3, [r3, #3]
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <Start_CAN_Task+0x320>)
 8002972:	859a      	strh	r2, [r3, #44]	; 0x2c
	  									break;
 8002974:	e05f      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x0E: //PID-0x0E , Ignition Timing advance, range is -64 to 63.5 BTDC , formula == A/2 - 64
	  									Current_Status.IGN_TIM = RxData[3] / 2 - 64;
 8002976:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <Start_CAN_Task+0x324>)
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	b2db      	uxtb	r3, r3
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b40      	subs	r3, #64	; 0x40
 8002982:	b29a      	uxth	r2, r3
 8002984:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <Start_CAN_Task+0x320>)
 8002986:	835a      	strh	r2, [r3, #26]
	  									break;
 8002988:	e055      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x0F: //PID-0x0F , Inlet air temperature , range is -40 to 215 deg C, formula == A-40
	  									Current_Status.IAT = RxData[3] - 40;
 800298a:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <Start_CAN_Task+0x324>)
 800298c:	78db      	ldrb	r3, [r3, #3]
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b28      	subs	r3, #40	; 0x28
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <Start_CAN_Task+0x320>)
 8002996:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  									break;
 800299a:	e04c      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x11: // PID-0x11 , TPS percentage, range is 0 to 100 percent, formula == 100/256 A
	  									Current_Status.TPS = 100/256 * RxData[3];
 800299c:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <Start_CAN_Task+0x320>)
 800299e:	2200      	movs	r2, #0
 80029a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  									break;
 80029a4:	e047      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x1C: // PID-0x1C obd standard
	  									break;
	  								case 0x20: // PID-0x20 PIDs supported [21-40]
	  									break;
	  								case 0x22: // PID-0x22 Fuel /Pressure (Relative to manifold vacuum) , range is 0 to 5177.265 kPa , formula == 0.079(256A+B)
	  									Current_Status.FUELP = 0.079 * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));
 80029a6:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <Start_CAN_Task+0x324>)
 80029a8:	791b      	ldrb	r3, [r3, #4]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <Start_CAN_Task+0x324>)
 80029b4:	78d2      	ldrb	r2, [r2, #3]
 80029b6:	4413      	add	r3, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fdc3 	bl	8000544 <__aeabi_i2d>
 80029be:	a330      	add	r3, pc, #192	; (adr r3, 8002a80 <Start_CAN_Task+0x318>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fe28 	bl	8000618 <__aeabi_dmul>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7fe f834 	bl	8000a3c <__aeabi_d2uiz>
 80029d4:	4603      	mov	r3, r0
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <Start_CAN_Task+0x320>)
 80029da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  									break;
 80029de:	e02a      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x24: // PID-0x24 O2 sensor2, AB: fuel/air equivalence ratio, CD: voltage ,  Formula == (2/65536)(256A +B) , 8/65536(256C+D) , Range is 0 to <2 and 0 to >8V
	  									Current_Status.LAMBDA1 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 80029e0:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <Start_CAN_Task+0x320>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	849a      	strh	r2, [r3, #36]	; 0x24
	  									break;
 80029e6:	e026      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x25: // PID-0x25 O2 sensor2, AB fuel/air equivalence ratio, CD voltage ,  2/65536(256A +B) ,8/65536(256C+D) , range is 0 to <2 and 0 to >8V
	  									Current_Status.LAMBDA2 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <Start_CAN_Task+0x320>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	84da      	strh	r2, [r3, #38]	; 0x26
	  									break;
 80029ee:	e022      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x33: // PID-0x33 Absolute Barometric pressure , range is 0 to 255 kPa , formula == A
	  									Current_Status.BARO = RxData[3];
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <Start_CAN_Task+0x324>)
 80029f2:	78db      	ldrb	r3, [r3, #3]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <Start_CAN_Task+0x320>)
 80029f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  									break;
 80029fc:	e01b      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x40: // PIDs supported [41-60]
	  									break;
	  								case 0x42: // PID-0x42 control module voltage, 256A+B / 1000 , range is 0 to 65.535v
	  									Current_Status.BATT = 256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff) / 1000;
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <Start_CAN_Task+0x324>)
 8002a00:	78db      	ldrb	r3, [r3, #3]
 8002a02:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <Start_CAN_Task+0x330>)
 8002a04:	fb82 1203 	smull	r1, r2, r2, r3
 8002a08:	1192      	asrs	r2, r2, #6
 8002a0a:	17db      	asrs	r3, r3, #31
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <Start_CAN_Task+0x320>)
 8002a12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  									break;
 8002a16:	e00e      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x46: // PID-0x46 Ambient Air Temperature , range is -40 to 215 deg C , formula == A-40
	  									break;
	  								case 0x52: // PID-0x52 Ethanol fuel % , range is 0 to 100% , formula == (100/255)A
	  									Current_Status.ETHANOL = 100 / 255 * RxData[3];
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <Start_CAN_Task+0x320>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	  									break;
 8002a20:	e009      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x5C: // PID-0x5C Engine oil temperature , range is -40 to 210 deg C , formula == A-40
	  									Current_Status.OILT = RxData[3] - 40;
 8002a22:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <Start_CAN_Task+0x324>)
 8002a24:	78db      	ldrb	r3, [r3, #3]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b28      	subs	r3, #40	; 0x28
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <Start_CAN_Task+0x320>)
 8002a2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  									break;
 8002a32:	e000      	b.n	8002a36 <Start_CAN_Task+0x2ce>
	  								case 0x60: // PIDs supported [61-80]
	  									break;
	  								default:
	  									break;
 8002a34:	bf00      	nop
	  							}
	  							break;
 8002a36:	e226      	b.n	8002e86 <Start_CAN_Task+0x71e>
	  							case 0x3E8: //Link Dash
	  								switch (RxData[0]) {
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <Start_CAN_Task+0x324>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	f200 8221 	bhi.w	8002e84 <Start_CAN_Task+0x71c>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <Start_CAN_Task+0x2e0>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a9d 	.word	0x08002a9d
 8002a4c:	08002aeb 	.word	0x08002aeb
 8002a50:	08002b39 	.word	0x08002b39
 8002a54:	08002b85 	.word	0x08002b85
 8002a58:	08002bd3 	.word	0x08002bd3
 8002a5c:	08002c1f 	.word	0x08002c1f
 8002a60:	08002c69 	.word	0x08002c69
 8002a64:	08002cbd 	.word	0x08002cbd
 8002a68:	08002d09 	.word	0x08002d09
 8002a6c:	08002d57 	.word	0x08002d57
 8002a70:	08002da1 	.word	0x08002da1
 8002a74:	08002deb 	.word	0x08002deb
 8002a78:	08002e35 	.word	0x08002e35
 8002a7c:	f3af 8000 	nop.w
 8002a80:	10624dd3 	.word	0x10624dd3
 8002a84:	3fb43958 	.word	0x3fb43958
 8002a88:	2000a504 	.word	0x2000a504
 8002a8c:	2000b080 	.word	0x2000b080
 8002a90:	2000b0fc 	.word	0x2000b0fc
 8002a94:	2000b088 	.word	0x2000b088
 8002a98:	10624dd3 	.word	0x10624dd3
	  									case 0:
	  										Current_Status.RPM = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002a9c:	4b85      	ldr	r3, [pc, #532]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002a9e:	78db      	ldrb	r3, [r3, #3]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	4b83      	ldr	r3, [pc, #524]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002aa8:	789b      	ldrb	r3, [r3, #2]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	4b81      	ldr	r3, [pc, #516]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002ab2:	801a      	strh	r2, [r3, #0]
	  										Current_Status.MAP = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002ab4:	4b7f      	ldr	r3, [pc, #508]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002ab6:	795b      	ldrb	r3, [r3, #5]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b7d      	ldr	r3, [pc, #500]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002ac0:	791b      	ldrb	r3, [r3, #4]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	b21a      	sxth	r2, r3
 8002aca:	4b7b      	ldr	r3, [pc, #492]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002acc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  										Current_Status.MGP = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002ad0:	4b78      	ldr	r3, [pc, #480]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002ad2:	79db      	ldrb	r3, [r3, #7]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b76      	ldr	r3, [pc, #472]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002adc:	799b      	ldrb	r3, [r3, #6]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002ae6:	81da      	strh	r2, [r3, #14]
	  										break;
 8002ae8:	e1cc      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 1:
	  										Current_Status.BARO = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002aea:	4b72      	ldr	r3, [pc, #456]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002aec:	78db      	ldrb	r3, [r3, #3]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	4b6f      	ldr	r3, [pc, #444]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002af6:	789b      	ldrb	r3, [r3, #2]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	4b6e      	ldr	r3, [pc, #440]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002b00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  										Current_Status.TPS = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002b04:	4b6b      	ldr	r3, [pc, #428]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b06:	795b      	ldrb	r3, [r3, #5]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	4b69      	ldr	r3, [pc, #420]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b10:	791b      	ldrb	r3, [r3, #4]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002b1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  										Current_Status.INJ_DC = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002b1e:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b20:	79db      	ldrb	r3, [r3, #7]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	4b62      	ldr	r3, [pc, #392]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b2a:	799b      	ldrb	r3, [r3, #6]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002b34:	821a      	strh	r2, [r3, #16]
	  										break;
 8002b36:	e1a5      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 2:
	  										Current_Status.INJ_DC_ST = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002b38:	4b5e      	ldr	r3, [pc, #376]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b3a:	78db      	ldrb	r3, [r3, #3]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b44:	789b      	ldrb	r3, [r3, #2]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b5a      	ldr	r3, [pc, #360]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002b4e:	825a      	strh	r2, [r3, #18]
	  										Current_Status.INJ_PULSE = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002b50:	4b58      	ldr	r3, [pc, #352]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b52:	795b      	ldrb	r3, [r3, #5]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b5c:	791b      	ldrb	r3, [r3, #4]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b54      	ldr	r3, [pc, #336]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002b66:	829a      	strh	r2, [r3, #20]
	  										Current_Status.ECT = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002b68:	4b52      	ldr	r3, [pc, #328]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b6a:	79db      	ldrb	r3, [r3, #7]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b74:	799b      	ldrb	r3, [r3, #6]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002b7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  										break;
 8002b82:	e17f      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 3:
	  										Current_Status.IAT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002b84:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b86:	78db      	ldrb	r3, [r3, #3]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002b90:	789b      	ldrb	r3, [r3, #2]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002b9a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  										Current_Status.BATT = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002b9e:	4b45      	ldr	r3, [pc, #276]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002ba0:	795b      	ldrb	r3, [r3, #5]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002baa:	791b      	ldrb	r3, [r3, #4]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  										Current_Status.MAF = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002bb8:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002bba:	79db      	ldrb	r3, [r3, #7]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002bc4:	799b      	ldrb	r3, [r3, #6]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002bce:	82da      	strh	r2, [r3, #22]
	  										break;
 8002bd0:	e158      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 4:
	  										Current_Status.GEAR = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002bd4:	78db      	ldrb	r3, [r3, #3]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	4b35      	ldr	r3, [pc, #212]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002bde:	789b      	ldrb	r3, [r3, #2]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	  										Current_Status.INJ_TIM = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002bec:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002bee:	795b      	ldrb	r3, [r3, #5]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002bf8:	791b      	ldrb	r3, [r3, #4]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002c02:	831a      	strh	r2, [r3, #24]
	  										Current_Status.IGN_TIM = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002c04:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c06:	79db      	ldrb	r3, [r3, #7]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c10:	799b      	ldrb	r3, [r3, #6]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002c1a:	835a      	strh	r2, [r3, #26]
	  										break;
 8002c1c:	e132      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 5:
	  										Current_Status.CAM_I_L = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002c1e:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c20:	78db      	ldrb	r3, [r3, #3]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c2a:	789b      	ldrb	r3, [r3, #2]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002c34:	839a      	strh	r2, [r3, #28]
	  										Current_Status.CAM_I_R = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002c36:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c38:	795b      	ldrb	r3, [r3, #5]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c42:	791b      	ldrb	r3, [r3, #4]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002c4c:	83da      	strh	r2, [r3, #30]
	  										Current_Status.CAM_E_L = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002c4e:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c50:	79db      	ldrb	r3, [r3, #7]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c5a:	799b      	ldrb	r3, [r3, #6]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002c64:	841a      	strh	r2, [r3, #32]
	  										break;
 8002c66:	e10d      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 6:
	  										Current_Status.CAM_E_R = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c6a:	78db      	ldrb	r3, [r3, #3]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c74:	789b      	ldrb	r3, [r3, #2]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002c7e:	845a      	strh	r2, [r3, #34]	; 0x22
	  										Current_Status.LAMBDA1 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c82:	795b      	ldrb	r3, [r3, #5]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c8c:	791b      	ldrb	r3, [r3, #4]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002c96:	849a      	strh	r2, [r3, #36]	; 0x24
	  										Current_Status.LAMBDA2 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002c9a:	79db      	ldrb	r3, [r3, #7]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <Start_CAN_Task+0x54c>)
 8002ca4:	799b      	ldrb	r3, [r3, #6]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	4b02      	ldr	r3, [pc, #8]	; (8002cb8 <Start_CAN_Task+0x550>)
 8002cae:	84da      	strh	r2, [r3, #38]	; 0x26
	  										break;
 8002cb0:	e0e8      	b.n	8002e84 <Start_CAN_Task+0x71c>
 8002cb2:	bf00      	nop
 8002cb4:	2000b080 	.word	0x2000b080
 8002cb8:	2000a504 	.word	0x2000a504
	  									case 7:
	  										Current_Status.TRIG1_ERROR = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002cbc:	4b75      	ldr	r3, [pc, #468]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002cbe:	78db      	ldrb	r3, [r3, #3]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002cc8:	789b      	ldrb	r3, [r3, #2]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	4b71      	ldr	r3, [pc, #452]	; (8002e98 <Start_CAN_Task+0x730>)
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
	  										Current_Status.FAULT_CODES = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002cd6:	795b      	ldrb	r3, [r3, #5]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002ce0:	791b      	ldrb	r3, [r3, #4]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b6b      	ldr	r3, [pc, #428]	; (8002e98 <Start_CAN_Task+0x730>)
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
	  										Current_Status.FUELP = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002cec:	4b69      	ldr	r3, [pc, #420]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002cee:	79db      	ldrb	r3, [r3, #7]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	4b67      	ldr	r3, [pc, #412]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002cf8:	799b      	ldrb	r3, [r3, #6]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <Start_CAN_Task+0x730>)
 8002d02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  										break;
 8002d06:	e0bd      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 8:
	  										Current_Status.OILT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002d08:	4b62      	ldr	r3, [pc, #392]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d0a:	78db      	ldrb	r3, [r3, #3]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	4b60      	ldr	r3, [pc, #384]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d14:	789b      	ldrb	r3, [r3, #2]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b5e      	ldr	r3, [pc, #376]	; (8002e98 <Start_CAN_Task+0x730>)
 8002d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  										Current_Status.OILP = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002d22:	4b5c      	ldr	r3, [pc, #368]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d24:	795b      	ldrb	r3, [r3, #5]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	4b59      	ldr	r3, [pc, #356]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d2e:	791b      	ldrb	r3, [r3, #4]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	4b58      	ldr	r3, [pc, #352]	; (8002e98 <Start_CAN_Task+0x730>)
 8002d38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	  										Current_Status.LF_SPEED = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002d3c:	4b55      	ldr	r3, [pc, #340]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d3e:	79db      	ldrb	r3, [r3, #7]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	4b53      	ldr	r3, [pc, #332]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d48:	799b      	ldrb	r3, [r3, #6]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <Start_CAN_Task+0x730>)
 8002d52:	859a      	strh	r2, [r3, #44]	; 0x2c
	  										break;
 8002d54:	e096      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 9:
	  										Current_Status.LR_SPEED = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002d56:	4b4f      	ldr	r3, [pc, #316]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d58:	78db      	ldrb	r3, [r3, #3]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	4b4c      	ldr	r3, [pc, #304]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d62:	789b      	ldrb	r3, [r3, #2]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <Start_CAN_Task+0x730>)
 8002d6c:	85da      	strh	r2, [r3, #46]	; 0x2e
	  										Current_Status.RF_SPEED = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002d6e:	4b49      	ldr	r3, [pc, #292]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d70:	795b      	ldrb	r3, [r3, #5]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d7a:	791b      	ldrb	r3, [r3, #4]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	4b45      	ldr	r3, [pc, #276]	; (8002e98 <Start_CAN_Task+0x730>)
 8002d84:	861a      	strh	r2, [r3, #48]	; 0x30
	  										Current_Status.RR_SPEED = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d88:	79db      	ldrb	r3, [r3, #7]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002d92:	799b      	ldrb	r3, [r3, #6]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <Start_CAN_Task+0x730>)
 8002d9c:	865a      	strh	r2, [r3, #50]	; 0x32
	  										break;
 8002d9e:	e071      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 10:
	  										Current_Status.KNOCK1 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002da0:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002da2:	78db      	ldrb	r3, [r3, #3]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002dac:	789b      	ldrb	r3, [r3, #2]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <Start_CAN_Task+0x730>)
 8002db6:	869a      	strh	r2, [r3, #52]	; 0x34
	  										Current_Status.KNOCK2 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002dba:	795b      	ldrb	r3, [r3, #5]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b34      	ldr	r3, [pc, #208]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002dc4:	791b      	ldrb	r3, [r3, #4]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <Start_CAN_Task+0x730>)
 8002dce:	86da      	strh	r2, [r3, #54]	; 0x36
	  										Current_Status.KNOCK3 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002dd0:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002dd2:	79db      	ldrb	r3, [r3, #7]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002ddc:	799b      	ldrb	r3, [r3, #6]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <Start_CAN_Task+0x730>)
 8002de6:	871a      	strh	r2, [r3, #56]	; 0x38
	  										break;
 8002de8:	e04c      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 11:
	  										Current_Status.KNOCK4 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002dea:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002dec:	78db      	ldrb	r3, [r3, #3]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002df6:	789b      	ldrb	r3, [r3, #2]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <Start_CAN_Task+0x730>)
 8002e00:	875a      	strh	r2, [r3, #58]	; 0x3a
	  										Current_Status.KNOCK5 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002e02:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e04:	795b      	ldrb	r3, [r3, #5]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e0e:	791b      	ldrb	r3, [r3, #4]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <Start_CAN_Task+0x730>)
 8002e18:	879a      	strh	r2, [r3, #60]	; 0x3c
	  										Current_Status.KNOCK6 = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e1c:	79db      	ldrb	r3, [r3, #7]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e26:	799b      	ldrb	r3, [r3, #6]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <Start_CAN_Task+0x730>)
 8002e30:	87da      	strh	r2, [r3, #62]	; 0x3e
	  										break;
 8002e32:	e027      	b.n	8002e84 <Start_CAN_Task+0x71c>
	  									case 12:
	  										Current_Status.KNOCK7 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff));
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e36:	78db      	ldrb	r3, [r3, #3]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e40:	789b      	ldrb	r3, [r3, #2]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <Start_CAN_Task+0x730>)
 8002e4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	  										Current_Status.KNOCK8 = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff));
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e50:	795b      	ldrb	r3, [r3, #5]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e5a:	791b      	ldrb	r3, [r3, #4]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <Start_CAN_Task+0x730>)
 8002e64:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	  										Current_Status.LIMITS = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff));
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e6a:	79db      	ldrb	r3, [r3, #7]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <Start_CAN_Task+0x72c>)
 8002e74:	799b      	ldrb	r3, [r3, #6]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <Start_CAN_Task+0x730>)
 8002e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	  										break;
 8002e82:	bf00      	nop
	  								}
	  								break;
 8002e84:	bf00      	nop
	  							}
	  					HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 8002e86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e8a:	4804      	ldr	r0, [pc, #16]	; (8002e9c <Start_CAN_Task+0x734>)
 8002e8c:	f003 f88f 	bl	8005fae <HAL_GPIO_TogglePin>
 8002e90:	e156      	b.n	8003140 <Start_CAN_Task+0x9d8>
 8002e92:	bf00      	nop
 8002e94:	2000b080 	.word	0x2000b080
 8002e98:	2000a504 	.word	0x2000a504
 8002e9c:	40022400 	.word	0x40022400
	  				}
	  				else if(Current_Status.CAN_PROTOCOL == CAN_MX5)
 8002ea0:	4bc5      	ldr	r3, [pc, #788]	; (80031b8 <Start_CAN_Task+0xa50>)
 8002ea2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	f040 814a 	bne.w	8003140 <Start_CAN_Task+0x9d8>
	  				{
	  					switch (RxHeader.StdId) {
 8002eac:	4bc3      	ldr	r3, [pc, #780]	; (80031bc <Start_CAN_Task+0xa54>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3b05      	subs	r3, #5
 8002eb2:	2b5b      	cmp	r3, #91	; 0x5b
 8002eb4:	f200 813e 	bhi.w	8003134 <Start_CAN_Task+0x9cc>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <Start_CAN_Task+0x758>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08003031 	.word	0x08003031
 8002ec4:	08003135 	.word	0x08003135
 8002ec8:	08003135 	.word	0x08003135
 8002ecc:	08003135 	.word	0x08003135
 8002ed0:	08003135 	.word	0x08003135
 8002ed4:	08003135 	.word	0x08003135
 8002ed8:	08003043 	.word	0x08003043
 8002edc:	08003051 	.word	0x08003051
 8002ee0:	0800306b 	.word	0x0800306b
 8002ee4:	08003077 	.word	0x08003077
 8002ee8:	0800308b 	.word	0x0800308b
 8002eec:	08003135 	.word	0x08003135
 8002ef0:	0800309d 	.word	0x0800309d
 8002ef4:	08003135 	.word	0x08003135
 8002ef8:	08003135 	.word	0x08003135
 8002efc:	08003135 	.word	0x08003135
 8002f00:	08003135 	.word	0x08003135
 8002f04:	08003135 	.word	0x08003135
 8002f08:	08003135 	.word	0x08003135
 8002f0c:	08003135 	.word	0x08003135
 8002f10:	08003135 	.word	0x08003135
 8002f14:	08003135 	.word	0x08003135
 8002f18:	08003135 	.word	0x08003135
 8002f1c:	08003135 	.word	0x08003135
 8002f20:	08003135 	.word	0x08003135
 8002f24:	08003135 	.word	0x08003135
 8002f28:	08003135 	.word	0x08003135
 8002f2c:	08003135 	.word	0x08003135
 8002f30:	08003135 	.word	0x08003135
 8002f34:	080030a7 	.word	0x080030a7
 8002f38:	08003135 	.word	0x08003135
 8002f3c:	08003135 	.word	0x08003135
 8002f40:	080030e1 	.word	0x080030e1
 8002f44:	08003135 	.word	0x08003135
 8002f48:	08003135 	.word	0x08003135
 8002f4c:	08003135 	.word	0x08003135
 8002f50:	08003135 	.word	0x08003135
 8002f54:	08003135 	.word	0x08003135
 8002f58:	08003135 	.word	0x08003135
 8002f5c:	08003135 	.word	0x08003135
 8002f60:	08003135 	.word	0x08003135
 8002f64:	08003135 	.word	0x08003135
 8002f68:	08003135 	.word	0x08003135
 8002f6c:	08003135 	.word	0x08003135
 8002f70:	08003135 	.word	0x08003135
 8002f74:	08003135 	.word	0x08003135
 8002f78:	080030e9 	.word	0x080030e9
 8002f7c:	080030f7 	.word	0x080030f7
 8002f80:	08003135 	.word	0x08003135
 8002f84:	08003135 	.word	0x08003135
 8002f88:	08003135 	.word	0x08003135
 8002f8c:	08003135 	.word	0x08003135
 8002f90:	08003135 	.word	0x08003135
 8002f94:	08003135 	.word	0x08003135
 8002f98:	08003135 	.word	0x08003135
 8002f9c:	08003135 	.word	0x08003135
 8002fa0:	08003135 	.word	0x08003135
 8002fa4:	08003135 	.word	0x08003135
 8002fa8:	08003135 	.word	0x08003135
 8002fac:	08003135 	.word	0x08003135
 8002fb0:	08003135 	.word	0x08003135
 8002fb4:	080030ff 	.word	0x080030ff
 8002fb8:	08003135 	.word	0x08003135
 8002fbc:	08003135 	.word	0x08003135
 8002fc0:	08003135 	.word	0x08003135
 8002fc4:	08003135 	.word	0x08003135
 8002fc8:	08003135 	.word	0x08003135
 8002fcc:	08003135 	.word	0x08003135
 8002fd0:	08003135 	.word	0x08003135
 8002fd4:	08003135 	.word	0x08003135
 8002fd8:	08003135 	.word	0x08003135
 8002fdc:	08003135 	.word	0x08003135
 8002fe0:	08003135 	.word	0x08003135
 8002fe4:	08003135 	.word	0x08003135
 8002fe8:	08003135 	.word	0x08003135
 8002fec:	08003135 	.word	0x08003135
 8002ff0:	08003135 	.word	0x08003135
 8002ff4:	08003119 	.word	0x08003119
 8002ff8:	08003135 	.word	0x08003135
 8002ffc:	08003135 	.word	0x08003135
 8003000:	08003135 	.word	0x08003135
 8003004:	08003135 	.word	0x08003135
 8003008:	08003135 	.word	0x08003135
 800300c:	08003135 	.word	0x08003135
 8003010:	08003135 	.word	0x08003135
 8003014:	08003135 	.word	0x08003135
 8003018:	08003135 	.word	0x08003135
 800301c:	08003123 	.word	0x08003123
 8003020:	08003135 	.word	0x08003135
 8003024:	08003135 	.word	0x08003135
 8003028:	08003135 	.word	0x08003135
 800302c:	08003135 	.word	0x08003135
	  						case 0x05: //PID-0x05 Engine coolant temperature , range is -40 to 215 deg C , formula == A-40
	  							Current_Status.ECT = RxData[3] - 40;
 8003030:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <Start_CAN_Task+0xa58>)
 8003032:	78db      	ldrb	r3, [r3, #3]
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b28      	subs	r3, #40	; 0x28
 8003038:	b29a      	uxth	r2, r3
 800303a:	4b5f      	ldr	r3, [pc, #380]	; (80031b8 <Start_CAN_Task+0xa50>)
 800303c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	  							break;
 8003040:	e079      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x0B: // PID-0x0B , MAP , range is 0 to 255 kPa , Formula == A
	  							Current_Status.MAP = RxData[3];
 8003042:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <Start_CAN_Task+0xa58>)
 8003044:	78db      	ldrb	r3, [r3, #3]
 8003046:	b21a      	sxth	r2, r3
 8003048:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <Start_CAN_Task+0xa50>)
 800304a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	  							break;
 800304e:	e072      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x0C: // PID-0x0C , RPM  , range is 0 to 16383.75 rpm , Formula == 256A+B / 4
	  							Current_Status.RPM = (uint16_t)((RxData[4] << 8) + (RxData[3] & 0x00ff));
 8003050:	4b5b      	ldr	r3, [pc, #364]	; (80031c0 <Start_CAN_Task+0xa58>)
 8003052:	791b      	ldrb	r3, [r3, #4]
 8003054:	b29b      	uxth	r3, r3
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	b29a      	uxth	r2, r3
 800305a:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <Start_CAN_Task+0xa58>)
 800305c:	78db      	ldrb	r3, [r3, #3]
 800305e:	b29b      	uxth	r3, r3
 8003060:	4413      	add	r3, r2
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b54      	ldr	r3, [pc, #336]	; (80031b8 <Start_CAN_Task+0xa50>)
 8003066:	801a      	strh	r2, [r3, #0]
	  							break;
 8003068:	e065      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x0D: //PID-0x0D , Vehicle speed , range is 0 to 255 km/h , formula == A
	  							Current_Status.LF_SPEED = RxData[3];
 800306a:	4b55      	ldr	r3, [pc, #340]	; (80031c0 <Start_CAN_Task+0xa58>)
 800306c:	78db      	ldrb	r3, [r3, #3]
 800306e:	b29a      	uxth	r2, r3
 8003070:	4b51      	ldr	r3, [pc, #324]	; (80031b8 <Start_CAN_Task+0xa50>)
 8003072:	859a      	strh	r2, [r3, #44]	; 0x2c
	  							break;
 8003074:	e05f      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x0E: //PID-0x0E , Ignition Timing advance, range is -64 to 63.5 BTDC , formula == A/2 - 64
	  							Current_Status.IGN_TIM = RxData[3] / 2 - 64;
 8003076:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <Start_CAN_Task+0xa58>)
 8003078:	78db      	ldrb	r3, [r3, #3]
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b40      	subs	r3, #64	; 0x40
 8003082:	b29a      	uxth	r2, r3
 8003084:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <Start_CAN_Task+0xa50>)
 8003086:	835a      	strh	r2, [r3, #26]
	  							break;
 8003088:	e055      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x0F: //PID-0x0F , Inlet air temperature , range is -40 to 215 deg C, formula == A-40
	  							Current_Status.IAT = RxData[3] - 40;
 800308a:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <Start_CAN_Task+0xa58>)
 800308c:	78db      	ldrb	r3, [r3, #3]
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b28      	subs	r3, #40	; 0x28
 8003092:	b29a      	uxth	r2, r3
 8003094:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <Start_CAN_Task+0xa50>)
 8003096:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	  							break;
 800309a:	e04c      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x11: // PID-0x11 , TPS percentage, range is 0 to 100 percent, formula == 100/256 A
	  							Current_Status.TPS = 100/256 * RxData[3];
 800309c:	4b46      	ldr	r3, [pc, #280]	; (80031b8 <Start_CAN_Task+0xa50>)
 800309e:	2200      	movs	r2, #0
 80030a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	  							break;
 80030a4:	e047      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x1C: // PID-0x1C obd standard
	  							break;
	  						case 0x20: // PID-0x20 PIDs supported [21-40]
	  							break;
	  						case 0x22: // PID-0x22 Fuel /Pressure (Relative to manifold vacuum) , range is 0 to 5177.265 kPa , formula == 0.079(256A+B)
	  							Current_Status.FUELP = 0.079 * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));
 80030a6:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <Start_CAN_Task+0xa58>)
 80030a8:	791b      	ldrb	r3, [r3, #4]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	4a43      	ldr	r2, [pc, #268]	; (80031c0 <Start_CAN_Task+0xa58>)
 80030b4:	78d2      	ldrb	r2, [r2, #3]
 80030b6:	4413      	add	r3, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd fa43 	bl	8000544 <__aeabi_i2d>
 80030be:	a33c      	add	r3, pc, #240	; (adr r3, 80031b0 <Start_CAN_Task+0xa48>)
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	f7fd faa8 	bl	8000618 <__aeabi_dmul>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4610      	mov	r0, r2
 80030ce:	4619      	mov	r1, r3
 80030d0:	f7fd fcb4 	bl	8000a3c <__aeabi_d2uiz>
 80030d4:	4603      	mov	r3, r0
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <Start_CAN_Task+0xa50>)
 80030da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	  							break;
 80030de:	e02a      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x25: // PID-0x25 O2 sensor2, AB fuel/air equivalence ratio, CD voltage ,  2/65536(256A +B) ,8/65536(256C+D) , range is 0 to <2 and 0 to >8V
	  							Current_Status.LAMBDA2 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 80030e0:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <Start_CAN_Task+0xa50>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	84da      	strh	r2, [r3, #38]	; 0x26
	  							break;
 80030e6:	e026      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x33: // PID-0x33 Absolute Barometric pressure , range is 0 to 255 kPa , formula == A
	  							Current_Status.BARO = RxData[3];
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <Start_CAN_Task+0xa58>)
 80030ea:	78db      	ldrb	r3, [r3, #3]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <Start_CAN_Task+0xa50>)
 80030f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	  							break;
 80030f4:	e01f      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x34: // PID-0x24 O2 sensor2, AB: fuel/air equivalence ratio, CD: voltage ,  Formula == (2/65536)(256A +B) , 8/65536(256C+D) , Range is 0 to <2 and 0 to >8V
	  							Current_Status.LAMBDA1 = (2 / 65536) * (256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff));// , 8 / 65536 * (256 * (uint16_t)(RxData[5] << 8) + (RxData[6] & 0x00ff));
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <Start_CAN_Task+0xa50>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	849a      	strh	r2, [r3, #36]	; 0x24
	  							break;
 80030fc:	e01b      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x40: // PIDs supported [41-60]
	  							break;
	  						case 0x42: // PID-0x42 control module voltage, 256A+B / 1000 , range is 0 to 65.535v
	  							Current_Status.BATT = 256 * (uint16_t)(RxData[4] << 8) + (RxData[3] & 0x00ff) / 1000;
 80030fe:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <Start_CAN_Task+0xa58>)
 8003100:	78db      	ldrb	r3, [r3, #3]
 8003102:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <Start_CAN_Task+0xa5c>)
 8003104:	fb82 1203 	smull	r1, r2, r2, r3
 8003108:	1192      	asrs	r2, r2, #6
 800310a:	17db      	asrs	r3, r3, #31
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	b29a      	uxth	r2, r3
 8003110:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <Start_CAN_Task+0xa50>)
 8003112:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	  							break;
 8003116:	e00e      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x46: // PID-0x46 Ambient Air Temperature , range is -40 to 215 deg C , formula == A-40
	  							break;
	  						case 0x52: // PID-0x52 Ethanol fuel % , range is 0 to 100% , formula == (100/255)A
	  							Current_Status.ETHANOL = 100 / 255 * RxData[3];
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <Start_CAN_Task+0xa50>)
 800311a:	2200      	movs	r2, #0
 800311c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	  							break;
 8003120:	e009      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x5C: // PID-0x5C Engine oil temperature , range is -40 to 210 deg C , formula == A-40
	  							Current_Status.OILT = RxData[3] - 40;
 8003122:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <Start_CAN_Task+0xa58>)
 8003124:	78db      	ldrb	r3, [r3, #3]
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b28      	subs	r3, #40	; 0x28
 800312a:	b29a      	uxth	r2, r3
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <Start_CAN_Task+0xa50>)
 800312e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	  							break;
 8003132:	e000      	b.n	8003136 <Start_CAN_Task+0x9ce>
	  						case 0x60: // PIDs supported [61-80]
	  							break;
	  						default:
	  							break;
 8003134:	bf00      	nop
	  					}
	  					HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 8003136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800313a:	4823      	ldr	r0, [pc, #140]	; (80031c8 <Start_CAN_Task+0xa60>)
 800313c:	f002 ff37 	bl	8005fae <HAL_GPIO_TogglePin>
	  				}

	  				Current_Status.RPM_100 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 100);
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <Start_CAN_Task+0xa50>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314c:	2164      	movs	r1, #100	; 0x64
 800314e:	2000      	movs	r0, #0
 8003150:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80031cc <Start_CAN_Task+0xa64>
 8003154:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80031d0 <Start_CAN_Task+0xa68>
 8003158:	eeb0 0a67 	vmov.f32	s0, s15
 800315c:	f7ff fa98 	bl	8002690 <mapInt>
 8003160:	4603      	mov	r3, r0
 8003162:	b29a      	uxth	r2, r3
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <Start_CAN_Task+0xa50>)
 8003166:	805a      	strh	r2, [r3, #2]
	  				Current_Status.RPM_100 = Current_Status.RPM_100 >= 100 ? 100 : Current_Status.RPM_100;
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <Start_CAN_Task+0xa50>)
 800316a:	885b      	ldrh	r3, [r3, #2]
 800316c:	2b64      	cmp	r3, #100	; 0x64
 800316e:	bf28      	it	cs
 8003170:	2364      	movcs	r3, #100	; 0x64
 8003172:	b29a      	uxth	r2, r3
 8003174:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <Start_CAN_Task+0xa50>)
 8003176:	805a      	strh	r2, [r3, #2]
	  				Current_Status.RPM_180 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 180);
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <Start_CAN_Task+0xa50>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003184:	21b4      	movs	r1, #180	; 0xb4
 8003186:	2000      	movs	r0, #0
 8003188:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80031cc <Start_CAN_Task+0xa64>
 800318c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80031d0 <Start_CAN_Task+0xa68>
 8003190:	eeb0 0a67 	vmov.f32	s0, s15
 8003194:	f7ff fa7c 	bl	8002690 <mapInt>
 8003198:	4603      	mov	r3, r0
 800319a:	b29a      	uxth	r2, r3
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <Start_CAN_Task+0xa50>)
 800319e:	809a      	strh	r2, [r3, #4]
	  				Current_Status.RPM_180 = Current_Status.RPM_180 >= 180 ? 810 : Current_Status.RPM_180;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <Start_CAN_Task+0xa50>)
 80031a2:	889b      	ldrh	r3, [r3, #4]
 80031a4:	2bb3      	cmp	r3, #179	; 0xb3
 80031a6:	d815      	bhi.n	80031d4 <Start_CAN_Task+0xa6c>
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <Start_CAN_Task+0xa50>)
 80031aa:	889b      	ldrh	r3, [r3, #4]
 80031ac:	e014      	b.n	80031d8 <Start_CAN_Task+0xa70>
 80031ae:	bf00      	nop
 80031b0:	10624dd3 	.word	0x10624dd3
 80031b4:	3fb43958 	.word	0x3fb43958
 80031b8:	2000a504 	.word	0x2000a504
 80031bc:	2000b0fc 	.word	0x2000b0fc
 80031c0:	2000b080 	.word	0x2000b080
 80031c4:	10624dd3 	.word	0x10624dd3
 80031c8:	40022400 	.word	0x40022400
 80031cc:	45fa0000 	.word	0x45fa0000
 80031d0:	00000000 	.word	0x00000000
 80031d4:	f240 332a 	movw	r3, #810	; 0x32a
 80031d8:	4a30      	ldr	r2, [pc, #192]	; (800329c <Start_CAN_Task+0xb34>)
 80031da:	8093      	strh	r3, [r2, #4]
	  				Current_Status.RPM_270 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 270);
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <Start_CAN_Task+0xb34>)
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80031ec:	2000      	movs	r0, #0
 80031ee:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 80032a0 <Start_CAN_Task+0xb38>
 80031f2:	eddf 0a2c 	vldr	s1, [pc, #176]	; 80032a4 <Start_CAN_Task+0xb3c>
 80031f6:	eeb0 0a67 	vmov.f32	s0, s15
 80031fa:	f7ff fa49 	bl	8002690 <mapInt>
 80031fe:	4603      	mov	r3, r0
 8003200:	b29a      	uxth	r2, r3
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <Start_CAN_Task+0xb34>)
 8003204:	811a      	strh	r2, [r3, #8]
	  				Current_Status.RPM_270 = Current_Status.RPM_270 >= 270 ? 270 : Current_Status.RPM_270;
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <Start_CAN_Task+0xb34>)
 8003208:	891b      	ldrh	r3, [r3, #8]
 800320a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800320e:	bf28      	it	cs
 8003210:	f44f 7387 	movcs.w	r3, #270	; 0x10e
 8003214:	b29a      	uxth	r2, r3
 8003216:	4b21      	ldr	r3, [pc, #132]	; (800329c <Start_CAN_Task+0xb34>)
 8003218:	811a      	strh	r2, [r3, #8]
	  				Current_Status.RPM_240 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 240);
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <Start_CAN_Task+0xb34>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003226:	21f0      	movs	r1, #240	; 0xf0
 8003228:	2000      	movs	r0, #0
 800322a:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80032a0 <Start_CAN_Task+0xb38>
 800322e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80032a4 <Start_CAN_Task+0xb3c>
 8003232:	eeb0 0a67 	vmov.f32	s0, s15
 8003236:	f7ff fa2b 	bl	8002690 <mapInt>
 800323a:	4603      	mov	r3, r0
 800323c:	b29a      	uxth	r2, r3
 800323e:	4b17      	ldr	r3, [pc, #92]	; (800329c <Start_CAN_Task+0xb34>)
 8003240:	80da      	strh	r2, [r3, #6]
	  				Current_Status.RPM_240 = Current_Status.RPM_240 >= 240 ? 240 : Current_Status.RPM_240;
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <Start_CAN_Task+0xb34>)
 8003244:	88db      	ldrh	r3, [r3, #6]
 8003246:	2bf0      	cmp	r3, #240	; 0xf0
 8003248:	bf28      	it	cs
 800324a:	23f0      	movcs	r3, #240	; 0xf0
 800324c:	b29a      	uxth	r2, r3
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <Start_CAN_Task+0xb34>)
 8003250:	80da      	strh	r2, [r3, #6]
	  				Current_Status.RPM_360 = mapInt(Current_Status.RPM, 0, LCD_RPM_HIGH, 0, 360);
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <Start_CAN_Task+0xb34>)
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003262:	2000      	movs	r0, #0
 8003264:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 80032a0 <Start_CAN_Task+0xb38>
 8003268:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80032a4 <Start_CAN_Task+0xb3c>
 800326c:	eeb0 0a67 	vmov.f32	s0, s15
 8003270:	f7ff fa0e 	bl	8002690 <mapInt>
 8003274:	4603      	mov	r3, r0
 8003276:	b29a      	uxth	r2, r3
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <Start_CAN_Task+0xb34>)
 800327a:	815a      	strh	r2, [r3, #10]
	  				Current_Status.RPM_360 = Current_Status.RPM_360 >= 360 ? 360 : Current_Status.RPM_360;
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <Start_CAN_Task+0xb34>)
 800327e:	895b      	ldrh	r3, [r3, #10]
 8003280:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8003284:	bf28      	it	cs
 8003286:	f44f 73b4 	movcs.w	r3, #360	; 0x168
 800328a:	b29a      	uxth	r2, r3
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <Start_CAN_Task+0xb34>)
 800328e:	815a      	strh	r2, [r3, #10]

	  				//HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
	  			}

	  			osDelay(1);
 8003290:	2001      	movs	r0, #1
 8003292:	f008 ff96 	bl	800c1c2 <osDelay>
	  if (CAN_ENABLED) {
 8003296:	f7ff ba6f 	b.w	8002778 <Start_CAN_Task+0x10>
 800329a:	bf00      	nop
 800329c:	2000a504 	.word	0x2000a504
 80032a0:	45fa0000 	.word	0x45fa0000
 80032a4:	00000000 	.word	0x00000000

080032a8 <Start_BTN_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BTN_Task */
void Start_BTN_Task(void *argument)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BTN_Task */
  /* Infinite loop */
  for(;;)
  {
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 80032b0:	2104      	movs	r1, #4
 80032b2:	483d      	ldr	r0, [pc, #244]	; (80033a8 <Start_BTN_Task+0x100>)
 80032b4:	f002 fe4a 	bl	8005f4c <HAL_GPIO_ReadPin>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <Start_BTN_Task+0x104>)
 80032be:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		Current_Status.BTN_TOP_LEFT = HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin);
 80032c2:	2140      	movs	r1, #64	; 0x40
 80032c4:	483a      	ldr	r0, [pc, #232]	; (80033b0 <Start_BTN_Task+0x108>)
 80032c6:	f002 fe41 	bl	8005f4c <HAL_GPIO_ReadPin>
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <Start_BTN_Task+0x104>)
 80032d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

		//Current_Status.RPM = Current_Status.LCD_BRIGHTNESS;
		Current_Status.IND_LEFT = Current_Status.BTN_TOP_LEFT;
 80032d4:	4b35      	ldr	r3, [pc, #212]	; (80033ac <Start_BTN_Task+0x104>)
 80032d6:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80032da:	b29a      	uxth	r2, r3
 80032dc:	4b33      	ldr	r3, [pc, #204]	; (80033ac <Start_BTN_Task+0x104>)
 80032de:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
		Current_Status.IND_RIGHT = Current_Status.BTN_TOP_RIGHT;
 80032e2:	4b32      	ldr	r3, [pc, #200]	; (80033ac <Start_BTN_Task+0x104>)
 80032e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	4b30      	ldr	r3, [pc, #192]	; (80033ac <Start_BTN_Task+0x104>)
 80032ec:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		Current_Status.BTN_BOTTOM_RIGHT = HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin);
 80032f0:	2108      	movs	r1, #8
 80032f2:	482d      	ldr	r0, [pc, #180]	; (80033a8 <Start_BTN_Task+0x100>)
 80032f4:	f002 fe2a 	bl	8005f4c <HAL_GPIO_ReadPin>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <Start_BTN_Task+0x104>)
 80032fe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		Current_Status.BTN_BOTTOM_LEFT = HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin);
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	482a      	ldr	r0, [pc, #168]	; (80033b0 <Start_BTN_Task+0x108>)
 8003306:	f002 fe21 	bl	8005f4c <HAL_GPIO_ReadPin>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <Start_BTN_Task+0x104>)
 8003310:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

		if(Current_Status.BTN_BOTTOM_LEFT == 1 && Current_Status.LCD_BRIGHTNESS_CHANGED == 0)
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <Start_BTN_Task+0x104>)
 8003316:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800331a:	2b01      	cmp	r3, #1
 800331c:	d11a      	bne.n	8003354 <Start_BTN_Task+0xac>
 800331e:	4b23      	ldr	r3, [pc, #140]	; (80033ac <Start_BTN_Task+0x104>)
 8003320:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003324:	2b00      	cmp	r3, #0
 8003326:	d115      	bne.n	8003354 <Start_BTN_Task+0xac>
		{
		  Current_Status.LCD_BRIGHTNESS = Current_Status.LCD_BRIGHTNESS >= 50 ? Current_Status.LCD_BRIGHTNESS - 50 : Current_Status.LCD_BRIGHTNESS;
 8003328:	4b20      	ldr	r3, [pc, #128]	; (80033ac <Start_BTN_Task+0x104>)
 800332a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800332e:	2b31      	cmp	r3, #49	; 0x31
 8003330:	d905      	bls.n	800333e <Start_BTN_Task+0x96>
 8003332:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <Start_BTN_Task+0x104>)
 8003334:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003338:	3b32      	subs	r3, #50	; 0x32
 800333a:	b29b      	uxth	r3, r3
 800333c:	e002      	b.n	8003344 <Start_BTN_Task+0x9c>
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <Start_BTN_Task+0x104>)
 8003340:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <Start_BTN_Task+0x104>)
 8003346:	f8a2 3096 	strh.w	r3, [r2, #150]	; 0x96
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <Start_BTN_Task+0x104>)
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8003352:	e024      	b.n	800339e <Start_BTN_Task+0xf6>
		} else if(Current_Status.BTN_BOTTOM_RIGHT == 1 && Current_Status.LCD_BRIGHTNESS_CHANGED == 0)
 8003354:	4b15      	ldr	r3, [pc, #84]	; (80033ac <Start_BTN_Task+0x104>)
 8003356:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d11b      	bne.n	8003396 <Start_BTN_Task+0xee>
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <Start_BTN_Task+0x104>)
 8003360:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003364:	2b00      	cmp	r3, #0
 8003366:	d116      	bne.n	8003396 <Start_BTN_Task+0xee>
		{
		  Current_Status.LCD_BRIGHTNESS = Current_Status.LCD_BRIGHTNESS <= 1000 ? Current_Status.LCD_BRIGHTNESS + 50 : Current_Status.LCD_BRIGHTNESS;
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <Start_BTN_Task+0x104>)
 800336a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800336e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003372:	d805      	bhi.n	8003380 <Start_BTN_Task+0xd8>
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <Start_BTN_Task+0x104>)
 8003376:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800337a:	3332      	adds	r3, #50	; 0x32
 800337c:	b29b      	uxth	r3, r3
 800337e:	e002      	b.n	8003386 <Start_BTN_Task+0xde>
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <Start_BTN_Task+0x104>)
 8003382:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <Start_BTN_Task+0x104>)
 8003388:	f8a2 3096 	strh.w	r3, [r2, #150]	; 0x96
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <Start_BTN_Task+0x104>)
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8003394:	e003      	b.n	800339e <Start_BTN_Task+0xf6>
		}else{
		  Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <Start_BTN_Task+0x104>)
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		}


		osDelay(100);
 800339e:	2064      	movs	r0, #100	; 0x64
 80033a0:	f008 ff0f 	bl	800c1c2 <osDelay>
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 80033a4:	e784      	b.n	80032b0 <Start_BTN_Task+0x8>
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	2000a504 	.word	0x2000a504
 80033b0:	40022400 	.word	0x40022400

080033b4 <Start_BARO_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BARO_Task */
void Start_BARO_Task(void *argument)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BARO_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80033bc:	2001      	movs	r0, #1
 80033be:	f008 ff00 	bl	800c1c2 <osDelay>
 80033c2:	e7fb      	b.n	80033bc <Start_BARO_Task+0x8>

080033c4 <Start_RGB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RGB_Task */
void Start_RGB_Task(void *argument)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  if (RGB_ENABLED) {
	  		WS2812_Clear(0);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7fe faf3 	bl	80019b8 <WS2812_Clear>
	  		uint8_t RPMLED = 24;
 80033d2:	2318      	movs	r3, #24
 80033d4:	77fb      	strb	r3, [r7, #31]

	  		uint16_t lowRange = mapInt(Current_Status.RPM, PROTECTION_RPM_LOW, 0, RPMLED - PROTECTION_RPM_LED, 1);
 80033d6:	4b72      	ldr	r3, [pc, #456]	; (80035a0 <Start_RGB_Task+0x1dc>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	7ffb      	ldrb	r3, [r7, #31]
 80033e4:	3b06      	subs	r3, #6
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 80035a4 <Start_RGB_Task+0x1e0>
 80033ee:	eddf 0a6e 	vldr	s1, [pc, #440]	; 80035a8 <Start_RGB_Task+0x1e4>
 80033f2:	eeb0 0a67 	vmov.f32	s0, s15
 80033f6:	f7ff f94b 	bl	8002690 <mapInt>
 80033fa:	4603      	mov	r3, r0
 80033fc:	83bb      	strh	r3, [r7, #28]
	  		lowRange = lowRange > RPMLED - PROTECTION_RPM_LED ? RPMLED - PROTECTION_RPM_LED : lowRange;
 80033fe:	7ffb      	ldrb	r3, [r7, #31]
 8003400:	1f5a      	subs	r2, r3, #5
 8003402:	8bbb      	ldrh	r3, [r7, #28]
 8003404:	429a      	cmp	r2, r3
 8003406:	dc04      	bgt.n	8003412 <Start_RGB_Task+0x4e>
 8003408:	7ffb      	ldrb	r3, [r7, #31]
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b06      	subs	r3, #6
 800340e:	b29b      	uxth	r3, r3
 8003410:	e000      	b.n	8003414 <Start_RGB_Task+0x50>
 8003412:	8bbb      	ldrh	r3, [r7, #28]
 8003414:	83bb      	strh	r3, [r7, #28]
	  		lowRange = lowRange < 1 ? 1 : lowRange;
 8003416:	8bbb      	ldrh	r3, [r7, #28]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <Start_RGB_Task+0x5c>
 800341c:	8bbb      	ldrh	r3, [r7, #28]
 800341e:	e000      	b.n	8003422 <Start_RGB_Task+0x5e>
 8003420:	2301      	movs	r3, #1
 8003422:	83bb      	strh	r3, [r7, #28]

	  		for (int i = 1; i <= lowRange ; i++) {
 8003424:	2301      	movs	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
 8003428:	e029      	b.n	800347e <Start_RGB_Task+0xba>
	  			WS2812_RGB_t color;
	  			if(Current_Status.ENGINE_PROTECTION == 1)
 800342a:	4b5d      	ldr	r3, [pc, #372]	; (80035a0 <Start_RGB_Task+0x1dc>)
 800342c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d106      	bne.n	8003442 <Start_RGB_Task+0x7e>
	  			{
	  				color.red = 255;
 8003434:	23ff      	movs	r3, #255	; 0xff
 8003436:	753b      	strb	r3, [r7, #20]
	  				color.green = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	757b      	strb	r3, [r7, #21]
	  				color.blue = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	75bb      	strb	r3, [r7, #22]
 8003440:	e012      	b.n	8003468 <Start_RGB_Task+0xa4>
	  			} else {
	  				color.red = (int) (0 * Current_Status.LED_BRIGHTNESS / 100);
 8003442:	2300      	movs	r3, #0
 8003444:	753b      	strb	r3, [r7, #20]
	  				color.green = (int) (255 * Current_Status.LED_BRIGHTNESS / 100);
 8003446:	4b56      	ldr	r3, [pc, #344]	; (80035a0 <Start_RGB_Task+0x1dc>)
 8003448:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800344c:	461a      	mov	r2, r3
 800344e:	4613      	mov	r3, r2
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	4a55      	ldr	r2, [pc, #340]	; (80035ac <Start_RGB_Task+0x1e8>)
 8003456:	fb82 1203 	smull	r1, r2, r2, r3
 800345a:	1152      	asrs	r2, r2, #5
 800345c:	17db      	asrs	r3, r3, #31
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	757b      	strb	r3, [r7, #21]
	  				color.blue = (int) (0 * Current_Status.LED_BRIGHTNESS / 100);
 8003464:	2300      	movs	r3, #0
 8003466:	75bb      	strb	r3, [r7, #22]
	  			}
	  			WS2812_One_RGB((RPMLED - i) + (LED_NUMBER - RPMLED), color, 0);
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 800346e:	2200      	movs	r2, #0
 8003470:	6979      	ldr	r1, [r7, #20]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe fad2 	bl	8001a1c <WS2812_One_RGB>
	  		for (int i = 1; i <= lowRange ; i++) {
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	3301      	adds	r3, #1
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	8bbb      	ldrh	r3, [r7, #28]
 8003480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003482:	429a      	cmp	r2, r3
 8003484:	ddd1      	ble.n	800342a <Start_RGB_Task+0x66>
	  		}

	  		if(Current_Status.RPM > PROTECTION_RPM_LOW)
 8003486:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <Start_RGB_Task+0x1dc>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	f641 1264 	movw	r2, #6500	; 0x1964
 800348e:	4293      	cmp	r3, r2
 8003490:	d945      	bls.n	800351e <Start_RGB_Task+0x15a>
	  		{
	  			uint16_t highRange = mapInt(Current_Status.RPM, PROTECTION_RPM_HIGH, PROTECTION_RPM_LOW, PROTECTION_RPM_LED, 1);
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <Start_RGB_Task+0x1dc>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349e:	2101      	movs	r1, #1
 80034a0:	2006      	movs	r0, #6
 80034a2:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80035a8 <Start_RGB_Task+0x1e4>
 80034a6:	eddf 0a42 	vldr	s1, [pc, #264]	; 80035b0 <Start_RGB_Task+0x1ec>
 80034aa:	eeb0 0a67 	vmov.f32	s0, s15
 80034ae:	f7ff f8ef 	bl	8002690 <mapInt>
 80034b2:	4603      	mov	r3, r0
 80034b4:	837b      	strh	r3, [r7, #26]

	  			 Current_Status.GPS_SATTELITES = highRange;
 80034b6:	4a3a      	ldr	r2, [pc, #232]	; (80035a0 <Start_RGB_Task+0x1dc>)
 80034b8:	8b7b      	ldrh	r3, [r7, #26]
 80034ba:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
	  			for (int i = 1; i <= highRange; i++) {
 80034be:	2301      	movs	r3, #1
 80034c0:	623b      	str	r3, [r7, #32]
 80034c2:	e028      	b.n	8003516 <Start_RGB_Task+0x152>
	  				WS2812_RGB_t color;
	  				color.red = (int) (255 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <Start_RGB_Task+0x1dc>)
 80034c6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d00e      	beq.n	80034ec <Start_RGB_Task+0x128>
 80034ce:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <Start_RGB_Task+0x1dc>)
 80034d0:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80034d4:	461a      	mov	r2, r3
 80034d6:	4613      	mov	r3, r2
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	4a33      	ldr	r2, [pc, #204]	; (80035ac <Start_RGB_Task+0x1e8>)
 80034de:	fb82 1203 	smull	r1, r2, r2, r3
 80034e2:	1152      	asrs	r2, r2, #5
 80034e4:	17db      	asrs	r3, r3, #31
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e000      	b.n	80034ee <Start_RGB_Task+0x12a>
 80034ec:	23ff      	movs	r3, #255	; 0xff
 80034ee:	743b      	strb	r3, [r7, #16]
	  				color.green = (int) (0 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 80034f0:	2300      	movs	r3, #0
 80034f2:	747b      	strb	r3, [r7, #17]
	  				color.blue = (int) (0 * (Current_Status.ENGINE_PROTECTION == 1 ? 100 : Current_Status.LED_BRIGHTNESS) / 100);
 80034f4:	2300      	movs	r3, #0
 80034f6:	74bb      	strb	r3, [r7, #18]

	  				WS2812_One_RGB((PROTECTION_RPM_LED - i) + (LED_NUMBER - RPMLED), color, 0);
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f1c3 0206 	rsb	r2, r3, #6
 80034fe:	7ffb      	ldrb	r3, [r7, #31]
 8003500:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 8003504:	4413      	add	r3, r2
 8003506:	2200      	movs	r2, #0
 8003508:	6939      	ldr	r1, [r7, #16]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe fa86 	bl	8001a1c <WS2812_One_RGB>
	  			for (int i = 1; i <= highRange; i++) {
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	3301      	adds	r3, #1
 8003514:	623b      	str	r3, [r7, #32]
 8003516:	8b7b      	ldrh	r3, [r7, #26]
 8003518:	6a3a      	ldr	r2, [r7, #32]
 800351a:	429a      	cmp	r2, r3
 800351c:	ddd2      	ble.n	80034c4 <Start_RGB_Task+0x100>
	  //		WS2812_One_RGB(4, (WS2812_RGB_t){(255 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
	  //		WS2812_One_RGB(5, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
	  //
	  //		WS2812_One_RGB(18, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //red
	  //		WS2812_One_RGB(20, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
	  		if(Current_Status.IND_LEFT)
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <Start_RGB_Task+0x1dc>)
 8003520:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003524:	2b00      	cmp	r3, #0
 8003526:	d017      	beq.n	8003558 <Start_RGB_Task+0x194>
	  		{
	  			WS2812_One_RGB(21, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
 8003528:	2300      	movs	r3, #0
 800352a:	733b      	strb	r3, [r7, #12]
 800352c:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <Start_RGB_Task+0x1dc>)
 800352e:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 8003532:	461a      	mov	r2, r3
 8003534:	4613      	mov	r3, r2
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <Start_RGB_Task+0x1e8>)
 800353c:	fb82 1203 	smull	r1, r2, r2, r3
 8003540:	1152      	asrs	r2, r2, #5
 8003542:	17db      	asrs	r3, r3, #31
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	737b      	strb	r3, [r7, #13]
 800354a:	2300      	movs	r3, #0
 800354c:	73bb      	strb	r3, [r7, #14]
 800354e:	2200      	movs	r2, #0
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	2015      	movs	r0, #21
 8003554:	f7fe fa62 	bl	8001a1c <WS2812_One_RGB>
	  		}
	  		if(Current_Status.IND_RIGHT)
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <Start_RGB_Task+0x1dc>)
 800355a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d017      	beq.n	8003592 <Start_RGB_Task+0x1ce>
			{
				WS2812_One_RGB(0, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
 8003562:	2300      	movs	r3, #0
 8003564:	723b      	strb	r3, [r7, #8]
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <Start_RGB_Task+0x1dc>)
 8003568:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 800356c:	461a      	mov	r2, r3
 800356e:	4613      	mov	r3, r2
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <Start_RGB_Task+0x1e8>)
 8003576:	fb82 1203 	smull	r1, r2, r2, r3
 800357a:	1152      	asrs	r2, r2, #5
 800357c:	17db      	asrs	r3, r3, #31
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	727b      	strb	r3, [r7, #9]
 8003584:	2300      	movs	r3, #0
 8003586:	72bb      	strb	r3, [r7, #10]
 8003588:	2200      	movs	r2, #0
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	2000      	movs	r0, #0
 800358e:	f7fe fa45 	bl	8001a1c <WS2812_One_RGB>
			}

	  		WS2812_Refresh();
 8003592:	f7fe fa01 	bl	8001998 <WS2812_Refresh>
	  		osDelay(84);
 8003596:	2054      	movs	r0, #84	; 0x54
 8003598:	f008 fe13 	bl	800c1c2 <osDelay>
	  if (RGB_ENABLED) {
 800359c:	e716      	b.n	80033cc <Start_RGB_Task+0x8>
 800359e:	bf00      	nop
 80035a0:	2000a504 	.word	0x2000a504
 80035a4:	00000000 	.word	0x00000000
 80035a8:	45cb2000 	.word	0x45cb2000
 80035ac:	51eb851f 	.word	0x51eb851f
 80035b0:	45f3c000 	.word	0x45f3c000

080035b4 <Start_BH1750_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BH1750_Task */
void Start_BH1750_Task(void *argument)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BH1750_Task */
	uint8_t changInProgress = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
	  				changInProgress = 0;
	  			}
	  			//Current_Status.RPM = Current_Status.BH1750_LUX;
	  			osDelay(200);
	  		} else {
	  			osDelay(60000);
 80035c0:	f64e 2060 	movw	r0, #60000	; 0xea60
 80035c4:	f008 fdfd 	bl	800c1c2 <osDelay>
	  if (BH1750_ENABLED) {
 80035c8:	e7fa      	b.n	80035c0 <Start_BH1750_Task+0xc>

080035ca <Start_LPS22_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LPS22_Task */
void Start_LPS22_Task(void *argument)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LPS22_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80035d2:	2001      	movs	r0, #1
 80035d4:	f008 fdf5 	bl	800c1c2 <osDelay>
 80035d8:	e7fb      	b.n	80035d2 <Start_LPS22_Task+0x8>
	...

080035dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a04      	ldr	r2, [pc, #16]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035ee:	f000 feeb 	bl	80043c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40001000 	.word	0x40001000

08003600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003604:	b672      	cpsid	i
}
 8003606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003608:	e7fe      	b.n	8003608 <Error_Handler+0x8>
	...

0800360c <SDRAM_delay>:

SDRAM_HandleTypeDef hsdram1;
FMC_SDRAM_CommandTypeDef command;

void SDRAM_delay(__IO uint32_t nCount)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
	
  for(index = (100000 * nCount); index != 0; index--);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <SDRAM_delay+0x34>)
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	e002      	b.n	800362a <SDRAM_delay+0x1e>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3b01      	subs	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f9      	bne.n	8003624 <SDRAM_delay+0x18>

}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	000186a0 	.word	0x000186a0

08003644 <SDRAM_Initialization_Sequence>:


void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
  
  /* Configure a clock configuration enable command */
  Command->CommandMode 					= FMC_SDRAM_CMD_CLK_ENABLE;	// ����SDRAMʱ�� 
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK; 	// ѡ��Ҫ���Ƶ�����
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2208      	movs	r2, #8
 800365c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2201      	movs	r2, #1
 8003662:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 800366a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f005 ffc2 	bl	80095fa <HAL_SDRAM_SendCommand>
  SDRAM_delay(1);		// ��ʱ�ȴ�
 8003676:	2001      	movs	r0, #1
 8003678:	f7ff ffc8 	bl	800360c <SDRAM_delay>
  
  /* Configure a PALL (precharge all) command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_PALL;		// Ԥ�������
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2202      	movs	r2, #2
 8003680:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2208      	movs	r2, #8
 8003686:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2201      	movs	r2, #1
 800368c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2200      	movs	r2, #0
 8003692:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // ���Ϳ���ָ��
 8003694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f005 ffad 	bl	80095fa <HAL_SDRAM_SendCommand>
  
  /* Configure a Auto-Refresh command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// ʹ���Զ�ˢ��
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2203      	movs	r2, #3
 80036a4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;          // ѡ��Ҫ���Ƶ�����
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2208      	movs	r2, #8
 80036aa:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber			= 8;                                // �Զ�ˢ�´���
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2208      	movs	r2, #8
 80036b0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80036b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f005 ff9b 	bl	80095fa <HAL_SDRAM_SendCommand>
  
  /* Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 80036c4:	f240 2331 	movw	r3, #561	; 0x231
 80036c8:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode					= FMC_SDRAM_CMD_LOAD_MODE;	// ����ģʽ�Ĵ�������
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2204      	movs	r2, #4
 80036ce:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2208      	movs	r2, #8
 80036d4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2201      	movs	r2, #1
 80036da:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= tmpmrd;
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	60da      	str	r2, [r3, #12]
  
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80036e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f005 ff86 	bl	80095fa <HAL_SDRAM_SendCommand>
  
  hsdram->Instance->SDRTR |= ((uint32_t)((1386)<< 1));	// ����ˢ�¼����� 
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	f443 632d 	orr.w	r3, r3, #2768	; 0xad0
 80036fc:	f043 0304 	orr.w	r3, r3, #4
 8003700:	6153      	str	r3, [r2, #20]
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_MspInit+0x54>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4a11      	ldr	r2, [pc, #68]	; (8003760 <HAL_MspInit+0x54>)
 800371c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003720:	6453      	str	r3, [r2, #68]	; 0x44
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <HAL_MspInit+0x54>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_MspInit+0x54>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <HAL_MspInit+0x54>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	; 0x40
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_MspInit+0x54>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	210f      	movs	r1, #15
 800374e:	f06f 0001 	mvn.w	r0, #1
 8003752:	f001 fca1 	bl	8005098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800

08003764 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	; 0x30
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 031c 	add.w	r3, r7, #28
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a4b      	ldr	r2, [pc, #300]	; (80038b0 <HAL_CAN_MspInit+0x14c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d13e      	bne.n	8003804 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003786:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <HAL_CAN_MspInit+0x150>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3301      	adds	r3, #1
 800378c:	4a49      	ldr	r2, [pc, #292]	; (80038b4 <HAL_CAN_MspInit+0x150>)
 800378e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003790:	4b48      	ldr	r3, [pc, #288]	; (80038b4 <HAL_CAN_MspInit+0x150>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10d      	bne.n	80037b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	4a45      	ldr	r2, [pc, #276]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 80037a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037a6:	6413      	str	r3, [r2, #64]	; 0x40
 80037a8:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	4a3e      	ldr	r2, [pc, #248]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 80037be:	f043 0302 	orr.w	r3, r3, #2
 80037c2:	6313      	str	r3, [r2, #48]	; 0x30
 80037c4:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037de:	2303      	movs	r3, #3
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80037e2:	2309      	movs	r3, #9
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e6:	f107 031c 	add.w	r3, r7, #28
 80037ea:	4619      	mov	r1, r3
 80037ec:	4833      	ldr	r0, [pc, #204]	; (80038bc <HAL_CAN_MspInit+0x158>)
 80037ee:	f002 fa01 	bl	8005bf4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2105      	movs	r1, #5
 80037f6:	2014      	movs	r0, #20
 80037f8:	f001 fc4e 	bl	8005098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80037fc:	2014      	movs	r0, #20
 80037fe:	f001 fc67 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003802:	e050      	b.n	80038a6 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2d      	ldr	r2, [pc, #180]	; (80038c0 <HAL_CAN_MspInit+0x15c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d14b      	bne.n	80038a6 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	4b29      	ldr	r3, [pc, #164]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a28      	ldr	r2, [pc, #160]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 8003818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800382a:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <HAL_CAN_MspInit+0x150>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a20      	ldr	r2, [pc, #128]	; (80038b4 <HAL_CAN_MspInit+0x150>)
 8003832:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003834:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <HAL_CAN_MspInit+0x150>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d10d      	bne.n	8003858 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 8003846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800384a:	6413      	str	r3, [r2, #64]	; 0x40
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 8003862:	f043 0302 	orr.w	r3, r3, #2
 8003866:	6313      	str	r3, [r2, #48]	; 0x30
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <HAL_CAN_MspInit+0x154>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003874:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003886:	2309      	movs	r3, #9
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388a:	f107 031c 	add.w	r3, r7, #28
 800388e:	4619      	mov	r1, r3
 8003890:	480a      	ldr	r0, [pc, #40]	; (80038bc <HAL_CAN_MspInit+0x158>)
 8003892:	f002 f9af 	bl	8005bf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003896:	2200      	movs	r2, #0
 8003898:	2105      	movs	r1, #5
 800389a:	2040      	movs	r0, #64	; 0x40
 800389c:	f001 fbfc 	bl	8005098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80038a0:	2040      	movs	r0, #64	; 0x40
 80038a2:	f001 fc15 	bl	80050d0 <HAL_NVIC_EnableIRQ>
}
 80038a6:	bf00      	nop
 80038a8:	3730      	adds	r7, #48	; 0x30
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40006400 	.word	0x40006400
 80038b4:	2000011c 	.word	0x2000011c
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40020400 	.word	0x40020400
 80038c0:	40006800 	.word	0x40006800

080038c4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0b      	ldr	r2, [pc, #44]	; (8003900 <HAL_CRC_MspInit+0x3c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10d      	bne.n	80038f2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_CRC_MspInit+0x40>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_CRC_MspInit+0x40>)
 80038e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_CRC_MspInit+0x40>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023000 	.word	0x40023000
 8003904:	40023800 	.word	0x40023800

08003908 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <HAL_DMA2D_MspInit+0x48>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d115      	bne.n	8003946 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <HAL_DMA2D_MspInit+0x4c>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <HAL_DMA2D_MspInit+0x4c>)
 8003924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <HAL_DMA2D_MspInit+0x4c>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2105      	movs	r1, #5
 800393a:	205a      	movs	r0, #90	; 0x5a
 800393c:	f001 fbac 	bl	8005098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003940:	205a      	movs	r0, #90	; 0x5a
 8003942:	f001 fbc5 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	4002b000 	.word	0x4002b000
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_I2C_MspInit+0x84>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d12b      	bne.n	80039d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <HAL_I2C_MspInit+0x88>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a17      	ldr	r2, [pc, #92]	; (80039e0 <HAL_I2C_MspInit+0x88>)
 8003984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <HAL_I2C_MspInit+0x88>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003996:	2330      	movs	r3, #48	; 0x30
 8003998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800399a:	2312      	movs	r3, #18
 800399c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800399e:	2301      	movs	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a2:	2303      	movs	r3, #3
 80039a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039a6:	2304      	movs	r3, #4
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039aa:	f107 0314 	add.w	r3, r7, #20
 80039ae:	4619      	mov	r1, r3
 80039b0:	480c      	ldr	r0, [pc, #48]	; (80039e4 <HAL_I2C_MspInit+0x8c>)
 80039b2:	f002 f91f 	bl	8005bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_I2C_MspInit+0x88>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <HAL_I2C_MspInit+0x88>)
 80039c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_I2C_MspInit+0x88>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80039d2:	bf00      	nop
 80039d4:	3728      	adds	r7, #40	; 0x28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40005800 	.word	0x40005800
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40021c00 	.word	0x40021c00

080039e8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b09a      	sub	sp, #104	; 0x68
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a04:	2230      	movs	r2, #48	; 0x30
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f02a fbaf 	bl	802e16c <memset>
  if(hltdc->Instance==LTDC)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a65      	ldr	r2, [pc, #404]	; (8003ba8 <HAL_LTDC_MspInit+0x1c0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	f040 80c2 	bne.w	8003b9e <HAL_LTDC_MspInit+0x1b6>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003a1e:	2332      	movs	r3, #50	; 0x32
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003a22:	2302      	movs	r3, #2
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003a26:	2300      	movs	r3, #0
 8003a28:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 fb38 	bl	80080a4 <HAL_RCCEx_PeriphCLKConfig>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003a3a:	f7ff fde1 	bl	8003600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
 8003a42:	4b5a      	ldr	r3, [pc, #360]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	4a59      	ldr	r2, [pc, #356]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4e:	4b57      	ldr	r3, [pc, #348]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a56:	623b      	str	r3, [r7, #32]
 8003a58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	4a52      	ldr	r2, [pc, #328]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	4a4b      	ldr	r2, [pc, #300]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a80:	f043 0320 	orr.w	r3, r3, #32
 8003a84:	6313      	str	r3, [r2, #48]	; 0x30
 8003a86:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	4b45      	ldr	r3, [pc, #276]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a44      	ldr	r2, [pc, #272]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b42      	ldr	r3, [pc, #264]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a3d      	ldr	r2, [pc, #244]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4a36      	ldr	r2, [pc, #216]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_LTDC_MspInit+0x1c4>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8003ae6:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8003aea:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af0:	2301      	movs	r3, #1
 8003af2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af4:	2303      	movs	r3, #3
 8003af6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003af8:	230e      	movs	r3, #14
 8003afa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003afc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b00:	4619      	mov	r1, r3
 8003b02:	482b      	ldr	r0, [pc, #172]	; (8003bb0 <HAL_LTDC_MspInit+0x1c8>)
 8003b04:	f002 f876 	bl	8005bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b0c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b12:	2301      	movs	r3, #1
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b1a:	230e      	movs	r3, #14
 8003b1c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b22:	4619      	mov	r1, r3
 8003b24:	4823      	ldr	r0, [pc, #140]	; (8003bb4 <HAL_LTDC_MspInit+0x1cc>)
 8003b26:	f002 f865 	bl	8005bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b32:	2301      	movs	r3, #1
 8003b34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003b3a:	2309      	movs	r3, #9
 8003b3c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b42:	4619      	mov	r1, r3
 8003b44:	481c      	ldr	r0, [pc, #112]	; (8003bb8 <HAL_LTDC_MspInit+0x1d0>)
 8003b46:	f002 f855 	bl	8005bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8003b4a:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8003b4e:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b50:	2302      	movs	r3, #2
 8003b52:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b54:	2301      	movs	r3, #1
 8003b56:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b5c:	230e      	movs	r3, #14
 8003b5e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b64:	4619      	mov	r1, r3
 8003b66:	4815      	ldr	r0, [pc, #84]	; (8003bbc <HAL_LTDC_MspInit+0x1d4>)
 8003b68:	f002 f844 	bl	8005bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8003b6c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003b70:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b76:	2301      	movs	r3, #1
 8003b78:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b7e:	230e      	movs	r3, #14
 8003b80:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b86:	4619      	mov	r1, r3
 8003b88:	480d      	ldr	r0, [pc, #52]	; (8003bc0 <HAL_LTDC_MspInit+0x1d8>)
 8003b8a:	f002 f833 	bl	8005bf4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2105      	movs	r1, #5
 8003b92:	2058      	movs	r0, #88	; 0x58
 8003b94:	f001 fa80 	bl	8005098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003b98:	2058      	movs	r0, #88	; 0x58
 8003b9a:	f001 fa99 	bl	80050d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003b9e:	bf00      	nop
 8003ba0:	3768      	adds	r7, #104	; 0x68
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40016800 	.word	0x40016800
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40022000 	.word	0x40022000
 8003bb4:	40021400 	.word	0x40021400
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40021c00 	.word	0x40021c00
 8003bc0:	40021800 	.word	0x40021800

08003bc4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08a      	sub	sp, #40	; 0x28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a28      	ldr	r2, [pc, #160]	; (8003c84 <HAL_SD_MspInit+0xc0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d14a      	bne.n	8003c7c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	4b27      	ldr	r3, [pc, #156]	; (8003c88 <HAL_SD_MspInit+0xc4>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	4a26      	ldr	r2, [pc, #152]	; (8003c88 <HAL_SD_MspInit+0xc4>)
 8003bf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_SD_MspInit+0xc4>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_SD_MspInit+0xc4>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_SD_MspInit+0xc4>)
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_SD_MspInit+0xc4>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_SD_MspInit+0xc4>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <HAL_SD_MspInit+0xc4>)
 8003c28:	f043 0308 	orr.w	r3, r3, #8
 8003c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2e:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <HAL_SD_MspInit+0xc4>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003c3a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c40:	2302      	movs	r3, #2
 8003c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c44:	2301      	movs	r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c4c:	230c      	movs	r3, #12
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	4619      	mov	r1, r3
 8003c56:	480d      	ldr	r0, [pc, #52]	; (8003c8c <HAL_SD_MspInit+0xc8>)
 8003c58:	f001 ffcc 	bl	8005bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c64:	2301      	movs	r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003c6c:	230c      	movs	r3, #12
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c70:	f107 0314 	add.w	r3, r7, #20
 8003c74:	4619      	mov	r1, r3
 8003c76:	4806      	ldr	r0, [pc, #24]	; (8003c90 <HAL_SD_MspInit+0xcc>)
 8003c78:	f001 ffbc 	bl	8005bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003c7c:	bf00      	nop
 8003c7e:	3728      	adds	r7, #40	; 0x28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020800 	.word	0x40020800
 8003c90:	40020c00 	.word	0x40020c00

08003c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <HAL_TIM_Base_MspInit+0xc0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d13f      	bne.n	8003d26 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <HAL_TIM_Base_MspInit+0xc4>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <HAL_TIM_Base_MspInit+0xc4>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb6:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <HAL_TIM_Base_MspInit+0xc4>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003cc4:	4a26      	ldr	r2, [pc, #152]	; (8003d60 <HAL_TIM_Base_MspInit+0xcc>)
 8003cc6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003cc8:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003cca:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003cce:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cd0:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003cd2:	2240      	movs	r2, #64	; 0x40
 8003cd4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cd6:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ce2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cea:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cf2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003cfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d00:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003d08:	4814      	ldr	r0, [pc, #80]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003d0a:	f001 fa0b 	bl	8005124 <HAL_DMA_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003d14:	f7ff fc74 	bl	8003600 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24
 8003d1e:	4a0f      	ldr	r2, [pc, #60]	; (8003d5c <HAL_TIM_Base_MspInit+0xc8>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003d24:	e012      	b.n	8003d4c <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM13)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <HAL_TIM_Base_MspInit+0xd0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10d      	bne.n	8003d4c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003d30:	2300      	movs	r3, #0
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <HAL_TIM_Base_MspInit+0xc4>)
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	4a07      	ldr	r2, [pc, #28]	; (8003d58 <HAL_TIM_Base_MspInit+0xc4>)
 8003d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_TIM_Base_MspInit+0xc4>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	20009a64 	.word	0x20009a64
 8003d60:	40026428 	.word	0x40026428
 8003d64:	40001c00 	.word	0x40001c00

08003d68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0b      	ldr	r2, [pc, #44]	; (8003da4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10d      	bne.n	8003d96 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_TIM_PWM_MspInit+0x40>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <HAL_TIM_PWM_MspInit+0x40>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_TIM_PWM_MspInit+0x40>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40023800 	.word	0x40023800

08003dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a37      	ldr	r2, [pc, #220]	; (8003ea8 <HAL_TIM_MspPostInit+0xfc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d11f      	bne.n	8003e0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	4b36      	ldr	r3, [pc, #216]	; (8003eac <HAL_TIM_MspPostInit+0x100>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	4a35      	ldr	r2, [pc, #212]	; (8003eac <HAL_TIM_MspPostInit+0x100>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dde:	4b33      	ldr	r3, [pc, #204]	; (8003eac <HAL_TIM_MspPostInit+0x100>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003df4:	2302      	movs	r3, #2
 8003df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	4619      	mov	r1, r3
 8003e06:	482a      	ldr	r0, [pc, #168]	; (8003eb0 <HAL_TIM_MspPostInit+0x104>)
 8003e08:	f001 fef4 	bl	8005bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003e0c:	e047      	b.n	8003e9e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a28      	ldr	r2, [pc, #160]	; (8003eb4 <HAL_TIM_MspPostInit+0x108>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d11e      	bne.n	8003e56 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_TIM_MspPostInit+0x100>)
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_TIM_MspPostInit+0x100>)
 8003e22:	f043 0310 	orr.w	r3, r3, #16
 8003e26:	6313      	str	r3, [r2, #48]	; 0x30
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_TIM_MspPostInit+0x100>)
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e34:	2360      	movs	r3, #96	; 0x60
 8003e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e40:	2300      	movs	r3, #0
 8003e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e44:	2303      	movs	r3, #3
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	481a      	ldr	r0, [pc, #104]	; (8003eb8 <HAL_TIM_MspPostInit+0x10c>)
 8003e50:	f001 fed0 	bl	8005bf4 <HAL_GPIO_Init>
}
 8003e54:	e023      	b.n	8003e9e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM13)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_TIM_MspPostInit+0x110>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d11e      	bne.n	8003e9e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <HAL_TIM_MspPostInit+0x100>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	4a10      	ldr	r2, [pc, #64]	; (8003eac <HAL_TIM_MspPostInit+0x100>)
 8003e6a:	f043 0320 	orr.w	r3, r3, #32
 8003e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <HAL_TIM_MspPostInit+0x100>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	f003 0320 	and.w	r3, r3, #32
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e82:	2302      	movs	r3, #2
 8003e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003e8e:	2309      	movs	r3, #9
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e92:	f107 0314 	add.w	r3, r7, #20
 8003e96:	4619      	mov	r1, r3
 8003e98:	4809      	ldr	r0, [pc, #36]	; (8003ec0 <HAL_TIM_MspPostInit+0x114>)
 8003e9a:	f001 feab 	bl	8005bf4 <HAL_GPIO_Init>
}
 8003e9e:	bf00      	nop
 8003ea0:	3728      	adds	r7, #40	; 0x28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40020000 	.word	0x40020000
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40001c00 	.word	0x40001c00
 8003ec0:	40021400 	.word	0x40021400

08003ec4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003ed8:	4b3f      	ldr	r3, [pc, #252]	; (8003fd8 <HAL_FMC_MspInit+0x114>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d177      	bne.n	8003fd0 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8003ee0:	4b3d      	ldr	r3, [pc, #244]	; (8003fd8 <HAL_FMC_MspInit+0x114>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4b3c      	ldr	r3, [pc, #240]	; (8003fdc <HAL_FMC_MspInit+0x118>)
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	4a3b      	ldr	r2, [pc, #236]	; (8003fdc <HAL_FMC_MspInit+0x118>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6393      	str	r3, [r2, #56]	; 0x38
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_FMC_MspInit+0x118>)
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003f02:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003f06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f10:	2303      	movs	r3, #3
 8003f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f14:	230c      	movs	r3, #12
 8003f16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4830      	ldr	r0, [pc, #192]	; (8003fe0 <HAL_FMC_MspInit+0x11c>)
 8003f1e:	f001 fe69 	bl	8005bf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f22:	2301      	movs	r3, #1
 8003f24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f26:	2302      	movs	r3, #2
 8003f28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f32:	230c      	movs	r3, #12
 8003f34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f36:	1d3b      	adds	r3, r7, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	482a      	ldr	r0, [pc, #168]	; (8003fe4 <HAL_FMC_MspInit+0x120>)
 8003f3c:	f001 fe5a 	bl	8005bf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003f40:	f248 1337 	movw	r3, #33079	; 0x8137
 8003f44:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f52:	230c      	movs	r3, #12
 8003f54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4823      	ldr	r0, [pc, #140]	; (8003fe8 <HAL_FMC_MspInit+0x124>)
 8003f5c:	f001 fe4a 	bl	8005bf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003f60:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f64:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2302      	movs	r3, #2
 8003f68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f72:	230c      	movs	r3, #12
 8003f74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	481c      	ldr	r0, [pc, #112]	; (8003fec <HAL_FMC_MspInit+0x128>)
 8003f7c:	f001 fe3a 	bl	8005bf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f80:	23c0      	movs	r3, #192	; 0xc0
 8003f82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	2302      	movs	r3, #2
 8003f86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f90:	230c      	movs	r3, #12
 8003f92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f94:	1d3b      	adds	r3, r7, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4815      	ldr	r0, [pc, #84]	; (8003ff0 <HAL_FMC_MspInit+0x12c>)
 8003f9a:	f001 fe2b 	bl	8005bf4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003f9e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003fa2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fac:	2303      	movs	r3, #3
 8003fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	480e      	ldr	r0, [pc, #56]	; (8003ff4 <HAL_FMC_MspInit+0x130>)
 8003fba:	f001 fe1b 	bl	8005bf4 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 5, 0);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2105      	movs	r1, #5
 8003fc2:	2030      	movs	r0, #48	; 0x30
 8003fc4:	f001 f868 	bl	8005098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8003fc8:	2030      	movs	r0, #48	; 0x30
 8003fca:	f001 f881 	bl	80050d0 <HAL_NVIC_EnableIRQ>
 8003fce:	e000      	b.n	8003fd2 <HAL_FMC_MspInit+0x10e>
    return;
 8003fd0:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000120 	.word	0x20000120
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40021400 	.word	0x40021400
 8003fe4:	40020800 	.word	0x40020800
 8003fe8:	40021800 	.word	0x40021800
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40021c00 	.word	0x40021c00
 8003ff4:	40020c00 	.word	0x40020c00

08003ff8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004000:	f7ff ff60 	bl	8003ec4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08c      	sub	sp, #48	; 0x30
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800401c:	2200      	movs	r2, #0
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	2036      	movs	r0, #54	; 0x36
 8004022:	f001 f839 	bl	8005098 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004026:	2036      	movs	r0, #54	; 0x36
 8004028:	f001 f852 	bl	80050d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <HAL_InitTick+0xa4>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	4a1e      	ldr	r2, [pc, #120]	; (80040b0 <HAL_InitTick+0xa4>)
 8004036:	f043 0310 	orr.w	r3, r3, #16
 800403a:	6413      	str	r3, [r2, #64]	; 0x40
 800403c:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <HAL_InitTick+0xa4>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004048:	f107 0210 	add.w	r2, r7, #16
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f003 ffd8 	bl	8008008 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004058:	f003 ffc2 	bl	8007fe0 <HAL_RCC_GetPCLK1Freq>
 800405c:	4603      	mov	r3, r0
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <HAL_InitTick+0xa8>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	0c9b      	lsrs	r3, r3, #18
 800406c:	3b01      	subs	r3, #1
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_InitTick+0xac>)
 8004072:	4a12      	ldr	r2, [pc, #72]	; (80040bc <HAL_InitTick+0xb0>)
 8004074:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_InitTick+0xac>)
 8004078:	f240 32e7 	movw	r2, #999	; 0x3e7
 800407c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800407e:	4a0e      	ldr	r2, [pc, #56]	; (80040b8 <HAL_InitTick+0xac>)
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <HAL_InitTick+0xac>)
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408a:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_InitTick+0xac>)
 800408c:	2200      	movs	r2, #0
 800408e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004090:	4809      	ldr	r0, [pc, #36]	; (80040b8 <HAL_InitTick+0xac>)
 8004092:	f005 fadd 	bl	8009650 <HAL_TIM_Base_Init>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d104      	bne.n	80040a6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800409c:	4806      	ldr	r0, [pc, #24]	; (80040b8 <HAL_InitTick+0xac>)
 800409e:	f005 fb27 	bl	80096f0 <HAL_TIM_Base_Start_IT>
 80040a2:	4603      	mov	r3, r0
 80040a4:	e000      	b.n	80040a8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3730      	adds	r7, #48	; 0x30
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	431bde83 	.word	0x431bde83
 80040b8:	2000b124 	.word	0x2000b124
 80040bc:	40001000 	.word	0x40001000

080040c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80040c4:	f003 ffd2 	bl	800806c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040c8:	e7fe      	b.n	80040c8 <NMI_Handler+0x8>

080040ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ce:	e7fe      	b.n	80040ce <HardFault_Handler+0x4>

080040d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040d4:	e7fe      	b.n	80040d4 <MemManage_Handler+0x4>

080040d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040da:	e7fe      	b.n	80040da <BusFault_Handler+0x4>

080040dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040e0:	e7fe      	b.n	80040e0 <UsageFault_Handler+0x4>

080040e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80040f4:	4802      	ldr	r0, [pc, #8]	; (8004100 <CAN1_RX0_IRQHandler+0x10>)
 80040f6:	f000 fcdd 	bl	8004ab4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	2000b088 	.word	0x2000b088

08004104 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8004108:	4802      	ldr	r0, [pc, #8]	; (8004114 <FMC_IRQHandler+0x10>)
 800410a:	f005 fa52 	bl	80095b2 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	2000b0c8 	.word	0x2000b0c8

08004118 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <TIM6_DAC_IRQHandler+0x10>)
 800411e:	f005 fe37 	bl	8009d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	2000b124 	.word	0x2000b124

0800412c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	DMA_Callback();
 8004130:	f7fc fefc 	bl	8000f2c <DMA_Callback>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <DMA2_Stream1_IRQHandler+0x14>)
 8004136:	f001 f8fb 	bl	8005330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20009a64 	.word	0x20009a64

08004144 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004148:	4802      	ldr	r0, [pc, #8]	; (8004154 <CAN2_RX0_IRQHandler+0x10>)
 800414a:	f000 fcb3 	bl	8004ab4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	2000a66c 	.word	0x2000a66c

08004158 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <LTDC_IRQHandler+0x10>)
 800415e:	f003 f821 	bl	80071a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	2000a5c4 	.word	0x2000a5c4

0800416c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004170:	4802      	ldr	r0, [pc, #8]	; (800417c <DMA2D_IRQHandler+0x10>)
 8004172:	f001 fb9c 	bl	80058ae <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	2000b040 	.word	0x2000b040

08004180 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
	return 1;
 8004184:	2301      	movs	r3, #1
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <_kill>:

int _kill(int pid, int sig)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800419a:	f029 fe93 	bl	802dec4 <__errno>
 800419e:	4603      	mov	r3, r0
 80041a0:	2216      	movs	r2, #22
 80041a2:	601a      	str	r2, [r3, #0]
	return -1;
 80041a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <_exit>:

void _exit (int status)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041b8:	f04f 31ff 	mov.w	r1, #4294967295
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ffe7 	bl	8004190 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041c2:	e7fe      	b.n	80041c2 <_exit+0x12>

080041c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e00a      	b.n	80041ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041d6:	f3af 8000 	nop.w
 80041da:	4601      	mov	r1, r0
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	60ba      	str	r2, [r7, #8]
 80041e2:	b2ca      	uxtb	r2, r1
 80041e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	3301      	adds	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	dbf0      	blt.n	80041d6 <_read+0x12>
	}

return len;
 80041f4:	687b      	ldr	r3, [r7, #4]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	e009      	b.n	8004224 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	60ba      	str	r2, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3301      	adds	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	dbf1      	blt.n	8004210 <_write+0x12>
	}
	return len;
 800422c:	687b      	ldr	r3, [r7, #4]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <_close>:

int _close(int file)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
	return -1;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800425e:	605a      	str	r2, [r3, #4]
	return 0;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <_isatty>:

int _isatty(int file)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
	return 1;
 8004276:	2301      	movs	r3, #1
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
	return 0;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <_sbrk+0x5c>)
 80042aa:	4b15      	ldr	r3, [pc, #84]	; (8004300 <_sbrk+0x60>)
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <_sbrk+0x64>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <_sbrk+0x64>)
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <_sbrk+0x68>)
 80042c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <_sbrk+0x64>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d207      	bcs.n	80042e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042d0:	f029 fdf8 	bl	802dec4 <__errno>
 80042d4:	4603      	mov	r3, r0
 80042d6:	220c      	movs	r2, #12
 80042d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042da:	f04f 33ff 	mov.w	r3, #4294967295
 80042de:	e009      	b.n	80042f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <_sbrk+0x64>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042e6:	4b07      	ldr	r3, [pc, #28]	; (8004304 <_sbrk+0x64>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	4a05      	ldr	r2, [pc, #20]	; (8004304 <_sbrk+0x64>)
 80042f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20030000 	.word	0x20030000
 8004300:	00000800 	.word	0x00000800
 8004304:	20000124 	.word	0x20000124
 8004308:	2000b630 	.word	0x2000b630

0800430c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <SystemInit+0x20>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	4a05      	ldr	r2, [pc, #20]	; (800432c <SystemInit+0x20>)
 8004318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800431c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004368 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004334:	480d      	ldr	r0, [pc, #52]	; (800436c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004336:	490e      	ldr	r1, [pc, #56]	; (8004370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004338:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800433a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800433c:	e002      	b.n	8004344 <LoopCopyDataInit>

0800433e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004342:	3304      	adds	r3, #4

08004344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004348:	d3f9      	bcc.n	800433e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800434a:	4a0b      	ldr	r2, [pc, #44]	; (8004378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800434c:	4c0b      	ldr	r4, [pc, #44]	; (800437c <LoopFillZerobss+0x26>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004350:	e001      	b.n	8004356 <LoopFillZerobss>

08004352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004354:	3204      	adds	r2, #4

08004356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004358:	d3fb      	bcc.n	8004352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800435a:	f7ff ffd7 	bl	800430c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800435e:	f029 febf 	bl	802e0e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004362:	f7fd fb7d 	bl	8001a60 <main>
  bx  lr    
 8004366:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004368:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800436c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004370:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8004374:	080e8dac 	.word	0x080e8dac
  ldr r2, =_sbss
 8004378:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800437c:	2000b62c 	.word	0x2000b62c

08004380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004380:	e7fe      	b.n	8004380 <ADC_IRQHandler>
	...

08004384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_Init+0x40>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a0d      	ldr	r2, [pc, #52]	; (80043c4 <HAL_Init+0x40>)
 800438e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_Init+0x40>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <HAL_Init+0x40>)
 800439a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800439e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043a0:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_Init+0x40>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a07      	ldr	r2, [pc, #28]	; (80043c4 <HAL_Init+0x40>)
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043ac:	2003      	movs	r0, #3
 80043ae:	f000 fe68 	bl	8005082 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043b2:	200f      	movs	r0, #15
 80043b4:	f7ff fe2a 	bl	800400c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043b8:	f7ff f9a8 	bl	800370c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023c00 	.word	0x40023c00

080043c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_IncTick+0x20>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_IncTick+0x24>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <HAL_IncTick+0x24>)
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000010 	.word	0x20000010
 80043ec:	2000b16c 	.word	0x2000b16c

080043f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return uwTick;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_GetTick+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	2000b16c 	.word	0x2000b16c

08004408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff ffee 	bl	80043f0 <HAL_GetTick>
 8004414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d005      	beq.n	800442e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_Delay+0x44>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800442e:	bf00      	nop
 8004430:	f7ff ffde 	bl	80043f0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	429a      	cmp	r2, r3
 800443e:	d8f7      	bhi.n	8004430 <HAL_Delay+0x28>
  {
  }
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000010 	.word	0x20000010

08004450 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e0ed      	b.n	800463e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff f978 	bl	8003764 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004484:	f7ff ffb4 	bl	80043f0 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800448a:	e012      	b.n	80044b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800448c:	f7ff ffb0 	bl	80043f0 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b0a      	cmp	r3, #10
 8004498:	d90b      	bls.n	80044b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2205      	movs	r2, #5
 80044aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0c5      	b.n	800463e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0e5      	beq.n	800448c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0202 	bic.w	r2, r2, #2
 80044ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044d0:	f7ff ff8e 	bl	80043f0 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044d6:	e012      	b.n	80044fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044d8:	f7ff ff8a 	bl	80043f0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b0a      	cmp	r3, #10
 80044e4:	d90b      	bls.n	80044fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2205      	movs	r2, #5
 80044f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e09f      	b.n	800463e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7e1b      	ldrb	r3, [r3, #24]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d108      	bne.n	8004526 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e007      	b.n	8004536 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004534:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	7e5b      	ldrb	r3, [r3, #25]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d108      	bne.n	8004550 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e007      	b.n	8004560 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7e9b      	ldrb	r3, [r3, #26]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d108      	bne.n	800457a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0220 	orr.w	r2, r2, #32
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e007      	b.n	800458a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0220 	bic.w	r2, r2, #32
 8004588:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	7edb      	ldrb	r3, [r3, #27]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d108      	bne.n	80045a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0210 	bic.w	r2, r2, #16
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e007      	b.n	80045b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0210 	orr.w	r2, r2, #16
 80045b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	7f1b      	ldrb	r3, [r3, #28]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d108      	bne.n	80045ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e007      	b.n	80045de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0208 	bic.w	r2, r2, #8
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	7f5b      	ldrb	r3, [r3, #29]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d108      	bne.n	80045f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0204 	orr.w	r2, r2, #4
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e007      	b.n	8004608 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	ea42 0103 	orr.w	r1, r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800465e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004660:	7cfb      	ldrb	r3, [r7, #19]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d003      	beq.n	800466e <HAL_CAN_ConfigFilter+0x26>
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b02      	cmp	r3, #2
 800466a:	f040 80be 	bne.w	80047ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800466e:	4b65      	ldr	r3, [pc, #404]	; (8004804 <HAL_CAN_ConfigFilter+0x1bc>)
 8004670:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004678:	f043 0201 	orr.w	r2, r3, #1
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004688:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	431a      	orrs	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2201      	movs	r2, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	43db      	mvns	r3, r3
 80046c0:	401a      	ands	r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d123      	bne.n	8004718 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	43db      	mvns	r3, r3
 80046da:	401a      	ands	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	3248      	adds	r2, #72	; 0x48
 80046f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800470c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800470e:	6979      	ldr	r1, [r7, #20]
 8004710:	3348      	adds	r3, #72	; 0x48
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	440b      	add	r3, r1
 8004716:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d122      	bne.n	8004766 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	431a      	orrs	r2, r3
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004740:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	3248      	adds	r2, #72	; 0x48
 8004746:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800475a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800475c:	6979      	ldr	r1, [r7, #20]
 800475e:	3348      	adds	r3, #72	; 0x48
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	440b      	add	r3, r1
 8004764:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43db      	mvns	r3, r3
 8004778:	401a      	ands	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004780:	e007      	b.n	8004792 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	431a      	orrs	r2, r3
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	401a      	ands	r2, r3
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80047ac:	e007      	b.n	80047be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047dc:	f023 0201 	bic.w	r2, r3, #1
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e006      	b.n	80047f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40006400 	.word	0x40006400

08004808 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d12e      	bne.n	800487a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004834:	f7ff fddc 	bl	80043f0 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800483a:	e012      	b.n	8004862 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800483c:	f7ff fdd8 	bl	80043f0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b0a      	cmp	r3, #10
 8004848:	d90b      	bls.n	8004862 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2205      	movs	r2, #5
 800485a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e012      	b.n	8004888 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e5      	bne.n	800483c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e006      	b.n	8004888 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
  }
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d003      	beq.n	80048b4 <HAL_CAN_GetRxMessage+0x24>
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	f040 80f3 	bne.w	8004a9a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10e      	bne.n	80048d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d116      	bne.n	80048f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0e7      	b.n	8004aa8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d107      	bne.n	80048f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0d8      	b.n	8004aa8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	331b      	adds	r3, #27
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	4413      	add	r3, r2
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0204 	and.w	r2, r3, #4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10c      	bne.n	800492e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	331b      	adds	r3, #27
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	4413      	add	r3, r2
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	0d5b      	lsrs	r3, r3, #21
 8004924:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e00b      	b.n	8004946 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	331b      	adds	r3, #27
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4413      	add	r3, r2
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	08db      	lsrs	r3, r3, #3
 800493e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	331b      	adds	r3, #27
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	4413      	add	r3, r2
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0202 	and.w	r2, r3, #2
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	331b      	adds	r3, #27
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	3304      	adds	r3, #4
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 020f 	and.w	r2, r3, #15
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	331b      	adds	r3, #27
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	4413      	add	r3, r2
 8004980:	3304      	adds	r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	b2da      	uxtb	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	331b      	adds	r3, #27
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	4413      	add	r3, r2
 8004998:	3304      	adds	r3, #4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	0a1a      	lsrs	r2, r3, #8
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4413      	add	r3, r2
 80049de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	0c1a      	lsrs	r2, r3, #16
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	3302      	adds	r3, #2
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	0e1a      	lsrs	r2, r3, #24
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	3303      	adds	r3, #3
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	0a1a      	lsrs	r2, r3, #8
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3305      	adds	r3, #5
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	0c1a      	lsrs	r2, r3, #16
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	3306      	adds	r3, #6
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0e1a      	lsrs	r2, r3, #24
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	3307      	adds	r3, #7
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d108      	bne.n	8004a86 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0220 	orr.w	r2, r2, #32
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	e007      	b.n	8004a96 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0220 	orr.w	r2, r2, #32
 8004a94:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e006      	b.n	8004aa8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d07c      	beq.n	8004bf4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d023      	beq.n	8004b4c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f983 	bl	8004e22 <HAL_CAN_TxMailbox0CompleteCallback>
 8004b1c:	e016      	b.n	8004b4c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d004      	beq.n	8004b32 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b30:	e00c      	b.n	8004b4c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	e002      	b.n	8004b4c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f989 	bl	8004e5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d024      	beq.n	8004ba0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f963 	bl	8004e36 <HAL_CAN_TxMailbox1CompleteCallback>
 8004b70:	e016      	b.n	8004ba0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
 8004b84:	e00c      	b.n	8004ba0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
 8004b98:	e002      	b.n	8004ba0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f969 	bl	8004e72 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d024      	beq.n	8004bf4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f943 	bl	8004e4a <HAL_CAN_TxMailbox2CompleteCallback>
 8004bc4:	e016      	b.n	8004bf4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd8:	e00c      	b.n	8004bf4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
 8004bec:	e002      	b.n	8004bf4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f949 	bl	8004e86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2210      	movs	r2, #16
 8004c16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d006      	beq.n	8004c3a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2208      	movs	r2, #8
 8004c32:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f93a 	bl	8004eae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f921 	bl	8004e9a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2210      	movs	r2, #16
 8004c7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d006      	beq.n	8004c9e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2208      	movs	r2, #8
 8004c96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f91c 	bl	8004ed6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f903 	bl	8004ec2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d006      	beq.n	8004cde <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f906 	bl	8004eea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8ff 	bl	8004efe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d07b      	beq.n	8004e02 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d072      	beq.n	8004dfa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	f043 0302 	orr.w	r3, r3, #2
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	f043 0304 	orr.w	r3, r3, #4
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d043      	beq.n	8004dfa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d03e      	beq.n	8004dfa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d82:	2b60      	cmp	r3, #96	; 0x60
 8004d84:	d02b      	beq.n	8004dde <HAL_CAN_IRQHandler+0x32a>
 8004d86:	2b60      	cmp	r3, #96	; 0x60
 8004d88:	d82e      	bhi.n	8004de8 <HAL_CAN_IRQHandler+0x334>
 8004d8a:	2b50      	cmp	r3, #80	; 0x50
 8004d8c:	d022      	beq.n	8004dd4 <HAL_CAN_IRQHandler+0x320>
 8004d8e:	2b50      	cmp	r3, #80	; 0x50
 8004d90:	d82a      	bhi.n	8004de8 <HAL_CAN_IRQHandler+0x334>
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d019      	beq.n	8004dca <HAL_CAN_IRQHandler+0x316>
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d826      	bhi.n	8004de8 <HAL_CAN_IRQHandler+0x334>
 8004d9a:	2b30      	cmp	r3, #48	; 0x30
 8004d9c:	d010      	beq.n	8004dc0 <HAL_CAN_IRQHandler+0x30c>
 8004d9e:	2b30      	cmp	r3, #48	; 0x30
 8004da0:	d822      	bhi.n	8004de8 <HAL_CAN_IRQHandler+0x334>
 8004da2:	2b10      	cmp	r3, #16
 8004da4:	d002      	beq.n	8004dac <HAL_CAN_IRQHandler+0x2f8>
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d005      	beq.n	8004db6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004daa:	e01d      	b.n	8004de8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	f043 0308 	orr.w	r3, r3, #8
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004db4:	e019      	b.n	8004dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	f043 0310 	orr.w	r3, r3, #16
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dbe:	e014      	b.n	8004dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f043 0320 	orr.w	r3, r3, #32
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dc8:	e00f      	b.n	8004dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dd2:	e00a      	b.n	8004dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ddc:	e005      	b.n	8004dea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004de6:	e000      	b.n	8004dea <HAL_CAN_IRQHandler+0x336>
            break;
 8004de8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699a      	ldr	r2, [r3, #24]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004df8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f87c 	bl	8004f12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	3728      	adds	r7, #40	; 0x28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <__NVIC_SetPriorityGrouping+0x44>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f44:	4013      	ands	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f5a:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <__NVIC_SetPriorityGrouping+0x44>)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	60d3      	str	r3, [r2, #12]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000ed00 	.word	0xe000ed00

08004f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <__NVIC_GetPriorityGrouping+0x18>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	f003 0307 	and.w	r3, r3, #7
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	e000ed00 	.word	0xe000ed00

08004f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	db0b      	blt.n	8004fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	f003 021f 	and.w	r2, r3, #31
 8004fa4:	4907      	ldr	r1, [pc, #28]	; (8004fc4 <__NVIC_EnableIRQ+0x38>)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2001      	movs	r0, #1
 8004fae:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	e000e100 	.word	0xe000e100

08004fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db0a      	blt.n	8004ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	490c      	ldr	r1, [pc, #48]	; (8005014 <__NVIC_SetPriority+0x4c>)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	440b      	add	r3, r1
 8004fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff0:	e00a      	b.n	8005008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	4908      	ldr	r1, [pc, #32]	; (8005018 <__NVIC_SetPriority+0x50>)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	3b04      	subs	r3, #4
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	440b      	add	r3, r1
 8005006:	761a      	strb	r2, [r3, #24]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000e100 	.word	0xe000e100
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f1c3 0307 	rsb	r3, r3, #7
 8005036:	2b04      	cmp	r3, #4
 8005038:	bf28      	it	cs
 800503a:	2304      	movcs	r3, #4
 800503c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3304      	adds	r3, #4
 8005042:	2b06      	cmp	r3, #6
 8005044:	d902      	bls.n	800504c <NVIC_EncodePriority+0x30>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3b03      	subs	r3, #3
 800504a:	e000      	b.n	800504e <NVIC_EncodePriority+0x32>
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	401a      	ands	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005064:	f04f 31ff 	mov.w	r1, #4294967295
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	43d9      	mvns	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005074:	4313      	orrs	r3, r2
         );
}
 8005076:	4618      	mov	r0, r3
 8005078:	3724      	adds	r7, #36	; 0x24
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff ff4c 	bl	8004f28 <__NVIC_SetPriorityGrouping>
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050aa:	f7ff ff61 	bl	8004f70 <__NVIC_GetPriorityGrouping>
 80050ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	6978      	ldr	r0, [r7, #20]
 80050b6:	f7ff ffb1 	bl	800501c <NVIC_EncodePriority>
 80050ba:	4602      	mov	r2, r0
 80050bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff ff80 	bl	8004fc8 <__NVIC_SetPriority>
}
 80050c8:	bf00      	nop
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff ff54 	bl	8004f8c <__NVIC_EnableIRQ>
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e00e      	b.n	800511c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	795b      	ldrb	r3, [r3, #5]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fe fbd8 	bl	80038c4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005130:	f7ff f95e 	bl	80043f0 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e099      	b.n	8005274 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005160:	e00f      	b.n	8005182 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005162:	f7ff f945 	bl	80043f0 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b05      	cmp	r3, #5
 800516e:	d908      	bls.n	8005182 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2203      	movs	r2, #3
 800517a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e078      	b.n	8005274 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e8      	bne.n	8005162 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4b38      	ldr	r3, [pc, #224]	; (800527c <HAL_DMA_Init+0x158>)
 800519c:	4013      	ands	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d107      	bne.n	80051ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	4313      	orrs	r3, r2
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0307 	bic.w	r3, r3, #7
 8005202:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2b04      	cmp	r3, #4
 8005214:	d117      	bne.n	8005246 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00e      	beq.n	8005246 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa7b 	bl	8005724 <DMA_CheckFifoParam>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d008      	beq.n	8005246 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2240      	movs	r2, #64	; 0x40
 8005238:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005242:	2301      	movs	r3, #1
 8005244:	e016      	b.n	8005274 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa32 	bl	80056b8 <DMA_CalcBaseAndBitshift>
 8005254:	4603      	mov	r3, r0
 8005256:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525c:	223f      	movs	r2, #63	; 0x3f
 800525e:	409a      	lsls	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	f010803f 	.word	0xf010803f

08005280 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_DMA_Start_IT+0x26>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e040      	b.n	8005328 <HAL_DMA_Start_IT+0xa8>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d12f      	bne.n	800531a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f9c4 	bl	800565c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d8:	223f      	movs	r2, #63	; 0x3f
 80052da:	409a      	lsls	r2, r3
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0216 	orr.w	r2, r2, #22
 80052ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e005      	b.n	8005326 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005322:	2302      	movs	r3, #2
 8005324:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005326:	7dfb      	ldrb	r3, [r7, #23]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800533c:	4b92      	ldr	r3, [pc, #584]	; (8005588 <HAL_DMA_IRQHandler+0x258>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a92      	ldr	r2, [pc, #584]	; (800558c <HAL_DMA_IRQHandler+0x25c>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	0a9b      	lsrs	r3, r3, #10
 8005348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	2208      	movs	r2, #8
 800535c:	409a      	lsls	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d01a      	beq.n	800539c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	2208      	movs	r2, #8
 800538a:	409a      	lsls	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0201 	orr.w	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a0:	2201      	movs	r2, #1
 80053a2:	409a      	lsls	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053be:	2201      	movs	r2, #1
 80053c0:	409a      	lsls	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f043 0202 	orr.w	r2, r3, #2
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d6:	2204      	movs	r2, #4
 80053d8:	409a      	lsls	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d012      	beq.n	8005408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f4:	2204      	movs	r2, #4
 80053f6:	409a      	lsls	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005400:	f043 0204 	orr.w	r2, r3, #4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540c:	2210      	movs	r2, #16
 800540e:	409a      	lsls	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4013      	ands	r3, r2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d043      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d03c      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542a:	2210      	movs	r2, #16
 800542c:	409a      	lsls	r2, r3
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d018      	beq.n	8005472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d108      	bne.n	8005460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b00      	cmp	r3, #0
 8005454:	d024      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
 800545e:	e01f      	b.n	80054a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01b      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	e016      	b.n	80054a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0208 	bic.w	r2, r2, #8
 800548e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a4:	2220      	movs	r2, #32
 80054a6:	409a      	lsls	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 808e 	beq.w	80055ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8086 	beq.w	80055ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c6:	2220      	movs	r2, #32
 80054c8:	409a      	lsls	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d136      	bne.n	8005548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0216 	bic.w	r2, r2, #22
 80054e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695a      	ldr	r2, [r3, #20]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <HAL_DMA_IRQHandler+0x1da>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0208 	bic.w	r2, r2, #8
 8005518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800551e:	223f      	movs	r2, #63	; 0x3f
 8005520:	409a      	lsls	r2, r3
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553a:	2b00      	cmp	r3, #0
 800553c:	d07d      	beq.n	800563a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
        }
        return;
 8005546:	e078      	b.n	800563a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01c      	beq.n	8005590 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d108      	bne.n	8005576 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	2b00      	cmp	r3, #0
 800556a:	d030      	beq.n	80055ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	4798      	blx	r3
 8005574:	e02b      	b.n	80055ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d027      	beq.n	80055ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	4798      	blx	r3
 8005586:	e022      	b.n	80055ce <HAL_DMA_IRQHandler+0x29e>
 8005588:	20000008 	.word	0x20000008
 800558c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10f      	bne.n	80055be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0210 	bic.w	r2, r2, #16
 80055ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d032      	beq.n	800563c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d022      	beq.n	8005628 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2205      	movs	r2, #5
 80055e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	3301      	adds	r3, #1
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	429a      	cmp	r2, r3
 8005604:	d307      	bcc.n	8005616 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f2      	bne.n	80055fa <HAL_DMA_IRQHandler+0x2ca>
 8005614:	e000      	b.n	8005618 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005616:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
 8005638:	e000      	b.n	800563c <HAL_DMA_IRQHandler+0x30c>
        return;
 800563a:	bf00      	nop
    }
  }
}
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop

08005644 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005678:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d108      	bne.n	800569c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800569a:	e007      	b.n	80056ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	60da      	str	r2, [r3, #12]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	3b10      	subs	r3, #16
 80056c8:	4a14      	ldr	r2, [pc, #80]	; (800571c <DMA_CalcBaseAndBitshift+0x64>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056d2:	4a13      	ldr	r2, [pc, #76]	; (8005720 <DMA_CalcBaseAndBitshift+0x68>)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d909      	bls.n	80056fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056ee:	f023 0303 	bic.w	r3, r3, #3
 80056f2:	1d1a      	adds	r2, r3, #4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	659a      	str	r2, [r3, #88]	; 0x58
 80056f8:	e007      	b.n	800570a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	aaaaaaab 	.word	0xaaaaaaab
 8005720:	0802fd9c 	.word	0x0802fd9c

08005724 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d11f      	bne.n	800577e <DMA_CheckFifoParam+0x5a>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d856      	bhi.n	80057f2 <DMA_CheckFifoParam+0xce>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <DMA_CheckFifoParam+0x28>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	0800575d 	.word	0x0800575d
 8005750:	0800576f 	.word	0x0800576f
 8005754:	0800575d 	.word	0x0800575d
 8005758:	080057f3 	.word	0x080057f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d046      	beq.n	80057f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800576c:	e043      	b.n	80057f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005776:	d140      	bne.n	80057fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800577c:	e03d      	b.n	80057fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005786:	d121      	bne.n	80057cc <DMA_CheckFifoParam+0xa8>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d837      	bhi.n	80057fe <DMA_CheckFifoParam+0xda>
 800578e:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <DMA_CheckFifoParam+0x70>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057ab 	.word	0x080057ab
 800579c:	080057a5 	.word	0x080057a5
 80057a0:	080057bd 	.word	0x080057bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      break;
 80057a8:	e030      	b.n	800580c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d025      	beq.n	8005802 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ba:	e022      	b.n	8005802 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057c4:	d11f      	bne.n	8005806 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057ca:	e01c      	b.n	8005806 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d903      	bls.n	80057da <DMA_CheckFifoParam+0xb6>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d003      	beq.n	80057e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057d8:	e018      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
      break;
 80057de:	e015      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	e00b      	b.n	800580a <DMA_CheckFifoParam+0xe6>
      break;
 80057f2:	bf00      	nop
 80057f4:	e00a      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 80057f6:	bf00      	nop
 80057f8:	e008      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 80057fa:	bf00      	nop
 80057fc:	e006      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 80057fe:	bf00      	nop
 8005800:	e004      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 8005802:	bf00      	nop
 8005804:	e002      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;   
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <DMA_CheckFifoParam+0xe8>
      break;
 800580a:	bf00      	nop
    }
  } 
  
  return status; 
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop

0800581c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e03b      	b.n	80058a6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fe f860 	bl	8003908 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586c:	f023 0107 	bic.w	r1, r3, #7
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005886:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68d1      	ldr	r1, [r2, #12]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6812      	ldr	r2, [r2, #0]
 8005892:	430b      	orrs	r3, r1
 8005894:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d026      	beq.n	800591e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d021      	beq.n	800591e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058e8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2201      	movs	r2, #1
 80058fc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2204      	movs	r2, #4
 8005902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d026      	beq.n	8005976 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d021      	beq.n	8005976 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005940:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2220      	movs	r2, #32
 8005948:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	f043 0202 	orr.w	r2, r3, #2
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2204      	movs	r2, #4
 800595a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d026      	beq.n	80059ce <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005986:	2b00      	cmp	r3, #0
 8005988:	d021      	beq.n	80059ce <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005998:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2208      	movs	r2, #8
 80059a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a6:	f043 0204 	orr.w	r2, r3, #4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2204      	movs	r2, #4
 80059b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2204      	movs	r2, #4
 80059f8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f853 	bl	8005aa6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d024      	beq.n	8005a54 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01f      	beq.n	8005a54 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a22:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01f      	beq.n	8005a9e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01a      	beq.n	8005a9e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a76:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2210      	movs	r2, #16
 8005a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f80e 	bl	8005aba <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_DMA2D_ConfigLayer+0x20>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e079      	b.n	8005be4 <HAL_DMA2D_ConfigLayer+0x114>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	3318      	adds	r3, #24
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4413      	add	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	041b      	lsls	r3, r3, #16
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005b1a:	4b35      	ldr	r3, [pc, #212]	; (8005bf0 <HAL_DMA2D_ConfigLayer+0x120>)
 8005b1c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b0a      	cmp	r3, #10
 8005b24:	d003      	beq.n	8005b2e <HAL_DMA2D_ConfigLayer+0x5e>
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b09      	cmp	r3, #9
 8005b2c:	d107      	bne.n	8005b3e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e005      	b.n	8005b4a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	061b      	lsls	r3, r3, #24
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d120      	bne.n	8005b92 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	ea02 0103 	and.w	r1, r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b0a      	cmp	r3, #10
 8005b78:	d003      	beq.n	8005b82 <HAL_DMA2D_ConfigLayer+0xb2>
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b09      	cmp	r3, #9
 8005b80:	d127      	bne.n	8005bd2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b90:	e01f      	b.n	8005bd2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	ea02 0103 	and.w	r1, r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b0a      	cmp	r3, #10
 8005bba:	d003      	beq.n	8005bc4 <HAL_DMA2D_ConfigLayer+0xf4>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b09      	cmp	r3, #9
 8005bc2:	d106      	bne.n	8005bd2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005bd0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	ff03000f 	.word	0xff03000f

08005bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	; 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	e177      	b.n	8005f00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c10:	2201      	movs	r2, #1
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4013      	ands	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	f040 8166 	bne.w	8005efa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d005      	beq.n	8005c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d130      	bne.n	8005ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	2203      	movs	r2, #3
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43db      	mvns	r3, r3
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 0201 	and.w	r2, r3, #1
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d017      	beq.n	8005ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d123      	bne.n	8005d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	08da      	lsrs	r2, r3, #3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3208      	adds	r2, #8
 8005cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	220f      	movs	r2, #15
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4013      	ands	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	08da      	lsrs	r2, r3, #3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3208      	adds	r2, #8
 8005d32:	69b9      	ldr	r1, [r7, #24]
 8005d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	2203      	movs	r2, #3
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f003 0203 	and.w	r2, r3, #3
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80c0 	beq.w	8005efa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	4b66      	ldr	r3, [pc, #408]	; (8005f18 <HAL_GPIO_Init+0x324>)
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	4a65      	ldr	r2, [pc, #404]	; (8005f18 <HAL_GPIO_Init+0x324>)
 8005d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d88:	6453      	str	r3, [r2, #68]	; 0x44
 8005d8a:	4b63      	ldr	r3, [pc, #396]	; (8005f18 <HAL_GPIO_Init+0x324>)
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d96:	4a61      	ldr	r2, [pc, #388]	; (8005f1c <HAL_GPIO_Init+0x328>)
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	089b      	lsrs	r3, r3, #2
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	220f      	movs	r2, #15
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	4013      	ands	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a58      	ldr	r2, [pc, #352]	; (8005f20 <HAL_GPIO_Init+0x32c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d037      	beq.n	8005e32 <HAL_GPIO_Init+0x23e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a57      	ldr	r2, [pc, #348]	; (8005f24 <HAL_GPIO_Init+0x330>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d031      	beq.n	8005e2e <HAL_GPIO_Init+0x23a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a56      	ldr	r2, [pc, #344]	; (8005f28 <HAL_GPIO_Init+0x334>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02b      	beq.n	8005e2a <HAL_GPIO_Init+0x236>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a55      	ldr	r2, [pc, #340]	; (8005f2c <HAL_GPIO_Init+0x338>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d025      	beq.n	8005e26 <HAL_GPIO_Init+0x232>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a54      	ldr	r2, [pc, #336]	; (8005f30 <HAL_GPIO_Init+0x33c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01f      	beq.n	8005e22 <HAL_GPIO_Init+0x22e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a53      	ldr	r2, [pc, #332]	; (8005f34 <HAL_GPIO_Init+0x340>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d019      	beq.n	8005e1e <HAL_GPIO_Init+0x22a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a52      	ldr	r2, [pc, #328]	; (8005f38 <HAL_GPIO_Init+0x344>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d013      	beq.n	8005e1a <HAL_GPIO_Init+0x226>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a51      	ldr	r2, [pc, #324]	; (8005f3c <HAL_GPIO_Init+0x348>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00d      	beq.n	8005e16 <HAL_GPIO_Init+0x222>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a50      	ldr	r2, [pc, #320]	; (8005f40 <HAL_GPIO_Init+0x34c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <HAL_GPIO_Init+0x21e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a4f      	ldr	r2, [pc, #316]	; (8005f44 <HAL_GPIO_Init+0x350>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d101      	bne.n	8005e0e <HAL_GPIO_Init+0x21a>
 8005e0a:	2309      	movs	r3, #9
 8005e0c:	e012      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e0e:	230a      	movs	r3, #10
 8005e10:	e010      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e12:	2308      	movs	r3, #8
 8005e14:	e00e      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e16:	2307      	movs	r3, #7
 8005e18:	e00c      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e1a:	2306      	movs	r3, #6
 8005e1c:	e00a      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e1e:	2305      	movs	r3, #5
 8005e20:	e008      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e22:	2304      	movs	r3, #4
 8005e24:	e006      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e26:	2303      	movs	r3, #3
 8005e28:	e004      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e002      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <HAL_GPIO_Init+0x240>
 8005e32:	2300      	movs	r3, #0
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	f002 0203 	and.w	r2, r2, #3
 8005e3a:	0092      	lsls	r2, r2, #2
 8005e3c:	4093      	lsls	r3, r2
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e44:	4935      	ldr	r1, [pc, #212]	; (8005f1c <HAL_GPIO_Init+0x328>)
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	089b      	lsrs	r3, r3, #2
 8005e4a:	3302      	adds	r3, #2
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e52:	4b3d      	ldr	r3, [pc, #244]	; (8005f48 <HAL_GPIO_Init+0x354>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e76:	4a34      	ldr	r2, [pc, #208]	; (8005f48 <HAL_GPIO_Init+0x354>)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e7c:	4b32      	ldr	r3, [pc, #200]	; (8005f48 <HAL_GPIO_Init+0x354>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ea0:	4a29      	ldr	r2, [pc, #164]	; (8005f48 <HAL_GPIO_Init+0x354>)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ea6:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <HAL_GPIO_Init+0x354>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005eca:	4a1f      	ldr	r2, [pc, #124]	; (8005f48 <HAL_GPIO_Init+0x354>)
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ed0:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <HAL_GPIO_Init+0x354>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4013      	ands	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ef4:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <HAL_GPIO_Init+0x354>)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	3301      	adds	r3, #1
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	2b0f      	cmp	r3, #15
 8005f04:	f67f ae84 	bls.w	8005c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	3724      	adds	r7, #36	; 0x24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40013800 	.word	0x40013800
 8005f20:	40020000 	.word	0x40020000
 8005f24:	40020400 	.word	0x40020400
 8005f28:	40020800 	.word	0x40020800
 8005f2c:	40020c00 	.word	0x40020c00
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40021400 	.word	0x40021400
 8005f38:	40021800 	.word	0x40021800
 8005f3c:	40021c00 	.word	0x40021c00
 8005f40:	40022000 	.word	0x40022000
 8005f44:	40022400 	.word	0x40022400
 8005f48:	40013c00 	.word	0x40013c00

08005f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	887b      	ldrh	r3, [r7, #2]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f64:	2301      	movs	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	e001      	b.n	8005f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	807b      	strh	r3, [r7, #2]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f8c:	787b      	ldrb	r3, [r7, #1]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f92:	887a      	ldrh	r2, [r7, #2]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f98:	e003      	b.n	8005fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f9a:	887b      	ldrh	r3, [r7, #2]
 8005f9c:	041a      	lsls	r2, r3, #16
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	619a      	str	r2, [r3, #24]
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fc0:	887a      	ldrh	r2, [r7, #2]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	041a      	lsls	r2, r3, #16
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	43d9      	mvns	r1, r3
 8005fcc:	887b      	ldrh	r3, [r7, #2]
 8005fce:	400b      	ands	r3, r1
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	619a      	str	r2, [r3, #24]
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e12b      	b.n	800624e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fd fca4 	bl	8003958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2224      	movs	r2, #36	; 0x24
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006048:	f001 ffca 	bl	8007fe0 <HAL_RCC_GetPCLK1Freq>
 800604c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4a81      	ldr	r2, [pc, #516]	; (8006258 <HAL_I2C_Init+0x274>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d807      	bhi.n	8006068 <HAL_I2C_Init+0x84>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4a80      	ldr	r2, [pc, #512]	; (800625c <HAL_I2C_Init+0x278>)
 800605c:	4293      	cmp	r3, r2
 800605e:	bf94      	ite	ls
 8006060:	2301      	movls	r3, #1
 8006062:	2300      	movhi	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	e006      	b.n	8006076 <HAL_I2C_Init+0x92>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4a7d      	ldr	r2, [pc, #500]	; (8006260 <HAL_I2C_Init+0x27c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	bf94      	ite	ls
 8006070:	2301      	movls	r3, #1
 8006072:	2300      	movhi	r3, #0
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e0e7      	b.n	800624e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a78      	ldr	r2, [pc, #480]	; (8006264 <HAL_I2C_Init+0x280>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	0c9b      	lsrs	r3, r3, #18
 8006088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4a6a      	ldr	r2, [pc, #424]	; (8006258 <HAL_I2C_Init+0x274>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d802      	bhi.n	80060b8 <HAL_I2C_Init+0xd4>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	3301      	adds	r3, #1
 80060b6:	e009      	b.n	80060cc <HAL_I2C_Init+0xe8>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060be:	fb02 f303 	mul.w	r3, r2, r3
 80060c2:	4a69      	ldr	r2, [pc, #420]	; (8006268 <HAL_I2C_Init+0x284>)
 80060c4:	fba2 2303 	umull	r2, r3, r2, r3
 80060c8:	099b      	lsrs	r3, r3, #6
 80060ca:	3301      	adds	r3, #1
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	495c      	ldr	r1, [pc, #368]	; (8006258 <HAL_I2C_Init+0x274>)
 80060e8:	428b      	cmp	r3, r1
 80060ea:	d819      	bhi.n	8006120 <HAL_I2C_Init+0x13c>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1e59      	subs	r1, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006100:	400b      	ands	r3, r1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_I2C_Init+0x138>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1e59      	subs	r1, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	fbb1 f3f3 	udiv	r3, r1, r3
 8006114:	3301      	adds	r3, #1
 8006116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611a:	e051      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 800611c:	2304      	movs	r3, #4
 800611e:	e04f      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d111      	bne.n	800614c <HAL_I2C_Init+0x168>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	1e58      	subs	r0, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6859      	ldr	r1, [r3, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	440b      	add	r3, r1
 8006136:	fbb0 f3f3 	udiv	r3, r0, r3
 800613a:	3301      	adds	r3, #1
 800613c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006140:	2b00      	cmp	r3, #0
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	e012      	b.n	8006172 <HAL_I2C_Init+0x18e>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1e58      	subs	r0, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6859      	ldr	r1, [r3, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	0099      	lsls	r1, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006162:	3301      	adds	r3, #1
 8006164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006168:	2b00      	cmp	r3, #0
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_I2C_Init+0x196>
 8006176:	2301      	movs	r3, #1
 8006178:	e022      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10e      	bne.n	80061a0 <HAL_I2C_Init+0x1bc>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1e58      	subs	r0, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	440b      	add	r3, r1
 8006190:	fbb0 f3f3 	udiv	r3, r0, r3
 8006194:	3301      	adds	r3, #1
 8006196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619e:	e00f      	b.n	80061c0 <HAL_I2C_Init+0x1dc>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	1e58      	subs	r0, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	0099      	lsls	r1, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061b6:	3301      	adds	r3, #1
 80061b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	6809      	ldr	r1, [r1, #0]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69da      	ldr	r2, [r3, #28]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6911      	ldr	r1, [r2, #16]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68d2      	ldr	r2, [r2, #12]
 80061fa:	4311      	orrs	r1, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6812      	ldr	r2, [r2, #0]
 8006200:	430b      	orrs	r3, r1
 8006202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0201 	orr.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	000186a0 	.word	0x000186a0
 800625c:	001e847f 	.word	0x001e847f
 8006260:	003d08ff 	.word	0x003d08ff
 8006264:	431bde83 	.word	0x431bde83
 8006268:	10624dd3 	.word	0x10624dd3

0800626c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	461a      	mov	r2, r3
 8006278:	460b      	mov	r3, r1
 800627a:	817b      	strh	r3, [r7, #10]
 800627c:	4613      	mov	r3, r2
 800627e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006280:	f7fe f8b6 	bl	80043f0 <HAL_GetTick>
 8006284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b20      	cmp	r3, #32
 8006290:	f040 80e0 	bne.w	8006454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2319      	movs	r3, #25
 800629a:	2201      	movs	r2, #1
 800629c:	4970      	ldr	r1, [pc, #448]	; (8006460 <HAL_I2C_Master_Transmit+0x1f4>)
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fc58 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	e0d3      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_I2C_Master_Transmit+0x50>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0cc      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d007      	beq.n	80062e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2221      	movs	r2, #33	; 0x21
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2210      	movs	r2, #16
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	893a      	ldrh	r2, [r7, #8]
 8006312:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a50      	ldr	r2, [pc, #320]	; (8006464 <HAL_I2C_Master_Transmit+0x1f8>)
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006324:	8979      	ldrh	r1, [r7, #10]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a3a      	ldr	r2, [r7, #32]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fac2 	bl	80068b4 <I2C_MasterRequestWrite>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e08d      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006350:	e066      	b.n	8006420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	6a39      	ldr	r1, [r7, #32]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fcd2 	bl	8006d00 <I2C_WaitOnTXEFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00d      	beq.n	800637e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	2b04      	cmp	r3, #4
 8006368:	d107      	bne.n	800637a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e06b      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d11b      	bne.n	80063f4 <HAL_I2C_Master_Transmit+0x188>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	6a39      	ldr	r1, [r7, #32]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fcc2 	bl	8006d82 <I2C_WaitOnBTFFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00d      	beq.n	8006420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	2b04      	cmp	r3, #4
 800640a:	d107      	bne.n	800641c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e01a      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	d194      	bne.n	8006352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	e000      	b.n	8006456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006454:	2302      	movs	r3, #2
  }
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	00100002 	.word	0x00100002
 8006464:	ffff0000 	.word	0xffff0000

08006468 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08c      	sub	sp, #48	; 0x30
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	607a      	str	r2, [r7, #4]
 8006472:	461a      	mov	r2, r3
 8006474:	460b      	mov	r3, r1
 8006476:	817b      	strh	r3, [r7, #10]
 8006478:	4613      	mov	r3, r2
 800647a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800647c:	f7fd ffb8 	bl	80043f0 <HAL_GetTick>
 8006480:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b20      	cmp	r3, #32
 800648c:	f040 820b 	bne.w	80068a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2319      	movs	r3, #25
 8006496:	2201      	movs	r2, #1
 8006498:	497c      	ldr	r1, [pc, #496]	; (800668c <HAL_I2C_Master_Receive+0x224>)
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fb5a 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
 80064a8:	e1fe      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_I2C_Master_Receive+0x50>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e1f7      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d007      	beq.n	80064de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2222      	movs	r2, #34	; 0x22
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2210      	movs	r2, #16
 80064fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	893a      	ldrh	r2, [r7, #8]
 800650e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a5c      	ldr	r2, [pc, #368]	; (8006690 <HAL_I2C_Master_Receive+0x228>)
 800651e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006520:	8979      	ldrh	r1, [r7, #10]
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fa46 	bl	80069b8 <I2C_MasterRequestRead>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e1b8      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d113      	bne.n	8006566 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800653e:	2300      	movs	r3, #0
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	623b      	str	r3, [r7, #32]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e18c      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	2b01      	cmp	r3, #1
 800656c:	d11b      	bne.n	80065a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e16c      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d11b      	bne.n	80065e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ce:	2300      	movs	r3, #0
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	e14c      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800660c:	e138      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006612:	2b03      	cmp	r3, #3
 8006614:	f200 80f1 	bhi.w	80067fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661c:	2b01      	cmp	r3, #1
 800661e:	d123      	bne.n	8006668 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fbed 	bl	8006e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e139      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006666:	e10b      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666c:	2b02      	cmp	r3, #2
 800666e:	d14e      	bne.n	800670e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	2200      	movs	r2, #0
 8006678:	4906      	ldr	r1, [pc, #24]	; (8006694 <HAL_I2C_Master_Receive+0x22c>)
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fa6a 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e10e      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
 800668a:	bf00      	nop
 800668c:	00100002 	.word	0x00100002
 8006690:	ffff0000 	.word	0xffff0000
 8006694:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c4:	3b01      	subs	r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800670c:	e0b8      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	2200      	movs	r2, #0
 8006716:	4966      	ldr	r1, [pc, #408]	; (80068b0 <HAL_I2C_Master_Receive+0x448>)
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 fa1b 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e0bf      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	2200      	movs	r2, #0
 8006772:	494f      	ldr	r1, [pc, #316]	; (80068b0 <HAL_I2C_Master_Receive+0x448>)
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f9ed 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e091      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067f8:	e042      	b.n	8006880 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fb00 	bl	8006e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e04c      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b04      	cmp	r3, #4
 800684c:	d118      	bne.n	8006880 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006884:	2b00      	cmp	r3, #0
 8006886:	f47f aec2 	bne.w	800660e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2220      	movs	r2, #32
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e000      	b.n	80068a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068a6:	2302      	movs	r3, #2
  }
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	; 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	00010004 	.word	0x00010004

080068b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	460b      	mov	r3, r1
 80068c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d006      	beq.n	80068de <I2C_MasterRequestWrite+0x2a>
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d003      	beq.n	80068de <I2C_MasterRequestWrite+0x2a>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068dc:	d108      	bne.n	80068f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	e00b      	b.n	8006908 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	2b12      	cmp	r3, #18
 80068f6:	d107      	bne.n	8006908 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006906:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f91d 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00d      	beq.n	800693c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692e:	d103      	bne.n	8006938 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e035      	b.n	80069a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006944:	d108      	bne.n	8006958 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006946:	897b      	ldrh	r3, [r7, #10]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006954:	611a      	str	r2, [r3, #16]
 8006956:	e01b      	b.n	8006990 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006958:	897b      	ldrh	r3, [r7, #10]
 800695a:	11db      	asrs	r3, r3, #7
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0306 	and.w	r3, r3, #6
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f063 030f 	orn	r3, r3, #15
 8006968:	b2da      	uxtb	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	490e      	ldr	r1, [pc, #56]	; (80069b0 <I2C_MasterRequestWrite+0xfc>)
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f943 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e010      	b.n	80069a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006986:	897b      	ldrh	r3, [r7, #10]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4907      	ldr	r1, [pc, #28]	; (80069b4 <I2C_MasterRequestWrite+0x100>)
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f933 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	00010008 	.word	0x00010008
 80069b4:	00010002 	.word	0x00010002

080069b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	460b      	mov	r3, r1
 80069c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d006      	beq.n	80069f2 <I2C_MasterRequestRead+0x3a>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d003      	beq.n	80069f2 <I2C_MasterRequestRead+0x3a>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069f0:	d108      	bne.n	8006a04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e00b      	b.n	8006a1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	2b11      	cmp	r3, #17
 8006a0a:	d107      	bne.n	8006a1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f893 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00d      	beq.n	8006a50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a42:	d103      	bne.n	8006a4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e079      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a58:	d108      	bne.n	8006a6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a5a:	897b      	ldrh	r3, [r7, #10]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	611a      	str	r2, [r3, #16]
 8006a6a:	e05f      	b.n	8006b2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a6c:	897b      	ldrh	r3, [r7, #10]
 8006a6e:	11db      	asrs	r3, r3, #7
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	f003 0306 	and.w	r3, r3, #6
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f063 030f 	orn	r3, r3, #15
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4930      	ldr	r1, [pc, #192]	; (8006b4c <I2C_MasterRequestRead+0x194>)
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f8b9 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e054      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a9a:	897b      	ldrh	r3, [r7, #10]
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	4929      	ldr	r1, [pc, #164]	; (8006b50 <I2C_MasterRequestRead+0x198>)
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f8a9 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e044      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aba:	2300      	movs	r3, #0
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ade:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f831 	bl	8006b54 <I2C_WaitOnFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00d      	beq.n	8006b14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b06:	d103      	bne.n	8006b10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e017      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006b14:	897b      	ldrh	r3, [r7, #10]
 8006b16:	11db      	asrs	r3, r3, #7
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	f003 0306 	and.w	r3, r3, #6
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f063 030e 	orn	r3, r3, #14
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	4907      	ldr	r1, [pc, #28]	; (8006b50 <I2C_MasterRequestRead+0x198>)
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f865 	bl	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	00010008 	.word	0x00010008
 8006b50:	00010002 	.word	0x00010002

08006b54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b64:	e025      	b.n	8006bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d021      	beq.n	8006bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6e:	f7fd fc3f 	bl	80043f0 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d116      	bne.n	8006bb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f043 0220 	orr.w	r2, r3, #32
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e023      	b.n	8006bfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d10d      	bne.n	8006bd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	43da      	mvns	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bf0c      	ite	eq
 8006bce:	2301      	moveq	r3, #1
 8006bd0:	2300      	movne	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	e00c      	b.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	43da      	mvns	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4013      	ands	r3, r2
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf0c      	ite	eq
 8006bea:	2301      	moveq	r3, #1
 8006bec:	2300      	movne	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d0b6      	beq.n	8006b66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c10:	e051      	b.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c20:	d123      	bne.n	8006c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f043 0204 	orr.w	r2, r3, #4
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e046      	b.n	8006cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d021      	beq.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c72:	f7fd fbbd 	bl	80043f0 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d302      	bcc.n	8006c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d116      	bne.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f043 0220 	orr.w	r2, r3, #32
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e020      	b.n	8006cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	0c1b      	lsrs	r3, r3, #16
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d10c      	bne.n	8006cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	43da      	mvns	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bf14      	ite	ne
 8006cd2:	2301      	movne	r3, #1
 8006cd4:	2300      	moveq	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	e00b      	b.n	8006cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	43da      	mvns	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bf14      	ite	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	2300      	moveq	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d18d      	bne.n	8006c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d0c:	e02d      	b.n	8006d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f8ce 	bl	8006eb0 <I2C_IsAcknowledgeFailed>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e02d      	b.n	8006d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d021      	beq.n	8006d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d26:	f7fd fb63 	bl	80043f0 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d116      	bne.n	8006d6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f043 0220 	orr.w	r2, r3, #32
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e007      	b.n	8006d7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d1ca      	bne.n	8006d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d8e:	e02d      	b.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f88d 	bl	8006eb0 <I2C_IsAcknowledgeFailed>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e02d      	b.n	8006dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d021      	beq.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da8:	f7fd fb22 	bl	80043f0 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d302      	bcc.n	8006dbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d116      	bne.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	f043 0220 	orr.w	r2, r3, #32
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e007      	b.n	8006dfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d1ca      	bne.n	8006d90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e10:	e042      	b.n	8006e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	f003 0310 	and.w	r3, r3, #16
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d119      	bne.n	8006e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f06f 0210 	mvn.w	r2, #16
 8006e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e029      	b.n	8006ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e54:	f7fd facc 	bl	80043f0 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d302      	bcc.n	8006e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d116      	bne.n	8006e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	f043 0220 	orr.w	r2, r3, #32
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e007      	b.n	8006ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	d1b5      	bne.n	8006e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec6:	d11b      	bne.n	8006f00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ed0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	f043 0204 	orr.w	r2, r3, #4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e000      	b.n	8006f02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d129      	bne.n	8006f78 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2224      	movs	r2, #36	; 0x24
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0210 	bic.w	r2, r2, #16
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e000      	b.n	8006f7a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006f78:	2302      	movs	r3, #2
  }
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d12a      	bne.n	8006ff6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2224      	movs	r2, #36	; 0x24
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006fc0:	89fb      	ldrh	r3, [r7, #14]
 8006fc2:	f023 030f 	bic.w	r3, r3, #15
 8006fc6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	89fb      	ldrh	r3, [r7, #14]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	89fa      	ldrh	r2, [r7, #14]
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0201 	orr.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e000      	b.n	8006ff8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006ff6:	2302      	movs	r3, #2
  }
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e0bf      	b.n	8007196 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fc fcdc 	bl	80039e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007046:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6999      	ldr	r1, [r3, #24]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800705c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6899      	ldr	r1, [r3, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	4b4a      	ldr	r3, [pc, #296]	; (80071a0 <HAL_LTDC_Init+0x19c>)
 8007078:	400b      	ands	r3, r1
 800707a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	041b      	lsls	r3, r3, #16
 8007082:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6899      	ldr	r1, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68d9      	ldr	r1, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	4b3e      	ldr	r3, [pc, #248]	; (80071a0 <HAL_LTDC_Init+0x19c>)
 80070a6:	400b      	ands	r3, r1
 80070a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	041b      	lsls	r3, r3, #16
 80070b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68d9      	ldr	r1, [r3, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1a      	ldr	r2, [r3, #32]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6919      	ldr	r1, [r3, #16]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b33      	ldr	r3, [pc, #204]	; (80071a0 <HAL_LTDC_Init+0x19c>)
 80070d4:	400b      	ands	r3, r1
 80070d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	041b      	lsls	r3, r3, #16
 80070de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6919      	ldr	r1, [r3, #16]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6959      	ldr	r1, [r3, #20]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	4b27      	ldr	r3, [pc, #156]	; (80071a0 <HAL_LTDC_Init+0x19c>)
 8007102:	400b      	ands	r3, r1
 8007104:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	041b      	lsls	r3, r3, #16
 800710c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6959      	ldr	r1, [r3, #20]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007146:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0206 	orr.w	r2, r2, #6
 8007172:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	f000f800 	.word	0xf000f800

080071a4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d023      	beq.n	800720e <HAL_LTDC_IRQHandler+0x6a>
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01e      	beq.n	800720e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0204 	bic.w	r2, r2, #4
 80071de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2204      	movs	r2, #4
 80071e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071ee:	f043 0201 	orr.w	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2204      	movs	r2, #4
 80071fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f86f 	bl	80072ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d023      	beq.n	8007260 <HAL_LTDC_IRQHandler+0xbc>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d01e      	beq.n	8007260 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0202 	bic.w	r2, r2, #2
 8007230:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2202      	movs	r2, #2
 8007238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007240:	f043 0202 	orr.w	r2, r3, #2
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2204      	movs	r2, #4
 800724e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f846 	bl	80072ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d01b      	beq.n	80072a2 <HAL_LTDC_IRQHandler+0xfe>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d016      	beq.n	80072a2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0201 	bic.w	r2, r2, #1
 8007282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2201      	movs	r2, #1
 800728a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f00f fcc1 	bl	8016c24 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01b      	beq.n	80072e4 <HAL_LTDC_IRQHandler+0x140>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d016      	beq.n	80072e4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0208 	bic.w	r2, r2, #8
 80072c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2208      	movs	r2, #8
 80072cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f80e 	bl	8007300 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007314:	b5b0      	push	{r4, r5, r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_LTDC_ConfigLayer+0x1a>
 800732a:	2302      	movs	r3, #2
 800732c:	e02c      	b.n	8007388 <HAL_LTDC_ConfigLayer+0x74>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2134      	movs	r1, #52	; 0x34
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	4413      	add	r3, r2
 800734a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4614      	mov	r4, r2
 8007352:	461d      	mov	r5, r3
 8007354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800735a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800735e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f849 	bl	8007400 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2201      	movs	r2, #1
 8007374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bdb0      	pop	{r4, r5, r7, pc}

08007390 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_LTDC_ProgramLineEvent+0x18>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e023      	b.n	80073f0 <HAL_LTDC_ProgramLineEvent+0x60>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0201 	bic.w	r2, r2, #1
 80073c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80073c8:	4a0c      	ldr	r2, [pc, #48]	; (80073fc <HAL_LTDC_ProgramLineEvent+0x6c>)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f042 0201 	orr.w	r2, r2, #1
 80073dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	40016800 	.word	0x40016800

08007400 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007400:	b480      	push	{r7}
 8007402:	b089      	sub	sp, #36	; 0x24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	0c1b      	lsrs	r3, r3, #16
 8007418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800741c:	4413      	add	r3, r2
 800741e:	041b      	lsls	r3, r3, #16
 8007420:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	01db      	lsls	r3, r3, #7
 800742c:	4413      	add	r3, r2
 800742e:	3384      	adds	r3, #132	; 0x84
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	4611      	mov	r1, r2
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	01d2      	lsls	r2, r2, #7
 800743c:	440a      	add	r2, r1
 800743e:	3284      	adds	r2, #132	; 0x84
 8007440:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007444:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007456:	4413      	add	r3, r2
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4619      	mov	r1, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	01db      	lsls	r3, r3, #7
 8007464:	440b      	add	r3, r1
 8007466:	3384      	adds	r3, #132	; 0x84
 8007468:	4619      	mov	r1, r3
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4313      	orrs	r3, r2
 800746e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800747e:	4413      	add	r3, r2
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	01db      	lsls	r3, r3, #7
 800748e:	4413      	add	r3, r2
 8007490:	3384      	adds	r3, #132	; 0x84
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	4611      	mov	r1, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	01d2      	lsls	r2, r2, #7
 800749e:	440a      	add	r2, r1
 80074a0:	3284      	adds	r2, #132	; 0x84
 80074a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074b6:	4413      	add	r3, r2
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4619      	mov	r1, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	01db      	lsls	r3, r3, #7
 80074c4:	440b      	add	r3, r1
 80074c6:	3384      	adds	r3, #132	; 0x84
 80074c8:	4619      	mov	r1, r3
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	01db      	lsls	r3, r3, #7
 80074da:	4413      	add	r3, r2
 80074dc:	3384      	adds	r3, #132	; 0x84
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	6812      	ldr	r2, [r2, #0]
 80074e4:	4611      	mov	r1, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	01d2      	lsls	r2, r2, #7
 80074ea:	440a      	add	r2, r1
 80074ec:	3284      	adds	r2, #132	; 0x84
 80074ee:	f023 0307 	bic.w	r3, r3, #7
 80074f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	01db      	lsls	r3, r3, #7
 80074fe:	4413      	add	r3, r2
 8007500:	3384      	adds	r3, #132	; 0x84
 8007502:	461a      	mov	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	061b      	lsls	r3, r3, #24
 8007524:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	01db      	lsls	r3, r3, #7
 8007530:	4413      	add	r3, r2
 8007532:	3384      	adds	r3, #132	; 0x84
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	01db      	lsls	r3, r3, #7
 8007540:	4413      	add	r3, r2
 8007542:	3384      	adds	r3, #132	; 0x84
 8007544:	461a      	mov	r2, r3
 8007546:	2300      	movs	r3, #0
 8007548:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007550:	461a      	mov	r2, r3
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	431a      	orrs	r2, r3
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	431a      	orrs	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4619      	mov	r1, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	01db      	lsls	r3, r3, #7
 8007564:	440b      	add	r3, r1
 8007566:	3384      	adds	r3, #132	; 0x84
 8007568:	4619      	mov	r1, r3
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	01db      	lsls	r3, r3, #7
 800757a:	4413      	add	r3, r2
 800757c:	3384      	adds	r3, #132	; 0x84
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	4611      	mov	r1, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	01d2      	lsls	r2, r2, #7
 800758a:	440a      	add	r2, r1
 800758c:	3284      	adds	r2, #132	; 0x84
 800758e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007592:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	01db      	lsls	r3, r3, #7
 800759e:	4413      	add	r3, r2
 80075a0:	3384      	adds	r3, #132	; 0x84
 80075a2:	461a      	mov	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	01db      	lsls	r3, r3, #7
 80075b4:	4413      	add	r3, r2
 80075b6:	3384      	adds	r3, #132	; 0x84
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	4611      	mov	r1, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	01d2      	lsls	r2, r2, #7
 80075c4:	440a      	add	r2, r1
 80075c6:	3284      	adds	r2, #132	; 0x84
 80075c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80075cc:	f023 0307 	bic.w	r3, r3, #7
 80075d0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	69da      	ldr	r2, [r3, #28]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	68f9      	ldr	r1, [r7, #12]
 80075dc:	6809      	ldr	r1, [r1, #0]
 80075de:	4608      	mov	r0, r1
 80075e0:	6879      	ldr	r1, [r7, #4]
 80075e2:	01c9      	lsls	r1, r1, #7
 80075e4:	4401      	add	r1, r0
 80075e6:	3184      	adds	r1, #132	; 0x84
 80075e8:	4313      	orrs	r3, r2
 80075ea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	01db      	lsls	r3, r3, #7
 80075f6:	4413      	add	r3, r2
 80075f8:	3384      	adds	r3, #132	; 0x84
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	01db      	lsls	r3, r3, #7
 8007606:	4413      	add	r3, r2
 8007608:	3384      	adds	r3, #132	; 0x84
 800760a:	461a      	mov	r2, r3
 800760c:	2300      	movs	r3, #0
 800760e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	01db      	lsls	r3, r3, #7
 800761a:	4413      	add	r3, r2
 800761c:	3384      	adds	r3, #132	; 0x84
 800761e:	461a      	mov	r2, r3
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800762e:	2304      	movs	r3, #4
 8007630:	61fb      	str	r3, [r7, #28]
 8007632:	e01b      	b.n	800766c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d102      	bne.n	8007642 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800763c:	2303      	movs	r3, #3
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	e014      	b.n	800766c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b04      	cmp	r3, #4
 8007648:	d00b      	beq.n	8007662 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800764e:	2b02      	cmp	r3, #2
 8007650:	d007      	beq.n	8007662 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007656:	2b03      	cmp	r3, #3
 8007658:	d003      	beq.n	8007662 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800765e:	2b07      	cmp	r3, #7
 8007660:	d102      	bne.n	8007668 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007662:	2302      	movs	r3, #2
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	e001      	b.n	800766c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007668:	2301      	movs	r3, #1
 800766a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	01db      	lsls	r3, r3, #7
 8007676:	4413      	add	r3, r2
 8007678:	3384      	adds	r3, #132	; 0x84
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	4611      	mov	r1, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	01d2      	lsls	r2, r2, #7
 8007686:	440a      	add	r2, r1
 8007688:	3284      	adds	r2, #132	; 0x84
 800768a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800768e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	fb02 f303 	mul.w	r3, r2, r3
 800769a:	041a      	lsls	r2, r3, #16
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6859      	ldr	r1, [r3, #4]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	1acb      	subs	r3, r1, r3
 80076a6:	69f9      	ldr	r1, [r7, #28]
 80076a8:	fb01 f303 	mul.w	r3, r1, r3
 80076ac:	3303      	adds	r3, #3
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	6809      	ldr	r1, [r1, #0]
 80076b2:	4608      	mov	r0, r1
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	01c9      	lsls	r1, r1, #7
 80076b8:	4401      	add	r1, r0
 80076ba:	3184      	adds	r1, #132	; 0x84
 80076bc:	4313      	orrs	r3, r2
 80076be:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	01db      	lsls	r3, r3, #7
 80076ca:	4413      	add	r3, r2
 80076cc:	3384      	adds	r3, #132	; 0x84
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	4611      	mov	r1, r2
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	01d2      	lsls	r2, r2, #7
 80076da:	440a      	add	r2, r1
 80076dc:	3284      	adds	r2, #132	; 0x84
 80076de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076e2:	f023 0307 	bic.w	r3, r3, #7
 80076e6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	01db      	lsls	r3, r3, #7
 80076f2:	4413      	add	r3, r2
 80076f4:	3384      	adds	r3, #132	; 0x84
 80076f6:	461a      	mov	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	01db      	lsls	r3, r3, #7
 8007708:	4413      	add	r3, r2
 800770a:	3384      	adds	r3, #132	; 0x84
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	4611      	mov	r1, r2
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	01d2      	lsls	r2, r2, #7
 8007718:	440a      	add	r2, r1
 800771a:	3284      	adds	r2, #132	; 0x84
 800771c:	f043 0301 	orr.w	r3, r3, #1
 8007720:	6013      	str	r3, [r2, #0]
}
 8007722:	bf00      	nop
 8007724:	3724      	adds	r7, #36	; 0x24
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e264      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d075      	beq.n	800783a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800774e:	4ba3      	ldr	r3, [pc, #652]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	2b04      	cmp	r3, #4
 8007758:	d00c      	beq.n	8007774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800775a:	4ba0      	ldr	r3, [pc, #640]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007762:	2b08      	cmp	r3, #8
 8007764:	d112      	bne.n	800778c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007766:	4b9d      	ldr	r3, [pc, #628]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800776e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007772:	d10b      	bne.n	800778c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007774:	4b99      	ldr	r3, [pc, #612]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d05b      	beq.n	8007838 <HAL_RCC_OscConfig+0x108>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d157      	bne.n	8007838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e23f      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007794:	d106      	bne.n	80077a4 <HAL_RCC_OscConfig+0x74>
 8007796:	4b91      	ldr	r3, [pc, #580]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a90      	ldr	r2, [pc, #576]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 800779c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	e01d      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077ac:	d10c      	bne.n	80077c8 <HAL_RCC_OscConfig+0x98>
 80077ae:	4b8b      	ldr	r3, [pc, #556]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a8a      	ldr	r2, [pc, #552]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80077b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	4b88      	ldr	r3, [pc, #544]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a87      	ldr	r2, [pc, #540]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e00b      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077c8:	4b84      	ldr	r3, [pc, #528]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a83      	ldr	r2, [pc, #524]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80077ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	4b81      	ldr	r3, [pc, #516]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a80      	ldr	r2, [pc, #512]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80077da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e8:	f7fc fe02 	bl	80043f0 <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077f0:	f7fc fdfe 	bl	80043f0 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b64      	cmp	r3, #100	; 0x64
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e204      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007802:	4b76      	ldr	r3, [pc, #472]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0xc0>
 800780e:	e014      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007810:	f7fc fdee 	bl	80043f0 <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007818:	f7fc fdea 	bl	80043f0 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b64      	cmp	r3, #100	; 0x64
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e1f0      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800782a:	4b6c      	ldr	r3, [pc, #432]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0xe8>
 8007836:	e000      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d063      	beq.n	800790e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007846:	4b65      	ldr	r3, [pc, #404]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007852:	4b62      	ldr	r3, [pc, #392]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800785a:	2b08      	cmp	r3, #8
 800785c:	d11c      	bne.n	8007898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800785e:	4b5f      	ldr	r3, [pc, #380]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d116      	bne.n	8007898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800786a:	4b5c      	ldr	r3, [pc, #368]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <HAL_RCC_OscConfig+0x152>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d001      	beq.n	8007882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e1c4      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007882:	4b56      	ldr	r3, [pc, #344]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	4952      	ldr	r1, [pc, #328]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007892:	4313      	orrs	r3, r2
 8007894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007896:	e03a      	b.n	800790e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d020      	beq.n	80078e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078a0:	4b4f      	ldr	r3, [pc, #316]	; (80079e0 <HAL_RCC_OscConfig+0x2b0>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a6:	f7fc fda3 	bl	80043f0 <HAL_GetTick>
 80078aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ac:	e008      	b.n	80078c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078ae:	f7fc fd9f 	bl	80043f0 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e1a5      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c0:	4b46      	ldr	r3, [pc, #280]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0f0      	beq.n	80078ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078cc:	4b43      	ldr	r3, [pc, #268]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	4940      	ldr	r1, [pc, #256]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]
 80078e0:	e015      	b.n	800790e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078e2:	4b3f      	ldr	r3, [pc, #252]	; (80079e0 <HAL_RCC_OscConfig+0x2b0>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e8:	f7fc fd82 	bl	80043f0 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078f0:	f7fc fd7e 	bl	80043f0 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e184      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007902:	4b36      	ldr	r3, [pc, #216]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f0      	bne.n	80078f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d030      	beq.n	800797c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d016      	beq.n	8007950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007922:	4b30      	ldr	r3, [pc, #192]	; (80079e4 <HAL_RCC_OscConfig+0x2b4>)
 8007924:	2201      	movs	r2, #1
 8007926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007928:	f7fc fd62 	bl	80043f0 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007930:	f7fc fd5e 	bl	80043f0 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e164      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007942:	4b26      	ldr	r3, [pc, #152]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0x200>
 800794e:	e015      	b.n	800797c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007950:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <HAL_RCC_OscConfig+0x2b4>)
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007956:	f7fc fd4b 	bl	80043f0 <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800795c:	e008      	b.n	8007970 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800795e:	f7fc fd47 	bl	80043f0 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e14d      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007970:	4b1a      	ldr	r3, [pc, #104]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1f0      	bne.n	800795e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 80a0 	beq.w	8007aca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800798a:	2300      	movs	r3, #0
 800798c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800798e:	4b13      	ldr	r3, [pc, #76]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10f      	bne.n	80079ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	4a0e      	ldr	r2, [pc, #56]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80079a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a8:	6413      	str	r3, [r2, #64]	; 0x40
 80079aa:	4b0c      	ldr	r3, [pc, #48]	; (80079dc <HAL_RCC_OscConfig+0x2ac>)
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b2:	60bb      	str	r3, [r7, #8]
 80079b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079b6:	2301      	movs	r3, #1
 80079b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <HAL_RCC_OscConfig+0x2b8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d121      	bne.n	8007a0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079c6:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <HAL_RCC_OscConfig+0x2b8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a07      	ldr	r2, [pc, #28]	; (80079e8 <HAL_RCC_OscConfig+0x2b8>)
 80079cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079d2:	f7fc fd0d 	bl	80043f0 <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079d8:	e011      	b.n	80079fe <HAL_RCC_OscConfig+0x2ce>
 80079da:	bf00      	nop
 80079dc:	40023800 	.word	0x40023800
 80079e0:	42470000 	.word	0x42470000
 80079e4:	42470e80 	.word	0x42470e80
 80079e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ec:	f7fc fd00 	bl	80043f0 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e106      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079fe:	4b85      	ldr	r3, [pc, #532]	; (8007c14 <HAL_RCC_OscConfig+0x4e4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0f0      	beq.n	80079ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d106      	bne.n	8007a20 <HAL_RCC_OscConfig+0x2f0>
 8007a12:	4b81      	ldr	r3, [pc, #516]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a16:	4a80      	ldr	r2, [pc, #512]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a18:	f043 0301 	orr.w	r3, r3, #1
 8007a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a1e:	e01c      	b.n	8007a5a <HAL_RCC_OscConfig+0x32a>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2b05      	cmp	r3, #5
 8007a26:	d10c      	bne.n	8007a42 <HAL_RCC_OscConfig+0x312>
 8007a28:	4b7b      	ldr	r3, [pc, #492]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2c:	4a7a      	ldr	r2, [pc, #488]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a2e:	f043 0304 	orr.w	r3, r3, #4
 8007a32:	6713      	str	r3, [r2, #112]	; 0x70
 8007a34:	4b78      	ldr	r3, [pc, #480]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a38:	4a77      	ldr	r2, [pc, #476]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a40:	e00b      	b.n	8007a5a <HAL_RCC_OscConfig+0x32a>
 8007a42:	4b75      	ldr	r3, [pc, #468]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	4a74      	ldr	r2, [pc, #464]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4e:	4b72      	ldr	r3, [pc, #456]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	4a71      	ldr	r2, [pc, #452]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a54:	f023 0304 	bic.w	r3, r3, #4
 8007a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d015      	beq.n	8007a8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a62:	f7fc fcc5 	bl	80043f0 <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a68:	e00a      	b.n	8007a80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a6a:	f7fc fcc1 	bl	80043f0 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e0c5      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a80:	4b65      	ldr	r3, [pc, #404]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0ee      	beq.n	8007a6a <HAL_RCC_OscConfig+0x33a>
 8007a8c:	e014      	b.n	8007ab8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a8e:	f7fc fcaf 	bl	80043f0 <HAL_GetTick>
 8007a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a94:	e00a      	b.n	8007aac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a96:	f7fc fcab 	bl	80043f0 <HAL_GetTick>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e0af      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aac:	4b5a      	ldr	r3, [pc, #360]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1ee      	bne.n	8007a96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d105      	bne.n	8007aca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007abe:	4b56      	ldr	r3, [pc, #344]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	4a55      	ldr	r2, [pc, #340]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ac8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 809b 	beq.w	8007c0a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ad4:	4b50      	ldr	r3, [pc, #320]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 030c 	and.w	r3, r3, #12
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d05c      	beq.n	8007b9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d141      	bne.n	8007b6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ae8:	4b4c      	ldr	r3, [pc, #304]	; (8007c1c <HAL_RCC_OscConfig+0x4ec>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aee:	f7fc fc7f 	bl	80043f0 <HAL_GetTick>
 8007af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007af4:	e008      	b.n	8007b08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007af6:	f7fc fc7b 	bl	80043f0 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d901      	bls.n	8007b08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e081      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b08:	4b43      	ldr	r3, [pc, #268]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f0      	bne.n	8007af6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69da      	ldr	r2, [r3, #28]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	019b      	lsls	r3, r3, #6
 8007b24:	431a      	orrs	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	085b      	lsrs	r3, r3, #1
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	041b      	lsls	r3, r3, #16
 8007b30:	431a      	orrs	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	061b      	lsls	r3, r3, #24
 8007b38:	4937      	ldr	r1, [pc, #220]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b3e:	4b37      	ldr	r3, [pc, #220]	; (8007c1c <HAL_RCC_OscConfig+0x4ec>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b44:	f7fc fc54 	bl	80043f0 <HAL_GetTick>
 8007b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b4c:	f7fc fc50 	bl	80043f0 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e056      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b5e:	4b2e      	ldr	r3, [pc, #184]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f0      	beq.n	8007b4c <HAL_RCC_OscConfig+0x41c>
 8007b6a:	e04e      	b.n	8007c0a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b6c:	4b2b      	ldr	r3, [pc, #172]	; (8007c1c <HAL_RCC_OscConfig+0x4ec>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b72:	f7fc fc3d 	bl	80043f0 <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b78:	e008      	b.n	8007b8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b7a:	f7fc fc39 	bl	80043f0 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e03f      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b8c:	4b22      	ldr	r3, [pc, #136]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1f0      	bne.n	8007b7a <HAL_RCC_OscConfig+0x44a>
 8007b98:	e037      	b.n	8007c0a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e032      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ba6:	4b1c      	ldr	r3, [pc, #112]	; (8007c18 <HAL_RCC_OscConfig+0x4e8>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d028      	beq.n	8007c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d121      	bne.n	8007c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d11a      	bne.n	8007c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d111      	bne.n	8007c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d107      	bne.n	8007c06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d001      	beq.n	8007c0a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e000      	b.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40007000 	.word	0x40007000
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	42470060 	.word	0x42470060

08007c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e0cc      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c34:	4b68      	ldr	r3, [pc, #416]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 030f 	and.w	r3, r3, #15
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d90c      	bls.n	8007c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c42:	4b65      	ldr	r3, [pc, #404]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4a:	4b63      	ldr	r3, [pc, #396]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d001      	beq.n	8007c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0b8      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d020      	beq.n	8007caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c74:	4b59      	ldr	r3, [pc, #356]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4a58      	ldr	r2, [pc, #352]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c8c:	4b53      	ldr	r3, [pc, #332]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4a52      	ldr	r2, [pc, #328]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c98:	4b50      	ldr	r3, [pc, #320]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	494d      	ldr	r1, [pc, #308]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d044      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d107      	bne.n	8007cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cbe:	4b47      	ldr	r3, [pc, #284]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d119      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e07f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d003      	beq.n	8007cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d107      	bne.n	8007cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cde:	4b3f      	ldr	r3, [pc, #252]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e06f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cee:	4b3b      	ldr	r3, [pc, #236]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e067      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cfe:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f023 0203 	bic.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	4934      	ldr	r1, [pc, #208]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d10:	f7fc fb6e 	bl	80043f0 <HAL_GetTick>
 8007d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d16:	e00a      	b.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d18:	f7fc fb6a 	bl	80043f0 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e04f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d2e:	4b2b      	ldr	r3, [pc, #172]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 020c 	and.w	r2, r3, #12
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d1eb      	bne.n	8007d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d40:	4b25      	ldr	r3, [pc, #148]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 030f 	and.w	r3, r3, #15
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d20c      	bcs.n	8007d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d4e:	4b22      	ldr	r3, [pc, #136]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d56:	4b20      	ldr	r3, [pc, #128]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d001      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e032      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	4916      	ldr	r1, [pc, #88]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d009      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	490e      	ldr	r1, [pc, #56]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007da6:	f000 f82d 	bl	8007e04 <HAL_RCC_GetSysClockFreq>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	490a      	ldr	r1, [pc, #40]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007db8:	5ccb      	ldrb	r3, [r1, r3]
 8007dba:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dc2:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fc f920 	bl	800400c <HAL_InitTick>

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40023c00 	.word	0x40023c00
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	0802fd84 	.word	0x0802fd84
 8007de4:	20000008 	.word	0x20000008
 8007de8:	2000000c 	.word	0x2000000c

08007dec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007df0:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <HAL_RCC_EnableCSS+0x14>)
 8007df2:	2201      	movs	r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
}
 8007df6:	bf00      	nop
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	4247004c 	.word	0x4247004c

08007e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	607b      	str	r3, [r7, #4]
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	2300      	movs	r3, #0
 8007e16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e1c:	4b67      	ldr	r3, [pc, #412]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f003 030c 	and.w	r3, r3, #12
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d00d      	beq.n	8007e44 <HAL_RCC_GetSysClockFreq+0x40>
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	f200 80bd 	bhi.w	8007fa8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <HAL_RCC_GetSysClockFreq+0x34>
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d003      	beq.n	8007e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e36:	e0b7      	b.n	8007fa8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e38:	4b61      	ldr	r3, [pc, #388]	; (8007fc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e3a:	60bb      	str	r3, [r7, #8]
       break;
 8007e3c:	e0b7      	b.n	8007fae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e3e:	4b61      	ldr	r3, [pc, #388]	; (8007fc4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007e40:	60bb      	str	r3, [r7, #8]
      break;
 8007e42:	e0b4      	b.n	8007fae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e44:	4b5d      	ldr	r3, [pc, #372]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e4e:	4b5b      	ldr	r3, [pc, #364]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d04d      	beq.n	8007ef6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e5a:	4b58      	ldr	r3, [pc, #352]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	099b      	lsrs	r3, r3, #6
 8007e60:	461a      	mov	r2, r3
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e6a:	f04f 0100 	mov.w	r1, #0
 8007e6e:	ea02 0800 	and.w	r8, r2, r0
 8007e72:	ea03 0901 	and.w	r9, r3, r1
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f04f 0200 	mov.w	r2, #0
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	014b      	lsls	r3, r1, #5
 8007e84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e88:	0142      	lsls	r2, r0, #5
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	ebb0 0008 	subs.w	r0, r0, r8
 8007e92:	eb61 0109 	sbc.w	r1, r1, r9
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	f04f 0300 	mov.w	r3, #0
 8007e9e:	018b      	lsls	r3, r1, #6
 8007ea0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ea4:	0182      	lsls	r2, r0, #6
 8007ea6:	1a12      	subs	r2, r2, r0
 8007ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8007eac:	f04f 0000 	mov.w	r0, #0
 8007eb0:	f04f 0100 	mov.w	r1, #0
 8007eb4:	00d9      	lsls	r1, r3, #3
 8007eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007eba:	00d0      	lsls	r0, r2, #3
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	eb12 0208 	adds.w	r2, r2, r8
 8007ec4:	eb43 0309 	adc.w	r3, r3, r9
 8007ec8:	f04f 0000 	mov.w	r0, #0
 8007ecc:	f04f 0100 	mov.w	r1, #0
 8007ed0:	0259      	lsls	r1, r3, #9
 8007ed2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007ed6:	0250      	lsls	r0, r2, #9
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4610      	mov	r0, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f04f 0300 	mov.w	r3, #0
 8007ee8:	f7f8 fdc8 	bl	8000a7c <__aeabi_uldivmod>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e04a      	b.n	8007f8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ef6:	4b31      	ldr	r3, [pc, #196]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	099b      	lsrs	r3, r3, #6
 8007efc:	461a      	mov	r2, r3
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f06:	f04f 0100 	mov.w	r1, #0
 8007f0a:	ea02 0400 	and.w	r4, r2, r0
 8007f0e:	ea03 0501 	and.w	r5, r3, r1
 8007f12:	4620      	mov	r0, r4
 8007f14:	4629      	mov	r1, r5
 8007f16:	f04f 0200 	mov.w	r2, #0
 8007f1a:	f04f 0300 	mov.w	r3, #0
 8007f1e:	014b      	lsls	r3, r1, #5
 8007f20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f24:	0142      	lsls	r2, r0, #5
 8007f26:	4610      	mov	r0, r2
 8007f28:	4619      	mov	r1, r3
 8007f2a:	1b00      	subs	r0, r0, r4
 8007f2c:	eb61 0105 	sbc.w	r1, r1, r5
 8007f30:	f04f 0200 	mov.w	r2, #0
 8007f34:	f04f 0300 	mov.w	r3, #0
 8007f38:	018b      	lsls	r3, r1, #6
 8007f3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f3e:	0182      	lsls	r2, r0, #6
 8007f40:	1a12      	subs	r2, r2, r0
 8007f42:	eb63 0301 	sbc.w	r3, r3, r1
 8007f46:	f04f 0000 	mov.w	r0, #0
 8007f4a:	f04f 0100 	mov.w	r1, #0
 8007f4e:	00d9      	lsls	r1, r3, #3
 8007f50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f54:	00d0      	lsls	r0, r2, #3
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	1912      	adds	r2, r2, r4
 8007f5c:	eb45 0303 	adc.w	r3, r5, r3
 8007f60:	f04f 0000 	mov.w	r0, #0
 8007f64:	f04f 0100 	mov.w	r1, #0
 8007f68:	0299      	lsls	r1, r3, #10
 8007f6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007f6e:	0290      	lsls	r0, r2, #10
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4610      	mov	r0, r2
 8007f76:	4619      	mov	r1, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	f7f8 fd7c 	bl	8000a7c <__aeabi_uldivmod>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	4613      	mov	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f8c:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	0c1b      	lsrs	r3, r3, #16
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	3301      	adds	r3, #1
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa4:	60bb      	str	r3, [r7, #8]
      break;
 8007fa6:	e002      	b.n	8007fae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fa8:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007faa:	60bb      	str	r3, [r7, #8]
      break;
 8007fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fae:	68bb      	ldr	r3, [r7, #8]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007fba:	bf00      	nop
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	00f42400 	.word	0x00f42400
 8007fc4:	007a1200 	.word	0x007a1200

08007fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fcc:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8007fce:	681b      	ldr	r3, [r3, #0]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000008 	.word	0x20000008

08007fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fe4:	f7ff fff0 	bl	8007fc8 <HAL_RCC_GetHCLKFreq>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	0a9b      	lsrs	r3, r3, #10
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	4903      	ldr	r1, [pc, #12]	; (8008004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ff6:	5ccb      	ldrb	r3, [r1, r3]
 8007ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40023800 	.word	0x40023800
 8008004:	0802fd94 	.word	0x0802fd94

08008008 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	220f      	movs	r2, #15
 8008016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008018:	4b12      	ldr	r3, [pc, #72]	; (8008064 <HAL_RCC_GetClockConfig+0x5c>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 0203 	and.w	r2, r3, #3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008024:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <HAL_RCC_GetClockConfig+0x5c>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008030:	4b0c      	ldr	r3, [pc, #48]	; (8008064 <HAL_RCC_GetClockConfig+0x5c>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800803c:	4b09      	ldr	r3, [pc, #36]	; (8008064 <HAL_RCC_GetClockConfig+0x5c>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	08db      	lsrs	r3, r3, #3
 8008042:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800804a:	4b07      	ldr	r3, [pc, #28]	; (8008068 <HAL_RCC_GetClockConfig+0x60>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 020f 	and.w	r2, r3, #15
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	601a      	str	r2, [r3, #0]
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40023800 	.word	0x40023800
 8008068:	40023c00 	.word	0x40023c00

0800806c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008070:	4b06      	ldr	r3, [pc, #24]	; (800808c <HAL_RCC_NMI_IRQHandler+0x20>)
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008078:	2b80      	cmp	r3, #128	; 0x80
 800807a:	d104      	bne.n	8008086 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800807c:	f000 f80a 	bl	8008094 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008080:	4b03      	ldr	r3, [pc, #12]	; (8008090 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008082:	2280      	movs	r2, #128	; 0x80
 8008084:	701a      	strb	r2, [r3, #0]
  }
}
 8008086:	bf00      	nop
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	40023800 	.word	0x40023800
 8008090:	4002380e 	.word	0x4002380e

08008094 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
	...

080080a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10b      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d105      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d075      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80080d8:	4bad      	ldr	r3, [pc, #692]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080de:	f7fc f987 	bl	80043f0 <HAL_GetTick>
 80080e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080e4:	e008      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080e6:	f7fc f983 	bl	80043f0 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d901      	bls.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e18b      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080f8:	4ba6      	ldr	r3, [pc, #664]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f0      	bne.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d009      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	019a      	lsls	r2, r3, #6
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	071b      	lsls	r3, r3, #28
 800811c:	499d      	ldr	r1, [pc, #628]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01f      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008130:	4b98      	ldr	r3, [pc, #608]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008136:	0f1b      	lsrs	r3, r3, #28
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	019a      	lsls	r2, r3, #6
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	061b      	lsls	r3, r3, #24
 800814a:	431a      	orrs	r2, r3
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	071b      	lsls	r3, r3, #28
 8008150:	4990      	ldr	r1, [pc, #576]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008152:	4313      	orrs	r3, r2
 8008154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008158:	4b8e      	ldr	r3, [pc, #568]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800815a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800815e:	f023 021f 	bic.w	r2, r3, #31
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	3b01      	subs	r3, #1
 8008168:	498a      	ldr	r1, [pc, #552]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800816a:	4313      	orrs	r3, r2
 800816c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00d      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	019a      	lsls	r2, r3, #6
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	061b      	lsls	r3, r3, #24
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	071b      	lsls	r3, r3, #28
 8008190:	4980      	ldr	r1, [pc, #512]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008198:	4b7d      	ldr	r3, [pc, #500]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800819a:	2201      	movs	r2, #1
 800819c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800819e:	f7fc f927 	bl	80043f0 <HAL_GetTick>
 80081a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081a4:	e008      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081a6:	f7fc f923 	bl	80043f0 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d901      	bls.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e12b      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80081b8:	4b76      	ldr	r3, [pc, #472]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d0f0      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d105      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d079      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80081dc:	4b6e      	ldr	r3, [pc, #440]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081e2:	f7fc f905 	bl	80043f0 <HAL_GetTick>
 80081e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081e8:	e008      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80081ea:	f7fc f901 	bl	80043f0 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e109      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80081fc:	4b65      	ldr	r3, [pc, #404]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008208:	d0ef      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d020      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008216:	4b5f      	ldr	r3, [pc, #380]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800821c:	0f1b      	lsrs	r3, r3, #28
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	019a      	lsls	r2, r3, #6
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	061b      	lsls	r3, r3, #24
 8008230:	431a      	orrs	r2, r3
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	071b      	lsls	r3, r3, #28
 8008236:	4957      	ldr	r1, [pc, #348]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008238:	4313      	orrs	r3, r2
 800823a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800823e:	4b55      	ldr	r3, [pc, #340]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008244:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	3b01      	subs	r3, #1
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	4950      	ldr	r1, [pc, #320]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008252:	4313      	orrs	r3, r2
 8008254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01e      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008264:	4b4b      	ldr	r3, [pc, #300]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826a:	0e1b      	lsrs	r3, r3, #24
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	019a      	lsls	r2, r3, #6
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	061b      	lsls	r3, r3, #24
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	071b      	lsls	r3, r3, #28
 8008284:	4943      	ldr	r1, [pc, #268]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008286:	4313      	orrs	r3, r2
 8008288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800828c:	4b41      	ldr	r3, [pc, #260]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800828e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008292:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	493e      	ldr	r1, [pc, #248]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800829c:	4313      	orrs	r3, r2
 800829e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80082a2:	4b3d      	ldr	r3, [pc, #244]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082a8:	f7fc f8a2 	bl	80043f0 <HAL_GetTick>
 80082ac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082ae:	e008      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80082b0:	f7fc f89e 	bl	80043f0 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e0a6      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80082c2:	4b34      	ldr	r3, [pc, #208]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ce:	d1ef      	bne.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 808d 	beq.w	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	4b2c      	ldr	r3, [pc, #176]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	4a2b      	ldr	r2, [pc, #172]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ec:	6413      	str	r3, [r2, #64]	; 0x40
 80082ee:	4b29      	ldr	r3, [pc, #164]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80082fa:	4b28      	ldr	r3, [pc, #160]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a27      	ldr	r2, [pc, #156]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008304:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008306:	f7fc f873 	bl	80043f0 <HAL_GetTick>
 800830a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800830c:	e008      	b.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800830e:	f7fc f86f 	bl	80043f0 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d901      	bls.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e077      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008320:	4b1e      	ldr	r3, [pc, #120]	; (800839c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0f0      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800832c:	4b19      	ldr	r3, [pc, #100]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800832e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008334:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d039      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	429a      	cmp	r2, r3
 8008348:	d032      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800834a:	4b12      	ldr	r3, [pc, #72]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008352:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008354:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800835a:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008360:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008366:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b01      	cmp	r3, #1
 8008370:	d11e      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008372:	f7fc f83d 	bl	80043f0 <HAL_GetTick>
 8008376:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008378:	e014      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800837a:	f7fc f839 	bl	80043f0 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	f241 3288 	movw	r2, #5000	; 0x1388
 8008388:	4293      	cmp	r3, r2
 800838a:	d90b      	bls.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e03f      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008390:	42470068 	.word	0x42470068
 8008394:	40023800 	.word	0x40023800
 8008398:	42470070 	.word	0x42470070
 800839c:	40007000 	.word	0x40007000
 80083a0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083a4:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a8:	f003 0302 	and.w	r3, r3, #2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0e4      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083bc:	d10d      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x336>
 80083be:	4b16      	ldr	r3, [pc, #88]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80083ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083d2:	4911      	ldr	r1, [pc, #68]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	608b      	str	r3, [r1, #8]
 80083d8:	e005      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80083da:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	4a0e      	ldr	r2, [pc, #56]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80083e4:	6093      	str	r3, [r2, #8]
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083f2:	4909      	ldr	r1, [pc, #36]	; (8008418 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80083f4:	4313      	orrs	r3, r2
 80083f6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0310 	and.w	r3, r3, #16
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800840a:	4b04      	ldr	r3, [pc, #16]	; (800841c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800840c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	40023800 	.word	0x40023800
 800841c:	424711e0 	.word	0x424711e0

08008420 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e022      	b.n	8008478 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d105      	bne.n	800844a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7fb fbbd 	bl	8003bc4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2203      	movs	r2, #3
 800844e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f814 	bl	8008480 <HAL_SD_InitCard>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e00a      	b.n	8008478 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008480:	b5b0      	push	{r4, r5, r7, lr}
 8008482:	b08e      	sub	sp, #56	; 0x38
 8008484:	af04      	add	r7, sp, #16
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008488:	2300      	movs	r3, #0
 800848a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008490:	2300      	movs	r3, #0
 8008492:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008494:	2300      	movs	r3, #0
 8008496:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008498:	2300      	movs	r3, #0
 800849a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800849c:	2376      	movs	r3, #118	; 0x76
 800849e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681d      	ldr	r5, [r3, #0]
 80084a4:	466c      	mov	r4, sp
 80084a6:	f107 0314 	add.w	r3, r7, #20
 80084aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80084ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084b2:	f107 0308 	add.w	r3, r7, #8
 80084b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084b8:	4628      	mov	r0, r5
 80084ba:	f002 fd27 	bl	800af0c <SDIO_Init>
 80084be:	4603      	mov	r3, r0
 80084c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80084c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e04c      	b.n	800856a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80084d0:	4b28      	ldr	r3, [pc, #160]	; (8008574 <HAL_SD_InitCard+0xf4>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f002 fd4e 	bl	800af7c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80084e0:	4b24      	ldr	r3, [pc, #144]	; (8008574 <HAL_SD_InitCard+0xf4>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fe10 	bl	800910c <SD_PowerON>
 80084ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e02e      	b.n	800856a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fd31 	bl	8008f74 <SD_InitCard>
 8008512:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00b      	beq.n	8008532 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	431a      	orrs	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e01b      	b.n	800856a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800853a:	4618      	mov	r0, r3
 800853c:	f002 fdb1 	bl	800b0a2 <SDMMC_CmdBlockLength>
 8008540:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00f      	beq.n	8008568 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a0a      	ldr	r2, [pc, #40]	; (8008578 <HAL_SD_InitCard+0xf8>)
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	431a      	orrs	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3728      	adds	r7, #40	; 0x28
 800856e:	46bd      	mov	sp, r7
 8008570:	bdb0      	pop	{r4, r5, r7, pc}
 8008572:	bf00      	nop
 8008574:	422580a0 	.word	0x422580a0
 8008578:	004005ff 	.word	0x004005ff

0800857c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08c      	sub	sp, #48	; 0x30
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d107      	bne.n	80085a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e0c0      	b.n	8008726 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	f040 80b9 	bne.w	8008724 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	441a      	add	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d907      	bls.n	80085d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e0a7      	b.n	8008726 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2203      	movs	r2, #3
 80085da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	6812      	ldr	r2, [r2, #0]
 80085f0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80085f4:	f043 0302 	orr.w	r3, r3, #2
 80085f8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fe:	4a4c      	ldr	r2, [pc, #304]	; (8008730 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008600:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	4a4b      	ldr	r2, [pc, #300]	; (8008734 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008608:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	2200      	movs	r2, #0
 8008610:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008616:	2200      	movs	r2, #0
 8008618:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3380      	adds	r3, #128	; 0x80
 8008640:	4619      	mov	r1, r3
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	025b      	lsls	r3, r3, #9
 8008648:	089b      	lsrs	r3, r3, #2
 800864a:	f7fc fe19 	bl	8005280 <HAL_DMA_Start_IT>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d017      	beq.n	8008684 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008662:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a33      	ldr	r2, [pc, #204]	; (8008738 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800866a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e050      	b.n	8008726 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008684:	4b2d      	ldr	r3, [pc, #180]	; (800873c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008686:	2201      	movs	r2, #1
 8008688:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800868e:	2b01      	cmp	r3, #1
 8008690:	d002      	beq.n	8008698 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	025b      	lsls	r3, r3, #9
 8008696:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008698:	f04f 33ff 	mov.w	r3, #4294967295
 800869c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	025b      	lsls	r3, r3, #9
 80086a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80086a4:	2390      	movs	r3, #144	; 0x90
 80086a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80086a8:	2302      	movs	r3, #2
 80086aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f107 0210 	add.w	r2, r7, #16
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f002 fcc3 	bl	800b04a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d90a      	bls.n	80086e0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2282      	movs	r2, #130	; 0x82
 80086ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086d6:	4618      	mov	r0, r3
 80086d8:	f002 fd27 	bl	800b12a <SDMMC_CmdReadMultiBlock>
 80086dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80086de:	e009      	b.n	80086f4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2281      	movs	r2, #129	; 0x81
 80086e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ec:	4618      	mov	r0, r3
 80086ee:	f002 fcfa 	bl	800b0e6 <SDMMC_CmdReadSingleBlock>
 80086f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d012      	beq.n	8008720 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a0e      	ldr	r2, [pc, #56]	; (8008738 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008700:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008708:	431a      	orrs	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e002      	b.n	8008726 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	e000      	b.n	8008726 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8008724:	2302      	movs	r3, #2
  }
}
 8008726:	4618      	mov	r0, r3
 8008728:	3730      	adds	r7, #48	; 0x30
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	08008e5f 	.word	0x08008e5f
 8008734:	08008ed1 	.word	0x08008ed1
 8008738:	004005ff 	.word	0x004005ff
 800873c:	4225858c 	.word	0x4225858c

08008740 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08c      	sub	sp, #48	; 0x30
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d107      	bne.n	8008768 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e0c5      	b.n	80088f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b01      	cmp	r3, #1
 8008772:	f040 80be 	bne.w	80088f2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800877c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	441a      	add	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008786:	429a      	cmp	r2, r3
 8008788:	d907      	bls.n	800879a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e0ac      	b.n	80088f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2203      	movs	r2, #3
 800879e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2200      	movs	r2, #0
 80087a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	6812      	ldr	r2, [r2, #0]
 80087b4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80087b8:	f043 0302 	orr.w	r3, r3, #2
 80087bc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c2:	4a4e      	ldr	r2, [pc, #312]	; (80088fc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80087c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ca:	4a4d      	ldr	r2, [pc, #308]	; (8008900 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80087cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d2:	2200      	movs	r2, #0
 80087d4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d002      	beq.n	80087e4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	025b      	lsls	r3, r3, #9
 80087e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d90a      	bls.n	8008800 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	22a0      	movs	r2, #160	; 0xa0
 80087ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087f6:	4618      	mov	r0, r3
 80087f8:	f002 fcdb 	bl	800b1b2 <SDMMC_CmdWriteMultiBlock>
 80087fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80087fe:	e009      	b.n	8008814 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2290      	movs	r2, #144	; 0x90
 8008804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800880c:	4618      	mov	r0, r3
 800880e:	f002 fcae 	bl	800b16e <SDMMC_CmdWriteSingleBlock>
 8008812:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d012      	beq.n	8008840 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a39      	ldr	r2, [pc, #228]	; (8008904 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	431a      	orrs	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e059      	b.n	80088f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008840:	4b31      	ldr	r3, [pc, #196]	; (8008908 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008842:	2201      	movs	r2, #1
 8008844:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884a:	2240      	movs	r2, #64	; 0x40
 800884c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800886e:	68b9      	ldr	r1, [r7, #8]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3380      	adds	r3, #128	; 0x80
 8008876:	461a      	mov	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	025b      	lsls	r3, r3, #9
 800887c:	089b      	lsrs	r3, r3, #2
 800887e:	f7fc fcff 	bl	8005280 <HAL_DMA_Start_IT>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01c      	beq.n	80088c2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8008896:	f023 0302 	bic.w	r3, r3, #2
 800889a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a18      	ldr	r2, [pc, #96]	; (8008904 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80088a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e018      	b.n	80088f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295
 80088c6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	025b      	lsls	r3, r3, #9
 80088cc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80088ce:	2390      	movs	r3, #144	; 0x90
 80088d0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80088da:	2301      	movs	r3, #1
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f107 0210 	add.w	r2, r7, #16
 80088e6:	4611      	mov	r1, r2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f002 fbae 	bl	800b04a <SDIO_ConfigData>

      return HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e000      	b.n	80088f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80088f2:	2302      	movs	r3, #2
  }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3730      	adds	r7, #48	; 0x30
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	08008e35 	.word	0x08008e35
 8008900:	08008ed1 	.word	0x08008ed1
 8008904:	004005ff 	.word	0x004005ff
 8008908:	4225858c 	.word	0x4225858c

0800890c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800892e:	0f9b      	lsrs	r3, r3, #30
 8008930:	b2da      	uxtb	r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800893a:	0e9b      	lsrs	r3, r3, #26
 800893c:	b2db      	uxtb	r3, r3
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	b2da      	uxtb	r2, r3
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800894c:	0e1b      	lsrs	r3, r3, #24
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0303 	and.w	r3, r3, #3
 8008954:	b2da      	uxtb	r2, r3
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800895e:	0c1b      	lsrs	r3, r3, #16
 8008960:	b2da      	uxtb	r2, r3
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800896a:	0a1b      	lsrs	r3, r3, #8
 800896c:	b2da      	uxtb	r2, r3
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008976:	b2da      	uxtb	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008980:	0d1b      	lsrs	r3, r3, #20
 8008982:	b29a      	uxth	r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800898c:	0c1b      	lsrs	r3, r3, #16
 800898e:	b2db      	uxtb	r3, r3
 8008990:	f003 030f 	and.w	r3, r3, #15
 8008994:	b2da      	uxtb	r2, r3
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800899e:	0bdb      	lsrs	r3, r3, #15
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089b0:	0b9b      	lsrs	r3, r3, #14
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c2:	0b5b      	lsrs	r3, r3, #13
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089d4:	0b1b      	lsrs	r3, r3, #12
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2200      	movs	r2, #0
 80089e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d163      	bne.n	8008ab8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089f4:	009a      	lsls	r2, r3, #2
 80089f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089fa:	4013      	ands	r3, r2
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008a00:	0f92      	lsrs	r2, r2, #30
 8008a02:	431a      	orrs	r2, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a0c:	0edb      	lsrs	r3, r3, #27
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	f003 0307 	and.w	r3, r3, #7
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a1e:	0e1b      	lsrs	r3, r3, #24
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a30:	0d5b      	lsrs	r3, r3, #21
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a42:	0c9b      	lsrs	r3, r3, #18
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a54:	0bdb      	lsrs	r3, r3, #15
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	7e1b      	ldrb	r3, [r3, #24]
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	3302      	adds	r3, #2
 8008a78:	2201      	movs	r2, #1
 8008a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008a82:	fb02 f203 	mul.w	r2, r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	7a1b      	ldrb	r3, [r3, #8]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 030f 	and.w	r3, r3, #15
 8008a94:	2201      	movs	r2, #1
 8008a96:	409a      	lsls	r2, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008aa4:	0a52      	lsrs	r2, r2, #9
 8008aa6:	fb02 f203 	mul.w	r2, r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ab4:	661a      	str	r2, [r3, #96]	; 0x60
 8008ab6:	e031      	b.n	8008b1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d11d      	bne.n	8008afc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac4:	041b      	lsls	r3, r3, #16
 8008ac6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ace:	0c1b      	lsrs	r3, r3, #16
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	3301      	adds	r3, #1
 8008adc:	029a      	lsls	r2, r3, #10
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008af0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	661a      	str	r2, [r3, #96]	; 0x60
 8008afa:	e00f      	b.n	8008b1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a58      	ldr	r2, [pc, #352]	; (8008c64 <HAL_SD_GetCardCSD+0x344>)
 8008b02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e09d      	b.n	8008c58 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b20:	0b9b      	lsrs	r3, r3, #14
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b32:	09db      	lsrs	r3, r3, #7
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b54:	0fdb      	lsrs	r3, r3, #31
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b60:	0f5b      	lsrs	r3, r3, #29
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 0303 	and.w	r3, r3, #3
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b72:	0e9b      	lsrs	r3, r3, #26
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b84:	0d9b      	lsrs	r3, r3, #22
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b96:	0d5b      	lsrs	r3, r3, #21
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb2:	0c1b      	lsrs	r3, r3, #16
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc6:	0bdb      	lsrs	r3, r3, #15
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bda:	0b9b      	lsrs	r3, r3, #14
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	0b5b      	lsrs	r3, r3, #13
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	0b1b      	lsrs	r3, r3, #12
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c16:	0a9b      	lsrs	r3, r3, #10
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	f003 0303 	and.w	r3, r3, #3
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	004005ff 	.word	0x004005ff

08008c68 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008cc0:	b5b0      	push	{r4, r5, r7, lr}
 8008cc2:	b08e      	sub	sp, #56	; 0x38
 8008cc4:	af04      	add	r7, sp, #16
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d02e      	beq.n	8008d3e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce6:	d106      	bne.n	8008cf6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	639a      	str	r2, [r3, #56]	; 0x38
 8008cf4:	e029      	b.n	8008d4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cfc:	d10a      	bne.n	8008d14 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 faba 	bl	8009278 <SD_WideBus_Enable>
 8008d04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	639a      	str	r2, [r3, #56]	; 0x38
 8008d12:	e01a      	b.n	8008d4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10a      	bne.n	8008d30 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 faf7 	bl	800930e <SD_WideBus_Disable>
 8008d20:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8008d2e:	e00c      	b.n	8008d4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8008d3c:	e005      	b.n	8008d4a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d42:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00b      	beq.n	8008d6a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a26      	ldr	r2, [pc, #152]	; (8008df0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008d58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d68:	e01f      	b.n	8008daa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681d      	ldr	r5, [r3, #0]
 8008d90:	466c      	mov	r4, sp
 8008d92:	f107 0314 	add.w	r3, r7, #20
 8008d96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d9e:	f107 0308 	add.w	r3, r7, #8
 8008da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008da4:	4628      	mov	r0, r5
 8008da6:	f002 f8b1 	bl	800af0c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008db2:	4618      	mov	r0, r3
 8008db4:	f002 f975 	bl	800b0a2 <SDMMC_CmdBlockLength>
 8008db8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00c      	beq.n	8008dda <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a0a      	ldr	r2, [pc, #40]	; (8008df0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3728      	adds	r7, #40	; 0x28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bdb0      	pop	{r4, r5, r7, pc}
 8008dee:	bf00      	nop
 8008df0:	004005ff 	.word	0x004005ff

08008df4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e00:	f107 030c 	add.w	r3, r7, #12
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fa0e 	bl	8009228 <SD_SendStatus>
 8008e0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	0a5b      	lsrs	r3, r3, #9
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e2a:	693b      	ldr	r3, [r7, #16]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e40:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e70:	2b82      	cmp	r3, #130	; 0x82
 8008e72:	d111      	bne.n	8008e98 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 f9bd 	bl	800b1f8 <SDMMC_CmdStopTransfer>
 8008e7e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d008      	beq.n	8008e98 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7ff fd3a 	bl	800890c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0208 	bic.w	r2, r2, #8
 8008ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f240 523a 	movw	r2, #1338	; 0x53a
 8008eb0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f002 fe11 	bl	800bae8 <HAL_SD_RxCpltCallback>
#endif
}
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7fc fbb0 	bl	8005644 <HAL_DMA_GetError>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d03e      	beq.n	8008f68 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d002      	beq.n	8008f06 <SD_DMAError+0x36>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d12d      	bne.n	8008f62 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a19      	ldr	r2, [pc, #100]	; (8008f70 <SD_DMAError+0xa0>)
 8008f0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008f1c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008f2a:	6978      	ldr	r0, [r7, #20]
 8008f2c:	f7ff ff62 	bl	8008df4 <HAL_SD_GetCardState>
 8008f30:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b06      	cmp	r3, #6
 8008f36:	d002      	beq.n	8008f3e <SD_DMAError+0x6e>
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	d10a      	bne.n	8008f54 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f002 f958 	bl	800b1f8 <SDMMC_CmdStopTransfer>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008f62:	6978      	ldr	r0, [r7, #20]
 8008f64:	f7ff fcd2 	bl	800890c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008f68:	bf00      	nop
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	004005ff 	.word	0x004005ff

08008f74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f74:	b5b0      	push	{r4, r5, r7, lr}
 8008f76:	b094      	sub	sp, #80	; 0x50
 8008f78:	af04      	add	r7, sp, #16
 8008f7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f002 f808 	bl	800af9a <SDIO_GetPowerState>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f94:	e0b6      	b.n	8009104 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d02f      	beq.n	8008ffe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f002 fa32 	bl	800b40c <SDMMC_CmdSendCID>
 8008fa8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <SD_InitCard+0x40>
    {
      return errorstate;
 8008fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb2:	e0a7      	b.n	8009104 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f002 f832 	bl	800b024 <SDIO_GetResponse>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2104      	movs	r1, #4
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f002 f829 	bl	800b024 <SDIO_GetResponse>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2108      	movs	r1, #8
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f002 f820 	bl	800b024 <SDIO_GetResponse>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	210c      	movs	r1, #12
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f002 f817 	bl	800b024 <SDIO_GetResponse>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009002:	2b03      	cmp	r3, #3
 8009004:	d00d      	beq.n	8009022 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f107 020e 	add.w	r2, r7, #14
 800900e:	4611      	mov	r1, r2
 8009010:	4618      	mov	r0, r3
 8009012:	f002 fa38 	bl	800b486 <SDMMC_CmdSetRelAdd>
 8009016:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <SD_InitCard+0xae>
    {
      return errorstate;
 800901e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009020:	e070      	b.n	8009104 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009026:	2b03      	cmp	r3, #3
 8009028:	d036      	beq.n	8009098 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800902a:	89fb      	ldrh	r3, [r7, #14]
 800902c:	461a      	mov	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903a:	041b      	lsls	r3, r3, #16
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f002 fa02 	bl	800b448 <SDMMC_CmdSendCSD>
 8009044:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <SD_InitCard+0xdc>
    {
      return errorstate;
 800904c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904e:	e059      	b.n	8009104 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2100      	movs	r1, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f001 ffe4 	bl	800b024 <SDIO_GetResponse>
 800905c:	4602      	mov	r2, r0
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2104      	movs	r1, #4
 8009068:	4618      	mov	r0, r3
 800906a:	f001 ffdb 	bl	800b024 <SDIO_GetResponse>
 800906e:	4602      	mov	r2, r0
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2108      	movs	r1, #8
 800907a:	4618      	mov	r0, r3
 800907c:	f001 ffd2 	bl	800b024 <SDIO_GetResponse>
 8009080:	4602      	mov	r2, r0
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	210c      	movs	r1, #12
 800908c:	4618      	mov	r0, r3
 800908e:	f001 ffc9 	bl	800b024 <SDIO_GetResponse>
 8009092:	4602      	mov	r2, r0
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2104      	movs	r1, #4
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 ffc0 	bl	800b024 <SDIO_GetResponse>
 80090a4:	4603      	mov	r3, r0
 80090a6:	0d1a      	lsrs	r2, r3, #20
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80090ac:	f107 0310 	add.w	r3, r7, #16
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fc34 	bl	8008920 <HAL_SD_GetCardCSD>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090c2:	e01f      	b.n	8009104 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6819      	ldr	r1, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090cc:	041b      	lsls	r3, r3, #16
 80090ce:	461a      	mov	r2, r3
 80090d0:	f04f 0300 	mov.w	r3, #0
 80090d4:	4608      	mov	r0, r1
 80090d6:	f002 f8b1 	bl	800b23c <SDMMC_CmdSelDesel>
 80090da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80090dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <SD_InitCard+0x172>
  {
    return errorstate;
 80090e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e4:	e00e      	b.n	8009104 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681d      	ldr	r5, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	466c      	mov	r4, sp
 80090ee:	f103 0210 	add.w	r2, r3, #16
 80090f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80090f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090f8:	3304      	adds	r3, #4
 80090fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090fc:	4628      	mov	r0, r5
 80090fe:	f001 ff05 	bl	800af0c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3740      	adds	r7, #64	; 0x40
 8009108:	46bd      	mov	sp, r7
 800910a:	bdb0      	pop	{r4, r5, r7, pc}

0800910c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	2300      	movs	r3, #0
 800911e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f002 f8ac 	bl	800b282 <SDMMC_CmdGoIdleState>
 800912a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	e072      	b.n	800921c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4618      	mov	r0, r3
 800913c:	f002 f8bf 	bl	800b2be <SDMMC_CmdOperCond>
 8009140:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00d      	beq.n	8009164 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4618      	mov	r0, r3
 8009154:	f002 f895 	bl	800b282 <SDMMC_CmdGoIdleState>
 8009158:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d004      	beq.n	800916a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	e05b      	b.n	800921c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916e:	2b01      	cmp	r3, #1
 8009170:	d137      	bne.n	80091e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2100      	movs	r1, #0
 8009178:	4618      	mov	r0, r3
 800917a:	f002 f8bf 	bl	800b2fc <SDMMC_CmdAppCommand>
 800917e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d02d      	beq.n	80091e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009186:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800918a:	e047      	b.n	800921c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f002 f8b2 	bl	800b2fc <SDMMC_CmdAppCommand>
 8009198:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	e03b      	b.n	800921c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	491e      	ldr	r1, [pc, #120]	; (8009224 <SD_PowerON+0x118>)
 80091aa:	4618      	mov	r0, r3
 80091ac:	f002 f8c8 	bl	800b340 <SDMMC_CmdAppOperCommand>
 80091b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091bc:	e02e      	b.n	800921c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2100      	movs	r1, #0
 80091c4:	4618      	mov	r0, r3
 80091c6:	f001 ff2d 	bl	800b024 <SDIO_GetResponse>
 80091ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	0fdb      	lsrs	r3, r3, #31
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d101      	bne.n	80091d8 <SD_PowerON+0xcc>
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <SD_PowerON+0xce>
 80091d8:	2300      	movs	r3, #0
 80091da:	613b      	str	r3, [r7, #16]

    count++;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	3301      	adds	r3, #1
 80091e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d802      	bhi.n	80091f2 <SD_PowerON+0xe6>
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0cc      	beq.n	800918c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d902      	bls.n	8009202 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80091fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009200:	e00c      	b.n	800921c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	645a      	str	r2, [r3, #68]	; 0x44
 8009212:	e002      	b.n	800921a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	c1100000 	.word	0xc1100000

08009228 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d102      	bne.n	800923e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009238:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800923c:	e018      	b.n	8009270 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009246:	041b      	lsls	r3, r3, #16
 8009248:	4619      	mov	r1, r3
 800924a:	4610      	mov	r0, r2
 800924c:	f002 f93c 	bl	800b4c8 <SDMMC_CmdSendStatus>
 8009250:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	e009      	b.n	8009270 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2100      	movs	r1, #0
 8009262:	4618      	mov	r0, r3
 8009264:	f001 fede 	bl	800b024 <SDIO_GetResponse>
 8009268:	4602      	mov	r2, r0
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009280:	2300      	movs	r3, #0
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	2300      	movs	r3, #0
 8009286:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f001 fec8 	bl	800b024 <SDIO_GetResponse>
 8009294:	4603      	mov	r3, r0
 8009296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800929a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800929e:	d102      	bne.n	80092a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092a4:	e02f      	b.n	8009306 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092a6:	f107 030c 	add.w	r3, r7, #12
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f879 	bl	80093a4 <SD_FindSCR>
 80092b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	e023      	b.n	8009306 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d01c      	beq.n	8009302 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d0:	041b      	lsls	r3, r3, #16
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f002 f811 	bl	800b2fc <SDMMC_CmdAppCommand>
 80092da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	e00f      	b.n	8009306 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2102      	movs	r1, #2
 80092ec:	4618      	mov	r0, r3
 80092ee:	f002 f84a 	bl	800b386 <SDMMC_CmdBusWidth>
 80092f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	e003      	b.n	8009306 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80092fe:	2300      	movs	r3, #0
 8009300:	e001      	b.n	8009306 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009302:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b086      	sub	sp, #24
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009316:	2300      	movs	r3, #0
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2100      	movs	r1, #0
 8009324:	4618      	mov	r0, r3
 8009326:	f001 fe7d 	bl	800b024 <SDIO_GetResponse>
 800932a:	4603      	mov	r3, r0
 800932c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009334:	d102      	bne.n	800933c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800933a:	e02f      	b.n	800939c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800933c:	f107 030c 	add.w	r3, r7, #12
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f82e 	bl	80093a4 <SD_FindSCR>
 8009348:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	e023      	b.n	800939c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d01c      	beq.n	8009398 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	4619      	mov	r1, r3
 800936a:	4610      	mov	r0, r2
 800936c:	f001 ffc6 	bl	800b2fc <SDMMC_CmdAppCommand>
 8009370:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	e00f      	b.n	800939c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2100      	movs	r1, #0
 8009382:	4618      	mov	r0, r3
 8009384:	f001 ffff 	bl	800b386 <SDMMC_CmdBusWidth>
 8009388:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d001      	beq.n	8009394 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	e003      	b.n	800939c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009394:	2300      	movs	r3, #0
 8009396:	e001      	b.n	800939c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009398:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093a4:	b590      	push	{r4, r7, lr}
 80093a6:	b08f      	sub	sp, #60	; 0x3c
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093ae:	f7fb f81f 	bl	80043f0 <HAL_GetTick>
 80093b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80093b8:	2300      	movs	r3, #0
 80093ba:	60bb      	str	r3, [r7, #8]
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2108      	movs	r1, #8
 80093ca:	4618      	mov	r0, r3
 80093cc:	f001 fe69 	bl	800b0a2 <SDMMC_CmdBlockLength>
 80093d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	e0b2      	b.n	8009542 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e4:	041b      	lsls	r3, r3, #16
 80093e6:	4619      	mov	r1, r3
 80093e8:	4610      	mov	r0, r2
 80093ea:	f001 ff87 	bl	800b2fc <SDMMC_CmdAppCommand>
 80093ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	e0a3      	b.n	8009542 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093fa:	f04f 33ff 	mov.w	r3, #4294967295
 80093fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009400:	2308      	movs	r3, #8
 8009402:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009404:	2330      	movs	r3, #48	; 0x30
 8009406:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009408:	2302      	movs	r3, #2
 800940a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800940c:	2300      	movs	r3, #0
 800940e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009410:	2301      	movs	r3, #1
 8009412:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f107 0210 	add.w	r2, r7, #16
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f001 fe13 	bl	800b04a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4618      	mov	r0, r3
 800942a:	f001 ffce 	bl	800b3ca <SDMMC_CmdSendSCR>
 800942e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009432:	2b00      	cmp	r3, #0
 8009434:	d02a      	beq.n	800948c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	e083      	b.n	8009542 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00f      	beq.n	8009468 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6819      	ldr	r1, [r3, #0]
 800944c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	f107 0208 	add.w	r2, r7, #8
 8009454:	18d4      	adds	r4, r2, r3
 8009456:	4608      	mov	r0, r1
 8009458:	f001 fd83 	bl	800af62 <SDIO_ReadFIFO>
 800945c:	4603      	mov	r3, r0
 800945e:	6023      	str	r3, [r4, #0]
      index++;
 8009460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009462:	3301      	adds	r3, #1
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
 8009466:	e006      	b.n	8009476 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d012      	beq.n	800949c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009476:	f7fa ffbb 	bl	80043f0 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d102      	bne.n	800948c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009486:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800948a:	e05a      	b.n	8009542 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009492:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0cf      	beq.n	800943a <SD_FindSCR+0x96>
 800949a:	e000      	b.n	800949e <SD_FindSCR+0xfa>
      break;
 800949c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2208      	movs	r2, #8
 80094b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094b4:	2308      	movs	r3, #8
 80094b6:	e044      	b.n	8009542 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094be:	f003 0302 	and.w	r3, r3, #2
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d005      	beq.n	80094d2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2202      	movs	r2, #2
 80094cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094ce:	2302      	movs	r3, #2
 80094d0:	e037      	b.n	8009542 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2220      	movs	r2, #32
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80094e8:	2320      	movs	r3, #32
 80094ea:	e02a      	b.n	8009542 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	061a      	lsls	r2, r3, #24
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009502:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	0a1b      	lsrs	r3, r3, #8
 8009508:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800950c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	0e1b      	lsrs	r3, r3, #24
 8009512:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009516:	601a      	str	r2, [r3, #0]
    scr++;
 8009518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951a:	3304      	adds	r3, #4
 800951c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	061a      	lsls	r2, r3, #24
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	021b      	lsls	r3, r3, #8
 8009526:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800952a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	0a1b      	lsrs	r3, r3, #8
 8009530:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009534:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	0e1b      	lsrs	r3, r3, #24
 800953a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800953c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	373c      	adds	r7, #60	; 0x3c
 8009546:	46bd      	mov	sp, r7
 8009548:	bd90      	pop	{r4, r7, pc}

0800954a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e025      	b.n	80095aa <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fa fd40 	bl	8003ff8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3304      	adds	r3, #4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f001 fb90 	bl	800acb0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6818      	ldr	r0, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	461a      	mov	r2, r3
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	f001 fbfb 	bl	800ad96 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
*/
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d10a      	bne.n	80095de <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f80c 	bl	80095e6 <HAL_SDRAM_RefreshErrorCallback>
#endif

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	695a      	ldr	r2, [r3, #20]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0201 	orr.w	r2, r2, #1
 80095dc:	615a      	str	r2, [r3, #20]
  }
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module. 
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */ 
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b02      	cmp	r3, #2
 8009610:	d101      	bne.n	8009616 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009612:	2302      	movs	r3, #2
 8009614:	e018      	b.n	8009648 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2202      	movs	r2, #2
 800961a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	4618      	mov	r0, r3
 8009628:	f001 fc34 	bl	800ae94 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b02      	cmp	r3, #2
 8009632:	d104      	bne.n	800963e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2205      	movs	r2, #5
 8009638:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800963c:	e003      	b.n	8009646 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e041      	b.n	80096e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d106      	bne.n	800967c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7fa fb0c 	bl	8003c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3304      	adds	r3, #4
 800968c:	4619      	mov	r1, r3
 800968e:	4610      	mov	r0, r2
 8009690:	f000 ff1c 	bl	800a4cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b01      	cmp	r3, #1
 8009702:	d001      	beq.n	8009708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e04e      	b.n	80097a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68da      	ldr	r2, [r3, #12]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f042 0201 	orr.w	r2, r2, #1
 800971e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a23      	ldr	r2, [pc, #140]	; (80097b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d022      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0x80>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009732:	d01d      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0x80>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a1f      	ldr	r2, [pc, #124]	; (80097b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d018      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0x80>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a1e      	ldr	r2, [pc, #120]	; (80097bc <HAL_TIM_Base_Start_IT+0xcc>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d013      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0x80>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a1c      	ldr	r2, [pc, #112]	; (80097c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d00e      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0x80>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a1b      	ldr	r2, [pc, #108]	; (80097c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d009      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0x80>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a19      	ldr	r2, [pc, #100]	; (80097c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d004      	beq.n	8009770 <HAL_TIM_Base_Start_IT+0x80>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a18      	ldr	r2, [pc, #96]	; (80097cc <HAL_TIM_Base_Start_IT+0xdc>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d111      	bne.n	8009794 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b06      	cmp	r3, #6
 8009780:	d010      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f042 0201 	orr.w	r2, r2, #1
 8009790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009792:	e007      	b.n	80097a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0201 	orr.w	r2, r2, #1
 80097a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	40010000 	.word	0x40010000
 80097b8:	40000400 	.word	0x40000400
 80097bc:	40000800 	.word	0x40000800
 80097c0:	40000c00 	.word	0x40000c00
 80097c4:	40010400 	.word	0x40010400
 80097c8:	40014000 	.word	0x40014000
 80097cc:	40001800 	.word	0x40001800

080097d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e041      	b.n	8009866 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d106      	bne.n	80097fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7fa fab6 	bl	8003d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3304      	adds	r3, #4
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f000 fe5c 	bl	800a4cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d109      	bne.n	8009894 <HAL_TIM_PWM_Start+0x24>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b01      	cmp	r3, #1
 800988a:	bf14      	ite	ne
 800988c:	2301      	movne	r3, #1
 800988e:	2300      	moveq	r3, #0
 8009890:	b2db      	uxtb	r3, r3
 8009892:	e022      	b.n	80098da <HAL_TIM_PWM_Start+0x6a>
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	2b04      	cmp	r3, #4
 8009898:	d109      	bne.n	80098ae <HAL_TIM_PWM_Start+0x3e>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	bf14      	ite	ne
 80098a6:	2301      	movne	r3, #1
 80098a8:	2300      	moveq	r3, #0
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	e015      	b.n	80098da <HAL_TIM_PWM_Start+0x6a>
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b08      	cmp	r3, #8
 80098b2:	d109      	bne.n	80098c8 <HAL_TIM_PWM_Start+0x58>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b01      	cmp	r3, #1
 80098be:	bf14      	ite	ne
 80098c0:	2301      	movne	r3, #1
 80098c2:	2300      	moveq	r3, #0
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	e008      	b.n	80098da <HAL_TIM_PWM_Start+0x6a>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	bf14      	ite	ne
 80098d4:	2301      	movne	r3, #1
 80098d6:	2300      	moveq	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e07c      	b.n	80099dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <HAL_TIM_PWM_Start+0x82>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098f0:	e013      	b.n	800991a <HAL_TIM_PWM_Start+0xaa>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b04      	cmp	r3, #4
 80098f6:	d104      	bne.n	8009902 <HAL_TIM_PWM_Start+0x92>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009900:	e00b      	b.n	800991a <HAL_TIM_PWM_Start+0xaa>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b08      	cmp	r3, #8
 8009906:	d104      	bne.n	8009912 <HAL_TIM_PWM_Start+0xa2>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2202      	movs	r2, #2
 800990c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009910:	e003      	b.n	800991a <HAL_TIM_PWM_Start+0xaa>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2202      	movs	r2, #2
 8009916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2201      	movs	r2, #1
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	f001 f8bc 	bl	800aaa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a2d      	ldr	r2, [pc, #180]	; (80099e4 <HAL_TIM_PWM_Start+0x174>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d004      	beq.n	800993c <HAL_TIM_PWM_Start+0xcc>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a2c      	ldr	r2, [pc, #176]	; (80099e8 <HAL_TIM_PWM_Start+0x178>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d101      	bne.n	8009940 <HAL_TIM_PWM_Start+0xd0>
 800993c:	2301      	movs	r3, #1
 800993e:	e000      	b.n	8009942 <HAL_TIM_PWM_Start+0xd2>
 8009940:	2300      	movs	r3, #0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009954:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a22      	ldr	r2, [pc, #136]	; (80099e4 <HAL_TIM_PWM_Start+0x174>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d022      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x136>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009968:	d01d      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x136>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a1f      	ldr	r2, [pc, #124]	; (80099ec <HAL_TIM_PWM_Start+0x17c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d018      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x136>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a1d      	ldr	r2, [pc, #116]	; (80099f0 <HAL_TIM_PWM_Start+0x180>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d013      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x136>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a1c      	ldr	r2, [pc, #112]	; (80099f4 <HAL_TIM_PWM_Start+0x184>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d00e      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x136>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a16      	ldr	r2, [pc, #88]	; (80099e8 <HAL_TIM_PWM_Start+0x178>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d009      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x136>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a18      	ldr	r2, [pc, #96]	; (80099f8 <HAL_TIM_PWM_Start+0x188>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d004      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x136>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a16      	ldr	r2, [pc, #88]	; (80099fc <HAL_TIM_PWM_Start+0x18c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d111      	bne.n	80099ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 0307 	and.w	r3, r3, #7
 80099b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2b06      	cmp	r3, #6
 80099b6:	d010      	beq.n	80099da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f042 0201 	orr.w	r2, r2, #1
 80099c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c8:	e007      	b.n	80099da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0201 	orr.w	r2, r2, #1
 80099d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	40010000 	.word	0x40010000
 80099e8:	40010400 	.word	0x40010400
 80099ec:	40000400 	.word	0x40000400
 80099f0:	40000800 	.word	0x40000800
 80099f4:	40000c00 	.word	0x40000c00
 80099f8:	40014000 	.word	0x40014000
 80099fc:	40001800 	.word	0x40001800

08009a00 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d109      	bne.n	8009a2c <HAL_TIM_PWM_Start_DMA+0x2c>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	bf0c      	ite	eq
 8009a24:	2301      	moveq	r3, #1
 8009a26:	2300      	movne	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	e022      	b.n	8009a72 <HAL_TIM_PWM_Start_DMA+0x72>
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	d109      	bne.n	8009a46 <HAL_TIM_PWM_Start_DMA+0x46>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	bf0c      	ite	eq
 8009a3e:	2301      	moveq	r3, #1
 8009a40:	2300      	movne	r3, #0
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	e015      	b.n	8009a72 <HAL_TIM_PWM_Start_DMA+0x72>
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d109      	bne.n	8009a60 <HAL_TIM_PWM_Start_DMA+0x60>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	bf0c      	ite	eq
 8009a58:	2301      	moveq	r3, #1
 8009a5a:	2300      	movne	r3, #0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	e008      	b.n	8009a72 <HAL_TIM_PWM_Start_DMA+0x72>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	bf0c      	ite	eq
 8009a6c:	2301      	moveq	r3, #1
 8009a6e:	2300      	movne	r3, #0
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8009a76:	2302      	movs	r3, #2
 8009a78:	e171      	b.n	8009d5e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d109      	bne.n	8009a94 <HAL_TIM_PWM_Start_DMA+0x94>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	bf0c      	ite	eq
 8009a8c:	2301      	moveq	r3, #1
 8009a8e:	2300      	movne	r3, #0
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	e022      	b.n	8009ada <HAL_TIM_PWM_Start_DMA+0xda>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	d109      	bne.n	8009aae <HAL_TIM_PWM_Start_DMA+0xae>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	bf0c      	ite	eq
 8009aa6:	2301      	moveq	r3, #1
 8009aa8:	2300      	movne	r3, #0
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	e015      	b.n	8009ada <HAL_TIM_PWM_Start_DMA+0xda>
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d109      	bne.n	8009ac8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	bf0c      	ite	eq
 8009ac0:	2301      	moveq	r3, #1
 8009ac2:	2300      	movne	r3, #0
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	e008      	b.n	8009ada <HAL_TIM_PWM_Start_DMA+0xda>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	bf0c      	ite	eq
 8009ad4:	2301      	moveq	r3, #1
 8009ad6:	2300      	movne	r3, #0
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d024      	beq.n	8009b28 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <HAL_TIM_PWM_Start_DMA+0xee>
 8009ae4:	887b      	ldrh	r3, [r7, #2]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e137      	b.n	8009d5e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d104      	bne.n	8009afe <HAL_TIM_PWM_Start_DMA+0xfe>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2202      	movs	r2, #2
 8009af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009afc:	e016      	b.n	8009b2c <HAL_TIM_PWM_Start_DMA+0x12c>
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d104      	bne.n	8009b0e <HAL_TIM_PWM_Start_DMA+0x10e>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b0c:	e00e      	b.n	8009b2c <HAL_TIM_PWM_Start_DMA+0x12c>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b08      	cmp	r3, #8
 8009b12:	d104      	bne.n	8009b1e <HAL_TIM_PWM_Start_DMA+0x11e>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b1c:	e006      	b.n	8009b2c <HAL_TIM_PWM_Start_DMA+0x12c>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2202      	movs	r2, #2
 8009b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b26:	e001      	b.n	8009b2c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e118      	b.n	8009d5e <HAL_TIM_PWM_Start_DMA+0x35e>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b0c      	cmp	r3, #12
 8009b30:	f200 80ae 	bhi.w	8009c90 <HAL_TIM_PWM_Start_DMA+0x290>
 8009b34:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b71 	.word	0x08009b71
 8009b40:	08009c91 	.word	0x08009c91
 8009b44:	08009c91 	.word	0x08009c91
 8009b48:	08009c91 	.word	0x08009c91
 8009b4c:	08009bb9 	.word	0x08009bb9
 8009b50:	08009c91 	.word	0x08009c91
 8009b54:	08009c91 	.word	0x08009c91
 8009b58:	08009c91 	.word	0x08009c91
 8009b5c:	08009c01 	.word	0x08009c01
 8009b60:	08009c91 	.word	0x08009c91
 8009b64:	08009c91 	.word	0x08009c91
 8009b68:	08009c91 	.word	0x08009c91
 8009b6c:	08009c49 	.word	0x08009c49
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	4a7c      	ldr	r2, [pc, #496]	; (8009d68 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009b76:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	4a7b      	ldr	r2, [pc, #492]	; (8009d6c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009b7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	4a7a      	ldr	r2, [pc, #488]	; (8009d70 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009b86:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009b8c:	6879      	ldr	r1, [r7, #4]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3334      	adds	r3, #52	; 0x34
 8009b94:	461a      	mov	r2, r3
 8009b96:	887b      	ldrh	r3, [r7, #2]
 8009b98:	f7fb fb72 	bl	8005280 <HAL_DMA_Start_IT>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e0db      	b.n	8009d5e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bb4:	60da      	str	r2, [r3, #12]
      break;
 8009bb6:	e06e      	b.n	8009c96 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbc:	4a6a      	ldr	r2, [pc, #424]	; (8009d68 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009bbe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	4a69      	ldr	r2, [pc, #420]	; (8009d6c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009bc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	4a68      	ldr	r2, [pc, #416]	; (8009d70 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009bce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3338      	adds	r3, #56	; 0x38
 8009bdc:	461a      	mov	r2, r3
 8009bde:	887b      	ldrh	r3, [r7, #2]
 8009be0:	f7fb fb4e 	bl	8005280 <HAL_DMA_Start_IT>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e0b7      	b.n	8009d5e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68da      	ldr	r2, [r3, #12]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009bfc:	60da      	str	r2, [r3, #12]
      break;
 8009bfe:	e04a      	b.n	8009c96 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	4a58      	ldr	r2, [pc, #352]	; (8009d68 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009c06:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0c:	4a57      	ldr	r2, [pc, #348]	; (8009d6c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	4a56      	ldr	r2, [pc, #344]	; (8009d70 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009c16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	333c      	adds	r3, #60	; 0x3c
 8009c24:	461a      	mov	r2, r3
 8009c26:	887b      	ldrh	r3, [r7, #2]
 8009c28:	f7fb fb2a 	bl	8005280 <HAL_DMA_Start_IT>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e093      	b.n	8009d5e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68da      	ldr	r2, [r3, #12]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c44:	60da      	str	r2, [r3, #12]
      break;
 8009c46:	e026      	b.n	8009c96 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4c:	4a46      	ldr	r2, [pc, #280]	; (8009d68 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009c4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c54:	4a45      	ldr	r2, [pc, #276]	; (8009d6c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009c56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5c:	4a44      	ldr	r2, [pc, #272]	; (8009d70 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009c5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3340      	adds	r3, #64	; 0x40
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	887b      	ldrh	r3, [r7, #2]
 8009c70:	f7fb fb06 	bl	8005280 <HAL_DMA_Start_IT>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e06f      	b.n	8009d5e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c8c:	60da      	str	r2, [r3, #12]
      break;
 8009c8e:	e002      	b.n	8009c96 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	75fb      	strb	r3, [r7, #23]
      break;
 8009c94:	bf00      	nop
  }

  if (status == HAL_OK)
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d15f      	bne.n	8009d5c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 fefb 	bl	800aaa0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a31      	ldr	r2, [pc, #196]	; (8009d74 <HAL_TIM_PWM_Start_DMA+0x374>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d004      	beq.n	8009cbe <HAL_TIM_PWM_Start_DMA+0x2be>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a2f      	ldr	r2, [pc, #188]	; (8009d78 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d101      	bne.n	8009cc2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e000      	b.n	8009cc4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d007      	beq.n	8009cd8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cd6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a25      	ldr	r2, [pc, #148]	; (8009d74 <HAL_TIM_PWM_Start_DMA+0x374>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d022      	beq.n	8009d28 <HAL_TIM_PWM_Start_DMA+0x328>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cea:	d01d      	beq.n	8009d28 <HAL_TIM_PWM_Start_DMA+0x328>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a22      	ldr	r2, [pc, #136]	; (8009d7c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d018      	beq.n	8009d28 <HAL_TIM_PWM_Start_DMA+0x328>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a21      	ldr	r2, [pc, #132]	; (8009d80 <HAL_TIM_PWM_Start_DMA+0x380>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d013      	beq.n	8009d28 <HAL_TIM_PWM_Start_DMA+0x328>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1f      	ldr	r2, [pc, #124]	; (8009d84 <HAL_TIM_PWM_Start_DMA+0x384>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d00e      	beq.n	8009d28 <HAL_TIM_PWM_Start_DMA+0x328>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a1a      	ldr	r2, [pc, #104]	; (8009d78 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d009      	beq.n	8009d28 <HAL_TIM_PWM_Start_DMA+0x328>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a1b      	ldr	r2, [pc, #108]	; (8009d88 <HAL_TIM_PWM_Start_DMA+0x388>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d004      	beq.n	8009d28 <HAL_TIM_PWM_Start_DMA+0x328>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a1a      	ldr	r2, [pc, #104]	; (8009d8c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d111      	bne.n	8009d4c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f003 0307 	and.w	r3, r3, #7
 8009d32:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2b06      	cmp	r3, #6
 8009d38:	d010      	beq.n	8009d5c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f042 0201 	orr.w	r2, r2, #1
 8009d48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d4a:	e007      	b.n	8009d5c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0201 	orr.w	r2, r2, #1
 8009d5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	0800a3bd 	.word	0x0800a3bd
 8009d6c:	0800a465 	.word	0x0800a465
 8009d70:	0800a32b 	.word	0x0800a32b
 8009d74:	40010000 	.word	0x40010000
 8009d78:	40010400 	.word	0x40010400
 8009d7c:	40000400 	.word	0x40000400
 8009d80:	40000800 	.word	0x40000800
 8009d84:	40000c00 	.word	0x40000c00
 8009d88:	40014000 	.word	0x40014000
 8009d8c:	40001800 	.word	0x40001800

08009d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d122      	bne.n	8009dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f003 0302 	and.w	r3, r3, #2
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d11b      	bne.n	8009dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f06f 0202 	mvn.w	r2, #2
 8009dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fa77 	bl	800a2c6 <HAL_TIM_IC_CaptureCallback>
 8009dd8:	e005      	b.n	8009de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fa69 	bl	800a2b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fa7a 	bl	800a2da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f003 0304 	and.w	r3, r3, #4
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d122      	bne.n	8009e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d11b      	bne.n	8009e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f06f 0204 	mvn.w	r2, #4
 8009e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2202      	movs	r2, #2
 8009e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fa4d 	bl	800a2c6 <HAL_TIM_IC_CaptureCallback>
 8009e2c:	e005      	b.n	8009e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fa3f 	bl	800a2b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fa50 	bl	800a2da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	f003 0308 	and.w	r3, r3, #8
 8009e4a:	2b08      	cmp	r3, #8
 8009e4c:	d122      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	f003 0308 	and.w	r3, r3, #8
 8009e58:	2b08      	cmp	r3, #8
 8009e5a:	d11b      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f06f 0208 	mvn.w	r2, #8
 8009e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2204      	movs	r2, #4
 8009e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	f003 0303 	and.w	r3, r3, #3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa23 	bl	800a2c6 <HAL_TIM_IC_CaptureCallback>
 8009e80:	e005      	b.n	8009e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fa15 	bl	800a2b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fa26 	bl	800a2da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0310 	and.w	r3, r3, #16
 8009e9e:	2b10      	cmp	r3, #16
 8009ea0:	d122      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f003 0310 	and.w	r3, r3, #16
 8009eac:	2b10      	cmp	r3, #16
 8009eae:	d11b      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0210 	mvn.w	r2, #16
 8009eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2208      	movs	r2, #8
 8009ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f9f9 	bl	800a2c6 <HAL_TIM_IC_CaptureCallback>
 8009ed4:	e005      	b.n	8009ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f9eb 	bl	800a2b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f9fc 	bl	800a2da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d10e      	bne.n	8009f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d107      	bne.n	8009f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f06f 0201 	mvn.w	r2, #1
 8009f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7f9 fb64 	bl	80035dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1e:	2b80      	cmp	r3, #128	; 0x80
 8009f20:	d10e      	bne.n	8009f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2c:	2b80      	cmp	r3, #128	; 0x80
 8009f2e:	d107      	bne.n	8009f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 feae 	bl	800ac9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b40      	cmp	r3, #64	; 0x40
 8009f4c:	d10e      	bne.n	8009f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f58:	2b40      	cmp	r3, #64	; 0x40
 8009f5a:	d107      	bne.n	8009f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f9cb 	bl	800a302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	f003 0320 	and.w	r3, r3, #32
 8009f76:	2b20      	cmp	r3, #32
 8009f78:	d10e      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f003 0320 	and.w	r3, r3, #32
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	d107      	bne.n	8009f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f06f 0220 	mvn.w	r2, #32
 8009f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fe78 	bl	800ac88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d101      	bne.n	8009fbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e0ae      	b.n	800a11c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b0c      	cmp	r3, #12
 8009fca:	f200 809f 	bhi.w	800a10c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009fce:	a201      	add	r2, pc, #4	; (adr r2, 8009fd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd4:	0800a009 	.word	0x0800a009
 8009fd8:	0800a10d 	.word	0x0800a10d
 8009fdc:	0800a10d 	.word	0x0800a10d
 8009fe0:	0800a10d 	.word	0x0800a10d
 8009fe4:	0800a049 	.word	0x0800a049
 8009fe8:	0800a10d 	.word	0x0800a10d
 8009fec:	0800a10d 	.word	0x0800a10d
 8009ff0:	0800a10d 	.word	0x0800a10d
 8009ff4:	0800a08b 	.word	0x0800a08b
 8009ff8:	0800a10d 	.word	0x0800a10d
 8009ffc:	0800a10d 	.word	0x0800a10d
 800a000:	0800a10d 	.word	0x0800a10d
 800a004:	0800a0cb 	.word	0x0800a0cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68b9      	ldr	r1, [r7, #8]
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 fafc 	bl	800a60c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	699a      	ldr	r2, [r3, #24]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0208 	orr.w	r2, r2, #8
 800a022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699a      	ldr	r2, [r3, #24]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 0204 	bic.w	r2, r2, #4
 800a032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6999      	ldr	r1, [r3, #24]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	691a      	ldr	r2, [r3, #16]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	619a      	str	r2, [r3, #24]
      break;
 800a046:	e064      	b.n	800a112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fb4c 	bl	800a6ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699a      	ldr	r2, [r3, #24]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6999      	ldr	r1, [r3, #24]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	021a      	lsls	r2, r3, #8
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	619a      	str	r2, [r3, #24]
      break;
 800a088:	e043      	b.n	800a112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68b9      	ldr	r1, [r7, #8]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fba1 	bl	800a7d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69da      	ldr	r2, [r3, #28]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f042 0208 	orr.w	r2, r2, #8
 800a0a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	69da      	ldr	r2, [r3, #28]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 0204 	bic.w	r2, r2, #4
 800a0b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69d9      	ldr	r1, [r3, #28]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	691a      	ldr	r2, [r3, #16]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	61da      	str	r2, [r3, #28]
      break;
 800a0c8:	e023      	b.n	800a112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fbf5 	bl	800a8c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69d9      	ldr	r1, [r3, #28]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	021a      	lsls	r2, r3, #8
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	430a      	orrs	r2, r1
 800a108:	61da      	str	r2, [r3, #28]
      break;
 800a10a:	e002      	b.n	800a112 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
      break;
 800a110:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a12e:	2300      	movs	r3, #0
 800a130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d101      	bne.n	800a140 <HAL_TIM_ConfigClockSource+0x1c>
 800a13c:	2302      	movs	r3, #2
 800a13e:	e0b4      	b.n	800a2aa <HAL_TIM_ConfigClockSource+0x186>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a15e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a178:	d03e      	beq.n	800a1f8 <HAL_TIM_ConfigClockSource+0xd4>
 800a17a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a17e:	f200 8087 	bhi.w	800a290 <HAL_TIM_ConfigClockSource+0x16c>
 800a182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a186:	f000 8086 	beq.w	800a296 <HAL_TIM_ConfigClockSource+0x172>
 800a18a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a18e:	d87f      	bhi.n	800a290 <HAL_TIM_ConfigClockSource+0x16c>
 800a190:	2b70      	cmp	r3, #112	; 0x70
 800a192:	d01a      	beq.n	800a1ca <HAL_TIM_ConfigClockSource+0xa6>
 800a194:	2b70      	cmp	r3, #112	; 0x70
 800a196:	d87b      	bhi.n	800a290 <HAL_TIM_ConfigClockSource+0x16c>
 800a198:	2b60      	cmp	r3, #96	; 0x60
 800a19a:	d050      	beq.n	800a23e <HAL_TIM_ConfigClockSource+0x11a>
 800a19c:	2b60      	cmp	r3, #96	; 0x60
 800a19e:	d877      	bhi.n	800a290 <HAL_TIM_ConfigClockSource+0x16c>
 800a1a0:	2b50      	cmp	r3, #80	; 0x50
 800a1a2:	d03c      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0xfa>
 800a1a4:	2b50      	cmp	r3, #80	; 0x50
 800a1a6:	d873      	bhi.n	800a290 <HAL_TIM_ConfigClockSource+0x16c>
 800a1a8:	2b40      	cmp	r3, #64	; 0x40
 800a1aa:	d058      	beq.n	800a25e <HAL_TIM_ConfigClockSource+0x13a>
 800a1ac:	2b40      	cmp	r3, #64	; 0x40
 800a1ae:	d86f      	bhi.n	800a290 <HAL_TIM_ConfigClockSource+0x16c>
 800a1b0:	2b30      	cmp	r3, #48	; 0x30
 800a1b2:	d064      	beq.n	800a27e <HAL_TIM_ConfigClockSource+0x15a>
 800a1b4:	2b30      	cmp	r3, #48	; 0x30
 800a1b6:	d86b      	bhi.n	800a290 <HAL_TIM_ConfigClockSource+0x16c>
 800a1b8:	2b20      	cmp	r3, #32
 800a1ba:	d060      	beq.n	800a27e <HAL_TIM_ConfigClockSource+0x15a>
 800a1bc:	2b20      	cmp	r3, #32
 800a1be:	d867      	bhi.n	800a290 <HAL_TIM_ConfigClockSource+0x16c>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d05c      	beq.n	800a27e <HAL_TIM_ConfigClockSource+0x15a>
 800a1c4:	2b10      	cmp	r3, #16
 800a1c6:	d05a      	beq.n	800a27e <HAL_TIM_ConfigClockSource+0x15a>
 800a1c8:	e062      	b.n	800a290 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6818      	ldr	r0, [r3, #0]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	6899      	ldr	r1, [r3, #8]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	f000 fc41 	bl	800aa60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	609a      	str	r2, [r3, #8]
      break;
 800a1f6:	e04f      	b.n	800a298 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	6899      	ldr	r1, [r3, #8]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	f000 fc2a 	bl	800aa60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a21a:	609a      	str	r2, [r3, #8]
      break;
 800a21c:	e03c      	b.n	800a298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6818      	ldr	r0, [r3, #0]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	6859      	ldr	r1, [r3, #4]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	461a      	mov	r2, r3
 800a22c:	f000 fb9e 	bl	800a96c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2150      	movs	r1, #80	; 0x50
 800a236:	4618      	mov	r0, r3
 800a238:	f000 fbf7 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 800a23c:	e02c      	b.n	800a298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6818      	ldr	r0, [r3, #0]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	6859      	ldr	r1, [r3, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	461a      	mov	r2, r3
 800a24c:	f000 fbbd 	bl	800a9ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2160      	movs	r1, #96	; 0x60
 800a256:	4618      	mov	r0, r3
 800a258:	f000 fbe7 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 800a25c:	e01c      	b.n	800a298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6859      	ldr	r1, [r3, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f000 fb7e 	bl	800a96c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2140      	movs	r1, #64	; 0x40
 800a276:	4618      	mov	r0, r3
 800a278:	f000 fbd7 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 800a27c:	e00c      	b.n	800a298 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4619      	mov	r1, r3
 800a288:	4610      	mov	r0, r2
 800a28a:	f000 fbce 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 800a28e:	e003      	b.n	800a298 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	73fb      	strb	r3, [r7, #15]
      break;
 800a294:	e000      	b.n	800a298 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2ba:	bf00      	nop
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b083      	sub	sp, #12
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2ce:	bf00      	nop
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a30a:	bf00      	nop
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a31e:	bf00      	nop
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a336:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d107      	bne.n	800a352 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2201      	movs	r2, #1
 800a346:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a350:	e02a      	b.n	800a3a8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d107      	bne.n	800a36c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2202      	movs	r2, #2
 800a360:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a36a:	e01d      	b.n	800a3a8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	429a      	cmp	r2, r3
 800a374:	d107      	bne.n	800a386 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2204      	movs	r2, #4
 800a37a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a384:	e010      	b.n	800a3a8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d107      	bne.n	800a3a0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2208      	movs	r2, #8
 800a394:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a39e:	e003      	b.n	800a3a8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f7ff ffb4 	bl	800a316 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	771a      	strb	r2, [r3, #28]
}
 800a3b4:	bf00      	nop
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d10b      	bne.n	800a3ec <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d136      	bne.n	800a450 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3ea:	e031      	b.n	800a450 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d10b      	bne.n	800a40e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d125      	bne.n	800a450 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a40c:	e020      	b.n	800a450 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	429a      	cmp	r2, r3
 800a416:	d10b      	bne.n	800a430 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2204      	movs	r2, #4
 800a41c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d114      	bne.n	800a450 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a42e:	e00f      	b.n	800a450 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	429a      	cmp	r2, r3
 800a438:	d10a      	bne.n	800a450 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2208      	movs	r2, #8
 800a43e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d103      	bne.n	800a450 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7ff ff42 	bl	800a2da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	771a      	strb	r2, [r3, #28]
}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a470:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d103      	bne.n	800a484 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2201      	movs	r2, #1
 800a480:	771a      	strb	r2, [r3, #28]
 800a482:	e019      	b.n	800a4b8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d103      	bne.n	800a496 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2202      	movs	r2, #2
 800a492:	771a      	strb	r2, [r3, #28]
 800a494:	e010      	b.n	800a4b8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d103      	bne.n	800a4a8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2204      	movs	r2, #4
 800a4a4:	771a      	strb	r2, [r3, #28]
 800a4a6:	e007      	b.n	800a4b8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d102      	bne.n	800a4b8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2208      	movs	r2, #8
 800a4b6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7ff ff18 	bl	800a2ee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	771a      	strb	r2, [r3, #28]
}
 800a4c4:	bf00      	nop
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a40      	ldr	r2, [pc, #256]	; (800a5e0 <TIM_Base_SetConfig+0x114>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d013      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ea:	d00f      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a3d      	ldr	r2, [pc, #244]	; (800a5e4 <TIM_Base_SetConfig+0x118>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00b      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a3c      	ldr	r2, [pc, #240]	; (800a5e8 <TIM_Base_SetConfig+0x11c>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d007      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a3b      	ldr	r2, [pc, #236]	; (800a5ec <TIM_Base_SetConfig+0x120>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d003      	beq.n	800a50c <TIM_Base_SetConfig+0x40>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a3a      	ldr	r2, [pc, #232]	; (800a5f0 <TIM_Base_SetConfig+0x124>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d108      	bne.n	800a51e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a2f      	ldr	r2, [pc, #188]	; (800a5e0 <TIM_Base_SetConfig+0x114>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d02b      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a52c:	d027      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a2c      	ldr	r2, [pc, #176]	; (800a5e4 <TIM_Base_SetConfig+0x118>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d023      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a2b      	ldr	r2, [pc, #172]	; (800a5e8 <TIM_Base_SetConfig+0x11c>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d01f      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a2a      	ldr	r2, [pc, #168]	; (800a5ec <TIM_Base_SetConfig+0x120>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d01b      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a29      	ldr	r2, [pc, #164]	; (800a5f0 <TIM_Base_SetConfig+0x124>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d017      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a28      	ldr	r2, [pc, #160]	; (800a5f4 <TIM_Base_SetConfig+0x128>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d013      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a27      	ldr	r2, [pc, #156]	; (800a5f8 <TIM_Base_SetConfig+0x12c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d00f      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a26      	ldr	r2, [pc, #152]	; (800a5fc <TIM_Base_SetConfig+0x130>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00b      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a25      	ldr	r2, [pc, #148]	; (800a600 <TIM_Base_SetConfig+0x134>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d007      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a24      	ldr	r2, [pc, #144]	; (800a604 <TIM_Base_SetConfig+0x138>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d003      	beq.n	800a57e <TIM_Base_SetConfig+0xb2>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a23      	ldr	r2, [pc, #140]	; (800a608 <TIM_Base_SetConfig+0x13c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d108      	bne.n	800a590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a0a      	ldr	r2, [pc, #40]	; (800a5e0 <TIM_Base_SetConfig+0x114>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d003      	beq.n	800a5c4 <TIM_Base_SetConfig+0xf8>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a0c      	ldr	r2, [pc, #48]	; (800a5f0 <TIM_Base_SetConfig+0x124>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d103      	bne.n	800a5cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	691a      	ldr	r2, [r3, #16]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	615a      	str	r2, [r3, #20]
}
 800a5d2:	bf00      	nop
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	40010000 	.word	0x40010000
 800a5e4:	40000400 	.word	0x40000400
 800a5e8:	40000800 	.word	0x40000800
 800a5ec:	40000c00 	.word	0x40000c00
 800a5f0:	40010400 	.word	0x40010400
 800a5f4:	40014000 	.word	0x40014000
 800a5f8:	40014400 	.word	0x40014400
 800a5fc:	40014800 	.word	0x40014800
 800a600:	40001800 	.word	0x40001800
 800a604:	40001c00 	.word	0x40001c00
 800a608:	40002000 	.word	0x40002000

0800a60c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b087      	sub	sp, #28
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	f023 0201 	bic.w	r2, r3, #1
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f023 0303 	bic.w	r3, r3, #3
 800a642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f023 0302 	bic.w	r3, r3, #2
 800a654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a20      	ldr	r2, [pc, #128]	; (800a6e4 <TIM_OC1_SetConfig+0xd8>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d003      	beq.n	800a670 <TIM_OC1_SetConfig+0x64>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a1f      	ldr	r2, [pc, #124]	; (800a6e8 <TIM_OC1_SetConfig+0xdc>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d10c      	bne.n	800a68a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f023 0308 	bic.w	r3, r3, #8
 800a676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	4313      	orrs	r3, r2
 800a680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f023 0304 	bic.w	r3, r3, #4
 800a688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a15      	ldr	r2, [pc, #84]	; (800a6e4 <TIM_OC1_SetConfig+0xd8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d003      	beq.n	800a69a <TIM_OC1_SetConfig+0x8e>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a14      	ldr	r2, [pc, #80]	; (800a6e8 <TIM_OC1_SetConfig+0xdc>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d111      	bne.n	800a6be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	621a      	str	r2, [r3, #32]
}
 800a6d8:	bf00      	nop
 800a6da:	371c      	adds	r7, #28
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	40010000 	.word	0x40010000
 800a6e8:	40010400 	.word	0x40010400

0800a6ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b087      	sub	sp, #28
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	f023 0210 	bic.w	r2, r3, #16
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a71a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	021b      	lsls	r3, r3, #8
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f023 0320 	bic.w	r3, r3, #32
 800a736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	011b      	lsls	r3, r3, #4
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	4313      	orrs	r3, r2
 800a742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a22      	ldr	r2, [pc, #136]	; (800a7d0 <TIM_OC2_SetConfig+0xe4>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d003      	beq.n	800a754 <TIM_OC2_SetConfig+0x68>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a21      	ldr	r2, [pc, #132]	; (800a7d4 <TIM_OC2_SetConfig+0xe8>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d10d      	bne.n	800a770 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a75a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	011b      	lsls	r3, r3, #4
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	4313      	orrs	r3, r2
 800a766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a76e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a17      	ldr	r2, [pc, #92]	; (800a7d0 <TIM_OC2_SetConfig+0xe4>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d003      	beq.n	800a780 <TIM_OC2_SetConfig+0x94>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a16      	ldr	r2, [pc, #88]	; (800a7d4 <TIM_OC2_SetConfig+0xe8>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d113      	bne.n	800a7a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a78e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	4313      	orrs	r3, r2
 800a79a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	621a      	str	r2, [r3, #32]
}
 800a7c2:	bf00      	nop
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	40010000 	.word	0x40010000
 800a7d4:	40010400 	.word	0x40010400

0800a7d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a1b      	ldr	r3, [r3, #32]
 800a7e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f023 0303 	bic.w	r3, r3, #3
 800a80e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	021b      	lsls	r3, r3, #8
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a21      	ldr	r2, [pc, #132]	; (800a8b8 <TIM_OC3_SetConfig+0xe0>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d003      	beq.n	800a83e <TIM_OC3_SetConfig+0x66>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a20      	ldr	r2, [pc, #128]	; (800a8bc <TIM_OC3_SetConfig+0xe4>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d10d      	bne.n	800a85a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	021b      	lsls	r3, r3, #8
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	4313      	orrs	r3, r2
 800a850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a16      	ldr	r2, [pc, #88]	; (800a8b8 <TIM_OC3_SetConfig+0xe0>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d003      	beq.n	800a86a <TIM_OC3_SetConfig+0x92>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a15      	ldr	r2, [pc, #84]	; (800a8bc <TIM_OC3_SetConfig+0xe4>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d113      	bne.n	800a892 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	695b      	ldr	r3, [r3, #20]
 800a87e:	011b      	lsls	r3, r3, #4
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	4313      	orrs	r3, r2
 800a884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	011b      	lsls	r3, r3, #4
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	4313      	orrs	r3, r2
 800a890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	621a      	str	r2, [r3, #32]
}
 800a8ac:	bf00      	nop
 800a8ae:	371c      	adds	r7, #28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	40010000 	.word	0x40010000
 800a8bc:	40010400 	.word	0x40010400

0800a8c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	69db      	ldr	r3, [r3, #28]
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	021b      	lsls	r3, r3, #8
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	4313      	orrs	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a90a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	031b      	lsls	r3, r3, #12
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	4313      	orrs	r3, r2
 800a916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a12      	ldr	r2, [pc, #72]	; (800a964 <TIM_OC4_SetConfig+0xa4>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d003      	beq.n	800a928 <TIM_OC4_SetConfig+0x68>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a11      	ldr	r2, [pc, #68]	; (800a968 <TIM_OC4_SetConfig+0xa8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d109      	bne.n	800a93c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a92e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	019b      	lsls	r3, r3, #6
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	4313      	orrs	r3, r2
 800a93a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	621a      	str	r2, [r3, #32]
}
 800a956:	bf00      	nop
 800a958:	371c      	adds	r7, #28
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	40010000 	.word	0x40010000
 800a968:	40010400 	.word	0x40010400

0800a96c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	f023 0201 	bic.w	r2, r3, #1
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f023 030a 	bic.w	r3, r3, #10
 800a9a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	621a      	str	r2, [r3, #32]
}
 800a9be:	bf00      	nop
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b087      	sub	sp, #28
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	60b9      	str	r1, [r7, #8]
 800a9d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	f023 0210 	bic.w	r2, r3, #16
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	031b      	lsls	r3, r3, #12
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	621a      	str	r2, [r3, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	f043 0307 	orr.w	r3, r3, #7
 800aa4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	609a      	str	r2, [r3, #8]
}
 800aa54:	bf00      	nop
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	021a      	lsls	r2, r3, #8
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	431a      	orrs	r2, r3
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	609a      	str	r2, [r3, #8]
}
 800aa94:	bf00      	nop
 800aa96:	371c      	adds	r7, #28
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	f003 031f 	and.w	r3, r3, #31
 800aab2:	2201      	movs	r2, #1
 800aab4:	fa02 f303 	lsl.w	r3, r2, r3
 800aab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6a1a      	ldr	r2, [r3, #32]
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	43db      	mvns	r3, r3
 800aac2:	401a      	ands	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6a1a      	ldr	r2, [r3, #32]
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f003 031f 	and.w	r3, r3, #31
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	fa01 f303 	lsl.w	r3, r1, r3
 800aad8:	431a      	orrs	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	621a      	str	r2, [r3, #32]
}
 800aade:	bf00      	nop
 800aae0:	371c      	adds	r7, #28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
	...

0800aaec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d101      	bne.n	800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab00:	2302      	movs	r3, #2
 800ab02:	e05a      	b.n	800abba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a21      	ldr	r2, [pc, #132]	; (800abc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d022      	beq.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab50:	d01d      	beq.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a1d      	ldr	r2, [pc, #116]	; (800abcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d018      	beq.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a1b      	ldr	r2, [pc, #108]	; (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d013      	beq.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a1a      	ldr	r2, [pc, #104]	; (800abd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d00e      	beq.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a18      	ldr	r2, [pc, #96]	; (800abd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d009      	beq.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a17      	ldr	r2, [pc, #92]	; (800abdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d004      	beq.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a15      	ldr	r2, [pc, #84]	; (800abe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d10c      	bne.n	800aba8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	40010000 	.word	0x40010000
 800abcc:	40000400 	.word	0x40000400
 800abd0:	40000800 	.word	0x40000800
 800abd4:	40000c00 	.word	0x40000c00
 800abd8:	40010400 	.word	0x40010400
 800abdc:	40014000 	.word	0x40014000
 800abe0:	40001800 	.word	0x40001800

0800abe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d101      	bne.n	800ac00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800abfc:	2302      	movs	r3, #2
 800abfe:	e03d      	b.n	800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	691b      	ldr	r3, [r3, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800acbe:	2300      	movs	r3, #0
 800acc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d029      	beq.n	800ad1e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800acd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acda:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ace4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800acea:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800acf0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800acf6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800acfc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800ad02:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800ad08:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800ad0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	e034      	b.n	800ad88 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad2a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad34:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ad3a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ad4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad52:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad5c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800ad62:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800ad68:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800ad6e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800ad74:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b087      	sub	sp, #28
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	60f8      	str	r0, [r7, #12]
 800ad9e:	60b9      	str	r1, [r7, #8]
 800ada0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d02e      	beq.n	800ae0e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800adbc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	3b01      	subs	r3, #1
 800adca:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800adcc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	3b01      	subs	r3, #1
 800add4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800add6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	3b01      	subs	r3, #1
 800adde:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800ade0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	3b01      	subs	r3, #1
 800ade8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800adea:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	3b01      	subs	r3, #1
 800adf2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800adf4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	3b01      	subs	r3, #1
 800adfc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800adfe:	4313      	orrs	r3, r2
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	609a      	str	r2, [r3, #8]
 800ae0c:	e03b      	b.n	800ae86 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ae1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae1e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	3b01      	subs	r3, #1
 800ae26:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800ae30:	4313      	orrs	r3, r2
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ae44:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ae54:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800ae5e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800ae68:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800ae72:	4313      	orrs	r3, r2
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	697a      	ldr	r2, [r7, #20]
 800ae7e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	371c      	adds	r7, #28
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800aea4:	2300      	movs	r3, #0
 800aea6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aeb0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	3b01      	subs	r3, #1
 800aeb8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800aeba:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aec2:	4313      	orrs	r3, r2
 800aec4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800aecc:	f7f9 fa90 	bl	80043f0 <HAL_GetTick>
 800aed0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800aed2:	e010      	b.n	800aef6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	d00c      	beq.n	800aef6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d007      	beq.n	800aef2 <FMC_SDRAM_SendCommand+0x5e>
 800aee2:	f7f9 fa85 	bl	80043f0 <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d201      	bcs.n	800aef6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e006      	b.n	800af04 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b20      	cmp	r3, #32
 800af00:	d0e8      	beq.n	800aed4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800af0c:	b084      	sub	sp, #16
 800af0e:	b480      	push	{r7}
 800af10:	b085      	sub	sp, #20
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	f107 001c 	add.w	r0, r7, #28
 800af1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800af22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800af24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800af26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800af2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800af2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800af32:	431a      	orrs	r2, r3
             Init.ClockDiv
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800af36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800af46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	431a      	orrs	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	b004      	add	sp, #16
 800af60:	4770      	bx	lr

0800af62 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800af62:	b480      	push	{r7}
 800af64:	b083      	sub	sp, #12
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800af70:	4618      	mov	r0, r3
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2203      	movs	r2, #3
 800af88:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800af8a:	2002      	movs	r0, #2
 800af8c:	f7f9 fa3c 	bl	8004408 <HAL_Delay>
  
  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 0303 	and.w	r3, r3, #3
}
 800afaa:	4618      	mov	r0, r3
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b085      	sub	sp, #20
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800afd4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800afda:	431a      	orrs	r2, r3
                       Command->CPSM);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800afe0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800aff0:	f023 030f 	bic.w	r3, r3, #15
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	431a      	orrs	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b083      	sub	sp, #12
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	b2db      	uxtb	r3, r3
}
 800b018:	4618      	mov	r0, r3
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3314      	adds	r3, #20
 800b032:	461a      	mov	r2, r3
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	4413      	add	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
}  
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b085      	sub	sp, #20
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b070:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b076:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b07c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	4313      	orrs	r3, r2
 800b082:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	431a      	orrs	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b094:	2300      	movs	r3, #0

}
 800b096:	4618      	mov	r0, r3
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b088      	sub	sp, #32
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0b4:	2340      	movs	r3, #64	; 0x40
 800b0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0c2:	f107 0308 	add.w	r3, r7, #8
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff ff74 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b0ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0d2:	2110      	movs	r1, #16
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa45 	bl	800b564 <SDMMC_GetCmdResp1>
 800b0da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0dc:	69fb      	ldr	r3, [r7, #28]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3720      	adds	r7, #32
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b088      	sub	sp, #32
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b0f4:	2311      	movs	r3, #17
 800b0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0f8:	2340      	movs	r3, #64	; 0x40
 800b0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b104:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b106:	f107 0308 	add.w	r3, r7, #8
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff ff52 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b112:	f241 3288 	movw	r2, #5000	; 0x1388
 800b116:	2111      	movs	r1, #17
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fa23 	bl	800b564 <SDMMC_GetCmdResp1>
 800b11e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b120:	69fb      	ldr	r3, [r7, #28]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3720      	adds	r7, #32
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b088      	sub	sp, #32
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b138:	2312      	movs	r3, #18
 800b13a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b13c:	2340      	movs	r3, #64	; 0x40
 800b13e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b148:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b14a:	f107 0308 	add.w	r3, r7, #8
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff ff30 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b156:	f241 3288 	movw	r2, #5000	; 0x1388
 800b15a:	2112      	movs	r1, #18
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fa01 	bl	800b564 <SDMMC_GetCmdResp1>
 800b162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b164:	69fb      	ldr	r3, [r7, #28]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3720      	adds	r7, #32
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b088      	sub	sp, #32
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b17c:	2318      	movs	r3, #24
 800b17e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b180:	2340      	movs	r3, #64	; 0x40
 800b182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b184:	2300      	movs	r3, #0
 800b186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b18c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b18e:	f107 0308 	add.w	r3, r7, #8
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff ff0e 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b19a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b19e:	2118      	movs	r1, #24
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f9df 	bl	800b564 <SDMMC_GetCmdResp1>
 800b1a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1a8:	69fb      	ldr	r3, [r7, #28]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3720      	adds	r7, #32
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b088      	sub	sp, #32
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b1c0:	2319      	movs	r3, #25
 800b1c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1c4:	2340      	movs	r3, #64	; 0x40
 800b1c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1d2:	f107 0308 	add.w	r3, r7, #8
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff feec 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b1de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1e2:	2119      	movs	r1, #25
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 f9bd 	bl	800b564 <SDMMC_GetCmdResp1>
 800b1ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1ec:	69fb      	ldr	r3, [r7, #28]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3720      	adds	r7, #32
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b088      	sub	sp, #32
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b200:	2300      	movs	r3, #0
 800b202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b204:	230c      	movs	r3, #12
 800b206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b208:	2340      	movs	r3, #64	; 0x40
 800b20a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b20c:	2300      	movs	r3, #0
 800b20e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b214:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b216:	f107 0308 	add.w	r3, r7, #8
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff feca 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b222:	4a05      	ldr	r2, [pc, #20]	; (800b238 <SDMMC_CmdStopTransfer+0x40>)
 800b224:	210c      	movs	r1, #12
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f99c 	bl	800b564 <SDMMC_GetCmdResp1>
 800b22c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b22e:	69fb      	ldr	r3, [r7, #28]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3720      	adds	r7, #32
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	05f5e100 	.word	0x05f5e100

0800b23c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08a      	sub	sp, #40	; 0x28
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b24c:	2307      	movs	r3, #7
 800b24e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b250:	2340      	movs	r3, #64	; 0x40
 800b252:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b254:	2300      	movs	r3, #0
 800b256:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b25c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b25e:	f107 0310 	add.w	r3, r7, #16
 800b262:	4619      	mov	r1, r3
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7ff fea6 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b26a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b26e:	2107      	movs	r1, #7
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 f977 	bl	800b564 <SDMMC_GetCmdResp1>
 800b276:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3728      	adds	r7, #40	; 0x28
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b088      	sub	sp, #32
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b28e:	2300      	movs	r3, #0
 800b290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b292:	2300      	movs	r3, #0
 800b294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b296:	2300      	movs	r3, #0
 800b298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b29a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b29e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2a0:	f107 0308 	add.w	r3, r7, #8
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7ff fe85 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f92d 	bl	800b50c <SDMMC_GetCmdError>
 800b2b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b088      	sub	sp, #32
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b2c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b2ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2d0:	2340      	movs	r3, #64	; 0x40
 800b2d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2de:	f107 0308 	add.w	r3, r7, #8
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff fe66 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fb24 	bl	800b938 <SDMMC_GetCmdResp7>
 800b2f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2f2:	69fb      	ldr	r3, [r7, #28]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3720      	adds	r7, #32
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b30a:	2337      	movs	r3, #55	; 0x37
 800b30c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b30e:	2340      	movs	r3, #64	; 0x40
 800b310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b312:	2300      	movs	r3, #0
 800b314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b31a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b31c:	f107 0308 	add.w	r3, r7, #8
 800b320:	4619      	mov	r1, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff fe47 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b328:	f241 3288 	movw	r2, #5000	; 0x1388
 800b32c:	2137      	movs	r1, #55	; 0x37
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f918 	bl	800b564 <SDMMC_GetCmdResp1>
 800b334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b336:	69fb      	ldr	r3, [r7, #28]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3720      	adds	r7, #32
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b356:	2329      	movs	r3, #41	; 0x29
 800b358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b35a:	2340      	movs	r3, #64	; 0x40
 800b35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b35e:	2300      	movs	r3, #0
 800b360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b366:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b368:	f107 0308 	add.w	r3, r7, #8
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff fe21 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fa2b 	bl	800b7d0 <SDMMC_GetCmdResp3>
 800b37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b37c:	69fb      	ldr	r3, [r7, #28]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3720      	adds	r7, #32
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b088      	sub	sp, #32
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b394:	2306      	movs	r3, #6
 800b396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b398:	2340      	movs	r3, #64	; 0x40
 800b39a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b39c:	2300      	movs	r3, #0
 800b39e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3a6:	f107 0308 	add.w	r3, r7, #8
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f7ff fe02 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b3b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b6:	2106      	movs	r1, #6
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 f8d3 	bl	800b564 <SDMMC_GetCmdResp1>
 800b3be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3720      	adds	r7, #32
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b088      	sub	sp, #32
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b3d6:	2333      	movs	r3, #51	; 0x33
 800b3d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3da:	2340      	movs	r3, #64	; 0x40
 800b3dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3e8:	f107 0308 	add.w	r3, r7, #8
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff fde1 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f8:	2133      	movs	r1, #51	; 0x33
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f8b2 	bl	800b564 <SDMMC_GetCmdResp1>
 800b400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b402:	69fb      	ldr	r3, [r7, #28]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3720      	adds	r7, #32
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b414:	2300      	movs	r3, #0
 800b416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b418:	2302      	movs	r3, #2
 800b41a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b41c:	23c0      	movs	r3, #192	; 0xc0
 800b41e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b420:	2300      	movs	r3, #0
 800b422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b428:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b42a:	f107 0308 	add.w	r3, r7, #8
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff fdc0 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f982 	bl	800b740 <SDMMC_GetCmdResp2>
 800b43c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b43e:	69fb      	ldr	r3, [r7, #28]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3720      	adds	r7, #32
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b088      	sub	sp, #32
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b456:	2309      	movs	r3, #9
 800b458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b45a:	23c0      	movs	r3, #192	; 0xc0
 800b45c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b45e:	2300      	movs	r3, #0
 800b460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b468:	f107 0308 	add.w	r3, r7, #8
 800b46c:	4619      	mov	r1, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7ff fda1 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f963 	bl	800b740 <SDMMC_GetCmdResp2>
 800b47a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b47c:	69fb      	ldr	r3, [r7, #28]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3720      	adds	r7, #32
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b088      	sub	sp, #32
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b490:	2300      	movs	r3, #0
 800b492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b494:	2303      	movs	r3, #3
 800b496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b498:	2340      	movs	r3, #64	; 0x40
 800b49a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4a6:	f107 0308 	add.w	r3, r7, #8
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff fd82 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	2103      	movs	r1, #3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f9c8 	bl	800b84c <SDMMC_GetCmdResp6>
 800b4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4be:	69fb      	ldr	r3, [r7, #28]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3720      	adds	r7, #32
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b088      	sub	sp, #32
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b4d6:	230d      	movs	r3, #13
 800b4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4da:	2340      	movs	r3, #64	; 0x40
 800b4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4e8:	f107 0308 	add.w	r3, r7, #8
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff fd61 	bl	800afb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f8:	210d      	movs	r1, #13
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f832 	bl	800b564 <SDMMC_GetCmdResp1>
 800b500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b502:	69fb      	ldr	r3, [r7, #28]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b514:	4b11      	ldr	r3, [pc, #68]	; (800b55c <SDMMC_GetCmdError+0x50>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a11      	ldr	r2, [pc, #68]	; (800b560 <SDMMC_GetCmdError+0x54>)
 800b51a:	fba2 2303 	umull	r2, r3, r2, r3
 800b51e:	0a5b      	lsrs	r3, r3, #9
 800b520:	f241 3288 	movw	r2, #5000	; 0x1388
 800b524:	fb02 f303 	mul.w	r3, r2, r3
 800b528:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	1e5a      	subs	r2, r3, #1
 800b52e:	60fa      	str	r2, [r7, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b538:	e009      	b.n	800b54e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b542:	2b00      	cmp	r3, #0
 800b544:	d0f1      	beq.n	800b52a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	22c5      	movs	r2, #197	; 0xc5
 800b54a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	20000008 	.word	0x20000008
 800b560:	10624dd3 	.word	0x10624dd3

0800b564 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	460b      	mov	r3, r1
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b572:	4b70      	ldr	r3, [pc, #448]	; (800b734 <SDMMC_GetCmdResp1+0x1d0>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a70      	ldr	r2, [pc, #448]	; (800b738 <SDMMC_GetCmdResp1+0x1d4>)
 800b578:	fba2 2303 	umull	r2, r3, r2, r3
 800b57c:	0a5a      	lsrs	r2, r3, #9
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	fb02 f303 	mul.w	r3, r2, r3
 800b584:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	1e5a      	subs	r2, r3, #1
 800b58a:	61fa      	str	r2, [r7, #28]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d102      	bne.n	800b596 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b594:	e0c9      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d0ef      	beq.n	800b586 <SDMMC_GetCmdResp1+0x22>
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1ea      	bne.n	800b586 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b4:	f003 0304 	and.w	r3, r3, #4
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d004      	beq.n	800b5c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2204      	movs	r2, #4
 800b5c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5c2:	2304      	movs	r3, #4
 800b5c4:	e0b1      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d004      	beq.n	800b5dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e0a6      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	22c5      	movs	r2, #197	; 0xc5
 800b5e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f7ff fd11 	bl	800b00a <SDIO_GetCommandResponse>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	7afb      	ldrb	r3, [r7, #11]
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d001      	beq.n	800b5f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e099      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7ff fd13 	bl	800b024 <SDIO_GetResponse>
 800b5fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	4b4e      	ldr	r3, [pc, #312]	; (800b73c <SDMMC_GetCmdResp1+0x1d8>)
 800b604:	4013      	ands	r3, r2
 800b606:	2b00      	cmp	r3, #0
 800b608:	d101      	bne.n	800b60e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b60a:	2300      	movs	r3, #0
 800b60c:	e08d      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b00      	cmp	r3, #0
 800b612:	da02      	bge.n	800b61a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b618:	e087      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b624:	2340      	movs	r3, #64	; 0x40
 800b626:	e080      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b632:	2380      	movs	r3, #128	; 0x80
 800b634:	e079      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b640:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b644:	e071      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b650:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b654:	e069      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b664:	e061      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b674:	e059      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b684:	e051      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b694:	e049      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b6a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b6a4:	e041      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b6b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6b4:	e039      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b6c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6c4:	e031      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b6d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b6d4:	e029      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6e4:	e021      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b6f4:	e019      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b700:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b704:	e011      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b714:	e009      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	f003 0308 	and.w	r3, r3, #8
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b720:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b724:	e001      	b.n	800b72a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3720      	adds	r7, #32
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	20000008 	.word	0x20000008
 800b738:	10624dd3 	.word	0x10624dd3
 800b73c:	fdffe008 	.word	0xfdffe008

0800b740 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b748:	4b1f      	ldr	r3, [pc, #124]	; (800b7c8 <SDMMC_GetCmdResp2+0x88>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a1f      	ldr	r2, [pc, #124]	; (800b7cc <SDMMC_GetCmdResp2+0x8c>)
 800b74e:	fba2 2303 	umull	r2, r3, r2, r3
 800b752:	0a5b      	lsrs	r3, r3, #9
 800b754:	f241 3288 	movw	r2, #5000	; 0x1388
 800b758:	fb02 f303 	mul.w	r3, r2, r3
 800b75c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	1e5a      	subs	r2, r3, #1
 800b762:	60fa      	str	r2, [r7, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d102      	bne.n	800b76e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b76c:	e026      	b.n	800b7bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b772:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d0ef      	beq.n	800b75e <SDMMC_GetCmdResp2+0x1e>
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1ea      	bne.n	800b75e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78c:	f003 0304 	and.w	r3, r3, #4
 800b790:	2b00      	cmp	r3, #0
 800b792:	d004      	beq.n	800b79e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2204      	movs	r2, #4
 800b798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b79a:	2304      	movs	r3, #4
 800b79c:	e00e      	b.n	800b7bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d004      	beq.n	800b7b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e003      	b.n	800b7bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	22c5      	movs	r2, #197	; 0xc5
 800b7b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	20000008 	.word	0x20000008
 800b7cc:	10624dd3 	.word	0x10624dd3

0800b7d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7d8:	4b1a      	ldr	r3, [pc, #104]	; (800b844 <SDMMC_GetCmdResp3+0x74>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a1a      	ldr	r2, [pc, #104]	; (800b848 <SDMMC_GetCmdResp3+0x78>)
 800b7de:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e2:	0a5b      	lsrs	r3, r3, #9
 800b7e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	1e5a      	subs	r2, r3, #1
 800b7f2:	60fa      	str	r2, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7fc:	e01b      	b.n	800b836 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b802:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d0ef      	beq.n	800b7ee <SDMMC_GetCmdResp3+0x1e>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1ea      	bne.n	800b7ee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81c:	f003 0304 	and.w	r3, r3, #4
 800b820:	2b00      	cmp	r3, #0
 800b822:	d004      	beq.n	800b82e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2204      	movs	r2, #4
 800b828:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b82a:	2304      	movs	r3, #4
 800b82c:	e003      	b.n	800b836 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	22c5      	movs	r2, #197	; 0xc5
 800b832:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	20000008 	.word	0x20000008
 800b848:	10624dd3 	.word	0x10624dd3

0800b84c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b088      	sub	sp, #32
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	460b      	mov	r3, r1
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b85a:	4b35      	ldr	r3, [pc, #212]	; (800b930 <SDMMC_GetCmdResp6+0xe4>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a35      	ldr	r2, [pc, #212]	; (800b934 <SDMMC_GetCmdResp6+0xe8>)
 800b860:	fba2 2303 	umull	r2, r3, r2, r3
 800b864:	0a5b      	lsrs	r3, r3, #9
 800b866:	f241 3288 	movw	r2, #5000	; 0x1388
 800b86a:	fb02 f303 	mul.w	r3, r2, r3
 800b86e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	1e5a      	subs	r2, r3, #1
 800b874:	61fa      	str	r2, [r7, #28]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d102      	bne.n	800b880 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b87a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b87e:	e052      	b.n	800b926 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b884:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0ef      	beq.n	800b870 <SDMMC_GetCmdResp6+0x24>
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1ea      	bne.n	800b870 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89e:	f003 0304 	and.w	r3, r3, #4
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d004      	beq.n	800b8b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2204      	movs	r2, #4
 800b8aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8ac:	2304      	movs	r3, #4
 800b8ae:	e03a      	b.n	800b926 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d004      	beq.n	800b8c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e02f      	b.n	800b926 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f7ff fb9f 	bl	800b00a <SDIO_GetCommandResponse>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	7afb      	ldrb	r3, [r7, #11]
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d001      	beq.n	800b8da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e025      	b.n	800b926 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	22c5      	movs	r2, #197	; 0xc5
 800b8de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f7ff fb9e 	bl	800b024 <SDIO_GetResponse>
 800b8e8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d106      	bne.n	800b902 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	0c1b      	lsrs	r3, r3, #16
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b8fe:	2300      	movs	r3, #0
 800b900:	e011      	b.n	800b926 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b90c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b910:	e009      	b.n	800b926 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d002      	beq.n	800b922 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b91c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b920:	e001      	b.n	800b926 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b926:	4618      	mov	r0, r3
 800b928:	3720      	adds	r7, #32
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	20000008 	.word	0x20000008
 800b934:	10624dd3 	.word	0x10624dd3

0800b938 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b940:	4b22      	ldr	r3, [pc, #136]	; (800b9cc <SDMMC_GetCmdResp7+0x94>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a22      	ldr	r2, [pc, #136]	; (800b9d0 <SDMMC_GetCmdResp7+0x98>)
 800b946:	fba2 2303 	umull	r2, r3, r2, r3
 800b94a:	0a5b      	lsrs	r3, r3, #9
 800b94c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b950:	fb02 f303 	mul.w	r3, r2, r3
 800b954:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	1e5a      	subs	r2, r3, #1
 800b95a:	60fa      	str	r2, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d102      	bne.n	800b966 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b964:	e02c      	b.n	800b9c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b96a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b972:	2b00      	cmp	r3, #0
 800b974:	d0ef      	beq.n	800b956 <SDMMC_GetCmdResp7+0x1e>
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1ea      	bne.n	800b956 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b984:	f003 0304 	and.w	r3, r3, #4
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d004      	beq.n	800b996 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2204      	movs	r2, #4
 800b990:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b992:	2304      	movs	r3, #4
 800b994:	e014      	b.n	800b9c0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b99a:	f003 0301 	and.w	r3, r3, #1
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d004      	beq.n	800b9ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e009      	b.n	800b9c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2240      	movs	r2, #64	; 0x40
 800b9bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b9be:	2300      	movs	r3, #0
  
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	20000008 	.word	0x20000008
 800b9d0:	10624dd3 	.word	0x10624dd3

0800b9d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b9d8:	4904      	ldr	r1, [pc, #16]	; (800b9ec <MX_FATFS_Init+0x18>)
 800b9da:	4805      	ldr	r0, [pc, #20]	; (800b9f0 <MX_FATFS_Init+0x1c>)
 800b9dc:	f000 fa8a 	bl	800bef4 <FATFS_LinkDriver>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	4b03      	ldr	r3, [pc, #12]	; (800b9f4 <MX_FATFS_Init+0x20>)
 800b9e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b9e8:	bf00      	nop
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	2000b174 	.word	0x2000b174
 800b9f0:	0802fda4 	.word	0x0802fda4
 800b9f4:	2000b170 	.word	0x2000b170

0800b9f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ba02:	f000 f87b 	bl	800bafc <BSP_SD_IsDetected>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d001      	beq.n	800ba10 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e012      	b.n	800ba36 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ba10:	480b      	ldr	r0, [pc, #44]	; (800ba40 <BSP_SD_Init+0x48>)
 800ba12:	f7fc fd05 	bl	8008420 <HAL_SD_Init>
 800ba16:	4603      	mov	r3, r0
 800ba18:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d109      	bne.n	800ba34 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ba20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ba24:	4806      	ldr	r0, [pc, #24]	; (800ba40 <BSP_SD_Init+0x48>)
 800ba26:	f7fd f94b 	bl	8008cc0 <HAL_SD_ConfigWideBusOperation>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ba34:	79fb      	ldrb	r3, [r7, #7]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	2000afb4 	.word	0x2000afb4

0800ba44 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b086      	sub	sp, #24
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	68f9      	ldr	r1, [r7, #12]
 800ba5a:	4806      	ldr	r0, [pc, #24]	; (800ba74 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ba5c:	f7fc fd8e 	bl	800857c <HAL_SD_ReadBlocks_DMA>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d001      	beq.n	800ba6a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	2000afb4 	.word	0x2000afb4

0800ba78 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	68f9      	ldr	r1, [r7, #12]
 800ba8e:	4806      	ldr	r0, [pc, #24]	; (800baa8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ba90:	f7fc fe56 	bl	8008740 <HAL_SD_WriteBlocks_DMA>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d001      	beq.n	800ba9e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3718      	adds	r7, #24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	2000afb4 	.word	0x2000afb4

0800baac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bab0:	4805      	ldr	r0, [pc, #20]	; (800bac8 <BSP_SD_GetCardState+0x1c>)
 800bab2:	f7fd f99f 	bl	8008df4 <HAL_SD_GetCardState>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b04      	cmp	r3, #4
 800baba:	bf14      	ite	ne
 800babc:	2301      	movne	r3, #1
 800babe:	2300      	moveq	r3, #0
 800bac0:	b2db      	uxtb	r3, r3
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	2000afb4 	.word	0x2000afb4

0800bacc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bad4:	6879      	ldr	r1, [r7, #4]
 800bad6:	4803      	ldr	r0, [pc, #12]	; (800bae4 <BSP_SD_GetCardInfo+0x18>)
 800bad8:	f7fd f8c6 	bl	8008c68 <HAL_SD_GetCardInfo>
}
 800badc:	bf00      	nop
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	2000afb4 	.word	0x2000afb4

0800bae8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800baf0:	f000 f9a2 	bl	800be38 <BSP_SD_ReadCpltCallback>
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bb02:	2301      	movs	r3, #1
 800bb04:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bb06:	f000 f80b 	bl	800bb20 <BSP_PlatformIsDetected>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d101      	bne.n	800bb14 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bb10:	2300      	movs	r3, #0
 800bb12:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	b2db      	uxtb	r3, r3
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bb26:	2301      	movs	r3, #1
 800bb28:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bb2a:	2108      	movs	r1, #8
 800bb2c:	4806      	ldr	r0, [pc, #24]	; (800bb48 <BSP_PlatformIsDetected+0x28>)
 800bb2e:	f7fa fa0d 	bl	8005f4c <HAL_GPIO_ReadPin>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bb3c:	79fb      	ldrb	r3, [r7, #7]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	40021800 	.word	0x40021800

0800bb4c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800bb54:	f000 fa8e 	bl	800c074 <osKernelGetTickCount>
 800bb58:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800bb5a:	e006      	b.n	800bb6a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb5c:	f7ff ffa6 	bl	800baac <BSP_SD_GetCardState>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	e009      	b.n	800bb7e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800bb6a:	f000 fa83 	bl	800c074 <osKernelGetTickCount>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d8f0      	bhi.n	800bb5c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bb7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bb92:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <SD_CheckStatus+0x38>)
 800bb94:	2201      	movs	r2, #1
 800bb96:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb98:	f7ff ff88 	bl	800baac <BSP_SD_GetCardState>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d107      	bne.n	800bbb2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bba2:	4b07      	ldr	r3, [pc, #28]	; (800bbc0 <SD_CheckStatus+0x38>)
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	f023 0301 	bic.w	r3, r3, #1
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	4b04      	ldr	r3, [pc, #16]	; (800bbc0 <SD_CheckStatus+0x38>)
 800bbb0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bbb2:	4b03      	ldr	r3, [pc, #12]	; (800bbc0 <SD_CheckStatus+0x38>)
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	b2db      	uxtb	r3, r3
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20000011 	.word	0x20000011

0800bbc4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	4603      	mov	r3, r0
 800bbcc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bbce:	4b1c      	ldr	r3, [pc, #112]	; (800bc40 <SD_initialize+0x7c>)
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800bbd4:	f000 fa06 	bl	800bfe4 <osKernelGetState>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d129      	bne.n	800bc32 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bbde:	f7ff ff0b 	bl	800b9f8 <BSP_SD_Init>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d107      	bne.n	800bbf8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bbe8:	79fb      	ldrb	r3, [r7, #7]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff ffcc 	bl	800bb88 <SD_CheckStatus>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	4b12      	ldr	r3, [pc, #72]	; (800bc40 <SD_initialize+0x7c>)
 800bbf6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800bbf8:	4b11      	ldr	r3, [pc, #68]	; (800bc40 <SD_initialize+0x7c>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d017      	beq.n	800bc32 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800bc02:	4b10      	ldr	r3, [pc, #64]	; (800bc44 <SD_initialize+0x80>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d107      	bne.n	800bc1a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2102      	movs	r1, #2
 800bc0e:	200a      	movs	r0, #10
 800bc10:	f000 fc12 	bl	800c438 <osMessageQueueNew>
 800bc14:	4603      	mov	r3, r0
 800bc16:	4a0b      	ldr	r2, [pc, #44]	; (800bc44 <SD_initialize+0x80>)
 800bc18:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800bc1a:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <SD_initialize+0x80>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d107      	bne.n	800bc32 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800bc22:	4b07      	ldr	r3, [pc, #28]	; (800bc40 <SD_initialize+0x7c>)
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	f043 0301 	orr.w	r3, r3, #1
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	4b04      	ldr	r3, [pc, #16]	; (800bc40 <SD_initialize+0x7c>)
 800bc30:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bc32:	4b03      	ldr	r3, [pc, #12]	; (800bc40 <SD_initialize+0x7c>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	b2db      	uxtb	r3, r3
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20000011 	.word	0x20000011
 800bc44:	20000128 	.word	0x20000128

0800bc48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7ff ff97 	bl	800bb88 <SD_CheckStatus>
 800bc5a:	4603      	mov	r3, r0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60b9      	str	r1, [r7, #8]
 800bc6c:	607a      	str	r2, [r7, #4]
 800bc6e:	603b      	str	r3, [r7, #0]
 800bc70:	4603      	mov	r3, r0
 800bc72:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc78:	f247 5030 	movw	r0, #30000	; 0x7530
 800bc7c:	f7ff ff66 	bl	800bb4c <SD_CheckStatusWithTimeout>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	da01      	bge.n	800bc8a <SD_read+0x26>
  {
    return res;
 800bc86:	7ffb      	ldrb	r3, [r7, #31]
 800bc88:	e02f      	b.n	800bcea <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	6879      	ldr	r1, [r7, #4]
 800bc8e:	68b8      	ldr	r0, [r7, #8]
 800bc90:	f7ff fed8 	bl	800ba44 <BSP_SD_ReadBlocks_DMA>
 800bc94:	4603      	mov	r3, r0
 800bc96:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800bc98:	7fbb      	ldrb	r3, [r7, #30]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d124      	bne.n	800bce8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bc9e:	4b15      	ldr	r3, [pc, #84]	; (800bcf4 <SD_read+0x90>)
 800bca0:	6818      	ldr	r0, [r3, #0]
 800bca2:	f107 0112 	add.w	r1, r7, #18
 800bca6:	f247 5330 	movw	r3, #30000	; 0x7530
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f000 fc98 	bl	800c5e0 <osMessageQueueGet>
 800bcb0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d117      	bne.n	800bce8 <SD_read+0x84>
 800bcb8:	8a7b      	ldrh	r3, [r7, #18]
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d114      	bne.n	800bce8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800bcbe:	f000 f9d9 	bl	800c074 <osKernelGetTickCount>
 800bcc2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bcc4:	e007      	b.n	800bcd6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bcc6:	f7ff fef1 	bl	800baac <BSP_SD_GetCardState>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d102      	bne.n	800bcd6 <SD_read+0x72>
              {
                res = RES_OK;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bcd4:	e008      	b.n	800bce8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bcd6:	f000 f9cd 	bl	800c074 <osKernelGetTickCount>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	f247 522f 	movw	r2, #29999	; 0x752f
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d9ee      	bls.n	800bcc6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bce8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3720      	adds	r7, #32
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20000128 	.word	0x20000128

0800bcf8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60b9      	str	r1, [r7, #8]
 800bd00:	607a      	str	r2, [r7, #4]
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bd0c:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd10:	f7ff ff1c 	bl	800bb4c <SD_CheckStatusWithTimeout>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	da01      	bge.n	800bd1e <SD_write+0x26>
  {
    return res;
 800bd1a:	7ffb      	ldrb	r3, [r7, #31]
 800bd1c:	e02d      	b.n	800bd7a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	6879      	ldr	r1, [r7, #4]
 800bd22:	68b8      	ldr	r0, [r7, #8]
 800bd24:	f7ff fea8 	bl	800ba78 <BSP_SD_WriteBlocks_DMA>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d124      	bne.n	800bd78 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bd2e:	4b15      	ldr	r3, [pc, #84]	; (800bd84 <SD_write+0x8c>)
 800bd30:	6818      	ldr	r0, [r3, #0]
 800bd32:	f107 0112 	add.w	r1, r7, #18
 800bd36:	f247 5330 	movw	r3, #30000	; 0x7530
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f000 fc50 	bl	800c5e0 <osMessageQueueGet>
 800bd40:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d117      	bne.n	800bd78 <SD_write+0x80>
 800bd48:	8a7b      	ldrh	r3, [r7, #18]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d114      	bne.n	800bd78 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800bd4e:	f000 f991 	bl	800c074 <osKernelGetTickCount>
 800bd52:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bd54:	e007      	b.n	800bd66 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd56:	f7ff fea9 	bl	800baac <BSP_SD_GetCardState>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <SD_write+0x6e>
          {
            res = RES_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	77fb      	strb	r3, [r7, #31]
            break;
 800bd64:	e008      	b.n	800bd78 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bd66:	f000 f985 	bl	800c074 <osKernelGetTickCount>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d9ee      	bls.n	800bd56 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800bd78:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3720      	adds	r7, #32
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	20000128 	.word	0x20000128

0800bd88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b08c      	sub	sp, #48	; 0x30
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	4603      	mov	r3, r0
 800bd90:	603a      	str	r2, [r7, #0]
 800bd92:	71fb      	strb	r3, [r7, #7]
 800bd94:	460b      	mov	r3, r1
 800bd96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bd9e:	4b25      	ldr	r3, [pc, #148]	; (800be34 <SD_ioctl+0xac>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	f003 0301 	and.w	r3, r3, #1
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d001      	beq.n	800bdb0 <SD_ioctl+0x28>
 800bdac:	2303      	movs	r3, #3
 800bdae:	e03c      	b.n	800be2a <SD_ioctl+0xa2>

  switch (cmd)
 800bdb0:	79bb      	ldrb	r3, [r7, #6]
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d834      	bhi.n	800be20 <SD_ioctl+0x98>
 800bdb6:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <SD_ioctl+0x34>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800bdcd 	.word	0x0800bdcd
 800bdc0:	0800bdd5 	.word	0x0800bdd5
 800bdc4:	0800bded 	.word	0x0800bded
 800bdc8:	0800be07 	.word	0x0800be07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdd2:	e028      	b.n	800be26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdd4:	f107 030c 	add.w	r3, r7, #12
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7ff fe77 	bl	800bacc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bdde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdea:	e01c      	b.n	800be26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdec:	f107 030c 	add.w	r3, r7, #12
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7ff fe6b 	bl	800bacc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be04:	e00f      	b.n	800be26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be06:	f107 030c 	add.w	r3, r7, #12
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7ff fe5e 	bl	800bacc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	0a5a      	lsrs	r2, r3, #9
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be1e:	e002      	b.n	800be26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800be20:	2304      	movs	r3, #4
 800be22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800be26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3730      	adds	r7, #48	; 0x30
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20000011 	.word	0x20000011

0800be38 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800be3e:	2301      	movs	r3, #1
 800be40:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800be42:	4b05      	ldr	r3, [pc, #20]	; (800be58 <BSP_SD_ReadCpltCallback+0x20>)
 800be44:	6818      	ldr	r0, [r3, #0]
 800be46:	1db9      	adds	r1, r7, #6
 800be48:	2300      	movs	r3, #0
 800be4a:	2200      	movs	r2, #0
 800be4c:	f000 fb68 	bl	800c520 <osMessageQueuePut>
#endif
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	20000128 	.word	0x20000128

0800be5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	4613      	mov	r3, r2
 800be68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be6a:	2301      	movs	r3, #1
 800be6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800be6e:	2300      	movs	r3, #0
 800be70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800be72:	4b1f      	ldr	r3, [pc, #124]	; (800bef0 <FATFS_LinkDriverEx+0x94>)
 800be74:	7a5b      	ldrb	r3, [r3, #9]
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d131      	bne.n	800bee0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be7c:	4b1c      	ldr	r3, [pc, #112]	; (800bef0 <FATFS_LinkDriverEx+0x94>)
 800be7e:	7a5b      	ldrb	r3, [r3, #9]
 800be80:	b2db      	uxtb	r3, r3
 800be82:	461a      	mov	r2, r3
 800be84:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <FATFS_LinkDriverEx+0x94>)
 800be86:	2100      	movs	r1, #0
 800be88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800be8a:	4b19      	ldr	r3, [pc, #100]	; (800bef0 <FATFS_LinkDriverEx+0x94>)
 800be8c:	7a5b      	ldrb	r3, [r3, #9]
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	4a17      	ldr	r2, [pc, #92]	; (800bef0 <FATFS_LinkDriverEx+0x94>)
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800be9a:	4b15      	ldr	r3, [pc, #84]	; (800bef0 <FATFS_LinkDriverEx+0x94>)
 800be9c:	7a5b      	ldrb	r3, [r3, #9]
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	461a      	mov	r2, r3
 800bea2:	4b13      	ldr	r3, [pc, #76]	; (800bef0 <FATFS_LinkDriverEx+0x94>)
 800bea4:	4413      	add	r3, r2
 800bea6:	79fa      	ldrb	r2, [r7, #7]
 800bea8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800beaa:	4b11      	ldr	r3, [pc, #68]	; (800bef0 <FATFS_LinkDriverEx+0x94>)
 800beac:	7a5b      	ldrb	r3, [r3, #9]
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	1c5a      	adds	r2, r3, #1
 800beb2:	b2d1      	uxtb	r1, r2
 800beb4:	4a0e      	ldr	r2, [pc, #56]	; (800bef0 <FATFS_LinkDriverEx+0x94>)
 800beb6:	7251      	strb	r1, [r2, #9]
 800beb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800beba:	7dbb      	ldrb	r3, [r7, #22]
 800bebc:	3330      	adds	r3, #48	; 0x30
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	3301      	adds	r3, #1
 800bec8:	223a      	movs	r2, #58	; 0x3a
 800beca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	3302      	adds	r3, #2
 800bed0:	222f      	movs	r2, #47	; 0x2f
 800bed2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	3303      	adds	r3, #3
 800bed8:	2200      	movs	r2, #0
 800beda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	371c      	adds	r7, #28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	2000012c 	.word	0x2000012c

0800bef4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800befe:	2200      	movs	r2, #0
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff ffaa 	bl	800be5c <FATFS_LinkDriverEx>
 800bf08:	4603      	mov	r3, r0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <__NVIC_SetPriority>:
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	6039      	str	r1, [r7, #0]
 800bf1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	db0a      	blt.n	800bf3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	490c      	ldr	r1, [pc, #48]	; (800bf60 <__NVIC_SetPriority+0x4c>)
 800bf2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf32:	0112      	lsls	r2, r2, #4
 800bf34:	b2d2      	uxtb	r2, r2
 800bf36:	440b      	add	r3, r1
 800bf38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bf3c:	e00a      	b.n	800bf54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	4908      	ldr	r1, [pc, #32]	; (800bf64 <__NVIC_SetPriority+0x50>)
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	f003 030f 	and.w	r3, r3, #15
 800bf4a:	3b04      	subs	r3, #4
 800bf4c:	0112      	lsls	r2, r2, #4
 800bf4e:	b2d2      	uxtb	r2, r2
 800bf50:	440b      	add	r3, r1
 800bf52:	761a      	strb	r2, [r3, #24]
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	e000e100 	.word	0xe000e100
 800bf64:	e000ed00 	.word	0xe000ed00

0800bf68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bf6c:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <SysTick_Handler+0x1c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf70:	f002 fae4 	bl	800e53c <xTaskGetSchedulerState>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d001      	beq.n	800bf7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bf7a:	f003 f9cd 	bl	800f318 <xPortSysTickHandler>
  }
}
 800bf7e:	bf00      	nop
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	e000e010 	.word	0xe000e010

0800bf88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	f06f 0004 	mvn.w	r0, #4
 800bf92:	f7ff ffbf 	bl	800bf14 <__NVIC_SetPriority>
#endif
}
 800bf96:	bf00      	nop
 800bf98:	bd80      	pop	{r7, pc}
	...

0800bf9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfa2:	f3ef 8305 	mrs	r3, IPSR
 800bfa6:	603b      	str	r3, [r7, #0]
  return(result);
 800bfa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d003      	beq.n	800bfb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bfae:	f06f 0305 	mvn.w	r3, #5
 800bfb2:	607b      	str	r3, [r7, #4]
 800bfb4:	e00c      	b.n	800bfd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bfb6:	4b0a      	ldr	r3, [pc, #40]	; (800bfe0 <osKernelInitialize+0x44>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d105      	bne.n	800bfca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bfbe:	4b08      	ldr	r3, [pc, #32]	; (800bfe0 <osKernelInitialize+0x44>)
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	607b      	str	r3, [r7, #4]
 800bfc8:	e002      	b.n	800bfd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bfca:	f04f 33ff 	mov.w	r3, #4294967295
 800bfce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bfd0:	687b      	ldr	r3, [r7, #4]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	20000138 	.word	0x20000138

0800bfe4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800bfea:	f002 faa7 	bl	800e53c <xTaskGetSchedulerState>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d004      	beq.n	800bffe <osKernelGetState+0x1a>
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d105      	bne.n	800c004 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800bff8:	2302      	movs	r3, #2
 800bffa:	607b      	str	r3, [r7, #4]
      break;
 800bffc:	e00c      	b.n	800c018 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800bffe:	2303      	movs	r3, #3
 800c000:	607b      	str	r3, [r7, #4]
      break;
 800c002:	e009      	b.n	800c018 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c004:	4b07      	ldr	r3, [pc, #28]	; (800c024 <osKernelGetState+0x40>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d102      	bne.n	800c012 <osKernelGetState+0x2e>
        state = osKernelReady;
 800c00c:	2301      	movs	r3, #1
 800c00e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c010:	e001      	b.n	800c016 <osKernelGetState+0x32>
        state = osKernelInactive;
 800c012:	2300      	movs	r3, #0
 800c014:	607b      	str	r3, [r7, #4]
      break;
 800c016:	bf00      	nop
  }

  return (state);
 800c018:	687b      	ldr	r3, [r7, #4]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	20000138 	.word	0x20000138

0800c028 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c02e:	f3ef 8305 	mrs	r3, IPSR
 800c032:	603b      	str	r3, [r7, #0]
  return(result);
 800c034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c03a:	f06f 0305 	mvn.w	r3, #5
 800c03e:	607b      	str	r3, [r7, #4]
 800c040:	e010      	b.n	800c064 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c042:	4b0b      	ldr	r3, [pc, #44]	; (800c070 <osKernelStart+0x48>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d109      	bne.n	800c05e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c04a:	f7ff ff9d 	bl	800bf88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c04e:	4b08      	ldr	r3, [pc, #32]	; (800c070 <osKernelStart+0x48>)
 800c050:	2202      	movs	r2, #2
 800c052:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c054:	f001 fe04 	bl	800dc60 <vTaskStartScheduler>
      stat = osOK;
 800c058:	2300      	movs	r3, #0
 800c05a:	607b      	str	r3, [r7, #4]
 800c05c:	e002      	b.n	800c064 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c05e:	f04f 33ff 	mov.w	r3, #4294967295
 800c062:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c064:	687b      	ldr	r3, [r7, #4]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20000138 	.word	0x20000138

0800c074 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c07a:	f3ef 8305 	mrs	r3, IPSR
 800c07e:	603b      	str	r3, [r7, #0]
  return(result);
 800c080:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c086:	f001 ff17 	bl	800deb8 <xTaskGetTickCountFromISR>
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	e002      	b.n	800c094 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c08e:	f001 ff03 	bl	800de98 <xTaskGetTickCount>
 800c092:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c094:	687b      	ldr	r3, [r7, #4]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b08e      	sub	sp, #56	; 0x38
 800c0a2:	af04      	add	r7, sp, #16
 800c0a4:	60f8      	str	r0, [r7, #12]
 800c0a6:	60b9      	str	r1, [r7, #8]
 800c0a8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0ae:	f3ef 8305 	mrs	r3, IPSR
 800c0b2:	617b      	str	r3, [r7, #20]
  return(result);
 800c0b4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d17e      	bne.n	800c1b8 <osThreadNew+0x11a>
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d07b      	beq.n	800c1b8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c0c0:	2340      	movs	r3, #64	; 0x40
 800c0c2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c0c4:	2318      	movs	r3, #24
 800c0c6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d045      	beq.n	800c164 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <osThreadNew+0x48>
        name = attr->name;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d002      	beq.n	800c0f4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	699b      	ldr	r3, [r3, #24]
 800c0f2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d008      	beq.n	800c10c <osThreadNew+0x6e>
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	2b38      	cmp	r3, #56	; 0x38
 800c0fe:	d805      	bhi.n	800c10c <osThreadNew+0x6e>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f003 0301 	and.w	r3, r3, #1
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <osThreadNew+0x72>
        return (NULL);
 800c10c:	2300      	movs	r3, #0
 800c10e:	e054      	b.n	800c1ba <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d003      	beq.n	800c120 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	695b      	ldr	r3, [r3, #20]
 800c11c:	089b      	lsrs	r3, r3, #2
 800c11e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00e      	beq.n	800c146 <osThreadNew+0xa8>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	2bbb      	cmp	r3, #187	; 0xbb
 800c12e:	d90a      	bls.n	800c146 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c134:	2b00      	cmp	r3, #0
 800c136:	d006      	beq.n	800c146 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <osThreadNew+0xa8>
        mem = 1;
 800c140:	2301      	movs	r3, #1
 800c142:	61bb      	str	r3, [r7, #24]
 800c144:	e010      	b.n	800c168 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10c      	bne.n	800c168 <osThreadNew+0xca>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d108      	bne.n	800c168 <osThreadNew+0xca>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d104      	bne.n	800c168 <osThreadNew+0xca>
          mem = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	61bb      	str	r3, [r7, #24]
 800c162:	e001      	b.n	800c168 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d110      	bne.n	800c190 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c176:	9202      	str	r2, [sp, #8]
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	6a3a      	ldr	r2, [r7, #32]
 800c182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f001 fb7f 	bl	800d888 <xTaskCreateStatic>
 800c18a:	4603      	mov	r3, r0
 800c18c:	613b      	str	r3, [r7, #16]
 800c18e:	e013      	b.n	800c1b8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d110      	bne.n	800c1b8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c196:	6a3b      	ldr	r3, [r7, #32]
 800c198:	b29a      	uxth	r2, r3
 800c19a:	f107 0310 	add.w	r3, r7, #16
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	9300      	str	r3, [sp, #0]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f001 fbca 	bl	800d942 <xTaskCreate>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d001      	beq.n	800c1b8 <osThreadNew+0x11a>
            hTask = NULL;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c1b8:	693b      	ldr	r3, [r7, #16]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3728      	adds	r7, #40	; 0x28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b084      	sub	sp, #16
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1ca:	f3ef 8305 	mrs	r3, IPSR
 800c1ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800c1d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d003      	beq.n	800c1de <osDelay+0x1c>
    stat = osErrorISR;
 800c1d6:	f06f 0305 	mvn.w	r3, #5
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	e007      	b.n	800c1ee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <osDelay+0x2c>
      vTaskDelay(ticks);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 fd05 	bl	800dbf8 <vTaskDelay>
    }
  }

  return (stat);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08a      	sub	sp, #40	; 0x28
 800c1fc:	af02      	add	r7, sp, #8
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c204:	2300      	movs	r3, #0
 800c206:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c208:	f3ef 8305 	mrs	r3, IPSR
 800c20c:	613b      	str	r3, [r7, #16]
  return(result);
 800c20e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c210:	2b00      	cmp	r3, #0
 800c212:	d175      	bne.n	800c300 <osSemaphoreNew+0x108>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d072      	beq.n	800c300 <osSemaphoreNew+0x108>
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d86e      	bhi.n	800c300 <osSemaphoreNew+0x108>
    mem = -1;
 800c222:	f04f 33ff 	mov.w	r3, #4294967295
 800c226:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d015      	beq.n	800c25a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d006      	beq.n	800c244 <osSemaphoreNew+0x4c>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	2b4f      	cmp	r3, #79	; 0x4f
 800c23c:	d902      	bls.n	800c244 <osSemaphoreNew+0x4c>
        mem = 1;
 800c23e:	2301      	movs	r3, #1
 800c240:	61bb      	str	r3, [r7, #24]
 800c242:	e00c      	b.n	800c25e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d108      	bne.n	800c25e <osSemaphoreNew+0x66>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d104      	bne.n	800c25e <osSemaphoreNew+0x66>
          mem = 0;
 800c254:	2300      	movs	r3, #0
 800c256:	61bb      	str	r3, [r7, #24]
 800c258:	e001      	b.n	800c25e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c264:	d04c      	beq.n	800c300 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d128      	bne.n	800c2be <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d10a      	bne.n	800c288 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	2203      	movs	r2, #3
 800c278:	9200      	str	r2, [sp, #0]
 800c27a:	2200      	movs	r2, #0
 800c27c:	2100      	movs	r1, #0
 800c27e:	2001      	movs	r0, #1
 800c280:	f000 fb5c 	bl	800c93c <xQueueGenericCreateStatic>
 800c284:	61f8      	str	r0, [r7, #28]
 800c286:	e005      	b.n	800c294 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c288:	2203      	movs	r2, #3
 800c28a:	2100      	movs	r1, #0
 800c28c:	2001      	movs	r0, #1
 800c28e:	f000 fbcd 	bl	800ca2c <xQueueGenericCreate>
 800c292:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d022      	beq.n	800c2e0 <osSemaphoreNew+0xe8>
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d01f      	beq.n	800c2e0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	69f8      	ldr	r0, [r7, #28]
 800c2a8:	f000 fc88 	bl	800cbbc <xQueueGenericSend>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d016      	beq.n	800c2e0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c2b2:	69f8      	ldr	r0, [r7, #28]
 800c2b4:	f001 f914 	bl	800d4e0 <vQueueDelete>
            hSemaphore = NULL;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	61fb      	str	r3, [r7, #28]
 800c2bc:	e010      	b.n	800c2e0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d108      	bne.n	800c2d6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f000 fc0a 	bl	800cae6 <xQueueCreateCountingSemaphoreStatic>
 800c2d2:	61f8      	str	r0, [r7, #28]
 800c2d4:	e004      	b.n	800c2e0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c2d6:	68b9      	ldr	r1, [r7, #8]
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f000 fc3b 	bl	800cb54 <xQueueCreateCountingSemaphore>
 800c2de:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00c      	beq.n	800c300 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d003      	beq.n	800c2f4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	617b      	str	r3, [r7, #20]
 800c2f2:	e001      	b.n	800c2f8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c2f8:	6979      	ldr	r1, [r7, #20]
 800c2fa:	69f8      	ldr	r0, [r7, #28]
 800c2fc:	f001 fa3c 	bl	800d778 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c300:	69fb      	ldr	r3, [r7, #28]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3720      	adds	r7, #32
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d103      	bne.n	800c32c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c324:	f06f 0303 	mvn.w	r3, #3
 800c328:	617b      	str	r3, [r7, #20]
 800c32a:	e039      	b.n	800c3a0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c32c:	f3ef 8305 	mrs	r3, IPSR
 800c330:	60fb      	str	r3, [r7, #12]
  return(result);
 800c332:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c334:	2b00      	cmp	r3, #0
 800c336:	d022      	beq.n	800c37e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c33e:	f06f 0303 	mvn.w	r3, #3
 800c342:	617b      	str	r3, [r7, #20]
 800c344:	e02c      	b.n	800c3a0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c346:	2300      	movs	r3, #0
 800c348:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c34a:	f107 0308 	add.w	r3, r7, #8
 800c34e:	461a      	mov	r2, r3
 800c350:	2100      	movs	r1, #0
 800c352:	6938      	ldr	r0, [r7, #16]
 800c354:	f001 f844 	bl	800d3e0 <xQueueReceiveFromISR>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d003      	beq.n	800c366 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c35e:	f06f 0302 	mvn.w	r3, #2
 800c362:	617b      	str	r3, [r7, #20]
 800c364:	e01c      	b.n	800c3a0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d019      	beq.n	800c3a0 <osSemaphoreAcquire+0x94>
 800c36c:	4b0f      	ldr	r3, [pc, #60]	; (800c3ac <osSemaphoreAcquire+0xa0>)
 800c36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	e010      	b.n	800c3a0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6938      	ldr	r0, [r7, #16]
 800c382:	f000 ff21 	bl	800d1c8 <xQueueSemaphoreTake>
 800c386:	4603      	mov	r3, r0
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d009      	beq.n	800c3a0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c392:	f06f 0301 	mvn.w	r3, #1
 800c396:	617b      	str	r3, [r7, #20]
 800c398:	e002      	b.n	800c3a0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c39a:	f06f 0302 	mvn.w	r3, #2
 800c39e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c3a0:	697b      	ldr	r3, [r7, #20]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	e000ed04 	.word	0xe000ed04

0800c3b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d103      	bne.n	800c3ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c3c6:	f06f 0303 	mvn.w	r3, #3
 800c3ca:	617b      	str	r3, [r7, #20]
 800c3cc:	e02c      	b.n	800c428 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3ce:	f3ef 8305 	mrs	r3, IPSR
 800c3d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d01a      	beq.n	800c410 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c3de:	f107 0308 	add.w	r3, r7, #8
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6938      	ldr	r0, [r7, #16]
 800c3e6:	f000 fd82 	bl	800ceee <xQueueGiveFromISR>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d003      	beq.n	800c3f8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c3f0:	f06f 0302 	mvn.w	r3, #2
 800c3f4:	617b      	str	r3, [r7, #20]
 800c3f6:	e017      	b.n	800c428 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d014      	beq.n	800c428 <osSemaphoreRelease+0x78>
 800c3fe:	4b0d      	ldr	r3, [pc, #52]	; (800c434 <osSemaphoreRelease+0x84>)
 800c400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	f3bf 8f4f 	dsb	sy
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	e00b      	b.n	800c428 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c410:	2300      	movs	r3, #0
 800c412:	2200      	movs	r2, #0
 800c414:	2100      	movs	r1, #0
 800c416:	6938      	ldr	r0, [r7, #16]
 800c418:	f000 fbd0 	bl	800cbbc <xQueueGenericSend>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d002      	beq.n	800c428 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c422:	f06f 0302 	mvn.w	r3, #2
 800c426:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c428:	697b      	ldr	r3, [r7, #20]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	e000ed04 	.word	0xe000ed04

0800c438 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08a      	sub	sp, #40	; 0x28
 800c43c:	af02      	add	r7, sp, #8
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c444:	2300      	movs	r3, #0
 800c446:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c448:	f3ef 8305 	mrs	r3, IPSR
 800c44c:	613b      	str	r3, [r7, #16]
  return(result);
 800c44e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c450:	2b00      	cmp	r3, #0
 800c452:	d15f      	bne.n	800c514 <osMessageQueueNew+0xdc>
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d05c      	beq.n	800c514 <osMessageQueueNew+0xdc>
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d059      	beq.n	800c514 <osMessageQueueNew+0xdc>
    mem = -1;
 800c460:	f04f 33ff 	mov.w	r3, #4294967295
 800c464:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d029      	beq.n	800c4c0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d012      	beq.n	800c49a <osMessageQueueNew+0x62>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	2b4f      	cmp	r3, #79	; 0x4f
 800c47a:	d90e      	bls.n	800c49a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00a      	beq.n	800c49a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	695a      	ldr	r2, [r3, #20]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	fb01 f303 	mul.w	r3, r1, r3
 800c490:	429a      	cmp	r2, r3
 800c492:	d302      	bcc.n	800c49a <osMessageQueueNew+0x62>
        mem = 1;
 800c494:	2301      	movs	r3, #1
 800c496:	61bb      	str	r3, [r7, #24]
 800c498:	e014      	b.n	800c4c4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d110      	bne.n	800c4c4 <osMessageQueueNew+0x8c>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10c      	bne.n	800c4c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d108      	bne.n	800c4c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	695b      	ldr	r3, [r3, #20]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d104      	bne.n	800c4c4 <osMessageQueueNew+0x8c>
          mem = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	61bb      	str	r3, [r7, #24]
 800c4be:	e001      	b.n	800c4c4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d10b      	bne.n	800c4e2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	691a      	ldr	r2, [r3, #16]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	9100      	str	r1, [sp, #0]
 800c4d6:	68b9      	ldr	r1, [r7, #8]
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 fa2f 	bl	800c93c <xQueueGenericCreateStatic>
 800c4de:	61f8      	str	r0, [r7, #28]
 800c4e0:	e008      	b.n	800c4f4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d105      	bne.n	800c4f4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	68b9      	ldr	r1, [r7, #8]
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f000 fa9d 	bl	800ca2c <xQueueGenericCreate>
 800c4f2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00c      	beq.n	800c514 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d003      	beq.n	800c508 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e001      	b.n	800c50c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c508:	2300      	movs	r3, #0
 800c50a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c50c:	6979      	ldr	r1, [r7, #20]
 800c50e:	69f8      	ldr	r0, [r7, #28]
 800c510:	f001 f932 	bl	800d778 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c514:	69fb      	ldr	r3, [r7, #28]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3720      	adds	r7, #32
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c520:	b580      	push	{r7, lr}
 800c522:	b088      	sub	sp, #32
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	603b      	str	r3, [r7, #0]
 800c52c:	4613      	mov	r3, r2
 800c52e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c534:	2300      	movs	r3, #0
 800c536:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c538:	f3ef 8305 	mrs	r3, IPSR
 800c53c:	617b      	str	r3, [r7, #20]
  return(result);
 800c53e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c540:	2b00      	cmp	r3, #0
 800c542:	d028      	beq.n	800c596 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d005      	beq.n	800c556 <osMessageQueuePut+0x36>
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <osMessageQueuePut+0x36>
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c556:	f06f 0303 	mvn.w	r3, #3
 800c55a:	61fb      	str	r3, [r7, #28]
 800c55c:	e038      	b.n	800c5d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c55e:	2300      	movs	r3, #0
 800c560:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c562:	f107 0210 	add.w	r2, r7, #16
 800c566:	2300      	movs	r3, #0
 800c568:	68b9      	ldr	r1, [r7, #8]
 800c56a:	69b8      	ldr	r0, [r7, #24]
 800c56c:	f000 fc24 	bl	800cdb8 <xQueueGenericSendFromISR>
 800c570:	4603      	mov	r3, r0
 800c572:	2b01      	cmp	r3, #1
 800c574:	d003      	beq.n	800c57e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c576:	f06f 0302 	mvn.w	r3, #2
 800c57a:	61fb      	str	r3, [r7, #28]
 800c57c:	e028      	b.n	800c5d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d025      	beq.n	800c5d0 <osMessageQueuePut+0xb0>
 800c584:	4b15      	ldr	r3, [pc, #84]	; (800c5dc <osMessageQueuePut+0xbc>)
 800c586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c58a:	601a      	str	r2, [r3, #0]
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	e01c      	b.n	800c5d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <osMessageQueuePut+0x82>
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d103      	bne.n	800c5aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c5a2:	f06f 0303 	mvn.w	r3, #3
 800c5a6:	61fb      	str	r3, [r7, #28]
 800c5a8:	e012      	b.n	800c5d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	69b8      	ldr	r0, [r7, #24]
 800c5b2:	f000 fb03 	bl	800cbbc <xQueueGenericSend>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d009      	beq.n	800c5d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d003      	beq.n	800c5ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c5c2:	f06f 0301 	mvn.w	r3, #1
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	e002      	b.n	800c5d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c5ca:	f06f 0302 	mvn.w	r3, #2
 800c5ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c5d0:	69fb      	ldr	r3, [r7, #28]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3720      	adds	r7, #32
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	e000ed04 	.word	0xe000ed04

0800c5e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5f6:	f3ef 8305 	mrs	r3, IPSR
 800c5fa:	617b      	str	r3, [r7, #20]
  return(result);
 800c5fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d028      	beq.n	800c654 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d005      	beq.n	800c614 <osMessageQueueGet+0x34>
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <osMessageQueueGet+0x34>
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d003      	beq.n	800c61c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c614:	f06f 0303 	mvn.w	r3, #3
 800c618:	61fb      	str	r3, [r7, #28]
 800c61a:	e037      	b.n	800c68c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c61c:	2300      	movs	r3, #0
 800c61e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c620:	f107 0310 	add.w	r3, r7, #16
 800c624:	461a      	mov	r2, r3
 800c626:	68b9      	ldr	r1, [r7, #8]
 800c628:	69b8      	ldr	r0, [r7, #24]
 800c62a:	f000 fed9 	bl	800d3e0 <xQueueReceiveFromISR>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b01      	cmp	r3, #1
 800c632:	d003      	beq.n	800c63c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c634:	f06f 0302 	mvn.w	r3, #2
 800c638:	61fb      	str	r3, [r7, #28]
 800c63a:	e027      	b.n	800c68c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d024      	beq.n	800c68c <osMessageQueueGet+0xac>
 800c642:	4b15      	ldr	r3, [pc, #84]	; (800c698 <osMessageQueueGet+0xb8>)
 800c644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	f3bf 8f6f 	isb	sy
 800c652:	e01b      	b.n	800c68c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d002      	beq.n	800c660 <osMessageQueueGet+0x80>
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d103      	bne.n	800c668 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c660:	f06f 0303 	mvn.w	r3, #3
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	e011      	b.n	800c68c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	68b9      	ldr	r1, [r7, #8]
 800c66c:	69b8      	ldr	r0, [r7, #24]
 800c66e:	f000 fccb 	bl	800d008 <xQueueReceive>
 800c672:	4603      	mov	r3, r0
 800c674:	2b01      	cmp	r3, #1
 800c676:	d009      	beq.n	800c68c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c67e:	f06f 0301 	mvn.w	r3, #1
 800c682:	61fb      	str	r3, [r7, #28]
 800c684:	e002      	b.n	800c68c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c686:	f06f 0302 	mvn.w	r3, #2
 800c68a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c68c:	69fb      	ldr	r3, [r7, #28]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3720      	adds	r7, #32
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4a07      	ldr	r2, [pc, #28]	; (800c6c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c6ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	4a06      	ldr	r2, [pc, #24]	; (800c6cc <vApplicationGetIdleTaskMemory+0x30>)
 800c6b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2240      	movs	r2, #64	; 0x40
 800c6b8:	601a      	str	r2, [r3, #0]
}
 800c6ba:	bf00      	nop
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	2000013c 	.word	0x2000013c
 800c6cc:	200001f8 	.word	0x200001f8

0800c6d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	4a07      	ldr	r2, [pc, #28]	; (800c6fc <vApplicationGetTimerTaskMemory+0x2c>)
 800c6e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	4a06      	ldr	r2, [pc, #24]	; (800c700 <vApplicationGetTimerTaskMemory+0x30>)
 800c6e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2280      	movs	r2, #128	; 0x80
 800c6ec:	601a      	str	r2, [r3, #0]
}
 800c6ee:	bf00      	nop
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	200002f8 	.word	0x200002f8
 800c700:	200003b4 	.word	0x200003b4

0800c704 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f103 0208 	add.w	r2, r3, #8
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f04f 32ff 	mov.w	r2, #4294967295
 800c71c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f103 0208 	add.w	r2, r3, #8
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f103 0208 	add.w	r2, r3, #8
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c752:	bf00      	nop
 800c754:	370c      	adds	r7, #12
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c75e:	b480      	push	{r7}
 800c760:	b085      	sub	sp, #20
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	689a      	ldr	r2, [r3, #8]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	601a      	str	r2, [r3, #0]
}
 800c79a:	bf00      	nop
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b085      	sub	sp, #20
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7bc:	d103      	bne.n	800c7c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	60fb      	str	r3, [r7, #12]
 800c7c4:	e00c      	b.n	800c7e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	60fb      	str	r3, [r7, #12]
 800c7cc:	e002      	b.n	800c7d4 <vListInsert+0x2e>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	60fb      	str	r3, [r7, #12]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d2f6      	bcs.n	800c7ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	685a      	ldr	r2, [r3, #4]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	1c5a      	adds	r2, r3, #1
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	601a      	str	r2, [r3, #0]
}
 800c80c:	bf00      	nop
 800c80e:	3714      	adds	r7, #20
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	6892      	ldr	r2, [r2, #8]
 800c82e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	6852      	ldr	r2, [r2, #4]
 800c838:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d103      	bne.n	800c84c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689a      	ldr	r2, [r3, #8]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	1e5a      	subs	r2, r3, #1
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10a      	bne.n	800c896 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c892:	bf00      	nop
 800c894:	e7fe      	b.n	800c894 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c896:	f002 fcad 	bl	800f1f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a2:	68f9      	ldr	r1, [r7, #12]
 800c8a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8a6:	fb01 f303 	mul.w	r3, r1, r3
 800c8aa:	441a      	add	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	68f9      	ldr	r1, [r7, #12]
 800c8ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8cc:	fb01 f303 	mul.w	r3, r1, r3
 800c8d0:	441a      	add	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	22ff      	movs	r2, #255	; 0xff
 800c8da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	22ff      	movs	r2, #255	; 0xff
 800c8e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d114      	bne.n	800c916 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	691b      	ldr	r3, [r3, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d01a      	beq.n	800c92a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3310      	adds	r3, #16
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 fc5d 	bl	800e1b8 <xTaskRemoveFromEventList>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d012      	beq.n	800c92a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c904:	4b0c      	ldr	r3, [pc, #48]	; (800c938 <xQueueGenericReset+0xcc>)
 800c906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	e009      	b.n	800c92a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3310      	adds	r3, #16
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff fef2 	bl	800c704 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3324      	adds	r3, #36	; 0x24
 800c924:	4618      	mov	r0, r3
 800c926:	f7ff feed 	bl	800c704 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c92a:	f002 fc93 	bl	800f254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c92e:	2301      	movs	r3, #1
}
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	e000ed04 	.word	0xe000ed04

0800c93c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08e      	sub	sp, #56	; 0x38
 800c940:	af02      	add	r7, sp, #8
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10a      	bne.n	800c966 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c962:	bf00      	nop
 800c964:	e7fe      	b.n	800c964 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10a      	bne.n	800c982 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c97e:	bf00      	nop
 800c980:	e7fe      	b.n	800c980 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d002      	beq.n	800c98e <xQueueGenericCreateStatic+0x52>
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d001      	beq.n	800c992 <xQueueGenericCreateStatic+0x56>
 800c98e:	2301      	movs	r3, #1
 800c990:	e000      	b.n	800c994 <xQueueGenericCreateStatic+0x58>
 800c992:	2300      	movs	r3, #0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10a      	bne.n	800c9ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	623b      	str	r3, [r7, #32]
}
 800c9aa:	bf00      	nop
 800c9ac:	e7fe      	b.n	800c9ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d102      	bne.n	800c9ba <xQueueGenericCreateStatic+0x7e>
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d101      	bne.n	800c9be <xQueueGenericCreateStatic+0x82>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e000      	b.n	800c9c0 <xQueueGenericCreateStatic+0x84>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10a      	bne.n	800c9da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	61fb      	str	r3, [r7, #28]
}
 800c9d6:	bf00      	nop
 800c9d8:	e7fe      	b.n	800c9d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c9da:	2350      	movs	r3, #80	; 0x50
 800c9dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b50      	cmp	r3, #80	; 0x50
 800c9e2:	d00a      	beq.n	800c9fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e8:	f383 8811 	msr	BASEPRI, r3
 800c9ec:	f3bf 8f6f 	isb	sy
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	61bb      	str	r3, [r7, #24]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c9fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00d      	beq.n	800ca22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	4613      	mov	r3, r2
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	68b9      	ldr	r1, [r7, #8]
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f000 f83f 	bl	800caa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3730      	adds	r7, #48	; 0x30
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08a      	sub	sp, #40	; 0x28
 800ca30:	af02      	add	r7, sp, #8
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	4613      	mov	r3, r2
 800ca38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10a      	bne.n	800ca56 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	613b      	str	r3, [r7, #16]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	fb02 f303 	mul.w	r3, r2, r3
 800ca5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	3350      	adds	r3, #80	; 0x50
 800ca64:	4618      	mov	r0, r3
 800ca66:	f002 fce7 	bl	800f438 <pvPortMalloc>
 800ca6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d011      	beq.n	800ca96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	3350      	adds	r3, #80	; 0x50
 800ca7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca84:	79fa      	ldrb	r2, [r7, #7]
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	697a      	ldr	r2, [r7, #20]
 800ca8e:	68b9      	ldr	r1, [r7, #8]
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f000 f805 	bl	800caa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca96:	69bb      	ldr	r3, [r7, #24]
	}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3720      	adds	r7, #32
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	69ba      	ldr	r2, [r7, #24]
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	e002      	b.n	800cac2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cace:	2101      	movs	r1, #1
 800cad0:	69b8      	ldr	r0, [r7, #24]
 800cad2:	f7ff fecb 	bl	800c86c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	78fa      	ldrb	r2, [r7, #3]
 800cada:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cade:	bf00      	nop
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b08a      	sub	sp, #40	; 0x28
 800caea:	af02      	add	r7, sp, #8
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	60b9      	str	r1, [r7, #8]
 800caf0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10a      	bne.n	800cb0e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	61bb      	str	r3, [r7, #24]
}
 800cb0a:	bf00      	nop
 800cb0c:	e7fe      	b.n	800cb0c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d90a      	bls.n	800cb2c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1a:	f383 8811 	msr	BASEPRI, r3
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	f3bf 8f4f 	dsb	sy
 800cb26:	617b      	str	r3, [r7, #20]
}
 800cb28:	bf00      	nop
 800cb2a:	e7fe      	b.n	800cb2a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	2100      	movs	r1, #0
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f7ff ff00 	bl	800c93c <xQueueGenericCreateStatic>
 800cb3c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cb4a:	69fb      	ldr	r3, [r7, #28]
	}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3720      	adds	r7, #32
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10a      	bne.n	800cb7a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	613b      	str	r3, [r7, #16]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d90a      	bls.n	800cb98 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	60fb      	str	r3, [r7, #12]
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb98:	2202      	movs	r2, #2
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7ff ff45 	bl	800ca2c <xQueueGenericCreate>
 800cba2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	683a      	ldr	r2, [r7, #0]
 800cbae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cbb0:	697b      	ldr	r3, [r7, #20]
	}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3718      	adds	r7, #24
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
	...

0800cbbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b08e      	sub	sp, #56	; 0x38
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d10a      	bne.n	800cbee <xQueueGenericSend+0x32>
	__asm volatile
 800cbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbea:	bf00      	nop
 800cbec:	e7fe      	b.n	800cbec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d103      	bne.n	800cbfc <xQueueGenericSend+0x40>
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <xQueueGenericSend+0x44>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e000      	b.n	800cc02 <xQueueGenericSend+0x46>
 800cc00:	2300      	movs	r3, #0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10a      	bne.n	800cc1c <xQueueGenericSend+0x60>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	f383 8811 	msr	BASEPRI, r3
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc18:	bf00      	nop
 800cc1a:	e7fe      	b.n	800cc1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d103      	bne.n	800cc2a <xQueueGenericSend+0x6e>
 800cc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d101      	bne.n	800cc2e <xQueueGenericSend+0x72>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e000      	b.n	800cc30 <xQueueGenericSend+0x74>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10a      	bne.n	800cc4a <xQueueGenericSend+0x8e>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	623b      	str	r3, [r7, #32]
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc4a:	f001 fc77 	bl	800e53c <xTaskGetSchedulerState>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d102      	bne.n	800cc5a <xQueueGenericSend+0x9e>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d101      	bne.n	800cc5e <xQueueGenericSend+0xa2>
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e000      	b.n	800cc60 <xQueueGenericSend+0xa4>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10a      	bne.n	800cc7a <xQueueGenericSend+0xbe>
	__asm volatile
 800cc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	61fb      	str	r3, [r7, #28]
}
 800cc76:	bf00      	nop
 800cc78:	e7fe      	b.n	800cc78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc7a:	f002 fabb 	bl	800f1f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d302      	bcc.n	800cc90 <xQueueGenericSend+0xd4>
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d129      	bne.n	800cce4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	68b9      	ldr	r1, [r7, #8]
 800cc94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc96:	f000 fc5e 	bl	800d556 <prvCopyDataToQueue>
 800cc9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d010      	beq.n	800ccc6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca6:	3324      	adds	r3, #36	; 0x24
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f001 fa85 	bl	800e1b8 <xTaskRemoveFromEventList>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d013      	beq.n	800ccdc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ccb4:	4b3f      	ldr	r3, [pc, #252]	; (800cdb4 <xQueueGenericSend+0x1f8>)
 800ccb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccba:	601a      	str	r2, [r3, #0]
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	f3bf 8f6f 	isb	sy
 800ccc4:	e00a      	b.n	800ccdc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ccc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d007      	beq.n	800ccdc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cccc:	4b39      	ldr	r3, [pc, #228]	; (800cdb4 <xQueueGenericSend+0x1f8>)
 800ccce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ccdc:	f002 faba 	bl	800f254 <vPortExitCritical>
				return pdPASS;
 800cce0:	2301      	movs	r3, #1
 800cce2:	e063      	b.n	800cdac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d103      	bne.n	800ccf2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccea:	f002 fab3 	bl	800f254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	e05c      	b.n	800cdac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ccf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d106      	bne.n	800cd06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccf8:	f107 0314 	add.w	r3, r7, #20
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f001 fabf 	bl	800e280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd02:	2301      	movs	r3, #1
 800cd04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd06:	f002 faa5 	bl	800f254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd0a:	f001 f819 	bl	800dd40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd0e:	f002 fa71 	bl	800f1f4 <vPortEnterCritical>
 800cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd18:	b25b      	sxtb	r3, r3
 800cd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd1e:	d103      	bne.n	800cd28 <xQueueGenericSend+0x16c>
 800cd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd2e:	b25b      	sxtb	r3, r3
 800cd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd34:	d103      	bne.n	800cd3e <xQueueGenericSend+0x182>
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd3e:	f002 fa89 	bl	800f254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd42:	1d3a      	adds	r2, r7, #4
 800cd44:	f107 0314 	add.w	r3, r7, #20
 800cd48:	4611      	mov	r1, r2
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f001 faae 	bl	800e2ac <xTaskCheckForTimeOut>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d124      	bne.n	800cda0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd58:	f000 fcf5 	bl	800d746 <prvIsQueueFull>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d018      	beq.n	800cd94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	3310      	adds	r3, #16
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	4611      	mov	r1, r2
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f001 f9d4 	bl	800e118 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd72:	f000 fc80 	bl	800d676 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd76:	f000 fff1 	bl	800dd5c <xTaskResumeAll>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f47f af7c 	bne.w	800cc7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cd82:	4b0c      	ldr	r3, [pc, #48]	; (800cdb4 <xQueueGenericSend+0x1f8>)
 800cd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd88:	601a      	str	r2, [r3, #0]
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	e772      	b.n	800cc7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd96:	f000 fc6e 	bl	800d676 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd9a:	f000 ffdf 	bl	800dd5c <xTaskResumeAll>
 800cd9e:	e76c      	b.n	800cc7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cda0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cda2:	f000 fc68 	bl	800d676 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cda6:	f000 ffd9 	bl	800dd5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cdaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3738      	adds	r7, #56	; 0x38
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	e000ed04 	.word	0xe000ed04

0800cdb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b090      	sub	sp, #64	; 0x40
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
 800cdc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10a      	bne.n	800cde6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cde2:	bf00      	nop
 800cde4:	e7fe      	b.n	800cde4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d103      	bne.n	800cdf4 <xQueueGenericSendFromISR+0x3c>
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d101      	bne.n	800cdf8 <xQueueGenericSendFromISR+0x40>
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e000      	b.n	800cdfa <xQueueGenericSendFromISR+0x42>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10a      	bne.n	800ce14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce10:	bf00      	nop
 800ce12:	e7fe      	b.n	800ce12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d103      	bne.n	800ce22 <xQueueGenericSendFromISR+0x6a>
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d101      	bne.n	800ce26 <xQueueGenericSendFromISR+0x6e>
 800ce22:	2301      	movs	r3, #1
 800ce24:	e000      	b.n	800ce28 <xQueueGenericSendFromISR+0x70>
 800ce26:	2300      	movs	r3, #0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10a      	bne.n	800ce42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	623b      	str	r3, [r7, #32]
}
 800ce3e:	bf00      	nop
 800ce40:	e7fe      	b.n	800ce40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce42:	f002 fab9 	bl	800f3b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ce46:	f3ef 8211 	mrs	r2, BASEPRI
 800ce4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4e:	f383 8811 	msr	BASEPRI, r3
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	61fa      	str	r2, [r7, #28]
 800ce5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ce5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d302      	bcc.n	800ce74 <xQueueGenericSendFromISR+0xbc>
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d12f      	bne.n	800ced4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	68b9      	ldr	r1, [r7, #8]
 800ce88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce8a:	f000 fb64 	bl	800d556 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ce92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce96:	d112      	bne.n	800cebe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d016      	beq.n	800cece <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea2:	3324      	adds	r3, #36	; 0x24
 800cea4:	4618      	mov	r0, r3
 800cea6:	f001 f987 	bl	800e1b8 <xTaskRemoveFromEventList>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00e      	beq.n	800cece <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00b      	beq.n	800cece <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	601a      	str	r2, [r3, #0]
 800cebc:	e007      	b.n	800cece <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cebe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cec2:	3301      	adds	r3, #1
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	b25a      	sxtb	r2, r3
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cece:	2301      	movs	r3, #1
 800ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ced2:	e001      	b.n	800ced8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ced4:	2300      	movs	r3, #0
 800ced6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ced8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceda:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cee2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3740      	adds	r7, #64	; 0x40
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b08e      	sub	sp, #56	; 0x38
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10a      	bne.n	800cf18 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf06:	f383 8811 	msr	BASEPRI, r3
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	623b      	str	r3, [r7, #32]
}
 800cf14:	bf00      	nop
 800cf16:	e7fe      	b.n	800cf16 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00a      	beq.n	800cf36 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	61fb      	str	r3, [r7, #28]
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d103      	bne.n	800cf46 <xQueueGiveFromISR+0x58>
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d101      	bne.n	800cf4a <xQueueGiveFromISR+0x5c>
 800cf46:	2301      	movs	r3, #1
 800cf48:	e000      	b.n	800cf4c <xQueueGiveFromISR+0x5e>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10a      	bne.n	800cf66 <xQueueGiveFromISR+0x78>
	__asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	61bb      	str	r3, [r7, #24]
}
 800cf62:	bf00      	nop
 800cf64:	e7fe      	b.n	800cf64 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf66:	f002 fa27 	bl	800f3b8 <vPortValidateInterruptPriority>
	__asm volatile
 800cf6a:	f3ef 8211 	mrs	r2, BASEPRI
 800cf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	617a      	str	r2, [r7, #20]
 800cf80:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cf82:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d22b      	bcs.n	800cfee <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa2:	1c5a      	adds	r2, r3, #1
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb0:	d112      	bne.n	800cfd8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d016      	beq.n	800cfe8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbc:	3324      	adds	r3, #36	; 0x24
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f001 f8fa 	bl	800e1b8 <xTaskRemoveFromEventList>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00e      	beq.n	800cfe8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00b      	beq.n	800cfe8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	e007      	b.n	800cfe8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cfd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfdc:	3301      	adds	r3, #1
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	b25a      	sxtb	r2, r3
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	637b      	str	r3, [r7, #52]	; 0x34
 800cfec:	e001      	b.n	800cff2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cfee:	2300      	movs	r3, #0
 800cff0:	637b      	str	r3, [r7, #52]	; 0x34
 800cff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f383 8811 	msr	BASEPRI, r3
}
 800cffc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d000:	4618      	mov	r0, r3
 800d002:	3738      	adds	r7, #56	; 0x38
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08c      	sub	sp, #48	; 0x30
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d014:	2300      	movs	r3, #0
 800d016:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d10a      	bne.n	800d038 <xQueueReceive+0x30>
	__asm volatile
 800d022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d026:	f383 8811 	msr	BASEPRI, r3
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	623b      	str	r3, [r7, #32]
}
 800d034:	bf00      	nop
 800d036:	e7fe      	b.n	800d036 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d103      	bne.n	800d046 <xQueueReceive+0x3e>
 800d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <xQueueReceive+0x42>
 800d046:	2301      	movs	r3, #1
 800d048:	e000      	b.n	800d04c <xQueueReceive+0x44>
 800d04a:	2300      	movs	r3, #0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10a      	bne.n	800d066 <xQueueReceive+0x5e>
	__asm volatile
 800d050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d054:	f383 8811 	msr	BASEPRI, r3
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	61fb      	str	r3, [r7, #28]
}
 800d062:	bf00      	nop
 800d064:	e7fe      	b.n	800d064 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d066:	f001 fa69 	bl	800e53c <xTaskGetSchedulerState>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <xQueueReceive+0x6e>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d101      	bne.n	800d07a <xQueueReceive+0x72>
 800d076:	2301      	movs	r3, #1
 800d078:	e000      	b.n	800d07c <xQueueReceive+0x74>
 800d07a:	2300      	movs	r3, #0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10a      	bne.n	800d096 <xQueueReceive+0x8e>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	61bb      	str	r3, [r7, #24]
}
 800d092:	bf00      	nop
 800d094:	e7fe      	b.n	800d094 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d096:	f002 f8ad 	bl	800f1f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d01f      	beq.n	800d0e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0a6:	68b9      	ldr	r1, [r7, #8]
 800d0a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0aa:	f000 fabe 	bl	800d62a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b0:	1e5a      	subs	r2, r3, #1
 800d0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	691b      	ldr	r3, [r3, #16]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00f      	beq.n	800d0de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c0:	3310      	adds	r3, #16
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f001 f878 	bl	800e1b8 <xTaskRemoveFromEventList>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d007      	beq.n	800d0de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0ce:	4b3d      	ldr	r3, [pc, #244]	; (800d1c4 <xQueueReceive+0x1bc>)
 800d0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0de:	f002 f8b9 	bl	800f254 <vPortExitCritical>
				return pdPASS;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e069      	b.n	800d1ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d103      	bne.n	800d0f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d0ec:	f002 f8b2 	bl	800f254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	e062      	b.n	800d1ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d106      	bne.n	800d108 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0fa:	f107 0310 	add.w	r3, r7, #16
 800d0fe:	4618      	mov	r0, r3
 800d100:	f001 f8be 	bl	800e280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d104:	2301      	movs	r3, #1
 800d106:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d108:	f002 f8a4 	bl	800f254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d10c:	f000 fe18 	bl	800dd40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d110:	f002 f870 	bl	800f1f4 <vPortEnterCritical>
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d11a:	b25b      	sxtb	r3, r3
 800d11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d120:	d103      	bne.n	800d12a <xQueueReceive+0x122>
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	2200      	movs	r2, #0
 800d126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d130:	b25b      	sxtb	r3, r3
 800d132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d136:	d103      	bne.n	800d140 <xQueueReceive+0x138>
 800d138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13a:	2200      	movs	r2, #0
 800d13c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d140:	f002 f888 	bl	800f254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d144:	1d3a      	adds	r2, r7, #4
 800d146:	f107 0310 	add.w	r3, r7, #16
 800d14a:	4611      	mov	r1, r2
 800d14c:	4618      	mov	r0, r3
 800d14e:	f001 f8ad 	bl	800e2ac <xTaskCheckForTimeOut>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d123      	bne.n	800d1a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d15a:	f000 fade 	bl	800d71a <prvIsQueueEmpty>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d017      	beq.n	800d194 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d166:	3324      	adds	r3, #36	; 0x24
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	4611      	mov	r1, r2
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 ffd3 	bl	800e118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d174:	f000 fa7f 	bl	800d676 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d178:	f000 fdf0 	bl	800dd5c <xTaskResumeAll>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d189      	bne.n	800d096 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d182:	4b10      	ldr	r3, [pc, #64]	; (800d1c4 <xQueueReceive+0x1bc>)
 800d184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	e780      	b.n	800d096 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d196:	f000 fa6e 	bl	800d676 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d19a:	f000 fddf 	bl	800dd5c <xTaskResumeAll>
 800d19e:	e77a      	b.n	800d096 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1a2:	f000 fa68 	bl	800d676 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1a6:	f000 fdd9 	bl	800dd5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ac:	f000 fab5 	bl	800d71a <prvIsQueueEmpty>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f43f af6f 	beq.w	800d096 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3730      	adds	r7, #48	; 0x30
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	e000ed04 	.word	0xe000ed04

0800d1c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08e      	sub	sp, #56	; 0x38
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d10a      	bne.n	800d1fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	623b      	str	r3, [r7, #32]
}
 800d1f6:	bf00      	nop
 800d1f8:	e7fe      	b.n	800d1f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00a      	beq.n	800d218 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	61fb      	str	r3, [r7, #28]
}
 800d214:	bf00      	nop
 800d216:	e7fe      	b.n	800d216 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d218:	f001 f990 	bl	800e53c <xTaskGetSchedulerState>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d102      	bne.n	800d228 <xQueueSemaphoreTake+0x60>
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d101      	bne.n	800d22c <xQueueSemaphoreTake+0x64>
 800d228:	2301      	movs	r3, #1
 800d22a:	e000      	b.n	800d22e <xQueueSemaphoreTake+0x66>
 800d22c:	2300      	movs	r3, #0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10a      	bne.n	800d248 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	61bb      	str	r3, [r7, #24]
}
 800d244:	bf00      	nop
 800d246:	e7fe      	b.n	800d246 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d248:	f001 ffd4 	bl	800f1f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d250:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d254:	2b00      	cmp	r3, #0
 800d256:	d024      	beq.n	800d2a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	1e5a      	subs	r2, r3, #1
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d104      	bne.n	800d272 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d268:	f001 fade 	bl	800e828 <pvTaskIncrementMutexHeldCount>
 800d26c:	4602      	mov	r2, r0
 800d26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d270:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00f      	beq.n	800d29a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	3310      	adds	r3, #16
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 ff9a 	bl	800e1b8 <xTaskRemoveFromEventList>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d007      	beq.n	800d29a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d28a:	4b54      	ldr	r3, [pc, #336]	; (800d3dc <xQueueSemaphoreTake+0x214>)
 800d28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d290:	601a      	str	r2, [r3, #0]
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d29a:	f001 ffdb 	bl	800f254 <vPortExitCritical>
				return pdPASS;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e097      	b.n	800d3d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d111      	bne.n	800d2cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00a      	beq.n	800d2c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	617b      	str	r3, [r7, #20]
}
 800d2c0:	bf00      	nop
 800d2c2:	e7fe      	b.n	800d2c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d2c4:	f001 ffc6 	bl	800f254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	e082      	b.n	800d3d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d106      	bne.n	800d2e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2d2:	f107 030c 	add.w	r3, r7, #12
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 ffd2 	bl	800e280 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2e0:	f001 ffb8 	bl	800f254 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2e4:	f000 fd2c 	bl	800dd40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2e8:	f001 ff84 	bl	800f1f4 <vPortEnterCritical>
 800d2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2f2:	b25b      	sxtb	r3, r3
 800d2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f8:	d103      	bne.n	800d302 <xQueueSemaphoreTake+0x13a>
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d308:	b25b      	sxtb	r3, r3
 800d30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30e:	d103      	bne.n	800d318 <xQueueSemaphoreTake+0x150>
 800d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d318:	f001 ff9c 	bl	800f254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d31c:	463a      	mov	r2, r7
 800d31e:	f107 030c 	add.w	r3, r7, #12
 800d322:	4611      	mov	r1, r2
 800d324:	4618      	mov	r0, r3
 800d326:	f000 ffc1 	bl	800e2ac <xTaskCheckForTimeOut>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d132      	bne.n	800d396 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d332:	f000 f9f2 	bl	800d71a <prvIsQueueEmpty>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d026      	beq.n	800d38a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d109      	bne.n	800d358 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d344:	f001 ff56 	bl	800f1f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f001 f913 	bl	800e578 <xTaskPriorityInherit>
 800d352:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d354:	f001 ff7e 	bl	800f254 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	3324      	adds	r3, #36	; 0x24
 800d35c:	683a      	ldr	r2, [r7, #0]
 800d35e:	4611      	mov	r1, r2
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fed9 	bl	800e118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d368:	f000 f985 	bl	800d676 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d36c:	f000 fcf6 	bl	800dd5c <xTaskResumeAll>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	f47f af68 	bne.w	800d248 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d378:	4b18      	ldr	r3, [pc, #96]	; (800d3dc <xQueueSemaphoreTake+0x214>)
 800d37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d37e:	601a      	str	r2, [r3, #0]
 800d380:	f3bf 8f4f 	dsb	sy
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	e75e      	b.n	800d248 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d38a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d38c:	f000 f973 	bl	800d676 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d390:	f000 fce4 	bl	800dd5c <xTaskResumeAll>
 800d394:	e758      	b.n	800d248 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d398:	f000 f96d 	bl	800d676 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d39c:	f000 fcde 	bl	800dd5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3a2:	f000 f9ba 	bl	800d71a <prvIsQueueEmpty>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f43f af4d 	beq.w	800d248 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00d      	beq.n	800d3d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d3b4:	f001 ff1e 	bl	800f1f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d3b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ba:	f000 f8b4 	bl	800d526 <prvGetDisinheritPriorityAfterTimeout>
 800d3be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f001 f9ac 	bl	800e724 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d3cc:	f001 ff42 	bl	800f254 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d3d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3738      	adds	r7, #56	; 0x38
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	e000ed04 	.word	0xe000ed04

0800d3e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b08e      	sub	sp, #56	; 0x38
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10a      	bne.n	800d40c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fa:	f383 8811 	msr	BASEPRI, r3
 800d3fe:	f3bf 8f6f 	isb	sy
 800d402:	f3bf 8f4f 	dsb	sy
 800d406:	623b      	str	r3, [r7, #32]
}
 800d408:	bf00      	nop
 800d40a:	e7fe      	b.n	800d40a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d103      	bne.n	800d41a <xQueueReceiveFromISR+0x3a>
 800d412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d416:	2b00      	cmp	r3, #0
 800d418:	d101      	bne.n	800d41e <xQueueReceiveFromISR+0x3e>
 800d41a:	2301      	movs	r3, #1
 800d41c:	e000      	b.n	800d420 <xQueueReceiveFromISR+0x40>
 800d41e:	2300      	movs	r3, #0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d10a      	bne.n	800d43a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	61fb      	str	r3, [r7, #28]
}
 800d436:	bf00      	nop
 800d438:	e7fe      	b.n	800d438 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d43a:	f001 ffbd 	bl	800f3b8 <vPortValidateInterruptPriority>
	__asm volatile
 800d43e:	f3ef 8211 	mrs	r2, BASEPRI
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	61ba      	str	r2, [r7, #24]
 800d454:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d456:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d458:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d462:	2b00      	cmp	r3, #0
 800d464:	d02f      	beq.n	800d4c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d470:	68b9      	ldr	r1, [r7, #8]
 800d472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d474:	f000 f8d9 	bl	800d62a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47a:	1e5a      	subs	r2, r3, #1
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d488:	d112      	bne.n	800d4b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d016      	beq.n	800d4c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d494:	3310      	adds	r3, #16
 800d496:	4618      	mov	r0, r3
 800d498:	f000 fe8e 	bl	800e1b8 <xTaskRemoveFromEventList>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00e      	beq.n	800d4c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00b      	beq.n	800d4c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	e007      	b.n	800d4c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	b25a      	sxtb	r2, r3
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	637b      	str	r3, [r7, #52]	; 0x34
 800d4c4:	e001      	b.n	800d4ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	f383 8811 	msr	BASEPRI, r3
}
 800d4d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3738      	adds	r7, #56	; 0x38
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10a      	bne.n	800d508 <vQueueDelete+0x28>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	60bb      	str	r3, [r7, #8]
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 f95f 	bl	800d7cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d514:	2b00      	cmp	r3, #0
 800d516:	d102      	bne.n	800d51e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f002 f859 	bl	800f5d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d51e:	bf00      	nop
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d526:	b480      	push	{r7}
 800d528:	b085      	sub	sp, #20
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d532:	2b00      	cmp	r3, #0
 800d534:	d006      	beq.n	800d544 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d540:	60fb      	str	r3, [r7, #12]
 800d542:	e001      	b.n	800d548 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d544:	2300      	movs	r3, #0
 800d546:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d548:	68fb      	ldr	r3, [r7, #12]
	}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b086      	sub	sp, #24
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	60f8      	str	r0, [r7, #12]
 800d55e:	60b9      	str	r1, [r7, #8]
 800d560:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d562:	2300      	movs	r3, #0
 800d564:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d56a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d570:	2b00      	cmp	r3, #0
 800d572:	d10d      	bne.n	800d590 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d14d      	bne.n	800d618 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	4618      	mov	r0, r3
 800d582:	f001 f861 	bl	800e648 <xTaskPriorityDisinherit>
 800d586:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2200      	movs	r2, #0
 800d58c:	609a      	str	r2, [r3, #8]
 800d58e:	e043      	b.n	800d618 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d119      	bne.n	800d5ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6858      	ldr	r0, [r3, #4]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59e:	461a      	mov	r2, r3
 800d5a0:	68b9      	ldr	r1, [r7, #8]
 800d5a2:	f020 fdd5 	bl	802e150 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	685a      	ldr	r2, [r3, #4]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ae:	441a      	add	r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	685a      	ldr	r2, [r3, #4]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d32b      	bcc.n	800d618 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	605a      	str	r2, [r3, #4]
 800d5c8:	e026      	b.n	800d618 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	68d8      	ldr	r0, [r3, #12]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	68b9      	ldr	r1, [r7, #8]
 800d5d6:	f020 fdbb 	bl	802e150 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	68da      	ldr	r2, [r3, #12]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e2:	425b      	negs	r3, r3
 800d5e4:	441a      	add	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d207      	bcs.n	800d606 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	689a      	ldr	r2, [r3, #8]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fe:	425b      	negs	r3, r3
 800d600:	441a      	add	r2, r3
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b02      	cmp	r3, #2
 800d60a:	d105      	bne.n	800d618 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d002      	beq.n	800d618 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	3b01      	subs	r3, #1
 800d616:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d620:	697b      	ldr	r3, [r7, #20]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3718      	adds	r7, #24
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b082      	sub	sp, #8
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d018      	beq.n	800d66e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	68da      	ldr	r2, [r3, #12]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d644:	441a      	add	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	68da      	ldr	r2, [r3, #12]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	429a      	cmp	r2, r3
 800d654:	d303      	bcc.n	800d65e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	68d9      	ldr	r1, [r3, #12]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d666:	461a      	mov	r2, r3
 800d668:	6838      	ldr	r0, [r7, #0]
 800d66a:	f020 fd71 	bl	802e150 <memcpy>
	}
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b084      	sub	sp, #16
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d67e:	f001 fdb9 	bl	800f1f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d688:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d68a:	e011      	b.n	800d6b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d690:	2b00      	cmp	r3, #0
 800d692:	d012      	beq.n	800d6ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	3324      	adds	r3, #36	; 0x24
 800d698:	4618      	mov	r0, r3
 800d69a:	f000 fd8d 	bl	800e1b8 <xTaskRemoveFromEventList>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d001      	beq.n	800d6a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6a4:	f000 fe64 	bl	800e370 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6a8:	7bfb      	ldrb	r3, [r7, #15]
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	dce9      	bgt.n	800d68c <prvUnlockQueue+0x16>
 800d6b8:	e000      	b.n	800d6bc <prvUnlockQueue+0x46>
					break;
 800d6ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	22ff      	movs	r2, #255	; 0xff
 800d6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6c4:	f001 fdc6 	bl	800f254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6c8:	f001 fd94 	bl	800f1f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6d4:	e011      	b.n	800d6fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d012      	beq.n	800d704 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	3310      	adds	r3, #16
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f000 fd68 	bl	800e1b8 <xTaskRemoveFromEventList>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d001      	beq.n	800d6f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6ee:	f000 fe3f 	bl	800e370 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6f2:	7bbb      	ldrb	r3, [r7, #14]
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	dce9      	bgt.n	800d6d6 <prvUnlockQueue+0x60>
 800d702:	e000      	b.n	800d706 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d704:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	22ff      	movs	r2, #255	; 0xff
 800d70a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d70e:	f001 fda1 	bl	800f254 <vPortExitCritical>
}
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b084      	sub	sp, #16
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d722:	f001 fd67 	bl	800f1f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d102      	bne.n	800d734 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d72e:	2301      	movs	r3, #1
 800d730:	60fb      	str	r3, [r7, #12]
 800d732:	e001      	b.n	800d738 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d734:	2300      	movs	r3, #0
 800d736:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d738:	f001 fd8c 	bl	800f254 <vPortExitCritical>

	return xReturn;
 800d73c:	68fb      	ldr	r3, [r7, #12]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b084      	sub	sp, #16
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d74e:	f001 fd51 	bl	800f1f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d102      	bne.n	800d764 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d75e:	2301      	movs	r3, #1
 800d760:	60fb      	str	r3, [r7, #12]
 800d762:	e001      	b.n	800d768 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d764:	2300      	movs	r3, #0
 800d766:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d768:	f001 fd74 	bl	800f254 <vPortExitCritical>

	return xReturn;
 800d76c:	68fb      	ldr	r3, [r7, #12]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d778:	b480      	push	{r7}
 800d77a:	b085      	sub	sp, #20
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d782:	2300      	movs	r3, #0
 800d784:	60fb      	str	r3, [r7, #12]
 800d786:	e014      	b.n	800d7b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d788:	4a0f      	ldr	r2, [pc, #60]	; (800d7c8 <vQueueAddToRegistry+0x50>)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d10b      	bne.n	800d7ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d794:	490c      	ldr	r1, [pc, #48]	; (800d7c8 <vQueueAddToRegistry+0x50>)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	683a      	ldr	r2, [r7, #0]
 800d79a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d79e:	4a0a      	ldr	r2, [pc, #40]	; (800d7c8 <vQueueAddToRegistry+0x50>)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	00db      	lsls	r3, r3, #3
 800d7a4:	4413      	add	r3, r2
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d7aa:	e006      	b.n	800d7ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	60fb      	str	r3, [r7, #12]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2b07      	cmp	r3, #7
 800d7b6:	d9e7      	bls.n	800d788 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7b8:	bf00      	nop
 800d7ba:	bf00      	nop
 800d7bc:	3714      	adds	r7, #20
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	2000b5dc 	.word	0x2000b5dc

0800d7cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	60fb      	str	r3, [r7, #12]
 800d7d8:	e016      	b.n	800d808 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d7da:	4a10      	ldr	r2, [pc, #64]	; (800d81c <vQueueUnregisterQueue+0x50>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	00db      	lsls	r3, r3, #3
 800d7e0:	4413      	add	r3, r2
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d10b      	bne.n	800d802 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d7ea:	4a0c      	ldr	r2, [pc, #48]	; (800d81c <vQueueUnregisterQueue+0x50>)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d7f4:	4a09      	ldr	r2, [pc, #36]	; (800d81c <vQueueUnregisterQueue+0x50>)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	00db      	lsls	r3, r3, #3
 800d7fa:	4413      	add	r3, r2
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	605a      	str	r2, [r3, #4]
				break;
 800d800:	e006      	b.n	800d810 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	3301      	adds	r3, #1
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b07      	cmp	r3, #7
 800d80c:	d9e5      	bls.n	800d7da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d80e:	bf00      	nop
 800d810:	bf00      	nop
 800d812:	3714      	adds	r7, #20
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	2000b5dc 	.word	0x2000b5dc

0800d820 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d830:	f001 fce0 	bl	800f1f4 <vPortEnterCritical>
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d83a:	b25b      	sxtb	r3, r3
 800d83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d840:	d103      	bne.n	800d84a <vQueueWaitForMessageRestricted+0x2a>
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d850:	b25b      	sxtb	r3, r3
 800d852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d856:	d103      	bne.n	800d860 <vQueueWaitForMessageRestricted+0x40>
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d860:	f001 fcf8 	bl	800f254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d106      	bne.n	800d87a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	3324      	adds	r3, #36	; 0x24
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	68b9      	ldr	r1, [r7, #8]
 800d874:	4618      	mov	r0, r3
 800d876:	f000 fc73 	bl	800e160 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d87a:	6978      	ldr	r0, [r7, #20]
 800d87c:	f7ff fefb 	bl	800d676 <prvUnlockQueue>
	}
 800d880:	bf00      	nop
 800d882:	3718      	adds	r7, #24
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b08e      	sub	sp, #56	; 0x38
 800d88c:	af04      	add	r7, sp, #16
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
 800d894:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10a      	bne.n	800d8b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	623b      	str	r3, [r7, #32]
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10a      	bne.n	800d8ce <xTaskCreateStatic+0x46>
	__asm volatile
 800d8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8bc:	f383 8811 	msr	BASEPRI, r3
 800d8c0:	f3bf 8f6f 	isb	sy
 800d8c4:	f3bf 8f4f 	dsb	sy
 800d8c8:	61fb      	str	r3, [r7, #28]
}
 800d8ca:	bf00      	nop
 800d8cc:	e7fe      	b.n	800d8cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d8ce:	23bc      	movs	r3, #188	; 0xbc
 800d8d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	2bbc      	cmp	r3, #188	; 0xbc
 800d8d6:	d00a      	beq.n	800d8ee <xTaskCreateStatic+0x66>
	__asm volatile
 800d8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8dc:	f383 8811 	msr	BASEPRI, r3
 800d8e0:	f3bf 8f6f 	isb	sy
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	61bb      	str	r3, [r7, #24]
}
 800d8ea:	bf00      	nop
 800d8ec:	e7fe      	b.n	800d8ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d01e      	beq.n	800d934 <xTaskCreateStatic+0xac>
 800d8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01b      	beq.n	800d934 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d904:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d908:	2202      	movs	r2, #2
 800d90a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d90e:	2300      	movs	r3, #0
 800d910:	9303      	str	r3, [sp, #12]
 800d912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d914:	9302      	str	r3, [sp, #8]
 800d916:	f107 0314 	add.w	r3, r7, #20
 800d91a:	9301      	str	r3, [sp, #4]
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	68b9      	ldr	r1, [r7, #8]
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 f850 	bl	800d9cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d92c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d92e:	f000 f8f3 	bl	800db18 <prvAddNewTaskToReadyList>
 800d932:	e001      	b.n	800d938 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d938:	697b      	ldr	r3, [r7, #20]
	}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3728      	adds	r7, #40	; 0x28
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d942:	b580      	push	{r7, lr}
 800d944:	b08c      	sub	sp, #48	; 0x30
 800d946:	af04      	add	r7, sp, #16
 800d948:	60f8      	str	r0, [r7, #12]
 800d94a:	60b9      	str	r1, [r7, #8]
 800d94c:	603b      	str	r3, [r7, #0]
 800d94e:	4613      	mov	r3, r2
 800d950:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d952:	88fb      	ldrh	r3, [r7, #6]
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	4618      	mov	r0, r3
 800d958:	f001 fd6e 	bl	800f438 <pvPortMalloc>
 800d95c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00e      	beq.n	800d982 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d964:	20bc      	movs	r0, #188	; 0xbc
 800d966:	f001 fd67 	bl	800f438 <pvPortMalloc>
 800d96a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d003      	beq.n	800d97a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	697a      	ldr	r2, [r7, #20]
 800d976:	631a      	str	r2, [r3, #48]	; 0x30
 800d978:	e005      	b.n	800d986 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d97a:	6978      	ldr	r0, [r7, #20]
 800d97c:	f001 fe28 	bl	800f5d0 <vPortFree>
 800d980:	e001      	b.n	800d986 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d982:	2300      	movs	r3, #0
 800d984:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d017      	beq.n	800d9bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d994:	88fa      	ldrh	r2, [r7, #6]
 800d996:	2300      	movs	r3, #0
 800d998:	9303      	str	r3, [sp, #12]
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	9302      	str	r3, [sp, #8]
 800d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a0:	9301      	str	r3, [sp, #4]
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	68b9      	ldr	r1, [r7, #8]
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f000 f80e 	bl	800d9cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9b0:	69f8      	ldr	r0, [r7, #28]
 800d9b2:	f000 f8b1 	bl	800db18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	61bb      	str	r3, [r7, #24]
 800d9ba:	e002      	b.n	800d9c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d9c2:	69bb      	ldr	r3, [r7, #24]
	}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3720      	adds	r7, #32
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b088      	sub	sp, #32
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	607a      	str	r2, [r7, #4]
 800d9d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	21a5      	movs	r1, #165	; 0xa5
 800d9e6:	f020 fbc1 	bl	802e16c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	f023 0307 	bic.w	r3, r3, #7
 800da02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	f003 0307 	and.w	r3, r3, #7
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00a      	beq.n	800da24 <prvInitialiseNewTask+0x58>
	__asm volatile
 800da0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da12:	f383 8811 	msr	BASEPRI, r3
 800da16:	f3bf 8f6f 	isb	sy
 800da1a:	f3bf 8f4f 	dsb	sy
 800da1e:	617b      	str	r3, [r7, #20]
}
 800da20:	bf00      	nop
 800da22:	e7fe      	b.n	800da22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d01f      	beq.n	800da6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da2a:	2300      	movs	r3, #0
 800da2c:	61fb      	str	r3, [r7, #28]
 800da2e:	e012      	b.n	800da56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	4413      	add	r3, r2
 800da36:	7819      	ldrb	r1, [r3, #0]
 800da38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	4413      	add	r3, r2
 800da3e:	3334      	adds	r3, #52	; 0x34
 800da40:	460a      	mov	r2, r1
 800da42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da44:	68ba      	ldr	r2, [r7, #8]
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	4413      	add	r3, r2
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d006      	beq.n	800da5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	3301      	adds	r3, #1
 800da54:	61fb      	str	r3, [r7, #28]
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	2b0f      	cmp	r3, #15
 800da5a:	d9e9      	bls.n	800da30 <prvInitialiseNewTask+0x64>
 800da5c:	e000      	b.n	800da60 <prvInitialiseNewTask+0x94>
			{
				break;
 800da5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da62:	2200      	movs	r2, #0
 800da64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da68:	e003      	b.n	800da72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da74:	2b37      	cmp	r3, #55	; 0x37
 800da76:	d901      	bls.n	800da7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da78:	2337      	movs	r3, #55	; 0x37
 800da7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8a:	2200      	movs	r2, #0
 800da8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	3304      	adds	r3, #4
 800da92:	4618      	mov	r0, r3
 800da94:	f7fe fe56 	bl	800c744 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9a:	3318      	adds	r3, #24
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fe fe51 	bl	800c744 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800daa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daba:	2200      	movs	r2, #0
 800dabc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	3354      	adds	r3, #84	; 0x54
 800dacc:	2260      	movs	r2, #96	; 0x60
 800dace:	2100      	movs	r1, #0
 800dad0:	4618      	mov	r0, r3
 800dad2:	f020 fb4b 	bl	802e16c <memset>
 800dad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad8:	4a0c      	ldr	r2, [pc, #48]	; (800db0c <prvInitialiseNewTask+0x140>)
 800dada:	659a      	str	r2, [r3, #88]	; 0x58
 800dadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dade:	4a0c      	ldr	r2, [pc, #48]	; (800db10 <prvInitialiseNewTask+0x144>)
 800dae0:	65da      	str	r2, [r3, #92]	; 0x5c
 800dae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae4:	4a0b      	ldr	r2, [pc, #44]	; (800db14 <prvInitialiseNewTask+0x148>)
 800dae6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	68f9      	ldr	r1, [r7, #12]
 800daec:	69b8      	ldr	r0, [r7, #24]
 800daee:	f001 fa51 	bl	800ef94 <pxPortInitialiseStack>
 800daf2:	4602      	mov	r2, r0
 800daf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d002      	beq.n	800db04 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db04:	bf00      	nop
 800db06:	3720      	adds	r7, #32
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	08033a98 	.word	0x08033a98
 800db10:	08033ab8 	.word	0x08033ab8
 800db14:	08033a78 	.word	0x08033a78

0800db18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db20:	f001 fb68 	bl	800f1f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db24:	4b2d      	ldr	r3, [pc, #180]	; (800dbdc <prvAddNewTaskToReadyList+0xc4>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	3301      	adds	r3, #1
 800db2a:	4a2c      	ldr	r2, [pc, #176]	; (800dbdc <prvAddNewTaskToReadyList+0xc4>)
 800db2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db2e:	4b2c      	ldr	r3, [pc, #176]	; (800dbe0 <prvAddNewTaskToReadyList+0xc8>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d109      	bne.n	800db4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db36:	4a2a      	ldr	r2, [pc, #168]	; (800dbe0 <prvAddNewTaskToReadyList+0xc8>)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db3c:	4b27      	ldr	r3, [pc, #156]	; (800dbdc <prvAddNewTaskToReadyList+0xc4>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2b01      	cmp	r3, #1
 800db42:	d110      	bne.n	800db66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db44:	f000 fc38 	bl	800e3b8 <prvInitialiseTaskLists>
 800db48:	e00d      	b.n	800db66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db4a:	4b26      	ldr	r3, [pc, #152]	; (800dbe4 <prvAddNewTaskToReadyList+0xcc>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d109      	bne.n	800db66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db52:	4b23      	ldr	r3, [pc, #140]	; (800dbe0 <prvAddNewTaskToReadyList+0xc8>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d802      	bhi.n	800db66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db60:	4a1f      	ldr	r2, [pc, #124]	; (800dbe0 <prvAddNewTaskToReadyList+0xc8>)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db66:	4b20      	ldr	r3, [pc, #128]	; (800dbe8 <prvAddNewTaskToReadyList+0xd0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3301      	adds	r3, #1
 800db6c:	4a1e      	ldr	r2, [pc, #120]	; (800dbe8 <prvAddNewTaskToReadyList+0xd0>)
 800db6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db70:	4b1d      	ldr	r3, [pc, #116]	; (800dbe8 <prvAddNewTaskToReadyList+0xd0>)
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7c:	4b1b      	ldr	r3, [pc, #108]	; (800dbec <prvAddNewTaskToReadyList+0xd4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	429a      	cmp	r2, r3
 800db82:	d903      	bls.n	800db8c <prvAddNewTaskToReadyList+0x74>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db88:	4a18      	ldr	r2, [pc, #96]	; (800dbec <prvAddNewTaskToReadyList+0xd4>)
 800db8a:	6013      	str	r3, [r2, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db90:	4613      	mov	r3, r2
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	4413      	add	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4a15      	ldr	r2, [pc, #84]	; (800dbf0 <prvAddNewTaskToReadyList+0xd8>)
 800db9a:	441a      	add	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	3304      	adds	r3, #4
 800dba0:	4619      	mov	r1, r3
 800dba2:	4610      	mov	r0, r2
 800dba4:	f7fe fddb 	bl	800c75e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dba8:	f001 fb54 	bl	800f254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dbac:	4b0d      	ldr	r3, [pc, #52]	; (800dbe4 <prvAddNewTaskToReadyList+0xcc>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00e      	beq.n	800dbd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dbb4:	4b0a      	ldr	r3, [pc, #40]	; (800dbe0 <prvAddNewTaskToReadyList+0xc8>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d207      	bcs.n	800dbd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dbc2:	4b0c      	ldr	r3, [pc, #48]	; (800dbf4 <prvAddNewTaskToReadyList+0xdc>)
 800dbc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbc8:	601a      	str	r2, [r3, #0]
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	20000a88 	.word	0x20000a88
 800dbe0:	200005b4 	.word	0x200005b4
 800dbe4:	20000a94 	.word	0x20000a94
 800dbe8:	20000aa4 	.word	0x20000aa4
 800dbec:	20000a90 	.word	0x20000a90
 800dbf0:	200005b8 	.word	0x200005b8
 800dbf4:	e000ed04 	.word	0xe000ed04

0800dbf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc00:	2300      	movs	r3, #0
 800dc02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d017      	beq.n	800dc3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc0a:	4b13      	ldr	r3, [pc, #76]	; (800dc58 <vTaskDelay+0x60>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00a      	beq.n	800dc28 <vTaskDelay+0x30>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc16:	f383 8811 	msr	BASEPRI, r3
 800dc1a:	f3bf 8f6f 	isb	sy
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	60bb      	str	r3, [r7, #8]
}
 800dc24:	bf00      	nop
 800dc26:	e7fe      	b.n	800dc26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc28:	f000 f88a 	bl	800dd40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 fe0e 	bl	800e850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc34:	f000 f892 	bl	800dd5c <xTaskResumeAll>
 800dc38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d107      	bne.n	800dc50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dc40:	4b06      	ldr	r3, [pc, #24]	; (800dc5c <vTaskDelay+0x64>)
 800dc42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc46:	601a      	str	r2, [r3, #0]
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc50:	bf00      	nop
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	20000ab0 	.word	0x20000ab0
 800dc5c:	e000ed04 	.word	0xe000ed04

0800dc60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b08a      	sub	sp, #40	; 0x28
 800dc64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc66:	2300      	movs	r3, #0
 800dc68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc6e:	463a      	mov	r2, r7
 800dc70:	1d39      	adds	r1, r7, #4
 800dc72:	f107 0308 	add.w	r3, r7, #8
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7fe fd10 	bl	800c69c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc7c:	6839      	ldr	r1, [r7, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	9202      	str	r2, [sp, #8]
 800dc84:	9301      	str	r3, [sp, #4]
 800dc86:	2300      	movs	r3, #0
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	460a      	mov	r2, r1
 800dc8e:	4924      	ldr	r1, [pc, #144]	; (800dd20 <vTaskStartScheduler+0xc0>)
 800dc90:	4824      	ldr	r0, [pc, #144]	; (800dd24 <vTaskStartScheduler+0xc4>)
 800dc92:	f7ff fdf9 	bl	800d888 <xTaskCreateStatic>
 800dc96:	4603      	mov	r3, r0
 800dc98:	4a23      	ldr	r2, [pc, #140]	; (800dd28 <vTaskStartScheduler+0xc8>)
 800dc9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc9c:	4b22      	ldr	r3, [pc, #136]	; (800dd28 <vTaskStartScheduler+0xc8>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d002      	beq.n	800dcaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dca4:	2301      	movs	r3, #1
 800dca6:	617b      	str	r3, [r7, #20]
 800dca8:	e001      	b.n	800dcae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d102      	bne.n	800dcba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dcb4:	f000 fe20 	bl	800e8f8 <xTimerCreateTimerTask>
 800dcb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d11b      	bne.n	800dcf8 <vTaskStartScheduler+0x98>
	__asm volatile
 800dcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	613b      	str	r3, [r7, #16]
}
 800dcd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dcd4:	4b15      	ldr	r3, [pc, #84]	; (800dd2c <vTaskStartScheduler+0xcc>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3354      	adds	r3, #84	; 0x54
 800dcda:	4a15      	ldr	r2, [pc, #84]	; (800dd30 <vTaskStartScheduler+0xd0>)
 800dcdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dcde:	4b15      	ldr	r3, [pc, #84]	; (800dd34 <vTaskStartScheduler+0xd4>)
 800dce0:	f04f 32ff 	mov.w	r2, #4294967295
 800dce4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dce6:	4b14      	ldr	r3, [pc, #80]	; (800dd38 <vTaskStartScheduler+0xd8>)
 800dce8:	2201      	movs	r2, #1
 800dcea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcec:	4b13      	ldr	r3, [pc, #76]	; (800dd3c <vTaskStartScheduler+0xdc>)
 800dcee:	2200      	movs	r2, #0
 800dcf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dcf2:	f001 f9dd 	bl	800f0b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dcf6:	e00e      	b.n	800dd16 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfe:	d10a      	bne.n	800dd16 <vTaskStartScheduler+0xb6>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	60fb      	str	r3, [r7, #12]
}
 800dd12:	bf00      	nop
 800dd14:	e7fe      	b.n	800dd14 <vTaskStartScheduler+0xb4>
}
 800dd16:	bf00      	nop
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	0802f0f8 	.word	0x0802f0f8
 800dd24:	0800e389 	.word	0x0800e389
 800dd28:	20000aac 	.word	0x20000aac
 800dd2c:	200005b4 	.word	0x200005b4
 800dd30:	20000098 	.word	0x20000098
 800dd34:	20000aa8 	.word	0x20000aa8
 800dd38:	20000a94 	.word	0x20000a94
 800dd3c:	20000a8c 	.word	0x20000a8c

0800dd40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd40:	b480      	push	{r7}
 800dd42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd44:	4b04      	ldr	r3, [pc, #16]	; (800dd58 <vTaskSuspendAll+0x18>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	4a03      	ldr	r2, [pc, #12]	; (800dd58 <vTaskSuspendAll+0x18>)
 800dd4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd4e:	bf00      	nop
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	20000ab0 	.word	0x20000ab0

0800dd5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd62:	2300      	movs	r3, #0
 800dd64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd66:	2300      	movs	r3, #0
 800dd68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd6a:	4b42      	ldr	r3, [pc, #264]	; (800de74 <xTaskResumeAll+0x118>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d10a      	bne.n	800dd88 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd76:	f383 8811 	msr	BASEPRI, r3
 800dd7a:	f3bf 8f6f 	isb	sy
 800dd7e:	f3bf 8f4f 	dsb	sy
 800dd82:	603b      	str	r3, [r7, #0]
}
 800dd84:	bf00      	nop
 800dd86:	e7fe      	b.n	800dd86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd88:	f001 fa34 	bl	800f1f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd8c:	4b39      	ldr	r3, [pc, #228]	; (800de74 <xTaskResumeAll+0x118>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	4a38      	ldr	r2, [pc, #224]	; (800de74 <xTaskResumeAll+0x118>)
 800dd94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd96:	4b37      	ldr	r3, [pc, #220]	; (800de74 <xTaskResumeAll+0x118>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d162      	bne.n	800de64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd9e:	4b36      	ldr	r3, [pc, #216]	; (800de78 <xTaskResumeAll+0x11c>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d05e      	beq.n	800de64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dda6:	e02f      	b.n	800de08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dda8:	4b34      	ldr	r3, [pc, #208]	; (800de7c <xTaskResumeAll+0x120>)
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3318      	adds	r3, #24
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fe fd2f 	bl	800c818 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3304      	adds	r3, #4
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7fe fd2a 	bl	800c818 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc8:	4b2d      	ldr	r3, [pc, #180]	; (800de80 <xTaskResumeAll+0x124>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d903      	bls.n	800ddd8 <xTaskResumeAll+0x7c>
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd4:	4a2a      	ldr	r2, [pc, #168]	; (800de80 <xTaskResumeAll+0x124>)
 800ddd6:	6013      	str	r3, [r2, #0]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dddc:	4613      	mov	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	4a27      	ldr	r2, [pc, #156]	; (800de84 <xTaskResumeAll+0x128>)
 800dde6:	441a      	add	r2, r3
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	3304      	adds	r3, #4
 800ddec:	4619      	mov	r1, r3
 800ddee:	4610      	mov	r0, r2
 800ddf0:	f7fe fcb5 	bl	800c75e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf8:	4b23      	ldr	r3, [pc, #140]	; (800de88 <xTaskResumeAll+0x12c>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d302      	bcc.n	800de08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800de02:	4b22      	ldr	r3, [pc, #136]	; (800de8c <xTaskResumeAll+0x130>)
 800de04:	2201      	movs	r2, #1
 800de06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de08:	4b1c      	ldr	r3, [pc, #112]	; (800de7c <xTaskResumeAll+0x120>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1cb      	bne.n	800dda8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d001      	beq.n	800de1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de16:	f000 fb71 	bl	800e4fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de1a:	4b1d      	ldr	r3, [pc, #116]	; (800de90 <xTaskResumeAll+0x134>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d010      	beq.n	800de48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de26:	f000 f859 	bl	800dedc <xTaskIncrementTick>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de30:	4b16      	ldr	r3, [pc, #88]	; (800de8c <xTaskResumeAll+0x130>)
 800de32:	2201      	movs	r2, #1
 800de34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	3b01      	subs	r3, #1
 800de3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1f1      	bne.n	800de26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800de42:	4b13      	ldr	r3, [pc, #76]	; (800de90 <xTaskResumeAll+0x134>)
 800de44:	2200      	movs	r2, #0
 800de46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de48:	4b10      	ldr	r3, [pc, #64]	; (800de8c <xTaskResumeAll+0x130>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d009      	beq.n	800de64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de50:	2301      	movs	r3, #1
 800de52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de54:	4b0f      	ldr	r3, [pc, #60]	; (800de94 <xTaskResumeAll+0x138>)
 800de56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de64:	f001 f9f6 	bl	800f254 <vPortExitCritical>

	return xAlreadyYielded;
 800de68:	68bb      	ldr	r3, [r7, #8]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	20000ab0 	.word	0x20000ab0
 800de78:	20000a88 	.word	0x20000a88
 800de7c:	20000a48 	.word	0x20000a48
 800de80:	20000a90 	.word	0x20000a90
 800de84:	200005b8 	.word	0x200005b8
 800de88:	200005b4 	.word	0x200005b4
 800de8c:	20000a9c 	.word	0x20000a9c
 800de90:	20000a98 	.word	0x20000a98
 800de94:	e000ed04 	.word	0xe000ed04

0800de98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de9e:	4b05      	ldr	r3, [pc, #20]	; (800deb4 <xTaskGetTickCount+0x1c>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dea4:	687b      	ldr	r3, [r7, #4]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	20000a8c 	.word	0x20000a8c

0800deb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800debe:	f001 fa7b 	bl	800f3b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dec2:	2300      	movs	r3, #0
 800dec4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dec6:	4b04      	ldr	r3, [pc, #16]	; (800ded8 <xTaskGetTickCountFromISR+0x20>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800decc:	683b      	ldr	r3, [r7, #0]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	20000a8c 	.word	0x20000a8c

0800dedc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dee2:	2300      	movs	r3, #0
 800dee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dee6:	4b4f      	ldr	r3, [pc, #316]	; (800e024 <xTaskIncrementTick+0x148>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	f040 808f 	bne.w	800e00e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800def0:	4b4d      	ldr	r3, [pc, #308]	; (800e028 <xTaskIncrementTick+0x14c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	3301      	adds	r3, #1
 800def6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800def8:	4a4b      	ldr	r2, [pc, #300]	; (800e028 <xTaskIncrementTick+0x14c>)
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d120      	bne.n	800df46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800df04:	4b49      	ldr	r3, [pc, #292]	; (800e02c <xTaskIncrementTick+0x150>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00a      	beq.n	800df24 <xTaskIncrementTick+0x48>
	__asm volatile
 800df0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	603b      	str	r3, [r7, #0]
}
 800df20:	bf00      	nop
 800df22:	e7fe      	b.n	800df22 <xTaskIncrementTick+0x46>
 800df24:	4b41      	ldr	r3, [pc, #260]	; (800e02c <xTaskIncrementTick+0x150>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	4b41      	ldr	r3, [pc, #260]	; (800e030 <xTaskIncrementTick+0x154>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a3f      	ldr	r2, [pc, #252]	; (800e02c <xTaskIncrementTick+0x150>)
 800df30:	6013      	str	r3, [r2, #0]
 800df32:	4a3f      	ldr	r2, [pc, #252]	; (800e030 <xTaskIncrementTick+0x154>)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	4b3e      	ldr	r3, [pc, #248]	; (800e034 <xTaskIncrementTick+0x158>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	3301      	adds	r3, #1
 800df3e:	4a3d      	ldr	r2, [pc, #244]	; (800e034 <xTaskIncrementTick+0x158>)
 800df40:	6013      	str	r3, [r2, #0]
 800df42:	f000 fadb 	bl	800e4fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df46:	4b3c      	ldr	r3, [pc, #240]	; (800e038 <xTaskIncrementTick+0x15c>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	693a      	ldr	r2, [r7, #16]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d349      	bcc.n	800dfe4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df50:	4b36      	ldr	r3, [pc, #216]	; (800e02c <xTaskIncrementTick+0x150>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d104      	bne.n	800df64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df5a:	4b37      	ldr	r3, [pc, #220]	; (800e038 <xTaskIncrementTick+0x15c>)
 800df5c:	f04f 32ff 	mov.w	r2, #4294967295
 800df60:	601a      	str	r2, [r3, #0]
					break;
 800df62:	e03f      	b.n	800dfe4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df64:	4b31      	ldr	r3, [pc, #196]	; (800e02c <xTaskIncrementTick+0x150>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df74:	693a      	ldr	r2, [r7, #16]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d203      	bcs.n	800df84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df7c:	4a2e      	ldr	r2, [pc, #184]	; (800e038 <xTaskIncrementTick+0x15c>)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df82:	e02f      	b.n	800dfe4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	3304      	adds	r3, #4
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fe fc45 	bl	800c818 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df92:	2b00      	cmp	r3, #0
 800df94:	d004      	beq.n	800dfa0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	3318      	adds	r3, #24
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fe fc3c 	bl	800c818 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa4:	4b25      	ldr	r3, [pc, #148]	; (800e03c <xTaskIncrementTick+0x160>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d903      	bls.n	800dfb4 <xTaskIncrementTick+0xd8>
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb0:	4a22      	ldr	r2, [pc, #136]	; (800e03c <xTaskIncrementTick+0x160>)
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb8:	4613      	mov	r3, r2
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	4413      	add	r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4a1f      	ldr	r2, [pc, #124]	; (800e040 <xTaskIncrementTick+0x164>)
 800dfc2:	441a      	add	r2, r3
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	4619      	mov	r1, r3
 800dfca:	4610      	mov	r0, r2
 800dfcc:	f7fe fbc7 	bl	800c75e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd4:	4b1b      	ldr	r3, [pc, #108]	; (800e044 <xTaskIncrementTick+0x168>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d3b8      	bcc.n	800df50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfe2:	e7b5      	b.n	800df50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfe4:	4b17      	ldr	r3, [pc, #92]	; (800e044 <xTaskIncrementTick+0x168>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfea:	4915      	ldr	r1, [pc, #84]	; (800e040 <xTaskIncrementTick+0x164>)
 800dfec:	4613      	mov	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4413      	add	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	440b      	add	r3, r1
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d901      	bls.n	800e000 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dffc:	2301      	movs	r3, #1
 800dffe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e000:	4b11      	ldr	r3, [pc, #68]	; (800e048 <xTaskIncrementTick+0x16c>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d007      	beq.n	800e018 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e008:	2301      	movs	r3, #1
 800e00a:	617b      	str	r3, [r7, #20]
 800e00c:	e004      	b.n	800e018 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e00e:	4b0f      	ldr	r3, [pc, #60]	; (800e04c <xTaskIncrementTick+0x170>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	3301      	adds	r3, #1
 800e014:	4a0d      	ldr	r2, [pc, #52]	; (800e04c <xTaskIncrementTick+0x170>)
 800e016:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e018:	697b      	ldr	r3, [r7, #20]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3718      	adds	r7, #24
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	20000ab0 	.word	0x20000ab0
 800e028:	20000a8c 	.word	0x20000a8c
 800e02c:	20000a40 	.word	0x20000a40
 800e030:	20000a44 	.word	0x20000a44
 800e034:	20000aa0 	.word	0x20000aa0
 800e038:	20000aa8 	.word	0x20000aa8
 800e03c:	20000a90 	.word	0x20000a90
 800e040:	200005b8 	.word	0x200005b8
 800e044:	200005b4 	.word	0x200005b4
 800e048:	20000a9c 	.word	0x20000a9c
 800e04c:	20000a98 	.word	0x20000a98

0800e050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e056:	4b2a      	ldr	r3, [pc, #168]	; (800e100 <vTaskSwitchContext+0xb0>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d003      	beq.n	800e066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e05e:	4b29      	ldr	r3, [pc, #164]	; (800e104 <vTaskSwitchContext+0xb4>)
 800e060:	2201      	movs	r2, #1
 800e062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e064:	e046      	b.n	800e0f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e066:	4b27      	ldr	r3, [pc, #156]	; (800e104 <vTaskSwitchContext+0xb4>)
 800e068:	2200      	movs	r2, #0
 800e06a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e06c:	4b26      	ldr	r3, [pc, #152]	; (800e108 <vTaskSwitchContext+0xb8>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	60fb      	str	r3, [r7, #12]
 800e072:	e010      	b.n	800e096 <vTaskSwitchContext+0x46>
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10a      	bne.n	800e090 <vTaskSwitchContext+0x40>
	__asm volatile
 800e07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07e:	f383 8811 	msr	BASEPRI, r3
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	f3bf 8f4f 	dsb	sy
 800e08a:	607b      	str	r3, [r7, #4]
}
 800e08c:	bf00      	nop
 800e08e:	e7fe      	b.n	800e08e <vTaskSwitchContext+0x3e>
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	3b01      	subs	r3, #1
 800e094:	60fb      	str	r3, [r7, #12]
 800e096:	491d      	ldr	r1, [pc, #116]	; (800e10c <vTaskSwitchContext+0xbc>)
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	4613      	mov	r3, r2
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	4413      	add	r3, r2
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	440b      	add	r3, r1
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d0e4      	beq.n	800e074 <vTaskSwitchContext+0x24>
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4a15      	ldr	r2, [pc, #84]	; (800e10c <vTaskSwitchContext+0xbc>)
 800e0b6:	4413      	add	r3, r2
 800e0b8:	60bb      	str	r3, [r7, #8]
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	685a      	ldr	r2, [r3, #4]
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	605a      	str	r2, [r3, #4]
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	3308      	adds	r3, #8
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d104      	bne.n	800e0da <vTaskSwitchContext+0x8a>
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	605a      	str	r2, [r3, #4]
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	4a0b      	ldr	r2, [pc, #44]	; (800e110 <vTaskSwitchContext+0xc0>)
 800e0e2:	6013      	str	r3, [r2, #0]
 800e0e4:	4a08      	ldr	r2, [pc, #32]	; (800e108 <vTaskSwitchContext+0xb8>)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e0ea:	4b09      	ldr	r3, [pc, #36]	; (800e110 <vTaskSwitchContext+0xc0>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	3354      	adds	r3, #84	; 0x54
 800e0f0:	4a08      	ldr	r2, [pc, #32]	; (800e114 <vTaskSwitchContext+0xc4>)
 800e0f2:	6013      	str	r3, [r2, #0]
}
 800e0f4:	bf00      	nop
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr
 800e100:	20000ab0 	.word	0x20000ab0
 800e104:	20000a9c 	.word	0x20000a9c
 800e108:	20000a90 	.word	0x20000a90
 800e10c:	200005b8 	.word	0x200005b8
 800e110:	200005b4 	.word	0x200005b4
 800e114:	20000098 	.word	0x20000098

0800e118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10a      	bne.n	800e13e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	60fb      	str	r3, [r7, #12]
}
 800e13a:	bf00      	nop
 800e13c:	e7fe      	b.n	800e13c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e13e:	4b07      	ldr	r3, [pc, #28]	; (800e15c <vTaskPlaceOnEventList+0x44>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	3318      	adds	r3, #24
 800e144:	4619      	mov	r1, r3
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7fe fb2d 	bl	800c7a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e14c:	2101      	movs	r1, #1
 800e14e:	6838      	ldr	r0, [r7, #0]
 800e150:	f000 fb7e 	bl	800e850 <prvAddCurrentTaskToDelayedList>
}
 800e154:	bf00      	nop
 800e156:	3710      	adds	r7, #16
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	200005b4 	.word	0x200005b4

0800e160 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d10a      	bne.n	800e188 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e176:	f383 8811 	msr	BASEPRI, r3
 800e17a:	f3bf 8f6f 	isb	sy
 800e17e:	f3bf 8f4f 	dsb	sy
 800e182:	617b      	str	r3, [r7, #20]
}
 800e184:	bf00      	nop
 800e186:	e7fe      	b.n	800e186 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e188:	4b0a      	ldr	r3, [pc, #40]	; (800e1b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	3318      	adds	r3, #24
 800e18e:	4619      	mov	r1, r3
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f7fe fae4 	bl	800c75e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d002      	beq.n	800e1a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e19c:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e1a2:	6879      	ldr	r1, [r7, #4]
 800e1a4:	68b8      	ldr	r0, [r7, #8]
 800e1a6:	f000 fb53 	bl	800e850 <prvAddCurrentTaskToDelayedList>
	}
 800e1aa:	bf00      	nop
 800e1ac:	3718      	adds	r7, #24
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	200005b4 	.word	0x200005b4

0800e1b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b086      	sub	sp, #24
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10a      	bne.n	800e1e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	60fb      	str	r3, [r7, #12]
}
 800e1e0:	bf00      	nop
 800e1e2:	e7fe      	b.n	800e1e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	3318      	adds	r3, #24
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe fb15 	bl	800c818 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1ee:	4b1e      	ldr	r3, [pc, #120]	; (800e268 <xTaskRemoveFromEventList+0xb0>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d11d      	bne.n	800e232 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	3304      	adds	r3, #4
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fe fb0c 	bl	800c818 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e204:	4b19      	ldr	r3, [pc, #100]	; (800e26c <xTaskRemoveFromEventList+0xb4>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d903      	bls.n	800e214 <xTaskRemoveFromEventList+0x5c>
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e210:	4a16      	ldr	r2, [pc, #88]	; (800e26c <xTaskRemoveFromEventList+0xb4>)
 800e212:	6013      	str	r3, [r2, #0]
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e218:	4613      	mov	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4a13      	ldr	r2, [pc, #76]	; (800e270 <xTaskRemoveFromEventList+0xb8>)
 800e222:	441a      	add	r2, r3
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	3304      	adds	r3, #4
 800e228:	4619      	mov	r1, r3
 800e22a:	4610      	mov	r0, r2
 800e22c:	f7fe fa97 	bl	800c75e <vListInsertEnd>
 800e230:	e005      	b.n	800e23e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	3318      	adds	r3, #24
 800e236:	4619      	mov	r1, r3
 800e238:	480e      	ldr	r0, [pc, #56]	; (800e274 <xTaskRemoveFromEventList+0xbc>)
 800e23a:	f7fe fa90 	bl	800c75e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e242:	4b0d      	ldr	r3, [pc, #52]	; (800e278 <xTaskRemoveFromEventList+0xc0>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	429a      	cmp	r2, r3
 800e24a:	d905      	bls.n	800e258 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e24c:	2301      	movs	r3, #1
 800e24e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e250:	4b0a      	ldr	r3, [pc, #40]	; (800e27c <xTaskRemoveFromEventList+0xc4>)
 800e252:	2201      	movs	r2, #1
 800e254:	601a      	str	r2, [r3, #0]
 800e256:	e001      	b.n	800e25c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e258:	2300      	movs	r3, #0
 800e25a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e25c:	697b      	ldr	r3, [r7, #20]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3718      	adds	r7, #24
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	20000ab0 	.word	0x20000ab0
 800e26c:	20000a90 	.word	0x20000a90
 800e270:	200005b8 	.word	0x200005b8
 800e274:	20000a48 	.word	0x20000a48
 800e278:	200005b4 	.word	0x200005b4
 800e27c:	20000a9c 	.word	0x20000a9c

0800e280 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e288:	4b06      	ldr	r3, [pc, #24]	; (800e2a4 <vTaskInternalSetTimeOutState+0x24>)
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e290:	4b05      	ldr	r3, [pc, #20]	; (800e2a8 <vTaskInternalSetTimeOutState+0x28>)
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	605a      	str	r2, [r3, #4]
}
 800e298:	bf00      	nop
 800e29a:	370c      	adds	r7, #12
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr
 800e2a4:	20000aa0 	.word	0x20000aa0
 800e2a8:	20000a8c 	.word	0x20000a8c

0800e2ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b088      	sub	sp, #32
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10a      	bne.n	800e2d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c0:	f383 8811 	msr	BASEPRI, r3
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	f3bf 8f4f 	dsb	sy
 800e2cc:	613b      	str	r3, [r7, #16]
}
 800e2ce:	bf00      	nop
 800e2d0:	e7fe      	b.n	800e2d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d10a      	bne.n	800e2ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2dc:	f383 8811 	msr	BASEPRI, r3
 800e2e0:	f3bf 8f6f 	isb	sy
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	60fb      	str	r3, [r7, #12]
}
 800e2ea:	bf00      	nop
 800e2ec:	e7fe      	b.n	800e2ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e2ee:	f000 ff81 	bl	800f1f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2f2:	4b1d      	ldr	r3, [pc, #116]	; (800e368 <xTaskCheckForTimeOut+0xbc>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	69ba      	ldr	r2, [r7, #24]
 800e2fe:	1ad3      	subs	r3, r2, r3
 800e300:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30a:	d102      	bne.n	800e312 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e30c:	2300      	movs	r3, #0
 800e30e:	61fb      	str	r3, [r7, #28]
 800e310:	e023      	b.n	800e35a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	4b15      	ldr	r3, [pc, #84]	; (800e36c <xTaskCheckForTimeOut+0xc0>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d007      	beq.n	800e32e <xTaskCheckForTimeOut+0x82>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	69ba      	ldr	r2, [r7, #24]
 800e324:	429a      	cmp	r2, r3
 800e326:	d302      	bcc.n	800e32e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e328:	2301      	movs	r3, #1
 800e32a:	61fb      	str	r3, [r7, #28]
 800e32c:	e015      	b.n	800e35a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	697a      	ldr	r2, [r7, #20]
 800e334:	429a      	cmp	r2, r3
 800e336:	d20b      	bcs.n	800e350 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	1ad2      	subs	r2, r2, r3
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7ff ff9b 	bl	800e280 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e34a:	2300      	movs	r3, #0
 800e34c:	61fb      	str	r3, [r7, #28]
 800e34e:	e004      	b.n	800e35a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	2200      	movs	r2, #0
 800e354:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e356:	2301      	movs	r3, #1
 800e358:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e35a:	f000 ff7b 	bl	800f254 <vPortExitCritical>

	return xReturn;
 800e35e:	69fb      	ldr	r3, [r7, #28]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3720      	adds	r7, #32
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20000a8c 	.word	0x20000a8c
 800e36c:	20000aa0 	.word	0x20000aa0

0800e370 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e370:	b480      	push	{r7}
 800e372:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e374:	4b03      	ldr	r3, [pc, #12]	; (800e384 <vTaskMissedYield+0x14>)
 800e376:	2201      	movs	r2, #1
 800e378:	601a      	str	r2, [r3, #0]
}
 800e37a:	bf00      	nop
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr
 800e384:	20000a9c 	.word	0x20000a9c

0800e388 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e390:	f000 f852 	bl	800e438 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e394:	4b06      	ldr	r3, [pc, #24]	; (800e3b0 <prvIdleTask+0x28>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d9f9      	bls.n	800e390 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e39c:	4b05      	ldr	r3, [pc, #20]	; (800e3b4 <prvIdleTask+0x2c>)
 800e39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a2:	601a      	str	r2, [r3, #0]
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3ac:	e7f0      	b.n	800e390 <prvIdleTask+0x8>
 800e3ae:	bf00      	nop
 800e3b0:	200005b8 	.word	0x200005b8
 800e3b4:	e000ed04 	.word	0xe000ed04

0800e3b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3be:	2300      	movs	r3, #0
 800e3c0:	607b      	str	r3, [r7, #4]
 800e3c2:	e00c      	b.n	800e3de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4413      	add	r3, r2
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4a12      	ldr	r2, [pc, #72]	; (800e418 <prvInitialiseTaskLists+0x60>)
 800e3d0:	4413      	add	r3, r2
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fe f996 	bl	800c704 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	607b      	str	r3, [r7, #4]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b37      	cmp	r3, #55	; 0x37
 800e3e2:	d9ef      	bls.n	800e3c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3e4:	480d      	ldr	r0, [pc, #52]	; (800e41c <prvInitialiseTaskLists+0x64>)
 800e3e6:	f7fe f98d 	bl	800c704 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3ea:	480d      	ldr	r0, [pc, #52]	; (800e420 <prvInitialiseTaskLists+0x68>)
 800e3ec:	f7fe f98a 	bl	800c704 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3f0:	480c      	ldr	r0, [pc, #48]	; (800e424 <prvInitialiseTaskLists+0x6c>)
 800e3f2:	f7fe f987 	bl	800c704 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e3f6:	480c      	ldr	r0, [pc, #48]	; (800e428 <prvInitialiseTaskLists+0x70>)
 800e3f8:	f7fe f984 	bl	800c704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3fc:	480b      	ldr	r0, [pc, #44]	; (800e42c <prvInitialiseTaskLists+0x74>)
 800e3fe:	f7fe f981 	bl	800c704 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e402:	4b0b      	ldr	r3, [pc, #44]	; (800e430 <prvInitialiseTaskLists+0x78>)
 800e404:	4a05      	ldr	r2, [pc, #20]	; (800e41c <prvInitialiseTaskLists+0x64>)
 800e406:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e408:	4b0a      	ldr	r3, [pc, #40]	; (800e434 <prvInitialiseTaskLists+0x7c>)
 800e40a:	4a05      	ldr	r2, [pc, #20]	; (800e420 <prvInitialiseTaskLists+0x68>)
 800e40c:	601a      	str	r2, [r3, #0]
}
 800e40e:	bf00      	nop
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	200005b8 	.word	0x200005b8
 800e41c:	20000a18 	.word	0x20000a18
 800e420:	20000a2c 	.word	0x20000a2c
 800e424:	20000a48 	.word	0x20000a48
 800e428:	20000a5c 	.word	0x20000a5c
 800e42c:	20000a74 	.word	0x20000a74
 800e430:	20000a40 	.word	0x20000a40
 800e434:	20000a44 	.word	0x20000a44

0800e438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e43e:	e019      	b.n	800e474 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e440:	f000 fed8 	bl	800f1f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e444:	4b10      	ldr	r3, [pc, #64]	; (800e488 <prvCheckTasksWaitingTermination+0x50>)
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	3304      	adds	r3, #4
 800e450:	4618      	mov	r0, r3
 800e452:	f7fe f9e1 	bl	800c818 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e456:	4b0d      	ldr	r3, [pc, #52]	; (800e48c <prvCheckTasksWaitingTermination+0x54>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	4a0b      	ldr	r2, [pc, #44]	; (800e48c <prvCheckTasksWaitingTermination+0x54>)
 800e45e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e460:	4b0b      	ldr	r3, [pc, #44]	; (800e490 <prvCheckTasksWaitingTermination+0x58>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	3b01      	subs	r3, #1
 800e466:	4a0a      	ldr	r2, [pc, #40]	; (800e490 <prvCheckTasksWaitingTermination+0x58>)
 800e468:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e46a:	f000 fef3 	bl	800f254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 f810 	bl	800e494 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e474:	4b06      	ldr	r3, [pc, #24]	; (800e490 <prvCheckTasksWaitingTermination+0x58>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1e1      	bne.n	800e440 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e47c:	bf00      	nop
 800e47e:	bf00      	nop
 800e480:	3708      	adds	r7, #8
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	20000a5c 	.word	0x20000a5c
 800e48c:	20000a88 	.word	0x20000a88
 800e490:	20000a70 	.word	0x20000a70

0800e494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	3354      	adds	r3, #84	; 0x54
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f020 fa21 	bl	802e8e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d108      	bne.n	800e4c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f001 f88b 	bl	800f5d0 <vPortFree>
				vPortFree( pxTCB );
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f001 f888 	bl	800f5d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4c0:	e018      	b.n	800e4f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d103      	bne.n	800e4d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f001 f87f 	bl	800f5d0 <vPortFree>
	}
 800e4d2:	e00f      	b.n	800e4f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	d00a      	beq.n	800e4f4 <prvDeleteTCB+0x60>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	60fb      	str	r3, [r7, #12]
}
 800e4f0:	bf00      	nop
 800e4f2:	e7fe      	b.n	800e4f2 <prvDeleteTCB+0x5e>
	}
 800e4f4:	bf00      	nop
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e502:	4b0c      	ldr	r3, [pc, #48]	; (800e534 <prvResetNextTaskUnblockTime+0x38>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d104      	bne.n	800e516 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e50c:	4b0a      	ldr	r3, [pc, #40]	; (800e538 <prvResetNextTaskUnblockTime+0x3c>)
 800e50e:	f04f 32ff 	mov.w	r2, #4294967295
 800e512:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e514:	e008      	b.n	800e528 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e516:	4b07      	ldr	r3, [pc, #28]	; (800e534 <prvResetNextTaskUnblockTime+0x38>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	4a04      	ldr	r2, [pc, #16]	; (800e538 <prvResetNextTaskUnblockTime+0x3c>)
 800e526:	6013      	str	r3, [r2, #0]
}
 800e528:	bf00      	nop
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr
 800e534:	20000a40 	.word	0x20000a40
 800e538:	20000aa8 	.word	0x20000aa8

0800e53c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e53c:	b480      	push	{r7}
 800e53e:	b083      	sub	sp, #12
 800e540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e542:	4b0b      	ldr	r3, [pc, #44]	; (800e570 <xTaskGetSchedulerState+0x34>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d102      	bne.n	800e550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e54a:	2301      	movs	r3, #1
 800e54c:	607b      	str	r3, [r7, #4]
 800e54e:	e008      	b.n	800e562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e550:	4b08      	ldr	r3, [pc, #32]	; (800e574 <xTaskGetSchedulerState+0x38>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d102      	bne.n	800e55e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e558:	2302      	movs	r3, #2
 800e55a:	607b      	str	r3, [r7, #4]
 800e55c:	e001      	b.n	800e562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e55e:	2300      	movs	r3, #0
 800e560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e562:	687b      	ldr	r3, [r7, #4]
	}
 800e564:	4618      	mov	r0, r3
 800e566:	370c      	adds	r7, #12
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	20000a94 	.word	0x20000a94
 800e574:	20000ab0 	.word	0x20000ab0

0800e578 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e584:	2300      	movs	r3, #0
 800e586:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d051      	beq.n	800e632 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e592:	4b2a      	ldr	r3, [pc, #168]	; (800e63c <xTaskPriorityInherit+0xc4>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e598:	429a      	cmp	r2, r3
 800e59a:	d241      	bcs.n	800e620 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	699b      	ldr	r3, [r3, #24]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	db06      	blt.n	800e5b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5a4:	4b25      	ldr	r3, [pc, #148]	; (800e63c <xTaskPriorityInherit+0xc4>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	6959      	ldr	r1, [r3, #20]
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4a1f      	ldr	r2, [pc, #124]	; (800e640 <xTaskPriorityInherit+0xc8>)
 800e5c4:	4413      	add	r3, r2
 800e5c6:	4299      	cmp	r1, r3
 800e5c8:	d122      	bne.n	800e610 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	3304      	adds	r3, #4
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7fe f922 	bl	800c818 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5d4:	4b19      	ldr	r3, [pc, #100]	; (800e63c <xTaskPriorityInherit+0xc4>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5e2:	4b18      	ldr	r3, [pc, #96]	; (800e644 <xTaskPriorityInherit+0xcc>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d903      	bls.n	800e5f2 <xTaskPriorityInherit+0x7a>
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ee:	4a15      	ldr	r2, [pc, #84]	; (800e644 <xTaskPriorityInherit+0xcc>)
 800e5f0:	6013      	str	r3, [r2, #0]
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	4413      	add	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4a10      	ldr	r2, [pc, #64]	; (800e640 <xTaskPriorityInherit+0xc8>)
 800e600:	441a      	add	r2, r3
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	3304      	adds	r3, #4
 800e606:	4619      	mov	r1, r3
 800e608:	4610      	mov	r0, r2
 800e60a:	f7fe f8a8 	bl	800c75e <vListInsertEnd>
 800e60e:	e004      	b.n	800e61a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e610:	4b0a      	ldr	r3, [pc, #40]	; (800e63c <xTaskPriorityInherit+0xc4>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e61a:	2301      	movs	r3, #1
 800e61c:	60fb      	str	r3, [r7, #12]
 800e61e:	e008      	b.n	800e632 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e624:	4b05      	ldr	r3, [pc, #20]	; (800e63c <xTaskPriorityInherit+0xc4>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d201      	bcs.n	800e632 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e62e:	2301      	movs	r3, #1
 800e630:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e632:	68fb      	ldr	r3, [r7, #12]
	}
 800e634:	4618      	mov	r0, r3
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	200005b4 	.word	0x200005b4
 800e640:	200005b8 	.word	0x200005b8
 800e644:	20000a90 	.word	0x20000a90

0800e648 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e654:	2300      	movs	r3, #0
 800e656:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d056      	beq.n	800e70c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e65e:	4b2e      	ldr	r3, [pc, #184]	; (800e718 <xTaskPriorityDisinherit+0xd0>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	693a      	ldr	r2, [r7, #16]
 800e664:	429a      	cmp	r2, r3
 800e666:	d00a      	beq.n	800e67e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66c:	f383 8811 	msr	BASEPRI, r3
 800e670:	f3bf 8f6f 	isb	sy
 800e674:	f3bf 8f4f 	dsb	sy
 800e678:	60fb      	str	r3, [r7, #12]
}
 800e67a:	bf00      	nop
 800e67c:	e7fe      	b.n	800e67c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e682:	2b00      	cmp	r3, #0
 800e684:	d10a      	bne.n	800e69c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68a:	f383 8811 	msr	BASEPRI, r3
 800e68e:	f3bf 8f6f 	isb	sy
 800e692:	f3bf 8f4f 	dsb	sy
 800e696:	60bb      	str	r3, [r7, #8]
}
 800e698:	bf00      	nop
 800e69a:	e7fe      	b.n	800e69a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6a0:	1e5a      	subs	r2, r3, #1
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d02c      	beq.n	800e70c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d128      	bne.n	800e70c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	3304      	adds	r3, #4
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fe f8aa 	bl	800c818 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6dc:	4b0f      	ldr	r3, [pc, #60]	; (800e71c <xTaskPriorityDisinherit+0xd4>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d903      	bls.n	800e6ec <xTaskPriorityDisinherit+0xa4>
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e8:	4a0c      	ldr	r2, [pc, #48]	; (800e71c <xTaskPriorityDisinherit+0xd4>)
 800e6ea:	6013      	str	r3, [r2, #0]
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	009b      	lsls	r3, r3, #2
 800e6f4:	4413      	add	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4a09      	ldr	r2, [pc, #36]	; (800e720 <xTaskPriorityDisinherit+0xd8>)
 800e6fa:	441a      	add	r2, r3
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	3304      	adds	r3, #4
 800e700:	4619      	mov	r1, r3
 800e702:	4610      	mov	r0, r2
 800e704:	f7fe f82b 	bl	800c75e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e708:	2301      	movs	r3, #1
 800e70a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e70c:	697b      	ldr	r3, [r7, #20]
	}
 800e70e:	4618      	mov	r0, r3
 800e710:	3718      	adds	r7, #24
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	200005b4 	.word	0x200005b4
 800e71c:	20000a90 	.word	0x20000a90
 800e720:	200005b8 	.word	0x200005b8

0800e724 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e724:	b580      	push	{r7, lr}
 800e726:	b088      	sub	sp, #32
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e732:	2301      	movs	r3, #1
 800e734:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d06a      	beq.n	800e812 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e740:	2b00      	cmp	r3, #0
 800e742:	d10a      	bne.n	800e75a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e748:	f383 8811 	msr	BASEPRI, r3
 800e74c:	f3bf 8f6f 	isb	sy
 800e750:	f3bf 8f4f 	dsb	sy
 800e754:	60fb      	str	r3, [r7, #12]
}
 800e756:	bf00      	nop
 800e758:	e7fe      	b.n	800e758 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e75e:	683a      	ldr	r2, [r7, #0]
 800e760:	429a      	cmp	r2, r3
 800e762:	d902      	bls.n	800e76a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	61fb      	str	r3, [r7, #28]
 800e768:	e002      	b.n	800e770 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e76e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e770:	69bb      	ldr	r3, [r7, #24]
 800e772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e774:	69fa      	ldr	r2, [r7, #28]
 800e776:	429a      	cmp	r2, r3
 800e778:	d04b      	beq.n	800e812 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e77e:	697a      	ldr	r2, [r7, #20]
 800e780:	429a      	cmp	r2, r3
 800e782:	d146      	bne.n	800e812 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e784:	4b25      	ldr	r3, [pc, #148]	; (800e81c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	69ba      	ldr	r2, [r7, #24]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d10a      	bne.n	800e7a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e792:	f383 8811 	msr	BASEPRI, r3
 800e796:	f3bf 8f6f 	isb	sy
 800e79a:	f3bf 8f4f 	dsb	sy
 800e79e:	60bb      	str	r3, [r7, #8]
}
 800e7a0:	bf00      	nop
 800e7a2:	e7fe      	b.n	800e7a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	69fa      	ldr	r2, [r7, #28]
 800e7ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	699b      	ldr	r3, [r3, #24]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	db04      	blt.n	800e7c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	6959      	ldr	r1, [r3, #20]
 800e7c6:	693a      	ldr	r2, [r7, #16]
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	4413      	add	r3, r2
 800e7ce:	009b      	lsls	r3, r3, #2
 800e7d0:	4a13      	ldr	r2, [pc, #76]	; (800e820 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e7d2:	4413      	add	r3, r2
 800e7d4:	4299      	cmp	r1, r3
 800e7d6:	d11c      	bne.n	800e812 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	3304      	adds	r3, #4
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fe f81b 	bl	800c818 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e6:	4b0f      	ldr	r3, [pc, #60]	; (800e824 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d903      	bls.n	800e7f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f2:	4a0c      	ldr	r2, [pc, #48]	; (800e824 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7f4:	6013      	str	r3, [r2, #0]
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4413      	add	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	4a07      	ldr	r2, [pc, #28]	; (800e820 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e804:	441a      	add	r2, r3
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	3304      	adds	r3, #4
 800e80a:	4619      	mov	r1, r3
 800e80c:	4610      	mov	r0, r2
 800e80e:	f7fd ffa6 	bl	800c75e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e812:	bf00      	nop
 800e814:	3720      	adds	r7, #32
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	200005b4 	.word	0x200005b4
 800e820:	200005b8 	.word	0x200005b8
 800e824:	20000a90 	.word	0x20000a90

0800e828 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e828:	b480      	push	{r7}
 800e82a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e82c:	4b07      	ldr	r3, [pc, #28]	; (800e84c <pvTaskIncrementMutexHeldCount+0x24>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d004      	beq.n	800e83e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e834:	4b05      	ldr	r3, [pc, #20]	; (800e84c <pvTaskIncrementMutexHeldCount+0x24>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e83a:	3201      	adds	r2, #1
 800e83c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e83e:	4b03      	ldr	r3, [pc, #12]	; (800e84c <pvTaskIncrementMutexHeldCount+0x24>)
 800e840:	681b      	ldr	r3, [r3, #0]
	}
 800e842:	4618      	mov	r0, r3
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	200005b4 	.word	0x200005b4

0800e850 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e85a:	4b21      	ldr	r3, [pc, #132]	; (800e8e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e860:	4b20      	ldr	r3, [pc, #128]	; (800e8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	3304      	adds	r3, #4
 800e866:	4618      	mov	r0, r3
 800e868:	f7fd ffd6 	bl	800c818 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e872:	d10a      	bne.n	800e88a <prvAddCurrentTaskToDelayedList+0x3a>
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d007      	beq.n	800e88a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e87a:	4b1a      	ldr	r3, [pc, #104]	; (800e8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	3304      	adds	r3, #4
 800e880:	4619      	mov	r1, r3
 800e882:	4819      	ldr	r0, [pc, #100]	; (800e8e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e884:	f7fd ff6b 	bl	800c75e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e888:	e026      	b.n	800e8d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4413      	add	r3, r2
 800e890:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e892:	4b14      	ldr	r3, [pc, #80]	; (800e8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d209      	bcs.n	800e8b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8a2:	4b12      	ldr	r3, [pc, #72]	; (800e8ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	4b0f      	ldr	r3, [pc, #60]	; (800e8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	3304      	adds	r3, #4
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	4610      	mov	r0, r2
 800e8b0:	f7fd ff79 	bl	800c7a6 <vListInsert>
}
 800e8b4:	e010      	b.n	800e8d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8b6:	4b0e      	ldr	r3, [pc, #56]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	4b0a      	ldr	r3, [pc, #40]	; (800e8e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3304      	adds	r3, #4
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	4610      	mov	r0, r2
 800e8c4:	f7fd ff6f 	bl	800c7a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8c8:	4b0a      	ldr	r3, [pc, #40]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d202      	bcs.n	800e8d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8d2:	4a08      	ldr	r2, [pc, #32]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	6013      	str	r3, [r2, #0]
}
 800e8d8:	bf00      	nop
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	20000a8c 	.word	0x20000a8c
 800e8e4:	200005b4 	.word	0x200005b4
 800e8e8:	20000a74 	.word	0x20000a74
 800e8ec:	20000a44 	.word	0x20000a44
 800e8f0:	20000a40 	.word	0x20000a40
 800e8f4:	20000aa8 	.word	0x20000aa8

0800e8f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b08a      	sub	sp, #40	; 0x28
 800e8fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e8fe:	2300      	movs	r3, #0
 800e900:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e902:	f000 fb07 	bl	800ef14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e906:	4b1c      	ldr	r3, [pc, #112]	; (800e978 <xTimerCreateTimerTask+0x80>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d021      	beq.n	800e952 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e90e:	2300      	movs	r3, #0
 800e910:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e912:	2300      	movs	r3, #0
 800e914:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e916:	1d3a      	adds	r2, r7, #4
 800e918:	f107 0108 	add.w	r1, r7, #8
 800e91c:	f107 030c 	add.w	r3, r7, #12
 800e920:	4618      	mov	r0, r3
 800e922:	f7fd fed5 	bl	800c6d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e926:	6879      	ldr	r1, [r7, #4]
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	9202      	str	r2, [sp, #8]
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	2302      	movs	r3, #2
 800e932:	9300      	str	r3, [sp, #0]
 800e934:	2300      	movs	r3, #0
 800e936:	460a      	mov	r2, r1
 800e938:	4910      	ldr	r1, [pc, #64]	; (800e97c <xTimerCreateTimerTask+0x84>)
 800e93a:	4811      	ldr	r0, [pc, #68]	; (800e980 <xTimerCreateTimerTask+0x88>)
 800e93c:	f7fe ffa4 	bl	800d888 <xTaskCreateStatic>
 800e940:	4603      	mov	r3, r0
 800e942:	4a10      	ldr	r2, [pc, #64]	; (800e984 <xTimerCreateTimerTask+0x8c>)
 800e944:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e946:	4b0f      	ldr	r3, [pc, #60]	; (800e984 <xTimerCreateTimerTask+0x8c>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d001      	beq.n	800e952 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e94e:	2301      	movs	r3, #1
 800e950:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d10a      	bne.n	800e96e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95c:	f383 8811 	msr	BASEPRI, r3
 800e960:	f3bf 8f6f 	isb	sy
 800e964:	f3bf 8f4f 	dsb	sy
 800e968:	613b      	str	r3, [r7, #16]
}
 800e96a:	bf00      	nop
 800e96c:	e7fe      	b.n	800e96c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e96e:	697b      	ldr	r3, [r7, #20]
}
 800e970:	4618      	mov	r0, r3
 800e972:	3718      	adds	r7, #24
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	20000ae4 	.word	0x20000ae4
 800e97c:	0802f100 	.word	0x0802f100
 800e980:	0800eabd 	.word	0x0800eabd
 800e984:	20000ae8 	.word	0x20000ae8

0800e988 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b08a      	sub	sp, #40	; 0x28
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
 800e994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e996:	2300      	movs	r3, #0
 800e998:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d10a      	bne.n	800e9b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a4:	f383 8811 	msr	BASEPRI, r3
 800e9a8:	f3bf 8f6f 	isb	sy
 800e9ac:	f3bf 8f4f 	dsb	sy
 800e9b0:	623b      	str	r3, [r7, #32]
}
 800e9b2:	bf00      	nop
 800e9b4:	e7fe      	b.n	800e9b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e9b6:	4b1a      	ldr	r3, [pc, #104]	; (800ea20 <xTimerGenericCommand+0x98>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d02a      	beq.n	800ea14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	2b05      	cmp	r3, #5
 800e9ce:	dc18      	bgt.n	800ea02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9d0:	f7ff fdb4 	bl	800e53c <xTaskGetSchedulerState>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d109      	bne.n	800e9ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e9da:	4b11      	ldr	r3, [pc, #68]	; (800ea20 <xTimerGenericCommand+0x98>)
 800e9dc:	6818      	ldr	r0, [r3, #0]
 800e9de:	f107 0110 	add.w	r1, r7, #16
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9e6:	f7fe f8e9 	bl	800cbbc <xQueueGenericSend>
 800e9ea:	6278      	str	r0, [r7, #36]	; 0x24
 800e9ec:	e012      	b.n	800ea14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e9ee:	4b0c      	ldr	r3, [pc, #48]	; (800ea20 <xTimerGenericCommand+0x98>)
 800e9f0:	6818      	ldr	r0, [r3, #0]
 800e9f2:	f107 0110 	add.w	r1, r7, #16
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f7fe f8df 	bl	800cbbc <xQueueGenericSend>
 800e9fe:	6278      	str	r0, [r7, #36]	; 0x24
 800ea00:	e008      	b.n	800ea14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea02:	4b07      	ldr	r3, [pc, #28]	; (800ea20 <xTimerGenericCommand+0x98>)
 800ea04:	6818      	ldr	r0, [r3, #0]
 800ea06:	f107 0110 	add.w	r1, r7, #16
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	f7fe f9d3 	bl	800cdb8 <xQueueGenericSendFromISR>
 800ea12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3728      	adds	r7, #40	; 0x28
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	20000ae4 	.word	0x20000ae4

0800ea24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b088      	sub	sp, #32
 800ea28:	af02      	add	r7, sp, #8
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea2e:	4b22      	ldr	r3, [pc, #136]	; (800eab8 <prvProcessExpiredTimer+0x94>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	3304      	adds	r3, #4
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fd feeb 	bl	800c818 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea48:	f003 0304 	and.w	r3, r3, #4
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d022      	beq.n	800ea96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	699a      	ldr	r2, [r3, #24]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	18d1      	adds	r1, r2, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	683a      	ldr	r2, [r7, #0]
 800ea5c:	6978      	ldr	r0, [r7, #20]
 800ea5e:	f000 f8d1 	bl	800ec04 <prvInsertTimerInActiveList>
 800ea62:	4603      	mov	r3, r0
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d01f      	beq.n	800eaa8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea68:	2300      	movs	r3, #0
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	2100      	movs	r1, #0
 800ea72:	6978      	ldr	r0, [r7, #20]
 800ea74:	f7ff ff88 	bl	800e988 <xTimerGenericCommand>
 800ea78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d113      	bne.n	800eaa8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	60fb      	str	r3, [r7, #12]
}
 800ea92:	bf00      	nop
 800ea94:	e7fe      	b.n	800ea94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea9c:	f023 0301 	bic.w	r3, r3, #1
 800eaa0:	b2da      	uxtb	r2, r3
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	6a1b      	ldr	r3, [r3, #32]
 800eaac:	6978      	ldr	r0, [r7, #20]
 800eaae:	4798      	blx	r3
}
 800eab0:	bf00      	nop
 800eab2:	3718      	adds	r7, #24
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	20000adc 	.word	0x20000adc

0800eabc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eac4:	f107 0308 	add.w	r3, r7, #8
 800eac8:	4618      	mov	r0, r3
 800eaca:	f000 f857 	bl	800eb7c <prvGetNextExpireTime>
 800eace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	4619      	mov	r1, r3
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f000 f803 	bl	800eae0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eada:	f000 f8d5 	bl	800ec88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eade:	e7f1      	b.n	800eac4 <prvTimerTask+0x8>

0800eae0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eaea:	f7ff f929 	bl	800dd40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eaee:	f107 0308 	add.w	r3, r7, #8
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 f866 	bl	800ebc4 <prvSampleTimeNow>
 800eaf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d130      	bne.n	800eb62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d10a      	bne.n	800eb1c <prvProcessTimerOrBlockTask+0x3c>
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d806      	bhi.n	800eb1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb0e:	f7ff f925 	bl	800dd5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb12:	68f9      	ldr	r1, [r7, #12]
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7ff ff85 	bl	800ea24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb1a:	e024      	b.n	800eb66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d008      	beq.n	800eb34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb22:	4b13      	ldr	r3, [pc, #76]	; (800eb70 <prvProcessTimerOrBlockTask+0x90>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d101      	bne.n	800eb30 <prvProcessTimerOrBlockTask+0x50>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e000      	b.n	800eb32 <prvProcessTimerOrBlockTask+0x52>
 800eb30:	2300      	movs	r3, #0
 800eb32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb34:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <prvProcessTimerOrBlockTask+0x94>)
 800eb36:	6818      	ldr	r0, [r3, #0]
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	1ad3      	subs	r3, r2, r3
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	4619      	mov	r1, r3
 800eb42:	f7fe fe6d 	bl	800d820 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb46:	f7ff f909 	bl	800dd5c <xTaskResumeAll>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10a      	bne.n	800eb66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb50:	4b09      	ldr	r3, [pc, #36]	; (800eb78 <prvProcessTimerOrBlockTask+0x98>)
 800eb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb56:	601a      	str	r2, [r3, #0]
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	f3bf 8f6f 	isb	sy
}
 800eb60:	e001      	b.n	800eb66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb62:	f7ff f8fb 	bl	800dd5c <xTaskResumeAll>
}
 800eb66:	bf00      	nop
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	20000ae0 	.word	0x20000ae0
 800eb74:	20000ae4 	.word	0x20000ae4
 800eb78:	e000ed04 	.word	0xe000ed04

0800eb7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb84:	4b0e      	ldr	r3, [pc, #56]	; (800ebc0 <prvGetNextExpireTime+0x44>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d101      	bne.n	800eb92 <prvGetNextExpireTime+0x16>
 800eb8e:	2201      	movs	r2, #1
 800eb90:	e000      	b.n	800eb94 <prvGetNextExpireTime+0x18>
 800eb92:	2200      	movs	r2, #0
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d105      	bne.n	800ebac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eba0:	4b07      	ldr	r3, [pc, #28]	; (800ebc0 <prvGetNextExpireTime+0x44>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	60fb      	str	r3, [r7, #12]
 800ebaa:	e001      	b.n	800ebb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ebac:	2300      	movs	r3, #0
 800ebae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3714      	adds	r7, #20
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	20000adc 	.word	0x20000adc

0800ebc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ebcc:	f7ff f964 	bl	800de98 <xTaskGetTickCount>
 800ebd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ebd2:	4b0b      	ldr	r3, [pc, #44]	; (800ec00 <prvSampleTimeNow+0x3c>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d205      	bcs.n	800ebe8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ebdc:	f000 f936 	bl	800ee4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	601a      	str	r2, [r3, #0]
 800ebe6:	e002      	b.n	800ebee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ebee:	4a04      	ldr	r2, [pc, #16]	; (800ec00 <prvSampleTimeNow+0x3c>)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20000aec 	.word	0x20000aec

0800ec04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
 800ec10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec12:	2300      	movs	r3, #0
 800ec14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	68ba      	ldr	r2, [r7, #8]
 800ec1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec22:	68ba      	ldr	r2, [r7, #8]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d812      	bhi.n	800ec50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec2a:	687a      	ldr	r2, [r7, #4]
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	1ad2      	subs	r2, r2, r3
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	699b      	ldr	r3, [r3, #24]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d302      	bcc.n	800ec3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	617b      	str	r3, [r7, #20]
 800ec3c:	e01b      	b.n	800ec76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec3e:	4b10      	ldr	r3, [pc, #64]	; (800ec80 <prvInsertTimerInActiveList+0x7c>)
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3304      	adds	r3, #4
 800ec46:	4619      	mov	r1, r3
 800ec48:	4610      	mov	r0, r2
 800ec4a:	f7fd fdac 	bl	800c7a6 <vListInsert>
 800ec4e:	e012      	b.n	800ec76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d206      	bcs.n	800ec66 <prvInsertTimerInActiveList+0x62>
 800ec58:	68ba      	ldr	r2, [r7, #8]
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d302      	bcc.n	800ec66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec60:	2301      	movs	r3, #1
 800ec62:	617b      	str	r3, [r7, #20]
 800ec64:	e007      	b.n	800ec76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec66:	4b07      	ldr	r3, [pc, #28]	; (800ec84 <prvInsertTimerInActiveList+0x80>)
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	4619      	mov	r1, r3
 800ec70:	4610      	mov	r0, r2
 800ec72:	f7fd fd98 	bl	800c7a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec76:	697b      	ldr	r3, [r7, #20]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3718      	adds	r7, #24
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	20000ae0 	.word	0x20000ae0
 800ec84:	20000adc 	.word	0x20000adc

0800ec88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b08e      	sub	sp, #56	; 0x38
 800ec8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec8e:	e0ca      	b.n	800ee26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	da18      	bge.n	800ecc8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ec96:	1d3b      	adds	r3, r7, #4
 800ec98:	3304      	adds	r3, #4
 800ec9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ec9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d10a      	bne.n	800ecb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800eca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca6:	f383 8811 	msr	BASEPRI, r3
 800ecaa:	f3bf 8f6f 	isb	sy
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	61fb      	str	r3, [r7, #28]
}
 800ecb4:	bf00      	nop
 800ecb6:	e7fe      	b.n	800ecb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ecb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecbe:	6850      	ldr	r0, [r2, #4]
 800ecc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecc2:	6892      	ldr	r2, [r2, #8]
 800ecc4:	4611      	mov	r1, r2
 800ecc6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f2c0 80aa 	blt.w	800ee24 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	695b      	ldr	r3, [r3, #20]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d004      	beq.n	800ece6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecde:	3304      	adds	r3, #4
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fd fd99 	bl	800c818 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ece6:	463b      	mov	r3, r7
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7ff ff6b 	bl	800ebc4 <prvSampleTimeNow>
 800ecee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b09      	cmp	r3, #9
 800ecf4:	f200 8097 	bhi.w	800ee26 <prvProcessReceivedCommands+0x19e>
 800ecf8:	a201      	add	r2, pc, #4	; (adr r2, 800ed00 <prvProcessReceivedCommands+0x78>)
 800ecfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfe:	bf00      	nop
 800ed00:	0800ed29 	.word	0x0800ed29
 800ed04:	0800ed29 	.word	0x0800ed29
 800ed08:	0800ed29 	.word	0x0800ed29
 800ed0c:	0800ed9d 	.word	0x0800ed9d
 800ed10:	0800edb1 	.word	0x0800edb1
 800ed14:	0800edfb 	.word	0x0800edfb
 800ed18:	0800ed29 	.word	0x0800ed29
 800ed1c:	0800ed29 	.word	0x0800ed29
 800ed20:	0800ed9d 	.word	0x0800ed9d
 800ed24:	0800edb1 	.word	0x0800edb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed2e:	f043 0301 	orr.w	r3, r3, #1
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3e:	699b      	ldr	r3, [r3, #24]
 800ed40:	18d1      	adds	r1, r2, r3
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed48:	f7ff ff5c 	bl	800ec04 <prvInsertTimerInActiveList>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d069      	beq.n	800ee26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed54:	6a1b      	ldr	r3, [r3, #32]
 800ed56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed60:	f003 0304 	and.w	r3, r3, #4
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d05e      	beq.n	800ee26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6c:	699b      	ldr	r3, [r3, #24]
 800ed6e:	441a      	add	r2, r3
 800ed70:	2300      	movs	r3, #0
 800ed72:	9300      	str	r3, [sp, #0]
 800ed74:	2300      	movs	r3, #0
 800ed76:	2100      	movs	r1, #0
 800ed78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed7a:	f7ff fe05 	bl	800e988 <xTimerGenericCommand>
 800ed7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed80:	6a3b      	ldr	r3, [r7, #32]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d14f      	bne.n	800ee26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ed86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	61bb      	str	r3, [r7, #24]
}
 800ed98:	bf00      	nop
 800ed9a:	e7fe      	b.n	800ed9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eda2:	f023 0301 	bic.w	r3, r3, #1
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800edae:	e03a      	b.n	800ee26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edb6:	f043 0301 	orr.w	r3, r3, #1
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edca:	699b      	ldr	r3, [r3, #24]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d10a      	bne.n	800ede6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800edd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	617b      	str	r3, [r7, #20]
}
 800ede2:	bf00      	nop
 800ede4:	e7fe      	b.n	800ede4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ede6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede8:	699a      	ldr	r2, [r3, #24]
 800edea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edec:	18d1      	adds	r1, r2, r3
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edf4:	f7ff ff06 	bl	800ec04 <prvInsertTimerInActiveList>
					break;
 800edf8:	e015      	b.n	800ee26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee00:	f003 0302 	and.w	r3, r3, #2
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d103      	bne.n	800ee10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ee08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee0a:	f000 fbe1 	bl	800f5d0 <vPortFree>
 800ee0e:	e00a      	b.n	800ee26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee16:	f023 0301 	bic.w	r3, r3, #1
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee22:	e000      	b.n	800ee26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ee24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee26:	4b08      	ldr	r3, [pc, #32]	; (800ee48 <prvProcessReceivedCommands+0x1c0>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	1d39      	adds	r1, r7, #4
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fe f8ea 	bl	800d008 <xQueueReceive>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	f47f af2a 	bne.w	800ec90 <prvProcessReceivedCommands+0x8>
	}
}
 800ee3c:	bf00      	nop
 800ee3e:	bf00      	nop
 800ee40:	3730      	adds	r7, #48	; 0x30
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	20000ae4 	.word	0x20000ae4

0800ee4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b088      	sub	sp, #32
 800ee50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee52:	e048      	b.n	800eee6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee54:	4b2d      	ldr	r3, [pc, #180]	; (800ef0c <prvSwitchTimerLists+0xc0>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee5e:	4b2b      	ldr	r3, [pc, #172]	; (800ef0c <prvSwitchTimerLists+0xc0>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	68db      	ldr	r3, [r3, #12]
 800ee66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fd fcd3 	bl	800c818 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee80:	f003 0304 	and.w	r3, r3, #4
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d02e      	beq.n	800eee6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	699b      	ldr	r3, [r3, #24]
 800ee8c:	693a      	ldr	r2, [r7, #16]
 800ee8e:	4413      	add	r3, r2
 800ee90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ee92:	68ba      	ldr	r2, [r7, #8]
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d90e      	bls.n	800eeb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	68fa      	ldr	r2, [r7, #12]
 800eea4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eea6:	4b19      	ldr	r3, [pc, #100]	; (800ef0c <prvSwitchTimerLists+0xc0>)
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	3304      	adds	r3, #4
 800eeae:	4619      	mov	r1, r3
 800eeb0:	4610      	mov	r0, r2
 800eeb2:	f7fd fc78 	bl	800c7a6 <vListInsert>
 800eeb6:	e016      	b.n	800eee6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eeb8:	2300      	movs	r3, #0
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	2300      	movs	r3, #0
 800eebe:	693a      	ldr	r2, [r7, #16]
 800eec0:	2100      	movs	r1, #0
 800eec2:	68f8      	ldr	r0, [r7, #12]
 800eec4:	f7ff fd60 	bl	800e988 <xTimerGenericCommand>
 800eec8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10a      	bne.n	800eee6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed4:	f383 8811 	msr	BASEPRI, r3
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	f3bf 8f4f 	dsb	sy
 800eee0:	603b      	str	r3, [r7, #0]
}
 800eee2:	bf00      	nop
 800eee4:	e7fe      	b.n	800eee4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eee6:	4b09      	ldr	r3, [pc, #36]	; (800ef0c <prvSwitchTimerLists+0xc0>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1b1      	bne.n	800ee54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eef0:	4b06      	ldr	r3, [pc, #24]	; (800ef0c <prvSwitchTimerLists+0xc0>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eef6:	4b06      	ldr	r3, [pc, #24]	; (800ef10 <prvSwitchTimerLists+0xc4>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a04      	ldr	r2, [pc, #16]	; (800ef0c <prvSwitchTimerLists+0xc0>)
 800eefc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eefe:	4a04      	ldr	r2, [pc, #16]	; (800ef10 <prvSwitchTimerLists+0xc4>)
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	6013      	str	r3, [r2, #0]
}
 800ef04:	bf00      	nop
 800ef06:	3718      	adds	r7, #24
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	20000adc 	.word	0x20000adc
 800ef10:	20000ae0 	.word	0x20000ae0

0800ef14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef1a:	f000 f96b 	bl	800f1f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef1e:	4b15      	ldr	r3, [pc, #84]	; (800ef74 <prvCheckForValidListAndQueue+0x60>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d120      	bne.n	800ef68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef26:	4814      	ldr	r0, [pc, #80]	; (800ef78 <prvCheckForValidListAndQueue+0x64>)
 800ef28:	f7fd fbec 	bl	800c704 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef2c:	4813      	ldr	r0, [pc, #76]	; (800ef7c <prvCheckForValidListAndQueue+0x68>)
 800ef2e:	f7fd fbe9 	bl	800c704 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef32:	4b13      	ldr	r3, [pc, #76]	; (800ef80 <prvCheckForValidListAndQueue+0x6c>)
 800ef34:	4a10      	ldr	r2, [pc, #64]	; (800ef78 <prvCheckForValidListAndQueue+0x64>)
 800ef36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef38:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <prvCheckForValidListAndQueue+0x70>)
 800ef3a:	4a10      	ldr	r2, [pc, #64]	; (800ef7c <prvCheckForValidListAndQueue+0x68>)
 800ef3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef3e:	2300      	movs	r3, #0
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	4b11      	ldr	r3, [pc, #68]	; (800ef88 <prvCheckForValidListAndQueue+0x74>)
 800ef44:	4a11      	ldr	r2, [pc, #68]	; (800ef8c <prvCheckForValidListAndQueue+0x78>)
 800ef46:	2110      	movs	r1, #16
 800ef48:	200a      	movs	r0, #10
 800ef4a:	f7fd fcf7 	bl	800c93c <xQueueGenericCreateStatic>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	4a08      	ldr	r2, [pc, #32]	; (800ef74 <prvCheckForValidListAndQueue+0x60>)
 800ef52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef54:	4b07      	ldr	r3, [pc, #28]	; (800ef74 <prvCheckForValidListAndQueue+0x60>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d005      	beq.n	800ef68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef5c:	4b05      	ldr	r3, [pc, #20]	; (800ef74 <prvCheckForValidListAndQueue+0x60>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	490b      	ldr	r1, [pc, #44]	; (800ef90 <prvCheckForValidListAndQueue+0x7c>)
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fe fc08 	bl	800d778 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef68:	f000 f974 	bl	800f254 <vPortExitCritical>
}
 800ef6c:	bf00      	nop
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	20000ae4 	.word	0x20000ae4
 800ef78:	20000ab4 	.word	0x20000ab4
 800ef7c:	20000ac8 	.word	0x20000ac8
 800ef80:	20000adc 	.word	0x20000adc
 800ef84:	20000ae0 	.word	0x20000ae0
 800ef88:	20000b90 	.word	0x20000b90
 800ef8c:	20000af0 	.word	0x20000af0
 800ef90:	0802f108 	.word	0x0802f108

0800ef94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ef94:	b480      	push	{r7}
 800ef96:	b085      	sub	sp, #20
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	3b04      	subs	r3, #4
 800efa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800efac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	3b04      	subs	r3, #4
 800efb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	f023 0201 	bic.w	r2, r3, #1
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3b04      	subs	r3, #4
 800efc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efc4:	4a0c      	ldr	r2, [pc, #48]	; (800eff8 <pxPortInitialiseStack+0x64>)
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	3b14      	subs	r3, #20
 800efce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	3b04      	subs	r3, #4
 800efda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f06f 0202 	mvn.w	r2, #2
 800efe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	3b20      	subs	r3, #32
 800efe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800efea:	68fb      	ldr	r3, [r7, #12]
}
 800efec:	4618      	mov	r0, r3
 800efee:	3714      	adds	r7, #20
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr
 800eff8:	0800effd 	.word	0x0800effd

0800effc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800effc:	b480      	push	{r7}
 800effe:	b085      	sub	sp, #20
 800f000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f002:	2300      	movs	r3, #0
 800f004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f006:	4b12      	ldr	r3, [pc, #72]	; (800f050 <prvTaskExitError+0x54>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00e:	d00a      	beq.n	800f026 <prvTaskExitError+0x2a>
	__asm volatile
 800f010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f014:	f383 8811 	msr	BASEPRI, r3
 800f018:	f3bf 8f6f 	isb	sy
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	60fb      	str	r3, [r7, #12]
}
 800f022:	bf00      	nop
 800f024:	e7fe      	b.n	800f024 <prvTaskExitError+0x28>
	__asm volatile
 800f026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02a:	f383 8811 	msr	BASEPRI, r3
 800f02e:	f3bf 8f6f 	isb	sy
 800f032:	f3bf 8f4f 	dsb	sy
 800f036:	60bb      	str	r3, [r7, #8]
}
 800f038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f03a:	bf00      	nop
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d0fc      	beq.n	800f03c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f042:	bf00      	nop
 800f044:	bf00      	nop
 800f046:	3714      	adds	r7, #20
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	20000014 	.word	0x20000014
	...

0800f060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f060:	4b07      	ldr	r3, [pc, #28]	; (800f080 <pxCurrentTCBConst2>)
 800f062:	6819      	ldr	r1, [r3, #0]
 800f064:	6808      	ldr	r0, [r1, #0]
 800f066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06a:	f380 8809 	msr	PSP, r0
 800f06e:	f3bf 8f6f 	isb	sy
 800f072:	f04f 0000 	mov.w	r0, #0
 800f076:	f380 8811 	msr	BASEPRI, r0
 800f07a:	4770      	bx	lr
 800f07c:	f3af 8000 	nop.w

0800f080 <pxCurrentTCBConst2>:
 800f080:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f084:	bf00      	nop
 800f086:	bf00      	nop

0800f088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f088:	4808      	ldr	r0, [pc, #32]	; (800f0ac <prvPortStartFirstTask+0x24>)
 800f08a:	6800      	ldr	r0, [r0, #0]
 800f08c:	6800      	ldr	r0, [r0, #0]
 800f08e:	f380 8808 	msr	MSP, r0
 800f092:	f04f 0000 	mov.w	r0, #0
 800f096:	f380 8814 	msr	CONTROL, r0
 800f09a:	b662      	cpsie	i
 800f09c:	b661      	cpsie	f
 800f09e:	f3bf 8f4f 	dsb	sy
 800f0a2:	f3bf 8f6f 	isb	sy
 800f0a6:	df00      	svc	0
 800f0a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f0aa:	bf00      	nop
 800f0ac:	e000ed08 	.word	0xe000ed08

0800f0b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f0b6:	4b46      	ldr	r3, [pc, #280]	; (800f1d0 <xPortStartScheduler+0x120>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4a46      	ldr	r2, [pc, #280]	; (800f1d4 <xPortStartScheduler+0x124>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d10a      	bne.n	800f0d6 <xPortStartScheduler+0x26>
	__asm volatile
 800f0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c4:	f383 8811 	msr	BASEPRI, r3
 800f0c8:	f3bf 8f6f 	isb	sy
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	613b      	str	r3, [r7, #16]
}
 800f0d2:	bf00      	nop
 800f0d4:	e7fe      	b.n	800f0d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f0d6:	4b3e      	ldr	r3, [pc, #248]	; (800f1d0 <xPortStartScheduler+0x120>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a3f      	ldr	r2, [pc, #252]	; (800f1d8 <xPortStartScheduler+0x128>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d10a      	bne.n	800f0f6 <xPortStartScheduler+0x46>
	__asm volatile
 800f0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e4:	f383 8811 	msr	BASEPRI, r3
 800f0e8:	f3bf 8f6f 	isb	sy
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	60fb      	str	r3, [r7, #12]
}
 800f0f2:	bf00      	nop
 800f0f4:	e7fe      	b.n	800f0f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0f6:	4b39      	ldr	r3, [pc, #228]	; (800f1dc <xPortStartScheduler+0x12c>)
 800f0f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	22ff      	movs	r2, #255	; 0xff
 800f106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f110:	78fb      	ldrb	r3, [r7, #3]
 800f112:	b2db      	uxtb	r3, r3
 800f114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f118:	b2da      	uxtb	r2, r3
 800f11a:	4b31      	ldr	r3, [pc, #196]	; (800f1e0 <xPortStartScheduler+0x130>)
 800f11c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f11e:	4b31      	ldr	r3, [pc, #196]	; (800f1e4 <xPortStartScheduler+0x134>)
 800f120:	2207      	movs	r2, #7
 800f122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f124:	e009      	b.n	800f13a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f126:	4b2f      	ldr	r3, [pc, #188]	; (800f1e4 <xPortStartScheduler+0x134>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	3b01      	subs	r3, #1
 800f12c:	4a2d      	ldr	r2, [pc, #180]	; (800f1e4 <xPortStartScheduler+0x134>)
 800f12e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f130:	78fb      	ldrb	r3, [r7, #3]
 800f132:	b2db      	uxtb	r3, r3
 800f134:	005b      	lsls	r3, r3, #1
 800f136:	b2db      	uxtb	r3, r3
 800f138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f13a:	78fb      	ldrb	r3, [r7, #3]
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f142:	2b80      	cmp	r3, #128	; 0x80
 800f144:	d0ef      	beq.n	800f126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f146:	4b27      	ldr	r3, [pc, #156]	; (800f1e4 <xPortStartScheduler+0x134>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	f1c3 0307 	rsb	r3, r3, #7
 800f14e:	2b04      	cmp	r3, #4
 800f150:	d00a      	beq.n	800f168 <xPortStartScheduler+0xb8>
	__asm volatile
 800f152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f156:	f383 8811 	msr	BASEPRI, r3
 800f15a:	f3bf 8f6f 	isb	sy
 800f15e:	f3bf 8f4f 	dsb	sy
 800f162:	60bb      	str	r3, [r7, #8]
}
 800f164:	bf00      	nop
 800f166:	e7fe      	b.n	800f166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f168:	4b1e      	ldr	r3, [pc, #120]	; (800f1e4 <xPortStartScheduler+0x134>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	021b      	lsls	r3, r3, #8
 800f16e:	4a1d      	ldr	r2, [pc, #116]	; (800f1e4 <xPortStartScheduler+0x134>)
 800f170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f172:	4b1c      	ldr	r3, [pc, #112]	; (800f1e4 <xPortStartScheduler+0x134>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f17a:	4a1a      	ldr	r2, [pc, #104]	; (800f1e4 <xPortStartScheduler+0x134>)
 800f17c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	b2da      	uxtb	r2, r3
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f186:	4b18      	ldr	r3, [pc, #96]	; (800f1e8 <xPortStartScheduler+0x138>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a17      	ldr	r2, [pc, #92]	; (800f1e8 <xPortStartScheduler+0x138>)
 800f18c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f192:	4b15      	ldr	r3, [pc, #84]	; (800f1e8 <xPortStartScheduler+0x138>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a14      	ldr	r2, [pc, #80]	; (800f1e8 <xPortStartScheduler+0x138>)
 800f198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f19c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f19e:	f000 f8dd 	bl	800f35c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f1a2:	4b12      	ldr	r3, [pc, #72]	; (800f1ec <xPortStartScheduler+0x13c>)
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f1a8:	f000 f8fc 	bl	800f3a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f1ac:	4b10      	ldr	r3, [pc, #64]	; (800f1f0 <xPortStartScheduler+0x140>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a0f      	ldr	r2, [pc, #60]	; (800f1f0 <xPortStartScheduler+0x140>)
 800f1b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f1b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1b8:	f7ff ff66 	bl	800f088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1bc:	f7fe ff48 	bl	800e050 <vTaskSwitchContext>
	prvTaskExitError();
 800f1c0:	f7ff ff1c 	bl	800effc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1c4:	2300      	movs	r3, #0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3718      	adds	r7, #24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	e000ed00 	.word	0xe000ed00
 800f1d4:	410fc271 	.word	0x410fc271
 800f1d8:	410fc270 	.word	0x410fc270
 800f1dc:	e000e400 	.word	0xe000e400
 800f1e0:	20000be0 	.word	0x20000be0
 800f1e4:	20000be4 	.word	0x20000be4
 800f1e8:	e000ed20 	.word	0xe000ed20
 800f1ec:	20000014 	.word	0x20000014
 800f1f0:	e000ef34 	.word	0xe000ef34

0800f1f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
	__asm volatile
 800f1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fe:	f383 8811 	msr	BASEPRI, r3
 800f202:	f3bf 8f6f 	isb	sy
 800f206:	f3bf 8f4f 	dsb	sy
 800f20a:	607b      	str	r3, [r7, #4]
}
 800f20c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f20e:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <vPortEnterCritical+0x58>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	3301      	adds	r3, #1
 800f214:	4a0d      	ldr	r2, [pc, #52]	; (800f24c <vPortEnterCritical+0x58>)
 800f216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f218:	4b0c      	ldr	r3, [pc, #48]	; (800f24c <vPortEnterCritical+0x58>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d10f      	bne.n	800f240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f220:	4b0b      	ldr	r3, [pc, #44]	; (800f250 <vPortEnterCritical+0x5c>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	b2db      	uxtb	r3, r3
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00a      	beq.n	800f240 <vPortEnterCritical+0x4c>
	__asm volatile
 800f22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22e:	f383 8811 	msr	BASEPRI, r3
 800f232:	f3bf 8f6f 	isb	sy
 800f236:	f3bf 8f4f 	dsb	sy
 800f23a:	603b      	str	r3, [r7, #0]
}
 800f23c:	bf00      	nop
 800f23e:	e7fe      	b.n	800f23e <vPortEnterCritical+0x4a>
	}
}
 800f240:	bf00      	nop
 800f242:	370c      	adds	r7, #12
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	20000014 	.word	0x20000014
 800f250:	e000ed04 	.word	0xe000ed04

0800f254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f25a:	4b12      	ldr	r3, [pc, #72]	; (800f2a4 <vPortExitCritical+0x50>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d10a      	bne.n	800f278 <vPortExitCritical+0x24>
	__asm volatile
 800f262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f266:	f383 8811 	msr	BASEPRI, r3
 800f26a:	f3bf 8f6f 	isb	sy
 800f26e:	f3bf 8f4f 	dsb	sy
 800f272:	607b      	str	r3, [r7, #4]
}
 800f274:	bf00      	nop
 800f276:	e7fe      	b.n	800f276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f278:	4b0a      	ldr	r3, [pc, #40]	; (800f2a4 <vPortExitCritical+0x50>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	3b01      	subs	r3, #1
 800f27e:	4a09      	ldr	r2, [pc, #36]	; (800f2a4 <vPortExitCritical+0x50>)
 800f280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f282:	4b08      	ldr	r3, [pc, #32]	; (800f2a4 <vPortExitCritical+0x50>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d105      	bne.n	800f296 <vPortExitCritical+0x42>
 800f28a:	2300      	movs	r3, #0
 800f28c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	f383 8811 	msr	BASEPRI, r3
}
 800f294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f296:	bf00      	nop
 800f298:	370c      	adds	r7, #12
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	20000014 	.word	0x20000014
	...

0800f2b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2b0:	f3ef 8009 	mrs	r0, PSP
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	4b15      	ldr	r3, [pc, #84]	; (800f310 <pxCurrentTCBConst>)
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	f01e 0f10 	tst.w	lr, #16
 800f2c0:	bf08      	it	eq
 800f2c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ca:	6010      	str	r0, [r2, #0]
 800f2cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2d4:	f380 8811 	msr	BASEPRI, r0
 800f2d8:	f3bf 8f4f 	dsb	sy
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f7fe feb6 	bl	800e050 <vTaskSwitchContext>
 800f2e4:	f04f 0000 	mov.w	r0, #0
 800f2e8:	f380 8811 	msr	BASEPRI, r0
 800f2ec:	bc09      	pop	{r0, r3}
 800f2ee:	6819      	ldr	r1, [r3, #0]
 800f2f0:	6808      	ldr	r0, [r1, #0]
 800f2f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f6:	f01e 0f10 	tst.w	lr, #16
 800f2fa:	bf08      	it	eq
 800f2fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f300:	f380 8809 	msr	PSP, r0
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	f3af 8000 	nop.w

0800f310 <pxCurrentTCBConst>:
 800f310:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f314:	bf00      	nop
 800f316:	bf00      	nop

0800f318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
	__asm volatile
 800f31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f322:	f383 8811 	msr	BASEPRI, r3
 800f326:	f3bf 8f6f 	isb	sy
 800f32a:	f3bf 8f4f 	dsb	sy
 800f32e:	607b      	str	r3, [r7, #4]
}
 800f330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f332:	f7fe fdd3 	bl	800dedc <xTaskIncrementTick>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d003      	beq.n	800f344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f33c:	4b06      	ldr	r3, [pc, #24]	; (800f358 <xPortSysTickHandler+0x40>)
 800f33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	2300      	movs	r3, #0
 800f346:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	f383 8811 	msr	BASEPRI, r3
}
 800f34e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f350:	bf00      	nop
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	e000ed04 	.word	0xe000ed04

0800f35c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f35c:	b480      	push	{r7}
 800f35e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f360:	4b0b      	ldr	r3, [pc, #44]	; (800f390 <vPortSetupTimerInterrupt+0x34>)
 800f362:	2200      	movs	r2, #0
 800f364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f366:	4b0b      	ldr	r3, [pc, #44]	; (800f394 <vPortSetupTimerInterrupt+0x38>)
 800f368:	2200      	movs	r2, #0
 800f36a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f36c:	4b0a      	ldr	r3, [pc, #40]	; (800f398 <vPortSetupTimerInterrupt+0x3c>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a0a      	ldr	r2, [pc, #40]	; (800f39c <vPortSetupTimerInterrupt+0x40>)
 800f372:	fba2 2303 	umull	r2, r3, r2, r3
 800f376:	099b      	lsrs	r3, r3, #6
 800f378:	4a09      	ldr	r2, [pc, #36]	; (800f3a0 <vPortSetupTimerInterrupt+0x44>)
 800f37a:	3b01      	subs	r3, #1
 800f37c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f37e:	4b04      	ldr	r3, [pc, #16]	; (800f390 <vPortSetupTimerInterrupt+0x34>)
 800f380:	2207      	movs	r2, #7
 800f382:	601a      	str	r2, [r3, #0]
}
 800f384:	bf00      	nop
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	e000e010 	.word	0xe000e010
 800f394:	e000e018 	.word	0xe000e018
 800f398:	20000008 	.word	0x20000008
 800f39c:	10624dd3 	.word	0x10624dd3
 800f3a0:	e000e014 	.word	0xe000e014

0800f3a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f3a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f3b4 <vPortEnableVFP+0x10>
 800f3a8:	6801      	ldr	r1, [r0, #0]
 800f3aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f3ae:	6001      	str	r1, [r0, #0]
 800f3b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3b2:	bf00      	nop
 800f3b4:	e000ed88 	.word	0xe000ed88

0800f3b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f3be:	f3ef 8305 	mrs	r3, IPSR
 800f3c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2b0f      	cmp	r3, #15
 800f3c8:	d914      	bls.n	800f3f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3ca:	4a17      	ldr	r2, [pc, #92]	; (800f428 <vPortValidateInterruptPriority+0x70>)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	4413      	add	r3, r2
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3d4:	4b15      	ldr	r3, [pc, #84]	; (800f42c <vPortValidateInterruptPriority+0x74>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	7afa      	ldrb	r2, [r7, #11]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d20a      	bcs.n	800f3f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e2:	f383 8811 	msr	BASEPRI, r3
 800f3e6:	f3bf 8f6f 	isb	sy
 800f3ea:	f3bf 8f4f 	dsb	sy
 800f3ee:	607b      	str	r3, [r7, #4]
}
 800f3f0:	bf00      	nop
 800f3f2:	e7fe      	b.n	800f3f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f3f4:	4b0e      	ldr	r3, [pc, #56]	; (800f430 <vPortValidateInterruptPriority+0x78>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f3fc:	4b0d      	ldr	r3, [pc, #52]	; (800f434 <vPortValidateInterruptPriority+0x7c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	429a      	cmp	r2, r3
 800f402:	d90a      	bls.n	800f41a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	603b      	str	r3, [r7, #0]
}
 800f416:	bf00      	nop
 800f418:	e7fe      	b.n	800f418 <vPortValidateInterruptPriority+0x60>
	}
 800f41a:	bf00      	nop
 800f41c:	3714      	adds	r7, #20
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	e000e3f0 	.word	0xe000e3f0
 800f42c:	20000be0 	.word	0x20000be0
 800f430:	e000ed0c 	.word	0xe000ed0c
 800f434:	20000be4 	.word	0x20000be4

0800f438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b08a      	sub	sp, #40	; 0x28
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f440:	2300      	movs	r3, #0
 800f442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f444:	f7fe fc7c 	bl	800dd40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f448:	4b5b      	ldr	r3, [pc, #364]	; (800f5b8 <pvPortMalloc+0x180>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d101      	bne.n	800f454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f450:	f000 f920 	bl	800f694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f454:	4b59      	ldr	r3, [pc, #356]	; (800f5bc <pvPortMalloc+0x184>)
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4013      	ands	r3, r2
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f040 8093 	bne.w	800f588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d01d      	beq.n	800f4a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f468:	2208      	movs	r2, #8
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	4413      	add	r3, r2
 800f46e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f003 0307 	and.w	r3, r3, #7
 800f476:	2b00      	cmp	r3, #0
 800f478:	d014      	beq.n	800f4a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f023 0307 	bic.w	r3, r3, #7
 800f480:	3308      	adds	r3, #8
 800f482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f003 0307 	and.w	r3, r3, #7
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00a      	beq.n	800f4a4 <pvPortMalloc+0x6c>
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f492:	f383 8811 	msr	BASEPRI, r3
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	f3bf 8f4f 	dsb	sy
 800f49e:	617b      	str	r3, [r7, #20]
}
 800f4a0:	bf00      	nop
 800f4a2:	e7fe      	b.n	800f4a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d06e      	beq.n	800f588 <pvPortMalloc+0x150>
 800f4aa:	4b45      	ldr	r3, [pc, #276]	; (800f5c0 <pvPortMalloc+0x188>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d869      	bhi.n	800f588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f4b4:	4b43      	ldr	r3, [pc, #268]	; (800f5c4 <pvPortMalloc+0x18c>)
 800f4b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f4b8:	4b42      	ldr	r3, [pc, #264]	; (800f5c4 <pvPortMalloc+0x18c>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4be:	e004      	b.n	800f4ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d903      	bls.n	800f4dc <pvPortMalloc+0xa4>
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1f1      	bne.n	800f4c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4dc:	4b36      	ldr	r3, [pc, #216]	; (800f5b8 <pvPortMalloc+0x180>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d050      	beq.n	800f588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4e6:	6a3b      	ldr	r3, [r7, #32]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	2208      	movs	r2, #8
 800f4ec:	4413      	add	r3, r2
 800f4ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	6a3b      	ldr	r3, [r7, #32]
 800f4f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	685a      	ldr	r2, [r3, #4]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	1ad2      	subs	r2, r2, r3
 800f500:	2308      	movs	r3, #8
 800f502:	005b      	lsls	r3, r3, #1
 800f504:	429a      	cmp	r2, r3
 800f506:	d91f      	bls.n	800f548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4413      	add	r3, r2
 800f50e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	f003 0307 	and.w	r3, r3, #7
 800f516:	2b00      	cmp	r3, #0
 800f518:	d00a      	beq.n	800f530 <pvPortMalloc+0xf8>
	__asm volatile
 800f51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	613b      	str	r3, [r7, #16]
}
 800f52c:	bf00      	nop
 800f52e:	e7fe      	b.n	800f52e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f532:	685a      	ldr	r2, [r3, #4]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	1ad2      	subs	r2, r2, r3
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f542:	69b8      	ldr	r0, [r7, #24]
 800f544:	f000 f908 	bl	800f758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f548:	4b1d      	ldr	r3, [pc, #116]	; (800f5c0 <pvPortMalloc+0x188>)
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	4a1b      	ldr	r2, [pc, #108]	; (800f5c0 <pvPortMalloc+0x188>)
 800f554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f556:	4b1a      	ldr	r3, [pc, #104]	; (800f5c0 <pvPortMalloc+0x188>)
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	4b1b      	ldr	r3, [pc, #108]	; (800f5c8 <pvPortMalloc+0x190>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d203      	bcs.n	800f56a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f562:	4b17      	ldr	r3, [pc, #92]	; (800f5c0 <pvPortMalloc+0x188>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4a18      	ldr	r2, [pc, #96]	; (800f5c8 <pvPortMalloc+0x190>)
 800f568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56c:	685a      	ldr	r2, [r3, #4]
 800f56e:	4b13      	ldr	r3, [pc, #76]	; (800f5bc <pvPortMalloc+0x184>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	431a      	orrs	r2, r3
 800f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57a:	2200      	movs	r2, #0
 800f57c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f57e:	4b13      	ldr	r3, [pc, #76]	; (800f5cc <pvPortMalloc+0x194>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	3301      	adds	r3, #1
 800f584:	4a11      	ldr	r2, [pc, #68]	; (800f5cc <pvPortMalloc+0x194>)
 800f586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f588:	f7fe fbe8 	bl	800dd5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	f003 0307 	and.w	r3, r3, #7
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00a      	beq.n	800f5ac <pvPortMalloc+0x174>
	__asm volatile
 800f596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59a:	f383 8811 	msr	BASEPRI, r3
 800f59e:	f3bf 8f6f 	isb	sy
 800f5a2:	f3bf 8f4f 	dsb	sy
 800f5a6:	60fb      	str	r3, [r7, #12]
}
 800f5a8:	bf00      	nop
 800f5aa:	e7fe      	b.n	800f5aa <pvPortMalloc+0x172>
	return pvReturn;
 800f5ac:	69fb      	ldr	r3, [r7, #28]
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3728      	adds	r7, #40	; 0x28
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	20007ab8 	.word	0x20007ab8
 800f5bc:	20007acc 	.word	0x20007acc
 800f5c0:	20007abc 	.word	0x20007abc
 800f5c4:	20007ab0 	.word	0x20007ab0
 800f5c8:	20007ac0 	.word	0x20007ac0
 800f5cc:	20007ac4 	.word	0x20007ac4

0800f5d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b086      	sub	sp, #24
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d04d      	beq.n	800f67e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5e2:	2308      	movs	r3, #8
 800f5e4:	425b      	negs	r3, r3
 800f5e6:	697a      	ldr	r2, [r7, #20]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	685a      	ldr	r2, [r3, #4]
 800f5f4:	4b24      	ldr	r3, [pc, #144]	; (800f688 <vPortFree+0xb8>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4013      	ands	r3, r2
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d10a      	bne.n	800f614 <vPortFree+0x44>
	__asm volatile
 800f5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	60fb      	str	r3, [r7, #12]
}
 800f610:	bf00      	nop
 800f612:	e7fe      	b.n	800f612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00a      	beq.n	800f632 <vPortFree+0x62>
	__asm volatile
 800f61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f620:	f383 8811 	msr	BASEPRI, r3
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	60bb      	str	r3, [r7, #8]
}
 800f62e:	bf00      	nop
 800f630:	e7fe      	b.n	800f630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	685a      	ldr	r2, [r3, #4]
 800f636:	4b14      	ldr	r3, [pc, #80]	; (800f688 <vPortFree+0xb8>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4013      	ands	r3, r2
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d01e      	beq.n	800f67e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d11a      	bne.n	800f67e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	685a      	ldr	r2, [r3, #4]
 800f64c:	4b0e      	ldr	r3, [pc, #56]	; (800f688 <vPortFree+0xb8>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	43db      	mvns	r3, r3
 800f652:	401a      	ands	r2, r3
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f658:	f7fe fb72 	bl	800dd40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	685a      	ldr	r2, [r3, #4]
 800f660:	4b0a      	ldr	r3, [pc, #40]	; (800f68c <vPortFree+0xbc>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	4413      	add	r3, r2
 800f666:	4a09      	ldr	r2, [pc, #36]	; (800f68c <vPortFree+0xbc>)
 800f668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f66a:	6938      	ldr	r0, [r7, #16]
 800f66c:	f000 f874 	bl	800f758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f670:	4b07      	ldr	r3, [pc, #28]	; (800f690 <vPortFree+0xc0>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	3301      	adds	r3, #1
 800f676:	4a06      	ldr	r2, [pc, #24]	; (800f690 <vPortFree+0xc0>)
 800f678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f67a:	f7fe fb6f 	bl	800dd5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f67e:	bf00      	nop
 800f680:	3718      	adds	r7, #24
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	20007acc 	.word	0x20007acc
 800f68c:	20007abc 	.word	0x20007abc
 800f690:	20007ac8 	.word	0x20007ac8

0800f694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f69a:	f646 63c8 	movw	r3, #28360	; 0x6ec8
 800f69e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f6a0:	4b27      	ldr	r3, [pc, #156]	; (800f740 <prvHeapInit+0xac>)
 800f6a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f003 0307 	and.w	r3, r3, #7
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00c      	beq.n	800f6c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	3307      	adds	r3, #7
 800f6b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f023 0307 	bic.w	r3, r3, #7
 800f6ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f6bc:	68ba      	ldr	r2, [r7, #8]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	1ad3      	subs	r3, r2, r3
 800f6c2:	4a1f      	ldr	r2, [pc, #124]	; (800f740 <prvHeapInit+0xac>)
 800f6c4:	4413      	add	r3, r2
 800f6c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6cc:	4a1d      	ldr	r2, [pc, #116]	; (800f744 <prvHeapInit+0xb0>)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6d2:	4b1c      	ldr	r3, [pc, #112]	; (800f744 <prvHeapInit+0xb0>)
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	68ba      	ldr	r2, [r7, #8]
 800f6dc:	4413      	add	r3, r2
 800f6de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6e0:	2208      	movs	r2, #8
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	1a9b      	subs	r3, r3, r2
 800f6e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	f023 0307 	bic.w	r3, r3, #7
 800f6ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	4a15      	ldr	r2, [pc, #84]	; (800f748 <prvHeapInit+0xb4>)
 800f6f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f6f6:	4b14      	ldr	r3, [pc, #80]	; (800f748 <prvHeapInit+0xb4>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6fe:	4b12      	ldr	r3, [pc, #72]	; (800f748 <prvHeapInit+0xb4>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2200      	movs	r2, #0
 800f704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	1ad2      	subs	r2, r2, r3
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f714:	4b0c      	ldr	r3, [pc, #48]	; (800f748 <prvHeapInit+0xb4>)
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	4a0a      	ldr	r2, [pc, #40]	; (800f74c <prvHeapInit+0xb8>)
 800f722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	4a09      	ldr	r2, [pc, #36]	; (800f750 <prvHeapInit+0xbc>)
 800f72a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f72c:	4b09      	ldr	r3, [pc, #36]	; (800f754 <prvHeapInit+0xc0>)
 800f72e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f732:	601a      	str	r2, [r3, #0]
}
 800f734:	bf00      	nop
 800f736:	3714      	adds	r7, #20
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr
 800f740:	20000be8 	.word	0x20000be8
 800f744:	20007ab0 	.word	0x20007ab0
 800f748:	20007ab8 	.word	0x20007ab8
 800f74c:	20007ac0 	.word	0x20007ac0
 800f750:	20007abc 	.word	0x20007abc
 800f754:	20007acc 	.word	0x20007acc

0800f758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f760:	4b28      	ldr	r3, [pc, #160]	; (800f804 <prvInsertBlockIntoFreeList+0xac>)
 800f762:	60fb      	str	r3, [r7, #12]
 800f764:	e002      	b.n	800f76c <prvInsertBlockIntoFreeList+0x14>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	429a      	cmp	r2, r3
 800f774:	d8f7      	bhi.n	800f766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	4413      	add	r3, r2
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	429a      	cmp	r2, r3
 800f786:	d108      	bne.n	800f79a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	685a      	ldr	r2, [r3, #4]
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	441a      	add	r2, r3
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	441a      	add	r2, r3
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d118      	bne.n	800f7e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	4b15      	ldr	r3, [pc, #84]	; (800f808 <prvInsertBlockIntoFreeList+0xb0>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d00d      	beq.n	800f7d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	685a      	ldr	r2, [r3, #4]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	441a      	add	r2, r3
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	e008      	b.n	800f7e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7d6:	4b0c      	ldr	r3, [pc, #48]	; (800f808 <prvInsertBlockIntoFreeList+0xb0>)
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	601a      	str	r2, [r3, #0]
 800f7de:	e003      	b.n	800f7e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d002      	beq.n	800f7f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7f6:	bf00      	nop
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	20007ab0 	.word	0x20007ab0
 800f808:	20007ab8 	.word	0x20007ab8

0800f80c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800f810:	f006 fe9a 	bl	8016548 <touchgfx_init>
}
 800f814:	bf00      	nop
 800f816:	bd80      	pop	{r7, pc}

0800f818 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800f820:	f006 febc 	bl	801659c <touchgfx_taskEntry>
}
 800f824:	bf00      	nop
 800f826:	3708      	adds	r7, #8
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
    {
 800f834:	4a04      	ldr	r2, [pc, #16]	; (800f848 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	601a      	str	r2, [r3, #0]
    }
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4618      	mov	r0, r3
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr
 800f848:	0802fdd4 	.word	0x0802fdd4

0800f84c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
    }
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7ff ffe9 	bl	800f82c <_ZN8touchgfx12FontProviderD1Ev>
 800f85a:	2104      	movs	r1, #4
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f01d fcd8 	bl	802d212 <_ZdlPvj>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	4618      	mov	r0, r3
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	460b      	mov	r3, r1
 800f876:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f878:	887b      	ldrh	r3, [r7, #2]
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d010      	beq.n	800f8a0 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800f87e:	2b02      	cmp	r3, #2
 800f880:	dc13      	bgt.n	800f8aa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800f882:	2b00      	cmp	r3, #0
 800f884:	d002      	beq.n	800f88c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800f886:	2b01      	cmp	r3, #1
 800f888:	d005      	beq.n	800f896 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800f88a:	e00e      	b.n	800f8aa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::SENSOR_VALUES:
        // bahnschrift_55_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f88c:	f004 fe32 	bl	80144f4 <_ZN17TypedTextDatabase8getFontsEv>
 800f890:	4603      	mov	r3, r0
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	e00a      	b.n	800f8ac <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_LABEL:
        // bahnschrift_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f896:	f004 fe2d 	bl	80144f4 <_ZN17TypedTextDatabase8getFontsEv>
 800f89a:	4603      	mov	r3, r0
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	e005      	b.n	800f8ac <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_UNIT:
        // bahnschrift_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f8a0:	f004 fe28 	bl	80144f4 <_ZN17TypedTextDatabase8getFontsEv>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	e000      	b.n	800f8ac <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800f8aa:	2300      	movs	r3, #0
    }
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SENSOR_LABEL = 1;  // bahnschrift_20_4bpp
    static const touchgfx::FontId SENSOR_UNIT = 1;   // bahnschrift_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	4a05      	ldr	r2, [pc, #20]	; (800f8d4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	601a      	str	r2, [r3, #0]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7ff ffb1 	bl	800f82c <_ZN8touchgfx12FontProviderD1Ev>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	0802fdc0 	.word	0x0802fdc0

0800f8d8 <_ZN23ApplicationFontProviderD0Ev>:
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7ff ffe7 	bl	800f8b4 <_ZN23ApplicationFontProviderD1Ev>
 800f8e6:	2104      	movs	r1, #4
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f01d fc92 	bl	802d212 <_ZdlPvj>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
    {
 800f900:	4a04      	ldr	r2, [pc, #16]	; (800f914 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	601a      	str	r2, [r3, #0]
    }
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4618      	mov	r0, r3
 800f90a:	370c      	adds	r7, #12
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr
 800f914:	08030198 	.word	0x08030198

0800f918 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
    }
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7ff ffe9 	bl	800f8f8 <_ZN8touchgfx4FontD1Ev>
 800f926:	2110      	movs	r1, #16
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f01d fc72 	bl	802d212 <_ZdlPvj>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4618      	mov	r0, r3
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f938:	b590      	push	{r4, r7, lr}
 800f93a:	b087      	sub	sp, #28
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	460b      	mov	r3, r1
 800f942:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f944:	887b      	ldrh	r3, [r7, #2]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d101      	bne.n	800f94e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	e010      	b.n	800f970 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f94e:	2300      	movs	r3, #0
 800f950:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f952:	2300      	movs	r3, #0
 800f954:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	3308      	adds	r3, #8
 800f95c:	681c      	ldr	r4, [r3, #0]
 800f95e:	f107 030f 	add.w	r3, r7, #15
 800f962:	f107 0210 	add.w	r2, r7, #16
 800f966:	8879      	ldrh	r1, [r7, #2]
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	47a0      	blx	r4
 800f96c:	6178      	str	r0, [r7, #20]
        return glyph;
 800f96e:	697b      	ldr	r3, [r7, #20]
    }
 800f970:	4618      	mov	r0, r3
 800f972:	371c      	adds	r7, #28
 800f974:	46bd      	mov	sp, r7
 800f976:	bd90      	pop	{r4, r7, pc}

0800f978 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	895b      	ldrh	r3, [r3, #10]
    }
 800f984:	4618      	mov	r0, r3
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	899b      	ldrh	r3, [r3, #12]
    }
 800f99c:	4618      	mov	r0, r3
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	889b      	ldrh	r3, [r3, #4]
    }
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	370c      	adds	r7, #12
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr

0800f9c0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	889a      	ldrh	r2, [r3, #4]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	799b      	ldrb	r3, [r3, #6]
 800f9d0:	b29b      	uxth	r3, r3
 800f9d2:	4413      	add	r3, r2
 800f9d4:	b29b      	uxth	r3, r3
    }
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	370c      	adds	r7, #12
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr

0800f9e2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800f9e2:	b480      	push	{r7}
 800f9e4:	b083      	sub	sp, #12
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	79db      	ldrb	r3, [r3, #7]
 800f9ee:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800f9f2:	b2db      	uxtb	r3, r3
    }
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	370c      	adds	r7, #12
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr

0800fa00 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	79db      	ldrb	r3, [r3, #7]
 800fa0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fa10:	b2db      	uxtb	r3, r3
    }
 800fa12:	4618      	mov	r0, r3
 800fa14:	370c      	adds	r7, #12
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr
	...

0800fa20 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	4a05      	ldr	r2, [pc, #20]	; (800fa40 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	601a      	str	r2, [r3, #0]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7ff ff61 	bl	800f8f8 <_ZN8touchgfx4FontD1Ev>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	08031f58 	.word	0x08031f58

0800fa44 <_ZN8touchgfx9ConstFontD0Ev>:
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f7ff ffe7 	bl	800fa20 <_ZN8touchgfx9ConstFontD1Ev>
 800fa52:	2118      	movs	r1, #24
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f01d fbdc 	bl	802d212 <_ZdlPvj>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3708      	adds	r7, #8
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	4a05      	ldr	r2, [pc, #20]	; (800fa84 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	601a      	str	r2, [r3, #0]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7ff ffd3 	bl	800fa20 <_ZN8touchgfx9ConstFontD1Ev>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	0802fdf8 	.word	0x0802fdf8

0800fa88 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7ff ffe7 	bl	800fa64 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fa96:	2128      	movs	r1, #40	; 0x28
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f01d fbba 	bl	802d212 <_ZdlPvj>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800faa8:	b480      	push	{r7}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
    {
 800fab0:	4a04      	ldr	r2, [pc, #16]	; (800fac4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	601a      	str	r2, [r3, #0]
    }
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4618      	mov	r0, r3
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	0802fde8 	.word	0x0802fde8

0800fac8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
    }
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7ff ffe9 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
 800fad6:	2108      	movs	r1, #8
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f01d fb9a 	bl	802d212 <_ZdlPvj>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4618      	mov	r0, r3
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6a1b      	ldr	r3, [r3, #32]
    }
 800faf4:	4618      	mov	r0, r3
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	370c      	adds	r7, #12
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b08c      	sub	sp, #48	; 0x30
 800fb1c:	af08      	add	r7, sp, #32
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	4611      	mov	r1, r2
 800fb24:	461a      	mov	r2, r3
 800fb26:	460b      	mov	r3, r1
 800fb28:	80fb      	strh	r3, [r7, #6]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	88b9      	ldrh	r1, [r7, #4]
 800fb32:	88fa      	ldrh	r2, [r7, #6]
 800fb34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fb36:	9306      	str	r3, [sp, #24]
 800fb38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb3a:	9305      	str	r3, [sp, #20]
 800fb3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb40:	9304      	str	r3, [sp, #16]
 800fb42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb46:	9303      	str	r3, [sp, #12]
 800fb48:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb4c:	9302      	str	r3, [sp, #8]
 800fb4e:	7f3b      	ldrb	r3, [r7, #28]
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	7e3b      	ldrb	r3, [r7, #24]
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	460b      	mov	r3, r1
 800fb58:	68b9      	ldr	r1, [r7, #8]
 800fb5a:	f00d facf 	bl	801d0fc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800fb5e:	4a0a      	ldr	r2, [pc, #40]	; (800fb88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	601a      	str	r2, [r3, #0]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb68:	619a      	str	r2, [r3, #24]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb6e:	61da      	str	r2, [r3, #28]
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb74:	621a      	str	r2, [r3, #32]
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb7a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	0802fdf8 	.word	0x0802fdf8

0800fb8c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b085      	sub	sp, #20
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	699b      	ldr	r3, [r3, #24]
 800fb9a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	889b      	ldrh	r3, [r3, #4]
 800fba0:	0adb      	lsrs	r3, r3, #11
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	4413      	add	r3, r2
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4413      	add	r3, r2
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3714      	adds	r7, #20
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr

0800fbbe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800fbbe:	b480      	push	{r7}
 800fbc0:	b089      	sub	sp, #36	; 0x24
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	60f8      	str	r0, [r7, #12]
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	607a      	str	r2, [r7, #4]
 800fbca:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d003      	beq.n	800fbda <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	7b1b      	ldrb	r3, [r3, #12]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d101      	bne.n	800fbde <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	e030      	b.n	800fc40 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	69da      	ldr	r2, [r3, #28]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	7b5b      	ldrb	r3, [r3, #13]
 800fbea:	021b      	lsls	r3, r3, #8
 800fbec:	b21b      	sxth	r3, r3
 800fbee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fbf2:	b219      	sxth	r1, r3
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	7adb      	ldrb	r3, [r3, #11]
 800fbf8:	b21b      	sxth	r3, r3
 800fbfa:	430b      	orrs	r3, r1
 800fbfc:	b21b      	sxth	r3, r3
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	4413      	add	r3, r2
 800fc04:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	7b1b      	ldrb	r3, [r3, #12]
 800fc0a:	837b      	strh	r3, [r7, #26]
 800fc0c:	8b7b      	ldrh	r3, [r7, #26]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d015      	beq.n	800fc3e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	881b      	ldrh	r3, [r3, #0]
 800fc16:	897a      	ldrh	r2, [r7, #10]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d103      	bne.n	800fc24 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800fc22:	e00d      	b.n	800fc40 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	881b      	ldrh	r3, [r3, #0]
 800fc28:	897a      	ldrh	r2, [r7, #10]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d306      	bcc.n	800fc3c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fc2e:	8b7b      	ldrh	r3, [r7, #26]
 800fc30:	3b01      	subs	r3, #1
 800fc32:	837b      	strh	r3, [r7, #26]
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	3304      	adds	r3, #4
 800fc38:	61fb      	str	r3, [r7, #28]
 800fc3a:	e7e7      	b.n	800fc0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800fc3c:	bf00      	nop
        }
    }
    return 0;
 800fc3e:	2300      	movs	r3, #0
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3724      	adds	r7, #36	; 0x24
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp()
{
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	4801      	ldr	r0, [pc, #4]	; (800fc58 <__tcf_0+0xc>)
 800fc52:	f7ff ff07 	bl	800fa64 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	20007ad0 	.word	0x20007ad0

0800fc5c <_Z27getFont_bahnschrift_20_4bppv>:
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b08c      	sub	sp, #48	; 0x30
 800fc60:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800fc62:	4b1f      	ldr	r3, [pc, #124]	; (800fce0 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	f3bf 8f5b 	dmb	ish
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	f003 0301 	and.w	r3, r3, #1
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	bf0c      	ite	eq
 800fc74:	2301      	moveq	r3, #1
 800fc76:	2300      	movne	r3, #0
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d02c      	beq.n	800fcd8 <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800fc7e:	4818      	ldr	r0, [pc, #96]	; (800fce0 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800fc80:	f01d fac9 	bl	802d216 <__cxa_guard_acquire>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	bf14      	ite	ne
 800fc8a:	2301      	movne	r3, #1
 800fc8c:	2300      	moveq	r3, #0
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d021      	beq.n	800fcd8 <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800fc94:	2300      	movs	r3, #0
 800fc96:	930a      	str	r3, [sp, #40]	; 0x28
 800fc98:	2300      	movs	r3, #0
 800fc9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	9308      	str	r3, [sp, #32]
 800fca0:	2300      	movs	r3, #0
 800fca2:	9307      	str	r3, [sp, #28]
 800fca4:	4b0f      	ldr	r3, [pc, #60]	; (800fce4 <_Z27getFont_bahnschrift_20_4bppv+0x88>)
 800fca6:	9306      	str	r3, [sp, #24]
 800fca8:	4b0f      	ldr	r3, [pc, #60]	; (800fce8 <_Z27getFont_bahnschrift_20_4bppv+0x8c>)
 800fcaa:	9305      	str	r3, [sp, #20]
 800fcac:	2301      	movs	r3, #1
 800fcae:	9304      	str	r3, [sp, #16]
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	9303      	str	r3, [sp, #12]
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	9302      	str	r3, [sp, #8]
 800fcb8:	2304      	movs	r3, #4
 800fcba:	9301      	str	r3, [sp, #4]
 800fcbc:	2304      	movs	r3, #4
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	2314      	movs	r3, #20
 800fcc2:	2246      	movs	r2, #70	; 0x46
 800fcc4:	4909      	ldr	r1, [pc, #36]	; (800fcec <_Z27getFont_bahnschrift_20_4bppv+0x90>)
 800fcc6:	480a      	ldr	r0, [pc, #40]	; (800fcf0 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
 800fcc8:	f7ff ff26 	bl	800fb18 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fccc:	4804      	ldr	r0, [pc, #16]	; (800fce0 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800fcce:	f01d faae 	bl	802d22e <__cxa_guard_release>
 800fcd2:	4808      	ldr	r0, [pc, #32]	; (800fcf4 <_Z27getFont_bahnschrift_20_4bppv+0x98>)
 800fcd4:	f01e f8da 	bl	802de8c <atexit>
    return bahnschrift_20_4bpp;
 800fcd8:	4b05      	ldr	r3, [pc, #20]	; (800fcf0 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	20007af8 	.word	0x20007af8
 800fce4:	0803cc8c 	.word	0x0803cc8c
 800fce8:	0803cc94 	.word	0x0803cc94
 800fcec:	0803c4e4 	.word	0x0803c4e4
 800fcf0:	20007ad0 	.word	0x20007ad0
 800fcf4:	0800fc4d 	.word	0x0800fc4d

0800fcf8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_55_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_55_4bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_55_4bpp()
{
    static touchgfx::GeneratedFont bahnschrift_55_4bpp(glyphs_bahnschrift_55_4bpp, 70, 55, 11, 4, 1, 1, 1, unicodes_bahnschrift_55_4bpp, kerning_bahnschrift_55_4bpp, 0, 0, 0, 0);
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	af00      	add	r7, sp, #0
 800fcfc:	4801      	ldr	r0, [pc, #4]	; (800fd04 <__tcf_0+0xc>)
 800fcfe:	f7ff feb1 	bl	800fa64 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	20007afc 	.word	0x20007afc

0800fd08 <_Z27getFont_bahnschrift_55_4bppv>:
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b08c      	sub	sp, #48	; 0x30
 800fd0c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_55_4bpp(glyphs_bahnschrift_55_4bpp, 70, 55, 11, 4, 1, 1, 1, unicodes_bahnschrift_55_4bpp, kerning_bahnschrift_55_4bpp, 0, 0, 0, 0);
 800fd0e:	4b1f      	ldr	r3, [pc, #124]	; (800fd8c <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	f3bf 8f5b 	dmb	ish
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	f003 0301 	and.w	r3, r3, #1
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	bf0c      	ite	eq
 800fd20:	2301      	moveq	r3, #1
 800fd22:	2300      	movne	r3, #0
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d02c      	beq.n	800fd84 <_Z27getFont_bahnschrift_55_4bppv+0x7c>
 800fd2a:	4818      	ldr	r0, [pc, #96]	; (800fd8c <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800fd2c:	f01d fa73 	bl	802d216 <__cxa_guard_acquire>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	bf14      	ite	ne
 800fd36:	2301      	movne	r3, #1
 800fd38:	2300      	moveq	r3, #0
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d021      	beq.n	800fd84 <_Z27getFont_bahnschrift_55_4bppv+0x7c>
 800fd40:	2300      	movs	r3, #0
 800fd42:	930a      	str	r3, [sp, #40]	; 0x28
 800fd44:	2300      	movs	r3, #0
 800fd46:	9309      	str	r3, [sp, #36]	; 0x24
 800fd48:	2300      	movs	r3, #0
 800fd4a:	9308      	str	r3, [sp, #32]
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	9307      	str	r3, [sp, #28]
 800fd50:	4b0f      	ldr	r3, [pc, #60]	; (800fd90 <_Z27getFont_bahnschrift_55_4bppv+0x88>)
 800fd52:	9306      	str	r3, [sp, #24]
 800fd54:	4b0f      	ldr	r3, [pc, #60]	; (800fd94 <_Z27getFont_bahnschrift_55_4bppv+0x8c>)
 800fd56:	9305      	str	r3, [sp, #20]
 800fd58:	2301      	movs	r3, #1
 800fd5a:	9304      	str	r3, [sp, #16]
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	9303      	str	r3, [sp, #12]
 800fd60:	2301      	movs	r3, #1
 800fd62:	9302      	str	r3, [sp, #8]
 800fd64:	2304      	movs	r3, #4
 800fd66:	9301      	str	r3, [sp, #4]
 800fd68:	230b      	movs	r3, #11
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	2337      	movs	r3, #55	; 0x37
 800fd6e:	2246      	movs	r2, #70	; 0x46
 800fd70:	4909      	ldr	r1, [pc, #36]	; (800fd98 <_Z27getFont_bahnschrift_55_4bppv+0x90>)
 800fd72:	480a      	ldr	r0, [pc, #40]	; (800fd9c <_Z27getFont_bahnschrift_55_4bppv+0x94>)
 800fd74:	f7ff fed0 	bl	800fb18 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fd78:	4804      	ldr	r0, [pc, #16]	; (800fd8c <_Z27getFont_bahnschrift_55_4bppv+0x84>)
 800fd7a:	f01d fa58 	bl	802d22e <__cxa_guard_release>
 800fd7e:	4808      	ldr	r0, [pc, #32]	; (800fda0 <_Z27getFont_bahnschrift_55_4bppv+0x98>)
 800fd80:	f01e f884 	bl	802de8c <atexit>
    return bahnschrift_55_4bpp;
 800fd84:	4b05      	ldr	r3, [pc, #20]	; (800fd9c <_Z27getFont_bahnschrift_55_4bppv+0x94>)
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	20007b24 	.word	0x20007b24
 800fd90:	0803cc90 	.word	0x0803cc90
 800fd94:	0803cc98 	.word	0x0803cc98
 800fd98:	0803c8b8 	.word	0x0803c8b8
 800fd9c:	20007afc 	.word	0x20007afc
 800fda0:	0800fcf9 	.word	0x0800fcf9

0800fda4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	370c      	adds	r7, #12
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr

0800fdbc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
    {
    }
 800fdc6:	bf00      	nop
 800fdc8:	370c      	adds	r7, #12
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr

0800fdd2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800fdd2:	b480      	push	{r7}
 800fdd4:	b083      	sub	sp, #12
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	6039      	str	r1, [r7, #0]
    {
    }
 800fddc:	bf00      	nop
 800fdde:	370c      	adds	r7, #12
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr

0800fde8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
    {
    }
 800fdf2:	bf00      	nop
 800fdf4:	370c      	adds	r7, #12
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr

0800fdfe <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800fdfe:	b480      	push	{r7}
 800fe00:	b083      	sub	sp, #12
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
 800fe06:	460b      	mov	r3, r1
 800fe08:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fe0a:	bf00      	nop
 800fe0c:	370c      	adds	r7, #12
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe14:	4770      	bx	lr

0800fe16 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800fe16:	b480      	push	{r7}
 800fe18:	b083      	sub	sp, #12
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	6078      	str	r0, [r7, #4]
    {
    }
 800fe1e:	bf00      	nop
 800fe20:	370c      	adds	r7, #12
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr

0800fe2a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800fe2a:	b480      	push	{r7}
 800fe2c:	b083      	sub	sp, #12
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
    {
    }
 800fe32:	bf00      	nop
 800fe34:	370c      	adds	r7, #12
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
	...

0800fe40 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
    {
 800fe48:	4a04      	ldr	r2, [pc, #16]	; (800fe5c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	601a      	str	r2, [r3, #0]
    }
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4618      	mov	r0, r3
 800fe52:	370c      	adds	r7, #12
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr
 800fe5c:	0802ff50 	.word	0x0802ff50

0800fe60 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
    }
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff ffe9 	bl	800fe40 <_ZN8touchgfx15UIEventListenerD1Ev>
 800fe6e:	2104      	movs	r1, #4
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f01d f9ce 	bl	802d212 <_ZdlPvj>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	460b      	mov	r3, r1
 800fe8a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800fe8c:	bf00      	nop
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800feaa:	6810      	ldr	r0, [r2, #0]
 800feac:	6851      	ldr	r1, [r2, #4]
 800feae:	c303      	stmia	r3!, {r0, r1}
    }
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
    {
 800fec4:	4a04      	ldr	r2, [pc, #16]	; (800fed8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	601a      	str	r2, [r3, #0]
    }
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4618      	mov	r0, r3
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr
 800fed8:	0802ff38 	.word	0x0802ff38

0800fedc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
    }
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7ff ffe9 	bl	800febc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800feea:	2104      	movs	r1, #4
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f01d f990 	bl	802d212 <_ZdlPvj>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4618      	mov	r0, r3
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800fefc:	b480      	push	{r7}
 800fefe:	af00      	add	r7, sp, #0
    {
        return instance;
 800ff00:	4b03      	ldr	r3, [pc, #12]	; (800ff10 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800ff02:	681b      	ldr	r3, [r3, #0]
    }
 800ff04:	4618      	mov	r0, r3
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr
 800ff0e:	bf00      	nop
 800ff10:	200097a8 	.word	0x200097a8

0800ff14 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800ff14:	b480      	push	{r7}
 800ff16:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800ff18:	4b0b      	ldr	r3, [pc, #44]	; (800ff48 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d008      	beq.n	800ff36 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800ff24:	4b08      	ldr	r3, [pc, #32]	; (800ff48 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d003      	beq.n	800ff36 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800ff2e:	4b06      	ldr	r3, [pc, #24]	; (800ff48 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff34:	e002      	b.n	800ff3c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800ff36:	4b04      	ldr	r3, [pc, #16]	; (800ff48 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	689b      	ldr	r3, [r3, #8]
    }
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	200097a8 	.word	0x200097a8

0800ff4c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800ff4c:	b480      	push	{r7}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800ff54:	4a07      	ldr	r2, [pc, #28]	; (800ff74 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	601a      	str	r2, [r3, #0]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	605a      	str	r2, [r3, #4]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	721a      	strb	r2, [r3, #8]
    {
    }
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr
 800ff74:	0802ff14 	.word	0x0802ff14

0800ff78 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
    {
 800ff80:	4a04      	ldr	r2, [pc, #16]	; (800ff94 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	601a      	str	r2, [r3, #0]
    }
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	4618      	mov	r0, r3
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr
 800ff94:	0802ff14 	.word	0x0802ff14

0800ff98 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    }
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f7ff ffe9 	bl	800ff78 <_ZN8touchgfx10TransitionD1Ev>
 800ffa6:	210c      	movs	r1, #12
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f01d f932 	bl	802d212 <_ZdlPvj>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
    {
    }
 800ffc0:	bf00      	nop
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
    {
    }
 800ffd4:	bf00      	nop
 800ffd6:	370c      	adds	r7, #12
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr

0800ffe0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
    {
    }
 800ffe8:	bf00      	nop
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800fffc:	f00c f80a 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 8010000:	4603      	mov	r3, r0
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	3230      	adds	r2, #48	; 0x30
 8010006:	6812      	ldr	r2, [r2, #0]
 8010008:	4618      	mov	r0, r3
 801000a:	4790      	blx	r2
    }
 801000c:	bf00      	nop
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	683a      	ldr	r2, [r7, #0]
 8010022:	605a      	str	r2, [r3, #4]
    }
 8010024:	bf00      	nop
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr

08010030 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	4a05      	ldr	r2, [pc, #20]	; (8010050 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	601a      	str	r2, [r3, #0]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4618      	mov	r0, r3
 8010042:	f7ff fefd 	bl	800fe40 <_ZN8touchgfx15UIEventListenerD1Ev>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	08031c94 	.word	0x08031c94

08010054 <_ZN8touchgfx11ApplicationD0Ev>:
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7ff ffe7 	bl	8010030 <_ZN8touchgfx11ApplicationD1Ev>
 8010062:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f01d f8d3 	bl	802d212 <_ZdlPvj>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4618      	mov	r0, r3
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
	...

08010078 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	4618      	mov	r0, r3
 8010084:	f00c f82e 	bl	801c0e4 <_ZN8touchgfx11ApplicationC1Ev>
 8010088:	4a09      	ldr	r2, [pc, #36]	; (80100b0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	601a      	str	r2, [r3, #0]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2200      	movs	r2, #0
 8010092:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4a04      	ldr	r2, [pc, #16]	; (80100b4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80100a2:	6013      	str	r3, [r2, #0]
    }
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4618      	mov	r0, r3
 80100a8:	3708      	adds	r7, #8
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	0802fed0 	.word	0x0802fed0
 80100b4:	200097f4 	.word	0x200097f4

080100b8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 f804 	bl	80100ce <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80100c6:	bf00      	nop
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b082      	sub	sp, #8
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00f      	beq.n	8010100 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	330c      	adds	r3, #12
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	4610      	mov	r0, r2
 80100f4:	4798      	blx	r3
 80100f6:	4603      	mov	r3, r0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d001      	beq.n	8010100 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80100fc:	2301      	movs	r3, #1
 80100fe:	e000      	b.n	8010102 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010100:	2300      	movs	r3, #0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d00e      	beq.n	8010124 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	3308      	adds	r3, #8
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4610      	mov	r0, r2
 801011a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2200      	movs	r2, #0
 8010120:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8010124:	bf00      	nop
 8010126:	3708      	adds	r7, #8
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	683a      	ldr	r2, [r7, #0]
 801013a:	601a      	str	r2, [r3, #0]
    }
 801013c:	bf00      	nop
 801013e:	370c      	adds	r7, #12
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	4a05      	ldr	r2, [pc, #20]	; (8010168 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	601a      	str	r2, [r3, #0]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff ff69 	bl	8010030 <_ZN8touchgfx11ApplicationD1Ev>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	0802fed0 	.word	0x0802fed0

0801016c <_ZN8touchgfx14MVPApplicationD0Ev>:
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7ff ffe7 	bl	8010148 <_ZN8touchgfx14MVPApplicationD1Ev>
 801017a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f01d f847 	bl	802d212 <_ZdlPvj>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	4618      	mov	r0, r3
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
	...

08010190 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	4a08      	ldr	r2, [pc, #32]	; (80101bc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	601a      	str	r2, [r3, #0]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80101a4:	4618      	mov	r0, r3
 80101a6:	f000 fabf 	bl	8010728 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff ffcb 	bl	8010148 <_ZN8touchgfx14MVPApplicationD1Ev>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	4618      	mov	r0, r3
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	0802fe74 	.word	0x0802fe74

080101c0 <_ZN23FrontendApplicationBaseD0Ev>:
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7ff ffe1 	bl	8010190 <_ZN23FrontendApplicationBaseD1Ev>
 80101ce:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f01d f81d 	bl	802d212 <_ZdlPvj>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4618      	mov	r0, r3
 80101dc:	3708      	adds	r7, #8
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80101e2:	b480      	push	{r7}
 80101e4:	b083      	sub	sp, #12
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2201      	movs	r2, #1
 80101ee:	721a      	strb	r2, [r3, #8]
    }
 80101f0:	bf00      	nop
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	605a      	str	r2, [r3, #4]
    }
 801020c:	bf00      	nop
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	4618      	mov	r0, r3
 8010228:	f7ff ff26 	bl	8010078 <_ZN8touchgfx14MVPApplicationC1Ev>
 801022c:	4a13      	ldr	r2, [pc, #76]	; (801027c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	601a      	str	r2, [r3, #0]
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010238:	4618      	mov	r0, r3
 801023a:	f000 f89f 	bl	801037c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	68ba      	ldr	r2, [r7, #8]
 801024a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 801024e:	f7ff fe55 	bl	800fefc <_ZN8touchgfx3HAL11getInstanceEv>
 8010252:	4603      	mov	r3, r0
 8010254:	681a      	ldr	r2, [r3, #0]
 8010256:	3208      	adds	r2, #8
 8010258:	6812      	ldr	r2, [r2, #0]
 801025a:	2100      	movs	r1, #0
 801025c:	4618      	mov	r0, r3
 801025e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8010260:	2000      	movs	r0, #0
 8010262:	f004 f8cf 	bl	8014404 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8010266:	f7ff fe55 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 801026a:	4603      	mov	r3, r0
 801026c:	4618      	mov	r0, r3
 801026e:	f014 f9d4 	bl	802461a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	4618      	mov	r0, r3
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}
 801027c:	0802fe74 	.word	0x0802fe74

08010280 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4618      	mov	r0, r3
 801028e:	370c      	adds	r7, #12
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	6039      	str	r1, [r7, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	683a      	ldr	r2, [r7, #0]
 80102a6:	4611      	mov	r1, r2
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff ffe9 	bl	8010280 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	685a      	ldr	r2, [r3, #4]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	605a      	str	r2, [r3, #4]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	683a      	ldr	r2, [r7, #0]
 80102ba:	3308      	adds	r3, #8
 80102bc:	3208      	adds	r2, #8
 80102be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	4618      	mov	r0, r3
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 80102d0:	b590      	push	{r4, r7, lr}
 80102d2:	b089      	sub	sp, #36	; 0x24
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80102de:	4b10      	ldr	r3, [pc, #64]	; (8010320 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 80102e0:	61bb      	str	r3, [r7, #24]
 80102e2:	2300      	movs	r3, #0
 80102e4:	61fb      	str	r3, [r7, #28]
 80102e6:	f107 0008 	add.w	r0, r7, #8
 80102ea:	f107 0318 	add.w	r3, r7, #24
 80102ee:	cb0c      	ldmia	r3, {r2, r3}
 80102f0:	6879      	ldr	r1, [r7, #4]
 80102f2:	f000 f85f 	bl	80103b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80102f6:	f107 0308 	add.w	r3, r7, #8
 80102fa:	4619      	mov	r1, r3
 80102fc:	4620      	mov	r0, r4
 80102fe:	f7ff ffcb 	bl	8010298 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8010302:	f107 0308 	add.w	r3, r7, #8
 8010306:	4618      	mov	r0, r3
 8010308:	f000 fa0e 	bl	8010728 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8010318:	bf00      	nop
 801031a:	3724      	adds	r7, #36	; 0x24
 801031c:	46bd      	mov	sp, r7
 801031e:	bd90      	pop	{r4, r7, pc}
 8010320:	08010325 	.word	0x08010325

08010324 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af02      	add	r7, sp, #8
 801032a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010338:	461a      	mov	r2, r3
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	4b04      	ldr	r3, [pc, #16]	; (8010354 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8010344:	4804      	ldr	r0, [pc, #16]	; (8010358 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8010346:	f000 f867 	bl	8010418 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801034a:	bf00      	nop
 801034c:	3708      	adds	r7, #8
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	200097e8 	.word	0x200097e8
 8010358:	200097e4 	.word	0x200097e4

0801035c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801035c:	b480      	push	{r7}
 801035e:	b083      	sub	sp, #12
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	4a04      	ldr	r2, [pc, #16]	; (8010378 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	601a      	str	r2, [r3, #0]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4618      	mov	r0, r3
 801036e:	370c      	adds	r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr
 8010378:	0802ff38 	.word	0x0802ff38

0801037c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4618      	mov	r0, r3
 8010388:	f7ff ffe8 	bl	801035c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801038c:	4a08      	ldr	r2, [pc, #32]	; (80103b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	601a      	str	r2, [r3, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2200      	movs	r2, #0
 8010396:	605a      	str	r2, [r3, #4]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	609a      	str	r2, [r3, #8]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	60da      	str	r2, [r3, #12]
    {
    }
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4618      	mov	r0, r3
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	0802feb8 	.word	0x0802feb8

080103b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes
     *                       zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	4639      	mov	r1, r7
 80103c0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7ff ffc8 	bl	801035c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80103cc:	4a08      	ldr	r2, [pc, #32]	; (80103f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	601a      	str	r2, [r3, #0]
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	68ba      	ldr	r2, [r7, #8]
 80103d6:	605a      	str	r2, [r3, #4]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	3308      	adds	r3, #8
 80103dc:	463a      	mov	r2, r7
 80103de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103e2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	4618      	mov	r0, r3
 80103ea:	3710      	adds	r7, #16
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	0802feb8 	.word	0x0802feb8

080103f4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4618      	mov	r0, r3
 8010400:	f7ff fda4 	bl	800ff4c <_ZN8touchgfx10TransitionC1Ev>
 8010404:	4a03      	ldr	r2, [pc, #12]	; (8010414 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4618      	mov	r0, r3
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	0802fe50 	.word	0x0802fe50

08010418 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8010418:	b590      	push	{r4, r7, lr}
 801041a:	b08f      	sub	sp, #60	; 0x3c
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
 8010424:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	689a      	ldr	r2, [r3, #8]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	3320      	adds	r3, #32
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4610      	mov	r0, r2
 8010436:	4798      	blx	r3
 8010438:	4603      	mov	r3, r0
 801043a:	f640 528b 	movw	r2, #3467	; 0xd8b
 801043e:	4293      	cmp	r3, r2
 8010440:	d805      	bhi.n	801044e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8010442:	4b7f      	ldr	r3, [pc, #508]	; (8010640 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8010444:	4a7f      	ldr	r2, [pc, #508]	; (8010644 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010446:	21a3      	movs	r1, #163	; 0xa3
 8010448:	487f      	ldr	r0, [pc, #508]	; (8010648 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801044a:	f01d fd01 	bl	802de50 <__assert_func>
 801044e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	685a      	ldr	r2, [r3, #4]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	3320      	adds	r3, #32
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	4610      	mov	r0, r2
 8010460:	4798      	blx	r3
 8010462:	4603      	mov	r3, r0
 8010464:	2b0f      	cmp	r3, #15
 8010466:	d805      	bhi.n	8010474 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8010468:	4b78      	ldr	r3, [pc, #480]	; (801064c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 801046a:	4a76      	ldr	r2, [pc, #472]	; (8010644 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801046c:	21a4      	movs	r1, #164	; 0xa4
 801046e:	4876      	ldr	r0, [pc, #472]	; (8010648 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8010470:	f01d fcee 	bl	802de50 <__assert_func>
 8010474:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	68da      	ldr	r2, [r3, #12]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	3320      	adds	r3, #32
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4610      	mov	r0, r2
 8010486:	4798      	blx	r3
 8010488:	4603      	mov	r3, r0
 801048a:	2b0b      	cmp	r3, #11
 801048c:	d805      	bhi.n	801049a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 801048e:	4b70      	ldr	r3, [pc, #448]	; (8010650 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8010490:	4a6c      	ldr	r2, [pc, #432]	; (8010644 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010492:	21a5      	movs	r1, #165	; 0xa5
 8010494:	486c      	ldr	r0, [pc, #432]	; (8010648 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8010496:	f01d fcdb 	bl	802de50 <__assert_func>
 801049a:	bf00      	nop
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	62bb      	str	r3, [r7, #40]	; 0x28
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	627b      	str	r3, [r7, #36]	; 0x24
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80104a8:	f00b fdb4 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 80104ac:	4603      	mov	r3, r0
 80104ae:	4618      	mov	r0, r3
 80104b0:	f00b fdfe 	bl	801c0b0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80104b4:	6a3b      	ldr	r3, [r7, #32]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d008      	beq.n	80104ce <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 80104bc:	6a3b      	ldr	r3, [r7, #32]
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	6a3b      	ldr	r3, [r7, #32]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	330c      	adds	r3, #12
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	4610      	mov	r0, r2
 80104cc:	4798      	blx	r3
    if (*currentTrans)
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d007      	beq.n	80104e6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 80104d6:	6a3b      	ldr	r3, [r7, #32]
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	6a3b      	ldr	r3, [r7, #32]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4610      	mov	r0, r2
 80104e4:	4798      	blx	r3
    if (*currentScreen)
 80104e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d008      	beq.n	8010500 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80104ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3314      	adds	r3, #20
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4610      	mov	r0, r2
 80104fe:	4798      	blx	r3
    if (*currentPresenter)
 8010500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d008      	beq.n	801051a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8010508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	3304      	adds	r3, #4
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4610      	mov	r0, r2
 8010518:	4798      	blx	r3
    if (*currentScreen)
 801051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d007      	beq.n	8010532 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8010522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	4610      	mov	r0, r2
 8010530:	4798      	blx	r3
    if (*currentPresenter)
 8010532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d008      	beq.n	801054c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 801053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	3308      	adds	r3, #8
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4610      	mov	r0, r2
 801054a:	4798      	blx	r3
}
 801054c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	2100      	movs	r1, #0
 8010554:	4618      	mov	r0, r3
 8010556:	f000 f87d 	bl	8010654 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801055a:	4603      	mov	r3, r0
 801055c:	4619      	mov	r1, r3
 801055e:	200c      	movs	r0, #12
 8010560:	f7ff fc20 	bl	800fda4 <_ZnwjPv>
 8010564:	4604      	mov	r4, r0
 8010566:	4620      	mov	r0, r4
 8010568:	f7ff ff44 	bl	80103f4 <_ZN8touchgfx12NoTransitionC1Ev>
 801056c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	2100      	movs	r1, #0
 8010574:	4618      	mov	r0, r3
 8010576:	f000 f880 	bl	801067a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801057a:	4603      	mov	r3, r0
 801057c:	4619      	mov	r1, r3
 801057e:	f640 508c 	movw	r0, #3468	; 0xd8c
 8010582:	f7ff fc0f 	bl	800fda4 <_ZnwjPv>
 8010586:	4604      	mov	r4, r0
 8010588:	4620      	mov	r0, r4
 801058a:	f004 f96f 	bl	801486c <_ZN11Screen1ViewC1Ev>
 801058e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	2100      	movs	r1, #0
 8010596:	4618      	mov	r0, r3
 8010598:	f000 f882 	bl	80106a0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801059c:	4603      	mov	r3, r0
 801059e:	4619      	mov	r1, r3
 80105a0:	2010      	movs	r0, #16
 80105a2:	f7ff fbff 	bl	800fda4 <_ZnwjPv>
 80105a6:	4604      	mov	r4, r0
 80105a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105aa:	4620      	mov	r0, r4
 80105ac:	f004 f8e2 	bl	8014774 <_ZN16Screen1PresenterC1ER11Screen1View>
 80105b0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105b6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105bc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105c2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80105c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80105ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105cc:	3304      	adds	r3, #4
 80105ce:	e000      	b.n	80105d2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80105d0:	2300      	movs	r3, #0
 80105d2:	4619      	mov	r1, r3
 80105d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80105d6:	f7ff fda9 	bl	801012c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80105da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105dc:	3304      	adds	r3, #4
 80105de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7ff fe0b 	bl	80101fc <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105ea:	4618      	mov	r0, r3
 80105ec:	f000 f86b 	bl	80106c6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80105f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f2:	61fb      	str	r3, [r7, #28]
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	61bb      	str	r3, [r7, #24]
 80105f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fa:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	330c      	adds	r3, #12
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	69f8      	ldr	r0, [r7, #28]
 8010606:	4798      	blx	r3
    newPresenter->activate();
 8010608:	69bb      	ldr	r3, [r7, #24]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	69b8      	ldr	r0, [r7, #24]
 8010610:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8010612:	6979      	ldr	r1, [r7, #20]
 8010614:	69f8      	ldr	r0, [r7, #28]
 8010616:	f00d f9bb 	bl	801d990 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	3310      	adds	r3, #16
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	6978      	ldr	r0, [r7, #20]
 8010624:	4798      	blx	r3
    newTransition->invalidate();
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	3314      	adds	r3, #20
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	6978      	ldr	r0, [r7, #20]
 8010630:	4798      	blx	r3
}
 8010632:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8010634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010636:	4618      	mov	r0, r3
 8010638:	373c      	adds	r7, #60	; 0x3c
 801063a:	46bd      	mov	sp, r7
 801063c:	bd90      	pop	{r4, r7, pc}
 801063e:	bf00      	nop
 8010640:	0802f110 	.word	0x0802f110
 8010644:	0802f1a0 	.word	0x0802f1a0
 8010648:	0802f2a4 	.word	0x0802f2a4
 801064c:	0802f2e8 	.word	0x0802f2e8
 8010650:	0802f38c 	.word	0x0802f38c

08010654 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	460b      	mov	r3, r1
 801065e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	3324      	adds	r3, #36	; 0x24
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	887a      	ldrh	r2, [r7, #2]
 801066a:	4611      	mov	r1, r2
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	4798      	blx	r3
 8010670:	4603      	mov	r3, r0
    }
 8010672:	4618      	mov	r0, r3
 8010674:	3708      	adds	r7, #8
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 801067a:	b580      	push	{r7, lr}
 801067c:	b082      	sub	sp, #8
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	460b      	mov	r3, r1
 8010684:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	3324      	adds	r3, #36	; 0x24
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	887a      	ldrh	r2, [r7, #2]
 8010690:	4611      	mov	r1, r2
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	4798      	blx	r3
 8010696:	4603      	mov	r3, r0
    }
 8010698:	4618      	mov	r0, r3
 801069a:	3708      	adds	r7, #8
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	460b      	mov	r3, r1
 80106aa:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	3324      	adds	r3, #36	; 0x24
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	887a      	ldrh	r2, [r7, #2]
 80106b6:	4611      	mov	r1, r2
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	4798      	blx	r3
 80106bc:	4603      	mov	r3, r0
    }
 80106be:	4618      	mov	r0, r3
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80106c6:	b480      	push	{r7}
 80106c8:	b083      	sub	sp, #12
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80106d6:	bf00      	nop
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
	...

080106e4 <_ZN8touchgfx12NoTransitionD1Ev>:
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b082      	sub	sp, #8
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	4a05      	ldr	r2, [pc, #20]	; (8010704 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	601a      	str	r2, [r3, #0]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7ff fc3f 	bl	800ff78 <_ZN8touchgfx10TransitionD1Ev>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4618      	mov	r0, r3
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}
 8010704:	0802fe50 	.word	0x0802fe50

08010708 <_ZN8touchgfx12NoTransitionD0Ev>:
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f7ff ffe7 	bl	80106e4 <_ZN8touchgfx12NoTransitionD1Ev>
 8010716:	210c      	movs	r1, #12
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f01c fd7a 	bl	802d212 <_ZdlPvj>
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4618      	mov	r0, r3
 8010722:	3708      	adds	r7, #8
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	4a05      	ldr	r2, [pc, #20]	; (8010748 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	601a      	str	r2, [r3, #0]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4618      	mov	r0, r3
 801073a:	f7ff fbbf 	bl	800febc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	3708      	adds	r7, #8
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	0802feb8 	.word	0x0802feb8

0801074c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f7ff ffe7 	bl	8010728 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801075a:	2110      	movs	r1, #16
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f01c fd58 	bl	802d212 <_ZdlPvj>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	4618      	mov	r0, r3
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	68d2      	ldr	r2, [r2, #12]
 801077c:	1052      	asrs	r2, r2, #1
 801077e:	1899      	adds	r1, r3, r2
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	68db      	ldr	r3, [r3, #12]
 8010784:	f003 0301 	and.w	r3, r3, #1
 8010788:	2b00      	cmp	r3, #0
 801078a:	d102      	bne.n	8010792 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	689b      	ldr	r3, [r3, #8]
 8010790:	e00a      	b.n	80107a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	68d2      	ldr	r2, [r2, #12]
 801079a:	1052      	asrs	r2, r2, #1
 801079c:	4413      	add	r3, r2
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	6892      	ldr	r2, [r2, #8]
 80107a4:	4413      	add	r3, r2
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4608      	mov	r0, r1
 80107aa:	4798      	blx	r3
    }
 80107ac:	bf00      	nop
 80107ae:	3708      	adds	r7, #8
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d010      	beq.n	80107e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	689b      	ldr	r3, [r3, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d107      	bne.n	80107dc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	f003 0301 	and.w	r3, r3, #1
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80107d8:	2301      	movs	r3, #1
 80107da:	e000      	b.n	80107de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80107dc:	2300      	movs	r3, #0
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d001      	beq.n	80107e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80107e2:	2301      	movs	r3, #1
 80107e4:	e000      	b.n	80107e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80107e6:	2300      	movs	r3, #0
    }
 80107e8:	4618      	mov	r0, r3
 80107ea:	370c      	adds	r7, #12
 80107ec:	46bd      	mov	sp, r7
 80107ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f2:	4770      	bx	lr

080107f4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFrom24BitRGB
     */
    colortype(uint32_t col)
 80107f4:	b480      	push	{r7}
 80107f6:	b083      	sub	sp, #12
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
        : color(col)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	683a      	ldr	r2, [r7, #0]
 8010802:	601a      	str	r2, [r3, #0]
    {
    }
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	4618      	mov	r0, r3
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	801a      	strh	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	805a      	strh	r2, [r3, #2]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2200      	movs	r2, #0
 801082a:	809a      	strh	r2, [r3, #4]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2200      	movs	r2, #0
 8010830:	80da      	strh	r2, [r3, #6]
    {
    }
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	4618      	mov	r0, r3
 8010836:	370c      	adds	r7, #12
 8010838:	46bd      	mov	sp, r7
 801083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083e:	4770      	bx	lr

08010840 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8010840:	b480      	push	{r7}
 8010842:	b083      	sub	sp, #12
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	460b      	mov	r3, r1
 801084a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	887a      	ldrh	r2, [r7, #2]
 8010850:	801a      	strh	r2, [r3, #0]
    {
    }
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4618      	mov	r0, r3
 8010856:	370c      	adds	r7, #12
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr

08010860 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8010868:	4a14      	ldr	r2, [pc, #80]	; (80108bc <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	3304      	adds	r3, #4
 8010872:	4618      	mov	r0, r3
 8010874:	f7ff ffcd 	bl	8010812 <_ZN8touchgfx4RectC1Ev>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	330c      	adds	r3, #12
 801087c:	4618      	mov	r0, r3
 801087e:	f7ff ffc8 	bl	8010812 <_ZN8touchgfx4RectC1Ev>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	615a      	str	r2, [r3, #20]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2200      	movs	r2, #0
 801088c:	619a      	str	r2, [r3, #24]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2200      	movs	r2, #0
 8010892:	61da      	str	r2, [r3, #28]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2200      	movs	r2, #0
 8010898:	841a      	strh	r2, [r3, #32]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	845a      	strh	r2, [r3, #34]	; 0x22
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2201      	movs	r2, #1
 80108ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	4618      	mov	r0, r3
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	08031ef4 	.word	0x08031ef4

080108c0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
    {
 80108c8:	4a04      	ldr	r2, [pc, #16]	; (80108dc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	601a      	str	r2, [r3, #0]
    }
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4618      	mov	r0, r3
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr
 80108dc:	08031ef4 	.word	0x08031ef4

080108e0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
    }
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7ff ffe9 	bl	80108c0 <_ZN8touchgfx8DrawableD1Ev>
 80108ee:	2128      	movs	r1, #40	; 0x28
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f01c fc8e 	bl	802d212 <_ZdlPvj>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010908:	2300      	movs	r3, #0
    }
 801090a:	4618      	mov	r0, r3
 801090c:	370c      	adds	r7, #12
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr

08010916 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010916:	b580      	push	{r7, lr}
 8010918:	b084      	sub	sp, #16
 801091a:	af00      	add	r7, sp, #0
 801091c:	60f8      	str	r0, [r7, #12]
 801091e:	4608      	mov	r0, r1
 8010920:	4611      	mov	r1, r2
 8010922:	461a      	mov	r2, r3
 8010924:	4603      	mov	r3, r0
 8010926:	817b      	strh	r3, [r7, #10]
 8010928:	460b      	mov	r3, r1
 801092a:	813b      	strh	r3, [r7, #8]
 801092c:	4613      	mov	r3, r2
 801092e:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010930:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010934:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010938:	4619      	mov	r1, r3
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	f000 f82a 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8010940:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010948:	4619      	mov	r1, r3
 801094a:	68f8      	ldr	r0, [r7, #12]
 801094c:	f000 f87e 	bl	8010a4c <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8010950:	bf00      	nop
 8010952:	3710      	adds	r7, #16
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	460b      	mov	r3, r1
 8010962:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	887a      	ldrh	r2, [r7, #2]
 8010968:	809a      	strh	r2, [r3, #4]
    }
 801096a:	bf00      	nop
 801096c:	370c      	adds	r7, #12
 801096e:	46bd      	mov	sp, r7
 8010970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010974:	4770      	bx	lr

08010976 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010976:	b480      	push	{r7}
 8010978:	b083      	sub	sp, #12
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
 801097e:	460b      	mov	r3, r1
 8010980:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	887a      	ldrh	r2, [r7, #2]
 8010986:	80da      	strh	r2, [r3, #6]
    }
 8010988:	bf00      	nop
 801098a:	370c      	adds	r7, #12
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	460b      	mov	r3, r1
 801099e:	807b      	strh	r3, [r7, #2]
 80109a0:	4613      	mov	r3, r2
 80109a2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	332c      	adds	r3, #44	; 0x2c
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80109b0:	4611      	mov	r1, r2
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	4798      	blx	r3
        setY(y);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	3330      	adds	r3, #48	; 0x30
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f9b7 2000 	ldrsh.w	r2, [r7]
 80109c2:	4611      	mov	r1, r2
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	4798      	blx	r3
    }
 80109c8:	bf00      	nop
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	460b      	mov	r3, r1
 80109da:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	887a      	ldrh	r2, [r7, #2]
 80109e0:	811a      	strh	r2, [r3, #8]
    }
 80109e2:	bf00      	nop
 80109e4:	370c      	adds	r7, #12
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr

080109ee <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80109ee:	b480      	push	{r7}
 80109f0:	b083      	sub	sp, #12
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
 80109f6:	460b      	mov	r3, r1
 80109f8:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	887a      	ldrh	r2, [r7, #2]
 80109fe:	815a      	strh	r2, [r3, #10]
    }
 8010a00:	bf00      	nop
 8010a02:	370c      	adds	r7, #12
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr

08010a0c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
    {
    }
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
    {
    }
 8010a2a:	bf00      	nop
 8010a2c:	370c      	adds	r7, #12
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr

08010a36 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010a36:	b480      	push	{r7}
 8010a38:	b083      	sub	sp, #12
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
 8010a3e:	6039      	str	r1, [r7, #0]
    {
    }
 8010a40:	bf00      	nop
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	460b      	mov	r3, r1
 8010a56:	807b      	strh	r3, [r7, #2]
 8010a58:	4613      	mov	r3, r2
 8010a5a:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	3334      	adds	r3, #52	; 0x34
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010a68:	4611      	mov	r1, r2
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	4798      	blx	r3
        setHeight(height);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	3338      	adds	r3, #56	; 0x38
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010a7a:	4611      	mov	r1, r2
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	4798      	blx	r3
    }
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
    {
    }
 8010a92:	bf00      	nop
 8010a94:	370c      	adds	r7, #12
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8010a9e:	b480      	push	{r7}
 8010aa0:	b083      	sub	sp, #12
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
    {
    }
 8010aa6:	bf00      	nop
 8010aa8:	370c      	adds	r7, #12
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr

08010ab2 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010ab2:	b480      	push	{r7}
 8010ab4:	b083      	sub	sp, #12
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010ada:	4618      	mov	r0, r3
 8010adc:	370c      	adds	r7, #12
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr

08010ae6 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b082      	sub	sp, #8
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	460b      	mov	r3, r1
 8010af0:	807b      	strh	r3, [r7, #2]
 8010af2:	4613      	mov	r3, r2
 8010af4:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	3350      	adds	r3, #80	; 0x50
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	8879      	ldrh	r1, [r7, #2]
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010b06:	b292      	uxth	r2, r2
 8010b08:	1a8a      	subs	r2, r1, r2
 8010b0a:	b292      	uxth	r2, r2
 8010b0c:	b210      	sxth	r0, r2
 8010b0e:	8839      	ldrh	r1, [r7, #0]
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010b16:	b292      	uxth	r2, r2
 8010b18:	1a8a      	subs	r2, r1, r2
 8010b1a:	b292      	uxth	r2, r2
 8010b1c:	b212      	sxth	r2, r2
 8010b1e:	4601      	mov	r1, r0
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	4798      	blx	r3
    }
 8010b24:	bf00      	nop
 8010b26:	3708      	adds	r7, #8
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010b2c:	b480      	push	{r7}
 8010b2e:	b083      	sub	sp, #12
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b3a:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b42:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b4a:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010b4c:	bf00      	nop
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f7ff ffe1 	bl	8010b2c <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	601a      	str	r2, [r3, #0]
    }
 8010b78:	bf00      	nop
 8010b7a:	3710      	adds	r7, #16
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}

08010b80 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
    {
 8010b88:	4a06      	ldr	r2, [pc, #24]	; (8010ba4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	601a      	str	r2, [r3, #0]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	3304      	adds	r3, #4
 8010b92:	4618      	mov	r0, r3
 8010b94:	f003 f99e 	bl	8013ed4 <_ZN8touchgfx9ContainerD1Ev>
    }
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3708      	adds	r7, #8
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	08031fec 	.word	0x08031fec

08010ba8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
    }
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f7ff ffe5 	bl	8010b80 <_ZN8touchgfx6ScreenD1Ev>
 8010bb6:	213c      	movs	r1, #60	; 0x3c
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f01c fb2a 	bl	802d212 <_ZdlPvj>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3708      	adds	r7, #8
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}

08010bc8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
    {
    }
 8010bd0:	bf00      	nop
 8010bd2:	370c      	adds	r7, #12
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr

08010bdc <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010bdc:	b480      	push	{r7}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
    {
    }
 8010be4:	bf00      	nop
 8010be6:	370c      	adds	r7, #12
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr

08010bf0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8010bf0:	b480      	push	{r7}
 8010bf2:	b083      	sub	sp, #12
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
    {
    }
 8010bf8:	bf00      	nop
 8010bfa:	370c      	adds	r7, #12
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr

08010c04 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010c04:	b480      	push	{r7}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
    {
    }
 8010c0c:	bf00      	nop
 8010c0e:	370c      	adds	r7, #12
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr

08010c18 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010c18:	b480      	push	{r7}
 8010c1a:	b083      	sub	sp, #12
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	460b      	mov	r3, r1
 8010c22:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010c24:	bf00      	nop
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	6839      	ldr	r1, [r7, #0]
 8010c40:	4618      	mov	r0, r3
 8010c42:	f006 fad5 	bl	80171f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010c46:	bf00      	nop
 8010c48:	3708      	adds	r7, #8
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b084      	sub	sp, #16
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	60f8      	str	r0, [r7, #12]
 8010c56:	607b      	str	r3, [r7, #4]
 8010c58:	460b      	mov	r3, r1
 8010c5a:	817b      	strh	r3, [r7, #10]
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7ff ff25 	bl	8010ab2 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d008      	beq.n	8010c80 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7ff ff2b 	bl	8010acc <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d001      	beq.n	8010c80 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	e000      	b.n	8010c82 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010c80:	2300      	movs	r3, #0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d002      	beq.n	8010c8c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010c86:	68fa      	ldr	r2, [r7, #12]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	601a      	str	r2, [r3, #0]
        }
    }
 8010c8c:	bf00      	nop
 8010c8e:	3710      	adds	r7, #16
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7ff fdde 	bl	8010860 <_ZN8touchgfx8DrawableC1Ev>
 8010ca4:	4a03      	ldr	r2, [pc, #12]	; (8010cb4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4618      	mov	r0, r3
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	0802ffe0 	.word	0x0802ffe0

08010cb8 <_ZN8touchgfx6WidgetD1Ev>:
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	4a05      	ldr	r2, [pc, #20]	; (8010cd8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	601a      	str	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7ff fdf9 	bl	80108c0 <_ZN8touchgfx8DrawableD1Ev>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	0802ffe0 	.word	0x0802ffe0

08010cdc <_ZN8touchgfx6WidgetD0Ev>:
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f7ff ffe7 	bl	8010cb8 <_ZN8touchgfx6WidgetD1Ev>
 8010cea:	2128      	movs	r1, #40	; 0x28
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f01c fa90 	bl	802d212 <_ZdlPvj>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	4618      	mov	r0, r3
 8010d08:	2326      	movs	r3, #38	; 0x26
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	f01d fa2d 	bl	802e16c <memset>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7ff ffbd 	bl	8010c94 <_ZN8touchgfx6WidgetC1Ev>
 8010d1a:	4a09      	ldr	r2, [pc, #36]	; (8010d40 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	601a      	str	r2, [r3, #0]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	22ff      	movs	r2, #255	; 0xff
 8010d24:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	3328      	adds	r3, #40	; 0x28
 8010d2c:	2100      	movs	r1, #0
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7ff fd60 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	4618      	mov	r0, r3
 8010d38:	3708      	adds	r7, #8
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	080318a8 	.word	0x080318a8

08010d44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	683a      	ldr	r2, [r7, #0]
 8010d52:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010d54:	bf00      	nop
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr

08010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	2326      	movs	r3, #38	; 0x26
 8010d70:	461a      	mov	r2, r3
 8010d72:	2100      	movs	r1, #0
 8010d74:	f01d f9fa 	bl	802e16c <memset>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7ff ff8a 	bl	8010c94 <_ZN8touchgfx6WidgetC1Ev>
 8010d80:	4a09      	ldr	r2, [pc, #36]	; (8010da8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	601a      	str	r2, [r3, #0]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	683a      	ldr	r2, [r7, #0]
 8010d8a:	8812      	ldrh	r2, [r2, #0]
 8010d8c:	84da      	strh	r2, [r3, #38]	; 0x26
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	22ff      	movs	r2, #255	; 0xff
 8010d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 8010d96:	6839      	ldr	r1, [r7, #0]
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f009 fc33 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4618      	mov	r0, r3
 8010da2:	3708      	adds	r7, #8
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}
 8010da8:	08031b18 	.word	0x08031b18

08010dac <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	460b      	mov	r3, r1
 8010db6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8010db8:	4a06      	ldr	r2, [pc, #24]	; (8010dd4 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	601a      	str	r2, [r3, #0]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	887a      	ldrh	r2, [r7, #2]
 8010dc2:	809a      	strh	r2, [r3, #4]
    }
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	370c      	adds	r7, #12
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr
 8010dd2:	bf00      	nop
 8010dd4:	0802fde8 	.word	0x0802fde8

08010dd8 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	4618      	mov	r0, r3
 8010de4:	2326      	movs	r3, #38	; 0x26
 8010de6:	461a      	mov	r2, r3
 8010de8:	2100      	movs	r1, #0
 8010dea:	f01d f9bf 	bl	802e16c <memset>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7ff ff4f 	bl	8010c94 <_ZN8touchgfx6WidgetC1Ev>
 8010df6:	4a14      	ldr	r2, [pc, #80]	; (8010e48 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	601a      	str	r2, [r3, #0]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	3328      	adds	r3, #40	; 0x28
 8010e00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff ffd1 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	3330      	adds	r3, #48	; 0x30
 8010e0e:	2100      	movs	r1, #0
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7ff fcef 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	869a      	strh	r2, [r3, #52]	; 0x34
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	22ff      	movs	r2, #255	; 0xff
 8010e20:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2200      	movs	r2, #0
 8010e28:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2200      	movs	r2, #0
 8010e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3708      	adds	r7, #8
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	08031800 	.word	0x08031800

08010e4c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	4a08      	ldr	r2, [pc, #32]	; (8010e78 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	601a      	str	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	3328      	adds	r3, #40	; 0x28
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fe fe22 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7ff ff26 	bl	8010cb8 <_ZN8touchgfx6WidgetD1Ev>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	08031800 	.word	0x08031800

08010e7c <_ZN8touchgfx8TextAreaD0Ev>:
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f7ff ffe1 	bl	8010e4c <_ZN8touchgfx8TextAreaD1Ev>
 8010e8a:	213c      	movs	r1, #60	; 0x3c
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f01c f9c0 	bl	802d212 <_ZdlPvj>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4618      	mov	r0, r3
 8010e96:	3708      	adds	r7, #8
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7ff ff96 	bl	8010dd8 <_ZN8touchgfx8TextAreaC1Ev>
 8010eac:	4a05      	ldr	r2, [pc, #20]	; (8010ec4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	601a      	str	r2, [r3, #0]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3708      	adds	r7, #8
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	08031a70 	.word	0x08031a70

08010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8010ec8:	b480      	push	{r7}
 8010eca:	b083      	sub	sp, #12
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
 8010ed0:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	683a      	ldr	r2, [r7, #0]
 8010ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010ed8:	bf00      	nop
 8010eda:	370c      	adds	r7, #12
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr

08010ee4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	4a05      	ldr	r2, [pc, #20]	; (8010f04 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	601a      	str	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff fe43 	bl	8010b80 <_ZN8touchgfx6ScreenD1Ev>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	4618      	mov	r0, r3
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}
 8010f04:	0802ffac 	.word	0x0802ffac

08010f08 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f7ff ffe7 	bl	8010ee4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8010f16:	2140      	movs	r1, #64	; 0x40
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f01c f97a 	bl	802d212 <_ZdlPvj>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	4618      	mov	r0, r3
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	4a78      	ldr	r2, [pc, #480]	; (8011114 <_ZN15Screen1ViewBaseD1Ev+0x1ec>)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f003 f80d 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f003 f8dd 	bl	8014108 <_ZN8touchgfx5GaugeD1Ev>
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8010f54:	4618      	mov	r0, r3
 8010f56:	f003 f823 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8010f60:	4618      	mov	r0, r3
 8010f62:	f003 f81d 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f003 f817 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f003 f811 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8010f84:	4618      	mov	r0, r3
 8010f86:	f003 f80b 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8010f90:	4618      	mov	r0, r3
 8010f92:	f003 f805 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f002 ffff 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f002 fff9 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f002 fff3 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f002 ffed 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f002 ffe7 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f002 ffe1 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f002 ffdb 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f002 ffd5 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f002 ffcf 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8011008:	4618      	mov	r0, r3
 801100a:	f002 ffc9 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011014:	4618      	mov	r0, r3
 8011016:	f002 ffc3 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8011020:	4618      	mov	r0, r3
 8011022:	f002 ffbd 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 801102c:	4618      	mov	r0, r3
 801102e:	f002 ffb7 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011038:	4618      	mov	r0, r3
 801103a:	f002 ffb1 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011044:	4618      	mov	r0, r3
 8011046:	f002 ffab 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011050:	4618      	mov	r0, r3
 8011052:	f002 ffa5 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801105c:	4618      	mov	r0, r3
 801105e:	f002 ff9f 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8011068:	4618      	mov	r0, r3
 801106a:	f002 ff99 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011074:	4618      	mov	r0, r3
 8011076:	f002 ff71 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011080:	4618      	mov	r0, r3
 8011082:	f002 ff6b 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801108c:	4618      	mov	r0, r3
 801108e:	f002 ff65 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8011098:	4618      	mov	r0, r3
 801109a:	f002 ff5f 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80110a4:	4618      	mov	r0, r3
 80110a6:	f002 ff59 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80110b0:	4618      	mov	r0, r3
 80110b2:	f002 ff53 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80110bc:	4618      	mov	r0, r3
 80110be:	f002 ff4d 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80110c8:	4618      	mov	r0, r3
 80110ca:	f002 ff47 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	33f0      	adds	r3, #240	; 0xf0
 80110d2:	4618      	mov	r0, r3
 80110d4:	f002 ff42 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	33c4      	adds	r3, #196	; 0xc4
 80110dc:	4618      	mov	r0, r3
 80110de:	f002 ff3d 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	3398      	adds	r3, #152	; 0x98
 80110e6:	4618      	mov	r0, r3
 80110e8:	f002 ff38 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	336c      	adds	r3, #108	; 0x6c
 80110f0:	4618      	mov	r0, r3
 80110f2:	f002 ff11 	bl	8013f18 <_ZN8touchgfx3BoxD1Ev>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	3340      	adds	r3, #64	; 0x40
 80110fa:	4618      	mov	r0, r3
 80110fc:	f002 ff0c 	bl	8013f18 <_ZN8touchgfx3BoxD1Ev>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	4618      	mov	r0, r3
 8011104:	f7ff feee 	bl	8010ee4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	4618      	mov	r0, r3
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	0802ff78 	.word	0x0802ff78

08011118 <_ZN15Screen1ViewBaseD0Ev>:
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f7ff ff01 	bl	8010f28 <_ZN15Screen1ViewBaseD1Ev>
 8011126:	f640 518c 	movw	r1, #3468	; 0xd8c
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f01c f871 	bl	802d212 <_ZdlPvj>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	4618      	mov	r0, r3
 8011134:	3708      	adds	r7, #8
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
	...

0801113c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 801113c:	b590      	push	{r4, r7, lr}
 801113e:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 8011142:	af02      	add	r7, sp, #8
 8011144:	1d3b      	adds	r3, r7, #4
 8011146:	6018      	str	r0, [r3, #0]
 8011148:	1d3b      	adds	r3, r7, #4
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	4618      	mov	r0, r3
 801114e:	f002 feab 	bl	8013ea8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8011152:	4ae5      	ldr	r2, [pc, #916]	; (80114e8 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
 8011154:	1d3b      	adds	r3, r7, #4
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	601a      	str	r2, [r3, #0]
 801115a:	1d3b      	adds	r3, r7, #4
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	3340      	adds	r3, #64	; 0x40
 8011160:	4618      	mov	r0, r3
 8011162:	f7ff fdcb 	bl	8010cfc <_ZN8touchgfx3BoxC1Ev>
 8011166:	1d3b      	adds	r3, r7, #4
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	336c      	adds	r3, #108	; 0x6c
 801116c:	4618      	mov	r0, r3
 801116e:	f7ff fdc5 	bl	8010cfc <_ZN8touchgfx3BoxC1Ev>
 8011172:	1d3b      	adds	r3, r7, #4
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	f103 0498 	add.w	r4, r3, #152	; 0x98
 801117a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801117e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011182:	4618      	mov	r0, r3
 8011184:	f7ff fb5c 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011188:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801118c:	4619      	mov	r1, r3
 801118e:	4620      	mov	r0, r4
 8011190:	f7ff fde6 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011194:	1d3b      	adds	r3, r7, #4
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 801119c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80111a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7ff fb4b 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 80111aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80111ae:	4619      	mov	r1, r3
 80111b0:	4620      	mov	r0, r4
 80111b2:	f7ff fdd5 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80111b6:	1d3b      	adds	r3, r7, #4
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80111be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80111c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7ff fb3a 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 80111cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80111d0:	4619      	mov	r1, r3
 80111d2:	4620      	mov	r0, r4
 80111d4:	f7ff fdc4 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80111d8:	1d3b      	adds	r3, r7, #4
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 80111e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80111e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff fb29 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 80111ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80111f2:	4619      	mov	r1, r3
 80111f4:	4620      	mov	r0, r4
 80111f6:	f7ff fdb3 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80111fa:	1d3b      	adds	r3, r7, #4
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 8011202:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011206:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801120a:	4618      	mov	r0, r3
 801120c:	f7ff fb18 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011210:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011214:	4619      	mov	r1, r3
 8011216:	4620      	mov	r0, r4
 8011218:	f7ff fda2 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801121c:	1d3b      	adds	r3, r7, #4
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011224:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011228:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801122c:	4618      	mov	r0, r3
 801122e:	f7ff fb07 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011232:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011236:	4619      	mov	r1, r3
 8011238:	4620      	mov	r0, r4
 801123a:	f7ff fd91 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801123e:	1d3b      	adds	r3, r7, #4
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 8011246:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801124a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801124e:	4618      	mov	r0, r3
 8011250:	f7ff faf6 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011254:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011258:	4619      	mov	r1, r3
 801125a:	4620      	mov	r0, r4
 801125c:	f7ff fd80 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011260:	1d3b      	adds	r3, r7, #4
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8011268:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801126c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011270:	4618      	mov	r0, r3
 8011272:	f7ff fae5 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011276:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801127a:	4619      	mov	r1, r3
 801127c:	4620      	mov	r0, r4
 801127e:	f7ff fd6f 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8011282:	1d3b      	adds	r3, r7, #4
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 801128a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801128e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011292:	4618      	mov	r0, r3
 8011294:	f7ff fad4 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011298:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801129c:	4619      	mov	r1, r3
 801129e:	4620      	mov	r0, r4
 80112a0:	f7ff fd5e 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112a4:	1d3b      	adds	r3, r7, #4
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f503 7409 	add.w	r4, r3, #548	; 0x224
 80112ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80112b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ff fac3 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 80112ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80112be:	4619      	mov	r1, r3
 80112c0:	4620      	mov	r0, r4
 80112c2:	f7ff fd4d 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112c6:	1d3b      	adds	r3, r7, #4
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	f503 7414 	add.w	r4, r3, #592	; 0x250
 80112ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80112d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7ff fab2 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 80112dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80112e0:	4619      	mov	r1, r3
 80112e2:	4620      	mov	r0, r4
 80112e4:	f7ff fd3c 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80112e8:	1d3b      	adds	r3, r7, #4
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7ff fdd3 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112f6:	1d3b      	adds	r3, r7, #4
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80112fe:	4618      	mov	r0, r3
 8011300:	f7ff fdcc 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011304:	1d3b      	adds	r3, r7, #4
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 801130c:	4618      	mov	r0, r3
 801130e:	f7ff fdc5 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011312:	1d3b      	adds	r3, r7, #4
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 801131a:	4618      	mov	r0, r3
 801131c:	f7ff fdbe 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011320:	1d3b      	adds	r3, r7, #4
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011328:	4618      	mov	r0, r3
 801132a:	f7ff fdb7 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801132e:	1d3b      	adds	r3, r7, #4
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011336:	4618      	mov	r0, r3
 8011338:	f7ff fdb0 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801133c:	1d3b      	adds	r3, r7, #4
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8011344:	4618      	mov	r0, r3
 8011346:	f7ff fda9 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801134a:	1d3b      	adds	r3, r7, #4
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011352:	4618      	mov	r0, r3
 8011354:	f7ff fda2 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011358:	1d3b      	adds	r3, r7, #4
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8011360:	4618      	mov	r0, r3
 8011362:	f7ff fd9b 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011366:	1d3b      	adds	r3, r7, #4
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 801136e:	4618      	mov	r0, r3
 8011370:	f7ff fd94 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011374:	1d3b      	adds	r3, r7, #4
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 801137c:	4618      	mov	r0, r3
 801137e:	f7ff fd8d 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011382:	1d3b      	adds	r3, r7, #4
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 801138a:	4618      	mov	r0, r3
 801138c:	f7ff fd86 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011390:	1d3b      	adds	r3, r7, #4
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8011398:	4618      	mov	r0, r3
 801139a:	f7ff fd7f 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801139e:	1d3b      	adds	r3, r7, #4
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff fd78 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113ac:	1d3b      	adds	r3, r7, #4
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff fd71 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113ba:	1d3b      	adds	r3, r7, #4
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7ff fd6a 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113c8:	1d3b      	adds	r3, r7, #4
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7ff fd63 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113d6:	1d3b      	adds	r3, r7, #4
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 80113de:	4618      	mov	r0, r3
 80113e0:	f7ff fd5c 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113e4:	1d3b      	adds	r3, r7, #4
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7ff fd55 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113f2:	1d3b      	adds	r3, r7, #4
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7ff fd4e 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011400:	1d3b      	adds	r3, r7, #4
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8011408:	4618      	mov	r0, r3
 801140a:	f7ff fd47 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801140e:	1d3b      	adds	r3, r7, #4
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8011416:	4618      	mov	r0, r3
 8011418:	f7ff fd40 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801141c:	1d3b      	adds	r3, r7, #4
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff fd39 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801142a:	1d3b      	adds	r3, r7, #4
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8011432:	4618      	mov	r0, r3
 8011434:	f7ff fd32 	bl	8010e9c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011438:	1d3b      	adds	r3, r7, #4
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8011440:	4618      	mov	r0, r3
 8011442:	f008 fe97 	bl	801a174 <_ZN8touchgfx5GaugeC1Ev>
 8011446:	1d3b      	adds	r3, r7, #4
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 801144e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011452:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011456:	4618      	mov	r0, r3
 8011458:	f7ff f9f2 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 801145c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011460:	4619      	mov	r1, r3
 8011462:	4620      	mov	r0, r4
 8011464:	f7ff fc7c 	bl	8010d60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{

    __background.setPosition(0, 0, 1024, 600);
 8011468:	1d3b      	adds	r3, r7, #4
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011470:	f44f 7316 	mov.w	r3, #600	; 0x258
 8011474:	9300      	str	r3, [sp, #0]
 8011476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801147a:	2200      	movs	r2, #0
 801147c:	2100      	movs	r1, #0
 801147e:	f7ff fa4a 	bl	8010916 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011482:	1d3b      	adds	r3, r7, #4
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801148a:	f207 23b5 	addw	r3, r7, #693	; 0x2b5
 801148e:	2200      	movs	r2, #0
 8011490:	701a      	strb	r2, [r3, #0]
 8011492:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8011496:	2200      	movs	r2, #0
 8011498:	701a      	strb	r2, [r3, #0]
 801149a:	f207 23b3 	addw	r3, r7, #691	; 0x2b3
 801149e:	2200      	movs	r2, #0
 80114a0:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80114a2:	f207 23b5 	addw	r3, r7, #693	; 0x2b5
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	041b      	lsls	r3, r3, #16
 80114aa:	461a      	mov	r2, r3
 80114ac:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80114b0:	781b      	ldrb	r3, [r3, #0]
 80114b2:	021b      	lsls	r3, r3, #8
 80114b4:	431a      	orrs	r2, r3
 80114b6:	f207 23b3 	addw	r3, r7, #691	; 0x2b3
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	4313      	orrs	r3, r2
 80114be:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80114c2:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80114c6:	4611      	mov	r1, r2
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7ff f993 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 80114ce:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	4619      	mov	r1, r3
 80114d6:	4620      	mov	r0, r4
 80114d8:	f7ff fc34 	bl	8010d44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(1, 0, 1024, 600);
 80114dc:	1d3b      	adds	r3, r7, #4
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80114e4:	e002      	b.n	80114ec <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 80114e6:	bf00      	nop
 80114e8:	0802ff78 	.word	0x0802ff78
 80114ec:	f44f 7316 	mov.w	r3, #600	; 0x258
 80114f0:	9300      	str	r3, [sp, #0]
 80114f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114f6:	2200      	movs	r2, #0
 80114f8:	2101      	movs	r1, #1
 80114fa:	f7ff fa0c 	bl	8010916 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(43, 43, 43));
 80114fe:	1d3b      	adds	r3, r7, #4
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8011506:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801150a:	222b      	movs	r2, #43	; 0x2b
 801150c:	701a      	strb	r2, [r3, #0]
 801150e:	f207 23b7 	addw	r3, r7, #695	; 0x2b7
 8011512:	222b      	movs	r2, #43	; 0x2b
 8011514:	701a      	strb	r2, [r3, #0]
 8011516:	f207 23b6 	addw	r3, r7, #694	; 0x2b6
 801151a:	222b      	movs	r2, #43	; 0x2b
 801151c:	701a      	strb	r2, [r3, #0]
 801151e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	041b      	lsls	r3, r3, #16
 8011526:	461a      	mov	r2, r3
 8011528:	f207 23b7 	addw	r3, r7, #695	; 0x2b7
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	021b      	lsls	r3, r3, #8
 8011530:	431a      	orrs	r2, r3
 8011532:	f207 23b6 	addw	r3, r7, #694	; 0x2b6
 8011536:	781b      	ldrb	r3, [r3, #0]
 8011538:	4313      	orrs	r3, r2
 801153a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801153e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8011542:	4611      	mov	r1, r2
 8011544:	4618      	mov	r0, r3
 8011546:	f7ff f955 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 801154a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	4619      	mov	r1, r3
 8011552:	4620      	mov	r0, r4
 8011554:	f7ff fbf6 	bl	8010d44 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(-3, -9);
 8011558:	1d3b      	adds	r3, r7, #4
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	3398      	adds	r3, #152	; 0x98
 801155e:	f06f 0208 	mvn.w	r2, #8
 8011562:	f06f 0102 	mvn.w	r1, #2
 8011566:	4618      	mov	r0, r3
 8011568:	f7ff fa14 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_RACE_DASH_ID));
 801156c:	1d3b      	adds	r3, r7, #4
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8011574:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011578:	210e      	movs	r1, #14
 801157a:	4618      	mov	r0, r3
 801157c:	f7ff f960 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011580:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011584:	4619      	mov	r1, r3
 8011586:	4620      	mov	r0, r4
 8011588:	f009 f83c 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLeft.setXY(263, 29);
 801158c:	1d3b      	adds	r3, r7, #4
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	33c4      	adds	r3, #196	; 0xc4
 8011592:	221d      	movs	r2, #29
 8011594:	f240 1107 	movw	r1, #263	; 0x107
 8011598:	4618      	mov	r0, r3
 801159a:	f7ff f9fb 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indLeft.setBitmap(touchgfx::Bitmap(BITMAP_INDLEFT_ID));
 801159e:	1d3b      	adds	r3, r7, #4
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 80115a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80115aa:	2108      	movs	r1, #8
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7ff f947 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 80115b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80115b6:	4619      	mov	r1, r3
 80115b8:	4620      	mov	r0, r4
 80115ba:	f009 f823 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indRight.setXY(725, 29);
 80115be:	1d3b      	adds	r3, r7, #4
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	33f0      	adds	r3, #240	; 0xf0
 80115c4:	221d      	movs	r2, #29
 80115c6:	f240 21d5 	movw	r1, #725	; 0x2d5
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff f9e2 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indRight.setBitmap(touchgfx::Bitmap(BITMAP_INDRIGHT_ID));
 80115d0:	1d3b      	adds	r3, r7, #4
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 80115d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80115dc:	210c      	movs	r1, #12
 80115de:	4618      	mov	r0, r3
 80115e0:	f7ff f92e 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 80115e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80115e8:	4619      	mov	r1, r3
 80115ea:	4620      	mov	r0, r4
 80115ec:	f009 f80a 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indHigh.setXY(394, 282);
 80115f0:	1d3b      	adds	r3, r7, #4
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80115f8:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80115fc:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff f9c7 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indHigh.setBitmap(touchgfx::Bitmap(BITMAP_INDHIGH_ID));
 8011606:	1d3b      	adds	r3, r7, #4
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 801160e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011612:	2107      	movs	r1, #7
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff f913 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 801161a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801161e:	4619      	mov	r1, r3
 8011620:	4620      	mov	r0, r4
 8011622:	f008 ffef 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indFuel.setXY(563, 210);
 8011626:	1d3b      	adds	r3, r7, #4
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801162e:	22d2      	movs	r2, #210	; 0xd2
 8011630:	f240 2133 	movw	r1, #563	; 0x233
 8011634:	4618      	mov	r0, r3
 8011636:	f7ff f9ad 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indFuel.setBitmap(touchgfx::Bitmap(BITMAP_INDFUEL_ID));
 801163a:	1d3b      	adds	r3, r7, #4
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 8011642:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011646:	2106      	movs	r1, #6
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff f8f9 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 801164e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011652:	4619      	mov	r1, r3
 8011654:	4620      	mov	r0, r4
 8011656:	f008 ffd5 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indOil.setXY(410, 341);
 801165a:	1d3b      	adds	r3, r7, #4
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8011662:	f240 1255 	movw	r2, #341	; 0x155
 8011666:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801166a:	4618      	mov	r0, r3
 801166c:	f7ff f992 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indOil.setBitmap(touchgfx::Bitmap(BITMAP_INDOIL_ID));
 8011670:	1d3b      	adds	r3, r7, #4
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 8011678:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801167c:	210a      	movs	r1, #10
 801167e:	4618      	mov	r0, r3
 8011680:	f7ff f8de 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011684:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011688:	4619      	mov	r1, r3
 801168a:	4620      	mov	r0, r4
 801168c:	f008 ffba 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indBatt.setXY(425, 212);
 8011690:	1d3b      	adds	r3, r7, #4
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8011698:	22d4      	movs	r2, #212	; 0xd4
 801169a:	f240 11a9 	movw	r1, #425	; 0x1a9
 801169e:	4618      	mov	r0, r3
 80116a0:	f7ff f978 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indBatt.setBitmap(touchgfx::Bitmap(BITMAP_INDBATT_ID));
 80116a4:	1d3b      	adds	r3, r7, #4
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 80116ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80116b0:	2103      	movs	r1, #3
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7ff f8c4 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 80116b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80116bc:	4619      	mov	r1, r3
 80116be:	4620      	mov	r0, r4
 80116c0:	f008 ffa0 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indPark.setXY(496, 183);
 80116c4:	1d3b      	adds	r3, r7, #4
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80116cc:	22b7      	movs	r2, #183	; 0xb7
 80116ce:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7ff f95e 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indPark.setBitmap(touchgfx::Bitmap(BITMAP_INDPARK_ID));
 80116d8:	1d3b      	adds	r3, r7, #4
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80116e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80116e4:	210b      	movs	r1, #11
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7ff f8aa 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 80116ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80116f0:	4619      	mov	r1, r3
 80116f2:	4620      	mov	r0, r4
 80116f4:	f008 ff86 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indDTC.setXY(495, 229);
 80116f8:	1d3b      	adds	r3, r7, #4
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011700:	22e5      	movs	r2, #229	; 0xe5
 8011702:	f240 11ef 	movw	r1, #495	; 0x1ef
 8011706:	4618      	mov	r0, r3
 8011708:	f7ff f944 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indDTC.setBitmap(touchgfx::Bitmap(BITMAP_INDDTC_ID));
 801170c:	1d3b      	adds	r3, r7, #4
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8011714:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011718:	2104      	movs	r1, #4
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff f890 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011720:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011724:	4619      	mov	r1, r3
 8011726:	4620      	mov	r0, r4
 8011728:	f008 ff6c 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indECT.setXY(451, 374);
 801172c:	1d3b      	adds	r3, r7, #4
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011734:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8011738:	f240 11c3 	movw	r1, #451	; 0x1c3
 801173c:	4618      	mov	r0, r3
 801173e:	f7ff f929 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indECT.setBitmap(touchgfx::Bitmap(BITMAP_INDECT_ID));
 8011742:	1d3b      	adds	r3, r7, #4
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f503 7409 	add.w	r4, r3, #548	; 0x224
 801174a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801174e:	2105      	movs	r1, #5
 8011750:	4618      	mov	r0, r3
 8011752:	f7ff f875 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8011756:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801175a:	4619      	mov	r1, r3
 801175c:	4620      	mov	r0, r4
 801175e:	f008 ff51 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    indLow.setXY(452, 284);
 8011762:	1d3b      	adds	r3, r7, #4
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801176a:	f44f 728e 	mov.w	r2, #284	; 0x11c
 801176e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8011772:	4618      	mov	r0, r3
 8011774:	f7ff f90e 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    indLow.setBitmap(touchgfx::Bitmap(BITMAP_INDLOW_ID));
 8011778:	1d3b      	adds	r3, r7, #4
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f503 7414 	add.w	r4, r3, #592	; 0x250
 8011780:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011784:	2109      	movs	r1, #9
 8011786:	4618      	mov	r0, r3
 8011788:	f7ff f85a 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 801178c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011790:	4619      	mov	r1, r3
 8011792:	4620      	mov	r0, r4
 8011794:	f008 ff36 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    map_value.setXY(968, 20);
 8011798:	1d3b      	adds	r3, r7, #4
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80117a0:	2214      	movs	r2, #20
 80117a2:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff f8f4 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    map_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80117ac:	1d3b      	adds	r3, r7, #4
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 80117b4:	f207 23bb 	addw	r3, r7, #699	; 0x2bb
 80117b8:	22ff      	movs	r2, #255	; 0xff
 80117ba:	701a      	strb	r2, [r3, #0]
 80117bc:	f207 23ba 	addw	r3, r7, #698	; 0x2ba
 80117c0:	22ff      	movs	r2, #255	; 0xff
 80117c2:	701a      	strb	r2, [r3, #0]
 80117c4:	f207 23b9 	addw	r3, r7, #697	; 0x2b9
 80117c8:	22ff      	movs	r2, #255	; 0xff
 80117ca:	701a      	strb	r2, [r3, #0]
 80117cc:	f207 23bb 	addw	r3, r7, #699	; 0x2bb
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	041b      	lsls	r3, r3, #16
 80117d4:	461a      	mov	r2, r3
 80117d6:	f207 23ba 	addw	r3, r7, #698	; 0x2ba
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	021b      	lsls	r3, r3, #8
 80117de:	431a      	orrs	r2, r3
 80117e0:	f207 23b9 	addw	r3, r7, #697	; 0x2b9
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	4313      	orrs	r3, r2
 80117e8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80117ec:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80117f0:	4611      	mov	r1, r2
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fe fffe 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 80117f8:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	461a      	mov	r2, r3
 8011800:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8011804:	601c      	str	r4, [r3, #0]
 8011806:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801180a:	601a      	str	r2, [r3, #0]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 801180c:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8011816:	6812      	ldr	r2, [r2, #0]
 8011818:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801181a:	bf00      	nop
    map_value.setLinespacing(0);
 801181c:	1d3b      	adds	r3, r7, #4
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 8011824:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8011828:	601a      	str	r2, [r3, #0]
 801182a:	f207 23c2 	addw	r3, r7, #706	; 0x2c2
 801182e:	2200      	movs	r2, #0
 8011830:	801a      	strh	r2, [r3, #0]
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8011832:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	f207 22c2 	addw	r2, r7, #706	; 0x2c2
 801183c:	8812      	ldrh	r2, [r2, #0]
 801183e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011840:	bf00      	nop
    Unicode::snprintf(map_valueBuffer, MAP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1H44).getText());
 8011842:	1d3b      	adds	r3, r7, #4
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f603 244c 	addw	r4, r3, #2636	; 0xa4c
 801184a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801184e:	2119      	movs	r1, #25
 8011850:	4618      	mov	r0, r3
 8011852:	f7ff faab 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8011856:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801185a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801185e:	601a      	str	r2, [r3, #0]
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011860:	4bc5      	ldr	r3, [pc, #788]	; (8011b78 <_ZN15Screen1ViewBaseC1Ev+0xa3c>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d105      	bne.n	8011874 <_ZN15Screen1ViewBaseC1Ev+0x738>
 8011868:	4bc4      	ldr	r3, [pc, #784]	; (8011b7c <_ZN15Screen1ViewBaseC1Ev+0xa40>)
 801186a:	4ac5      	ldr	r2, [pc, #788]	; (8011b80 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 801186c:	21ae      	movs	r1, #174	; 0xae
 801186e:	48c5      	ldr	r0, [pc, #788]	; (8011b84 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011870:	f01c faee 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011874:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	889a      	ldrh	r2, [r3, #4]
 801187c:	4bc2      	ldr	r3, [pc, #776]	; (8011b88 <_ZN15Screen1ViewBaseC1Ev+0xa4c>)
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	429a      	cmp	r2, r3
 8011882:	d305      	bcc.n	8011890 <_ZN15Screen1ViewBaseC1Ev+0x754>
 8011884:	4bc1      	ldr	r3, [pc, #772]	; (8011b8c <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 8011886:	4abe      	ldr	r2, [pc, #760]	; (8011b80 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 8011888:	21af      	movs	r1, #175	; 0xaf
 801188a:	48be      	ldr	r0, [pc, #760]	; (8011b84 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 801188c:	f01c fae0 	bl	802de50 <__assert_func>
    }
 8011890:	bf00      	nop
        return texts->getText(typedTextId);
 8011892:	4bbf      	ldr	r3, [pc, #764]	; (8011b90 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 8011894:	681a      	ldr	r2, [r3, #0]
 8011896:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801189a:	889b      	ldrh	r3, [r3, #4]
 801189c:	4619      	mov	r1, r3
 801189e:	4610      	mov	r0, r2
 80118a0:	f002 fe06 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 80118a4:	4603      	mov	r3, r0
 80118a6:	bf00      	nop
 80118a8:	4aba      	ldr	r2, [pc, #744]	; (8011b94 <_ZN15Screen1ViewBaseC1Ev+0xa58>)
 80118aa:	2120      	movs	r1, #32
 80118ac:	4620      	mov	r0, r4
 80118ae:	f00d fd1b 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80118b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fe f8f6 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    map_value.setWildcard(map_valueBuffer);
 80118bc:	1d3b      	adds	r3, r7, #4
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	f503 721f 	add.w	r2, r3, #636	; 0x27c
 80118c4:	1d3b      	adds	r3, r7, #4
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f603 234c 	addw	r3, r3, #2636	; 0xa4c
 80118cc:	4619      	mov	r1, r3
 80118ce:	4610      	mov	r0, r2
 80118d0:	f7ff fafa 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_value.resizeToCurrentText();
 80118d4:	1d3b      	adds	r3, r7, #4
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80118dc:	4618      	mov	r0, r3
 80118de:	f008 fb37 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LQYM));
 80118e2:	1d3b      	adds	r3, r7, #4
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f503 741f 	add.w	r4, r3, #636	; 0x27c
 80118ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80118ee:	2117      	movs	r1, #23
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7ff fa5b 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80118f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80118fa:	4619      	mov	r1, r3
 80118fc:	4620      	mov	r0, r4
 80118fe:	f008 fb44 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011902:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011906:	4618      	mov	r0, r3
 8011908:	f7fe f8ce 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    map_label.setXY(917, 103);
 801190c:	1d3b      	adds	r3, r7, #4
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8011914:	2267      	movs	r2, #103	; 0x67
 8011916:	f240 3195 	movw	r1, #917	; 0x395
 801191a:	4618      	mov	r0, r3
 801191c:	f7ff f83a 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    map_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011920:	1d3b      	adds	r3, r7, #4
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8011928:	f207 23cf 	addw	r3, r7, #719	; 0x2cf
 801192c:	22ff      	movs	r2, #255	; 0xff
 801192e:	701a      	strb	r2, [r3, #0]
 8011930:	f207 23ce 	addw	r3, r7, #718	; 0x2ce
 8011934:	22ff      	movs	r2, #255	; 0xff
 8011936:	701a      	strb	r2, [r3, #0]
 8011938:	f207 23cd 	addw	r3, r7, #717	; 0x2cd
 801193c:	22ff      	movs	r2, #255	; 0xff
 801193e:	701a      	strb	r2, [r3, #0]
 8011940:	f207 23cf 	addw	r3, r7, #719	; 0x2cf
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	041b      	lsls	r3, r3, #16
 8011948:	461a      	mov	r2, r3
 801194a:	f207 23ce 	addw	r3, r7, #718	; 0x2ce
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	021b      	lsls	r3, r3, #8
 8011952:	431a      	orrs	r2, r3
 8011954:	f207 23cd 	addw	r3, r7, #717	; 0x2cd
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	4313      	orrs	r3, r2
 801195c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011960:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8011964:	4611      	mov	r1, r2
 8011966:	4618      	mov	r0, r3
 8011968:	f7fe ff44 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 801196c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	461a      	mov	r2, r3
 8011974:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8011978:	601c      	str	r4, [r3, #0]
 801197a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801197e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011980:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801198a:	6812      	ldr	r2, [r2, #0]
 801198c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801198e:	bf00      	nop
    map_label.setLinespacing(0);
 8011990:	1d3b      	adds	r3, r7, #4
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8011998:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801199c:	601a      	str	r2, [r3, #0]
 801199e:	f207 23d6 	addw	r3, r7, #726	; 0x2d6
 80119a2:	2200      	movs	r2, #0
 80119a4:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80119a6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f207 22d6 	addw	r2, r7, #726	; 0x2d6
 80119b0:	8812      	ldrh	r2, [r2, #0]
 80119b2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80119b4:	bf00      	nop
    Unicode::snprintf(map_labelBuffer, MAP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_FXL2).getText());
 80119b6:	1d3b      	adds	r3, r7, #4
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 80119be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80119c2:	211a      	movs	r1, #26
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7ff f9f1 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80119ca:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80119ce:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80119d2:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80119d4:	4b68      	ldr	r3, [pc, #416]	; (8011b78 <_ZN15Screen1ViewBaseC1Ev+0xa3c>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d105      	bne.n	80119e8 <_ZN15Screen1ViewBaseC1Ev+0x8ac>
 80119dc:	4b67      	ldr	r3, [pc, #412]	; (8011b7c <_ZN15Screen1ViewBaseC1Ev+0xa40>)
 80119de:	4a68      	ldr	r2, [pc, #416]	; (8011b80 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 80119e0:	21ae      	movs	r1, #174	; 0xae
 80119e2:	4868      	ldr	r0, [pc, #416]	; (8011b84 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 80119e4:	f01c fa34 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80119e8:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	889a      	ldrh	r2, [r3, #4]
 80119f0:	4b65      	ldr	r3, [pc, #404]	; (8011b88 <_ZN15Screen1ViewBaseC1Ev+0xa4c>)
 80119f2:	881b      	ldrh	r3, [r3, #0]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d305      	bcc.n	8011a04 <_ZN15Screen1ViewBaseC1Ev+0x8c8>
 80119f8:	4b64      	ldr	r3, [pc, #400]	; (8011b8c <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 80119fa:	4a61      	ldr	r2, [pc, #388]	; (8011b80 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 80119fc:	21af      	movs	r1, #175	; 0xaf
 80119fe:	4861      	ldr	r0, [pc, #388]	; (8011b84 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011a00:	f01c fa26 	bl	802de50 <__assert_func>
    }
 8011a04:	bf00      	nop
        return texts->getText(typedTextId);
 8011a06:	4b62      	ldr	r3, [pc, #392]	; (8011b90 <_ZN15Screen1ViewBaseC1Ev+0xa54>)
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011a0e:	889b      	ldrh	r3, [r3, #4]
 8011a10:	4619      	mov	r1, r3
 8011a12:	4610      	mov	r0, r2
 8011a14:	f002 fd4c 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	bf00      	nop
 8011a1c:	4a5d      	ldr	r2, [pc, #372]	; (8011b94 <_ZN15Screen1ViewBaseC1Ev+0xa58>)
 8011a1e:	210a      	movs	r1, #10
 8011a20:	4620      	mov	r0, r4
 8011a22:	f00d fc61 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011a26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7fe f83c 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    map_label.setWildcard(map_labelBuffer);
 8011a30:	1d3b      	adds	r3, r7, #4
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8011a38:	1d3b      	adds	r3, r7, #4
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8011a40:	4619      	mov	r1, r3
 8011a42:	4610      	mov	r0, r2
 8011a44:	f7ff fa40 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_label.resizeToCurrentText();
 8011a48:	1d3b      	adds	r3, r7, #4
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8011a50:	4618      	mov	r0, r3
 8011a52:	f008 fa7d 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W2NZ));
 8011a56:	1d3b      	adds	r3, r7, #4
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8011a5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8011a62:	2115      	movs	r1, #21
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7ff f9a1 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8011a6a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8011a6e:	4619      	mov	r1, r3
 8011a70:	4620      	mov	r0, r4
 8011a72:	f008 fa8a 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011a76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fe f814 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    map_units.setXY(781, 103);
 8011a80:	1d3b      	adds	r3, r7, #4
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011a88:	2267      	movs	r2, #103	; 0x67
 8011a8a:	f240 310d 	movw	r1, #781	; 0x30d
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7fe ff80 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    map_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011a94:	1d3b      	adds	r3, r7, #4
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 8011a9c:	f207 23e3 	addw	r3, r7, #739	; 0x2e3
 8011aa0:	22ff      	movs	r2, #255	; 0xff
 8011aa2:	701a      	strb	r2, [r3, #0]
 8011aa4:	f207 23e2 	addw	r3, r7, #738	; 0x2e2
 8011aa8:	22ff      	movs	r2, #255	; 0xff
 8011aaa:	701a      	strb	r2, [r3, #0]
 8011aac:	f207 23e1 	addw	r3, r7, #737	; 0x2e1
 8011ab0:	22ff      	movs	r2, #255	; 0xff
 8011ab2:	701a      	strb	r2, [r3, #0]
 8011ab4:	f207 23e3 	addw	r3, r7, #739	; 0x2e3
 8011ab8:	781b      	ldrb	r3, [r3, #0]
 8011aba:	041b      	lsls	r3, r3, #16
 8011abc:	461a      	mov	r2, r3
 8011abe:	f207 23e2 	addw	r3, r7, #738	; 0x2e2
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	021b      	lsls	r3, r3, #8
 8011ac6:	431a      	orrs	r2, r3
 8011ac8:	f207 23e1 	addw	r3, r7, #737	; 0x2e1
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	4313      	orrs	r3, r2
 8011ad0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011ad4:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8011ad8:	4611      	mov	r1, r2
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fe fe8a 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8011ae0:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8011aec:	601c      	str	r4, [r3, #0]
 8011aee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8011af2:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011af4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011afe:	6812      	ldr	r2, [r2, #0]
 8011b00:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011b02:	bf00      	nop
    map_units.setLinespacing(0);
 8011b04:	1d3b      	adds	r3, r7, #4
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8011b0c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8011b10:	601a      	str	r2, [r3, #0]
 8011b12:	f207 23ea 	addw	r3, r7, #746	; 0x2ea
 8011b16:	2200      	movs	r2, #0
 8011b18:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011b1a:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	f207 22ea 	addw	r2, r7, #746	; 0x2ea
 8011b24:	8812      	ldrh	r2, [r2, #0]
 8011b26:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011b28:	bf00      	nop
    Unicode::snprintf(map_unitsBuffer, MAP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_13X6).getText());
 8011b2a:	1d3b      	adds	r3, r7, #4
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f503 642a 	add.w	r4, r3, #2720	; 0xaa0
 8011b32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011b36:	2118      	movs	r1, #24
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7ff f937 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8011b3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8011b42:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8011b46:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011b48:	4b0b      	ldr	r3, [pc, #44]	; (8011b78 <_ZN15Screen1ViewBaseC1Ev+0xa3c>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d105      	bne.n	8011b5c <_ZN15Screen1ViewBaseC1Ev+0xa20>
 8011b50:	4b0a      	ldr	r3, [pc, #40]	; (8011b7c <_ZN15Screen1ViewBaseC1Ev+0xa40>)
 8011b52:	4a0b      	ldr	r2, [pc, #44]	; (8011b80 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 8011b54:	21ae      	movs	r1, #174	; 0xae
 8011b56:	480b      	ldr	r0, [pc, #44]	; (8011b84 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011b58:	f01c f97a 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011b5c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	889a      	ldrh	r2, [r3, #4]
 8011b64:	4b08      	ldr	r3, [pc, #32]	; (8011b88 <_ZN15Screen1ViewBaseC1Ev+0xa4c>)
 8011b66:	881b      	ldrh	r3, [r3, #0]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d315      	bcc.n	8011b98 <_ZN15Screen1ViewBaseC1Ev+0xa5c>
 8011b6c:	4b07      	ldr	r3, [pc, #28]	; (8011b8c <_ZN15Screen1ViewBaseC1Ev+0xa50>)
 8011b6e:	4a04      	ldr	r2, [pc, #16]	; (8011b80 <_ZN15Screen1ViewBaseC1Ev+0xa44>)
 8011b70:	21af      	movs	r1, #175	; 0xaf
 8011b72:	4804      	ldr	r0, [pc, #16]	; (8011b84 <_ZN15Screen1ViewBaseC1Ev+0xa48>)
 8011b74:	f01c f96c 	bl	802de50 <__assert_func>
 8011b78:	200097f8 	.word	0x200097f8
 8011b7c:	0802f430 	.word	0x0802f430
 8011b80:	0802f474 	.word	0x0802f474
 8011b84:	0802f4a4 	.word	0x0802f4a4
 8011b88:	200097fc 	.word	0x200097fc
 8011b8c:	0802f4e8 	.word	0x0802f4e8
 8011b90:	20009804 	.word	0x20009804
 8011b94:	0802f53c 	.word	0x0802f53c
    }
 8011b98:	bf00      	nop
        return texts->getText(typedTextId);
 8011b9a:	4bb9      	ldr	r3, [pc, #740]	; (8011e80 <_ZN15Screen1ViewBaseC1Ev+0xd44>)
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011ba2:	889b      	ldrh	r3, [r3, #4]
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	4610      	mov	r0, r2
 8011ba8:	f002 fc82 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8011bac:	4603      	mov	r3, r0
 8011bae:	bf00      	nop
 8011bb0:	4ab4      	ldr	r2, [pc, #720]	; (8011e84 <_ZN15Screen1ViewBaseC1Ev+0xd48>)
 8011bb2:	210a      	movs	r1, #10
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f00d fb97 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011bba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fd ff72 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    map_units.setWildcard(map_unitsBuffer);
 8011bc4:	1d3b      	adds	r3, r7, #4
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f503 723f 	add.w	r2, r3, #764	; 0x2fc
 8011bcc:	1d3b      	adds	r3, r7, #4
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f503 632a 	add.w	r3, r3, #2720	; 0xaa0
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	f7ff f976 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    map_units.resizeToCurrentText();
 8011bdc:	1d3b      	adds	r3, r7, #4
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8011be4:	4618      	mov	r0, r3
 8011be6:	f008 f9b3 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    map_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G76O));
 8011bea:	1d3b      	adds	r3, r7, #4
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f503 743f 	add.w	r4, r3, #764	; 0x2fc
 8011bf2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8011bf6:	2116      	movs	r1, #22
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7ff f8d7 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8011bfe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8011c02:	4619      	mov	r1, r3
 8011c04:	4620      	mov	r0, r4
 8011c06:	f008 f9c0 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011c0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7fd ff4a 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    batt_value.setXY(968, 167);
 8011c14:	1d3b      	adds	r3, r7, #4
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011c1c:	22a7      	movs	r2, #167	; 0xa7
 8011c1e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7fe feb6 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    batt_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011c28:	1d3b      	adds	r3, r7, #4
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	f503 744f 	add.w	r4, r3, #828	; 0x33c
 8011c30:	f207 23f7 	addw	r3, r7, #759	; 0x2f7
 8011c34:	22ff      	movs	r2, #255	; 0xff
 8011c36:	701a      	strb	r2, [r3, #0]
 8011c38:	f207 23f6 	addw	r3, r7, #758	; 0x2f6
 8011c3c:	22ff      	movs	r2, #255	; 0xff
 8011c3e:	701a      	strb	r2, [r3, #0]
 8011c40:	f207 23f5 	addw	r3, r7, #757	; 0x2f5
 8011c44:	22ff      	movs	r2, #255	; 0xff
 8011c46:	701a      	strb	r2, [r3, #0]
 8011c48:	f207 23f7 	addw	r3, r7, #759	; 0x2f7
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	041b      	lsls	r3, r3, #16
 8011c50:	461a      	mov	r2, r3
 8011c52:	f207 23f6 	addw	r3, r7, #758	; 0x2f6
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	021b      	lsls	r3, r3, #8
 8011c5a:	431a      	orrs	r2, r3
 8011c5c:	f207 23f5 	addw	r3, r7, #757	; 0x2f5
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	4313      	orrs	r3, r2
 8011c64:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011c68:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7fe fdc0 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8011c74:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011c80:	601c      	str	r4, [r3, #0]
 8011c82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011c86:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011c88:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011c92:	6812      	ldr	r2, [r2, #0]
 8011c94:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011c96:	bf00      	nop
    batt_value.setLinespacing(0);
 8011c98:	1d3b      	adds	r3, r7, #4
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8011ca0:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8011ca4:	601a      	str	r2, [r3, #0]
 8011ca6:	f207 23fe 	addw	r3, r7, #766	; 0x2fe
 8011caa:	2200      	movs	r2, #0
 8011cac:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011cae:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	f207 22fe 	addw	r2, r7, #766	; 0x2fe
 8011cb8:	8812      	ldrh	r2, [r2, #0]
 8011cba:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011cbc:	bf00      	nop
    Unicode::snprintf(batt_valueBuffer, BATT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_TSMP).getText());
 8011cbe:	1d3b      	adds	r3, r7, #4
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8011cc6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8011cca:	211f      	movs	r1, #31
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7ff f86d 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8011cd2:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8011cd6:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8011cda:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011cdc:	4b6a      	ldr	r3, [pc, #424]	; (8011e88 <_ZN15Screen1ViewBaseC1Ev+0xd4c>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d105      	bne.n	8011cf0 <_ZN15Screen1ViewBaseC1Ev+0xbb4>
 8011ce4:	4b69      	ldr	r3, [pc, #420]	; (8011e8c <_ZN15Screen1ViewBaseC1Ev+0xd50>)
 8011ce6:	4a6a      	ldr	r2, [pc, #424]	; (8011e90 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011ce8:	21ae      	movs	r1, #174	; 0xae
 8011cea:	486a      	ldr	r0, [pc, #424]	; (8011e94 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011cec:	f01c f8b0 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011cf0:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	889a      	ldrh	r2, [r3, #4]
 8011cf8:	4b67      	ldr	r3, [pc, #412]	; (8011e98 <_ZN15Screen1ViewBaseC1Ev+0xd5c>)
 8011cfa:	881b      	ldrh	r3, [r3, #0]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d305      	bcc.n	8011d0c <_ZN15Screen1ViewBaseC1Ev+0xbd0>
 8011d00:	4b66      	ldr	r3, [pc, #408]	; (8011e9c <_ZN15Screen1ViewBaseC1Ev+0xd60>)
 8011d02:	4a63      	ldr	r2, [pc, #396]	; (8011e90 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011d04:	21af      	movs	r1, #175	; 0xaf
 8011d06:	4863      	ldr	r0, [pc, #396]	; (8011e94 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011d08:	f01c f8a2 	bl	802de50 <__assert_func>
    }
 8011d0c:	bf00      	nop
        return texts->getText(typedTextId);
 8011d0e:	4b5c      	ldr	r3, [pc, #368]	; (8011e80 <_ZN15Screen1ViewBaseC1Ev+0xd44>)
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8011d16:	889b      	ldrh	r3, [r3, #4]
 8011d18:	4619      	mov	r1, r3
 8011d1a:	4610      	mov	r0, r2
 8011d1c:	f002 fbc8 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8011d20:	4603      	mov	r3, r0
 8011d22:	bf00      	nop
 8011d24:	4a57      	ldr	r2, [pc, #348]	; (8011e84 <_ZN15Screen1ViewBaseC1Ev+0xd48>)
 8011d26:	2120      	movs	r1, #32
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f00d fadd 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011d2e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7fd feb8 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    batt_value.setWildcard(batt_valueBuffer);
 8011d38:	1d3b      	adds	r3, r7, #4
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 8011d40:	1d3b      	adds	r3, r7, #4
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8011d48:	4619      	mov	r1, r3
 8011d4a:	4610      	mov	r0, r2
 8011d4c:	f7ff f8bc 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_value.resizeToCurrentText();
 8011d50:	1d3b      	adds	r3, r7, #4
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f008 f8f9 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_391O));
 8011d5e:	1d3b      	adds	r3, r7, #4
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f503 744f 	add.w	r4, r3, #828	; 0x33c
 8011d66:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011d6a:	2114      	movs	r1, #20
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7ff f81d 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8011d72:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011d76:	4619      	mov	r1, r3
 8011d78:	4620      	mov	r0, r4
 8011d7a:	f008 f906 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011d7e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fd fe90 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    batt_label.setXY(917, 247);
 8011d88:	1d3b      	adds	r3, r7, #4
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011d90:	22f7      	movs	r2, #247	; 0xf7
 8011d92:	f240 3195 	movw	r1, #917	; 0x395
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fe fdfc 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    batt_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011d9c:	1d3b      	adds	r3, r7, #4
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8011da4:	f207 330b 	addw	r3, r7, #779	; 0x30b
 8011da8:	22ff      	movs	r2, #255	; 0xff
 8011daa:	701a      	strb	r2, [r3, #0]
 8011dac:	f207 330a 	addw	r3, r7, #778	; 0x30a
 8011db0:	22ff      	movs	r2, #255	; 0xff
 8011db2:	701a      	strb	r2, [r3, #0]
 8011db4:	f207 3309 	addw	r3, r7, #777	; 0x309
 8011db8:	22ff      	movs	r2, #255	; 0xff
 8011dba:	701a      	strb	r2, [r3, #0]
 8011dbc:	f207 330b 	addw	r3, r7, #779	; 0x30b
 8011dc0:	781b      	ldrb	r3, [r3, #0]
 8011dc2:	041b      	lsls	r3, r3, #16
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	f207 330a 	addw	r3, r7, #778	; 0x30a
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	021b      	lsls	r3, r3, #8
 8011dce:	431a      	orrs	r2, r3
 8011dd0:	f207 3309 	addw	r3, r7, #777	; 0x309
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	4313      	orrs	r3, r2
 8011dd8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011ddc:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8011de0:	4611      	mov	r1, r2
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fe fd06 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8011de8:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	461a      	mov	r2, r3
 8011df0:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8011df4:	601c      	str	r4, [r3, #0]
 8011df6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011dfa:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011dfc:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8011e06:	6812      	ldr	r2, [r2, #0]
 8011e08:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011e0a:	bf00      	nop
    batt_label.setLinespacing(0);
 8011e0c:	1d3b      	adds	r3, r7, #4
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 8011e14:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8011e18:	601a      	str	r2, [r3, #0]
 8011e1a:	f207 3312 	addw	r3, r7, #786	; 0x312
 8011e1e:	2200      	movs	r2, #0
 8011e20:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011e22:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f207 3212 	addw	r2, r7, #786	; 0x312
 8011e2c:	8812      	ldrh	r2, [r2, #0]
 8011e2e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011e30:	bf00      	nop
    Unicode::snprintf(batt_labelBuffer, BATT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RUP7).getText());
 8011e32:	1d3b      	adds	r3, r7, #4
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	f603 24f4 	addw	r4, r3, #2804	; 0xaf4
 8011e3a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8011e3e:	2123      	movs	r1, #35	; 0x23
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7fe ffb3 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8011e46:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8011e4a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8011e4e:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011e50:	4b0d      	ldr	r3, [pc, #52]	; (8011e88 <_ZN15Screen1ViewBaseC1Ev+0xd4c>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d105      	bne.n	8011e64 <_ZN15Screen1ViewBaseC1Ev+0xd28>
 8011e58:	4b0c      	ldr	r3, [pc, #48]	; (8011e8c <_ZN15Screen1ViewBaseC1Ev+0xd50>)
 8011e5a:	4a0d      	ldr	r2, [pc, #52]	; (8011e90 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011e5c:	21ae      	movs	r1, #174	; 0xae
 8011e5e:	480d      	ldr	r0, [pc, #52]	; (8011e94 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011e60:	f01b fff6 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011e64:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	889a      	ldrh	r2, [r3, #4]
 8011e6c:	4b0a      	ldr	r3, [pc, #40]	; (8011e98 <_ZN15Screen1ViewBaseC1Ev+0xd5c>)
 8011e6e:	881b      	ldrh	r3, [r3, #0]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d315      	bcc.n	8011ea0 <_ZN15Screen1ViewBaseC1Ev+0xd64>
 8011e74:	4b09      	ldr	r3, [pc, #36]	; (8011e9c <_ZN15Screen1ViewBaseC1Ev+0xd60>)
 8011e76:	4a06      	ldr	r2, [pc, #24]	; (8011e90 <_ZN15Screen1ViewBaseC1Ev+0xd54>)
 8011e78:	21af      	movs	r1, #175	; 0xaf
 8011e7a:	4806      	ldr	r0, [pc, #24]	; (8011e94 <_ZN15Screen1ViewBaseC1Ev+0xd58>)
 8011e7c:	f01b ffe8 	bl	802de50 <__assert_func>
 8011e80:	20009804 	.word	0x20009804
 8011e84:	0802f53c 	.word	0x0802f53c
 8011e88:	200097f8 	.word	0x200097f8
 8011e8c:	0802f430 	.word	0x0802f430
 8011e90:	0802f474 	.word	0x0802f474
 8011e94:	0802f4a4 	.word	0x0802f4a4
 8011e98:	200097fc 	.word	0x200097fc
 8011e9c:	0802f4e8 	.word	0x0802f4e8
    }
 8011ea0:	bf00      	nop
        return texts->getText(typedTextId);
 8011ea2:	4bba      	ldr	r3, [pc, #744]	; (801218c <_ZN15Screen1ViewBaseC1Ev+0x1050>)
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8011eaa:	889b      	ldrh	r3, [r3, #4]
 8011eac:	4619      	mov	r1, r3
 8011eae:	4610      	mov	r0, r2
 8011eb0:	f002 fafe 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	bf00      	nop
 8011eb8:	4ab5      	ldr	r2, [pc, #724]	; (8012190 <_ZN15Screen1ViewBaseC1Ev+0x1054>)
 8011eba:	210a      	movs	r1, #10
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f00d fa13 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011ec2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7fd fdee 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    batt_label.setWildcard(batt_labelBuffer);
 8011ecc:	1d3b      	adds	r3, r7, #4
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 8011ed4:	1d3b      	adds	r3, r7, #4
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f603 23f4 	addw	r3, r3, #2804	; 0xaf4
 8011edc:	4619      	mov	r1, r3
 8011ede:	4610      	mov	r0, r2
 8011ee0:	f7fe fff2 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_label.resizeToCurrentText();
 8011ee4:	1d3b      	adds	r3, r7, #4
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8011eec:	4618      	mov	r0, r3
 8011eee:	f008 f82f 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4QE0));
 8011ef2:	1d3b      	adds	r3, r7, #4
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 8011efa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8011efe:	2113      	movs	r1, #19
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fe ff53 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8011f06:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	f008 f83c 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011f12:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fd fdc6 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    batt_units.setXY(831, 247);
 8011f1c:	1d3b      	adds	r3, r7, #4
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011f24:	22f7      	movs	r2, #247	; 0xf7
 8011f26:	f240 313f 	movw	r1, #831	; 0x33f
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7fe fd32 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    batt_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011f30:	1d3b      	adds	r3, r7, #4
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8011f38:	f207 331f 	addw	r3, r7, #799	; 0x31f
 8011f3c:	22ff      	movs	r2, #255	; 0xff
 8011f3e:	701a      	strb	r2, [r3, #0]
 8011f40:	f207 331e 	addw	r3, r7, #798	; 0x31e
 8011f44:	22ff      	movs	r2, #255	; 0xff
 8011f46:	701a      	strb	r2, [r3, #0]
 8011f48:	f207 331d 	addw	r3, r7, #797	; 0x31d
 8011f4c:	22ff      	movs	r2, #255	; 0xff
 8011f4e:	701a      	strb	r2, [r3, #0]
 8011f50:	f207 331f 	addw	r3, r7, #799	; 0x31f
 8011f54:	781b      	ldrb	r3, [r3, #0]
 8011f56:	041b      	lsls	r3, r3, #16
 8011f58:	461a      	mov	r2, r3
 8011f5a:	f207 331e 	addw	r3, r7, #798	; 0x31e
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	021b      	lsls	r3, r3, #8
 8011f62:	431a      	orrs	r2, r3
 8011f64:	f207 331d 	addw	r3, r7, #797	; 0x31d
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	4313      	orrs	r3, r2
 8011f6c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011f70:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8011f74:	4611      	mov	r1, r2
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7fe fc3c 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8011f7c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	461a      	mov	r2, r3
 8011f84:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8011f88:	601c      	str	r4, [r3, #0]
 8011f8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f8e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8011f90:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8011f9a:	6812      	ldr	r2, [r2, #0]
 8011f9c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011f9e:	bf00      	nop
    batt_units.setLinespacing(0);
 8011fa0:	1d3b      	adds	r3, r7, #4
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8011fa8:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8011fac:	601a      	str	r2, [r3, #0]
 8011fae:	f207 3326 	addw	r3, r7, #806	; 0x326
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011fb6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	f207 3226 	addw	r2, r7, #806	; 0x326
 8011fc0:	8812      	ldrh	r2, [r2, #0]
 8011fc2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8011fc4:	bf00      	nop
    Unicode::snprintf(batt_unitsBuffer, BATT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_F7I8).getText());
 8011fc6:	1d3b      	adds	r3, r7, #4
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	f603 3408 	addw	r4, r3, #2824	; 0xb08
 8011fce:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8011fd2:	2122      	movs	r1, #34	; 0x22
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7fe fee9 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8011fda:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8011fde:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8011fe2:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011fe4:	4b6b      	ldr	r3, [pc, #428]	; (8012194 <_ZN15Screen1ViewBaseC1Ev+0x1058>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d105      	bne.n	8011ff8 <_ZN15Screen1ViewBaseC1Ev+0xebc>
 8011fec:	4b6a      	ldr	r3, [pc, #424]	; (8012198 <_ZN15Screen1ViewBaseC1Ev+0x105c>)
 8011fee:	4a6b      	ldr	r2, [pc, #428]	; (801219c <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 8011ff0:	21ae      	movs	r1, #174	; 0xae
 8011ff2:	486b      	ldr	r0, [pc, #428]	; (80121a0 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 8011ff4:	f01b ff2c 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8011ff8:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	889a      	ldrh	r2, [r3, #4]
 8012000:	4b68      	ldr	r3, [pc, #416]	; (80121a4 <_ZN15Screen1ViewBaseC1Ev+0x1068>)
 8012002:	881b      	ldrh	r3, [r3, #0]
 8012004:	429a      	cmp	r2, r3
 8012006:	d305      	bcc.n	8012014 <_ZN15Screen1ViewBaseC1Ev+0xed8>
 8012008:	4b67      	ldr	r3, [pc, #412]	; (80121a8 <_ZN15Screen1ViewBaseC1Ev+0x106c>)
 801200a:	4a64      	ldr	r2, [pc, #400]	; (801219c <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 801200c:	21af      	movs	r1, #175	; 0xaf
 801200e:	4864      	ldr	r0, [pc, #400]	; (80121a0 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 8012010:	f01b ff1e 	bl	802de50 <__assert_func>
    }
 8012014:	bf00      	nop
        return texts->getText(typedTextId);
 8012016:	4b5d      	ldr	r3, [pc, #372]	; (801218c <_ZN15Screen1ViewBaseC1Ev+0x1050>)
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801201e:	889b      	ldrh	r3, [r3, #4]
 8012020:	4619      	mov	r1, r3
 8012022:	4610      	mov	r0, r2
 8012024:	f002 fa44 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8012028:	4603      	mov	r3, r0
 801202a:	bf00      	nop
 801202c:	4a58      	ldr	r2, [pc, #352]	; (8012190 <_ZN15Screen1ViewBaseC1Ev+0x1054>)
 801202e:	210a      	movs	r1, #10
 8012030:	4620      	mov	r0, r4
 8012032:	f00d f959 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012036:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801203a:	4618      	mov	r0, r3
 801203c:	f7fd fd34 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    batt_units.setWildcard(batt_unitsBuffer);
 8012040:	1d3b      	adds	r3, r7, #4
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8012048:	1d3b      	adds	r3, r7, #4
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8012050:	4619      	mov	r1, r3
 8012052:	4610      	mov	r0, r2
 8012054:	f7fe ff38 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    batt_units.resizeToCurrentText();
 8012058:	1d3b      	adds	r3, r7, #4
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8012060:	4618      	mov	r0, r3
 8012062:	f007 ff75 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    batt_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6YBF));
 8012066:	1d3b      	adds	r3, r7, #4
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 801206e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8012072:	2112      	movs	r1, #18
 8012074:	4618      	mov	r0, r3
 8012076:	f7fe fe99 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 801207a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801207e:	4619      	mov	r1, r3
 8012080:	4620      	mov	r0, r4
 8012082:	f007 ff82 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012086:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801208a:	4618      	mov	r0, r3
 801208c:	f7fd fd0c 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    tps_value.setXY(968, 322);
 8012090:	1d3b      	adds	r3, r7, #4
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8012098:	f44f 72a1 	mov.w	r2, #322	; 0x142
 801209c:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fe fc77 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    tps_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80120a6:	1d3b      	adds	r3, r7, #4
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 80120ae:	f207 3333 	addw	r3, r7, #819	; 0x333
 80120b2:	22ff      	movs	r2, #255	; 0xff
 80120b4:	701a      	strb	r2, [r3, #0]
 80120b6:	f207 3332 	addw	r3, r7, #818	; 0x332
 80120ba:	22ff      	movs	r2, #255	; 0xff
 80120bc:	701a      	strb	r2, [r3, #0]
 80120be:	f207 3331 	addw	r3, r7, #817	; 0x331
 80120c2:	22ff      	movs	r2, #255	; 0xff
 80120c4:	701a      	strb	r2, [r3, #0]
 80120c6:	f207 3333 	addw	r3, r7, #819	; 0x333
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	041b      	lsls	r3, r3, #16
 80120ce:	461a      	mov	r2, r3
 80120d0:	f207 3332 	addw	r3, r7, #818	; 0x332
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	021b      	lsls	r3, r3, #8
 80120d8:	431a      	orrs	r2, r3
 80120da:	f207 3331 	addw	r3, r7, #817	; 0x331
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	4313      	orrs	r3, r2
 80120e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80120e6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80120ea:	4611      	mov	r1, r2
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7fe fb81 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 80120f2:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	461a      	mov	r2, r3
 80120fa:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80120fe:	601c      	str	r4, [r3, #0]
 8012100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012104:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012106:	f507 734d 	add.w	r3, r7, #820	; 0x334
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012110:	6812      	ldr	r2, [r2, #0]
 8012112:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012114:	bf00      	nop
    tps_value.setLinespacing(0);
 8012116:	1d3b      	adds	r3, r7, #4
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 801211e:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	f207 333a 	addw	r3, r7, #826	; 0x33a
 8012128:	2200      	movs	r2, #0
 801212a:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801212c:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	f207 323a 	addw	r2, r7, #826	; 0x33a
 8012136:	8812      	ldrh	r2, [r2, #0]
 8012138:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801213a:	bf00      	nop
    Unicode::snprintf(tps_valueBuffer, TPS_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_AYOA).getText());
 801213c:	1d3b      	adds	r3, r7, #4
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f603 341c 	addw	r4, r3, #2844	; 0xb1c
 8012144:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8012148:	2120      	movs	r1, #32
 801214a:	4618      	mov	r0, r3
 801214c:	f7fe fe2e 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012150:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8012154:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8012158:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801215a:	4b0e      	ldr	r3, [pc, #56]	; (8012194 <_ZN15Screen1ViewBaseC1Ev+0x1058>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d105      	bne.n	801216e <_ZN15Screen1ViewBaseC1Ev+0x1032>
 8012162:	4b0d      	ldr	r3, [pc, #52]	; (8012198 <_ZN15Screen1ViewBaseC1Ev+0x105c>)
 8012164:	4a0d      	ldr	r2, [pc, #52]	; (801219c <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 8012166:	21ae      	movs	r1, #174	; 0xae
 8012168:	480d      	ldr	r0, [pc, #52]	; (80121a0 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 801216a:	f01b fe71 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801216e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	889a      	ldrh	r2, [r3, #4]
 8012176:	4b0b      	ldr	r3, [pc, #44]	; (80121a4 <_ZN15Screen1ViewBaseC1Ev+0x1068>)
 8012178:	881b      	ldrh	r3, [r3, #0]
 801217a:	429a      	cmp	r2, r3
 801217c:	d316      	bcc.n	80121ac <_ZN15Screen1ViewBaseC1Ev+0x1070>
 801217e:	4b0a      	ldr	r3, [pc, #40]	; (80121a8 <_ZN15Screen1ViewBaseC1Ev+0x106c>)
 8012180:	4a06      	ldr	r2, [pc, #24]	; (801219c <_ZN15Screen1ViewBaseC1Ev+0x1060>)
 8012182:	21af      	movs	r1, #175	; 0xaf
 8012184:	4806      	ldr	r0, [pc, #24]	; (80121a0 <_ZN15Screen1ViewBaseC1Ev+0x1064>)
 8012186:	f01b fe63 	bl	802de50 <__assert_func>
 801218a:	bf00      	nop
 801218c:	20009804 	.word	0x20009804
 8012190:	0802f53c 	.word	0x0802f53c
 8012194:	200097f8 	.word	0x200097f8
 8012198:	0802f430 	.word	0x0802f430
 801219c:	0802f474 	.word	0x0802f474
 80121a0:	0802f4a4 	.word	0x0802f4a4
 80121a4:	200097fc 	.word	0x200097fc
 80121a8:	0802f4e8 	.word	0x0802f4e8
    }
 80121ac:	bf00      	nop
        return texts->getText(typedTextId);
 80121ae:	4bba      	ldr	r3, [pc, #744]	; (8012498 <_ZN15Screen1ViewBaseC1Ev+0x135c>)
 80121b0:	681a      	ldr	r2, [r3, #0]
 80121b2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80121b6:	889b      	ldrh	r3, [r3, #4]
 80121b8:	4619      	mov	r1, r3
 80121ba:	4610      	mov	r0, r2
 80121bc:	f002 f978 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 80121c0:	4603      	mov	r3, r0
 80121c2:	bf00      	nop
 80121c4:	4ab5      	ldr	r2, [pc, #724]	; (801249c <_ZN15Screen1ViewBaseC1Ev+0x1360>)
 80121c6:	2120      	movs	r1, #32
 80121c8:	4620      	mov	r0, r4
 80121ca:	f00d f88d 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80121ce:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fd fc68 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    tps_value.setWildcard(tps_valueBuffer);
 80121d8:	1d3b      	adds	r3, r7, #4
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f503 727f 	add.w	r2, r3, #1020	; 0x3fc
 80121e0:	1d3b      	adds	r3, r7, #4
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	f603 331c 	addw	r3, r3, #2844	; 0xb1c
 80121e8:	4619      	mov	r1, r3
 80121ea:	4610      	mov	r0, r2
 80121ec:	f7fe fe6c 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_value.resizeToCurrentText();
 80121f0:	1d3b      	adds	r3, r7, #4
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 80121f8:	4618      	mov	r0, r3
 80121fa:	f007 fea9 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MP7X));
 80121fe:	1d3b      	adds	r3, r7, #4
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f503 747f 	add.w	r4, r3, #1020	; 0x3fc
 8012206:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801220a:	2111      	movs	r1, #17
 801220c:	4618      	mov	r0, r3
 801220e:	f7fe fdcd 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012212:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8012216:	4619      	mov	r1, r3
 8012218:	4620      	mov	r0, r4
 801221a:	f007 feb6 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801221e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8012222:	4618      	mov	r0, r3
 8012224:	f7fd fc40 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    tps_label.setXY(917, 401);
 8012228:	1d3b      	adds	r3, r7, #4
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8012230:	f240 1291 	movw	r2, #401	; 0x191
 8012234:	f240 3195 	movw	r1, #917	; 0x395
 8012238:	4618      	mov	r0, r3
 801223a:	f7fe fbab 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    tps_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801223e:	1d3b      	adds	r3, r7, #4
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f203 443c 	addw	r4, r3, #1084	; 0x43c
 8012246:	f207 3347 	addw	r3, r7, #839	; 0x347
 801224a:	22ff      	movs	r2, #255	; 0xff
 801224c:	701a      	strb	r2, [r3, #0]
 801224e:	f207 3346 	addw	r3, r7, #838	; 0x346
 8012252:	22ff      	movs	r2, #255	; 0xff
 8012254:	701a      	strb	r2, [r3, #0]
 8012256:	f207 3345 	addw	r3, r7, #837	; 0x345
 801225a:	22ff      	movs	r2, #255	; 0xff
 801225c:	701a      	strb	r2, [r3, #0]
 801225e:	f207 3347 	addw	r3, r7, #839	; 0x347
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	041b      	lsls	r3, r3, #16
 8012266:	461a      	mov	r2, r3
 8012268:	f207 3346 	addw	r3, r7, #838	; 0x346
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	021b      	lsls	r3, r3, #8
 8012270:	431a      	orrs	r2, r3
 8012272:	f207 3345 	addw	r3, r7, #837	; 0x345
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	4313      	orrs	r3, r2
 801227a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801227e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8012282:	4611      	mov	r1, r2
 8012284:	4618      	mov	r0, r3
 8012286:	f7fe fab5 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 801228a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	461a      	mov	r2, r3
 8012292:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8012296:	601c      	str	r4, [r3, #0]
 8012298:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801229c:	601a      	str	r2, [r3, #0]
        this->color = color;
 801229e:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80122a8:	6812      	ldr	r2, [r2, #0]
 80122aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80122ac:	bf00      	nop
    tps_label.setLinespacing(0);
 80122ae:	1d3b      	adds	r3, r7, #4
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 80122b6:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80122ba:	601a      	str	r2, [r3, #0]
 80122bc:	f207 334e 	addw	r3, r7, #846	; 0x34e
 80122c0:	2200      	movs	r2, #0
 80122c2:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80122c4:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f207 324e 	addw	r2, r7, #846	; 0x34e
 80122ce:	8812      	ldrh	r2, [r2, #0]
 80122d0:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80122d2:	bf00      	nop
    Unicode::snprintf(tps_labelBuffer, TPS_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VMJT).getText());
 80122d4:	1d3b      	adds	r3, r7, #4
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f603 345c 	addw	r4, r3, #2908	; 0xb5c
 80122dc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80122e0:	2125      	movs	r1, #37	; 0x25
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7fe fd62 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80122e8:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80122ec:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80122f0:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80122f2:	4b6b      	ldr	r3, [pc, #428]	; (80124a0 <_ZN15Screen1ViewBaseC1Ev+0x1364>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d105      	bne.n	8012306 <_ZN15Screen1ViewBaseC1Ev+0x11ca>
 80122fa:	4b6a      	ldr	r3, [pc, #424]	; (80124a4 <_ZN15Screen1ViewBaseC1Ev+0x1368>)
 80122fc:	4a6a      	ldr	r2, [pc, #424]	; (80124a8 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 80122fe:	21ae      	movs	r1, #174	; 0xae
 8012300:	486a      	ldr	r0, [pc, #424]	; (80124ac <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 8012302:	f01b fda5 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012306:	f507 7355 	add.w	r3, r7, #852	; 0x354
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	889a      	ldrh	r2, [r3, #4]
 801230e:	4b68      	ldr	r3, [pc, #416]	; (80124b0 <_ZN15Screen1ViewBaseC1Ev+0x1374>)
 8012310:	881b      	ldrh	r3, [r3, #0]
 8012312:	429a      	cmp	r2, r3
 8012314:	d305      	bcc.n	8012322 <_ZN15Screen1ViewBaseC1Ev+0x11e6>
 8012316:	4b67      	ldr	r3, [pc, #412]	; (80124b4 <_ZN15Screen1ViewBaseC1Ev+0x1378>)
 8012318:	4a63      	ldr	r2, [pc, #396]	; (80124a8 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 801231a:	21af      	movs	r1, #175	; 0xaf
 801231c:	4863      	ldr	r0, [pc, #396]	; (80124ac <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 801231e:	f01b fd97 	bl	802de50 <__assert_func>
    }
 8012322:	bf00      	nop
        return texts->getText(typedTextId);
 8012324:	4b5c      	ldr	r3, [pc, #368]	; (8012498 <_ZN15Screen1ViewBaseC1Ev+0x135c>)
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801232c:	889b      	ldrh	r3, [r3, #4]
 801232e:	4619      	mov	r1, r3
 8012330:	4610      	mov	r0, r2
 8012332:	f002 f8bd 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8012336:	4603      	mov	r3, r0
 8012338:	bf00      	nop
 801233a:	4a58      	ldr	r2, [pc, #352]	; (801249c <_ZN15Screen1ViewBaseC1Ev+0x1360>)
 801233c:	210a      	movs	r1, #10
 801233e:	4620      	mov	r0, r4
 8012340:	f00c ffd2 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012344:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8012348:	4618      	mov	r0, r3
 801234a:	f7fd fbad 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    tps_label.setWildcard(tps_labelBuffer);
 801234e:	1d3b      	adds	r3, r7, #4
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f203 423c 	addw	r2, r3, #1084	; 0x43c
 8012356:	1d3b      	adds	r3, r7, #4
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f603 335c 	addw	r3, r3, #2908	; 0xb5c
 801235e:	4619      	mov	r1, r3
 8012360:	4610      	mov	r0, r2
 8012362:	f7fe fdb1 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_label.resizeToCurrentText();
 8012366:	1d3b      	adds	r3, r7, #4
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801236e:	4618      	mov	r0, r3
 8012370:	f007 fdee 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_L5WH));
 8012374:	1d3b      	adds	r3, r7, #4
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	f203 443c 	addw	r4, r3, #1084	; 0x43c
 801237c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8012380:	210f      	movs	r1, #15
 8012382:	4618      	mov	r0, r3
 8012384:	f7fe fd12 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012388:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801238c:	4619      	mov	r1, r3
 801238e:	4620      	mov	r0, r4
 8012390:	f007 fdfb 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012394:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8012398:	4618      	mov	r0, r3
 801239a:	f7fd fb85 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    tps_units.setXY(808, 401);
 801239e:	1d3b      	adds	r3, r7, #4
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80123a6:	f240 1291 	movw	r2, #401	; 0x191
 80123aa:	f44f 714a 	mov.w	r1, #808	; 0x328
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fe faf0 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    tps_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80123b4:	1d3b      	adds	r3, r7, #4
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 80123bc:	f207 335b 	addw	r3, r7, #859	; 0x35b
 80123c0:	22ff      	movs	r2, #255	; 0xff
 80123c2:	701a      	strb	r2, [r3, #0]
 80123c4:	f207 335a 	addw	r3, r7, #858	; 0x35a
 80123c8:	22ff      	movs	r2, #255	; 0xff
 80123ca:	701a      	strb	r2, [r3, #0]
 80123cc:	f207 3359 	addw	r3, r7, #857	; 0x359
 80123d0:	22ff      	movs	r2, #255	; 0xff
 80123d2:	701a      	strb	r2, [r3, #0]
 80123d4:	f207 335b 	addw	r3, r7, #859	; 0x35b
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	041b      	lsls	r3, r3, #16
 80123dc:	461a      	mov	r2, r3
 80123de:	f207 335a 	addw	r3, r7, #858	; 0x35a
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	021b      	lsls	r3, r3, #8
 80123e6:	431a      	orrs	r2, r3
 80123e8:	f207 3359 	addw	r3, r7, #857	; 0x359
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	4313      	orrs	r3, r2
 80123f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80123f4:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80123f8:	4611      	mov	r1, r2
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7fe f9fa 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8012400:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	461a      	mov	r2, r3
 8012408:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 801240c:	601c      	str	r4, [r3, #0]
 801240e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012412:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012414:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801241e:	6812      	ldr	r2, [r2, #0]
 8012420:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012422:	bf00      	nop
    tps_units.setLinespacing(0);
 8012424:	1d3b      	adds	r3, r7, #4
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f203 427c 	addw	r2, r3, #1148	; 0x47c
 801242c:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8012430:	601a      	str	r2, [r3, #0]
 8012432:	f207 3362 	addw	r3, r7, #866	; 0x362
 8012436:	2200      	movs	r2, #0
 8012438:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801243a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	f207 3262 	addw	r2, r7, #866	; 0x362
 8012444:	8812      	ldrh	r2, [r2, #0]
 8012446:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012448:	bf00      	nop
    Unicode::snprintf(tps_unitsBuffer, TPS_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L3HM).getText());
 801244a:	1d3b      	adds	r3, r7, #4
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 8012452:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8012456:	2124      	movs	r1, #36	; 0x24
 8012458:	4618      	mov	r0, r3
 801245a:	f7fe fca7 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 801245e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8012462:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8012466:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012468:	4b0d      	ldr	r3, [pc, #52]	; (80124a0 <_ZN15Screen1ViewBaseC1Ev+0x1364>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d105      	bne.n	801247c <_ZN15Screen1ViewBaseC1Ev+0x1340>
 8012470:	4b0c      	ldr	r3, [pc, #48]	; (80124a4 <_ZN15Screen1ViewBaseC1Ev+0x1368>)
 8012472:	4a0d      	ldr	r2, [pc, #52]	; (80124a8 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 8012474:	21ae      	movs	r1, #174	; 0xae
 8012476:	480d      	ldr	r0, [pc, #52]	; (80124ac <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 8012478:	f01b fcea 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801247c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	889a      	ldrh	r2, [r3, #4]
 8012484:	4b0a      	ldr	r3, [pc, #40]	; (80124b0 <_ZN15Screen1ViewBaseC1Ev+0x1374>)
 8012486:	881b      	ldrh	r3, [r3, #0]
 8012488:	429a      	cmp	r2, r3
 801248a:	d315      	bcc.n	80124b8 <_ZN15Screen1ViewBaseC1Ev+0x137c>
 801248c:	4b09      	ldr	r3, [pc, #36]	; (80124b4 <_ZN15Screen1ViewBaseC1Ev+0x1378>)
 801248e:	4a06      	ldr	r2, [pc, #24]	; (80124a8 <_ZN15Screen1ViewBaseC1Ev+0x136c>)
 8012490:	21af      	movs	r1, #175	; 0xaf
 8012492:	4806      	ldr	r0, [pc, #24]	; (80124ac <_ZN15Screen1ViewBaseC1Ev+0x1370>)
 8012494:	f01b fcdc 	bl	802de50 <__assert_func>
 8012498:	20009804 	.word	0x20009804
 801249c:	0802f53c 	.word	0x0802f53c
 80124a0:	200097f8 	.word	0x200097f8
 80124a4:	0802f430 	.word	0x0802f430
 80124a8:	0802f474 	.word	0x0802f474
 80124ac:	0802f4a4 	.word	0x0802f4a4
 80124b0:	200097fc 	.word	0x200097fc
 80124b4:	0802f4e8 	.word	0x0802f4e8
    }
 80124b8:	bf00      	nop
        return texts->getText(typedTextId);
 80124ba:	4bba      	ldr	r3, [pc, #744]	; (80127a4 <_ZN15Screen1ViewBaseC1Ev+0x1668>)
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80124c2:	889b      	ldrh	r3, [r3, #4]
 80124c4:	4619      	mov	r1, r3
 80124c6:	4610      	mov	r0, r2
 80124c8:	f001 fff2 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 80124cc:	4603      	mov	r3, r0
 80124ce:	bf00      	nop
 80124d0:	4ab5      	ldr	r2, [pc, #724]	; (80127a8 <_ZN15Screen1ViewBaseC1Ev+0x166c>)
 80124d2:	210a      	movs	r1, #10
 80124d4:	4620      	mov	r0, r4
 80124d6:	f00c ff07 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80124da:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fd fae2 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    tps_units.setWildcard(tps_unitsBuffer);
 80124e4:	1d3b      	adds	r3, r7, #4
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	f203 427c 	addw	r2, r3, #1148	; 0x47c
 80124ec:	1d3b      	adds	r3, r7, #4
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 80124f4:	4619      	mov	r1, r3
 80124f6:	4610      	mov	r0, r2
 80124f8:	f7fe fce6 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tps_units.resizeToCurrentText();
 80124fc:	1d3b      	adds	r3, r7, #4
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8012504:	4618      	mov	r0, r3
 8012506:	f007 fd23 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    tps_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RPXE));
 801250a:	1d3b      	adds	r3, r7, #4
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f203 447c 	addw	r4, r3, #1148	; 0x47c
 8012512:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8012516:	2110      	movs	r1, #16
 8012518:	4618      	mov	r0, r3
 801251a:	f7fe fc47 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 801251e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8012522:	4619      	mov	r1, r3
 8012524:	4620      	mov	r0, r4
 8012526:	f007 fd30 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801252a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801252e:	4618      	mov	r0, r3
 8012530:	f7fd faba 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_value.setXY(968, 474);
 8012534:	1d3b      	adds	r3, r7, #4
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 801253c:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8012540:	f44f 7172 	mov.w	r1, #968	; 0x3c8
 8012544:	4618      	mov	r0, r3
 8012546:	f7fe fa25 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801254a:	1d3b      	adds	r3, r7, #4
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f203 44bc 	addw	r4, r3, #1212	; 0x4bc
 8012552:	f207 336f 	addw	r3, r7, #879	; 0x36f
 8012556:	22ff      	movs	r2, #255	; 0xff
 8012558:	701a      	strb	r2, [r3, #0]
 801255a:	f207 336e 	addw	r3, r7, #878	; 0x36e
 801255e:	22ff      	movs	r2, #255	; 0xff
 8012560:	701a      	strb	r2, [r3, #0]
 8012562:	f207 336d 	addw	r3, r7, #877	; 0x36d
 8012566:	22ff      	movs	r2, #255	; 0xff
 8012568:	701a      	strb	r2, [r3, #0]
 801256a:	f207 336f 	addw	r3, r7, #879	; 0x36f
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	041b      	lsls	r3, r3, #16
 8012572:	461a      	mov	r2, r3
 8012574:	f207 336e 	addw	r3, r7, #878	; 0x36e
 8012578:	781b      	ldrb	r3, [r3, #0]
 801257a:	021b      	lsls	r3, r3, #8
 801257c:	431a      	orrs	r2, r3
 801257e:	f207 336d 	addw	r3, r7, #877	; 0x36d
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	4313      	orrs	r3, r2
 8012586:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801258a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801258e:	4611      	mov	r1, r2
 8012590:	4618      	mov	r0, r3
 8012592:	f7fe f92f 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8012596:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	461a      	mov	r2, r3
 801259e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80125a2:	601c      	str	r4, [r3, #0]
 80125a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80125a8:	601a      	str	r2, [r3, #0]
        this->color = color;
 80125aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80125b4:	6812      	ldr	r2, [r2, #0]
 80125b6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80125b8:	bf00      	nop
    lambda_value.setLinespacing(0);
 80125ba:	1d3b      	adds	r3, r7, #4
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f203 42bc 	addw	r2, r3, #1212	; 0x4bc
 80125c2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80125c6:	601a      	str	r2, [r3, #0]
 80125c8:	f207 3376 	addw	r3, r7, #886	; 0x376
 80125cc:	2200      	movs	r2, #0
 80125ce:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80125d0:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	f207 3276 	addw	r2, r7, #886	; 0x376
 80125da:	8812      	ldrh	r2, [r2, #0]
 80125dc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80125de:	bf00      	nop
    Unicode::snprintf(lambda_valueBuffer, LAMBDA_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_2H8W).getText());
 80125e0:	1d3b      	adds	r3, r7, #4
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f603 3484 	addw	r4, r3, #2948	; 0xb84
 80125e8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80125ec:	2121      	movs	r1, #33	; 0x21
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fe fbdc 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80125f4:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80125f8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80125fc:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80125fe:	4b6b      	ldr	r3, [pc, #428]	; (80127ac <_ZN15Screen1ViewBaseC1Ev+0x1670>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d105      	bne.n	8012612 <_ZN15Screen1ViewBaseC1Ev+0x14d6>
 8012606:	4b6a      	ldr	r3, [pc, #424]	; (80127b0 <_ZN15Screen1ViewBaseC1Ev+0x1674>)
 8012608:	4a6a      	ldr	r2, [pc, #424]	; (80127b4 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 801260a:	21ae      	movs	r1, #174	; 0xae
 801260c:	486a      	ldr	r0, [pc, #424]	; (80127b8 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 801260e:	f01b fc1f 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012612:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	889a      	ldrh	r2, [r3, #4]
 801261a:	4b68      	ldr	r3, [pc, #416]	; (80127bc <_ZN15Screen1ViewBaseC1Ev+0x1680>)
 801261c:	881b      	ldrh	r3, [r3, #0]
 801261e:	429a      	cmp	r2, r3
 8012620:	d305      	bcc.n	801262e <_ZN15Screen1ViewBaseC1Ev+0x14f2>
 8012622:	4b67      	ldr	r3, [pc, #412]	; (80127c0 <_ZN15Screen1ViewBaseC1Ev+0x1684>)
 8012624:	4a63      	ldr	r2, [pc, #396]	; (80127b4 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 8012626:	21af      	movs	r1, #175	; 0xaf
 8012628:	4863      	ldr	r0, [pc, #396]	; (80127b8 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 801262a:	f01b fc11 	bl	802de50 <__assert_func>
    }
 801262e:	bf00      	nop
        return texts->getText(typedTextId);
 8012630:	4b5c      	ldr	r3, [pc, #368]	; (80127a4 <_ZN15Screen1ViewBaseC1Ev+0x1668>)
 8012632:	681a      	ldr	r2, [r3, #0]
 8012634:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8012638:	889b      	ldrh	r3, [r3, #4]
 801263a:	4619      	mov	r1, r3
 801263c:	4610      	mov	r0, r2
 801263e:	f001 ff37 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8012642:	4603      	mov	r3, r0
 8012644:	bf00      	nop
 8012646:	4a58      	ldr	r2, [pc, #352]	; (80127a8 <_ZN15Screen1ViewBaseC1Ev+0x166c>)
 8012648:	2120      	movs	r1, #32
 801264a:	4620      	mov	r0, r4
 801264c:	f00c fe4c 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012650:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8012654:	4618      	mov	r0, r3
 8012656:	f7fd fa27 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_value.setWildcard(lambda_valueBuffer);
 801265a:	1d3b      	adds	r3, r7, #4
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	f203 42bc 	addw	r2, r3, #1212	; 0x4bc
 8012662:	1d3b      	adds	r3, r7, #4
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 801266a:	4619      	mov	r1, r3
 801266c:	4610      	mov	r0, r2
 801266e:	f7fe fc2b 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_value.resizeToCurrentText();
 8012672:	1d3b      	adds	r3, r7, #4
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 801267a:	4618      	mov	r0, r3
 801267c:	f007 fc68 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TLZY));
 8012680:	1d3b      	adds	r3, r7, #4
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f203 44bc 	addw	r4, r3, #1212	; 0x4bc
 8012688:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801268c:	210e      	movs	r1, #14
 801268e:	4618      	mov	r0, r3
 8012690:	f7fe fb8c 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012694:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8012698:	4619      	mov	r1, r3
 801269a:	4620      	mov	r0, r4
 801269c:	f007 fc75 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80126a0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fd f9ff 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_label.setXY(917, 552);
 80126aa:	1d3b      	adds	r3, r7, #4
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 80126b2:	f44f 720a 	mov.w	r2, #552	; 0x228
 80126b6:	f240 3195 	movw	r1, #917	; 0x395
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7fe f96a 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80126c0:	1d3b      	adds	r3, r7, #4
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 80126c8:	f207 3383 	addw	r3, r7, #899	; 0x383
 80126cc:	22ff      	movs	r2, #255	; 0xff
 80126ce:	701a      	strb	r2, [r3, #0]
 80126d0:	f207 3382 	addw	r3, r7, #898	; 0x382
 80126d4:	22ff      	movs	r2, #255	; 0xff
 80126d6:	701a      	strb	r2, [r3, #0]
 80126d8:	f207 3381 	addw	r3, r7, #897	; 0x381
 80126dc:	22ff      	movs	r2, #255	; 0xff
 80126de:	701a      	strb	r2, [r3, #0]
 80126e0:	f207 3383 	addw	r3, r7, #899	; 0x383
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	041b      	lsls	r3, r3, #16
 80126e8:	461a      	mov	r2, r3
 80126ea:	f207 3382 	addw	r3, r7, #898	; 0x382
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	021b      	lsls	r3, r3, #8
 80126f2:	431a      	orrs	r2, r3
 80126f4:	f207 3381 	addw	r3, r7, #897	; 0x381
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	4313      	orrs	r3, r2
 80126fc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012700:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8012704:	4611      	mov	r1, r2
 8012706:	4618      	mov	r0, r3
 8012708:	f7fe f874 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 801270c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	461a      	mov	r2, r3
 8012714:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8012718:	601c      	str	r4, [r3, #0]
 801271a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801271e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012720:	f507 7361 	add.w	r3, r7, #900	; 0x384
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801272a:	6812      	ldr	r2, [r2, #0]
 801272c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801272e:	bf00      	nop
    lambda_label.setLinespacing(0);
 8012730:	1d3b      	adds	r3, r7, #4
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 8012738:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 801273c:	601a      	str	r2, [r3, #0]
 801273e:	f207 338a 	addw	r3, r7, #906	; 0x38a
 8012742:	2200      	movs	r2, #0
 8012744:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8012746:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f207 328a 	addw	r2, r7, #906	; 0x38a
 8012750:	8812      	ldrh	r2, [r2, #0]
 8012752:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012754:	bf00      	nop
    Unicode::snprintf(lambda_labelBuffer, LAMBDA_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JQKX).getText());
 8012756:	1d3b      	adds	r3, r7, #4
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f603 34c4 	addw	r4, r3, #3012	; 0xbc4
 801275e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8012762:	2127      	movs	r1, #39	; 0x27
 8012764:	4618      	mov	r0, r3
 8012766:	f7fe fb21 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 801276a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801276e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8012772:	601a      	str	r2, [r3, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012774:	4b0d      	ldr	r3, [pc, #52]	; (80127ac <_ZN15Screen1ViewBaseC1Ev+0x1670>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d105      	bne.n	8012788 <_ZN15Screen1ViewBaseC1Ev+0x164c>
 801277c:	4b0c      	ldr	r3, [pc, #48]	; (80127b0 <_ZN15Screen1ViewBaseC1Ev+0x1674>)
 801277e:	4a0d      	ldr	r2, [pc, #52]	; (80127b4 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 8012780:	21ae      	movs	r1, #174	; 0xae
 8012782:	480d      	ldr	r0, [pc, #52]	; (80127b8 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 8012784:	f01b fb64 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012788:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	889a      	ldrh	r2, [r3, #4]
 8012790:	4b0a      	ldr	r3, [pc, #40]	; (80127bc <_ZN15Screen1ViewBaseC1Ev+0x1680>)
 8012792:	881b      	ldrh	r3, [r3, #0]
 8012794:	429a      	cmp	r2, r3
 8012796:	d315      	bcc.n	80127c4 <_ZN15Screen1ViewBaseC1Ev+0x1688>
 8012798:	4b09      	ldr	r3, [pc, #36]	; (80127c0 <_ZN15Screen1ViewBaseC1Ev+0x1684>)
 801279a:	4a06      	ldr	r2, [pc, #24]	; (80127b4 <_ZN15Screen1ViewBaseC1Ev+0x1678>)
 801279c:	21af      	movs	r1, #175	; 0xaf
 801279e:	4806      	ldr	r0, [pc, #24]	; (80127b8 <_ZN15Screen1ViewBaseC1Ev+0x167c>)
 80127a0:	f01b fb56 	bl	802de50 <__assert_func>
 80127a4:	20009804 	.word	0x20009804
 80127a8:	0802f53c 	.word	0x0802f53c
 80127ac:	200097f8 	.word	0x200097f8
 80127b0:	0802f430 	.word	0x0802f430
 80127b4:	0802f474 	.word	0x0802f474
 80127b8:	0802f4a4 	.word	0x0802f4a4
 80127bc:	200097fc 	.word	0x200097fc
 80127c0:	0802f4e8 	.word	0x0802f4e8
    }
 80127c4:	bf00      	nop
        return texts->getText(typedTextId);
 80127c6:	4baf      	ldr	r3, [pc, #700]	; (8012a84 <_ZN15Screen1ViewBaseC1Ev+0x1948>)
 80127c8:	681a      	ldr	r2, [r3, #0]
 80127ca:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80127ce:	889b      	ldrh	r3, [r3, #4]
 80127d0:	4619      	mov	r1, r3
 80127d2:	4610      	mov	r0, r2
 80127d4:	f001 fe6c 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 80127d8:	4603      	mov	r3, r0
 80127da:	bf00      	nop
 80127dc:	4aaa      	ldr	r2, [pc, #680]	; (8012a88 <_ZN15Screen1ViewBaseC1Ev+0x194c>)
 80127de:	210a      	movs	r1, #10
 80127e0:	4620      	mov	r0, r4
 80127e2:	f00c fd81 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80127e6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fd f95c 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_label.setWildcard(lambda_labelBuffer);
 80127f0:	1d3b      	adds	r3, r7, #4
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f203 42fc 	addw	r2, r3, #1276	; 0x4fc
 80127f8:	1d3b      	adds	r3, r7, #4
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	f603 33c4 	addw	r3, r3, #3012	; 0xbc4
 8012800:	4619      	mov	r1, r3
 8012802:	4610      	mov	r0, r2
 8012804:	f7fe fb60 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_label.resizeToCurrentText();
 8012808:	1d3b      	adds	r3, r7, #4
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8012810:	4618      	mov	r0, r3
 8012812:	f007 fb9d 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLOQ));
 8012816:	1d3b      	adds	r3, r7, #4
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	f203 44fc 	addw	r4, r3, #1276	; 0x4fc
 801281e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8012822:	210d      	movs	r1, #13
 8012824:	4618      	mov	r0, r3
 8012826:	f7fe fac1 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 801282a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801282e:	4619      	mov	r1, r3
 8012830:	4620      	mov	r0, r4
 8012832:	f007 fbaa 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012836:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801283a:	4618      	mov	r0, r3
 801283c:	f7fd f934 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    lambda_units.setXY(685, 552);
 8012840:	1d3b      	adds	r3, r7, #4
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8012848:	f44f 720a 	mov.w	r2, #552	; 0x228
 801284c:	f240 21ad 	movw	r1, #685	; 0x2ad
 8012850:	4618      	mov	r0, r3
 8012852:	f7fe f89f 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    lambda_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012856:	1d3b      	adds	r3, r7, #4
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	f203 543c 	addw	r4, r3, #1340	; 0x53c
 801285e:	f207 3397 	addw	r3, r7, #919	; 0x397
 8012862:	22ff      	movs	r2, #255	; 0xff
 8012864:	701a      	strb	r2, [r3, #0]
 8012866:	f207 3396 	addw	r3, r7, #918	; 0x396
 801286a:	22ff      	movs	r2, #255	; 0xff
 801286c:	701a      	strb	r2, [r3, #0]
 801286e:	f207 3395 	addw	r3, r7, #917	; 0x395
 8012872:	22ff      	movs	r2, #255	; 0xff
 8012874:	701a      	strb	r2, [r3, #0]
 8012876:	f207 3397 	addw	r3, r7, #919	; 0x397
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	041b      	lsls	r3, r3, #16
 801287e:	461a      	mov	r2, r3
 8012880:	f207 3396 	addw	r3, r7, #918	; 0x396
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	021b      	lsls	r3, r3, #8
 8012888:	431a      	orrs	r2, r3
 801288a:	f207 3395 	addw	r3, r7, #917	; 0x395
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	4313      	orrs	r3, r2
 8012892:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012896:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801289a:	4611      	mov	r1, r2
 801289c:	4618      	mov	r0, r3
 801289e:	f7fd ffa9 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 80128a2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	461a      	mov	r2, r3
 80128aa:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80128ae:	601c      	str	r4, [r3, #0]
 80128b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128b4:	601a      	str	r2, [r3, #0]
        this->color = color;
 80128b6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80128c0:	6812      	ldr	r2, [r2, #0]
 80128c2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80128c4:	bf00      	nop
    lambda_units.setLinespacing(0);
 80128c6:	1d3b      	adds	r3, r7, #4
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 80128ce:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 80128d2:	2300      	movs	r3, #0
 80128d4:	f8a7 339e 	strh.w	r3, [r7, #926]	; 0x39e
        linespace = space;
 80128d8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80128dc:	f8b7 239e 	ldrh.w	r2, [r7, #926]	; 0x39e
 80128e0:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80128e2:	bf00      	nop
    Unicode::snprintf(lambda_unitsBuffer, LAMBDA_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_J843).getText());
 80128e4:	1d3b      	adds	r3, r7, #4
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	f603 34d8 	addw	r4, r3, #3032	; 0xbd8
 80128ec:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80128f0:	2126      	movs	r1, #38	; 0x26
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7fe fa5a 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80128f8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80128fc:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012900:	4b62      	ldr	r3, [pc, #392]	; (8012a8c <_ZN15Screen1ViewBaseC1Ev+0x1950>)
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d105      	bne.n	8012914 <_ZN15Screen1ViewBaseC1Ev+0x17d8>
 8012908:	4b61      	ldr	r3, [pc, #388]	; (8012a90 <_ZN15Screen1ViewBaseC1Ev+0x1954>)
 801290a:	4a62      	ldr	r2, [pc, #392]	; (8012a94 <_ZN15Screen1ViewBaseC1Ev+0x1958>)
 801290c:	21ae      	movs	r1, #174	; 0xae
 801290e:	4862      	ldr	r0, [pc, #392]	; (8012a98 <_ZN15Screen1ViewBaseC1Ev+0x195c>)
 8012910:	f01b fa9e 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012914:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8012918:	889a      	ldrh	r2, [r3, #4]
 801291a:	4b60      	ldr	r3, [pc, #384]	; (8012a9c <_ZN15Screen1ViewBaseC1Ev+0x1960>)
 801291c:	881b      	ldrh	r3, [r3, #0]
 801291e:	429a      	cmp	r2, r3
 8012920:	d305      	bcc.n	801292e <_ZN15Screen1ViewBaseC1Ev+0x17f2>
 8012922:	4b5f      	ldr	r3, [pc, #380]	; (8012aa0 <_ZN15Screen1ViewBaseC1Ev+0x1964>)
 8012924:	4a5b      	ldr	r2, [pc, #364]	; (8012a94 <_ZN15Screen1ViewBaseC1Ev+0x1958>)
 8012926:	21af      	movs	r1, #175	; 0xaf
 8012928:	485b      	ldr	r0, [pc, #364]	; (8012a98 <_ZN15Screen1ViewBaseC1Ev+0x195c>)
 801292a:	f01b fa91 	bl	802de50 <__assert_func>
    }
 801292e:	bf00      	nop
        return texts->getText(typedTextId);
 8012930:	4b54      	ldr	r3, [pc, #336]	; (8012a84 <_ZN15Screen1ViewBaseC1Ev+0x1948>)
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8012938:	889b      	ldrh	r3, [r3, #4]
 801293a:	4619      	mov	r1, r3
 801293c:	4610      	mov	r0, r2
 801293e:	f001 fdb7 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8012942:	4603      	mov	r3, r0
 8012944:	bf00      	nop
 8012946:	4a50      	ldr	r2, [pc, #320]	; (8012a88 <_ZN15Screen1ViewBaseC1Ev+0x194c>)
 8012948:	210a      	movs	r1, #10
 801294a:	4620      	mov	r0, r4
 801294c:	f00c fccc 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012950:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8012954:	4618      	mov	r0, r3
 8012956:	f7fd f8a7 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    lambda_units.setWildcard(lambda_unitsBuffer);
 801295a:	1d3b      	adds	r3, r7, #4
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f203 523c 	addw	r2, r3, #1340	; 0x53c
 8012962:	1d3b      	adds	r3, r7, #4
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f603 33d8 	addw	r3, r3, #3032	; 0xbd8
 801296a:	4619      	mov	r1, r3
 801296c:	4610      	mov	r0, r2
 801296e:	f7fe faab 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    lambda_units.resizeToCurrentText();
 8012972:	1d3b      	adds	r3, r7, #4
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 801297a:	4618      	mov	r0, r3
 801297c:	f007 fae8 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    lambda_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KCKH));
 8012980:	1d3b      	adds	r3, r7, #4
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	f203 543c 	addw	r4, r3, #1340	; 0x53c
 8012988:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801298c:	210c      	movs	r1, #12
 801298e:	4618      	mov	r0, r3
 8012990:	f7fe fa0c 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012994:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8012998:	4619      	mov	r1, r3
 801299a:	4620      	mov	r0, r4
 801299c:	f007 faf5 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80129a0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80129a4:	4618      	mov	r0, r3
 80129a6:	f7fd f87f 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    ect_value.setXY(34, 20);
 80129aa:	1d3b      	adds	r3, r7, #4
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 80129b2:	2214      	movs	r2, #20
 80129b4:	2122      	movs	r1, #34	; 0x22
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7fd ffec 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    ect_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80129bc:	1d3b      	adds	r3, r7, #4
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 80129c4:	23ff      	movs	r3, #255	; 0xff
 80129c6:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
 80129ca:	23ff      	movs	r3, #255	; 0xff
 80129cc:	f887 33aa 	strb.w	r3, [r7, #938]	; 0x3aa
 80129d0:	23ff      	movs	r3, #255	; 0xff
 80129d2:	f887 33a9 	strb.w	r3, [r7, #937]	; 0x3a9
 80129d6:	f897 33ab 	ldrb.w	r3, [r7, #939]	; 0x3ab
 80129da:	041b      	lsls	r3, r3, #16
 80129dc:	461a      	mov	r2, r3
 80129de:	f897 33aa 	ldrb.w	r3, [r7, #938]	; 0x3aa
 80129e2:	021b      	lsls	r3, r3, #8
 80129e4:	431a      	orrs	r2, r3
 80129e6:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 80129ea:	4313      	orrs	r3, r2
 80129ec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80129f0:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80129f4:	4611      	mov	r1, r2
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fd fefc 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 80129fc:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	461a      	mov	r2, r3
 8012a04:	f8c7 43ac 	str.w	r4, [r7, #940]	; 0x3ac
 8012a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012a0c:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012a0e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8012a12:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012a16:	6812      	ldr	r2, [r2, #0]
 8012a18:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012a1a:	bf00      	nop
    ect_value.setLinespacing(0);
 8012a1c:	1d3b      	adds	r3, r7, #4
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012a24:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8012a28:	2300      	movs	r3, #0
 8012a2a:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
        linespace = space;
 8012a2e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8012a32:	f8b7 23b2 	ldrh.w	r2, [r7, #946]	; 0x3b2
 8012a36:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012a38:	bf00      	nop
    Unicode::snprintf(ect_valueBuffer, ECT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JIWC).getText());
 8012a3a:	1d3b      	adds	r3, r7, #4
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f603 34ec 	addw	r4, r3, #3052	; 0xbec
 8012a42:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8012a46:	211b      	movs	r1, #27
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7fe f9af 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012a4e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8012a52:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012a56:	4b0d      	ldr	r3, [pc, #52]	; (8012a8c <_ZN15Screen1ViewBaseC1Ev+0x1950>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d105      	bne.n	8012a6a <_ZN15Screen1ViewBaseC1Ev+0x192e>
 8012a5e:	4b0c      	ldr	r3, [pc, #48]	; (8012a90 <_ZN15Screen1ViewBaseC1Ev+0x1954>)
 8012a60:	4a0c      	ldr	r2, [pc, #48]	; (8012a94 <_ZN15Screen1ViewBaseC1Ev+0x1958>)
 8012a62:	21ae      	movs	r1, #174	; 0xae
 8012a64:	480c      	ldr	r0, [pc, #48]	; (8012a98 <_ZN15Screen1ViewBaseC1Ev+0x195c>)
 8012a66:	f01b f9f3 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012a6a:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8012a6e:	889a      	ldrh	r2, [r3, #4]
 8012a70:	4b0a      	ldr	r3, [pc, #40]	; (8012a9c <_ZN15Screen1ViewBaseC1Ev+0x1960>)
 8012a72:	881b      	ldrh	r3, [r3, #0]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d315      	bcc.n	8012aa4 <_ZN15Screen1ViewBaseC1Ev+0x1968>
 8012a78:	4b09      	ldr	r3, [pc, #36]	; (8012aa0 <_ZN15Screen1ViewBaseC1Ev+0x1964>)
 8012a7a:	4a06      	ldr	r2, [pc, #24]	; (8012a94 <_ZN15Screen1ViewBaseC1Ev+0x1958>)
 8012a7c:	21af      	movs	r1, #175	; 0xaf
 8012a7e:	4806      	ldr	r0, [pc, #24]	; (8012a98 <_ZN15Screen1ViewBaseC1Ev+0x195c>)
 8012a80:	f01b f9e6 	bl	802de50 <__assert_func>
 8012a84:	20009804 	.word	0x20009804
 8012a88:	0802f53c 	.word	0x0802f53c
 8012a8c:	200097f8 	.word	0x200097f8
 8012a90:	0802f430 	.word	0x0802f430
 8012a94:	0802f474 	.word	0x0802f474
 8012a98:	0802f4a4 	.word	0x0802f4a4
 8012a9c:	200097fc 	.word	0x200097fc
 8012aa0:	0802f4e8 	.word	0x0802f4e8
    }
 8012aa4:	bf00      	nop
        return texts->getText(typedTextId);
 8012aa6:	4baa      	ldr	r3, [pc, #680]	; (8012d50 <_ZN15Screen1ViewBaseC1Ev+0x1c14>)
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8012aae:	889b      	ldrh	r3, [r3, #4]
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	4610      	mov	r0, r2
 8012ab4:	f001 fcfc 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	bf00      	nop
 8012abc:	4aa5      	ldr	r2, [pc, #660]	; (8012d54 <_ZN15Screen1ViewBaseC1Ev+0x1c18>)
 8012abe:	2120      	movs	r1, #32
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f00c fc11 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012ac6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7fc ffec 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    ect_value.setWildcard(ect_valueBuffer);
 8012ad0:	1d3b      	adds	r3, r7, #4
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f203 527c 	addw	r2, r3, #1404	; 0x57c
 8012ad8:	1d3b      	adds	r3, r7, #4
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	f603 33ec 	addw	r3, r3, #3052	; 0xbec
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	4610      	mov	r0, r2
 8012ae4:	f7fe f9f0 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_value.resizeToCurrentText();
 8012ae8:	1d3b      	adds	r3, r7, #4
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8012af0:	4618      	mov	r0, r3
 8012af2:	f007 fa2d 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LD25));
 8012af6:	1d3b      	adds	r3, r7, #4
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f203 547c 	addw	r4, r3, #1404	; 0x57c
 8012afe:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8012b02:	2100      	movs	r1, #0
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7fe f951 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012b0a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8012b0e:	4619      	mov	r1, r3
 8012b10:	4620      	mov	r0, r4
 8012b12:	f007 fa3a 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012b16:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fc ffc4 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    ect_label.setXY(34, 96);
 8012b20:	1d3b      	adds	r3, r7, #4
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012b28:	2260      	movs	r2, #96	; 0x60
 8012b2a:	2122      	movs	r1, #34	; 0x22
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f7fd ff31 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    ect_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012b32:	1d3b      	adds	r3, r7, #4
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	f203 54bc 	addw	r4, r3, #1468	; 0x5bc
 8012b3a:	23ff      	movs	r3, #255	; 0xff
 8012b3c:	f887 33bf 	strb.w	r3, [r7, #959]	; 0x3bf
 8012b40:	23ff      	movs	r3, #255	; 0xff
 8012b42:	f887 33be 	strb.w	r3, [r7, #958]	; 0x3be
 8012b46:	23ff      	movs	r3, #255	; 0xff
 8012b48:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
 8012b4c:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 8012b50:	041b      	lsls	r3, r3, #16
 8012b52:	461a      	mov	r2, r3
 8012b54:	f897 33be 	ldrb.w	r3, [r7, #958]	; 0x3be
 8012b58:	021b      	lsls	r3, r3, #8
 8012b5a:	431a      	orrs	r2, r3
 8012b5c:	f897 33bd 	ldrb.w	r3, [r7, #957]	; 0x3bd
 8012b60:	4313      	orrs	r3, r2
 8012b62:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012b66:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012b6a:	4611      	mov	r1, r2
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7fd fe41 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8012b72:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	461a      	mov	r2, r3
 8012b7a:	f8c7 43c0 	str.w	r4, [r7, #960]	; 0x3c0
 8012b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012b82:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012b84:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8012b88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012b8c:	6812      	ldr	r2, [r2, #0]
 8012b8e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012b90:	bf00      	nop
    ect_label.setLinespacing(0);
 8012b92:	1d3b      	adds	r3, r7, #4
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012b9a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	f8a7 33c6 	strh.w	r3, [r7, #966]	; 0x3c6
        linespace = space;
 8012ba4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8012ba8:	f8b7 23c6 	ldrh.w	r2, [r7, #966]	; 0x3c6
 8012bac:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012bae:	bf00      	nop
    Unicode::snprintf(ect_labelBuffer, ECT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_P413).getText());
 8012bb0:	1d3b      	adds	r3, r7, #4
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f603 442c 	addw	r4, r3, #3116	; 0xc2c
 8012bb8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012bbc:	212e      	movs	r1, #46	; 0x2e
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fe f8f4 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012bc4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012bc8:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012bcc:	4b62      	ldr	r3, [pc, #392]	; (8012d58 <_ZN15Screen1ViewBaseC1Ev+0x1c1c>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d105      	bne.n	8012be0 <_ZN15Screen1ViewBaseC1Ev+0x1aa4>
 8012bd4:	4b61      	ldr	r3, [pc, #388]	; (8012d5c <_ZN15Screen1ViewBaseC1Ev+0x1c20>)
 8012bd6:	4a62      	ldr	r2, [pc, #392]	; (8012d60 <_ZN15Screen1ViewBaseC1Ev+0x1c24>)
 8012bd8:	21ae      	movs	r1, #174	; 0xae
 8012bda:	4862      	ldr	r0, [pc, #392]	; (8012d64 <_ZN15Screen1ViewBaseC1Ev+0x1c28>)
 8012bdc:	f01b f938 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012be0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8012be4:	889a      	ldrh	r2, [r3, #4]
 8012be6:	4b60      	ldr	r3, [pc, #384]	; (8012d68 <_ZN15Screen1ViewBaseC1Ev+0x1c2c>)
 8012be8:	881b      	ldrh	r3, [r3, #0]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d305      	bcc.n	8012bfa <_ZN15Screen1ViewBaseC1Ev+0x1abe>
 8012bee:	4b5f      	ldr	r3, [pc, #380]	; (8012d6c <_ZN15Screen1ViewBaseC1Ev+0x1c30>)
 8012bf0:	4a5b      	ldr	r2, [pc, #364]	; (8012d60 <_ZN15Screen1ViewBaseC1Ev+0x1c24>)
 8012bf2:	21af      	movs	r1, #175	; 0xaf
 8012bf4:	485b      	ldr	r0, [pc, #364]	; (8012d64 <_ZN15Screen1ViewBaseC1Ev+0x1c28>)
 8012bf6:	f01b f92b 	bl	802de50 <__assert_func>
    }
 8012bfa:	bf00      	nop
        return texts->getText(typedTextId);
 8012bfc:	4b54      	ldr	r3, [pc, #336]	; (8012d50 <_ZN15Screen1ViewBaseC1Ev+0x1c14>)
 8012bfe:	681a      	ldr	r2, [r3, #0]
 8012c00:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012c04:	889b      	ldrh	r3, [r3, #4]
 8012c06:	4619      	mov	r1, r3
 8012c08:	4610      	mov	r0, r2
 8012c0a:	f001 fc51 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	bf00      	nop
 8012c12:	4a50      	ldr	r2, [pc, #320]	; (8012d54 <_ZN15Screen1ViewBaseC1Ev+0x1c18>)
 8012c14:	210a      	movs	r1, #10
 8012c16:	4620      	mov	r0, r4
 8012c18:	f00c fb66 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012c1c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fc ff41 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    ect_label.setWildcard(ect_labelBuffer);
 8012c26:	1d3b      	adds	r3, r7, #4
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f203 52bc 	addw	r2, r3, #1468	; 0x5bc
 8012c2e:	1d3b      	adds	r3, r7, #4
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8012c36:	4619      	mov	r1, r3
 8012c38:	4610      	mov	r0, r2
 8012c3a:	f7fe f945 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_label.resizeToCurrentText();
 8012c3e:	1d3b      	adds	r3, r7, #4
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8012c46:	4618      	mov	r0, r3
 8012c48:	f007 f982 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4T7D));
 8012c4c:	1d3b      	adds	r3, r7, #4
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f203 54bc 	addw	r4, r3, #1468	; 0x5bc
 8012c54:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012c58:	2101      	movs	r1, #1
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fe f8a6 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012c60:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012c64:	4619      	mov	r1, r3
 8012c66:	4620      	mov	r0, r4
 8012c68:	f007 f98f 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012c6c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7fc ff19 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    ect_units.setXY(192, 96);
 8012c76:	1d3b      	adds	r3, r7, #4
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012c7e:	2260      	movs	r2, #96	; 0x60
 8012c80:	21c0      	movs	r1, #192	; 0xc0
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7fd fe86 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    ect_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012c88:	1d3b      	adds	r3, r7, #4
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f203 54fc 	addw	r4, r3, #1532	; 0x5fc
 8012c90:	23ff      	movs	r3, #255	; 0xff
 8012c92:	f887 33d3 	strb.w	r3, [r7, #979]	; 0x3d3
 8012c96:	23ff      	movs	r3, #255	; 0xff
 8012c98:	f887 33d2 	strb.w	r3, [r7, #978]	; 0x3d2
 8012c9c:	23ff      	movs	r3, #255	; 0xff
 8012c9e:	f887 33d1 	strb.w	r3, [r7, #977]	; 0x3d1
 8012ca2:	f897 33d3 	ldrb.w	r3, [r7, #979]	; 0x3d3
 8012ca6:	041b      	lsls	r3, r3, #16
 8012ca8:	461a      	mov	r2, r3
 8012caa:	f897 33d2 	ldrb.w	r3, [r7, #978]	; 0x3d2
 8012cae:	021b      	lsls	r3, r3, #8
 8012cb0:	431a      	orrs	r2, r3
 8012cb2:	f897 33d1 	ldrb.w	r3, [r7, #977]	; 0x3d1
 8012cb6:	4313      	orrs	r3, r2
 8012cb8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012cbc:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8012cc0:	4611      	mov	r1, r2
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7fd fd96 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8012cc8:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	461a      	mov	r2, r3
 8012cd0:	f8c7 43d4 	str.w	r4, [r7, #980]	; 0x3d4
 8012cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012cd8:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012cda:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8012cde:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012ce2:	6812      	ldr	r2, [r2, #0]
 8012ce4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012ce6:	bf00      	nop
    ect_units.setLinespacing(0);
 8012ce8:	1d3b      	adds	r3, r7, #4
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012cf0:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	f8a7 33da 	strh.w	r3, [r7, #986]	; 0x3da
        linespace = space;
 8012cfa:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8012cfe:	f8b7 23da 	ldrh.w	r2, [r7, #986]	; 0x3da
 8012d02:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012d04:	bf00      	nop
    Unicode::snprintf(ect_unitsBuffer, ECT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NFMY).getText());
 8012d06:	1d3b      	adds	r3, r7, #4
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	f503 6444 	add.w	r4, r3, #3136	; 0xc40
 8012d0e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8012d12:	212f      	movs	r1, #47	; 0x2f
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fe f849 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012d1a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8012d1e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012d22:	4b0d      	ldr	r3, [pc, #52]	; (8012d58 <_ZN15Screen1ViewBaseC1Ev+0x1c1c>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d105      	bne.n	8012d36 <_ZN15Screen1ViewBaseC1Ev+0x1bfa>
 8012d2a:	4b0c      	ldr	r3, [pc, #48]	; (8012d5c <_ZN15Screen1ViewBaseC1Ev+0x1c20>)
 8012d2c:	4a0c      	ldr	r2, [pc, #48]	; (8012d60 <_ZN15Screen1ViewBaseC1Ev+0x1c24>)
 8012d2e:	21ae      	movs	r1, #174	; 0xae
 8012d30:	480c      	ldr	r0, [pc, #48]	; (8012d64 <_ZN15Screen1ViewBaseC1Ev+0x1c28>)
 8012d32:	f01b f88d 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012d36:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8012d3a:	889a      	ldrh	r2, [r3, #4]
 8012d3c:	4b0a      	ldr	r3, [pc, #40]	; (8012d68 <_ZN15Screen1ViewBaseC1Ev+0x1c2c>)
 8012d3e:	881b      	ldrh	r3, [r3, #0]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d315      	bcc.n	8012d70 <_ZN15Screen1ViewBaseC1Ev+0x1c34>
 8012d44:	4b09      	ldr	r3, [pc, #36]	; (8012d6c <_ZN15Screen1ViewBaseC1Ev+0x1c30>)
 8012d46:	4a06      	ldr	r2, [pc, #24]	; (8012d60 <_ZN15Screen1ViewBaseC1Ev+0x1c24>)
 8012d48:	21af      	movs	r1, #175	; 0xaf
 8012d4a:	4806      	ldr	r0, [pc, #24]	; (8012d64 <_ZN15Screen1ViewBaseC1Ev+0x1c28>)
 8012d4c:	f01b f880 	bl	802de50 <__assert_func>
 8012d50:	20009804 	.word	0x20009804
 8012d54:	0802f53c 	.word	0x0802f53c
 8012d58:	200097f8 	.word	0x200097f8
 8012d5c:	0802f430 	.word	0x0802f430
 8012d60:	0802f474 	.word	0x0802f474
 8012d64:	0802f4a4 	.word	0x0802f4a4
 8012d68:	200097fc 	.word	0x200097fc
 8012d6c:	0802f4e8 	.word	0x0802f4e8
    }
 8012d70:	bf00      	nop
        return texts->getText(typedTextId);
 8012d72:	4baa      	ldr	r3, [pc, #680]	; (801301c <_ZN15Screen1ViewBaseC1Ev+0x1ee0>)
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8012d7a:	889b      	ldrh	r3, [r3, #4]
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	4610      	mov	r0, r2
 8012d80:	f001 fb96 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8012d84:	4603      	mov	r3, r0
 8012d86:	bf00      	nop
 8012d88:	4aa5      	ldr	r2, [pc, #660]	; (8013020 <_ZN15Screen1ViewBaseC1Ev+0x1ee4>)
 8012d8a:	210a      	movs	r1, #10
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f00c faab 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012d92:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fc fe86 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    ect_units.setWildcard(ect_unitsBuffer);
 8012d9c:	1d3b      	adds	r3, r7, #4
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	f203 52fc 	addw	r2, r3, #1532	; 0x5fc
 8012da4:	1d3b      	adds	r3, r7, #4
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8012dac:	4619      	mov	r1, r3
 8012dae:	4610      	mov	r0, r2
 8012db0:	f7fe f88a 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ect_units.resizeToCurrentText();
 8012db4:	1d3b      	adds	r3, r7, #4
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f007 f8c7 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ect_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ERKY));
 8012dc2:	1d3b      	adds	r3, r7, #4
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f203 54fc 	addw	r4, r3, #1532	; 0x5fc
 8012dca:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012dce:	2102      	movs	r1, #2
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fd ffeb 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012dd6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012dda:	4619      	mov	r1, r3
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f007 f8d4 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012de2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7fc fe5e 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    iat_value.setXY(34, 167);
 8012dec:	1d3b      	adds	r3, r7, #4
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012df4:	22a7      	movs	r2, #167	; 0xa7
 8012df6:	2122      	movs	r1, #34	; 0x22
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7fd fdcb 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    iat_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012dfe:	1d3b      	adds	r3, r7, #4
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8012e06:	23ff      	movs	r3, #255	; 0xff
 8012e08:	f887 33e7 	strb.w	r3, [r7, #999]	; 0x3e7
 8012e0c:	23ff      	movs	r3, #255	; 0xff
 8012e0e:	f887 33e6 	strb.w	r3, [r7, #998]	; 0x3e6
 8012e12:	23ff      	movs	r3, #255	; 0xff
 8012e14:	f887 33e5 	strb.w	r3, [r7, #997]	; 0x3e5
 8012e18:	f897 33e7 	ldrb.w	r3, [r7, #999]	; 0x3e7
 8012e1c:	041b      	lsls	r3, r3, #16
 8012e1e:	461a      	mov	r2, r3
 8012e20:	f897 33e6 	ldrb.w	r3, [r7, #998]	; 0x3e6
 8012e24:	021b      	lsls	r3, r3, #8
 8012e26:	431a      	orrs	r2, r3
 8012e28:	f897 33e5 	ldrb.w	r3, [r7, #997]	; 0x3e5
 8012e2c:	4313      	orrs	r3, r2
 8012e2e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012e32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012e36:	4611      	mov	r1, r2
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7fd fcdb 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8012e3e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	461a      	mov	r2, r3
 8012e46:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 8012e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012e4e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012e50:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8012e54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012e58:	6812      	ldr	r2, [r2, #0]
 8012e5a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012e5c:	bf00      	nop
    iat_value.setLinespacing(0);
 8012e5e:	1d3b      	adds	r3, r7, #4
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012e66:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	f8a7 33ee 	strh.w	r3, [r7, #1006]	; 0x3ee
        linespace = space;
 8012e70:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8012e74:	f8b7 23ee 	ldrh.w	r2, [r7, #1006]	; 0x3ee
 8012e78:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012e7a:	bf00      	nop
    Unicode::snprintf(iat_valueBuffer, IAT_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_H85L).getText());
 8012e7c:	1d3b      	adds	r3, r7, #4
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	f603 4454 	addw	r4, r3, #3156	; 0xc54
 8012e84:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8012e88:	211c      	movs	r1, #28
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fd ff8e 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012e90:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8012e94:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012e98:	4b62      	ldr	r3, [pc, #392]	; (8013024 <_ZN15Screen1ViewBaseC1Ev+0x1ee8>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d105      	bne.n	8012eac <_ZN15Screen1ViewBaseC1Ev+0x1d70>
 8012ea0:	4b61      	ldr	r3, [pc, #388]	; (8013028 <_ZN15Screen1ViewBaseC1Ev+0x1eec>)
 8012ea2:	4a62      	ldr	r2, [pc, #392]	; (801302c <_ZN15Screen1ViewBaseC1Ev+0x1ef0>)
 8012ea4:	21ae      	movs	r1, #174	; 0xae
 8012ea6:	4862      	ldr	r0, [pc, #392]	; (8013030 <_ZN15Screen1ViewBaseC1Ev+0x1ef4>)
 8012ea8:	f01a ffd2 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8012eac:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8012eb0:	889a      	ldrh	r2, [r3, #4]
 8012eb2:	4b60      	ldr	r3, [pc, #384]	; (8013034 <_ZN15Screen1ViewBaseC1Ev+0x1ef8>)
 8012eb4:	881b      	ldrh	r3, [r3, #0]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d305      	bcc.n	8012ec6 <_ZN15Screen1ViewBaseC1Ev+0x1d8a>
 8012eba:	4b5f      	ldr	r3, [pc, #380]	; (8013038 <_ZN15Screen1ViewBaseC1Ev+0x1efc>)
 8012ebc:	4a5b      	ldr	r2, [pc, #364]	; (801302c <_ZN15Screen1ViewBaseC1Ev+0x1ef0>)
 8012ebe:	21af      	movs	r1, #175	; 0xaf
 8012ec0:	485b      	ldr	r0, [pc, #364]	; (8013030 <_ZN15Screen1ViewBaseC1Ev+0x1ef4>)
 8012ec2:	f01a ffc5 	bl	802de50 <__assert_func>
    }
 8012ec6:	bf00      	nop
        return texts->getText(typedTextId);
 8012ec8:	4b54      	ldr	r3, [pc, #336]	; (801301c <_ZN15Screen1ViewBaseC1Ev+0x1ee0>)
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8012ed0:	889b      	ldrh	r3, [r3, #4]
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	4610      	mov	r0, r2
 8012ed6:	f001 faeb 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8012eda:	4603      	mov	r3, r0
 8012edc:	bf00      	nop
 8012ede:	4a50      	ldr	r2, [pc, #320]	; (8013020 <_ZN15Screen1ViewBaseC1Ev+0x1ee4>)
 8012ee0:	2120      	movs	r1, #32
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	f00c fa00 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012ee8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fc fddb 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    iat_value.setWildcard(iat_valueBuffer);
 8012ef2:	1d3b      	adds	r3, r7, #4
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	f203 623c 	addw	r2, r3, #1596	; 0x63c
 8012efa:	1d3b      	adds	r3, r7, #4
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f603 4354 	addw	r3, r3, #3156	; 0xc54
 8012f02:	4619      	mov	r1, r3
 8012f04:	4610      	mov	r0, r2
 8012f06:	f7fd ffdf 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_value.resizeToCurrentText();
 8012f0a:	1d3b      	adds	r3, r7, #4
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8012f12:	4618      	mov	r0, r3
 8012f14:	f007 f81c 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z15X));
 8012f18:	1d3b      	adds	r3, r7, #4
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f203 643c 	addw	r4, r3, #1596	; 0x63c
 8012f20:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8012f24:	2103      	movs	r1, #3
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7fd ff40 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012f2c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8012f30:	4619      	mov	r1, r3
 8012f32:	4620      	mov	r0, r4
 8012f34:	f007 f829 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012f38:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7fc fdb3 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    iat_label.setXY(34, 246);
 8012f42:	1d3b      	adds	r3, r7, #4
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8012f4a:	22f6      	movs	r2, #246	; 0xf6
 8012f4c:	2122      	movs	r1, #34	; 0x22
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7fd fd20 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    iat_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012f54:	1d3b      	adds	r3, r7, #4
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8012f5c:	23ff      	movs	r3, #255	; 0xff
 8012f5e:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
 8012f62:	23ff      	movs	r3, #255	; 0xff
 8012f64:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
 8012f68:	23ff      	movs	r3, #255	; 0xff
 8012f6a:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
 8012f6e:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 8012f72:	041b      	lsls	r3, r3, #16
 8012f74:	461a      	mov	r2, r3
 8012f76:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8012f7a:	021b      	lsls	r3, r3, #8
 8012f7c:	431a      	orrs	r2, r3
 8012f7e:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 8012f82:	4313      	orrs	r3, r2
 8012f84:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012f88:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8012f8c:	4611      	mov	r1, r2
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fd fc30 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8012f94:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	461a      	mov	r2, r3
 8012f9c:	f8c7 43fc 	str.w	r4, [r7, #1020]	; 0x3fc
 8012fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012fa4:	601a      	str	r2, [r3, #0]
        this->color = color;
 8012fa6:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8012faa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012fae:	6812      	ldr	r2, [r2, #0]
 8012fb0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012fb2:	bf00      	nop
    iat_label.setLinespacing(0);
 8012fb4:	1d3b      	adds	r3, r7, #4
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8012fbc:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
        linespace = space;
 8012fc6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8012fca:	f8b7 2402 	ldrh.w	r2, [r7, #1026]	; 0x402
 8012fce:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8012fd0:	bf00      	nop
    Unicode::snprintf(iat_labelBuffer, IAT_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_K94Y).getText());
 8012fd2:	1d3b      	adds	r3, r7, #4
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	f603 4494 	addw	r4, r3, #3220	; 0xc94
 8012fda:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8012fde:	212d      	movs	r1, #45	; 0x2d
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7fd fee3 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8012fe6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8012fea:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012fee:	4b0d      	ldr	r3, [pc, #52]	; (8013024 <_ZN15Screen1ViewBaseC1Ev+0x1ee8>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d105      	bne.n	8013002 <_ZN15Screen1ViewBaseC1Ev+0x1ec6>
 8012ff6:	4b0c      	ldr	r3, [pc, #48]	; (8013028 <_ZN15Screen1ViewBaseC1Ev+0x1eec>)
 8012ff8:	4a0c      	ldr	r2, [pc, #48]	; (801302c <_ZN15Screen1ViewBaseC1Ev+0x1ef0>)
 8012ffa:	21ae      	movs	r1, #174	; 0xae
 8012ffc:	480c      	ldr	r0, [pc, #48]	; (8013030 <_ZN15Screen1ViewBaseC1Ev+0x1ef4>)
 8012ffe:	f01a ff27 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013002:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8013006:	889a      	ldrh	r2, [r3, #4]
 8013008:	4b0a      	ldr	r3, [pc, #40]	; (8013034 <_ZN15Screen1ViewBaseC1Ev+0x1ef8>)
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	429a      	cmp	r2, r3
 801300e:	d315      	bcc.n	801303c <_ZN15Screen1ViewBaseC1Ev+0x1f00>
 8013010:	4b09      	ldr	r3, [pc, #36]	; (8013038 <_ZN15Screen1ViewBaseC1Ev+0x1efc>)
 8013012:	4a06      	ldr	r2, [pc, #24]	; (801302c <_ZN15Screen1ViewBaseC1Ev+0x1ef0>)
 8013014:	21af      	movs	r1, #175	; 0xaf
 8013016:	4806      	ldr	r0, [pc, #24]	; (8013030 <_ZN15Screen1ViewBaseC1Ev+0x1ef4>)
 8013018:	f01a ff1a 	bl	802de50 <__assert_func>
 801301c:	20009804 	.word	0x20009804
 8013020:	0802f53c 	.word	0x0802f53c
 8013024:	200097f8 	.word	0x200097f8
 8013028:	0802f430 	.word	0x0802f430
 801302c:	0802f474 	.word	0x0802f474
 8013030:	0802f4a4 	.word	0x0802f4a4
 8013034:	200097fc 	.word	0x200097fc
 8013038:	0802f4e8 	.word	0x0802f4e8
    }
 801303c:	bf00      	nop
        return texts->getText(typedTextId);
 801303e:	4bab      	ldr	r3, [pc, #684]	; (80132ec <_ZN15Screen1ViewBaseC1Ev+0x21b0>)
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8013046:	889b      	ldrh	r3, [r3, #4]
 8013048:	4619      	mov	r1, r3
 801304a:	4610      	mov	r0, r2
 801304c:	f001 fa30 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8013050:	4603      	mov	r3, r0
 8013052:	bf00      	nop
 8013054:	4aa6      	ldr	r2, [pc, #664]	; (80132f0 <_ZN15Screen1ViewBaseC1Ev+0x21b4>)
 8013056:	210a      	movs	r1, #10
 8013058:	4620      	mov	r0, r4
 801305a:	f00c f945 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801305e:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8013062:	4618      	mov	r0, r3
 8013064:	f7fc fd20 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    iat_label.setWildcard(iat_labelBuffer);
 8013068:	1d3b      	adds	r3, r7, #4
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	f203 627c 	addw	r2, r3, #1660	; 0x67c
 8013070:	1d3b      	adds	r3, r7, #4
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	f603 4394 	addw	r3, r3, #3220	; 0xc94
 8013078:	4619      	mov	r1, r3
 801307a:	4610      	mov	r0, r2
 801307c:	f7fd ff24 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_label.resizeToCurrentText();
 8013080:	1d3b      	adds	r3, r7, #4
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8013088:	4618      	mov	r0, r3
 801308a:	f006 ff61 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_S5UQ));
 801308e:	1d3b      	adds	r3, r7, #4
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8013096:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801309a:	2105      	movs	r1, #5
 801309c:	4618      	mov	r0, r3
 801309e:	f7fd fe85 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80130a2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80130a6:	4619      	mov	r1, r3
 80130a8:	4620      	mov	r0, r4
 80130aa:	f006 ff6e 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80130ae:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7fc fcf8 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    iat_units.setXY(151, 246);
 80130b8:	1d3b      	adds	r3, r7, #4
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 80130c0:	22f6      	movs	r2, #246	; 0xf6
 80130c2:	2197      	movs	r1, #151	; 0x97
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7fd fc65 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    iat_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80130ca:	1d3b      	adds	r3, r7, #4
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f203 64bc 	addw	r4, r3, #1724	; 0x6bc
 80130d2:	23ff      	movs	r3, #255	; 0xff
 80130d4:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 80130d8:	23ff      	movs	r3, #255	; 0xff
 80130da:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e
 80130de:	23ff      	movs	r3, #255	; 0xff
 80130e0:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d
 80130e4:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 80130e8:	041b      	lsls	r3, r3, #16
 80130ea:	461a      	mov	r2, r3
 80130ec:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 80130f0:	021b      	lsls	r3, r3, #8
 80130f2:	431a      	orrs	r2, r3
 80130f4:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 80130f8:	4313      	orrs	r3, r2
 80130fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80130fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8013102:	4611      	mov	r1, r2
 8013104:	4618      	mov	r0, r3
 8013106:	f7fd fb75 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 801310a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	461a      	mov	r2, r3
 8013112:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 8013116:	f107 0320 	add.w	r3, r7, #32
 801311a:	601a      	str	r2, [r3, #0]
        this->color = color;
 801311c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8013120:	f107 0220 	add.w	r2, r7, #32
 8013124:	6812      	ldr	r2, [r2, #0]
 8013126:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013128:	bf00      	nop
    iat_units.setLinespacing(0);
 801312a:	1d3b      	adds	r3, r7, #4
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8013132:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8013136:	2300      	movs	r3, #0
 8013138:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
        linespace = space;
 801313c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8013140:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8013144:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013146:	bf00      	nop
    Unicode::snprintf(iat_unitsBuffer, IAT_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_S9CZ).getText());
 8013148:	1d3b      	adds	r3, r7, #4
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	f603 44a8 	addw	r4, r3, #3240	; 0xca8
 8013150:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8013154:	212c      	movs	r1, #44	; 0x2c
 8013156:	4618      	mov	r0, r3
 8013158:	f7fd fe28 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 801315c:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8013160:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013164:	4b63      	ldr	r3, [pc, #396]	; (80132f4 <_ZN15Screen1ViewBaseC1Ev+0x21b8>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d105      	bne.n	8013178 <_ZN15Screen1ViewBaseC1Ev+0x203c>
 801316c:	4b62      	ldr	r3, [pc, #392]	; (80132f8 <_ZN15Screen1ViewBaseC1Ev+0x21bc>)
 801316e:	4a63      	ldr	r2, [pc, #396]	; (80132fc <_ZN15Screen1ViewBaseC1Ev+0x21c0>)
 8013170:	21ae      	movs	r1, #174	; 0xae
 8013172:	4863      	ldr	r0, [pc, #396]	; (8013300 <_ZN15Screen1ViewBaseC1Ev+0x21c4>)
 8013174:	f01a fe6c 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013178:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801317c:	889a      	ldrh	r2, [r3, #4]
 801317e:	4b61      	ldr	r3, [pc, #388]	; (8013304 <_ZN15Screen1ViewBaseC1Ev+0x21c8>)
 8013180:	881b      	ldrh	r3, [r3, #0]
 8013182:	429a      	cmp	r2, r3
 8013184:	d305      	bcc.n	8013192 <_ZN15Screen1ViewBaseC1Ev+0x2056>
 8013186:	4b60      	ldr	r3, [pc, #384]	; (8013308 <_ZN15Screen1ViewBaseC1Ev+0x21cc>)
 8013188:	4a5c      	ldr	r2, [pc, #368]	; (80132fc <_ZN15Screen1ViewBaseC1Ev+0x21c0>)
 801318a:	21af      	movs	r1, #175	; 0xaf
 801318c:	485c      	ldr	r0, [pc, #368]	; (8013300 <_ZN15Screen1ViewBaseC1Ev+0x21c4>)
 801318e:	f01a fe5f 	bl	802de50 <__assert_func>
    }
 8013192:	bf00      	nop
        return texts->getText(typedTextId);
 8013194:	4b55      	ldr	r3, [pc, #340]	; (80132ec <_ZN15Screen1ViewBaseC1Ev+0x21b0>)
 8013196:	681a      	ldr	r2, [r3, #0]
 8013198:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801319c:	889b      	ldrh	r3, [r3, #4]
 801319e:	4619      	mov	r1, r3
 80131a0:	4610      	mov	r0, r2
 80131a2:	f001 f985 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 80131a6:	4603      	mov	r3, r0
 80131a8:	bf00      	nop
 80131aa:	4a51      	ldr	r2, [pc, #324]	; (80132f0 <_ZN15Screen1ViewBaseC1Ev+0x21b4>)
 80131ac:	210a      	movs	r1, #10
 80131ae:	4620      	mov	r0, r4
 80131b0:	f00c f89a 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80131b4:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7fc fc75 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    iat_units.setWildcard(iat_unitsBuffer);
 80131be:	1d3b      	adds	r3, r7, #4
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f203 62bc 	addw	r2, r3, #1724	; 0x6bc
 80131c6:	1d3b      	adds	r3, r7, #4
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 80131ce:	4619      	mov	r1, r3
 80131d0:	4610      	mov	r0, r2
 80131d2:	f7fd fe79 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    iat_units.resizeToCurrentText();
 80131d6:	1d3b      	adds	r3, r7, #4
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 80131de:	4618      	mov	r0, r3
 80131e0:	f006 feb6 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    iat_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XBZK));
 80131e4:	1d3b      	adds	r3, r7, #4
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f203 64bc 	addw	r4, r3, #1724	; 0x6bc
 80131ec:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80131f0:	2104      	movs	r1, #4
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7fd fdda 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80131f8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80131fc:	4619      	mov	r1, r3
 80131fe:	4620      	mov	r0, r4
 8013200:	f006 fec3 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013204:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8013208:	4618      	mov	r0, r3
 801320a:	f7fc fc4d 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_value.setXY(34, 322);
 801320e:	1d3b      	adds	r3, r7, #4
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8013216:	f44f 72a1 	mov.w	r2, #322	; 0x142
 801321a:	2122      	movs	r1, #34	; 0x22
 801321c:	4618      	mov	r0, r3
 801321e:	f7fd fbb9 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013222:	1d3b      	adds	r3, r7, #4
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 801322a:	23ff      	movs	r3, #255	; 0xff
 801322c:	f887 3423 	strb.w	r3, [r7, #1059]	; 0x423
 8013230:	23ff      	movs	r3, #255	; 0xff
 8013232:	f887 3422 	strb.w	r3, [r7, #1058]	; 0x422
 8013236:	23ff      	movs	r3, #255	; 0xff
 8013238:	f887 3421 	strb.w	r3, [r7, #1057]	; 0x421
 801323c:	f897 3423 	ldrb.w	r3, [r7, #1059]	; 0x423
 8013240:	041b      	lsls	r3, r3, #16
 8013242:	461a      	mov	r2, r3
 8013244:	f897 3422 	ldrb.w	r3, [r7, #1058]	; 0x422
 8013248:	021b      	lsls	r3, r3, #8
 801324a:	431a      	orrs	r2, r3
 801324c:	f897 3421 	ldrb.w	r3, [r7, #1057]	; 0x421
 8013250:	4313      	orrs	r3, r2
 8013252:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013256:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801325a:	4611      	mov	r1, r2
 801325c:	4618      	mov	r0, r3
 801325e:	f7fd fac9 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8013262:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	461a      	mov	r2, r3
 801326a:	f8c7 4424 	str.w	r4, [r7, #1060]	; 0x424
 801326e:	f107 031c 	add.w	r3, r7, #28
 8013272:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013274:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8013278:	f107 021c 	add.w	r2, r7, #28
 801327c:	6812      	ldr	r2, [r2, #0]
 801327e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013280:	bf00      	nop
    oilp_value.setLinespacing(0);
 8013282:	1d3b      	adds	r3, r7, #4
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 801328a:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 801328e:	2300      	movs	r3, #0
 8013290:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
        linespace = space;
 8013294:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8013298:	f8b7 242a 	ldrh.w	r2, [r7, #1066]	; 0x42a
 801329c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 801329e:	bf00      	nop
    Unicode::snprintf(oilp_valueBuffer, OILP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DHUY).getText());
 80132a0:	1d3b      	adds	r3, r7, #4
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	f603 44bc 	addw	r4, r3, #3260	; 0xcbc
 80132a8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80132ac:	211d      	movs	r1, #29
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7fd fd7c 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80132b4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80132b8:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80132bc:	4b0d      	ldr	r3, [pc, #52]	; (80132f4 <_ZN15Screen1ViewBaseC1Ev+0x21b8>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d105      	bne.n	80132d0 <_ZN15Screen1ViewBaseC1Ev+0x2194>
 80132c4:	4b0c      	ldr	r3, [pc, #48]	; (80132f8 <_ZN15Screen1ViewBaseC1Ev+0x21bc>)
 80132c6:	4a0d      	ldr	r2, [pc, #52]	; (80132fc <_ZN15Screen1ViewBaseC1Ev+0x21c0>)
 80132c8:	21ae      	movs	r1, #174	; 0xae
 80132ca:	480d      	ldr	r0, [pc, #52]	; (8013300 <_ZN15Screen1ViewBaseC1Ev+0x21c4>)
 80132cc:	f01a fdc0 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80132d0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80132d4:	889a      	ldrh	r2, [r3, #4]
 80132d6:	4b0b      	ldr	r3, [pc, #44]	; (8013304 <_ZN15Screen1ViewBaseC1Ev+0x21c8>)
 80132d8:	881b      	ldrh	r3, [r3, #0]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d316      	bcc.n	801330c <_ZN15Screen1ViewBaseC1Ev+0x21d0>
 80132de:	4b0a      	ldr	r3, [pc, #40]	; (8013308 <_ZN15Screen1ViewBaseC1Ev+0x21cc>)
 80132e0:	4a06      	ldr	r2, [pc, #24]	; (80132fc <_ZN15Screen1ViewBaseC1Ev+0x21c0>)
 80132e2:	21af      	movs	r1, #175	; 0xaf
 80132e4:	4806      	ldr	r0, [pc, #24]	; (8013300 <_ZN15Screen1ViewBaseC1Ev+0x21c4>)
 80132e6:	f01a fdb3 	bl	802de50 <__assert_func>
 80132ea:	bf00      	nop
 80132ec:	20009804 	.word	0x20009804
 80132f0:	0802f53c 	.word	0x0802f53c
 80132f4:	200097f8 	.word	0x200097f8
 80132f8:	0802f430 	.word	0x0802f430
 80132fc:	0802f474 	.word	0x0802f474
 8013300:	0802f4a4 	.word	0x0802f4a4
 8013304:	200097fc 	.word	0x200097fc
 8013308:	0802f4e8 	.word	0x0802f4e8
    }
 801330c:	bf00      	nop
        return texts->getText(typedTextId);
 801330e:	4bab      	ldr	r3, [pc, #684]	; (80135bc <_ZN15Screen1ViewBaseC1Ev+0x2480>)
 8013310:	681a      	ldr	r2, [r3, #0]
 8013312:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8013316:	889b      	ldrh	r3, [r3, #4]
 8013318:	4619      	mov	r1, r3
 801331a:	4610      	mov	r0, r2
 801331c:	f001 f8c8 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8013320:	4603      	mov	r3, r0
 8013322:	bf00      	nop
 8013324:	4aa6      	ldr	r2, [pc, #664]	; (80135c0 <_ZN15Screen1ViewBaseC1Ev+0x2484>)
 8013326:	2120      	movs	r1, #32
 8013328:	4620      	mov	r0, r4
 801332a:	f00b ffdd 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801332e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8013332:	4618      	mov	r0, r3
 8013334:	f7fc fbb8 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_value.setWildcard(oilp_valueBuffer);
 8013338:	1d3b      	adds	r3, r7, #4
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	f203 62fc 	addw	r2, r3, #1788	; 0x6fc
 8013340:	1d3b      	adds	r3, r7, #4
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	f603 43bc 	addw	r3, r3, #3260	; 0xcbc
 8013348:	4619      	mov	r1, r3
 801334a:	4610      	mov	r0, r2
 801334c:	f7fd fdbc 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_value.resizeToCurrentText();
 8013350:	1d3b      	adds	r3, r7, #4
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8013358:	4618      	mov	r0, r3
 801335a:	f006 fdf9 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GFHB));
 801335e:	1d3b      	adds	r3, r7, #4
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	f203 64fc 	addw	r4, r3, #1788	; 0x6fc
 8013366:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801336a:	2106      	movs	r1, #6
 801336c:	4618      	mov	r0, r3
 801336e:	f7fd fd1d 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8013372:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8013376:	4619      	mov	r1, r3
 8013378:	4620      	mov	r0, r4
 801337a:	f006 fe06 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801337e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8013382:	4618      	mov	r0, r3
 8013384:	f7fc fb90 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_label.setXY(34, 401);
 8013388:	1d3b      	adds	r3, r7, #4
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013390:	f240 1291 	movw	r2, #401	; 0x191
 8013394:	2122      	movs	r1, #34	; 0x22
 8013396:	4618      	mov	r0, r3
 8013398:	f7fd fafc 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801339c:	1d3b      	adds	r3, r7, #4
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 80133a4:	23ff      	movs	r3, #255	; 0xff
 80133a6:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
 80133aa:	23ff      	movs	r3, #255	; 0xff
 80133ac:	f887 3436 	strb.w	r3, [r7, #1078]	; 0x436
 80133b0:	23ff      	movs	r3, #255	; 0xff
 80133b2:	f887 3435 	strb.w	r3, [r7, #1077]	; 0x435
 80133b6:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 80133ba:	041b      	lsls	r3, r3, #16
 80133bc:	461a      	mov	r2, r3
 80133be:	f897 3436 	ldrb.w	r3, [r7, #1078]	; 0x436
 80133c2:	021b      	lsls	r3, r3, #8
 80133c4:	431a      	orrs	r2, r3
 80133c6:	f897 3435 	ldrb.w	r3, [r7, #1077]	; 0x435
 80133ca:	4313      	orrs	r3, r2
 80133cc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80133d0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80133d4:	4611      	mov	r1, r2
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7fd fa0c 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 80133dc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	461a      	mov	r2, r3
 80133e4:	f8c7 4438 	str.w	r4, [r7, #1080]	; 0x438
 80133e8:	f107 0318 	add.w	r3, r7, #24
 80133ec:	601a      	str	r2, [r3, #0]
        this->color = color;
 80133ee:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80133f2:	f107 0218 	add.w	r2, r7, #24
 80133f6:	6812      	ldr	r2, [r2, #0]
 80133f8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80133fa:	bf00      	nop
    oilp_label.setLinespacing(0);
 80133fc:	1d3b      	adds	r3, r7, #4
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013404:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8013408:	2300      	movs	r3, #0
 801340a:	f8a7 343e 	strh.w	r3, [r7, #1086]	; 0x43e
        linespace = space;
 801340e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8013412:	f8b7 243e 	ldrh.w	r2, [r7, #1086]	; 0x43e
 8013416:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013418:	bf00      	nop
    Unicode::snprintf(oilp_labelBuffer, OILP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9VHS).getText());
 801341a:	1d3b      	adds	r3, r7, #4
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f603 44fc 	addw	r4, r3, #3324	; 0xcfc
 8013422:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8013426:	212b      	movs	r1, #43	; 0x2b
 8013428:	4618      	mov	r0, r3
 801342a:	f7fd fcbf 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 801342e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8013432:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013436:	4b63      	ldr	r3, [pc, #396]	; (80135c4 <_ZN15Screen1ViewBaseC1Ev+0x2488>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d105      	bne.n	801344a <_ZN15Screen1ViewBaseC1Ev+0x230e>
 801343e:	4b62      	ldr	r3, [pc, #392]	; (80135c8 <_ZN15Screen1ViewBaseC1Ev+0x248c>)
 8013440:	4a62      	ldr	r2, [pc, #392]	; (80135cc <_ZN15Screen1ViewBaseC1Ev+0x2490>)
 8013442:	21ae      	movs	r1, #174	; 0xae
 8013444:	4862      	ldr	r0, [pc, #392]	; (80135d0 <_ZN15Screen1ViewBaseC1Ev+0x2494>)
 8013446:	f01a fd03 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801344a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801344e:	889a      	ldrh	r2, [r3, #4]
 8013450:	4b60      	ldr	r3, [pc, #384]	; (80135d4 <_ZN15Screen1ViewBaseC1Ev+0x2498>)
 8013452:	881b      	ldrh	r3, [r3, #0]
 8013454:	429a      	cmp	r2, r3
 8013456:	d305      	bcc.n	8013464 <_ZN15Screen1ViewBaseC1Ev+0x2328>
 8013458:	4b5f      	ldr	r3, [pc, #380]	; (80135d8 <_ZN15Screen1ViewBaseC1Ev+0x249c>)
 801345a:	4a5c      	ldr	r2, [pc, #368]	; (80135cc <_ZN15Screen1ViewBaseC1Ev+0x2490>)
 801345c:	21af      	movs	r1, #175	; 0xaf
 801345e:	485c      	ldr	r0, [pc, #368]	; (80135d0 <_ZN15Screen1ViewBaseC1Ev+0x2494>)
 8013460:	f01a fcf6 	bl	802de50 <__assert_func>
    }
 8013464:	bf00      	nop
        return texts->getText(typedTextId);
 8013466:	4b55      	ldr	r3, [pc, #340]	; (80135bc <_ZN15Screen1ViewBaseC1Ev+0x2480>)
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801346e:	889b      	ldrh	r3, [r3, #4]
 8013470:	4619      	mov	r1, r3
 8013472:	4610      	mov	r0, r2
 8013474:	f001 f81c 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8013478:	4603      	mov	r3, r0
 801347a:	bf00      	nop
 801347c:	4a50      	ldr	r2, [pc, #320]	; (80135c0 <_ZN15Screen1ViewBaseC1Ev+0x2484>)
 801347e:	210a      	movs	r1, #10
 8013480:	4620      	mov	r0, r4
 8013482:	f00b ff31 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013486:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801348a:	4618      	mov	r0, r3
 801348c:	f7fc fb0c 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_label.setWildcard(oilp_labelBuffer);
 8013490:	1d3b      	adds	r3, r7, #4
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f203 723c 	addw	r2, r3, #1852	; 0x73c
 8013498:	1d3b      	adds	r3, r7, #4
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f603 43fc 	addw	r3, r3, #3324	; 0xcfc
 80134a0:	4619      	mov	r1, r3
 80134a2:	4610      	mov	r0, r2
 80134a4:	f7fd fd10 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_label.resizeToCurrentText();
 80134a8:	1d3b      	adds	r3, r7, #4
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 80134b0:	4618      	mov	r0, r3
 80134b2:	f006 fd4d 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BVOP));
 80134b6:	1d3b      	adds	r3, r7, #4
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 80134be:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80134c2:	2108      	movs	r1, #8
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7fd fc71 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80134ca:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80134ce:	4619      	mov	r1, r3
 80134d0:	4620      	mov	r0, r4
 80134d2:	f006 fd5a 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80134d6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fc fae4 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    oilp_units.setXY(162, 401);
 80134e0:	1d3b      	adds	r3, r7, #4
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80134e8:	f240 1291 	movw	r2, #401	; 0x191
 80134ec:	21a2      	movs	r1, #162	; 0xa2
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7fd fa50 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    oilp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80134f4:	1d3b      	adds	r3, r7, #4
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 80134fc:	23ff      	movs	r3, #255	; 0xff
 80134fe:	f887 344b 	strb.w	r3, [r7, #1099]	; 0x44b
 8013502:	23ff      	movs	r3, #255	; 0xff
 8013504:	f887 344a 	strb.w	r3, [r7, #1098]	; 0x44a
 8013508:	23ff      	movs	r3, #255	; 0xff
 801350a:	f887 3449 	strb.w	r3, [r7, #1097]	; 0x449
 801350e:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8013512:	041b      	lsls	r3, r3, #16
 8013514:	461a      	mov	r2, r3
 8013516:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 801351a:	021b      	lsls	r3, r3, #8
 801351c:	431a      	orrs	r2, r3
 801351e:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 8013522:	4313      	orrs	r3, r2
 8013524:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013528:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801352c:	4611      	mov	r1, r2
 801352e:	4618      	mov	r0, r3
 8013530:	f7fd f960 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8013534:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	461a      	mov	r2, r3
 801353c:	f8c7 444c 	str.w	r4, [r7, #1100]	; 0x44c
 8013540:	f107 0314 	add.w	r3, r7, #20
 8013544:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013546:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 801354a:	f107 0214 	add.w	r2, r7, #20
 801354e:	6812      	ldr	r2, [r2, #0]
 8013550:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013552:	bf00      	nop
    oilp_units.setLinespacing(0);
 8013554:	1d3b      	adds	r3, r7, #4
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 801355c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8013560:	2300      	movs	r3, #0
 8013562:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
        linespace = space;
 8013566:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 801356a:	f8b7 2452 	ldrh.w	r2, [r7, #1106]	; 0x452
 801356e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013570:	bf00      	nop
    Unicode::snprintf(oilp_unitsBuffer, OILP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9IGG).getText());
 8013572:	1d3b      	adds	r3, r7, #4
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	f503 6451 	add.w	r4, r3, #3344	; 0xd10
 801357a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801357e:	212a      	movs	r1, #42	; 0x2a
 8013580:	4618      	mov	r0, r3
 8013582:	f7fd fc13 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8013586:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801358a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801358e:	4b0d      	ldr	r3, [pc, #52]	; (80135c4 <_ZN15Screen1ViewBaseC1Ev+0x2488>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d105      	bne.n	80135a2 <_ZN15Screen1ViewBaseC1Ev+0x2466>
 8013596:	4b0c      	ldr	r3, [pc, #48]	; (80135c8 <_ZN15Screen1ViewBaseC1Ev+0x248c>)
 8013598:	4a0c      	ldr	r2, [pc, #48]	; (80135cc <_ZN15Screen1ViewBaseC1Ev+0x2490>)
 801359a:	21ae      	movs	r1, #174	; 0xae
 801359c:	480c      	ldr	r0, [pc, #48]	; (80135d0 <_ZN15Screen1ViewBaseC1Ev+0x2494>)
 801359e:	f01a fc57 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80135a2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80135a6:	889a      	ldrh	r2, [r3, #4]
 80135a8:	4b0a      	ldr	r3, [pc, #40]	; (80135d4 <_ZN15Screen1ViewBaseC1Ev+0x2498>)
 80135aa:	881b      	ldrh	r3, [r3, #0]
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d315      	bcc.n	80135dc <_ZN15Screen1ViewBaseC1Ev+0x24a0>
 80135b0:	4b09      	ldr	r3, [pc, #36]	; (80135d8 <_ZN15Screen1ViewBaseC1Ev+0x249c>)
 80135b2:	4a06      	ldr	r2, [pc, #24]	; (80135cc <_ZN15Screen1ViewBaseC1Ev+0x2490>)
 80135b4:	21af      	movs	r1, #175	; 0xaf
 80135b6:	4806      	ldr	r0, [pc, #24]	; (80135d0 <_ZN15Screen1ViewBaseC1Ev+0x2494>)
 80135b8:	f01a fc4a 	bl	802de50 <__assert_func>
 80135bc:	20009804 	.word	0x20009804
 80135c0:	0802f53c 	.word	0x0802f53c
 80135c4:	200097f8 	.word	0x200097f8
 80135c8:	0802f430 	.word	0x0802f430
 80135cc:	0802f474 	.word	0x0802f474
 80135d0:	0802f4a4 	.word	0x0802f4a4
 80135d4:	200097fc 	.word	0x200097fc
 80135d8:	0802f4e8 	.word	0x0802f4e8
    }
 80135dc:	bf00      	nop
        return texts->getText(typedTextId);
 80135de:	4bab      	ldr	r3, [pc, #684]	; (801388c <_ZN15Screen1ViewBaseC1Ev+0x2750>)
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80135e6:	889b      	ldrh	r3, [r3, #4]
 80135e8:	4619      	mov	r1, r3
 80135ea:	4610      	mov	r0, r2
 80135ec:	f000 ff60 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 80135f0:	4603      	mov	r3, r0
 80135f2:	bf00      	nop
 80135f4:	4aa6      	ldr	r2, [pc, #664]	; (8013890 <_ZN15Screen1ViewBaseC1Ev+0x2754>)
 80135f6:	210a      	movs	r1, #10
 80135f8:	4620      	mov	r0, r4
 80135fa:	f00b fe75 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80135fe:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8013602:	4618      	mov	r0, r3
 8013604:	f7fc fa50 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    oilp_units.setWildcard(oilp_unitsBuffer);
 8013608:	1d3b      	adds	r3, r7, #4
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	f203 727c 	addw	r2, r3, #1916	; 0x77c
 8013610:	1d3b      	adds	r3, r7, #4
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	f503 6351 	add.w	r3, r3, #3344	; 0xd10
 8013618:	4619      	mov	r1, r3
 801361a:	4610      	mov	r0, r2
 801361c:	f7fd fc54 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilp_units.resizeToCurrentText();
 8013620:	1d3b      	adds	r3, r7, #4
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013628:	4618      	mov	r0, r3
 801362a:	f006 fc91 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    oilp_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_R7A4));
 801362e:	1d3b      	adds	r3, r7, #4
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 8013636:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801363a:	2107      	movs	r1, #7
 801363c:	4618      	mov	r0, r3
 801363e:	f7fd fbb5 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8013642:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8013646:	4619      	mov	r1, r3
 8013648:	4620      	mov	r0, r4
 801364a:	f006 fc9e 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801364e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8013652:	4618      	mov	r0, r3
 8013654:	f7fc fa28 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_value.setXY(34, 473);
 8013658:	1d3b      	adds	r3, r7, #4
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013660:	f240 12d9 	movw	r2, #473	; 0x1d9
 8013664:	2122      	movs	r1, #34	; 0x22
 8013666:	4618      	mov	r0, r3
 8013668:	f7fd f994 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_value.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801366c:	1d3b      	adds	r3, r7, #4
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 8013674:	23ff      	movs	r3, #255	; 0xff
 8013676:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 801367a:	23ff      	movs	r3, #255	; 0xff
 801367c:	f887 345e 	strb.w	r3, [r7, #1118]	; 0x45e
 8013680:	23ff      	movs	r3, #255	; 0xff
 8013682:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
 8013686:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 801368a:	041b      	lsls	r3, r3, #16
 801368c:	461a      	mov	r2, r3
 801368e:	f897 345e 	ldrb.w	r3, [r7, #1118]	; 0x45e
 8013692:	021b      	lsls	r3, r3, #8
 8013694:	431a      	orrs	r2, r3
 8013696:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 801369a:	4313      	orrs	r3, r2
 801369c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80136a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80136a4:	4611      	mov	r1, r2
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7fd f8a4 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 80136ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	461a      	mov	r2, r3
 80136b4:	f8c7 4460 	str.w	r4, [r7, #1120]	; 0x460
 80136b8:	f107 0310 	add.w	r3, r7, #16
 80136bc:	601a      	str	r2, [r3, #0]
        this->color = color;
 80136be:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80136c2:	f107 0210 	add.w	r2, r7, #16
 80136c6:	6812      	ldr	r2, [r2, #0]
 80136c8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80136ca:	bf00      	nop
    fuelp_value.setLinespacing(0);
 80136cc:	1d3b      	adds	r3, r7, #4
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80136d4:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 80136d8:	2300      	movs	r3, #0
 80136da:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
        linespace = space;
 80136de:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80136e2:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 80136e6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80136e8:	bf00      	nop
    Unicode::snprintf(fuelp_valueBuffer, FUELP_VALUE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_C87O).getText());
 80136ea:	1d3b      	adds	r3, r7, #4
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	f603 5424 	addw	r4, r3, #3364	; 0xd24
 80136f2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80136f6:	211e      	movs	r1, #30
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7fd fb57 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80136fe:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8013702:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013706:	4b63      	ldr	r3, [pc, #396]	; (8013894 <_ZN15Screen1ViewBaseC1Ev+0x2758>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d105      	bne.n	801371a <_ZN15Screen1ViewBaseC1Ev+0x25de>
 801370e:	4b62      	ldr	r3, [pc, #392]	; (8013898 <_ZN15Screen1ViewBaseC1Ev+0x275c>)
 8013710:	4a62      	ldr	r2, [pc, #392]	; (801389c <_ZN15Screen1ViewBaseC1Ev+0x2760>)
 8013712:	21ae      	movs	r1, #174	; 0xae
 8013714:	4862      	ldr	r0, [pc, #392]	; (80138a0 <_ZN15Screen1ViewBaseC1Ev+0x2764>)
 8013716:	f01a fb9b 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 801371a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 801371e:	889a      	ldrh	r2, [r3, #4]
 8013720:	4b60      	ldr	r3, [pc, #384]	; (80138a4 <_ZN15Screen1ViewBaseC1Ev+0x2768>)
 8013722:	881b      	ldrh	r3, [r3, #0]
 8013724:	429a      	cmp	r2, r3
 8013726:	d305      	bcc.n	8013734 <_ZN15Screen1ViewBaseC1Ev+0x25f8>
 8013728:	4b5f      	ldr	r3, [pc, #380]	; (80138a8 <_ZN15Screen1ViewBaseC1Ev+0x276c>)
 801372a:	4a5c      	ldr	r2, [pc, #368]	; (801389c <_ZN15Screen1ViewBaseC1Ev+0x2760>)
 801372c:	21af      	movs	r1, #175	; 0xaf
 801372e:	485c      	ldr	r0, [pc, #368]	; (80138a0 <_ZN15Screen1ViewBaseC1Ev+0x2764>)
 8013730:	f01a fb8e 	bl	802de50 <__assert_func>
    }
 8013734:	bf00      	nop
        return texts->getText(typedTextId);
 8013736:	4b55      	ldr	r3, [pc, #340]	; (801388c <_ZN15Screen1ViewBaseC1Ev+0x2750>)
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801373e:	889b      	ldrh	r3, [r3, #4]
 8013740:	4619      	mov	r1, r3
 8013742:	4610      	mov	r0, r2
 8013744:	f000 feb4 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8013748:	4603      	mov	r3, r0
 801374a:	bf00      	nop
 801374c:	4a50      	ldr	r2, [pc, #320]	; (8013890 <_ZN15Screen1ViewBaseC1Ev+0x2754>)
 801374e:	2120      	movs	r1, #32
 8013750:	4620      	mov	r0, r4
 8013752:	f00b fdc9 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013756:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801375a:	4618      	mov	r0, r3
 801375c:	f7fc f9a4 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_value.setWildcard(fuelp_valueBuffer);
 8013760:	1d3b      	adds	r3, r7, #4
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8013768:	1d3b      	adds	r3, r7, #4
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	f603 5324 	addw	r3, r3, #3364	; 0xd24
 8013770:	4619      	mov	r1, r3
 8013772:	4610      	mov	r0, r2
 8013774:	f7fd fba8 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_value.resizeToCurrentText();
 8013778:	1d3b      	adds	r3, r7, #4
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013780:	4618      	mov	r0, r3
 8013782:	f006 fbe5 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_value.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0AFA));
 8013786:	1d3b      	adds	r3, r7, #4
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 801378e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8013792:	2109      	movs	r1, #9
 8013794:	4618      	mov	r0, r3
 8013796:	f7fd fb09 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 801379a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801379e:	4619      	mov	r1, r3
 80137a0:	4620      	mov	r0, r4
 80137a2:	f006 fbf2 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80137a6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7fc f97c 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_label.setXY(34, 552);
 80137b0:	1d3b      	adds	r3, r7, #4
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 80137b8:	f44f 720a 	mov.w	r2, #552	; 0x228
 80137bc:	2122      	movs	r1, #34	; 0x22
 80137be:	4618      	mov	r0, r3
 80137c0:	f7fd f8e8 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80137c4:	1d3b      	adds	r3, r7, #4
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f203 74fc 	addw	r4, r3, #2044	; 0x7fc
 80137cc:	23ff      	movs	r3, #255	; 0xff
 80137ce:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
 80137d2:	23ff      	movs	r3, #255	; 0xff
 80137d4:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
 80137d8:	23ff      	movs	r3, #255	; 0xff
 80137da:	f887 3471 	strb.w	r3, [r7, #1137]	; 0x471
 80137de:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 80137e2:	041b      	lsls	r3, r3, #16
 80137e4:	461a      	mov	r2, r3
 80137e6:	f897 3472 	ldrb.w	r3, [r7, #1138]	; 0x472
 80137ea:	021b      	lsls	r3, r3, #8
 80137ec:	431a      	orrs	r2, r3
 80137ee:	f897 3471 	ldrb.w	r3, [r7, #1137]	; 0x471
 80137f2:	4313      	orrs	r3, r2
 80137f4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80137f8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80137fc:	4611      	mov	r1, r2
 80137fe:	4618      	mov	r0, r3
 8013800:	f7fc fff8 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 8013804:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	461a      	mov	r2, r3
 801380c:	f8c7 4474 	str.w	r4, [r7, #1140]	; 0x474
 8013810:	f107 030c 	add.w	r3, r7, #12
 8013814:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013816:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801381a:	f107 020c 	add.w	r2, r7, #12
 801381e:	6812      	ldr	r2, [r2, #0]
 8013820:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013822:	bf00      	nop
    fuelp_label.setLinespacing(0);
 8013824:	1d3b      	adds	r3, r7, #4
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 801382c:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8013830:	2300      	movs	r3, #0
 8013832:	f8a7 347a 	strh.w	r3, [r7, #1146]	; 0x47a
        linespace = space;
 8013836:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 801383a:	f8b7 247a 	ldrh.w	r2, [r7, #1146]	; 0x47a
 801383e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8013840:	bf00      	nop
    Unicode::snprintf(fuelp_labelBuffer, FUELP_LABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_4VJ9).getText());
 8013842:	1d3b      	adds	r3, r7, #4
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	f603 5464 	addw	r4, r3, #3428	; 0xd64
 801384a:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801384e:	2129      	movs	r1, #41	; 0x29
 8013850:	4618      	mov	r0, r3
 8013852:	f7fd faab 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8013856:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801385a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801385e:	4b0d      	ldr	r3, [pc, #52]	; (8013894 <_ZN15Screen1ViewBaseC1Ev+0x2758>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d105      	bne.n	8013872 <_ZN15Screen1ViewBaseC1Ev+0x2736>
 8013866:	4b0c      	ldr	r3, [pc, #48]	; (8013898 <_ZN15Screen1ViewBaseC1Ev+0x275c>)
 8013868:	4a0c      	ldr	r2, [pc, #48]	; (801389c <_ZN15Screen1ViewBaseC1Ev+0x2760>)
 801386a:	21ae      	movs	r1, #174	; 0xae
 801386c:	480c      	ldr	r0, [pc, #48]	; (80138a0 <_ZN15Screen1ViewBaseC1Ev+0x2764>)
 801386e:	f01a faef 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8013872:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8013876:	889a      	ldrh	r2, [r3, #4]
 8013878:	4b0a      	ldr	r3, [pc, #40]	; (80138a4 <_ZN15Screen1ViewBaseC1Ev+0x2768>)
 801387a:	881b      	ldrh	r3, [r3, #0]
 801387c:	429a      	cmp	r2, r3
 801387e:	d315      	bcc.n	80138ac <_ZN15Screen1ViewBaseC1Ev+0x2770>
 8013880:	4b09      	ldr	r3, [pc, #36]	; (80138a8 <_ZN15Screen1ViewBaseC1Ev+0x276c>)
 8013882:	4a06      	ldr	r2, [pc, #24]	; (801389c <_ZN15Screen1ViewBaseC1Ev+0x2760>)
 8013884:	21af      	movs	r1, #175	; 0xaf
 8013886:	4806      	ldr	r0, [pc, #24]	; (80138a0 <_ZN15Screen1ViewBaseC1Ev+0x2764>)
 8013888:	f01a fae2 	bl	802de50 <__assert_func>
 801388c:	20009804 	.word	0x20009804
 8013890:	0802f53c 	.word	0x0802f53c
 8013894:	200097f8 	.word	0x200097f8
 8013898:	0802f430 	.word	0x0802f430
 801389c:	0802f474 	.word	0x0802f474
 80138a0:	0802f4a4 	.word	0x0802f4a4
 80138a4:	200097fc 	.word	0x200097fc
 80138a8:	0802f4e8 	.word	0x0802f4e8
    }
 80138ac:	bf00      	nop
        return texts->getText(typedTextId);
 80138ae:	4b56      	ldr	r3, [pc, #344]	; (8013a08 <_ZN15Screen1ViewBaseC1Ev+0x28cc>)
 80138b0:	681a      	ldr	r2, [r3, #0]
 80138b2:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80138b6:	889b      	ldrh	r3, [r3, #4]
 80138b8:	4619      	mov	r1, r3
 80138ba:	4610      	mov	r0, r2
 80138bc:	f000 fdf8 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 80138c0:	4603      	mov	r3, r0
 80138c2:	bf00      	nop
 80138c4:	4a51      	ldr	r2, [pc, #324]	; (8013a0c <_ZN15Screen1ViewBaseC1Ev+0x28d0>)
 80138c6:	210a      	movs	r1, #10
 80138c8:	4620      	mov	r0, r4
 80138ca:	f00b fd0d 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80138ce:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fc f8e8 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_label.setWildcard(fuelp_labelBuffer);
 80138d8:	1d3b      	adds	r3, r7, #4
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f203 72fc 	addw	r2, r3, #2044	; 0x7fc
 80138e0:	1d3b      	adds	r3, r7, #4
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	f603 5364 	addw	r3, r3, #3428	; 0xd64
 80138e8:	4619      	mov	r1, r3
 80138ea:	4610      	mov	r0, r2
 80138ec:	f7fd faec 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_label.resizeToCurrentText();
 80138f0:	1d3b      	adds	r3, r7, #4
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 80138f8:	4618      	mov	r0, r3
 80138fa:	f006 fb29 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MPLH));
 80138fe:	1d3b      	adds	r3, r7, #4
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f203 74fc 	addw	r4, r3, #2044	; 0x7fc
 8013906:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801390a:	210b      	movs	r1, #11
 801390c:	4618      	mov	r0, r3
 801390e:	f7fd fa4d 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8013912:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8013916:	4619      	mov	r1, r3
 8013918:	4620      	mov	r0, r4
 801391a:	f006 fb36 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801391e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8013922:	4618      	mov	r0, r3
 8013924:	f7fc f8c0 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    fuelp_units.setXY(285, 552);
 8013928:	1d3b      	adds	r3, r7, #4
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013930:	f44f 720a 	mov.w	r2, #552	; 0x228
 8013934:	f240 111d 	movw	r1, #285	; 0x11d
 8013938:	4618      	mov	r0, r3
 801393a:	f7fd f82b 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    fuelp_units.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801393e:	1d3b      	adds	r3, r7, #4
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	f603 043c 	addw	r4, r3, #2108	; 0x83c
 8013946:	23ff      	movs	r3, #255	; 0xff
 8013948:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
 801394c:	23ff      	movs	r3, #255	; 0xff
 801394e:	f887 3486 	strb.w	r3, [r7, #1158]	; 0x486
 8013952:	23ff      	movs	r3, #255	; 0xff
 8013954:	f887 3485 	strb.w	r3, [r7, #1157]	; 0x485
 8013958:	f897 3487 	ldrb.w	r3, [r7, #1159]	; 0x487
 801395c:	041b      	lsls	r3, r3, #16
 801395e:	461a      	mov	r2, r3
 8013960:	f897 3486 	ldrb.w	r3, [r7, #1158]	; 0x486
 8013964:	021b      	lsls	r3, r3, #8
 8013966:	431a      	orrs	r2, r3
 8013968:	f897 3485 	ldrb.w	r3, [r7, #1157]	; 0x485
 801396c:	4313      	orrs	r3, r2
 801396e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013972:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8013976:	4611      	mov	r1, r2
 8013978:	4618      	mov	r0, r3
 801397a:	f7fc ff3b 	bl	80107f4 <_ZN8touchgfx9colortypeC1Em>
 801397e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	461a      	mov	r2, r3
 8013986:	f8c7 4488 	str.w	r4, [r7, #1160]	; 0x488
 801398a:	f107 0308 	add.w	r3, r7, #8
 801398e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8013990:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8013994:	f107 0208 	add.w	r2, r7, #8
 8013998:	6812      	ldr	r2, [r2, #0]
 801399a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801399c:	bf00      	nop
    fuelp_units.setLinespacing(0);
 801399e:	1d3b      	adds	r3, r7, #4
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80139a6:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 80139aa:	2300      	movs	r3, #0
 80139ac:	f8a7 348e 	strh.w	r3, [r7, #1166]	; 0x48e
        linespace = space;
 80139b0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80139b4:	f8b7 248e 	ldrh.w	r2, [r7, #1166]	; 0x48e
 80139b8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80139ba:	bf00      	nop
    Unicode::snprintf(fuelp_unitsBuffer, FUELP_UNITS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_L52U).getText());
 80139bc:	1d3b      	adds	r3, r7, #4
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f603 5478 	addw	r4, r3, #3448	; 0xd78
 80139c4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80139c8:	2128      	movs	r1, #40	; 0x28
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7fd f9ee 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 80139d0:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80139d4:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80139d8:	4b0d      	ldr	r3, [pc, #52]	; (8013a10 <_ZN15Screen1ViewBaseC1Ev+0x28d4>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d105      	bne.n	80139ec <_ZN15Screen1ViewBaseC1Ev+0x28b0>
 80139e0:	4b0c      	ldr	r3, [pc, #48]	; (8013a14 <_ZN15Screen1ViewBaseC1Ev+0x28d8>)
 80139e2:	4a0d      	ldr	r2, [pc, #52]	; (8013a18 <_ZN15Screen1ViewBaseC1Ev+0x28dc>)
 80139e4:	21ae      	movs	r1, #174	; 0xae
 80139e6:	480d      	ldr	r0, [pc, #52]	; (8013a1c <_ZN15Screen1ViewBaseC1Ev+0x28e0>)
 80139e8:	f01a fa32 	bl	802de50 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80139ec:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80139f0:	889a      	ldrh	r2, [r3, #4]
 80139f2:	4b0b      	ldr	r3, [pc, #44]	; (8013a20 <_ZN15Screen1ViewBaseC1Ev+0x28e4>)
 80139f4:	881b      	ldrh	r3, [r3, #0]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d316      	bcc.n	8013a28 <_ZN15Screen1ViewBaseC1Ev+0x28ec>
 80139fa:	4b0a      	ldr	r3, [pc, #40]	; (8013a24 <_ZN15Screen1ViewBaseC1Ev+0x28e8>)
 80139fc:	4a06      	ldr	r2, [pc, #24]	; (8013a18 <_ZN15Screen1ViewBaseC1Ev+0x28dc>)
 80139fe:	21af      	movs	r1, #175	; 0xaf
 8013a00:	4806      	ldr	r0, [pc, #24]	; (8013a1c <_ZN15Screen1ViewBaseC1Ev+0x28e0>)
 8013a02:	f01a fa25 	bl	802de50 <__assert_func>
 8013a06:	bf00      	nop
 8013a08:	20009804 	.word	0x20009804
 8013a0c:	0802f53c 	.word	0x0802f53c
 8013a10:	200097f8 	.word	0x200097f8
 8013a14:	0802f430 	.word	0x0802f430
 8013a18:	0802f474 	.word	0x0802f474
 8013a1c:	0802f4a4 	.word	0x0802f4a4
 8013a20:	200097fc 	.word	0x200097fc
 8013a24:	0802f4e8 	.word	0x0802f4e8
    }
 8013a28:	bf00      	nop
        return texts->getText(typedTextId);
 8013a2a:	4bd9      	ldr	r3, [pc, #868]	; (8013d90 <_ZN15Screen1ViewBaseC1Ev+0x2c54>)
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8013a32:	889b      	ldrh	r3, [r3, #4]
 8013a34:	4619      	mov	r1, r3
 8013a36:	4610      	mov	r0, r2
 8013a38:	f000 fd3a 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	bf00      	nop
 8013a40:	4ad4      	ldr	r2, [pc, #848]	; (8013d94 <_ZN15Screen1ViewBaseC1Ev+0x2c58>)
 8013a42:	210a      	movs	r1, #10
 8013a44:	4620      	mov	r0, r4
 8013a46:	f00b fc4f 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013a4a:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7fc f82a 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>
    fuelp_units.setWildcard(fuelp_unitsBuffer);
 8013a54:	1d3b      	adds	r3, r7, #4
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f603 023c 	addw	r2, r3, #2108	; 0x83c
 8013a5c:	1d3b      	adds	r3, r7, #4
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f603 5378 	addw	r3, r3, #3448	; 0xd78
 8013a64:	4619      	mov	r1, r3
 8013a66:	4610      	mov	r0, r2
 8013a68:	f7fd fa2e 	bl	8010ec8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    fuelp_units.resizeToCurrentText();
 8013a6c:	1d3b      	adds	r3, r7, #4
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013a74:	4618      	mov	r0, r3
 8013a76:	f006 fa6b 	bl	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    fuelp_units.setTypedText(touchgfx::TypedText(T___SINGLEUSE_INAE));
 8013a7a:	1d3b      	adds	r3, r7, #4
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	f603 043c 	addw	r4, r3, #2108	; 0x83c
 8013a82:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8013a86:	210a      	movs	r1, #10
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7fd f98f 	bl	8010dac <_ZN8touchgfx9TypedTextC1Et>
 8013a8e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8013a92:	4619      	mov	r1, r3
 8013a94:	4620      	mov	r0, r4
 8013a96:	f006 fa78 	bl	8019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013a9a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7fc f802 	bl	800faa8 <_ZN8touchgfx9TypedTextD1Ev>

    gauge1.setPosition(230, 0, 600, 600);
 8013aa4:	1d3b      	adds	r3, r7, #4
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013aac:	f44f 7316 	mov.w	r3, #600	; 0x258
 8013ab0:	9300      	str	r3, [sp, #0]
 8013ab2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	21e6      	movs	r1, #230	; 0xe6
 8013aba:	f7fc ff2c 	bl	8010916 <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(300, 300);
 8013abe:	1d3b      	adds	r3, r7, #4
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013ac6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013aca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f006 fbfb 	bl	801a2ca <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(0, 240);
 8013ad4:	1d3b      	adds	r3, r7, #4
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013adc:	22f0      	movs	r2, #240	; 0xf0
 8013ade:	2100      	movs	r1, #0
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f006 fc77 	bl	801a3d4 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 8000);
 8013ae6:	1d3b      	adds	r3, r7, #4
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013aee:	2300      	movs	r3, #0
 8013af0:	9300      	str	r3, [sp, #0]
 8013af2:	2300      	movs	r3, #0
 8013af4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013af8:	2100      	movs	r1, #0
 8013afa:	f003 fa01 	bl	8016f00 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(0);
 8013afe:	1d3b      	adds	r3, r7, #4
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013b06:	2100      	movs	r1, #0
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f006 fc0d 	bl	801a328 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_NEEDEL_ID, 13, 13);
 8013b0e:	1d3b      	adds	r3, r7, #4
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	f603 007c 	addw	r0, r3, #2172	; 0x87c
 8013b16:	230d      	movs	r3, #13
 8013b18:	220d      	movs	r2, #13
 8013b1a:	210d      	movs	r1, #13
 8013b1c:	f006 fbc0 	bl	801a2a0 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8013b20:	1d3b      	adds	r3, r7, #4
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013b28:	2101      	movs	r1, #1
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f006 fb5a 	bl	801a1e4 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::NEAREST_NEIGHBOR);
 8013b30:	1d3b      	adds	r3, r7, #4
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013b38:	2100      	movs	r1, #0
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f006 fb55 	bl	801a1ea <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    image2.setXY(635, 259);
 8013b40:	1d3b      	adds	r3, r7, #4
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013b48:	f240 1203 	movw	r2, #259	; 0x103
 8013b4c:	f240 217b 	movw	r1, #635	; 0x27b
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fc ff1f 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDUINO1_ID));
 8013b56:	1d3b      	adds	r3, r7, #4
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8013b5e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8013b62:	2110      	movs	r1, #16
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7fc fe6b 	bl	8010840 <_ZN8touchgfx6BitmapC1Et>
 8013b6a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8013b6e:	4619      	mov	r1, r3
 8013b70:	4620      	mov	r0, r4
 8013b72:	f006 fd47 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 8013b76:	1d3b      	adds	r3, r7, #4
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	1d3b      	adds	r3, r7, #4
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	3340      	adds	r3, #64	; 0x40
 8013b80:	4619      	mov	r1, r3
 8013b82:	4610      	mov	r0, r2
 8013b84:	f7fd f854 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8013b88:	1d3b      	adds	r3, r7, #4
 8013b8a:	681a      	ldr	r2, [r3, #0]
 8013b8c:	1d3b      	adds	r3, r7, #4
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	336c      	adds	r3, #108	; 0x6c
 8013b92:	4619      	mov	r1, r3
 8013b94:	4610      	mov	r0, r2
 8013b96:	f7fd f84b 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8013b9a:	1d3b      	adds	r3, r7, #4
 8013b9c:	681a      	ldr	r2, [r3, #0]
 8013b9e:	1d3b      	adds	r3, r7, #4
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	3398      	adds	r3, #152	; 0x98
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	4610      	mov	r0, r2
 8013ba8:	f7fd f842 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLeft);
 8013bac:	1d3b      	adds	r3, r7, #4
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	1d3b      	adds	r3, r7, #4
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	33c4      	adds	r3, #196	; 0xc4
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	4610      	mov	r0, r2
 8013bba:	f7fd f839 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indRight);
 8013bbe:	1d3b      	adds	r3, r7, #4
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	1d3b      	adds	r3, r7, #4
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	33f0      	adds	r3, #240	; 0xf0
 8013bc8:	4619      	mov	r1, r3
 8013bca:	4610      	mov	r0, r2
 8013bcc:	f7fd f830 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indHigh);
 8013bd0:	1d3b      	adds	r3, r7, #4
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	1d3b      	adds	r3, r7, #4
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013bdc:	4619      	mov	r1, r3
 8013bde:	4610      	mov	r0, r2
 8013be0:	f7fd f826 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indFuel);
 8013be4:	1d3b      	adds	r3, r7, #4
 8013be6:	681a      	ldr	r2, [r3, #0]
 8013be8:	1d3b      	adds	r3, r7, #4
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	4610      	mov	r0, r2
 8013bf4:	f7fd f81c 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indOil);
 8013bf8:	1d3b      	adds	r3, r7, #4
 8013bfa:	681a      	ldr	r2, [r3, #0]
 8013bfc:	1d3b      	adds	r3, r7, #4
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8013c04:	4619      	mov	r1, r3
 8013c06:	4610      	mov	r0, r2
 8013c08:	f7fd f812 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indBatt);
 8013c0c:	1d3b      	adds	r3, r7, #4
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	1d3b      	adds	r3, r7, #4
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8013c18:	4619      	mov	r1, r3
 8013c1a:	4610      	mov	r0, r2
 8013c1c:	f7fd f808 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indPark);
 8013c20:	1d3b      	adds	r3, r7, #4
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	1d3b      	adds	r3, r7, #4
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8013c2c:	4619      	mov	r1, r3
 8013c2e:	4610      	mov	r0, r2
 8013c30:	f7fc fffe 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indDTC);
 8013c34:	1d3b      	adds	r3, r7, #4
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	1d3b      	adds	r3, r7, #4
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013c40:	4619      	mov	r1, r3
 8013c42:	4610      	mov	r0, r2
 8013c44:	f7fc fff4 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indECT);
 8013c48:	1d3b      	adds	r3, r7, #4
 8013c4a:	681a      	ldr	r2, [r3, #0]
 8013c4c:	1d3b      	adds	r3, r7, #4
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8013c54:	4619      	mov	r1, r3
 8013c56:	4610      	mov	r0, r2
 8013c58:	f7fc ffea 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(indLow);
 8013c5c:	1d3b      	adds	r3, r7, #4
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	1d3b      	adds	r3, r7, #4
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8013c68:	4619      	mov	r1, r3
 8013c6a:	4610      	mov	r0, r2
 8013c6c:	f7fc ffe0 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_value);
 8013c70:	1d3b      	adds	r3, r7, #4
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	1d3b      	adds	r3, r7, #4
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	4610      	mov	r0, r2
 8013c80:	f7fc ffd6 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_label);
 8013c84:	1d3b      	adds	r3, r7, #4
 8013c86:	681a      	ldr	r2, [r3, #0]
 8013c88:	1d3b      	adds	r3, r7, #4
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013c90:	4619      	mov	r1, r3
 8013c92:	4610      	mov	r0, r2
 8013c94:	f7fc ffcc 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(map_units);
 8013c98:	1d3b      	adds	r3, r7, #4
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	1d3b      	adds	r3, r7, #4
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	4610      	mov	r0, r2
 8013ca8:	f7fc ffc2 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_value);
 8013cac:	1d3b      	adds	r3, r7, #4
 8013cae:	681a      	ldr	r2, [r3, #0]
 8013cb0:	1d3b      	adds	r3, r7, #4
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8013cb8:	4619      	mov	r1, r3
 8013cba:	4610      	mov	r0, r2
 8013cbc:	f7fc ffb8 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_label);
 8013cc0:	1d3b      	adds	r3, r7, #4
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	1d3b      	adds	r3, r7, #4
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8013ccc:	4619      	mov	r1, r3
 8013cce:	4610      	mov	r0, r2
 8013cd0:	f7fc ffae 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(batt_units);
 8013cd4:	1d3b      	adds	r3, r7, #4
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	1d3b      	adds	r3, r7, #4
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	4610      	mov	r0, r2
 8013ce4:	f7fc ffa4 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_value);
 8013ce8:	1d3b      	adds	r3, r7, #4
 8013cea:	681a      	ldr	r2, [r3, #0]
 8013cec:	1d3b      	adds	r3, r7, #4
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	4610      	mov	r0, r2
 8013cf8:	f7fc ff9a 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_label);
 8013cfc:	1d3b      	adds	r3, r7, #4
 8013cfe:	681a      	ldr	r2, [r3, #0]
 8013d00:	1d3b      	adds	r3, r7, #4
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8013d08:	4619      	mov	r1, r3
 8013d0a:	4610      	mov	r0, r2
 8013d0c:	f7fc ff90 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tps_units);
 8013d10:	1d3b      	adds	r3, r7, #4
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	1d3b      	adds	r3, r7, #4
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8013d1c:	4619      	mov	r1, r3
 8013d1e:	4610      	mov	r0, r2
 8013d20:	f7fc ff86 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_value);
 8013d24:	1d3b      	adds	r3, r7, #4
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	1d3b      	adds	r3, r7, #4
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8013d30:	4619      	mov	r1, r3
 8013d32:	4610      	mov	r0, r2
 8013d34:	f7fc ff7c 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_label);
 8013d38:	1d3b      	adds	r3, r7, #4
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	1d3b      	adds	r3, r7, #4
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	f203 43fc 	addw	r3, r3, #1276	; 0x4fc
 8013d44:	4619      	mov	r1, r3
 8013d46:	4610      	mov	r0, r2
 8013d48:	f7fc ff72 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lambda_units);
 8013d4c:	1d3b      	adds	r3, r7, #4
 8013d4e:	681a      	ldr	r2, [r3, #0]
 8013d50:	1d3b      	adds	r3, r7, #4
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8013d58:	4619      	mov	r1, r3
 8013d5a:	4610      	mov	r0, r2
 8013d5c:	f7fc ff68 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_value);
 8013d60:	1d3b      	adds	r3, r7, #4
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	1d3b      	adds	r3, r7, #4
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	4610      	mov	r0, r2
 8013d70:	f7fc ff5e 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_label);
 8013d74:	1d3b      	adds	r3, r7, #4
 8013d76:	681a      	ldr	r2, [r3, #0]
 8013d78:	1d3b      	adds	r3, r7, #4
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	f203 53bc 	addw	r3, r3, #1468	; 0x5bc
 8013d80:	4619      	mov	r1, r3
 8013d82:	4610      	mov	r0, r2
 8013d84:	f7fc ff54 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ect_units);
 8013d88:	1d3b      	adds	r3, r7, #4
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	e004      	b.n	8013d98 <_ZN15Screen1ViewBaseC1Ev+0x2c5c>
 8013d8e:	bf00      	nop
 8013d90:	20009804 	.word	0x20009804
 8013d94:	0802f53c 	.word	0x0802f53c
 8013d98:	1d3b      	adds	r3, r7, #4
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f203 53fc 	addw	r3, r3, #1532	; 0x5fc
 8013da0:	4619      	mov	r1, r3
 8013da2:	4610      	mov	r0, r2
 8013da4:	f7fc ff44 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_value);
 8013da8:	1d3b      	adds	r3, r7, #4
 8013daa:	681a      	ldr	r2, [r3, #0]
 8013dac:	1d3b      	adds	r3, r7, #4
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8013db4:	4619      	mov	r1, r3
 8013db6:	4610      	mov	r0, r2
 8013db8:	f7fc ff3a 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_label);
 8013dbc:	1d3b      	adds	r3, r7, #4
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	1d3b      	adds	r3, r7, #4
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8013dc8:	4619      	mov	r1, r3
 8013dca:	4610      	mov	r0, r2
 8013dcc:	f7fc ff30 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(iat_units);
 8013dd0:	1d3b      	adds	r3, r7, #4
 8013dd2:	681a      	ldr	r2, [r3, #0]
 8013dd4:	1d3b      	adds	r3, r7, #4
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	f203 63bc 	addw	r3, r3, #1724	; 0x6bc
 8013ddc:	4619      	mov	r1, r3
 8013dde:	4610      	mov	r0, r2
 8013de0:	f7fc ff26 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_value);
 8013de4:	1d3b      	adds	r3, r7, #4
 8013de6:	681a      	ldr	r2, [r3, #0]
 8013de8:	1d3b      	adds	r3, r7, #4
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8013df0:	4619      	mov	r1, r3
 8013df2:	4610      	mov	r0, r2
 8013df4:	f7fc ff1c 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_label);
 8013df8:	1d3b      	adds	r3, r7, #4
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	1d3b      	adds	r3, r7, #4
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8013e04:	4619      	mov	r1, r3
 8013e06:	4610      	mov	r0, r2
 8013e08:	f7fc ff12 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilp_units);
 8013e0c:	1d3b      	adds	r3, r7, #4
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	1d3b      	adds	r3, r7, #4
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8013e18:	4619      	mov	r1, r3
 8013e1a:	4610      	mov	r0, r2
 8013e1c:	f7fc ff08 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_value);
 8013e20:	1d3b      	adds	r3, r7, #4
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	1d3b      	adds	r3, r7, #4
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	4610      	mov	r0, r2
 8013e30:	f7fc fefe 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_label);
 8013e34:	1d3b      	adds	r3, r7, #4
 8013e36:	681a      	ldr	r2, [r3, #0]
 8013e38:	1d3b      	adds	r3, r7, #4
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	f203 73fc 	addw	r3, r3, #2044	; 0x7fc
 8013e40:	4619      	mov	r1, r3
 8013e42:	4610      	mov	r0, r2
 8013e44:	f7fc fef4 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(fuelp_units);
 8013e48:	1d3b      	adds	r3, r7, #4
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	1d3b      	adds	r3, r7, #4
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8013e54:	4619      	mov	r1, r3
 8013e56:	4610      	mov	r0, r2
 8013e58:	f7fc feea 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gauge1);
 8013e5c:	1d3b      	adds	r3, r7, #4
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	1d3b      	adds	r3, r7, #4
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8013e68:	4619      	mov	r1, r3
 8013e6a:	4610      	mov	r0, r2
 8013e6c:	f7fc fee0 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 8013e70:	1d3b      	adds	r3, r7, #4
 8013e72:	681a      	ldr	r2, [r3, #0]
 8013e74:	1d3b      	adds	r3, r7, #4
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	4610      	mov	r0, r2
 8013e80:	f7fc fed6 	bl	8010c30 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8013e84:	1d3b      	adds	r3, r7, #4
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f207 479c 	addw	r7, r7, #1180	; 0x49c
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd90      	pop	{r4, r7, pc}
 8013e92:	bf00      	nop

08013e94 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8013e94:	b480      	push	{r7}
 8013e96:	b083      	sub	sp, #12
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]

}
 8013e9c:	bf00      	nop
 8013e9e:	370c      	adds	r7, #12
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f009 fbc0 	bl	801d638 <_ZN8touchgfx6ScreenC1Ev>
 8013eb8:	4a05      	ldr	r2, [pc, #20]	; (8013ed0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	601a      	str	r2, [r3, #0]
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	3708      	adds	r7, #8
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop
 8013ed0:	0802ffac 	.word	0x0802ffac

08013ed4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	4a05      	ldr	r2, [pc, #20]	; (8013ef4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	601a      	str	r2, [r3, #0]
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fc fceb 	bl	80108c0 <_ZN8touchgfx8DrawableD1Ev>
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	4618      	mov	r0, r3
 8013eee:	3708      	adds	r7, #8
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}
 8013ef4:	08030a2c 	.word	0x08030a2c

08013ef8 <_ZN8touchgfx9ContainerD0Ev>:
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7ff ffe7 	bl	8013ed4 <_ZN8touchgfx9ContainerD1Ev>
 8013f06:	212c      	movs	r1, #44	; 0x2c
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f019 f982 	bl	802d212 <_ZdlPvj>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	4618      	mov	r0, r3
 8013f12:	3708      	adds	r7, #8
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}

08013f18 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	4a05      	ldr	r2, [pc, #20]	; (8013f38 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	601a      	str	r2, [r3, #0]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fc fec5 	bl	8010cb8 <_ZN8touchgfx6WidgetD1Ev>
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	4618      	mov	r0, r3
 8013f32:	3708      	adds	r7, #8
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}
 8013f38:	080318a8 	.word	0x080318a8

08013f3c <_ZN8touchgfx3BoxD0Ev>:
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f7ff ffe7 	bl	8013f18 <_ZN8touchgfx3BoxD1Ev>
 8013f4a:	212c      	movs	r1, #44	; 0x2c
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f019 f960 	bl	802d212 <_ZdlPvj>
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	4618      	mov	r0, r3
 8013f56:	3708      	adds	r7, #8
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	4a05      	ldr	r2, [pc, #20]	; (8013f7c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	601a      	str	r2, [r3, #0]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7fc fea3 	bl	8010cb8 <_ZN8touchgfx6WidgetD1Ev>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	4618      	mov	r0, r3
 8013f76:	3708      	adds	r7, #8
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}
 8013f7c:	08031b18 	.word	0x08031b18

08013f80 <_ZN8touchgfx5ImageD0Ev>:
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f7ff ffe7 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 8013f8e:	212c      	movs	r1, #44	; 0x2c
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f019 f93e 	bl	802d212 <_ZdlPvj>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3708      	adds	r7, #8
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b082      	sub	sp, #8
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	4a05      	ldr	r2, [pc, #20]	; (8013fc0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	601a      	str	r2, [r3, #0]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7fc ff4b 	bl	8010e4c <_ZN8touchgfx8TextAreaD1Ev>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3708      	adds	r7, #8
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}
 8013fc0:	08031a70 	.word	0x08031a70

08013fc4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f7ff ffe7 	bl	8013fa0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013fd2:	2140      	movs	r1, #64	; 0x40
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f019 f91c 	bl	802d212 <_ZdlPvj>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b082      	sub	sp, #8
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
 8013fec:	4a0a      	ldr	r2, [pc, #40]	; (8014018 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	601a      	str	r2, [r3, #0]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	3358      	adds	r3, #88	; 0x58
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7ff ff6c 	bl	8013ed4 <_ZN8touchgfx9ContainerD1Ev>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	332c      	adds	r3, #44	; 0x2c
 8014000:	4618      	mov	r0, r3
 8014002:	f7ff ffab 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	4618      	mov	r0, r3
 801400a:	f7ff ff63 	bl	8013ed4 <_ZN8touchgfx9ContainerD1Ev>
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	4618      	mov	r0, r3
 8014012:	3708      	adds	r7, #8
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}
 8014018:	08030838 	.word	0x08030838

0801401c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 801401c:	b580      	push	{r7, lr}
 801401e:	b082      	sub	sp, #8
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f7ff ffdd 	bl	8013fe4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801402a:	21b4      	movs	r1, #180	; 0xb4
 801402c:	6878      	ldr	r0, [r7, #4]
 801402e:	f019 f8f0 	bl	802d212 <_ZdlPvj>
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	4618      	mov	r0, r3
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	4a05      	ldr	r2, [pc, #20]	; (801405c <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	601a      	str	r2, [r3, #0]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	4618      	mov	r0, r3
 801404e:	f7ff ff85 	bl	8013f5c <_ZN8touchgfx5ImageD1Ev>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	4618      	mov	r0, r3
 8014056:	3708      	adds	r7, #8
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}
 801405c:	08031630 	.word	0x08031630

08014060 <_ZN8touchgfx13TextureMapperD0Ev>:
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f7ff ffe7 	bl	801403c <_ZN8touchgfx13TextureMapperD1Ev>
 801406e:	2190      	movs	r1, #144	; 0x90
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f019 f8ce 	bl	802d212 <_ZdlPvj>
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	4618      	mov	r0, r3
 801407a:	3708      	adds	r7, #8
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 * Class for drawing complex polygons on the display using CanvasWidgetRenderer. The
 * CanvasWidget is used by passing it to a Canvas object, drawing the outline of the
 * object and then having CanvasWidget render the outline on the display using the
 * assigned painter.
 */
class CanvasWidget : public Widget
 8014080:	b580      	push	{r7, lr}
 8014082:	b082      	sub	sp, #8
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	4a05      	ldr	r2, [pc, #20]	; (80140a0 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	601a      	str	r2, [r3, #0]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	4618      	mov	r0, r3
 8014092:	f7fc fe11 	bl	8010cb8 <_ZN8touchgfx6WidgetD1Ev>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	4618      	mov	r0, r3
 801409a:	3708      	adds	r7, #8
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	08031564 	.word	0x08031564

080140a4 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f7ff ffe7 	bl	8014080 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80140b2:	2130      	movs	r1, #48	; 0x30
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f019 f8ac 	bl	802d212 <_ZdlPvj>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	3708      	adds	r7, #8
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&amp;x, &amp;y); // Will return (1, 1)
 *            circle.getRadius(&amp;r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	4a05      	ldr	r2, [pc, #20]	; (80140e4 <_ZN8touchgfx6CircleD1Ev+0x20>)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	601a      	str	r2, [r3, #0]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7ff ffd3 	bl	8014080 <_ZN8touchgfx12CanvasWidgetD1Ev>
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	4618      	mov	r0, r3
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}
 80140e4:	08031484 	.word	0x08031484

080140e8 <_ZN8touchgfx6CircleD0Ev>:
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f7ff ffe7 	bl	80140c4 <_ZN8touchgfx6CircleD1Ev>
 80140f6:	214c      	movs	r1, #76	; 0x4c
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f019 f88a 	bl	802d212 <_ZdlPvj>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	4618      	mov	r0, r3
 8014102:	3708      	adds	r7, #8
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	4a0b      	ldr	r2, [pc, #44]	; (8014140 <_ZN8touchgfx5GaugeD1Ev+0x38>)
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	601a      	str	r2, [r3, #0]
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801411c:	4618      	mov	r0, r3
 801411e:	f7ff ffd1 	bl	80140c4 <_ZN8touchgfx6CircleD1Ev>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	33b4      	adds	r3, #180	; 0xb4
 8014126:	4618      	mov	r0, r3
 8014128:	f7ff ff88 	bl	801403c <_ZN8touchgfx13TextureMapperD1Ev>
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	4618      	mov	r0, r3
 8014130:	f7ff ff58 	bl	8013fe4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	4618      	mov	r0, r3
 8014138:	3708      	adds	r7, #8
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}
 801413e:	bf00      	nop
 8014140:	08031950 	.word	0x08031950

08014144 <_ZN8touchgfx5GaugeD0Ev>:
 8014144:	b580      	push	{r7, lr}
 8014146:	b082      	sub	sp, #8
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f7ff ffdb 	bl	8014108 <_ZN8touchgfx5GaugeD1Ev>
 8014152:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f019 f85b 	bl	802d212 <_ZdlPvj>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	4618      	mov	r0, r3
 8014160:	3708      	adds	r7, #8
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
	...

08014168 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8014168:	b480      	push	{r7}
 801416a:	af00      	add	r7, sp, #0
    return bitmap_database;
 801416c:	4b02      	ldr	r3, [pc, #8]	; (8014178 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801416e:	4618      	mov	r0, r3
 8014170:	46bd      	mov	sp, r7
 8014172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014176:	4770      	bx	lr
 8014178:	0803003c 	.word	0x0803003c

0801417c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801417c:	b480      	push	{r7}
 801417e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8014180:	2311      	movs	r3, #17
}
 8014182:	4618      	mov	r0, r3
 8014184:	46bd      	mov	sp, r7
 8014186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418a:	4770      	bx	lr

0801418c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 801418c:	b480      	push	{r7}
 801418e:	b085      	sub	sp, #20
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	460b      	mov	r3, r1
 8014196:	607a      	str	r2, [r7, #4]
 8014198:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 801419a:	2300      	movs	r3, #0
    }
 801419c:	4618      	mov	r0, r3
 801419e:	3714      	adds	r7, #20
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr

080141a8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80141a8:	b480      	push	{r7}
 80141aa:	b083      	sub	sp, #12
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80141b0:	2300      	movs	r3, #0
    }
 80141b2:	4618      	mov	r0, r3
 80141b4:	370c      	adds	r7, #12
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr

080141be <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80141be:	b480      	push	{r7}
 80141c0:	b083      	sub	sp, #12
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80141c6:	2300      	movs	r3, #0
    }
 80141c8:	4618      	mov	r0, r3
 80141ca:	370c      	adds	r7, #12
 80141cc:	46bd      	mov	sp, r7
 80141ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d2:	4770      	bx	lr

080141d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80141d4:	b480      	push	{r7}
 80141d6:	b085      	sub	sp, #20
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	4613      	mov	r3, r2
 80141e0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80141e2:	4a07      	ldr	r2, [pc, #28]	; (8014200 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	6013      	str	r3, [r2, #0]
        fonts = f;
 80141e8:	4a06      	ldr	r2, [pc, #24]	; (8014204 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80141ee:	4a06      	ldr	r2, [pc, #24]	; (8014208 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80141f0:	88fb      	ldrh	r3, [r7, #6]
 80141f2:	8013      	strh	r3, [r2, #0]
    }
 80141f4:	bf00      	nop
 80141f6:	3714      	adds	r7, #20
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr
 8014200:	200097f8 	.word	0x200097f8
 8014204:	20009800 	.word	0x20009800
 8014208:	200097fc 	.word	0x200097fc

0801420c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801420c:	b40e      	push	{r1, r2, r3}
 801420e:	b580      	push	{r7, lr}
 8014210:	b085      	sub	sp, #20
 8014212:	af00      	add	r7, sp, #0
 8014214:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8014216:	f107 0320 	add.w	r3, r7, #32
 801421a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	69fa      	ldr	r2, [r7, #28]
 8014220:	2100      	movs	r1, #0
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	f008 fda0 	bl	801cd68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8014228:	4603      	mov	r3, r0
 801422a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 801422c:	89fb      	ldrh	r3, [r7, #14]
}
 801422e:	4618      	mov	r0, r3
 8014230:	3714      	adds	r7, #20
 8014232:	46bd      	mov	sp, r7
 8014234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014238:	b003      	add	sp, #12
 801423a:	4770      	bx	lr

0801423c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 801423c:	b40c      	push	{r2, r3}
 801423e:	b580      	push	{r7, lr}
 8014240:	b084      	sub	sp, #16
 8014242:	af00      	add	r7, sp, #0
 8014244:	6078      	str	r0, [r7, #4]
 8014246:	460b      	mov	r3, r1
 8014248:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 801424a:	f107 031c 	add.w	r3, r7, #28
 801424e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8014250:	78f9      	ldrb	r1, [r7, #3]
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	69ba      	ldr	r2, [r7, #24]
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f008 fd86 	bl	801cd68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 801425c:	4603      	mov	r3, r0
 801425e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8014260:	89fb      	ldrh	r3, [r7, #14]
}
 8014262:	4618      	mov	r0, r3
 8014264:	3710      	adds	r7, #16
 8014266:	46bd      	mov	sp, r7
 8014268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801426c:	b002      	add	sp, #8
 801426e:	4770      	bx	lr

08014270 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b08a      	sub	sp, #40	; 0x28
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
 8014278:	460b      	mov	r3, r1
 801427a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014280:	2b00      	cmp	r3, #0
 8014282:	d016      	beq.n	80142b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	3322      	adds	r3, #34	; 0x22
 8014288:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428c:	8adb      	ldrh	r3, [r3, #22]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d105      	bne.n	801429e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8014292:	4b43      	ldr	r3, [pc, #268]	; (80143a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014294:	4a43      	ldr	r2, [pc, #268]	; (80143a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014296:	21c0      	movs	r1, #192	; 0xc0
 8014298:	4843      	ldr	r0, [pc, #268]	; (80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801429a:	f019 fdd9 	bl	802de50 <__assert_func>
            return buffer[pos];
 801429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a0:	8a9b      	ldrh	r3, [r3, #20]
 80142a2:	461a      	mov	r2, r3
 80142a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d001      	beq.n	80142b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80142ae:	2301      	movs	r3, #1
 80142b0:	e000      	b.n	80142b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80142b2:	2300      	movs	r3, #0
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d06a      	beq.n	801438e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f00a f905 	bl	801e4c8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	3322      	adds	r3, #34	; 0x22
 80142c2:	623b      	str	r3, [r7, #32]
 80142c4:	2301      	movs	r3, #1
 80142c6:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80142c8:	6a3b      	ldr	r3, [r7, #32]
 80142ca:	8adb      	ldrh	r3, [r3, #22]
 80142cc:	8bfa      	ldrh	r2, [r7, #30]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d305      	bcc.n	80142de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80142d2:	4b36      	ldr	r3, [pc, #216]	; (80143ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80142d4:	4a36      	ldr	r2, [pc, #216]	; (80143b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80142d6:	21c5      	movs	r1, #197	; 0xc5
 80142d8:	4833      	ldr	r0, [pc, #204]	; (80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80142da:	f019 fdb9 	bl	802de50 <__assert_func>
            const uint16_t index = pos + offset;
 80142de:	6a3b      	ldr	r3, [r7, #32]
 80142e0:	8a9a      	ldrh	r2, [r3, #20]
 80142e2:	8bfb      	ldrh	r3, [r7, #30]
 80142e4:	4413      	add	r3, r2
 80142e6:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80142e8:	8bbb      	ldrh	r3, [r7, #28]
 80142ea:	2b09      	cmp	r3, #9
 80142ec:	d801      	bhi.n	80142f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80142ee:	8bbb      	ldrh	r3, [r7, #28]
 80142f0:	e001      	b.n	80142f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80142f2:	8bbb      	ldrh	r3, [r7, #28]
 80142f4:	3b0a      	subs	r3, #10
 80142f6:	6a3a      	ldr	r2, [r7, #32]
 80142f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80142fc:	f640 123f 	movw	r2, #2367	; 0x93f
 8014300:	4293      	cmp	r3, r2
 8014302:	bf0c      	ite	eq
 8014304:	2301      	moveq	r3, #1
 8014306:	2300      	movne	r3, #0
 8014308:	b2db      	uxtb	r3, r3
 801430a:	2b00      	cmp	r3, #0
 801430c:	d03f      	beq.n	801438e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	3322      	adds	r3, #34	; 0x22
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	3222      	adds	r2, #34	; 0x22
 8014316:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8014318:	68ba      	ldr	r2, [r7, #8]
 801431a:	8ad2      	ldrh	r2, [r2, #22]
 801431c:	2a00      	cmp	r2, #0
 801431e:	d105      	bne.n	801432c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8014320:	4b1f      	ldr	r3, [pc, #124]	; (80143a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8014322:	4a20      	ldr	r2, [pc, #128]	; (80143a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8014324:	21c0      	movs	r1, #192	; 0xc0
 8014326:	4820      	ldr	r0, [pc, #128]	; (80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014328:	f019 fd92 	bl	802de50 <__assert_func>
            return buffer[pos];
 801432c:	68ba      	ldr	r2, [r7, #8]
 801432e:	8a92      	ldrh	r2, [r2, #20]
 8014330:	4611      	mov	r1, r2
 8014332:	68ba      	ldr	r2, [r7, #8]
 8014334:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8014338:	613b      	str	r3, [r7, #16]
 801433a:	4613      	mov	r3, r2
 801433c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	8adb      	ldrh	r3, [r3, #22]
 8014342:	2b01      	cmp	r3, #1
 8014344:	d806      	bhi.n	8014354 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8014346:	4b1b      	ldr	r3, [pc, #108]	; (80143b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8014348:	4a1b      	ldr	r2, [pc, #108]	; (80143b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 801434a:	f240 110d 	movw	r1, #269	; 0x10d
 801434e:	4816      	ldr	r0, [pc, #88]	; (80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8014350:	f019 fd7e 	bl	802de50 <__assert_func>
            const uint16_t index = pos + 1;
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	8a9b      	ldrh	r3, [r3, #20]
 8014358:	3301      	adds	r3, #1
 801435a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 801435c:	89bb      	ldrh	r3, [r7, #12]
 801435e:	2b09      	cmp	r3, #9
 8014360:	d801      	bhi.n	8014366 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8014362:	89bb      	ldrh	r3, [r7, #12]
 8014364:	e000      	b.n	8014368 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8014366:	2300      	movs	r3, #0
 8014368:	693a      	ldr	r2, [r7, #16]
 801436a:	89f9      	ldrh	r1, [r7, #14]
 801436c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8014370:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	3322      	adds	r3, #34	; 0x22
 8014376:	61bb      	str	r3, [r7, #24]
 8014378:	f640 133f 	movw	r3, #2367	; 0x93f
 801437c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 801437e:	69bb      	ldr	r3, [r7, #24]
 8014380:	8a9b      	ldrh	r3, [r3, #20]
 8014382:	4619      	mov	r1, r3
 8014384:	69bb      	ldr	r3, [r7, #24]
 8014386:	8afa      	ldrh	r2, [r7, #22]
 8014388:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 801438c:	bf00      	nop
        }
    }
    return getNextChar();
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f009 ff7e 	bl	801e290 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8014394:	4603      	mov	r3, r0
}
 8014396:	4618      	mov	r0, r3
 8014398:	3728      	adds	r7, #40	; 0x28
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	0802f540 	.word	0x0802f540
 80143a4:	0802f54c 	.word	0x0802f54c
 80143a8:	0802f5f8 	.word	0x0802f5f8
 80143ac:	0802f640 	.word	0x0802f640
 80143b0:	0802f650 	.word	0x0802f650
 80143b4:	0802f724 	.word	0x0802f724
 80143b8:	0802f730 	.word	0x0802f730

080143bc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b082      	sub	sp, #8
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f009 ff1b 	bl	801e200 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80143ca:	bf00      	nop
 80143cc:	3708      	adds	r7, #8
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}

080143d2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80143d2:	b580      	push	{r7, lr}
 80143d4:	b088      	sub	sp, #32
 80143d6:	af02      	add	r7, sp, #8
 80143d8:	60f8      	str	r0, [r7, #12]
 80143da:	1d38      	adds	r0, r7, #4
 80143dc:	e880 0006 	stmia.w	r0, {r1, r2}
 80143e0:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80143e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80143e6:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80143e8:	1d39      	adds	r1, r7, #4
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	9301      	str	r3, [sp, #4]
 80143ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f0:	9300      	str	r3, [sp, #0]
 80143f2:	6a3b      	ldr	r3, [r7, #32]
 80143f4:	683a      	ldr	r2, [r7, #0]
 80143f6:	68f8      	ldr	r0, [r7, #12]
 80143f8:	f007 f993 	bl	801b722 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80143fc:	bf00      	nop
 80143fe:	3718      	adds	r7, #24
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}

08014404 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8014404:	b590      	push	{r4, r7, lr}
 8014406:	b085      	sub	sp, #20
 8014408:	af00      	add	r7, sp, #0
 801440a:	4603      	mov	r3, r0
 801440c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801440e:	2300      	movs	r3, #0
 8014410:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8014412:	88fb      	ldrh	r3, [r7, #6]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d127      	bne.n	8014468 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8014418:	88fb      	ldrh	r3, [r7, #6]
 801441a:	4a1e      	ldr	r2, [pc, #120]	; (8014494 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801441c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d016      	beq.n	8014452 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8014424:	88fb      	ldrh	r3, [r7, #6]
 8014426:	4a1b      	ldr	r2, [pc, #108]	; (8014494 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8014428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801442c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	68ba      	ldr	r2, [r7, #8]
 8014434:	4413      	add	r3, r2
 8014436:	4a18      	ldr	r2, [pc, #96]	; (8014498 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014438:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	68ba      	ldr	r2, [r7, #8]
 8014440:	4413      	add	r3, r2
 8014442:	4a16      	ldr	r2, [pc, #88]	; (801449c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8014444:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	689b      	ldr	r3, [r3, #8]
 801444a:	68ba      	ldr	r2, [r7, #8]
 801444c:	4413      	add	r3, r2
 801444e:	60fb      	str	r3, [r7, #12]
 8014450:	e00a      	b.n	8014468 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8014452:	4b11      	ldr	r3, [pc, #68]	; (8014498 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8014454:	4a12      	ldr	r2, [pc, #72]	; (80144a0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8014456:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8014458:	4a12      	ldr	r2, [pc, #72]	; (80144a4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801445a:	4b10      	ldr	r3, [pc, #64]	; (801449c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 801445c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 801445e:	88fb      	ldrh	r3, [r7, #6]
 8014460:	4a11      	ldr	r2, [pc, #68]	; (80144a8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8014462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014466:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d00d      	beq.n	801448a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801446e:	4a0f      	ldr	r2, [pc, #60]	; (80144ac <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8014470:	88fb      	ldrh	r3, [r7, #6]
 8014472:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8014474:	f000 f83e 	bl	80144f4 <_ZN17TypedTextDatabase8getFontsEv>
 8014478:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801447a:	f000 f833 	bl	80144e4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801447e:	4603      	mov	r3, r0
 8014480:	461a      	mov	r2, r3
 8014482:	4621      	mov	r1, r4
 8014484:	68f8      	ldr	r0, [r7, #12]
 8014486:	f7ff fea5 	bl	80141d4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801448a:	bf00      	nop
 801448c:	3714      	adds	r7, #20
 801448e:	46bd      	mov	sp, r7
 8014490:	bd90      	pop	{r4, r7, pc}
 8014492:	bf00      	nop
 8014494:	20007b28 	.word	0x20007b28
 8014498:	20007b30 	.word	0x20007b30
 801449c:	20007b34 	.word	0x20007b34
 80144a0:	080e8d08 	.word	0x080e8d08
 80144a4:	080e8c48 	.word	0x080e8c48
 80144a8:	080e8d84 	.word	0x080e8d84
 80144ac:	20007b2c 	.word	0x20007b2c

080144b0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80144b0:	b480      	push	{r7}
 80144b2:	b083      	sub	sp, #12
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	460b      	mov	r3, r1
 80144ba:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80144bc:	4b07      	ldr	r3, [pc, #28]	; (80144dc <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	4b07      	ldr	r3, [pc, #28]	; (80144e0 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80144c2:	6819      	ldr	r1, [r3, #0]
 80144c4:	887b      	ldrh	r3, [r7, #2]
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	440b      	add	r3, r1
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4413      	add	r3, r2
}
 80144d0:	4618      	mov	r0, r3
 80144d2:	370c      	adds	r7, #12
 80144d4:	46bd      	mov	sp, r7
 80144d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144da:	4770      	bx	lr
 80144dc:	20007b30 	.word	0x20007b30
 80144e0:	20007b34 	.word	0x20007b34

080144e4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80144e4:	b480      	push	{r7}
 80144e6:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80144e8:	2330      	movs	r3, #48	; 0x30
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	46bd      	mov	sp, r7
 80144ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f2:	4770      	bx	lr

080144f4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80144f4:	b480      	push	{r7}
 80144f6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80144f8:	4b02      	ldr	r3, [pc, #8]	; (8014504 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr
 8014504:	20007b38 	.word	0x20007b38

08014508 <_Z41__static_initialization_and_destruction_0ii>:
    case 1:
        touchgfx_fonts[1] = &(getFont_bahnschrift_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8014508:	b580      	push	{r7, lr}
 801450a:	b082      	sub	sp, #8
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	6039      	str	r1, [r7, #0]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2b01      	cmp	r3, #1
 8014516:	d10e      	bne.n	8014536 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801451e:	4293      	cmp	r3, r2
 8014520:	d109      	bne.n	8014536 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    &(getFont_bahnschrift_55_4bpp()),
 8014522:	f7fb fbf1 	bl	800fd08 <_Z27getFont_bahnschrift_55_4bppv>
 8014526:	4603      	mov	r3, r0
};
 8014528:	4a05      	ldr	r2, [pc, #20]	; (8014540 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 801452a:	6013      	str	r3, [r2, #0]
    &(getFont_bahnschrift_20_4bpp())
 801452c:	f7fb fb96 	bl	800fc5c <_Z27getFont_bahnschrift_20_4bppv>
 8014530:	4603      	mov	r3, r0
};
 8014532:	4a03      	ldr	r2, [pc, #12]	; (8014540 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8014534:	6053      	str	r3, [r2, #4]
} // namespace TypedTextDatabase
 8014536:	bf00      	nop
 8014538:	3708      	adds	r7, #8
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	20007b38 	.word	0x20007b38

08014544 <_GLOBAL__sub_I_touchgfx_fonts>:
 8014544:	b580      	push	{r7, lr}
 8014546:	af00      	add	r7, sp, #0
 8014548:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801454c:	2001      	movs	r0, #1
 801454e:	f7ff ffdb 	bl	8014508 <_Z41__static_initialization_and_destruction_0ii>
 8014552:	bd80      	pop	{r7, pc}

08014554 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	4a05      	ldr	r2, [pc, #20]	; (8014574 <_ZN19FrontendApplicationD1Ev+0x20>)
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	601a      	str	r2, [r3, #0]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	4618      	mov	r0, r3
 8014566:	f7fb fe13 	bl	8010190 <_ZN23FrontendApplicationBaseD1Ev>
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	4618      	mov	r0, r3
 801456e:	3708      	adds	r7, #8
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}
 8014574:	080301ec 	.word	0x080301ec

08014578 <_ZN19FrontendApplicationD0Ev>:
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f7ff ffe7 	bl	8014554 <_ZN19FrontendApplicationD1Ev>
 8014586:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f018 fe41 	bl	802d212 <_ZdlPvj>
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	4618      	mov	r0, r3
 8014594:	3708      	adds	r7, #8
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}

0801459a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801459a:	b580      	push	{r7, lr}
 801459c:	b082      	sub	sp, #8
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80145a8:	4618      	mov	r0, r3
 80145aa:	f000 f82d 	bl	8014608 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	4618      	mov	r0, r3
 80145b2:	f007 fc25 	bl	801be00 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 80145b6:	bf00      	nop
 80145b8:	3708      	adds	r7, #8
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
	...

080145c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b084      	sub	sp, #16
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	60f8      	str	r0, [r7, #12]
 80145c8:	60b9      	str	r1, [r7, #8]
 80145ca:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	68b9      	ldr	r1, [r7, #8]
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7fb fe20 	bl	8010218 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80145d8:	4a03      	ldr	r2, [pc, #12]	; (80145e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	601a      	str	r2, [r3, #0]
{

}
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	4618      	mov	r0, r3
 80145e2:	3710      	adds	r7, #16
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	080301ec 	.word	0x080301ec

080145ec <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2200      	movs	r2, #0
 80145f8:	601a      	str	r2, [r3, #0]
{

}
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	4618      	mov	r0, r3
 80145fe:	370c      	adds	r7, #12
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr

08014608 <_ZN5Model4tickEv>:

void Model::tick()
{
 8014608:	b480      	push	{r7}
 801460a:	b083      	sub	sp, #12
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]

}
 8014610:	bf00      	nop
 8014612:	370c      	adds	r7, #12
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr

0801461c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801461c:	b480      	push	{r7}
 801461e:	b083      	sub	sp, #12
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
    {
    }
 8014624:	bf00      	nop
 8014626:	370c      	adds	r7, #12
 8014628:	46bd      	mov	sp, r7
 801462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462e:	4770      	bx	lr

08014630 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8014630:	b480      	push	{r7}
 8014632:	b083      	sub	sp, #12
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
    {
    }
 8014638:	bf00      	nop
 801463a:	370c      	adds	r7, #12
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr

08014644 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
    {
 801464c:	4a04      	ldr	r2, [pc, #16]	; (8014660 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	601a      	str	r2, [r3, #0]
    }
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	4618      	mov	r0, r3
 8014656:	370c      	adds	r7, #12
 8014658:	46bd      	mov	sp, r7
 801465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465e:	4770      	bx	lr
 8014660:	08030268 	.word	0x08030268

08014664 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
    }
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f7ff ffe9 	bl	8014644 <_ZN8touchgfx9PresenterD1Ev>
 8014672:	2104      	movs	r1, #4
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f018 fdcc 	bl	802d212 <_ZdlPvj>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4618      	mov	r0, r3
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
    {
 801468c:	4a04      	ldr	r2, [pc, #16]	; (80146a0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	601a      	str	r2, [r3, #0]
    }
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	4618      	mov	r0, r3
 8014696:	370c      	adds	r7, #12
 8014698:	46bd      	mov	sp, r7
 801469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469e:	4770      	bx	lr
 80146a0:	08030268 	.word	0x08030268

080146a4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80146a4:	b480      	push	{r7}
 80146a6:	b083      	sub	sp, #12
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	4a06      	ldr	r2, [pc, #24]	; (80146c8 <_ZN13ModelListenerC1Ev+0x24>)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	601a      	str	r2, [r3, #0]
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2200      	movs	r2, #0
 80146b6:	605a      	str	r2, [r3, #4]
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	4618      	mov	r0, r3
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr
 80146c6:	bf00      	nop
 80146c8:	08030258 	.word	0x08030258

080146cc <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80146cc:	b480      	push	{r7}
 80146ce:	b083      	sub	sp, #12
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	4a04      	ldr	r2, [pc, #16]	; (80146e8 <_ZN13ModelListenerD1Ev+0x1c>)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	601a      	str	r2, [r3, #0]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	4618      	mov	r0, r3
 80146de:	370c      	adds	r7, #12
 80146e0:	46bd      	mov	sp, r7
 80146e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e6:	4770      	bx	lr
 80146e8:	08030258 	.word	0x08030258

080146ec <_ZN13ModelListenerD0Ev>:
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b082      	sub	sp, #8
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
 80146f4:	6878      	ldr	r0, [r7, #4]
 80146f6:	f7ff ffe9 	bl	80146cc <_ZN13ModelListenerD1Ev>
 80146fa:	2108      	movs	r1, #8
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f018 fd88 	bl	802d212 <_ZdlPvj>
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	4618      	mov	r0, r3
 8014706:	3708      	adds	r7, #8
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	4a09      	ldr	r2, [pc, #36]	; (801473c <_ZN16Screen1PresenterD1Ev+0x30>)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	601a      	str	r2, [r3, #0]
 801471a:	4a09      	ldr	r2, [pc, #36]	; (8014740 <_ZN16Screen1PresenterD1Ev+0x34>)
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	605a      	str	r2, [r3, #4]
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	3304      	adds	r3, #4
 8014724:	4618      	mov	r0, r3
 8014726:	f7ff ffd1 	bl	80146cc <_ZN13ModelListenerD1Ev>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4618      	mov	r0, r3
 801472e:	f7ff ff89 	bl	8014644 <_ZN8touchgfx9PresenterD1Ev>
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	4618      	mov	r0, r3
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	08030230 	.word	0x08030230
 8014740:	08030248 	.word	0x08030248

08014744 <_ZThn4_N16Screen1PresenterD1Ev>:
 8014744:	f1a0 0004 	sub.w	r0, r0, #4
 8014748:	e7e0      	b.n	801470c <_ZN16Screen1PresenterD1Ev>
 801474a:	bf00      	nop

0801474c <_ZN16Screen1PresenterD0Ev>:
 801474c:	b580      	push	{r7, lr}
 801474e:	b082      	sub	sp, #8
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f7ff ffd9 	bl	801470c <_ZN16Screen1PresenterD1Ev>
 801475a:	2110      	movs	r1, #16
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f018 fd58 	bl	802d212 <_ZdlPvj>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	4618      	mov	r0, r3
 8014766:	3708      	adds	r7, #8
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <_ZThn4_N16Screen1PresenterD0Ev>:
 801476c:	f1a0 0004 	sub.w	r0, r0, #4
 8014770:	e7ec      	b.n	801474c <_ZN16Screen1PresenterD0Ev>
	...

08014774 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6039      	str	r1, [r7, #0]
    : view(v)
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff ff7f 	bl	8014684 <_ZN8touchgfx9PresenterC1Ev>
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	3304      	adds	r3, #4
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff ff8a 	bl	80146a4 <_ZN13ModelListenerC1Ev>
 8014790:	4a06      	ldr	r2, [pc, #24]	; (80147ac <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	601a      	str	r2, [r3, #0]
 8014796:	4a06      	ldr	r2, [pc, #24]	; (80147b0 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	605a      	str	r2, [r3, #4]
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	683a      	ldr	r2, [r7, #0]
 80147a0:	60da      	str	r2, [r3, #12]
{

}
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	4618      	mov	r0, r3
 80147a6:	3708      	adds	r7, #8
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	08030230 	.word	0x08030230
 80147b0:	08030248 	.word	0x08030248

080147b4 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80147b4:	b480      	push	{r7}
 80147b6:	b083      	sub	sp, #12
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]

}
 80147bc:	bf00      	nop
 80147be:	370c      	adds	r7, #12
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr

080147c8 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80147c8:	b480      	push	{r7}
 80147ca:	b083      	sub	sp, #12
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]

}
 80147d0:	bf00      	nop
 80147d2:	370c      	adds	r7, #12
 80147d4:	46bd      	mov	sp, r7
 80147d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147da:	4770      	bx	lr

080147dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     * @return pointer to the first element in the buffer where the formatted string is
     *         placed.
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	460b      	mov	r3, r1
 80147e6:	607a      	str	r2, [r7, #4]
 80147e8:	ed87 0a00 	vstr	s0, [r7]
 80147ec:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80147ee:	463b      	mov	r3, r7
 80147f0:	8979      	ldrh	r1, [r7, #10]
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	68f8      	ldr	r0, [r7, #12]
 80147f6:	f00a ff37 	bl	801f668 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 80147fa:	4603      	mov	r3, r0
    }
 80147fc:	4618      	mov	r0, r3
 80147fe:	3710      	adds	r7, #16
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}

08014804 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8014804:	b480      	push	{r7}
 8014806:	b083      	sub	sp, #12
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	460b      	mov	r3, r1
 801480e:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	78fa      	ldrb	r2, [r7, #3]
 8014814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8014818:	bf00      	nop
 801481a:	370c      	adds	r7, #12
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr

08014824 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
 801482c:	4a05      	ldr	r2, [pc, #20]	; (8014844 <_ZN11Screen1ViewD1Ev+0x20>)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	601a      	str	r2, [r3, #0]
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	4618      	mov	r0, r3
 8014836:	f7fc fb77 	bl	8010f28 <_ZN15Screen1ViewBaseD1Ev>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	4618      	mov	r0, r3
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}
 8014844:	08030280 	.word	0x08030280

08014848 <_ZN11Screen1ViewD0Ev>:
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f7ff ffe7 	bl	8014824 <_ZN11Screen1ViewD1Ev>
 8014856:	f640 518c 	movw	r1, #3468	; 0xd8c
 801485a:	6878      	ldr	r0, [r7, #4]
 801485c:	f018 fcd9 	bl	802d212 <_ZdlPvj>
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	4618      	mov	r0, r3
 8014864:	3708      	adds	r7, #8
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
	...

0801486c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

#include "main.h"
#include "extern.h"

Screen1View::Screen1View() {
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	4618      	mov	r0, r3
 8014878:	f7fc fc60 	bl	801113c <_ZN15Screen1ViewBaseC1Ev>
 801487c:	4a03      	ldr	r2, [pc, #12]	; (801488c <_ZN11Screen1ViewC1Ev+0x20>)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	601a      	str	r2, [r3, #0]

}
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	08030280 	.word	0x08030280

08014890 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen() {
 8014890:	b580      	push	{r7, lr}
 8014892:	b088      	sub	sp, #32
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	4618      	mov	r0, r3
 801489c:	f7ff fafa 	bl	8013e94 <_ZN15Screen1ViewBase11setupScreenEv>

	Unicode::UnicodeChar buffer[10];

	//.................UNITS.................

	Unicode::strncpy(buffer, "BAR", 10);
 80148a0:	f107 030c 	add.w	r3, r7, #12
 80148a4:	220a      	movs	r2, #10
 80148a6:	49d7      	ldr	r1, [pc, #860]	; (8014c04 <_ZN11Screen1View11setupScreenEv+0x374>)
 80148a8:	4618      	mov	r0, r3
 80148aa:	f00a f9b6 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_unitsBuffer, 10, "%s", buffer);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f503 602a 	add.w	r0, r3, #2720	; 0xaa0
 80148b4:	f107 030c 	add.w	r3, r7, #12
 80148b8:	4ad3      	ldr	r2, [pc, #844]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 80148ba:	210a      	movs	r1, #10
 80148bc:	f00a fd14 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80148c6:	4618      	mov	r0, r3
 80148c8:	f005 fb6a 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80148d2:	4618      	mov	r0, r3
 80148d4:	f008 fb69 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "Lambda", 10);
 80148d8:	f107 030c 	add.w	r3, r7, #12
 80148dc:	220a      	movs	r2, #10
 80148de:	49cb      	ldr	r1, [pc, #812]	; (8014c0c <_ZN11Screen1View11setupScreenEv+0x37c>)
 80148e0:	4618      	mov	r0, r3
 80148e2:	f00a f99a 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_unitsBuffer, 10, "%s", buffer);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f603 30d8 	addw	r0, r3, #3032	; 0xbd8
 80148ec:	f107 030c 	add.w	r3, r7, #12
 80148f0:	4ac5      	ldr	r2, [pc, #788]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 80148f2:	210a      	movs	r1, #10
 80148f4:	f00a fcf8 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80148fe:	4618      	mov	r0, r3
 8014900:	f005 fb4e 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 801490a:	4618      	mov	r0, r3
 801490c:	f008 fb4d 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 8014910:	f107 030c 	add.w	r3, r7, #12
 8014914:	220a      	movs	r2, #10
 8014916:	49bb      	ldr	r1, [pc, #748]	; (8014c04 <_ZN11Screen1View11setupScreenEv+0x374>)
 8014918:	4618      	mov	r0, r3
 801491a:	f00a f97e 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_unitsBuffer, 10, "%s", buffer);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f503 6051 	add.w	r0, r3, #3344	; 0xd10
 8014924:	f107 030c 	add.w	r3, r7, #12
 8014928:	4ab7      	ldr	r2, [pc, #732]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 801492a:	210a      	movs	r1, #10
 801492c:	f00a fcdc 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014936:	4618      	mov	r0, r3
 8014938:	f005 fb32 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014942:	4618      	mov	r0, r3
 8014944:	f008 fb31 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BAR", 10);
 8014948:	f107 030c 	add.w	r3, r7, #12
 801494c:	220a      	movs	r2, #10
 801494e:	49ad      	ldr	r1, [pc, #692]	; (8014c04 <_ZN11Screen1View11setupScreenEv+0x374>)
 8014950:	4618      	mov	r0, r3
 8014952:	f00a f962 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_unitsBuffer, 10, "%s", buffer);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f603 5078 	addw	r0, r3, #3448	; 0xd78
 801495c:	f107 030c 	add.w	r3, r7, #12
 8014960:	4aa9      	ldr	r2, [pc, #676]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014962:	210a      	movs	r1, #10
 8014964:	f00a fcc0 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 801496e:	4618      	mov	r0, r3
 8014970:	f005 fb16 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 801497a:	4618      	mov	r0, r3
 801497c:	f008 fb15 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 8014980:	f107 030c 	add.w	r3, r7, #12
 8014984:	220a      	movs	r2, #10
 8014986:	49a2      	ldr	r1, [pc, #648]	; (8014c10 <_ZN11Screen1View11setupScreenEv+0x380>)
 8014988:	4618      	mov	r0, r3
 801498a:	f00a f946 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_unitsBuffer, 10, "%s", buffer);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f503 6044 	add.w	r0, r3, #3136	; 0xc40
 8014994:	f107 030c 	add.w	r3, r7, #12
 8014998:	4a9b      	ldr	r2, [pc, #620]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 801499a:	210a      	movs	r1, #10
 801499c:	f00a fca4 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80149a6:	4618      	mov	r0, r3
 80149a8:	f005 fafa 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80149b2:	4618      	mov	r0, r3
 80149b4:	f008 faf9 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "°C", 10);
 80149b8:	f107 030c 	add.w	r3, r7, #12
 80149bc:	220a      	movs	r2, #10
 80149be:	4994      	ldr	r1, [pc, #592]	; (8014c10 <_ZN11Screen1View11setupScreenEv+0x380>)
 80149c0:	4618      	mov	r0, r3
 80149c2:	f00a f92a 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_unitsBuffer, 10, "%s", buffer);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f603 40a8 	addw	r0, r3, #3240	; 0xca8
 80149cc:	f107 030c 	add.w	r3, r7, #12
 80149d0:	4a8d      	ldr	r2, [pc, #564]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 80149d2:	210a      	movs	r1, #10
 80149d4:	f00a fc88 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80149de:	4618      	mov	r0, r3
 80149e0:	f005 fade 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 80149ea:	4618      	mov	r0, r3
 80149ec:	f008 fadd 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "V", 10);
 80149f0:	f107 030c 	add.w	r3, r7, #12
 80149f4:	220a      	movs	r2, #10
 80149f6:	4987      	ldr	r1, [pc, #540]	; (8014c14 <_ZN11Screen1View11setupScreenEv+0x384>)
 80149f8:	4618      	mov	r0, r3
 80149fa:	f00a f90e 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_unitsBuffer, 10, "%s", buffer);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f603 3008 	addw	r0, r3, #2824	; 0xb08
 8014a04:	f107 030c 	add.w	r3, r7, #12
 8014a08:	4a7f      	ldr	r2, [pc, #508]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014a0a:	210a      	movs	r1, #10
 8014a0c:	f00a fc6c 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a16:	4618      	mov	r0, r3
 8014a18:	f005 fac2 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a22:	4618      	mov	r0, r3
 8014a24:	f008 fac1 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "%", 10);
 8014a28:	f107 030c 	add.w	r3, r7, #12
 8014a2c:	220a      	movs	r2, #10
 8014a2e:	497a      	ldr	r1, [pc, #488]	; (8014c18 <_ZN11Screen1View11setupScreenEv+0x388>)
 8014a30:	4618      	mov	r0, r3
 8014a32:	f00a f8f2 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_unitsBuffer, 10, "%s", buffer);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 8014a3c:	f107 030c 	add.w	r3, r7, #12
 8014a40:	4a71      	ldr	r2, [pc, #452]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014a42:	210a      	movs	r1, #10
 8014a44:	f00a fc50 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f005 faa6 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f008 faa5 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	//.................LABELS.................

	Unicode::strncpy(buffer, "MAP", 10);
 8014a60:	f107 030c 	add.w	r3, r7, #12
 8014a64:	220a      	movs	r2, #10
 8014a66:	496d      	ldr	r1, [pc, #436]	; (8014c1c <_ZN11Screen1View11setupScreenEv+0x38c>)
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f00a f8d6 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(map_labelBuffer, 10, "%s", buffer);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f603 208c 	addw	r0, r3, #2700	; 0xa8c
 8014a74:	f107 030c 	add.w	r3, r7, #12
 8014a78:	4a63      	ldr	r2, [pc, #396]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014a7a:	210a      	movs	r1, #10
 8014a7c:	f00a fc34 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014a86:	4618      	mov	r0, r3
 8014a88:	f005 fa8a 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_units.invalidate();
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014a92:	4618      	mov	r0, r3
 8014a94:	f008 fa89 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "AFP", 10);
 8014a98:	f107 030c 	add.w	r3, r7, #12
 8014a9c:	220a      	movs	r2, #10
 8014a9e:	4960      	ldr	r1, [pc, #384]	; (8014c20 <_ZN11Screen1View11setupScreenEv+0x390>)
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f00a f8ba 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(lambda_labelBuffer, 10, "%s", buffer);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f603 30c4 	addw	r0, r3, #3012	; 0xbc4
 8014aac:	f107 030c 	add.w	r3, r7, #12
 8014ab0:	4a55      	ldr	r2, [pc, #340]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014ab2:	210a      	movs	r1, #10
 8014ab4:	f00a fc18 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_units.resizeToCurrentTextWithAlignment();
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f005 fa6e 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_units.invalidate();
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f203 533c 	addw	r3, r3, #1340	; 0x53c
 8014aca:	4618      	mov	r0, r3
 8014acc:	f008 fa6d 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "OIL P", 10);
 8014ad0:	f107 030c 	add.w	r3, r7, #12
 8014ad4:	220a      	movs	r2, #10
 8014ad6:	4953      	ldr	r1, [pc, #332]	; (8014c24 <_ZN11Screen1View11setupScreenEv+0x394>)
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f00a f89e 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(oilp_labelBuffer, 10, "%s", buffer);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f603 40fc 	addw	r0, r3, #3324	; 0xcfc
 8014ae4:	f107 030c 	add.w	r3, r7, #12
 8014ae8:	4a47      	ldr	r2, [pc, #284]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014aea:	210a      	movs	r1, #10
 8014aec:	f00a fbfc 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_units.resizeToCurrentTextWithAlignment();
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014af6:	4618      	mov	r0, r3
 8014af8:	f005 fa52 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_units.invalidate();
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8014b02:	4618      	mov	r0, r3
 8014b04:	f008 fa51 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "FUEL P", 10);
 8014b08:	f107 030c 	add.w	r3, r7, #12
 8014b0c:	220a      	movs	r2, #10
 8014b0e:	4946      	ldr	r1, [pc, #280]	; (8014c28 <_ZN11Screen1View11setupScreenEv+0x398>)
 8014b10:	4618      	mov	r0, r3
 8014b12:	f00a f882 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(fuelp_labelBuffer, 10, "%s", buffer);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f603 5064 	addw	r0, r3, #3428	; 0xd64
 8014b1c:	f107 030c 	add.w	r3, r7, #12
 8014b20:	4a39      	ldr	r2, [pc, #228]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b22:	210a      	movs	r1, #10
 8014b24:	f00a fbe0 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f005 fa36 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f008 fa35 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "ECT", 10);
 8014b40:	f107 030c 	add.w	r3, r7, #12
 8014b44:	220a      	movs	r2, #10
 8014b46:	4939      	ldr	r1, [pc, #228]	; (8014c2c <_ZN11Screen1View11setupScreenEv+0x39c>)
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f00a f866 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(ect_labelBuffer, 10, "%s", buffer);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f603 402c 	addw	r0, r3, #3116	; 0xc2c
 8014b54:	f107 030c 	add.w	r3, r7, #12
 8014b58:	4a2b      	ldr	r2, [pc, #172]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b5a:	210a      	movs	r1, #10
 8014b5c:	f00a fbc4 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014b66:	4618      	mov	r0, r3
 8014b68:	f005 fa1a 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014b72:	4618      	mov	r0, r3
 8014b74:	f008 fa19 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "IAT", 10);
 8014b78:	f107 030c 	add.w	r3, r7, #12
 8014b7c:	220a      	movs	r2, #10
 8014b7e:	492c      	ldr	r1, [pc, #176]	; (8014c30 <_ZN11Screen1View11setupScreenEv+0x3a0>)
 8014b80:	4618      	mov	r0, r3
 8014b82:	f00a f84a 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(iat_labelBuffer, 10, "%s", buffer);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f603 4094 	addw	r0, r3, #3220	; 0xc94
 8014b8c:	f107 030c 	add.w	r3, r7, #12
 8014b90:	4a1d      	ldr	r2, [pc, #116]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014b92:	210a      	movs	r1, #10
 8014b94:	f00a fba8 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f005 f9fe 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014baa:	4618      	mov	r0, r3
 8014bac:	f008 f9fd 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "BATTERY", 10);
 8014bb0:	f107 030c 	add.w	r3, r7, #12
 8014bb4:	220a      	movs	r2, #10
 8014bb6:	491f      	ldr	r1, [pc, #124]	; (8014c34 <_ZN11Screen1View11setupScreenEv+0x3a4>)
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f00a f82e 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(batt_labelBuffer, 10, "%s", buffer);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f603 20f4 	addw	r0, r3, #2804	; 0xaf4
 8014bc4:	f107 030c 	add.w	r3, r7, #12
 8014bc8:	4a0f      	ldr	r2, [pc, #60]	; (8014c08 <_ZN11Screen1View11setupScreenEv+0x378>)
 8014bca:	210a      	movs	r1, #10
 8014bcc:	f00a fb8c 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f005 f9e2 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014be2:	4618      	mov	r0, r3
 8014be4:	f008 f9e1 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::strncpy(buffer, "TPS", 10);
 8014be8:	f107 030c 	add.w	r3, r7, #12
 8014bec:	220a      	movs	r2, #10
 8014bee:	4912      	ldr	r1, [pc, #72]	; (8014c38 <_ZN11Screen1View11setupScreenEv+0x3a8>)
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f00a f812 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	Unicode::snprintf(tps_labelBuffer, 10, "%s", buffer);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f603 305c 	addw	r0, r3, #2908	; 0xb5c
 8014bfc:	f107 030c 	add.w	r3, r7, #12
 8014c00:	e01c      	b.n	8014c3c <_ZN11Screen1View11setupScreenEv+0x3ac>
 8014c02:	bf00      	nop
 8014c04:	0802f7e4 	.word	0x0802f7e4
 8014c08:	0802f7e8 	.word	0x0802f7e8
 8014c0c:	0802f7ec 	.word	0x0802f7ec
 8014c10:	0802f7f4 	.word	0x0802f7f4
 8014c14:	0802f7f8 	.word	0x0802f7f8
 8014c18:	0802f7fc 	.word	0x0802f7fc
 8014c1c:	0802f800 	.word	0x0802f800
 8014c20:	0802f804 	.word	0x0802f804
 8014c24:	0802f808 	.word	0x0802f808
 8014c28:	0802f810 	.word	0x0802f810
 8014c2c:	0802f818 	.word	0x0802f818
 8014c30:	0802f81c 	.word	0x0802f81c
 8014c34:	0802f820 	.word	0x0802f820
 8014c38:	0802f828 	.word	0x0802f828
 8014c3c:	4a09      	ldr	r2, [pc, #36]	; (8014c64 <_ZN11Screen1View11setupScreenEv+0x3d4>)
 8014c3e:	210a      	movs	r1, #10
 8014c40:	f00a fb52 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_units.resizeToCurrentTextWithAlignment();
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f005 f9a8 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_units.invalidate();
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 8014c56:	4618      	mov	r0, r3
 8014c58:	f008 f9a7 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8014c5c:	bf00      	nop
 8014c5e:	3720      	adds	r7, #32
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	0802f7e8 	.word	0x0802f7e8

08014c68 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen() {
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7fb ffbc 	bl	8010bf0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8014c78:	bf00      	nop
 8014c7a:	3708      	adds	r7, #8
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}

08014c80 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent() {
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b08a      	sub	sp, #40	; 0x28
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
	Unicode::UnicodeChar buffer[16];

	map_value.invalidate();
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f008 f98b 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.MAP * PSI_TO_BAR));
 8014c94:	4bd1      	ldr	r3, [pc, #836]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014c96:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014c9a:	ee07 3a90 	vmov	s15, r3
 8014c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ca2:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8014fe0 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014caa:	f107 0308 	add.w	r3, r7, #8
 8014cae:	eeb0 0a67 	vmov.f32	s0, s15
 8014cb2:	4acc      	ldr	r2, [pc, #816]	; (8014fe4 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014cb4:	2110      	movs	r1, #16
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7ff fd90 	bl	80147dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(map_valueBuffer, 16, "%s", buffer);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f603 204c 	addw	r0, r3, #2636	; 0xa4c
 8014cc2:	f107 0308 	add.w	r3, r7, #8
 8014cc6:	4ac8      	ldr	r2, [pc, #800]	; (8014fe8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014cc8:	2110      	movs	r1, #16
 8014cca:	f00a fb0d 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	map_value.resizeToCurrentTextWithAlignment();
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f005 f963 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	map_value.invalidate();
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f008 f962 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	batt_value.invalidate();
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014cec:	4618      	mov	r0, r3
 8014cee:	f008 f95c 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f", (Current_Status.BATT / 100.00f));
 8014cf2:	4bba      	ldr	r3, [pc, #744]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8014cf8:	ee07 3a90 	vmov	s15, r3
 8014cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d00:	eddf 6aba 	vldr	s13, [pc, #744]	; 8014fec <_ZN11Screen1View15handleTickEventEv+0x36c>
 8014d04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014d08:	f107 0308 	add.w	r3, r7, #8
 8014d0c:	eeb0 0a47 	vmov.f32	s0, s14
 8014d10:	4ab4      	ldr	r2, [pc, #720]	; (8014fe4 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014d12:	2110      	movs	r1, #16
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7ff fd61 	bl	80147dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(batt_valueBuffer, 16, "%s", buffer);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f603 20b4 	addw	r0, r3, #2740	; 0xab4
 8014d20:	f107 0308 	add.w	r3, r7, #8
 8014d24:	4ab0      	ldr	r2, [pc, #704]	; (8014fe8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014d26:	2110      	movs	r1, #16
 8014d28:	f00a fade 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	batt_value.resizeToCurrentTextWithAlignment();
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014d32:	4618      	mov	r0, r3
 8014d34:	f005 f934 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	batt_value.invalidate();
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f008 f933 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	tps_value.invalidate();
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f008 f92d 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(tps_valueBuffer, 16, "%d", (Current_Status.TPS / 10));
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f603 301c 	addw	r0, r3, #2844	; 0xb1c
 8014d56:	4ba1      	ldr	r3, [pc, #644]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014d5c:	4aa4      	ldr	r2, [pc, #656]	; (8014ff0 <_ZN11Screen1View15handleTickEventEv+0x370>)
 8014d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8014d62:	08db      	lsrs	r3, r3, #3
 8014d64:	b29b      	uxth	r3, r3
 8014d66:	4aa3      	ldr	r2, [pc, #652]	; (8014ff4 <_ZN11Screen1View15handleTickEventEv+0x374>)
 8014d68:	2110      	movs	r1, #16
 8014d6a:	f00a fabd 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	tps_value.resizeToCurrentTextWithAlignment();
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8014d74:	4618      	mov	r0, r3
 8014d76:	f005 f913 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	tps_value.invalidate();
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8014d80:	4618      	mov	r0, r3
 8014d82:	f008 f912 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	lambda_value.invalidate();
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f008 f90c 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f",
			(Current_Status.LAMBDA1 * AFR_TO_LAMBDA / 100.00f));
 8014d92:	4b92      	ldr	r3, [pc, #584]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014d94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014d96:	ee07 3a90 	vmov	s15, r3
 8014d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d9e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8014ff8 <_ZN11Screen1View15handleTickEventEv+0x378>
 8014da2:	ee67 7a87 	vmul.f32	s15, s15, s14
	Unicode::snprintfFloat(buffer, 16, "%.2f",
 8014da6:	eddf 6a91 	vldr	s13, [pc, #580]	; 8014fec <_ZN11Screen1View15handleTickEventEv+0x36c>
 8014daa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014dae:	f107 0308 	add.w	r3, r7, #8
 8014db2:	eeb0 0a47 	vmov.f32	s0, s14
 8014db6:	4a91      	ldr	r2, [pc, #580]	; (8014ffc <_ZN11Screen1View15handleTickEventEv+0x37c>)
 8014db8:	2110      	movs	r1, #16
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7ff fd0e 	bl	80147dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(lambda_valueBuffer, 16, "%s", buffer);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 8014dc6:	f107 0308 	add.w	r3, r7, #8
 8014dca:	4a87      	ldr	r2, [pc, #540]	; (8014fe8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014dcc:	2110      	movs	r1, #16
 8014dce:	f00a fa8b 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	lambda_value.resizeToCurrentTextWithAlignment();
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f005 f8e1 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	lambda_value.invalidate();
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8014de4:	4618      	mov	r0, r3
 8014de6:	f008 f8e0 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	ect_value.invalidate();
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014df0:	4618      	mov	r0, r3
 8014df2:	f008 f8da 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(ect_valueBuffer, 16, "%d", Current_Status.ECT - 50);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f603 30ec 	addw	r0, r3, #3052	; 0xbec
 8014dfc:	4b77      	ldr	r3, [pc, #476]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014dfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e02:	3b32      	subs	r3, #50	; 0x32
 8014e04:	4a7b      	ldr	r2, [pc, #492]	; (8014ff4 <_ZN11Screen1View15handleTickEventEv+0x374>)
 8014e06:	2110      	movs	r1, #16
 8014e08:	f00a fa6e 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ect_value.resizeToCurrentTextWithAlignment();
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014e12:	4618      	mov	r0, r3
 8014e14:	f005 f8c4 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	ect_value.invalidate();
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f203 537c 	addw	r3, r3, #1404	; 0x57c
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f008 f8c3 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	iat_value.invalidate();
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f008 f8bd 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(iat_valueBuffer, 16, "%d", Current_Status.IAT - 50);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f603 4054 	addw	r0, r3, #3156	; 0xc54
 8014e36:	4b69      	ldr	r3, [pc, #420]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014e38:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014e3c:	3b32      	subs	r3, #50	; 0x32
 8014e3e:	4a6d      	ldr	r2, [pc, #436]	; (8014ff4 <_ZN11Screen1View15handleTickEventEv+0x374>)
 8014e40:	2110      	movs	r1, #16
 8014e42:	f00a fa51 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	iat_value.resizeToCurrentTextWithAlignment();
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f005 f8a7 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	iat_value.invalidate();
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f008 f8a6 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	oilp_value.invalidate();
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8014e64:	4618      	mov	r0, r3
 8014e66:	f008 f8a0 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.OILP * PSI_TO_BAR));
 8014e6a:	4b5c      	ldr	r3, [pc, #368]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014e6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014e70:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e78:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8014fe0 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e80:	f107 0308 	add.w	r3, r7, #8
 8014e84:	eeb0 0a67 	vmov.f32	s0, s15
 8014e88:	4a56      	ldr	r2, [pc, #344]	; (8014fe4 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014e8a:	2110      	movs	r1, #16
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f7ff fca5 	bl	80147dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(oilp_valueBuffer, 16, "%s", buffer);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f603 40bc 	addw	r0, r3, #3260	; 0xcbc
 8014e98:	f107 0308 	add.w	r3, r7, #8
 8014e9c:	4a52      	ldr	r2, [pc, #328]	; (8014fe8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014e9e:	2110      	movs	r1, #16
 8014ea0:	f00a fa22 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	oilp_value.resizeToCurrentTextWithAlignment();
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f005 f878 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	oilp_value.invalidate();
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f203 63fc 	addw	r3, r3, #1788	; 0x6fc
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f008 f877 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	fuelp_value.invalidate();
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f008 f871 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f",
			(Current_Status.FUELP * PSI_TO_BAR));
 8014ec8:	4b44      	ldr	r3, [pc, #272]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014eca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8014ece:	ee07 3a90 	vmov	s15, r3
	Unicode::snprintfFloat(buffer, 16, "%.1f",
 8014ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ed6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8014fe0 <_ZN11Screen1View15handleTickEventEv+0x360>
 8014eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ede:	f107 0308 	add.w	r3, r7, #8
 8014ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8014ee6:	4a3f      	ldr	r2, [pc, #252]	; (8014fe4 <_ZN11Screen1View15handleTickEventEv+0x364>)
 8014ee8:	2110      	movs	r1, #16
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7ff fc76 	bl	80147dc <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(fuelp_valueBuffer, 16, "%s", buffer);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f603 5024 	addw	r0, r3, #3364	; 0xd24
 8014ef6:	f107 0308 	add.w	r3, r7, #8
 8014efa:	4a3b      	ldr	r2, [pc, #236]	; (8014fe8 <_ZN11Screen1View15handleTickEventEv+0x368>)
 8014efc:	2110      	movs	r1, #16
 8014efe:	f00a f9f3 	bl	801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	fuelp_value.resizeToCurrentTextWithAlignment();
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f005 f849 	bl	8019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	fuelp_value.invalidate();
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014f14:	4618      	mov	r0, r3
 8014f16:	f008 f848 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indLeft.setVisible(Current_Status.IND_LEFT);
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8014f20:	4b2e      	ldr	r3, [pc, #184]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f22:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	bf14      	ite	ne
 8014f2a:	2301      	movne	r3, #1
 8014f2c:	2300      	moveq	r3, #0
 8014f2e:	b2db      	uxtb	r3, r3
 8014f30:	4619      	mov	r1, r3
 8014f32:	4610      	mov	r0, r2
 8014f34:	f7ff fc66 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indLeft.invalidate();
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	33c4      	adds	r3, #196	; 0xc4
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f008 f834 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indHigh.setVisible(Current_Status.IND_HIGH);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f503 728e 	add.w	r2, r3, #284	; 0x11c
 8014f48:	4b24      	ldr	r3, [pc, #144]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f4a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	bf14      	ite	ne
 8014f52:	2301      	movne	r3, #1
 8014f54:	2300      	moveq	r3, #0
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	4619      	mov	r1, r3
 8014f5a:	4610      	mov	r0, r2
 8014f5c:	f7ff fc52 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indHigh.invalidate();
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014f66:	4618      	mov	r0, r3
 8014f68:	f008 f81f 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indFuel.setVisible(Current_Status.IND_FUEL);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8014f72:	4b1a      	ldr	r3, [pc, #104]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f74:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	bf14      	ite	ne
 8014f7c:	2301      	movne	r3, #1
 8014f7e:	2300      	moveq	r3, #0
 8014f80:	b2db      	uxtb	r3, r3
 8014f82:	4619      	mov	r1, r3
 8014f84:	4610      	mov	r0, r2
 8014f86:	f7ff fc3d 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indFuel.invalidate();
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8014f90:	4618      	mov	r0, r3
 8014f92:	f008 f80a 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indOil.setVisible(Current_Status.IND_OIL);
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8014f9c:	4b0f      	ldr	r3, [pc, #60]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014f9e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	bf14      	ite	ne
 8014fa6:	2301      	movne	r3, #1
 8014fa8:	2300      	moveq	r3, #0
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	4619      	mov	r1, r3
 8014fae:	4610      	mov	r0, r2
 8014fb0:	f7ff fc28 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indOil.invalidate();
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f007 fff5 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indBatt.setVisible(Current_Status.IND_BATT);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8014fc6:	4b05      	ldr	r3, [pc, #20]	; (8014fdc <_ZN11Screen1View15handleTickEventEv+0x35c>)
 8014fc8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	bf14      	ite	ne
 8014fd0:	2301      	movne	r3, #1
 8014fd2:	2300      	moveq	r3, #0
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	4619      	mov	r1, r3
 8014fd8:	4610      	mov	r0, r2
 8014fda:	e011      	b.n	8015000 <_ZN11Screen1View15handleTickEventEv+0x380>
 8014fdc:	2000a504 	.word	0x2000a504
 8014fe0:	3d8d3466 	.word	0x3d8d3466
 8014fe4:	0802f82c 	.word	0x0802f82c
 8014fe8:	0802f7e8 	.word	0x0802f7e8
 8014fec:	42c80000 	.word	0x42c80000
 8014ff0:	cccccccd 	.word	0xcccccccd
 8014ff4:	0802f834 	.word	0x0802f834
 8014ff8:	416b3333 	.word	0x416b3333
 8014ffc:	0802f838 	.word	0x0802f838
 8015000:	f7ff fc00 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indBatt.invalidate();
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801500a:	4618      	mov	r0, r3
 801500c:	f007 ffcd 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indPark.setVisible(Current_Status.IND_PARK);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f503 72e6 	add.w	r2, r3, #460	; 0x1cc
 8015016:	4b39      	ldr	r3, [pc, #228]	; (80150fc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015018:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 801501c:	2b00      	cmp	r3, #0
 801501e:	bf14      	ite	ne
 8015020:	2301      	movne	r3, #1
 8015022:	2300      	moveq	r3, #0
 8015024:	b2db      	uxtb	r3, r3
 8015026:	4619      	mov	r1, r3
 8015028:	4610      	mov	r0, r2
 801502a:	f7ff fbeb 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indPark.invalidate();
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8015034:	4618      	mov	r0, r3
 8015036:	f007 ffb8 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indDTC.setVisible(Current_Status.IND_DTC);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8015040:	4b2e      	ldr	r3, [pc, #184]	; (80150fc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015042:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8015046:	2b00      	cmp	r3, #0
 8015048:	bf14      	ite	ne
 801504a:	2301      	movne	r3, #1
 801504c:	2300      	moveq	r3, #0
 801504e:	b2db      	uxtb	r3, r3
 8015050:	4619      	mov	r1, r3
 8015052:	4610      	mov	r0, r2
 8015054:	f7ff fbd6 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indDTC.invalidate();
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801505e:	4618      	mov	r0, r3
 8015060:	f007 ffa3 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indECT.setVisible(Current_Status.IND_ECT);
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f503 7209 	add.w	r2, r3, #548	; 0x224
 801506a:	4b24      	ldr	r3, [pc, #144]	; (80150fc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 801506c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8015070:	2b00      	cmp	r3, #0
 8015072:	bf14      	ite	ne
 8015074:	2301      	movne	r3, #1
 8015076:	2300      	moveq	r3, #0
 8015078:	b2db      	uxtb	r3, r3
 801507a:	4619      	mov	r1, r3
 801507c:	4610      	mov	r0, r2
 801507e:	f7ff fbc1 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indECT.invalidate();
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8015088:	4618      	mov	r0, r3
 801508a:	f007 ff8e 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indLow.setVisible(Current_Status.IND_LOW);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f503 7214 	add.w	r2, r3, #592	; 0x250
 8015094:	4b19      	ldr	r3, [pc, #100]	; (80150fc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 8015096:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801509a:	2b00      	cmp	r3, #0
 801509c:	bf14      	ite	ne
 801509e:	2301      	movne	r3, #1
 80150a0:	2300      	moveq	r3, #0
 80150a2:	b2db      	uxtb	r3, r3
 80150a4:	4619      	mov	r1, r3
 80150a6:	4610      	mov	r0, r2
 80150a8:	f7ff fbac 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indLow.invalidate();
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80150b2:	4618      	mov	r0, r3
 80150b4:	f007 ff79 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	indRight.setVisible(Current_Status.IND_RIGHT);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 80150be:	4b0f      	ldr	r3, [pc, #60]	; (80150fc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 80150c0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	bf14      	ite	ne
 80150c8:	2301      	movne	r3, #1
 80150ca:	2300      	moveq	r3, #0
 80150cc:	b2db      	uxtb	r3, r3
 80150ce:	4619      	mov	r1, r3
 80150d0:	4610      	mov	r0, r2
 80150d2:	f7ff fb97 	bl	8014804 <_ZN8touchgfx8Drawable10setVisibleEb>
	indRight.invalidate();
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	33f0      	adds	r3, #240	; 0xf0
 80150da:	4618      	mov	r0, r3
 80150dc:	f007 ff65 	bl	801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>

	gauge1.updateValue(Current_Status.RPM, 0);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 80150e6:	4a05      	ldr	r2, [pc, #20]	; (80150fc <_ZN11Screen1View15handleTickEventEv+0x47c>)
 80150e8:	8812      	ldrh	r2, [r2, #0]
 80150ea:	4611      	mov	r1, r2
 80150ec:	2200      	movs	r2, #0
 80150ee:	4618      	mov	r0, r3
 80150f0:	f001 fea1 	bl	8016e36 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
	//gauge1.set
	//gauge1.invalidate();

}
 80150f4:	bf00      	nop
 80150f6:	3728      	adds	r7, #40	; 0x28
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}
 80150fc:	2000a504 	.word	0x2000a504

08015100 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8015100:	b480      	push	{r7}
 8015102:	b083      	sub	sp, #12
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
    {
 8015108:	4a04      	ldr	r2, [pc, #16]	; (801511c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	601a      	str	r2, [r3, #0]
    }
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	4618      	mov	r0, r3
 8015112:	370c      	adds	r7, #12
 8015114:	46bd      	mov	sp, r7
 8015116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511a:	4770      	bx	lr
 801511c:	080302cc 	.word	0x080302cc

08015120 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
    }
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f7ff ffe9 	bl	8015100 <_ZN8touchgfx15TouchControllerD1Ev>
 801512e:	2104      	movs	r1, #4
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f018 f86e 	bl	802d212 <_ZdlPvj>
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	4618      	mov	r0, r3
 801513a:	3708      	adds	r7, #8
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}

08015140 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8015140:	b480      	push	{r7}
 8015142:	b083      	sub	sp, #12
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8015148:	bf00      	nop
 801514a:	370c      	adds	r7, #12
 801514c:	46bd      	mov	sp, r7
 801514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015152:	4770      	bx	lr

08015154 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8015154:	b480      	push	{r7}
 8015156:	b085      	sub	sp, #20
 8015158:	af00      	add	r7, sp, #0
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3714      	adds	r7, #20
 8015166:	46bd      	mov	sp, r7
 8015168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516c:	4770      	bx	lr
	...

08015170 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8015170:	b580      	push	{r7, lr}
 8015172:	b082      	sub	sp, #8
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
 8015178:	4a05      	ldr	r2, [pc, #20]	; (8015190 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	601a      	str	r2, [r3, #0]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	4618      	mov	r0, r3
 8015182:	f7ff ffbd 	bl	8015100 <_ZN8touchgfx15TouchControllerD1Ev>
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	4618      	mov	r0, r3
 801518a:	3708      	adds	r7, #8
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	080302b4 	.word	0x080302b4

08015194 <_ZN20STM32TouchControllerD0Ev>:
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7ff ffe7 	bl	8015170 <_ZN20STM32TouchControllerD1Ev>
 80151a2:	2104      	movs	r1, #4
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f018 f834 	bl	802d212 <_ZdlPvj>
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	4618      	mov	r0, r3
 80151ae:	3708      	adds	r7, #8
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}

080151b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80151b4:	b480      	push	{r7}
 80151b6:	b083      	sub	sp, #12
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	4603      	mov	r3, r0
 80151bc:	71fb      	strb	r3, [r7, #7]

}
 80151be:	bf00      	nop
 80151c0:	370c      	adds	r7, #12
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr

080151ca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80151ca:	b480      	push	{r7}
 80151cc:	b083      	sub	sp, #12
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	4603      	mov	r3, r0
 80151d2:	71fb      	strb	r3, [r7, #7]

}
 80151d4:	bf00      	nop
 80151d6:	370c      	adds	r7, #12
 80151d8:	46bd      	mov	sp, r7
 80151da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151de:	4770      	bx	lr

080151e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80151e0:	b480      	push	{r7}
 80151e2:	b083      	sub	sp, #12
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	4603      	mov	r3, r0
 80151e8:	71fb      	strb	r3, [r7, #7]

}
 80151ea:	bf00      	nop
 80151ec:	370c      	adds	r7, #12
 80151ee:	46bd      	mov	sp, r7
 80151f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f4:	4770      	bx	lr
	...

080151f8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80151f8:	b480      	push	{r7}
 80151fa:	b083      	sub	sp, #12
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
    {
 8015200:	4a04      	ldr	r2, [pc, #16]	; (8015214 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	601a      	str	r2, [r3, #0]
    }
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	4618      	mov	r0, r3
 801520a:	370c      	adds	r7, #12
 801520c:	46bd      	mov	sp, r7
 801520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015212:	4770      	bx	lr
 8015214:	08030d54 	.word	0x08030d54

08015218 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
    }
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7ff ffe9 	bl	80151f8 <_ZN8touchgfx3HALD1Ev>
 8015226:	217c      	movs	r1, #124	; 0x7c
 8015228:	6878      	ldr	r0, [r7, #4]
 801522a:	f017 fff2 	bl	802d212 <_ZdlPvj>
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	4618      	mov	r0, r3
 8015232:	3708      	adds	r7, #8
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8015238:	b480      	push	{r7}
 801523a:	b083      	sub	sp, #12
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
 8015240:	460b      	mov	r3, r1
 8015242:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	78fa      	ldrb	r2, [r7, #3]
 8015248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2201      	movs	r2, #1
 8015250:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8015254:	bf00      	nop
 8015256:	370c      	adds	r7, #12
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr

08015260 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8015260:	b580      	push	{r7, lr}
 8015262:	b082      	sub	sp, #8
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	460b      	mov	r3, r1
 801526a:	807b      	strh	r3, [r7, #2]
 801526c:	4613      	mov	r3, r2
 801526e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8015270:	4b0c      	ldr	r3, [pc, #48]	; (80152a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8015272:	881b      	ldrh	r3, [r3, #0]
 8015274:	887a      	ldrh	r2, [r7, #2]
 8015276:	429a      	cmp	r2, r3
 8015278:	d304      	bcc.n	8015284 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801527a:	4b0b      	ldr	r3, [pc, #44]	; (80152a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 801527c:	881b      	ldrh	r3, [r3, #0]
 801527e:	883a      	ldrh	r2, [r7, #0]
 8015280:	429a      	cmp	r2, r3
 8015282:	d205      	bcs.n	8015290 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8015284:	4b09      	ldr	r3, [pc, #36]	; (80152ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8015286:	4a0a      	ldr	r2, [pc, #40]	; (80152b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8015288:	219e      	movs	r1, #158	; 0x9e
 801528a:	480a      	ldr	r0, [pc, #40]	; (80152b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 801528c:	f018 fde0 	bl	802de50 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8015290:	4a09      	ldr	r2, [pc, #36]	; (80152b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8015292:	887b      	ldrh	r3, [r7, #2]
 8015294:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8015296:	4a09      	ldr	r2, [pc, #36]	; (80152bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8015298:	883b      	ldrh	r3, [r7, #0]
 801529a:	8013      	strh	r3, [r2, #0]
    }
 801529c:	bf00      	nop
 801529e:	3708      	adds	r7, #8
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}
 80152a4:	2000979c 	.word	0x2000979c
 80152a8:	2000979e 	.word	0x2000979e
 80152ac:	0802f840 	.word	0x0802f840
 80152b0:	0802f8a4 	.word	0x0802f8a4
 80152b4:	0802f8e8 	.word	0x0802f8e8
 80152b8:	200097a2 	.word	0x200097a2
 80152bc:	200097a4 	.word	0x200097a4

080152c0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b082      	sub	sp, #8
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d009      	beq.n	80152e6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	685a      	ldr	r2, [r3, #4]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	4610      	mov	r0, r2
 80152e0:	4798      	blx	r3
 80152e2:	4603      	mov	r3, r0
 80152e4:	e000      	b.n	80152e8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 80152e6:	2300      	movs	r3, #0
    }
 80152e8:	4618      	mov	r0, r3
 80152ea:	3708      	adds	r7, #8
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}

080152f0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b082      	sub	sp, #8
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80152f8:	6878      	ldr	r0, [r7, #4]
 80152fa:	f003 f831 	bl	8018360 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	33a4      	adds	r3, #164	; 0xa4
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	4798      	blx	r3
    }
 801530a:	bf00      	nop
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8015312:	b480      	push	{r7}
 8015314:	b083      	sub	sp, #12
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
 801531a:	6039      	str	r1, [r7, #0]
    {
        return false;
 801531c:	2300      	movs	r3, #0
    }
 801531e:	4618      	mov	r0, r3
 8015320:	370c      	adds	r7, #12
 8015322:	46bd      	mov	sp, r7
 8015324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015328:	4770      	bx	lr
	...

0801532c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801532c:	b580      	push	{r7, lr}
 801532e:	b084      	sub	sp, #16
 8015330:	af00      	add	r7, sp, #0
 8015332:	60f8      	str	r0, [r7, #12]
 8015334:	60b9      	str	r1, [r7, #8]
 8015336:	607a      	str	r2, [r7, #4]
 8015338:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d106      	bne.n	801534e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015340:	4b11      	ldr	r3, [pc, #68]	; (8015388 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8015342:	4a12      	ldr	r2, [pc, #72]	; (801538c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8015344:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8015348:	4811      	ldr	r0, [pc, #68]	; (8015390 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 801534a:	f018 fd81 	bl	802de50 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	68ba      	ldr	r2, [r7, #8]
 8015352:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	687a      	ldr	r2, [r7, #4]
 8015358:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	683a      	ldr	r2, [r7, #0]
 801535e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2b00      	cmp	r3, #0
 8015364:	bf14      	ite	ne
 8015366:	2301      	movne	r3, #1
 8015368:	2300      	moveq	r3, #0
 801536a:	b2da      	uxtb	r2, r3
 801536c:	4b09      	ldr	r3, [pc, #36]	; (8015394 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801536e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	2b00      	cmp	r3, #0
 8015374:	bf14      	ite	ne
 8015376:	2301      	movne	r3, #1
 8015378:	2300      	moveq	r3, #0
 801537a:	b2da      	uxtb	r2, r3
 801537c:	4b06      	ldr	r3, [pc, #24]	; (8015398 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801537e:	701a      	strb	r2, [r3, #0]
    }
 8015380:	bf00      	nop
 8015382:	3710      	adds	r7, #16
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	0802f92c 	.word	0x0802f92c
 801538c:	0802f964 	.word	0x0802f964
 8015390:	0802f8e8 	.word	0x0802f8e8
 8015394:	200097a6 	.word	0x200097a6
 8015398:	200097a7 	.word	0x200097a7

0801539c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 801539c:	b480      	push	{r7}
 801539e:	b083      	sub	sp, #12
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80153a4:	2300      	movs	r3, #0
    }
 80153a6:	4618      	mov	r0, r3
 80153a8:	370c      	adds	r7, #12
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr

080153b2 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b082      	sub	sp, #8
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
 80153ba:	460b      	mov	r3, r1
 80153bc:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d004      	beq.n	80153d0 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153ca:	887a      	ldrh	r2, [r7, #2]
 80153cc:	4610      	mov	r0, r2
 80153ce:	4798      	blx	r3
        }
    }
 80153d0:	bf00      	nop
 80153d2:	3708      	adds	r7, #8
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 80153d8:	b480      	push	{r7}
 80153da:	b083      	sub	sp, #12
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 80153e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 80153e4:	4618      	mov	r0, r3
 80153e6:	370c      	adds	r7, #12
 80153e8:	46bd      	mov	sp, r7
 80153ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ee:	4770      	bx	lr

080153f0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	685a      	ldr	r2, [r3, #4]
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	3318      	adds	r3, #24
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	4610      	mov	r0, r2
 8015408:	4798      	blx	r3
 801540a:	4603      	mov	r3, r0
    }
 801540c:	4618      	mov	r0, r3
 801540e:	3708      	adds	r7, #8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}

08015414 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8015414:	b480      	push	{r7}
 8015416:	b085      	sub	sp, #20
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015428:	429a      	cmp	r2, r3
 801542a:	d011      	beq.n	8015450 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 801542c:	4b14      	ldr	r3, [pc, #80]	; (8015480 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801542e:	781b      	ldrb	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d11e      	bne.n	8015472 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8015434:	4b13      	ldr	r3, [pc, #76]	; (8015484 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8015436:	881b      	ldrh	r3, [r3, #0]
 8015438:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801543a:	4b13      	ldr	r3, [pc, #76]	; (8015488 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801543c:	881a      	ldrh	r2, [r3, #0]
 801543e:	4b11      	ldr	r3, [pc, #68]	; (8015484 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8015440:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8015442:	4a11      	ldr	r2, [pc, #68]	; (8015488 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8015444:	89bb      	ldrh	r3, [r7, #12]
 8015446:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8015448:	4b0d      	ldr	r3, [pc, #52]	; (8015480 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801544a:	2201      	movs	r2, #1
 801544c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801544e:	e010      	b.n	8015472 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8015450:	4b0b      	ldr	r3, [pc, #44]	; (8015480 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d00c      	beq.n	8015472 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8015458:	4b0a      	ldr	r3, [pc, #40]	; (8015484 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801545a:	881b      	ldrh	r3, [r3, #0]
 801545c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801545e:	4b0a      	ldr	r3, [pc, #40]	; (8015488 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8015460:	881a      	ldrh	r2, [r3, #0]
 8015462:	4b08      	ldr	r3, [pc, #32]	; (8015484 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8015464:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8015466:	4a08      	ldr	r2, [pc, #32]	; (8015488 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8015468:	89fb      	ldrh	r3, [r7, #14]
 801546a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 801546c:	4b04      	ldr	r3, [pc, #16]	; (8015480 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801546e:	2200      	movs	r2, #0
 8015470:	701a      	strb	r2, [r3, #0]
    }
 8015472:	bf00      	nop
 8015474:	3714      	adds	r7, #20
 8015476:	46bd      	mov	sp, r7
 8015478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547c:	4770      	bx	lr
 801547e:	bf00      	nop
 8015480:	200097a0 	.word	0x200097a0
 8015484:	2000979e 	.word	0x2000979e
 8015488:	2000979c 	.word	0x2000979c

0801548c <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 801548c:	b480      	push	{r7}
 801548e:	b083      	sub	sp, #12
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
    {
    }
 8015494:	bf00      	nop
 8015496:	370c      	adds	r7, #12
 8015498:	46bd      	mov	sp, r7
 801549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549e:	4770      	bx	lr

080154a0 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 80154a0:	b480      	push	{r7}
 80154a2:	b083      	sub	sp, #12
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
    {
    }
 80154a8:	bf00      	nop
 80154aa:	370c      	adds	r7, #12
 80154ac:	46bd      	mov	sp, r7
 80154ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b2:	4770      	bx	lr

080154b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b082      	sub	sp, #8
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	4618      	mov	r0, r3
 80154c0:	f002 f8ea 	bl	8017698 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80154c4:	bf00      	nop
 80154c6:	3708      	adds	r7, #8
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	4a05      	ldr	r2, [pc, #20]	; (80154ec <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	601a      	str	r2, [r3, #0]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	4618      	mov	r0, r3
 80154de:	f7ff fe8b 	bl	80151f8 <_ZN8touchgfx3HALD1Ev>
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	4618      	mov	r0, r3
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	080304fc 	.word	0x080304fc

080154f0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b082      	sub	sp, #8
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f7ff ffe7 	bl	80154cc <_ZN20TouchGFXGeneratedHALD1Ev>
 80154fe:	217c      	movs	r1, #124	; 0x7c
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f017 fe86 	bl	802d212 <_ZdlPvj>
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	4618      	mov	r0, r3
 801550a:	3708      	adds	r7, #8
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	4618      	mov	r0, r3
 801551c:	f7ff ffca 	bl	80154b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8015520:	bf00      	nop
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}

08015528 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b082      	sub	sp, #8
 801552c:	af00      	add	r7, sp, #0
 801552e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	4618      	mov	r0, r3
 8015534:	f001 fa9a 	bl	8016a6c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8015538:	bf00      	nop
 801553a:	3708      	adds	r7, #8
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}

08015540 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b082      	sub	sp, #8
 8015544:	af00      	add	r7, sp, #0
 8015546:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	4618      	mov	r0, r3
 801554c:	f001 fb26 	bl	8016b9c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8015550:	4603      	mov	r3, r0
}
 8015552:	4618      	mov	r0, r3
 8015554:	3708      	adds	r7, #8
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}

0801555a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801555a:	b580      	push	{r7, lr}
 801555c:	b082      	sub	sp, #8
 801555e:	af00      	add	r7, sp, #0
 8015560:	6078      	str	r0, [r7, #4]
 8015562:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6839      	ldr	r1, [r7, #0]
 8015568:	4618      	mov	r0, r3
 801556a:	f001 fb25 	bl	8016bb8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801556e:	bf00      	nop
 8015570:	3708      	adds	r7, #8
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b082      	sub	sp, #8
 801557a:	af00      	add	r7, sp, #0
 801557c:	6078      	str	r0, [r7, #4]
 801557e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6839      	ldr	r1, [r7, #0]
 8015584:	4618      	mov	r0, r3
 8015586:	f001 fb2d 	bl	8016be4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801558a:	bf00      	nop
 801558c:	3708      	adds	r7, #8
 801558e:	46bd      	mov	sp, r7
 8015590:	bd80      	pop	{r7, pc}

08015592 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015592:	b580      	push	{r7, lr}
 8015594:	b084      	sub	sp, #16
 8015596:	af00      	add	r7, sp, #0
 8015598:	60f8      	str	r0, [r7, #12]
 801559a:	60b9      	str	r1, [r7, #8]
 801559c:	607a      	str	r2, [r7, #4]
 801559e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80155a0:	68f8      	ldr	r0, [r7, #12]
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	687a      	ldr	r2, [r7, #4]
 80155a6:	68b9      	ldr	r1, [r7, #8]
 80155a8:	f001 fb2a 	bl	8016c00 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80155ac:	4603      	mov	r3, r0
}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3710      	adds	r7, #16
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}

080155b6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80155b6:	b580      	push	{r7, lr}
 80155b8:	b082      	sub	sp, #8
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	4618      	mov	r0, r3
 80155c2:	f001 fa77 	bl	8016ab4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80155c6:	bf00      	nop
 80155c8:	3708      	adds	r7, #8
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b082      	sub	sp, #8
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	4618      	mov	r0, r3
 80155da:	f001 fa7b 	bl	8016ad4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80155de:	bf00      	nop
 80155e0:	3708      	adds	r7, #8
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}

080155e6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80155e6:	b580      	push	{r7, lr}
 80155e8:	b082      	sub	sp, #8
 80155ea:	af00      	add	r7, sp, #0
 80155ec:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	4618      	mov	r0, r3
 80155f2:	f001 fa7d 	bl	8016af0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80155f6:	bf00      	nop
 80155f8:	3708      	adds	r7, #8
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80155fe:	b580      	push	{r7, lr}
 8015600:	b082      	sub	sp, #8
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	4618      	mov	r0, r3
 801560a:	f001 fa7f 	bl	8016b0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801560e:	bf00      	nop
 8015610:	3708      	adds	r7, #8
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}
	...

08015618 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8015618:	b580      	push	{r7, lr}
 801561a:	b082      	sub	sp, #8
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
 8015620:	4a05      	ldr	r2, [pc, #20]	; (8015638 <_ZN11TouchGFXHALD1Ev+0x20>)
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	601a      	str	r2, [r3, #0]
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	4618      	mov	r0, r3
 801562a:	f7ff ff4f 	bl	80154cc <_ZN20TouchGFXGeneratedHALD1Ev>
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	4618      	mov	r0, r3
 8015632:	3708      	adds	r7, #8
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}
 8015638:	080302e4 	.word	0x080302e4

0801563c <_ZN11TouchGFXHALD0Ev>:
 801563c:	b580      	push	{r7, lr}
 801563e:	b082      	sub	sp, #8
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f7ff ffe7 	bl	8015618 <_ZN11TouchGFXHALD1Ev>
 801564a:	217c      	movs	r1, #124	; 0x7c
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f017 fde0 	bl	802d212 <_ZdlPvj>
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	4618      	mov	r0, r3
 8015656:	3708      	adds	r7, #8
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}

0801565c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 801565c:	b580      	push	{r7, lr}
 801565e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8015660:	2200      	movs	r2, #0
 8015662:	2101      	movs	r1, #1
 8015664:	2001      	movs	r0, #1
 8015666:	f7f6 fdc7 	bl	800c1f8 <osSemaphoreNew>
 801566a:	4603      	mov	r3, r0
 801566c:	4a0f      	ldr	r2, [pc, #60]	; (80156ac <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801566e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8015670:	4b0e      	ldr	r3, [pc, #56]	; (80156ac <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d105      	bne.n	8015684 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8015678:	4b0d      	ldr	r3, [pc, #52]	; (80156b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 801567a:	4a0e      	ldr	r2, [pc, #56]	; (80156b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 801567c:	2128      	movs	r1, #40	; 0x28
 801567e:	480e      	ldr	r0, [pc, #56]	; (80156b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8015680:	f018 fbe6 	bl	802de50 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8015684:	2200      	movs	r2, #0
 8015686:	2104      	movs	r1, #4
 8015688:	2001      	movs	r0, #1
 801568a:	f7f6 fed5 	bl	800c438 <osMessageQueueNew>
 801568e:	4603      	mov	r3, r0
 8015690:	4a0a      	ldr	r2, [pc, #40]	; (80156bc <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8015692:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8015694:	4b09      	ldr	r3, [pc, #36]	; (80156bc <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d105      	bne.n	80156a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 801569c:	4b08      	ldr	r3, [pc, #32]	; (80156c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 801569e:	4a05      	ldr	r2, [pc, #20]	; (80156b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80156a0:	212c      	movs	r1, #44	; 0x2c
 80156a2:	4805      	ldr	r0, [pc, #20]	; (80156b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80156a4:	f018 fbd4 	bl	802de50 <__assert_func>
}
 80156a8:	bf00      	nop
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	20007b40 	.word	0x20007b40
 80156b0:	0802f9b4 	.word	0x0802f9b4
 80156b4:	0802fa00 	.word	0x0802fa00
 80156b8:	0802fa30 	.word	0x0802fa30
 80156bc:	20007b44 	.word	0x20007b44
 80156c0:	0802fa5c 	.word	0x0802fa5c

080156c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80156c8:	4b04      	ldr	r3, [pc, #16]	; (80156dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	f04f 31ff 	mov.w	r1, #4294967295
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7f6 fe1b 	bl	800c30c <osSemaphoreAcquire>
}
 80156d6:	bf00      	nop
 80156d8:	bd80      	pop	{r7, pc}
 80156da:	bf00      	nop
 80156dc:	20007b40 	.word	0x20007b40

080156e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80156e4:	4b03      	ldr	r3, [pc, #12]	; (80156f4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7f6 fe61 	bl	800c3b0 <osSemaphoreRelease>
}
 80156ee:	bf00      	nop
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	20007b40 	.word	0x20007b40

080156f8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80156fc:	4b03      	ldr	r3, [pc, #12]	; (801570c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2100      	movs	r1, #0
 8015702:	4618      	mov	r0, r3
 8015704:	f7f6 fe02 	bl	800c30c <osSemaphoreAcquire>
}
 8015708:	bf00      	nop
 801570a:	bd80      	pop	{r7, pc}
 801570c:	20007b40 	.word	0x20007b40

08015710 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8015710:	b580      	push	{r7, lr}
 8015712:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8015714:	4b03      	ldr	r3, [pc, #12]	; (8015724 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	4618      	mov	r0, r3
 801571a:	f7f6 fe49 	bl	800c3b0 <osSemaphoreRelease>
}
 801571e:	bf00      	nop
 8015720:	bd80      	pop	{r7, pc}
 8015722:	bf00      	nop
 8015724:	20007b40 	.word	0x20007b40

08015728 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8015728:	b580      	push	{r7, lr}
 801572a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 801572c:	4b04      	ldr	r3, [pc, #16]	; (8015740 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 801572e:	6818      	ldr	r0, [r3, #0]
 8015730:	2300      	movs	r3, #0
 8015732:	2200      	movs	r2, #0
 8015734:	4903      	ldr	r1, [pc, #12]	; (8015744 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8015736:	f7f6 fef3 	bl	800c520 <osMessageQueuePut>
}
 801573a:	bf00      	nop
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	20007b44 	.word	0x20007b44
 8015744:	20000018 	.word	0x20000018

08015748 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b082      	sub	sp, #8
 801574c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 801574e:	4b09      	ldr	r3, [pc, #36]	; (8015774 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8015750:	6818      	ldr	r0, [r3, #0]
 8015752:	1d39      	adds	r1, r7, #4
 8015754:	2300      	movs	r3, #0
 8015756:	2200      	movs	r2, #0
 8015758:	f7f6 ff42 	bl	800c5e0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 801575c:	4b05      	ldr	r3, [pc, #20]	; (8015774 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801575e:	6818      	ldr	r0, [r3, #0]
 8015760:	1d39      	adds	r1, r7, #4
 8015762:	f04f 33ff 	mov.w	r3, #4294967295
 8015766:	2200      	movs	r2, #0
 8015768:	f7f6 ff3a 	bl	800c5e0 <osMessageQueueGet>
}
 801576c:	bf00      	nop
 801576e:	3708      	adds	r7, #8
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}
 8015774:	20007b44 	.word	0x20007b44

08015778 <__NVIC_EnableIRQ>:
{
 8015778:	b480      	push	{r7}
 801577a:	b083      	sub	sp, #12
 801577c:	af00      	add	r7, sp, #0
 801577e:	4603      	mov	r3, r0
 8015780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015786:	2b00      	cmp	r3, #0
 8015788:	db0b      	blt.n	80157a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801578a:	79fb      	ldrb	r3, [r7, #7]
 801578c:	f003 021f 	and.w	r2, r3, #31
 8015790:	4907      	ldr	r1, [pc, #28]	; (80157b0 <__NVIC_EnableIRQ+0x38>)
 8015792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015796:	095b      	lsrs	r3, r3, #5
 8015798:	2001      	movs	r0, #1
 801579a:	fa00 f202 	lsl.w	r2, r0, r2
 801579e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80157a2:	bf00      	nop
 80157a4:	370c      	adds	r7, #12
 80157a6:	46bd      	mov	sp, r7
 80157a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ac:	4770      	bx	lr
 80157ae:	bf00      	nop
 80157b0:	e000e100 	.word	0xe000e100

080157b4 <__NVIC_DisableIRQ>:
{
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	4603      	mov	r3, r0
 80157bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80157be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	db12      	blt.n	80157ec <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80157c6:	79fb      	ldrb	r3, [r7, #7]
 80157c8:	f003 021f 	and.w	r2, r3, #31
 80157cc:	490a      	ldr	r1, [pc, #40]	; (80157f8 <__NVIC_DisableIRQ+0x44>)
 80157ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157d2:	095b      	lsrs	r3, r3, #5
 80157d4:	2001      	movs	r0, #1
 80157d6:	fa00 f202 	lsl.w	r2, r0, r2
 80157da:	3320      	adds	r3, #32
 80157dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80157e0:	f3bf 8f4f 	dsb	sy
}
 80157e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80157e6:	f3bf 8f6f 	isb	sy
}
 80157ea:	bf00      	nop
}
 80157ec:	bf00      	nop
 80157ee:	370c      	adds	r7, #12
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr
 80157f8:	e000e100 	.word	0xe000e100

080157fc <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80157fc:	b480      	push	{r7}
 80157fe:	b083      	sub	sp, #12
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
        : color(0)
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2200      	movs	r2, #0
 8015808:	601a      	str	r2, [r3, #0]
    }
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	4618      	mov	r0, r3
 801580e:	370c      	adds	r7, #12
 8015810:	46bd      	mov	sp, r7
 8015812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015816:	4770      	bx	lr

08015818 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8015818:	b480      	push	{r7}
 801581a:	b083      	sub	sp, #12
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
        return color;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
    }
 8015824:	4618      	mov	r0, r3
 8015826:	370c      	adds	r7, #12
 8015828:	46bd      	mov	sp, r7
 801582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582e:	4770      	bx	lr

08015830 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
    {
 8015838:	4a04      	ldr	r2, [pc, #16]	; (801584c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	601a      	str	r2, [r3, #0]
    }
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	4618      	mov	r0, r3
 8015842:	370c      	adds	r7, #12
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr
 801584c:	08030404 	.word	0x08030404

08015850 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8015850:	b580      	push	{r7, lr}
 8015852:	b082      	sub	sp, #8
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
    }
 8015858:	6878      	ldr	r0, [r7, #4]
 801585a:	f7ff ffe9 	bl	8015830 <_ZN8touchgfx9DMA_QueueD1Ev>
 801585e:	2104      	movs	r1, #4
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	f017 fcd6 	bl	802d212 <_ZdlPvj>
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	4618      	mov	r0, r3
 801586a:	3708      	adds	r7, #8
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	3344      	adds	r3, #68	; 0x44
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	4798      	blx	r3
    }
 8015884:	bf00      	nop
 8015886:	3708      	adds	r7, #8
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}

0801588c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 801588c:	b480      	push	{r7}
 801588e:	b083      	sub	sp, #12
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
    {
 8015894:	4a04      	ldr	r2, [pc, #16]	; (80158a8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	601a      	str	r2, [r3, #0]
    }
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	4618      	mov	r0, r3
 801589e:	370c      	adds	r7, #12
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr
 80158a8:	080312ac 	.word	0x080312ac

080158ac <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b082      	sub	sp, #8
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
    }
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f7ff ffe9 	bl	801588c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80158ba:	210c      	movs	r1, #12
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f017 fca8 	bl	802d212 <_ZdlPvj>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	4618      	mov	r0, r3
 80158c6:	3708      	adds	r7, #8
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80158d6:	4a09      	ldr	r2, [pc, #36]	; (80158fc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	601a      	str	r2, [r3, #0]
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	683a      	ldr	r2, [r7, #0]
 80158e0:	605a      	str	r2, [r3, #4]
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2200      	movs	r2, #0
 80158e6:	721a      	strb	r2, [r3, #8]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2200      	movs	r2, #0
 80158ec:	725a      	strb	r2, [r3, #9]
    {
    }
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4618      	mov	r0, r3
 80158f2:	370c      	adds	r7, #12
 80158f4:	46bd      	mov	sp, r7
 80158f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fa:	4770      	bx	lr
 80158fc:	080312ac 	.word	0x080312ac

08015900 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8015908:	2301      	movs	r3, #1
    }
 801590a:	4618      	mov	r0, r3
 801590c:	370c      	adds	r7, #12
 801590e:	46bd      	mov	sp, r7
 8015910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015914:	4770      	bx	lr

08015916 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8015916:	b580      	push	{r7, lr}
 8015918:	b082      	sub	sp, #8
 801591a:	af00      	add	r7, sp, #0
 801591c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801591e:	687a      	ldr	r2, [r7, #4]
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	3328      	adds	r3, #40	; 0x28
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	4610      	mov	r0, r2
 801592a:	4798      	blx	r3
    }
 801592c:	bf00      	nop
 801592e:	3708      	adds	r7, #8
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8015934:	b580      	push	{r7, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	685a      	ldr	r2, [r3, #4]
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	3314      	adds	r3, #20
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	4610      	mov	r0, r2
 801594c:	4798      	blx	r3
    }
 801594e:	bf00      	nop
 8015950:	3708      	adds	r7, #8
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}

08015956 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8015956:	b580      	push	{r7, lr}
 8015958:	b082      	sub	sp, #8
 801595a:	af00      	add	r7, sp, #0
 801595c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 801595e:	f7fa facd 	bl	800fefc <_ZN8touchgfx3HAL11getInstanceEv>
 8015962:	4603      	mov	r3, r0
 8015964:	4618      	mov	r0, r3
 8015966:	f7ff ffe5 	bl	8015934 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 801596a:	bf00      	nop
 801596c:	3708      	adds	r7, #8
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}

08015972 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8015972:	b580      	push	{r7, lr}
 8015974:	b082      	sub	sp, #8
 8015976:	af00      	add	r7, sp, #0
 8015978:	6078      	str	r0, [r7, #4]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	330c      	adds	r3, #12
 801597e:	4618      	mov	r0, r3
 8015980:	f7ff ff3c 	bl	80157fc <_ZN8touchgfx9colortypeC1Ev>
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	4618      	mov	r0, r3
 8015988:	3708      	adds	r7, #8
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
	...

08015990 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8015990:	b5b0      	push	{r4, r5, r7, lr}
 8015992:	b082      	sub	sp, #8
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8015998:	687a      	ldr	r2, [r7, #4]
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	330c      	adds	r3, #12
 801599e:	4619      	mov	r1, r3
 80159a0:	4610      	mov	r0, r2
 80159a2:	f7ff ff93 	bl	80158cc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80159a6:	4a0e      	ldr	r2, [pc, #56]	; (80159e0 <_ZN8STM32DMAC1Ev+0x50>)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	601a      	str	r2, [r3, #0]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f103 000c 	add.w	r0, r3, #12
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	3320      	adds	r3, #32
 80159b6:	2260      	movs	r2, #96	; 0x60
 80159b8:	4619      	mov	r1, r3
 80159ba:	f002 fe03 	bl	80185c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	3320      	adds	r3, #32
 80159c2:	245f      	movs	r4, #95	; 0x5f
 80159c4:	461d      	mov	r5, r3
 80159c6:	2c00      	cmp	r4, #0
 80159c8:	db05      	blt.n	80159d6 <_ZN8STM32DMAC1Ev+0x46>
 80159ca:	4628      	mov	r0, r5
 80159cc:	f7ff ffd1 	bl	8015972 <_ZN8touchgfx6BlitOpC1Ev>
 80159d0:	3520      	adds	r5, #32
 80159d2:	3c01      	subs	r4, #1
 80159d4:	e7f7      	b.n	80159c6 <_ZN8STM32DMAC1Ev+0x36>
{
}
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	4618      	mov	r0, r3
 80159da:	3708      	adds	r7, #8
 80159dc:	46bd      	mov	sp, r7
 80159de:	bdb0      	pop	{r4, r5, r7, pc}
 80159e0:	080303b4 	.word	0x080303b4

080159e4 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b082      	sub	sp, #8
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	4a09      	ldr	r2, [pc, #36]	; (8015a14 <_ZN8STM32DMAD1Ev+0x30>)
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80159f2:	205a      	movs	r0, #90	; 0x5a
 80159f4:	f7ff fede 	bl	80157b4 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	330c      	adds	r3, #12
 80159fc:	4618      	mov	r0, r3
 80159fe:	f000 fac3 	bl	8015f88 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7ff ff41 	bl	801588c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	3708      	adds	r7, #8
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	080303b4 	.word	0x080303b4

08015a18 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
}
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f7ff ffdf 	bl	80159e4 <_ZN8STM32DMAD1Ev>
 8015a26:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f017 fbf1 	bl	802d212 <_ZdlPvj>
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	4618      	mov	r0, r3
 8015a34:	3708      	adds	r7, #8
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}
	...

08015a3c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b084      	sub	sp, #16
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8015a44:	2300      	movs	r3, #0
 8015a46:	60fb      	str	r3, [r7, #12]
 8015a48:	4b10      	ldr	r3, [pc, #64]	; (8015a8c <_ZN8STM32DMA10initializeEv+0x50>)
 8015a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a4c:	4a0f      	ldr	r2, [pc, #60]	; (8015a8c <_ZN8STM32DMA10initializeEv+0x50>)
 8015a4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015a52:	6313      	str	r3, [r2, #48]	; 0x30
 8015a54:	4b0d      	ldr	r3, [pc, #52]	; (8015a8c <_ZN8STM32DMA10initializeEv+0x50>)
 8015a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a5c:	60fb      	str	r3, [r7, #12]
 8015a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8015a60:	4b0a      	ldr	r3, [pc, #40]	; (8015a8c <_ZN8STM32DMA10initializeEv+0x50>)
 8015a62:	691b      	ldr	r3, [r3, #16]
 8015a64:	4a09      	ldr	r2, [pc, #36]	; (8015a8c <_ZN8STM32DMA10initializeEv+0x50>)
 8015a66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015a6a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8015a6c:	4b07      	ldr	r3, [pc, #28]	; (8015a8c <_ZN8STM32DMA10initializeEv+0x50>)
 8015a6e:	691b      	ldr	r3, [r3, #16]
 8015a70:	4a06      	ldr	r2, [pc, #24]	; (8015a8c <_ZN8STM32DMA10initializeEv+0x50>)
 8015a72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8015a76:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8015a78:	4b05      	ldr	r3, [pc, #20]	; (8015a90 <_ZN8STM32DMA10initializeEv+0x54>)
 8015a7a:	4a06      	ldr	r2, [pc, #24]	; (8015a94 <_ZN8STM32DMA10initializeEv+0x58>)
 8015a7c:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8015a7e:	205a      	movs	r0, #90	; 0x5a
 8015a80:	f7ff fe7a 	bl	8015778 <__NVIC_EnableIRQ>
}
 8015a84:	bf00      	nop
 8015a86:	3710      	adds	r7, #16
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	40023800 	.word	0x40023800
 8015a90:	2000b040 	.word	0x2000b040
 8015a94:	08015957 	.word	0x08015957

08015a98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b084      	sub	sp, #16
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015aa8:	78fb      	ldrb	r3, [r7, #3]
 8015aaa:	2b0b      	cmp	r3, #11
 8015aac:	d826      	bhi.n	8015afc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8015aae:	a201      	add	r2, pc, #4	; (adr r2, 8015ab4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ab4:	08015af1 	.word	0x08015af1
 8015ab8:	08015aeb 	.word	0x08015aeb
 8015abc:	08015ae5 	.word	0x08015ae5
 8015ac0:	08015afd 	.word	0x08015afd
 8015ac4:	08015afd 	.word	0x08015afd
 8015ac8:	08015afd 	.word	0x08015afd
 8015acc:	08015afd 	.word	0x08015afd
 8015ad0:	08015af7 	.word	0x08015af7
 8015ad4:	08015af7 	.word	0x08015af7
 8015ad8:	08015af7 	.word	0x08015af7
 8015adc:	08015af7 	.word	0x08015af7
 8015ae0:	08015af7 	.word	0x08015af7
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	60fb      	str	r3, [r7, #12]
        break;
 8015ae8:	e00e      	b.n	8015b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8015aea:	2301      	movs	r3, #1
 8015aec:	60fb      	str	r3, [r7, #12]
        break;
 8015aee:	e00b      	b.n	8015b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8015af0:	2302      	movs	r3, #2
 8015af2:	60fb      	str	r3, [r7, #12]
        break;
 8015af4:	e008      	b.n	8015b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8015af6:	2305      	movs	r3, #5
 8015af8:	60fb      	str	r3, [r7, #12]
        break;
 8015afa:	e005      	b.n	8015b08 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015afc:	4b05      	ldr	r3, [pc, #20]	; (8015b14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8015afe:	4a06      	ldr	r2, [pc, #24]	; (8015b18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8015b00:	2166      	movs	r1, #102	; 0x66
 8015b02:	4806      	ldr	r0, [pc, #24]	; (8015b1c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8015b04:	f018 f9a4 	bl	802de50 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015b08:	68fb      	ldr	r3, [r7, #12]
}
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	3710      	adds	r7, #16
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	bf00      	nop
 8015b14:	0802faa0 	.word	0x0802faa0
 8015b18:	0802fabc 	.word	0x0802fabc
 8015b1c:	0802fb08 	.word	0x0802fb08

08015b20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b084      	sub	sp, #16
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	460b      	mov	r3, r1
 8015b2a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8015b30:	78fb      	ldrb	r3, [r7, #3]
 8015b32:	2b0a      	cmp	r3, #10
 8015b34:	d821      	bhi.n	8015b7a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8015b36:	a201      	add	r2, pc, #4	; (adr r2, 8015b3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8015b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b3c:	08015b75 	.word	0x08015b75
 8015b40:	08015b6f 	.word	0x08015b6f
 8015b44:	08015b69 	.word	0x08015b69
 8015b48:	08015b7b 	.word	0x08015b7b
 8015b4c:	08015b7b 	.word	0x08015b7b
 8015b50:	08015b7b 	.word	0x08015b7b
 8015b54:	08015b7b 	.word	0x08015b7b
 8015b58:	08015b6f 	.word	0x08015b6f
 8015b5c:	08015b6f 	.word	0x08015b6f
 8015b60:	08015b6f 	.word	0x08015b6f
 8015b64:	08015b6f 	.word	0x08015b6f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8015b68:	2300      	movs	r3, #0
 8015b6a:	60fb      	str	r3, [r7, #12]
        break;
 8015b6c:	e00b      	b.n	8015b86 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8015b6e:	2301      	movs	r3, #1
 8015b70:	60fb      	str	r3, [r7, #12]
        break;
 8015b72:	e008      	b.n	8015b86 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8015b74:	2302      	movs	r3, #2
 8015b76:	60fb      	str	r3, [r7, #12]
        break;
 8015b78:	e005      	b.n	8015b86 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8015b7a:	4b05      	ldr	r3, [pc, #20]	; (8015b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8015b7c:	4a05      	ldr	r2, [pc, #20]	; (8015b94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8015b7e:	2187      	movs	r1, #135	; 0x87
 8015b80:	4805      	ldr	r0, [pc, #20]	; (8015b98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8015b82:	f018 f965 	bl	802de50 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8015b86:	68fb      	ldr	r3, [r7, #12]
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3710      	adds	r7, #16
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}
 8015b90:	0802faa0 	.word	0x0802faa0
 8015b94:	0802fb34 	.word	0x0802fb34
 8015b98:	0802fb08 	.word	0x0802fb08

08015b9c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8015b9c:	b480      	push	{r7}
 8015b9e:	b083      	sub	sp, #12
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8015ba4:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	370c      	adds	r7, #12
 8015bac:	46bd      	mov	sp, r7
 8015bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb2:	4770      	bx	lr

08015bb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8015bb4:	b590      	push	{r4, r7, lr}
 8015bb6:	b089      	sub	sp, #36	; 0x24
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
 8015bbc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	7f5b      	ldrb	r3, [r3, #29]
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f7ff ff67 	bl	8015a98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015bca:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	7f9b      	ldrb	r3, [r3, #30]
 8015bd0:	4619      	mov	r1, r3
 8015bd2:	6878      	ldr	r0, [r7, #4]
 8015bd4:	f7ff ff60 	bl	8015a98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015bd8:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	7f9b      	ldrb	r3, [r3, #30]
 8015bde:	4619      	mov	r1, r3
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f7ff ff9d 	bl	8015b20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015be6:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015be8:	683b      	ldr	r3, [r7, #0]
 8015bea:	8b5b      	ldrh	r3, [r3, #26]
 8015bec:	461a      	mov	r2, r3
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	8a9b      	ldrh	r3, [r3, #20]
 8015bf2:	1ad2      	subs	r2, r2, r3
 8015bf4:	4b99      	ldr	r3, [pc, #612]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	8b5b      	ldrh	r3, [r3, #26]
 8015bfc:	461a      	mov	r2, r3
 8015bfe:	683b      	ldr	r3, [r7, #0]
 8015c00:	8a9b      	ldrh	r3, [r3, #20]
 8015c02:	1ad2      	subs	r2, r2, r3
 8015c04:	4b95      	ldr	r3, [pc, #596]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c06:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	8b1b      	ldrh	r3, [r3, #24]
 8015c0c:	461a      	mov	r2, r3
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	8a9b      	ldrh	r3, [r3, #20]
 8015c12:	1ad2      	subs	r2, r2, r3
 8015c14:	4b91      	ldr	r3, [pc, #580]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c16:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8015c18:	4a90      	ldr	r2, [pc, #576]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	8adb      	ldrh	r3, [r3, #22]
 8015c22:	461a      	mov	r2, r3
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	8a9b      	ldrh	r3, [r3, #20]
 8015c28:	041b      	lsls	r3, r3, #16
 8015c2a:	431a      	orrs	r2, r3
 8015c2c:	4b8b      	ldr	r3, [pc, #556]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	691a      	ldr	r2, [r3, #16]
 8015c34:	4b89      	ldr	r3, [pc, #548]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	685a      	ldr	r2, [r3, #4]
 8015c3c:	4b87      	ldr	r3, [pc, #540]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c3e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c48:	d037      	beq.n	8015cba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8015c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c4e:	f200 80e8 	bhi.w	8015e22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015c56:	d014      	beq.n	8015c82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8015c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015c5c:	f200 80e1 	bhi.w	8015e22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015c60:	2b80      	cmp	r3, #128	; 0x80
 8015c62:	d05b      	beq.n	8015d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8015c64:	2b80      	cmp	r3, #128	; 0x80
 8015c66:	f200 80dc 	bhi.w	8015e22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015c6a:	2b40      	cmp	r3, #64	; 0x40
 8015c6c:	f000 80c4 	beq.w	8015df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8015c70:	2b40      	cmp	r3, #64	; 0x40
 8015c72:	f200 80d6 	bhi.w	8015e22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8015c76:	2b04      	cmp	r3, #4
 8015c78:	d03b      	beq.n	8015cf2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8015c7a:	2b20      	cmp	r3, #32
 8015c7c:	f000 80bc 	beq.w	8015df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 8015c80:	e0cf      	b.n	8015e22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	7f1b      	ldrb	r3, [r3, #28]
 8015c86:	061b      	lsls	r3, r3, #24
 8015c88:	4a74      	ldr	r2, [pc, #464]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015c8e:	f043 030a 	orr.w	r3, r3, #10
 8015c92:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	330c      	adds	r3, #12
 8015c98:	4c70      	ldr	r4, [pc, #448]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f7ff fdbc 	bl	8015818 <_ZNK8touchgfx9colortypecvmEv>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015ca4:	4a6d      	ldr	r2, [pc, #436]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	691a      	ldr	r2, [r3, #16]
 8015cae:	4b6b      	ldr	r3, [pc, #428]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cb0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015cb2:	4b6a      	ldr	r3, [pc, #424]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cb4:	4a6a      	ldr	r2, [pc, #424]	; (8015e60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015cb6:	601a      	str	r2, [r3, #0]
        break;
 8015cb8:	e0cc      	b.n	8015e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	7f1b      	ldrb	r3, [r3, #28]
 8015cbe:	061b      	lsls	r3, r3, #24
 8015cc0:	4a66      	ldr	r2, [pc, #408]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015cc6:	f043 0309 	orr.w	r3, r3, #9
 8015cca:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015ccc:	683b      	ldr	r3, [r7, #0]
 8015cce:	330c      	adds	r3, #12
 8015cd0:	4c62      	ldr	r4, [pc, #392]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	f7ff fda0 	bl	8015818 <_ZNK8touchgfx9colortypecvmEv>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015cdc:	4a5f      	ldr	r2, [pc, #380]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cde:	697b      	ldr	r3, [r7, #20]
 8015ce0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	691a      	ldr	r2, [r3, #16]
 8015ce6:	4b5d      	ldr	r3, [pc, #372]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015ce8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015cea:	4b5c      	ldr	r3, [pc, #368]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015cec:	4a5c      	ldr	r2, [pc, #368]	; (8015e60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015cee:	601a      	str	r2, [r3, #0]
        break;
 8015cf0:	e0b0      	b.n	8015e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015cf2:	683b      	ldr	r3, [r7, #0]
 8015cf4:	7f1b      	ldrb	r3, [r3, #28]
 8015cf6:	061b      	lsls	r3, r3, #24
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	69bb      	ldr	r3, [r7, #24]
 8015cfc:	4313      	orrs	r3, r2
 8015cfe:	4a57      	ldr	r2, [pc, #348]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d04:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015d06:	4a55      	ldr	r2, [pc, #340]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d08:	697b      	ldr	r3, [r7, #20]
 8015d0a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	691a      	ldr	r2, [r3, #16]
 8015d10:	4b52      	ldr	r3, [pc, #328]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d12:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015d14:	4b51      	ldr	r3, [pc, #324]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d16:	4a52      	ldr	r2, [pc, #328]	; (8015e60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015d18:	601a      	str	r2, [r3, #0]
        break;
 8015d1a:	e09b      	b.n	8015e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	689b      	ldr	r3, [r3, #8]
 8015d24:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	1d1a      	adds	r2, r3, #4
 8015d2a:	4b4c      	ldr	r3, [pc, #304]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d2c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	7f1b      	ldrb	r3, [r3, #28]
 8015d32:	061b      	lsls	r3, r3, #24
 8015d34:	461a      	mov	r2, r3
 8015d36:	69bb      	ldr	r3, [r7, #24]
 8015d38:	4313      	orrs	r3, r2
 8015d3a:	4a48      	ldr	r2, [pc, #288]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d40:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015d42:	4a46      	ldr	r2, [pc, #280]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	691a      	ldr	r2, [r3, #16]
 8015d4c:	4b43      	ldr	r3, [pc, #268]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d4e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	881b      	ldrh	r3, [r3, #0]
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d002      	beq.n	8015d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8015d5a:	2b01      	cmp	r3, #1
 8015d5c:	d00f      	beq.n	8015d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8015d5e:	e024      	b.n	8015daa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8015d60:	4b3e      	ldr	r3, [pc, #248]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d62:	69db      	ldr	r3, [r3, #28]
 8015d64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015d68:	f023 0310 	bic.w	r3, r3, #16
 8015d6c:	68fa      	ldr	r2, [r7, #12]
 8015d6e:	8852      	ldrh	r2, [r2, #2]
 8015d70:	3a01      	subs	r2, #1
 8015d72:	0212      	lsls	r2, r2, #8
 8015d74:	4611      	mov	r1, r2
 8015d76:	4a39      	ldr	r2, [pc, #228]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d78:	430b      	orrs	r3, r1
 8015d7a:	61d3      	str	r3, [r2, #28]
                break;
 8015d7c:	e01c      	b.n	8015db8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	7f1b      	ldrb	r3, [r3, #28]
 8015d82:	2bff      	cmp	r3, #255	; 0xff
 8015d84:	d101      	bne.n	8015d8a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                  blend = false;
 8015d86:	2300      	movs	r3, #0
 8015d88:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8015d8a:	4b34      	ldr	r3, [pc, #208]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015d8c:	69db      	ldr	r3, [r3, #28]
 8015d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8015d92:	f023 0310 	bic.w	r3, r3, #16
 8015d96:	68fa      	ldr	r2, [r7, #12]
 8015d98:	8852      	ldrh	r2, [r2, #2]
 8015d9a:	3a01      	subs	r2, #1
 8015d9c:	0212      	lsls	r2, r2, #8
 8015d9e:	4313      	orrs	r3, r2
 8015da0:	4a2e      	ldr	r2, [pc, #184]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015da2:	f043 0310 	orr.w	r3, r3, #16
 8015da6:	61d3      	str	r3, [r2, #28]
                break;
 8015da8:	e006      	b.n	8015db8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8015daa:	4b2e      	ldr	r3, [pc, #184]	; (8015e64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8015dac:	4a2e      	ldr	r2, [pc, #184]	; (8015e68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8015dae:	f240 1111 	movw	r1, #273	; 0x111
 8015db2:	482e      	ldr	r0, [pc, #184]	; (8015e6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8015db4:	f018 f84c 	bl	802de50 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8015db8:	4b28      	ldr	r3, [pc, #160]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dba:	69db      	ldr	r3, [r3, #28]
 8015dbc:	4a27      	ldr	r2, [pc, #156]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dbe:	f043 0320 	orr.w	r3, r3, #32
 8015dc2:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8015dc4:	4b25      	ldr	r3, [pc, #148]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dc6:	69db      	ldr	r3, [r3, #28]
 8015dc8:	f003 0320 	and.w	r3, r3, #32
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	bf14      	ite	ne
 8015dd0:	2301      	movne	r3, #1
 8015dd2:	2300      	moveq	r3, #0
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d000      	beq.n	8015ddc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8015dda:	e7f3      	b.n	8015dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8015ddc:	4b1f      	ldr	r3, [pc, #124]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dde:	2210      	movs	r2, #16
 8015de0:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8015de2:	7ffb      	ldrb	r3, [r7, #31]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d003      	beq.n	8015df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015de8:	4b1c      	ldr	r3, [pc, #112]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015dea:	4a1d      	ldr	r2, [pc, #116]	; (8015e60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015dec:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 8015dee:	e031      	b.n	8015e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8015df0:	4b1a      	ldr	r3, [pc, #104]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015df2:	4a1f      	ldr	r2, [pc, #124]	; (8015e70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8015df4:	601a      	str	r2, [r3, #0]
      break;
 8015df6:	e02d      	b.n	8015e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	7f1b      	ldrb	r3, [r3, #28]
 8015dfc:	061b      	lsls	r3, r3, #24
 8015dfe:	461a      	mov	r2, r3
 8015e00:	69bb      	ldr	r3, [r7, #24]
 8015e02:	4313      	orrs	r3, r2
 8015e04:	4a15      	ldr	r2, [pc, #84]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e0a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015e0c:	4a13      	ldr	r2, [pc, #76]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	691a      	ldr	r2, [r3, #16]
 8015e16:	4b11      	ldr	r3, [pc, #68]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e18:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8015e1a:	4b10      	ldr	r3, [pc, #64]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e1c:	4a10      	ldr	r2, [pc, #64]	; (8015e60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8015e1e:	601a      	str	r2, [r3, #0]
        break;
 8015e20:	e018      	b.n	8015e54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	7f1b      	ldrb	r3, [r3, #28]
 8015e26:	061b      	lsls	r3, r3, #24
 8015e28:	461a      	mov	r2, r3
 8015e2a:	69bb      	ldr	r3, [r7, #24]
 8015e2c:	4313      	orrs	r3, r2
 8015e2e:	4a0b      	ldr	r2, [pc, #44]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e34:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8015e36:	683b      	ldr	r3, [r7, #0]
 8015e38:	7f5a      	ldrb	r2, [r3, #29]
 8015e3a:	683b      	ldr	r3, [r7, #0]
 8015e3c:	7f9b      	ldrb	r3, [r3, #30]
 8015e3e:	429a      	cmp	r2, r3
 8015e40:	d003      	beq.n	8015e4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8015e42:	4b06      	ldr	r3, [pc, #24]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e44:	4a0a      	ldr	r2, [pc, #40]	; (8015e70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8015e46:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8015e48:	e003      	b.n	8015e52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8015e4a:	4b04      	ldr	r3, [pc, #16]	; (8015e5c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8015e4c:	f240 2201 	movw	r2, #513	; 0x201
 8015e50:	601a      	str	r2, [r3, #0]
        break;
 8015e52:	bf00      	nop
    }
}
 8015e54:	bf00      	nop
 8015e56:	3724      	adds	r7, #36	; 0x24
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd90      	pop	{r4, r7, pc}
 8015e5c:	4002b000 	.word	0x4002b000
 8015e60:	00020201 	.word	0x00020201
 8015e64:	0802fb80 	.word	0x0802fb80
 8015e68:	0802fb9c 	.word	0x0802fb9c
 8015e6c:	0802fb08 	.word	0x0802fb08
 8015e70:	00010201 	.word	0x00010201

08015e74 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8015e74:	b590      	push	{r4, r7, lr}
 8015e76:	b085      	sub	sp, #20
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
 8015e7c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	7f9b      	ldrb	r3, [r3, #30]
 8015e82:	4619      	mov	r1, r3
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f7ff fe4b 	bl	8015b20 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8015e8a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8015e8c:	4a3b      	ldr	r2, [pc, #236]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	8adb      	ldrh	r3, [r3, #22]
 8015e96:	461a      	mov	r2, r3
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	8a9b      	ldrh	r3, [r3, #20]
 8015e9c:	041b      	lsls	r3, r3, #16
 8015e9e:	431a      	orrs	r2, r3
 8015ea0:	4b36      	ldr	r3, [pc, #216]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	691a      	ldr	r2, [r3, #16]
 8015ea8:	4b34      	ldr	r3, [pc, #208]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015eaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	8b5b      	ldrh	r3, [r3, #26]
 8015eb0:	461a      	mov	r2, r3
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	8a9b      	ldrh	r3, [r3, #20]
 8015eb6:	1ad2      	subs	r2, r2, r3
 8015eb8:	4b30      	ldr	r3, [pc, #192]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015eba:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	2b08      	cmp	r3, #8
 8015ec2:	d12f      	bne.n	8015f24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	8b5b      	ldrh	r3, [r3, #26]
 8015ec8:	461a      	mov	r2, r3
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	8a9b      	ldrh	r3, [r3, #20]
 8015ece:	1ad2      	subs	r2, r2, r3
 8015ed0:	4b2a      	ldr	r3, [pc, #168]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015ed2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	8b5b      	ldrh	r3, [r3, #26]
 8015ed8:	461a      	mov	r2, r3
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	8a9b      	ldrh	r3, [r3, #20]
 8015ede:	1ad2      	subs	r2, r2, r3
 8015ee0:	4b26      	ldr	r3, [pc, #152]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015ee2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015ee4:	4a25      	ldr	r2, [pc, #148]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	7f1b      	ldrb	r3, [r3, #28]
 8015eee:	061b      	lsls	r3, r3, #24
 8015ef0:	4a22      	ldr	r2, [pc, #136]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015ef6:	f043 0309 	orr.w	r3, r3, #9
 8015efa:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	330c      	adds	r3, #12
 8015f00:	4c1e      	ldr	r4, [pc, #120]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7ff fc88 	bl	8015818 <_ZNK8touchgfx9colortypecvmEv>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	691a      	ldr	r2, [r3, #16]
 8015f10:	4b1a      	ldr	r3, [pc, #104]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f12:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8015f14:	683b      	ldr	r3, [r7, #0]
 8015f16:	691a      	ldr	r2, [r3, #16]
 8015f18:	4b18      	ldr	r3, [pc, #96]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f1a:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8015f1c:	4b17      	ldr	r3, [pc, #92]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f1e:	4a18      	ldr	r2, [pc, #96]	; (8015f80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8015f20:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8015f22:	e027      	b.n	8015f74 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8015f24:	4a15      	ldr	r2, [pc, #84]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8015f2a:	4b14      	ldr	r3, [pc, #80]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	330c      	adds	r3, #12
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7ff fc6f 	bl	8015818 <_ZNK8touchgfx9colortypecvmEv>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	0a1b      	lsrs	r3, r3, #8
 8015f3e:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	330c      	adds	r3, #12
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7ff fc66 	bl	8015818 <_ZNK8touchgfx9colortypecvmEv>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	095b      	lsrs	r3, r3, #5
 8015f50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015f54:	431c      	orrs	r4, r3
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	330c      	adds	r3, #12
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7ff fc5c 	bl	8015818 <_ZNK8touchgfx9colortypecvmEv>
 8015f60:	4603      	mov	r3, r0
 8015f62:	08db      	lsrs	r3, r3, #3
 8015f64:	f003 031f 	and.w	r3, r3, #31
 8015f68:	4a04      	ldr	r2, [pc, #16]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f6a:	4323      	orrs	r3, r4
 8015f6c:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8015f6e:	4b03      	ldr	r3, [pc, #12]	; (8015f7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8015f70:	4a04      	ldr	r2, [pc, #16]	; (8015f84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8015f72:	601a      	str	r2, [r3, #0]
}
 8015f74:	bf00      	nop
 8015f76:	3714      	adds	r7, #20
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd90      	pop	{r4, r7, pc}
 8015f7c:	4002b000 	.word	0x4002b000
 8015f80:	00020201 	.word	0x00020201
 8015f84:	00030201 	.word	0x00030201

08015f88 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
 8015f90:	4a05      	ldr	r2, [pc, #20]	; (8015fa8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	601a      	str	r2, [r3, #0]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7ff fc49 	bl	8015830 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	080312fc 	.word	0x080312fc

08015fac <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f7ff ffe7 	bl	8015f88 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8015fba:	2114      	movs	r1, #20
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f017 f928 	bl	802d212 <_ZdlPvj>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3708      	adds	r7, #8
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}

08015fcc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8015fcc:	b480      	push	{r7}
 8015fce:	b083      	sub	sp, #12
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
        texts = t;
 8015fd4:	4a04      	ldr	r2, [pc, #16]	; (8015fe8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6013      	str	r3, [r2, #0]
    }
 8015fda:	bf00      	nop
 8015fdc:	370c      	adds	r7, #12
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe4:	4770      	bx	lr
 8015fe6:	bf00      	nop
 8015fe8:	20009804 	.word	0x20009804

08015fec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8015fec:	b480      	push	{r7}
 8015fee:	b085      	sub	sp, #20
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	60f8      	str	r0, [r7, #12]
 8015ff4:	60b9      	str	r1, [r7, #8]
 8015ff6:	607a      	str	r2, [r7, #4]
 8015ff8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8015ffa:	4a0b      	ldr	r2, [pc, #44]	; (8016028 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	601a      	str	r2, [r3, #0]
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	68ba      	ldr	r2, [r7, #8]
 8016004:	605a      	str	r2, [r3, #4]
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	687a      	ldr	r2, [r7, #4]
 801600a:	609a      	str	r2, [r3, #8]
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	683a      	ldr	r2, [r7, #0]
 8016010:	60da      	str	r2, [r3, #12]
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	69ba      	ldr	r2, [r7, #24]
 8016016:	611a      	str	r2, [r3, #16]
    {
    }
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	4618      	mov	r0, r3
 801601c:	3714      	adds	r7, #20
 801601e:	46bd      	mov	sp, r7
 8016020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016024:	4770      	bx	lr
 8016026:	bf00      	nop
 8016028:	080304ec 	.word	0x080304ec

0801602c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 801602c:	b480      	push	{r7}
 801602e:	b083      	sub	sp, #12
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
    {
 8016034:	4a04      	ldr	r2, [pc, #16]	; (8016048 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	601a      	str	r2, [r3, #0]
    }
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	4618      	mov	r0, r3
 801603e:	370c      	adds	r7, #12
 8016040:	46bd      	mov	sp, r7
 8016042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016046:	4770      	bx	lr
 8016048:	080304ec 	.word	0x080304ec

0801604c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
    }
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f7ff ffe9 	bl	801602c <_ZN8touchgfx7MVPHeapD1Ev>
 801605a:	2114      	movs	r1, #20
 801605c:	6878      	ldr	r0, [r7, #4]
 801605e:	f017 f8d8 	bl	802d212 <_ZdlPvj>
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	4618      	mov	r0, r3
 8016066:	3708      	adds	r7, #8
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}

0801606c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801606c:	b480      	push	{r7}
 801606e:	b083      	sub	sp, #12
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
    {
 8016074:	4a04      	ldr	r2, [pc, #16]	; (8016088 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	601a      	str	r2, [r3, #0]
    }
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	4618      	mov	r0, r3
 801607e:	370c      	adds	r7, #12
 8016080:	46bd      	mov	sp, r7
 8016082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016086:	4770      	bx	lr
 8016088:	08031b80 	.word	0x08031b80

0801608c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801608c:	b580      	push	{r7, lr}
 801608e:	b082      	sub	sp, #8
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
    }
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f7ff ffe9 	bl	801606c <_ZN8touchgfx3LCDD1Ev>
 801609a:	2108      	movs	r1, #8
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f017 f8b8 	bl	802d212 <_ZdlPvj>
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	4618      	mov	r0, r3
 80160a6:	3708      	adds	r7, #8
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}

080160ac <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80160ac:	b480      	push	{r7}
 80160ae:	b083      	sub	sp, #12
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2200      	movs	r2, #0
 80160b8:	801a      	strh	r2, [r3, #0]
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	2200      	movs	r2, #0
 80160be:	805a      	strh	r2, [r3, #2]
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2200      	movs	r2, #0
 80160c4:	809a      	strh	r2, [r3, #4]
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2200      	movs	r2, #0
 80160ca:	80da      	strh	r2, [r3, #6]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	2200      	movs	r2, #0
 80160d0:	811a      	strh	r2, [r3, #8]
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	2200      	movs	r2, #0
 80160d6:	815a      	strh	r2, [r3, #10]
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	2200      	movs	r2, #0
 80160dc:	819a      	strh	r2, [r3, #12]
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	2200      	movs	r2, #0
 80160e2:	739a      	strb	r2, [r3, #14]
        {
        }
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	4618      	mov	r0, r3
 80160e8:	370c      	adds	r7, #12
 80160ea:	46bd      	mov	sp, r7
 80160ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f0:	4770      	bx	lr

080160f2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80160f2:	b580      	push	{r7, lr}
 80160f4:	b082      	sub	sp, #8
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7ff ffd5 	bl	80160ac <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2200      	movs	r2, #0
 8016106:	611a      	str	r2, [r3, #16]
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2200      	movs	r2, #0
 801610c:	829a      	strh	r2, [r3, #20]
    {
    }
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	4618      	mov	r0, r3
 8016112:	3708      	adds	r7, #8
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}

08016118 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8016118:	b580      	push	{r7, lr}
 801611a:	b084      	sub	sp, #16
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
 8016124:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8016126:	4a55      	ldr	r2, [pc, #340]	; (801627c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	601a      	str	r2, [r3, #0]
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	68ba      	ldr	r2, [r7, #8]
 8016130:	605a      	str	r2, [r3, #4]
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	687a      	ldr	r2, [r7, #4]
 8016136:	609a      	str	r2, [r3, #8]
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	683a      	ldr	r2, [r7, #0]
 801613c:	60da      	str	r2, [r3, #12]
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2200      	movs	r2, #0
 8016142:	611a      	str	r2, [r3, #16]
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2200      	movs	r2, #0
 8016148:	615a      	str	r2, [r3, #20]
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	2200      	movs	r2, #0
 801614e:	619a      	str	r2, [r3, #24]
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	331c      	adds	r3, #28
 8016154:	4618      	mov	r0, r3
 8016156:	f7ff ffcc 	bl	80160f2 <_ZN8touchgfx8GesturesC1Ev>
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	2200      	movs	r2, #0
 801615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	2200      	movs	r2, #0
 8016166:	639a      	str	r2, [r3, #56]	; 0x38
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	2200      	movs	r2, #0
 801616c:	63da      	str	r2, [r3, #60]	; 0x3c
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	2200      	movs	r2, #0
 8016172:	641a      	str	r2, [r3, #64]	; 0x40
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	2200      	movs	r2, #0
 8016178:	645a      	str	r2, [r3, #68]	; 0x44
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	2200      	movs	r2, #0
 801617e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	2201      	movs	r2, #1
 8016186:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	2200      	movs	r2, #0
 801618e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2200      	movs	r2, #0
 8016196:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	2200      	movs	r2, #0
 801619e:	64da      	str	r2, [r3, #76]	; 0x4c
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	3350      	adds	r3, #80	; 0x50
 80161a4:	4618      	mov	r0, r3
 80161a6:	f7fa fb34 	bl	8010812 <_ZN8touchgfx4RectC1Ev>
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	2200      	movs	r2, #0
 80161ae:	659a      	str	r2, [r3, #88]	; 0x58
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	2200      	movs	r2, #0
 80161b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	2200      	movs	r2, #0
 80161ba:	661a      	str	r2, [r3, #96]	; 0x60
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	2201      	movs	r2, #1
 80161c0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2200      	movs	r2, #0
 80161c8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	2200      	movs	r2, #0
 80161d0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	2201      	movs	r2, #1
 80161d8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2200      	movs	r2, #0
 80161e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	2200      	movs	r2, #0
 80161e8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	2200      	movs	r2, #0
 80161f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2200      	movs	r2, #0
 80161f8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	2200      	movs	r2, #0
 8016200:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	2200      	movs	r2, #0
 8016208:	671a      	str	r2, [r3, #112]	; 0x70
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	2200      	movs	r2, #0
 801620e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	2200      	movs	r2, #0
 8016216:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	2200      	movs	r2, #0
 801621e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	2201      	movs	r2, #1
 8016226:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	2201      	movs	r2, #1
 801622e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8016232:	4a13      	ldr	r2, [pc, #76]	; (8016280 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8016238:	4a12      	ldr	r2, [pc, #72]	; (8016284 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801623a:	8b3b      	ldrh	r3, [r7, #24]
 801623c:	8013      	strh	r3, [r2, #0]
 801623e:	4b11      	ldr	r3, [pc, #68]	; (8016284 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8016240:	881a      	ldrh	r2, [r3, #0]
 8016242:	4b11      	ldr	r3, [pc, #68]	; (8016288 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8016244:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8016246:	4a11      	ldr	r2, [pc, #68]	; (801628c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8016248:	8bbb      	ldrh	r3, [r7, #28]
 801624a:	8013      	strh	r3, [r2, #0]
 801624c:	4b0f      	ldr	r3, [pc, #60]	; (801628c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801624e:	881a      	ldrh	r2, [r3, #0]
 8016250:	4b0f      	ldr	r3, [pc, #60]	; (8016290 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8016252:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8016254:	4b0f      	ldr	r3, [pc, #60]	; (8016294 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8016256:	2200      	movs	r2, #0
 8016258:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801625a:	8b3a      	ldrh	r2, [r7, #24]
 801625c:	8bbb      	ldrh	r3, [r7, #28]
 801625e:	429a      	cmp	r2, r3
 8016260:	bf34      	ite	cc
 8016262:	2301      	movcc	r3, #1
 8016264:	2300      	movcs	r3, #0
 8016266:	b2db      	uxtb	r3, r3
 8016268:	461a      	mov	r2, r3
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	4618      	mov	r0, r3
 8016274:	3710      	adds	r7, #16
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	08030d54 	.word	0x08030d54
 8016280:	200097a8 	.word	0x200097a8
 8016284:	2000979c 	.word	0x2000979c
 8016288:	200097a2 	.word	0x200097a2
 801628c:	2000979e 	.word	0x2000979e
 8016290:	200097a4 	.word	0x200097a4
 8016294:	200097a0 	.word	0x200097a0

08016298 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7fa f813 	bl	80102d0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 80162aa:	bf00      	nop
 80162ac:	3708      	adds	r7, #8
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}
	...

080162b4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b086      	sub	sp, #24
 80162b8:	af02      	add	r7, sp, #8
 80162ba:	60f8      	str	r0, [r7, #12]
 80162bc:	60b9      	str	r1, [r7, #8]
 80162be:	607a      	str	r2, [r7, #4]
 80162c0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80162c2:	68f8      	ldr	r0, [r7, #12]
 80162c4:	69bb      	ldr	r3, [r7, #24]
 80162c6:	9300      	str	r3, [sp, #0]
 80162c8:	683b      	ldr	r3, [r7, #0]
 80162ca:	687a      	ldr	r2, [r7, #4]
 80162cc:	68b9      	ldr	r1, [r7, #8]
 80162ce:	f7ff fe8d 	bl	8015fec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80162d2:	4a04      	ldr	r2, [pc, #16]	; (80162e4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	601a      	str	r2, [r3, #0]
    {

    }
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	4618      	mov	r0, r3
 80162dc:	3710      	adds	r7, #16
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	bf00      	nop
 80162e4:	080304d8 	.word	0x080304d8

080162e8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80162e8:	b580      	push	{r7, lr}
 80162ea:	af00      	add	r7, sp, #0
 80162ec:	4801      	ldr	r0, [pc, #4]	; (80162f4 <__tcf_0+0xc>)
 80162ee:	f000 f95f 	bl	80165b0 <_ZN12FrontendHeapD1Ev>
 80162f2:	bd80      	pop	{r7, pc}
 80162f4:	20007b48 	.word	0x20007b48

080162f8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80162f8:	b580      	push	{r7, lr}
 80162fa:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80162fc:	4b12      	ldr	r3, [pc, #72]	; (8016348 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80162fe:	781b      	ldrb	r3, [r3, #0]
 8016300:	f3bf 8f5b 	dmb	ish
 8016304:	b2db      	uxtb	r3, r3
 8016306:	f003 0301 	and.w	r3, r3, #1
 801630a:	2b00      	cmp	r3, #0
 801630c:	bf0c      	ite	eq
 801630e:	2301      	moveq	r3, #1
 8016310:	2300      	movne	r3, #0
 8016312:	b2db      	uxtb	r3, r3
 8016314:	2b00      	cmp	r3, #0
 8016316:	d013      	beq.n	8016340 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8016318:	480b      	ldr	r0, [pc, #44]	; (8016348 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801631a:	f016 ff7c 	bl	802d216 <__cxa_guard_acquire>
 801631e:	4603      	mov	r3, r0
 8016320:	2b00      	cmp	r3, #0
 8016322:	bf14      	ite	ne
 8016324:	2301      	movne	r3, #1
 8016326:	2300      	moveq	r3, #0
 8016328:	b2db      	uxtb	r3, r3
 801632a:	2b00      	cmp	r3, #0
 801632c:	d008      	beq.n	8016340 <_ZN12FrontendHeap11getInstanceEv+0x48>
 801632e:	4807      	ldr	r0, [pc, #28]	; (801634c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8016330:	f000 f868 	bl	8016404 <_ZN12FrontendHeapC1Ev>
 8016334:	4804      	ldr	r0, [pc, #16]	; (8016348 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8016336:	f016 ff7a 	bl	802d22e <__cxa_guard_release>
 801633a:	4805      	ldr	r0, [pc, #20]	; (8016350 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 801633c:	f017 fda6 	bl	802de8c <atexit>
        return instance;
 8016340:	4b02      	ldr	r3, [pc, #8]	; (801634c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8016342:	4618      	mov	r0, r3
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	20008a78 	.word	0x20008a78
 801634c:	20007b48 	.word	0x20007b48
 8016350:	080162e9 	.word	0x080162e9

08016354 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8016354:	b580      	push	{r7, lr}
 8016356:	b082      	sub	sp, #8
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	4a05      	ldr	r2, [pc, #20]	; (8016374 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	601a      	str	r2, [r3, #0]
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	4618      	mov	r0, r3
 8016366:	f7ff fe61 	bl	801602c <_ZN8touchgfx7MVPHeapD1Ev>
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	4618      	mov	r0, r3
 801636e:	3708      	adds	r7, #8
 8016370:	46bd      	mov	sp, r7
 8016372:	bd80      	pop	{r7, pc}
 8016374:	080304d8 	.word	0x080304d8

08016378 <_ZN16FrontendHeapBaseD0Ev>:
 8016378:	b580      	push	{r7, lr}
 801637a:	b082      	sub	sp, #8
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f7ff ffe7 	bl	8016354 <_ZN16FrontendHeapBaseD1Ev>
 8016386:	2114      	movs	r1, #20
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f016 ff42 	bl	802d212 <_ZdlPvj>
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	4618      	mov	r0, r3
 8016392:	3708      	adds	r7, #8
 8016394:	46bd      	mov	sp, r7
 8016396:	bd80      	pop	{r7, pc}

08016398 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8016398:	b580      	push	{r7, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	af00      	add	r7, sp, #0
 801639e:	6078      	str	r0, [r7, #4]
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	4618      	mov	r0, r3
 80163a4:	f000 fd04 	bl	8016db0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80163a8:	4a03      	ldr	r2, [pc, #12]	; (80163b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	601a      	str	r2, [r3, #0]
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	4618      	mov	r0, r3
 80163b2:	3708      	adds	r7, #8
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}
 80163b8:	080304a4 	.word	0x080304a4

080163bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80163bc:	b580      	push	{r7, lr}
 80163be:	b082      	sub	sp, #8
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	4618      	mov	r0, r3
 80163c8:	f000 fcf2 	bl	8016db0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80163cc:	4a03      	ldr	r2, [pc, #12]	; (80163dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	601a      	str	r2, [r3, #0]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	4618      	mov	r0, r3
 80163d6:	3708      	adds	r7, #8
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}
 80163dc:	08030470 	.word	0x08030470

080163e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	4618      	mov	r0, r3
 80163ec:	f000 fce0 	bl	8016db0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80163f0:	4a03      	ldr	r2, [pc, #12]	; (8016400 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	601a      	str	r2, [r3, #0]
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	4618      	mov	r0, r3
 80163fa:	3708      	adds	r7, #8
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	0803043c 	.word	0x0803043c

08016404 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016404:	b590      	push	{r4, r7, lr}
 8016406:	b085      	sub	sp, #20
 8016408:	af02      	add	r7, sp, #8
 801640a:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 801640c:	6878      	ldr	r0, [r7, #4]
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	f103 0114 	add.w	r1, r3, #20
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f503 645c 	add.w	r4, r3, #3520	; 0xdc0
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
                     app(model, *this)
 8016426:	9300      	str	r3, [sp, #0]
 8016428:	4623      	mov	r3, r4
 801642a:	f7ff ff43 	bl	80162b4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801642e:	4a18      	ldr	r2, [pc, #96]	; (8016490 <_ZN12FrontendHeapC1Ev+0x8c>)
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	601a      	str	r2, [r3, #0]
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	3314      	adds	r3, #20
 8016438:	4618      	mov	r0, r3
 801643a:	f7ff ffad 	bl	8016398 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	332c      	adds	r3, #44	; 0x2c
 8016442:	4618      	mov	r0, r3
 8016444:	f7ff ffba 	bl	80163bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 801644e:	4618      	mov	r0, r3
 8016450:	f7ff ffc6 	bl	80163e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f603 50d4 	addw	r0, r3, #3540	; 0xdd4
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f603 732c 	addw	r3, r3, #3884	; 0xf2c
 8016460:	687a      	ldr	r2, [r7, #4]
 8016462:	4619      	mov	r1, r3
 8016464:	f7fe f8ac 	bl	80145c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	f603 732c 	addw	r3, r3, #3884	; 0xf2c
 801646e:	4618      	mov	r0, r3
 8016470:	f7fe f8bc 	bl	80145ec <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8016474:	687a      	ldr	r2, [r7, #4]
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 801647c:	4619      	mov	r1, r3
 801647e:	4610      	mov	r0, r2
 8016480:	f7ff ff0a 	bl	8016298 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	4618      	mov	r0, r3
 8016488:	370c      	adds	r7, #12
 801648a:	46bd      	mov	sp, r7
 801648c:	bd90      	pop	{r4, r7, pc}
 801648e:	bf00      	nop
 8016490:	08030428 	.word	0x08030428

08016494 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8016494:	b580      	push	{r7, lr}
 8016496:	b086      	sub	sp, #24
 8016498:	af02      	add	r7, sp, #8
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
 80164a0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80164a2:	68f8      	ldr	r0, [r7, #12]
 80164a4:	8bbb      	ldrh	r3, [r7, #28]
 80164a6:	9301      	str	r3, [sp, #4]
 80164a8:	8b3b      	ldrh	r3, [r7, #24]
 80164aa:	9300      	str	r3, [sp, #0]
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	687a      	ldr	r2, [r7, #4]
 80164b0:	68b9      	ldr	r1, [r7, #8]
 80164b2:	f7ff fe31 	bl	8016118 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80164b6:	4a04      	ldr	r2, [pc, #16]	; (80164c8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	601a      	str	r2, [r3, #0]
    }
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	4618      	mov	r0, r3
 80164c0:	3710      	adds	r7, #16
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	080304fc 	.word	0x080304fc

080164cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b086      	sub	sp, #24
 80164d0:	af02      	add	r7, sp, #8
 80164d2:	60f8      	str	r0, [r7, #12]
 80164d4:	60b9      	str	r1, [r7, #8]
 80164d6:	607a      	str	r2, [r7, #4]
 80164d8:	603b      	str	r3, [r7, #0]
 80164da:	68f8      	ldr	r0, [r7, #12]
 80164dc:	8bbb      	ldrh	r3, [r7, #28]
 80164de:	9301      	str	r3, [sp, #4]
 80164e0:	8b3b      	ldrh	r3, [r7, #24]
 80164e2:	9300      	str	r3, [sp, #0]
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	68b9      	ldr	r1, [r7, #8]
 80164ea:	f7ff ffd3 	bl	8016494 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80164ee:	4a04      	ldr	r2, [pc, #16]	; (8016500 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	601a      	str	r2, [r3, #0]
    }
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	4618      	mov	r0, r3
 80164f8:	3710      	adds	r7, #16
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	080302e4 	.word	0x080302e4

08016504 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8016504:	b480      	push	{r7}
 8016506:	b083      	sub	sp, #12
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
 801650c:	4a04      	ldr	r2, [pc, #16]	; (8016520 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	601a      	str	r2, [r3, #0]
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	4618      	mov	r0, r3
 8016516:	370c      	adds	r7, #12
 8016518:	46bd      	mov	sp, r7
 801651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651e:	4770      	bx	lr
 8016520:	080302cc 	.word	0x080302cc

08016524 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8016524:	b580      	push	{r7, lr}
 8016526:	b082      	sub	sp, #8
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	4618      	mov	r0, r3
 8016530:	f7ff ffe8 	bl	8016504 <_ZN8touchgfx15TouchControllerC1Ev>
 8016534:	4a03      	ldr	r2, [pc, #12]	; (8016544 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	601a      	str	r2, [r3, #0]
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	4618      	mov	r0, r3
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}
 8016544:	080302b4 	.word	0x080302b4

08016548 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 1024, 600);

void touchgfx_init()
{
 8016548:	b590      	push	{r4, r7, lr}
 801654a:	b085      	sub	sp, #20
 801654c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801654e:	f7fd fe0b 	bl	8014168 <_ZN14BitmapDatabase11getInstanceEv>
 8016552:	4604      	mov	r4, r0
 8016554:	f7fd fe12 	bl	801417c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8016558:	4603      	mov	r3, r0
 801655a:	4619      	mov	r1, r3
 801655c:	2300      	movs	r3, #0
 801655e:	9300      	str	r3, [sp, #0]
 8016560:	2300      	movs	r3, #0
 8016562:	2200      	movs	r2, #0
 8016564:	4620      	mov	r0, r4
 8016566:	f009 f947 	bl	801f7f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801656a:	4809      	ldr	r0, [pc, #36]	; (8016590 <touchgfx_init+0x48>)
 801656c:	f7ff fd2e 	bl	8015fcc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8016570:	2000      	movs	r0, #0
 8016572:	f7fd ff47 	bl	8014404 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8016576:	4807      	ldr	r0, [pc, #28]	; (8016594 <touchgfx_init+0x4c>)
 8016578:	f009 f880 	bl	801f67c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 801657c:	f7ff febc 	bl	80162f8 <_ZN12FrontendHeap11getInstanceEv>
 8016580:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8016582:	4805      	ldr	r0, [pc, #20]	; (8016598 <touchgfx_init+0x50>)
 8016584:	f7fe ffd0 	bl	8015528 <_ZN11TouchGFXHAL10initializeEv>
}
 8016588:	bf00      	nop
 801658a:	370c      	adds	r7, #12
 801658c:	46bd      	mov	sp, r7
 801658e:	bd90      	pop	{r4, r7, pc}
 8016590:	20009718 	.word	0x20009718
 8016594:	2000001c 	.word	0x2000001c
 8016598:	2000971c 	.word	0x2000971c

0801659c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 801659c:	b580      	push	{r7, lr}
 801659e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80165a0:	4802      	ldr	r0, [pc, #8]	; (80165ac <touchgfx_taskEntry+0x10>)
 80165a2:	f001 f8e0 	bl	8017766 <_ZN8touchgfx3HAL9taskEntryEv>
}
 80165a6:	bf00      	nop
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	2000971c 	.word	0x2000971c

080165b0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	4a10      	ldr	r2, [pc, #64]	; (80165fc <_ZN12FrontendHeapD1Ev+0x4c>)
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	601a      	str	r2, [r3, #0]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
 80165c4:	4618      	mov	r0, r3
 80165c6:	f7fd ffc5 	bl	8014554 <_ZN19FrontendApplicationD1Ev>
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f503 635c 	add.w	r3, r3, #3520	; 0xdc0
 80165d0:	4618      	mov	r0, r3
 80165d2:	f000 f827 	bl	8016624 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	332c      	adds	r3, #44	; 0x2c
 80165da:	4618      	mov	r0, r3
 80165dc:	f000 f844 	bl	8016668 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	3314      	adds	r3, #20
 80165e4:	4618      	mov	r0, r3
 80165e6:	f000 f863 	bl	80166b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7ff feb1 	bl	8016354 <_ZN16FrontendHeapBaseD1Ev>
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	4618      	mov	r0, r3
 80165f6:	3708      	adds	r7, #8
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	08030428 	.word	0x08030428

08016600 <_ZN12FrontendHeapD0Ev>:
 8016600:	b580      	push	{r7, lr}
 8016602:	b082      	sub	sp, #8
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f7ff ffd1 	bl	80165b0 <_ZN12FrontendHeapD1Ev>
 801660e:	f44f 6173 	mov.w	r1, #3888	; 0xf30
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f016 fdfd 	bl	802d212 <_ZdlPvj>
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	4618      	mov	r0, r3
 801661c:	3708      	adds	r7, #8
 801661e:	46bd      	mov	sp, r7
 8016620:	bd80      	pop	{r7, pc}
	...

08016624 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	4a05      	ldr	r2, [pc, #20]	; (8016644 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	601a      	str	r2, [r3, #0]
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	4618      	mov	r0, r3
 8016636:	f000 fbb9 	bl	8016dac <_ZN8touchgfx17AbstractPartitionD1Ev>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	4618      	mov	r0, r3
 801663e:	3708      	adds	r7, #8
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}
 8016644:	0803043c 	.word	0x0803043c

08016648 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	f7ff ffe7 	bl	8016624 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8016656:	2114      	movs	r1, #20
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	f016 fdda 	bl	802d212 <_ZdlPvj>
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	4618      	mov	r0, r3
 8016662:	3708      	adds	r7, #8
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}

08016668 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	4a05      	ldr	r2, [pc, #20]	; (8016688 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	601a      	str	r2, [r3, #0]
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	4618      	mov	r0, r3
 801667a:	f000 fb97 	bl	8016dac <_ZN8touchgfx17AbstractPartitionD1Ev>
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	4618      	mov	r0, r3
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	08030470 	.word	0x08030470

0801668c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801668c:	b580      	push	{r7, lr}
 801668e:	b082      	sub	sp, #8
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f7ff ffe7 	bl	8016668 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801669a:	f640 5194 	movw	r1, #3476	; 0xd94
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f016 fdb7 	bl	802d212 <_ZdlPvj>
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	4618      	mov	r0, r3
 80166a8:	3708      	adds	r7, #8
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd80      	pop	{r7, pc}
	...

080166b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	4a05      	ldr	r2, [pc, #20]	; (80166d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	601a      	str	r2, [r3, #0]
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	4618      	mov	r0, r3
 80166c2:	f000 fb73 	bl	8016dac <_ZN8touchgfx17AbstractPartitionD1Ev>
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	4618      	mov	r0, r3
 80166ca:	3708      	adds	r7, #8
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}
 80166d0:	080304a4 	.word	0x080304a4

080166d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f7ff ffe7 	bl	80166b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80166e2:	2118      	movs	r1, #24
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f016 fd94 	bl	802d212 <_ZdlPvj>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	4618      	mov	r0, r3
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}

080166f4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b082      	sub	sp, #8
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
 80166fc:	4a05      	ldr	r2, [pc, #20]	; (8016714 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	601a      	str	r2, [r3, #0]
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	4618      	mov	r0, r3
 8016706:	f7ff fcb1 	bl	801606c <_ZN8touchgfx3LCDD1Ev>
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	4618      	mov	r0, r3
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}
 8016714:	08032e60 	.word	0x08032e60

08016718 <_ZN8touchgfx8LCD16bppD0Ev>:
 8016718:	b580      	push	{r7, lr}
 801671a:	b082      	sub	sp, #8
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f7ff ffe7 	bl	80166f4 <_ZN8touchgfx8LCD16bppD1Ev>
 8016726:	2178      	movs	r1, #120	; 0x78
 8016728:	6878      	ldr	r0, [r7, #4]
 801672a:	f016 fd72 	bl	802d212 <_ZdlPvj>
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	4618      	mov	r0, r3
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <_Z41__static_initialization_and_destruction_0ii>:
 8016738:	b580      	push	{r7, lr}
 801673a:	b084      	sub	sp, #16
 801673c:	af02      	add	r7, sp, #8
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	6039      	str	r1, [r7, #0]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2b01      	cmp	r3, #1
 8016746:	d119      	bne.n	801677c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801674e:	4293      	cmp	r3, r2
 8016750:	d114      	bne.n	801677c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8016752:	4818      	ldr	r0, [pc, #96]	; (80167b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016754:	f7ff fee6 	bl	8016524 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8016758:	4817      	ldr	r0, [pc, #92]	; (80167b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801675a:	f7ff f919 	bl	8015990 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801675e:	4817      	ldr	r0, [pc, #92]	; (80167bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016760:	f00c f910 	bl	8022984 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 1024, 600);
 8016764:	f44f 7316 	mov.w	r3, #600	; 0x258
 8016768:	9301      	str	r3, [sp, #4]
 801676a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801676e:	9300      	str	r3, [sp, #0]
 8016770:	4b10      	ldr	r3, [pc, #64]	; (80167b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8016772:	4a12      	ldr	r2, [pc, #72]	; (80167bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8016774:	4910      	ldr	r1, [pc, #64]	; (80167b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8016776:	4812      	ldr	r0, [pc, #72]	; (80167c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8016778:	f7ff fea8 	bl	80164cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d113      	bne.n	80167aa <_Z41__static_initialization_and_destruction_0ii+0x72>
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016788:	4293      	cmp	r3, r2
 801678a:	d10e      	bne.n	80167aa <_Z41__static_initialization_and_destruction_0ii+0x72>
 801678c:	480c      	ldr	r0, [pc, #48]	; (80167c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801678e:	f7fe ff43 	bl	8015618 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8016792:	480c      	ldr	r0, [pc, #48]	; (80167c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8016794:	f7f9 f88e 	bl	800f8b4 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8016798:	4808      	ldr	r0, [pc, #32]	; (80167bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801679a:	f7ff ffab 	bl	80166f4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 801679e:	4806      	ldr	r0, [pc, #24]	; (80167b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80167a0:	f7ff f920 	bl	80159e4 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80167a4:	4803      	ldr	r0, [pc, #12]	; (80167b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80167a6:	f7fe fce3 	bl	8015170 <_ZN20STM32TouchControllerD1Ev>
}
 80167aa:	bf00      	nop
 80167ac:	3708      	adds	r7, #8
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop
 80167b4:	20008a7c 	.word	0x20008a7c
 80167b8:	20008a80 	.word	0x20008a80
 80167bc:	200096a0 	.word	0x200096a0
 80167c0:	2000971c 	.word	0x2000971c
 80167c4:	2000001c 	.word	0x2000001c

080167c8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80167c8:	b480      	push	{r7}
 80167ca:	b083      	sub	sp, #12
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80167d0:	2301      	movs	r3, #1
    }
 80167d2:	4618      	mov	r0, r3
 80167d4:	370c      	adds	r7, #12
 80167d6:	46bd      	mov	sp, r7
 80167d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167dc:	4770      	bx	lr

080167de <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80167de:	b480      	push	{r7}
 80167e0:	b083      	sub	sp, #12
 80167e2:	af00      	add	r7, sp, #0
 80167e4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80167e6:	230c      	movs	r3, #12
    }
 80167e8:	4618      	mov	r0, r3
 80167ea:	370c      	adds	r7, #12
 80167ec:	46bd      	mov	sp, r7
 80167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f2:	4770      	bx	lr

080167f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80167f4:	b480      	push	{r7}
 80167f6:	b083      	sub	sp, #12
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
 80167fc:	460b      	mov	r3, r1
 80167fe:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016800:	887a      	ldrh	r2, [r7, #2]
 8016802:	4613      	mov	r3, r2
 8016804:	005b      	lsls	r3, r3, #1
 8016806:	4413      	add	r3, r2
 8016808:	009b      	lsls	r3, r3, #2
 801680a:	3308      	adds	r3, #8
 801680c:	687a      	ldr	r2, [r7, #4]
 801680e:	4413      	add	r3, r2
    }
 8016810:	4618      	mov	r0, r3
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr

0801681c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 801681c:	b480      	push	{r7}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	460b      	mov	r3, r1
 8016826:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8016828:	887a      	ldrh	r2, [r7, #2]
 801682a:	4613      	mov	r3, r2
 801682c:	005b      	lsls	r3, r3, #1
 801682e:	4413      	add	r3, r2
 8016830:	009b      	lsls	r3, r3, #2
 8016832:	3308      	adds	r3, #8
 8016834:	687a      	ldr	r2, [r7, #4]
 8016836:	4413      	add	r3, r2
    }
 8016838:	4618      	mov	r0, r3
 801683a:	370c      	adds	r7, #12
 801683c:	46bd      	mov	sp, r7
 801683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016842:	4770      	bx	lr

08016844 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8016844:	b480      	push	{r7}
 8016846:	b083      	sub	sp, #12
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801684c:	2301      	movs	r3, #1
    }
 801684e:	4618      	mov	r0, r3
 8016850:	370c      	adds	r7, #12
 8016852:	46bd      	mov	sp, r7
 8016854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016858:	4770      	bx	lr

0801685a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801685a:	b480      	push	{r7}
 801685c:	b083      	sub	sp, #12
 801685e:	af00      	add	r7, sp, #0
 8016860:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8016862:	f640 538c 	movw	r3, #3468	; 0xd8c
    }
 8016866:	4618      	mov	r0, r3
 8016868:	370c      	adds	r7, #12
 801686a:	46bd      	mov	sp, r7
 801686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016870:	4770      	bx	lr

08016872 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8016872:	b480      	push	{r7}
 8016874:	b083      	sub	sp, #12
 8016876:	af00      	add	r7, sp, #0
 8016878:	6078      	str	r0, [r7, #4]
 801687a:	460b      	mov	r3, r1
 801687c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801687e:	887b      	ldrh	r3, [r7, #2]
 8016880:	f640 528c 	movw	r2, #3468	; 0xd8c
 8016884:	fb02 f303 	mul.w	r3, r2, r3
 8016888:	3308      	adds	r3, #8
 801688a:	687a      	ldr	r2, [r7, #4]
 801688c:	4413      	add	r3, r2
    }
 801688e:	4618      	mov	r0, r3
 8016890:	370c      	adds	r7, #12
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr

0801689a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801689a:	b480      	push	{r7}
 801689c:	b083      	sub	sp, #12
 801689e:	af00      	add	r7, sp, #0
 80168a0:	6078      	str	r0, [r7, #4]
 80168a2:	460b      	mov	r3, r1
 80168a4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80168a6:	887b      	ldrh	r3, [r7, #2]
 80168a8:	f640 528c 	movw	r2, #3468	; 0xd8c
 80168ac:	fb02 f303 	mul.w	r3, r2, r3
 80168b0:	3308      	adds	r3, #8
 80168b2:	687a      	ldr	r2, [r7, #4]
 80168b4:	4413      	add	r3, r2
    }
 80168b6:	4618      	mov	r0, r3
 80168b8:	370c      	adds	r7, #12
 80168ba:	46bd      	mov	sp, r7
 80168bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c0:	4770      	bx	lr

080168c2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80168c2:	b480      	push	{r7}
 80168c4:	b083      	sub	sp, #12
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80168ca:	2301      	movs	r3, #1
    }
 80168cc:	4618      	mov	r0, r3
 80168ce:	370c      	adds	r7, #12
 80168d0:	46bd      	mov	sp, r7
 80168d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d6:	4770      	bx	lr

080168d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80168d8:	b480      	push	{r7}
 80168da:	b083      	sub	sp, #12
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80168e0:	2310      	movs	r3, #16
    }
 80168e2:	4618      	mov	r0, r3
 80168e4:	370c      	adds	r7, #12
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr

080168ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80168ee:	b480      	push	{r7}
 80168f0:	b083      	sub	sp, #12
 80168f2:	af00      	add	r7, sp, #0
 80168f4:	6078      	str	r0, [r7, #4]
 80168f6:	460b      	mov	r3, r1
 80168f8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80168fa:	887b      	ldrh	r3, [r7, #2]
 80168fc:	011b      	lsls	r3, r3, #4
 80168fe:	3308      	adds	r3, #8
 8016900:	687a      	ldr	r2, [r7, #4]
 8016902:	4413      	add	r3, r2
    }
 8016904:	4618      	mov	r0, r3
 8016906:	370c      	adds	r7, #12
 8016908:	46bd      	mov	sp, r7
 801690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690e:	4770      	bx	lr

08016910 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8016910:	b480      	push	{r7}
 8016912:	b083      	sub	sp, #12
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	460b      	mov	r3, r1
 801691a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801691c:	887b      	ldrh	r3, [r7, #2]
 801691e:	011b      	lsls	r3, r3, #4
 8016920:	3308      	adds	r3, #8
 8016922:	687a      	ldr	r2, [r7, #4]
 8016924:	4413      	add	r3, r2
    }
 8016926:	4618      	mov	r0, r3
 8016928:	370c      	adds	r7, #12
 801692a:	46bd      	mov	sp, r7
 801692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016930:	4770      	bx	lr

08016932 <_GLOBAL__sub_I_touchgfx_init>:
 8016932:	b580      	push	{r7, lr}
 8016934:	af00      	add	r7, sp, #0
 8016936:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801693a:	2001      	movs	r0, #1
 801693c:	f7ff fefc 	bl	8016738 <_Z41__static_initialization_and_destruction_0ii>
 8016940:	bd80      	pop	{r7, pc}

08016942 <_GLOBAL__sub_D_touchgfx_init>:
 8016942:	b580      	push	{r7, lr}
 8016944:	af00      	add	r7, sp, #0
 8016946:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801694a:	2000      	movs	r0, #0
 801694c:	f7ff fef4 	bl	8016738 <_Z41__static_initialization_and_destruction_0ii>
 8016950:	bd80      	pop	{r7, pc}

08016952 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8016952:	b580      	push	{r7, lr}
 8016954:	b082      	sub	sp, #8
 8016956:	af00      	add	r7, sp, #0
 8016958:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	3320      	adds	r3, #32
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	4798      	blx	r3
    }
 8016966:	bf00      	nop
 8016968:	3708      	adds	r7, #8
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}

0801696e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801696e:	b480      	push	{r7}
 8016970:	b083      	sub	sp, #12
 8016972:	af00      	add	r7, sp, #0
 8016974:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801697c:	3301      	adds	r3, #1
 801697e:	b2da      	uxtb	r2, r3
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8016986:	bf00      	nop
 8016988:	370c      	adds	r7, #12
 801698a:	46bd      	mov	sp, r7
 801698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016990:	4770      	bx	lr
	...

08016994 <__NVIC_EnableIRQ>:
{
 8016994:	b480      	push	{r7}
 8016996:	b083      	sub	sp, #12
 8016998:	af00      	add	r7, sp, #0
 801699a:	4603      	mov	r3, r0
 801699c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801699e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	db0b      	blt.n	80169be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80169a6:	79fb      	ldrb	r3, [r7, #7]
 80169a8:	f003 021f 	and.w	r2, r3, #31
 80169ac:	4907      	ldr	r1, [pc, #28]	; (80169cc <__NVIC_EnableIRQ+0x38>)
 80169ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169b2:	095b      	lsrs	r3, r3, #5
 80169b4:	2001      	movs	r0, #1
 80169b6:	fa00 f202 	lsl.w	r2, r0, r2
 80169ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80169be:	bf00      	nop
 80169c0:	370c      	adds	r7, #12
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr
 80169ca:	bf00      	nop
 80169cc:	e000e100 	.word	0xe000e100

080169d0 <__NVIC_DisableIRQ>:
{
 80169d0:	b480      	push	{r7}
 80169d2:	b083      	sub	sp, #12
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	4603      	mov	r3, r0
 80169d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80169da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	db12      	blt.n	8016a08 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80169e2:	79fb      	ldrb	r3, [r7, #7]
 80169e4:	f003 021f 	and.w	r2, r3, #31
 80169e8:	490a      	ldr	r1, [pc, #40]	; (8016a14 <__NVIC_DisableIRQ+0x44>)
 80169ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169ee:	095b      	lsrs	r3, r3, #5
 80169f0:	2001      	movs	r0, #1
 80169f2:	fa00 f202 	lsl.w	r2, r0, r2
 80169f6:	3320      	adds	r3, #32
 80169f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80169fc:	f3bf 8f4f 	dsb	sy
}
 8016a00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016a02:	f3bf 8f6f 	isb	sy
}
 8016a06:	bf00      	nop
}
 8016a08:	bf00      	nop
 8016a0a:	370c      	adds	r7, #12
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a12:	4770      	bx	lr
 8016a14:	e000e100 	.word	0xe000e100

08016a18 <__NVIC_SetPriority>:
{
 8016a18:	b480      	push	{r7}
 8016a1a:	b083      	sub	sp, #12
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	4603      	mov	r3, r0
 8016a20:	6039      	str	r1, [r7, #0]
 8016a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	db0a      	blt.n	8016a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	b2da      	uxtb	r2, r3
 8016a30:	490c      	ldr	r1, [pc, #48]	; (8016a64 <__NVIC_SetPriority+0x4c>)
 8016a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a36:	0112      	lsls	r2, r2, #4
 8016a38:	b2d2      	uxtb	r2, r2
 8016a3a:	440b      	add	r3, r1
 8016a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016a40:	e00a      	b.n	8016a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a42:	683b      	ldr	r3, [r7, #0]
 8016a44:	b2da      	uxtb	r2, r3
 8016a46:	4908      	ldr	r1, [pc, #32]	; (8016a68 <__NVIC_SetPriority+0x50>)
 8016a48:	79fb      	ldrb	r3, [r7, #7]
 8016a4a:	f003 030f 	and.w	r3, r3, #15
 8016a4e:	3b04      	subs	r3, #4
 8016a50:	0112      	lsls	r2, r2, #4
 8016a52:	b2d2      	uxtb	r2, r2
 8016a54:	440b      	add	r3, r1
 8016a56:	761a      	strb	r2, [r3, #24]
}
 8016a58:	bf00      	nop
 8016a5a:	370c      	adds	r7, #12
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a62:	4770      	bx	lr
 8016a64:	e000e100 	.word	0xe000e100
 8016a68:	e000ed00 	.word	0xe000ed00

08016a6c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8016a6c:	b5b0      	push	{r4, r5, r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	4618      	mov	r0, r3
 8016a78:	f000 fe63 	bl	8017742 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8016a7c:	687d      	ldr	r5, [r7, #4]
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	3360      	adds	r3, #96	; 0x60
 8016a84:	681c      	ldr	r4, [r3, #0]
 8016a86:	f005 fac5 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	4628      	mov	r0, r5
 8016a90:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD012C000, (void*)0);
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	3384      	adds	r3, #132	; 0x84
 8016a9a:	681c      	ldr	r4, [r3, #0]
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	4a04      	ldr	r2, [pc, #16]	; (8016ab0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8016aa0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8016aa4:	47a0      	blx	r4
}
 8016aa6:	bf00      	nop
 8016aa8:	3708      	adds	r7, #8
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bdb0      	pop	{r4, r5, r7, pc}
 8016aae:	bf00      	nop
 8016ab0:	d012c000 	.word	0xd012c000

08016ab4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b082      	sub	sp, #8
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8016abc:	2109      	movs	r1, #9
 8016abe:	205a      	movs	r0, #90	; 0x5a
 8016ac0:	f7ff ffaa 	bl	8016a18 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016ac4:	2109      	movs	r1, #9
 8016ac6:	2058      	movs	r0, #88	; 0x58
 8016ac8:	f7ff ffa6 	bl	8016a18 <__NVIC_SetPriority>
}
 8016acc:	bf00      	nop
 8016ace:	3708      	adds	r7, #8
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	bd80      	pop	{r7, pc}

08016ad4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016adc:	205a      	movs	r0, #90	; 0x5a
 8016ade:	f7ff ff59 	bl	8016994 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8016ae2:	2058      	movs	r0, #88	; 0x58
 8016ae4:	f7ff ff56 	bl	8016994 <__NVIC_EnableIRQ>
}
 8016ae8:	bf00      	nop
 8016aea:	3708      	adds	r7, #8
 8016aec:	46bd      	mov	sp, r7
 8016aee:	bd80      	pop	{r7, pc}

08016af0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b082      	sub	sp, #8
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016af8:	205a      	movs	r0, #90	; 0x5a
 8016afa:	f7ff ff69 	bl	80169d0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8016afe:	2058      	movs	r0, #88	; 0x58
 8016b00:	f7ff ff66 	bl	80169d0 <__NVIC_DisableIRQ>
}
 8016b04:	bf00      	nop
 8016b06:	3708      	adds	r7, #8
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}

08016b0c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8016b0c:	b480      	push	{r7}
 8016b0e:	b083      	sub	sp, #12
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016b14:	4b11      	ldr	r3, [pc, #68]	; (8016b5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016b16:	68db      	ldr	r3, [r3, #12]
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b1e:	b29b      	uxth	r3, r3
 8016b20:	3b01      	subs	r3, #1
 8016b22:	b29a      	uxth	r2, r3
 8016b24:	4b0e      	ldr	r3, [pc, #56]	; (8016b60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016b26:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016b28:	4b0c      	ldr	r3, [pc, #48]	; (8016b5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016b2a:	691b      	ldr	r3, [r3, #16]
 8016b2c:	b29b      	uxth	r3, r3
 8016b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	3b01      	subs	r3, #1
 8016b36:	b29a      	uxth	r2, r3
 8016b38:	4b0a      	ldr	r3, [pc, #40]	; (8016b64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8016b3a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8016b3c:	4b08      	ldr	r3, [pc, #32]	; (8016b60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8016b3e:	881a      	ldrh	r2, [r3, #0]
 8016b40:	4b06      	ldr	r3, [pc, #24]	; (8016b5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016b42:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8016b44:	4b05      	ldr	r3, [pc, #20]	; (8016b5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b48:	4a04      	ldr	r2, [pc, #16]	; (8016b5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8016b4a:	f043 0301 	orr.w	r3, r3, #1
 8016b4e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8016b50:	bf00      	nop
 8016b52:	370c      	adds	r7, #12
 8016b54:	46bd      	mov	sp, r7
 8016b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5a:	4770      	bx	lr
 8016b5c:	40016800 	.word	0x40016800
 8016b60:	20009798 	.word	0x20009798
 8016b64:	2000979a 	.word	0x2000979a

08016b68 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b082      	sub	sp, #8
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	4618      	mov	r0, r3
 8016b74:	f000 fdcc 	bl	8017710 <_ZN8touchgfx3HAL10beginFrameEv>
 8016b78:	4603      	mov	r3, r0
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	3708      	adds	r7, #8
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b082      	sub	sp, #8
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f000 fdcb 	bl	8017728 <_ZN8touchgfx3HAL8endFrameEv>

}
 8016b92:	bf00      	nop
 8016b94:	3708      	adds	r7, #8
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
	...

08016b9c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8016b9c:	b480      	push	{r7}
 8016b9e:	b083      	sub	sp, #12
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016ba4:	4b03      	ldr	r3, [pc, #12]	; (8016bb4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8016ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	370c      	adds	r7, #12
 8016bac:	46bd      	mov	sp, r7
 8016bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb2:	4770      	bx	lr
 8016bb4:	40016884 	.word	0x40016884

08016bb8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016bb8:	b480      	push	{r7}
 8016bba:	b083      	sub	sp, #12
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
 8016bc0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016bc2:	4a06      	ldr	r2, [pc, #24]	; (8016bdc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016bc8:	4b05      	ldr	r3, [pc, #20]	; (8016be0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8016bca:	2201      	movs	r2, #1
 8016bcc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016bce:	bf00      	nop
 8016bd0:	370c      	adds	r7, #12
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd8:	4770      	bx	lr
 8016bda:	bf00      	nop
 8016bdc:	40016884 	.word	0x40016884
 8016be0:	40016800 	.word	0x40016800

08016be4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b082      	sub	sp, #8
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
 8016bec:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	6839      	ldr	r1, [r7, #0]
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	f000 fd56 	bl	80176a4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016bf8:	bf00      	nop
 8016bfa:	3708      	adds	r7, #8
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}

08016c00 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b084      	sub	sp, #16
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	60f8      	str	r0, [r7, #12]
 8016c08:	60b9      	str	r1, [r7, #8]
 8016c0a:	607a      	str	r2, [r7, #4]
 8016c0c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8016c0e:	68f8      	ldr	r0, [r7, #12]
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	687a      	ldr	r2, [r7, #4]
 8016c14:	68b9      	ldr	r1, [r7, #8]
 8016c16:	f000 feb0 	bl	801797a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8016c1a:	4603      	mov	r3, r0
}
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	3710      	adds	r7, #16
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd80      	pop	{r7, pc}

08016c24 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8016c2c:	4b1a      	ldr	r3, [pc, #104]	; (8016c98 <HAL_LTDC_LineEventCallback+0x74>)
 8016c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c30:	4a1a      	ldr	r2, [pc, #104]	; (8016c9c <HAL_LTDC_LineEventCallback+0x78>)
 8016c32:	8812      	ldrh	r2, [r2, #0]
 8016c34:	4293      	cmp	r3, r2
 8016c36:	bf0c      	ite	eq
 8016c38:	2301      	moveq	r3, #1
 8016c3a:	2300      	movne	r3, #0
 8016c3c:	b2db      	uxtb	r3, r3
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d017      	beq.n	8016c72 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8016c42:	4b17      	ldr	r3, [pc, #92]	; (8016ca0 <HAL_LTDC_LineEventCallback+0x7c>)
 8016c44:	881b      	ldrh	r3, [r3, #0]
 8016c46:	4619      	mov	r1, r3
 8016c48:	6878      	ldr	r0, [r7, #4]
 8016c4a:	f7f0 fba1 	bl	8007390 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8016c4e:	f7f9 f955 	bl	800fefc <_ZN8touchgfx3HAL11getInstanceEv>
 8016c52:	4603      	mov	r3, r0
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7ff fe8a 	bl	801696e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8016c5a:	f7fe fd65 	bl	8015728 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8016c5e:	f7f9 f94d 	bl	800fefc <_ZN8touchgfx3HAL11getInstanceEv>
 8016c62:	4603      	mov	r3, r0
 8016c64:	4618      	mov	r0, r3
 8016c66:	f001 fb7b 	bl	8018360 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8016c6a:	2000      	movs	r0, #0
 8016c6c:	f7fe faa2 	bl	80151b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8016c70:	e00e      	b.n	8016c90 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8016c72:	4b0a      	ldr	r3, [pc, #40]	; (8016c9c <HAL_LTDC_LineEventCallback+0x78>)
 8016c74:	881b      	ldrh	r3, [r3, #0]
 8016c76:	4619      	mov	r1, r3
 8016c78:	6878      	ldr	r0, [r7, #4]
 8016c7a:	f7f0 fb89 	bl	8007390 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8016c7e:	2000      	movs	r0, #0
 8016c80:	f7fe faa3 	bl	80151ca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8016c84:	f7f9 f93a 	bl	800fefc <_ZN8touchgfx3HAL11getInstanceEv>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7ff fe61 	bl	8016952 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8016c90:	bf00      	nop
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	40016800 	.word	0x40016800
 8016c9c:	20009798 	.word	0x20009798
 8016ca0:	2000979a 	.word	0x2000979a

08016ca4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016ca4:	8880      	ldrh	r0, [r0, #4]
 8016ca6:	4770      	bx	lr

08016ca8 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016ca8:	2300      	movs	r3, #0
 8016caa:	8083      	strh	r3, [r0, #4]
 8016cac:	4770      	bx	lr
	...

08016cb0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cb2:	6803      	ldr	r3, [r0, #0]
 8016cb4:	4605      	mov	r5, r0
 8016cb6:	460e      	mov	r6, r1
 8016cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cba:	2100      	movs	r1, #0
 8016cbc:	4798      	blx	r3
 8016cbe:	682b      	ldr	r3, [r5, #0]
 8016cc0:	4604      	mov	r4, r0
 8016cc2:	6a1b      	ldr	r3, [r3, #32]
 8016cc4:	4628      	mov	r0, r5
 8016cc6:	4798      	blx	r3
 8016cc8:	88ab      	ldrh	r3, [r5, #4]
 8016cca:	1b34      	subs	r4, r6, r4
 8016ccc:	b2a4      	uxth	r4, r4
 8016cce:	fbb4 f4f0 	udiv	r4, r4, r0
 8016cd2:	42a3      	cmp	r3, r4
 8016cd4:	d805      	bhi.n	8016ce2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016cd6:	4b0e      	ldr	r3, [pc, #56]	; (8016d10 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016cd8:	4a0e      	ldr	r2, [pc, #56]	; (8016d14 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016cda:	211e      	movs	r1, #30
 8016cdc:	480e      	ldr	r0, [pc, #56]	; (8016d18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8016cde:	f017 f8b7 	bl	802de50 <__assert_func>
 8016ce2:	682b      	ldr	r3, [r5, #0]
 8016ce4:	2100      	movs	r1, #0
 8016ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ce8:	4628      	mov	r0, r5
 8016cea:	4798      	blx	r3
 8016cec:	682b      	ldr	r3, [r5, #0]
 8016cee:	4607      	mov	r7, r0
 8016cf0:	6a1b      	ldr	r3, [r3, #32]
 8016cf2:	4628      	mov	r0, r5
 8016cf4:	4798      	blx	r3
 8016cf6:	1bf3      	subs	r3, r6, r7
 8016cf8:	b29b      	uxth	r3, r3
 8016cfa:	fbb3 f2f0 	udiv	r2, r3, r0
 8016cfe:	fb02 3010 	mls	r0, r2, r0, r3
 8016d02:	b118      	cbz	r0, 8016d0c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016d04:	4b05      	ldr	r3, [pc, #20]	; (8016d1c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016d06:	4a03      	ldr	r2, [pc, #12]	; (8016d14 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016d08:	211f      	movs	r1, #31
 8016d0a:	e7e7      	b.n	8016cdc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d10:	080305c4 	.word	0x080305c4
 8016d14:	08030732 	.word	0x08030732
 8016d18:	080305d9 	.word	0x080305d9
 8016d1c:	08030607 	.word	0x08030607

08016d20 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016d20:	b538      	push	{r3, r4, r5, lr}
 8016d22:	6803      	ldr	r3, [r0, #0]
 8016d24:	6a1b      	ldr	r3, [r3, #32]
 8016d26:	460d      	mov	r5, r1
 8016d28:	4604      	mov	r4, r0
 8016d2a:	4798      	blx	r3
 8016d2c:	4285      	cmp	r5, r0
 8016d2e:	d905      	bls.n	8016d3c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016d30:	4b0c      	ldr	r3, [pc, #48]	; (8016d64 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016d32:	4a0d      	ldr	r2, [pc, #52]	; (8016d68 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016d34:	2130      	movs	r1, #48	; 0x30
 8016d36:	480d      	ldr	r0, [pc, #52]	; (8016d6c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016d38:	f017 f88a 	bl	802de50 <__assert_func>
 8016d3c:	6823      	ldr	r3, [r4, #0]
 8016d3e:	88a5      	ldrh	r5, [r4, #4]
 8016d40:	69db      	ldr	r3, [r3, #28]
 8016d42:	4620      	mov	r0, r4
 8016d44:	4798      	blx	r3
 8016d46:	4285      	cmp	r5, r0
 8016d48:	d303      	bcc.n	8016d52 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016d4a:	4b09      	ldr	r3, [pc, #36]	; (8016d70 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016d4c:	4a06      	ldr	r2, [pc, #24]	; (8016d68 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016d4e:	2131      	movs	r1, #49	; 0x31
 8016d50:	e7f1      	b.n	8016d36 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016d52:	6823      	ldr	r3, [r4, #0]
 8016d54:	88a1      	ldrh	r1, [r4, #4]
 8016d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d58:	4620      	mov	r0, r4
 8016d5a:	4798      	blx	r3
 8016d5c:	88a3      	ldrh	r3, [r4, #4]
 8016d5e:	3301      	adds	r3, #1
 8016d60:	80a3      	strh	r3, [r4, #4]
 8016d62:	bd38      	pop	{r3, r4, r5, pc}
 8016d64:	08030681 	.word	0x08030681
 8016d68:	08030775 	.word	0x08030775
 8016d6c:	080305d9 	.word	0x080305d9
 8016d70:	08030698 	.word	0x08030698

08016d74 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016d74:	b570      	push	{r4, r5, r6, lr}
 8016d76:	6803      	ldr	r3, [r0, #0]
 8016d78:	6a1b      	ldr	r3, [r3, #32]
 8016d7a:	4616      	mov	r6, r2
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	460d      	mov	r5, r1
 8016d80:	4798      	blx	r3
 8016d82:	4286      	cmp	r6, r0
 8016d84:	d905      	bls.n	8016d92 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016d86:	4b06      	ldr	r3, [pc, #24]	; (8016da0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016d88:	4a06      	ldr	r2, [pc, #24]	; (8016da4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016d8a:	4807      	ldr	r0, [pc, #28]	; (8016da8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016d8c:	213a      	movs	r1, #58	; 0x3a
 8016d8e:	f017 f85f 	bl	802de50 <__assert_func>
 8016d92:	6823      	ldr	r3, [r4, #0]
 8016d94:	4629      	mov	r1, r5
 8016d96:	4620      	mov	r0, r4
 8016d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d9e:	4718      	bx	r3
 8016da0:	08030681 	.word	0x08030681
 8016da4:	080306e8 	.word	0x080306e8
 8016da8:	080305d9 	.word	0x080305d9

08016dac <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016dac:	4770      	bx	lr
	...

08016db0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016db0:	4a02      	ldr	r2, [pc, #8]	; (8016dbc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016db2:	6002      	str	r2, [r0, #0]
 8016db4:	2200      	movs	r2, #0
 8016db6:	8082      	strh	r2, [r0, #4]
 8016db8:	4770      	bx	lr
 8016dba:	bf00      	nop
 8016dbc:	080306bc 	.word	0x080306bc

08016dc0 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016dc0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016dc2:	4770      	bx	lr

08016dc4 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016dc4:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8016dc8:	4770      	bx	lr

08016dca <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8016dca:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016dce:	4770      	bx	lr

08016dd0 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016dd0:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016dd4:	4770      	bx	lr

08016dd6 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8016dd6:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8016dda:	4770      	bx	lr

08016ddc <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8016ddc:	b510      	push	{r4, lr}
 8016dde:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016de2:	600c      	str	r4, [r1, #0]
 8016de4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016de8:	6011      	str	r1, [r2, #0]
 8016dea:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016dee:	801a      	strh	r2, [r3, #0]
 8016df0:	9b02      	ldr	r3, [sp, #8]
 8016df2:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8016df6:	801a      	strh	r2, [r3, #0]
 8016df8:	bd10      	pop	{r4, pc}

08016dfa <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8016dfa:	b510      	push	{r4, lr}
 8016dfc:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016e00:	600c      	str	r4, [r1, #0]
 8016e02:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016e06:	6011      	str	r1, [r2, #0]
 8016e08:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016e0c:	801a      	strh	r2, [r3, #0]
 8016e0e:	bd10      	pop	{r4, pc}

08016e10 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8016e10:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016e14:	600b      	str	r3, [r1, #0]
 8016e16:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016e1a:	6013      	str	r3, [r2, #0]
 8016e1c:	4770      	bx	lr

08016e1e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8016e1e:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8016e22:	4770      	bx	lr

08016e24 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8016e24:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8016e28:	4770      	bx	lr

08016e2a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8016e2a:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8016e2e:	4770      	bx	lr

08016e30 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8016e30:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8016e34:	4770      	bx	lr

08016e36 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8016e36:	b570      	push	{r4, r5, r6, lr}
 8016e38:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8016e3c:	428d      	cmp	r5, r1
 8016e3e:	bfb8      	it	lt
 8016e40:	460d      	movlt	r5, r1
 8016e42:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016e46:	428d      	cmp	r5, r1
 8016e48:	4604      	mov	r4, r0
 8016e4a:	bfa8      	it	ge
 8016e4c:	460d      	movge	r5, r1
 8016e4e:	4616      	mov	r6, r2
 8016e50:	b99a      	cbnz	r2, 8016e7a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8016e52:	6803      	ldr	r3, [r0, #0]
 8016e54:	4629      	mov	r1, r5
 8016e56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016e5a:	4798      	blx	r3
 8016e5c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016e60:	b358      	cbz	r0, 8016eba <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8016e62:	6803      	ldr	r3, [r0, #0]
 8016e64:	68db      	ldr	r3, [r3, #12]
 8016e66:	4798      	blx	r3
 8016e68:	b338      	cbz	r0, 8016eba <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8016e6a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016e6e:	6803      	ldr	r3, [r0, #0]
 8016e70:	4621      	mov	r1, r4
 8016e72:	689b      	ldr	r3, [r3, #8]
 8016e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e78:	4718      	bx	r3
 8016e7a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	dd07      	ble.n	8016e92 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8016e82:	f005 f8c7 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 8016e86:	4621      	mov	r1, r4
 8016e88:	f005 f8fc 	bl	801c084 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016e92:	6823      	ldr	r3, [r4, #0]
 8016e94:	4620      	mov	r0, r4
 8016e96:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016e9a:	4798      	blx	r3
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8016ea2:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8016ea6:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8016eaa:	f005 f8b3 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 8016eae:	4621      	mov	r1, r4
 8016eb0:	f005 f8b6 	bl	801c020 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016eba:	bd70      	pop	{r4, r5, r6, pc}

08016ebc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8016ebc:	b510      	push	{r4, lr}
 8016ebe:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016ec2:	4299      	cmp	r1, r3
 8016ec4:	bfb8      	it	lt
 8016ec6:	4619      	movlt	r1, r3
 8016ec8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016ecc:	4299      	cmp	r1, r3
 8016ece:	bfa8      	it	ge
 8016ed0:	4619      	movge	r1, r3
 8016ed2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016ed6:	428b      	cmp	r3, r1
 8016ed8:	4604      	mov	r4, r0
 8016eda:	d010      	beq.n	8016efe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016edc:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8016ee0:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8016ee4:	b158      	cbz	r0, 8016efe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016ee6:	6803      	ldr	r3, [r0, #0]
 8016ee8:	68db      	ldr	r3, [r3, #12]
 8016eea:	4798      	blx	r3
 8016eec:	b138      	cbz	r0, 8016efe <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016eee:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016ef2:	6803      	ldr	r3, [r0, #0]
 8016ef4:	4621      	mov	r1, r4
 8016ef6:	689b      	ldr	r3, [r3, #8]
 8016ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016efc:	4718      	bx	r3
 8016efe:	bd10      	pop	{r4, pc}

08016f00 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8016f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f04:	4291      	cmp	r1, r2
 8016f06:	4604      	mov	r4, r0
 8016f08:	460e      	mov	r6, r1
 8016f0a:	4615      	mov	r5, r2
 8016f0c:	4698      	mov	r8, r3
 8016f0e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8016f12:	db05      	blt.n	8016f20 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8016f14:	4b11      	ldr	r3, [pc, #68]	; (8016f5c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8016f16:	4a12      	ldr	r2, [pc, #72]	; (8016f60 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8016f18:	214b      	movs	r1, #75	; 0x4b
 8016f1a:	4812      	ldr	r0, [pc, #72]	; (8016f64 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8016f1c:	f016 ff98 	bl	802de50 <__assert_func>
 8016f20:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8016f24:	6803      	ldr	r3, [r0, #0]
 8016f26:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8016f2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016f2e:	4798      	blx	r3
 8016f30:	f1b8 0f00 	cmp.w	r8, #0
 8016f34:	d10c      	bne.n	8016f50 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8016f36:	1bad      	subs	r5, r5, r6
 8016f38:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8016f3c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8016f40:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8016f44:	42bb      	cmp	r3, r7
 8016f46:	d806      	bhi.n	8016f56 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8016f48:	4b07      	ldr	r3, [pc, #28]	; (8016f68 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8016f4a:	4a05      	ldr	r2, [pc, #20]	; (8016f60 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8016f4c:	2158      	movs	r1, #88	; 0x58
 8016f4e:	e7e4      	b.n	8016f1a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8016f50:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8016f54:	e7f2      	b.n	8016f3c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8016f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f5a:	bf00      	nop
 8016f5c:	080307b3 	.word	0x080307b3
 8016f60:	08030900 	.word	0x08030900
 8016f64:	080307bd 	.word	0x080307bd
 8016f68:	08030814 	.word	0x08030814

08016f6c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8016f6c:	b570      	push	{r4, r5, r6, lr}
 8016f6e:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8016f72:	4604      	mov	r4, r0
 8016f74:	b3a3      	cbz	r3, 8016fe0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8016f76:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8016f7a:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8016f7e:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8016f82:	3001      	adds	r0, #1
 8016f84:	1ad2      	subs	r2, r2, r3
 8016f86:	b212      	sxth	r2, r2
 8016f88:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8016f8c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016f90:	2100      	movs	r1, #0
 8016f92:	b280      	uxth	r0, r0
 8016f94:	47a8      	blx	r5
 8016f96:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8016f9a:	6823      	ldr	r3, [r4, #0]
 8016f9c:	4401      	add	r1, r0
 8016f9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016fa2:	4620      	mov	r0, r4
 8016fa4:	4798      	blx	r3
 8016fa6:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8016faa:	429a      	cmp	r2, r3
 8016fac:	db18      	blt.n	8016fe0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8016fae:	2500      	movs	r5, #0
 8016fb0:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016fb4:	f005 f82e 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 8016fb8:	4621      	mov	r1, r4
 8016fba:	f005 f863 	bl	801c084 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016fbe:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016fc2:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8016fc6:	b158      	cbz	r0, 8016fe0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8016fc8:	6803      	ldr	r3, [r0, #0]
 8016fca:	68db      	ldr	r3, [r3, #12]
 8016fcc:	4798      	blx	r3
 8016fce:	b138      	cbz	r0, 8016fe0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8016fd0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016fd4:	6803      	ldr	r3, [r0, #0]
 8016fd6:	4621      	mov	r1, r4
 8016fd8:	689b      	ldr	r3, [r3, #8]
 8016fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fde:	4718      	bx	r3
 8016fe0:	bd70      	pop	{r4, r5, r6, pc}

08016fe2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8016fe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016fe4:	4604      	mov	r4, r0
 8016fe6:	460d      	mov	r5, r1
 8016fe8:	b1a9      	cbz	r1, 8017016 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8016fea:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8016fee:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8016ff2:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8016ff6:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8016ffa:	ab01      	add	r3, sp, #4
 8016ffc:	1a12      	subs	r2, r2, r0
 8016ffe:	1b89      	subs	r1, r1, r6
 8017000:	1a38      	subs	r0, r7, r0
 8017002:	f006 f999 	bl	801d338 <_ZN8touchgfx6muldivElllRl>
 8017006:	4629      	mov	r1, r5
 8017008:	ab01      	add	r3, sp, #4
 801700a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 801700e:	4430      	add	r0, r6
 8017010:	f006 f992 	bl	801d338 <_ZN8touchgfx6muldivElllRl>
 8017014:	b285      	uxth	r5, r0
 8017016:	4628      	mov	r0, r5
 8017018:	b003      	add	sp, #12
 801701a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801701c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017020:	4604      	mov	r4, r0
 8017022:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8017026:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 801702a:	460e      	mov	r6, r1
 801702c:	4615      	mov	r5, r2
 801702e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017032:	4619      	mov	r1, r3
 8017034:	463a      	mov	r2, r7
 8017036:	3058      	adds	r0, #88	; 0x58
 8017038:	4698      	mov	r8, r3
 801703a:	f7f9 fd07 	bl	8010a4c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801703e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017042:	4446      	add	r6, r8
 8017044:	42b3      	cmp	r3, r6
 8017046:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801704a:	bfb8      	it	lt
 801704c:	8126      	strhlt	r6, [r4, #8]
 801704e:	443d      	add	r5, r7
 8017050:	42ab      	cmp	r3, r5
 8017052:	bfb8      	it	lt
 8017054:	8165      	strhlt	r5, [r4, #10]
 8017056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801705a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801705a:	b510      	push	{r4, lr}
 801705c:	4604      	mov	r4, r0
 801705e:	302c      	adds	r0, #44	; 0x2c
 8017060:	f003 fad0 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017064:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8017068:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 801706c:	4620      	mov	r0, r4
 801706e:	f7f9 fced 	bl	8010a4c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017072:	bd10      	pop	{r4, pc}

08017074 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017076:	4604      	mov	r4, r0
 8017078:	4626      	mov	r6, r4
 801707a:	2500      	movs	r5, #0
 801707c:	f7f9 fbf0 	bl	8010860 <_ZN8touchgfx8DrawableC1Ev>
 8017080:	4b23      	ldr	r3, [pc, #140]	; (8017110 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017082:	62a5      	str	r5, [r4, #40]	; 0x28
 8017084:	f846 3b2c 	str.w	r3, [r6], #44
 8017088:	2226      	movs	r2, #38	; 0x26
 801708a:	4629      	mov	r1, r5
 801708c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017090:	4630      	mov	r0, r6
 8017092:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017096:	f017 f869 	bl	802e16c <memset>
 801709a:	4630      	mov	r0, r6
 801709c:	f7f9 fbe0 	bl	8010860 <_ZN8touchgfx8DrawableC1Ev>
 80170a0:	a902      	add	r1, sp, #8
 80170a2:	4b1c      	ldr	r3, [pc, #112]	; (8017114 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 80170a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80170a6:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 80170aa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80170ae:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 80170b2:	4630      	mov	r0, r6
 80170b4:	f104 0758 	add.w	r7, r4, #88	; 0x58
 80170b8:	f003 faa4 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80170bc:	4638      	mov	r0, r7
 80170be:	f7f9 fbcf 	bl	8010860 <_ZN8touchgfx8DrawableC1Ev>
 80170c2:	4b15      	ldr	r3, [pc, #84]	; (8017118 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 80170c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80170c6:	2364      	movs	r3, #100	; 0x64
 80170c8:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 80170cc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80170d0:	4b12      	ldr	r3, [pc, #72]	; (801711c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 80170d2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80170d6:	4629      	mov	r1, r5
 80170d8:	4630      	mov	r0, r6
 80170da:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 80170de:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 80170e2:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 80170e6:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 80170ea:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 80170ee:	f7f9 fc33 	bl	8010958 <_ZN8touchgfx8Drawable4setXEs>
 80170f2:	4629      	mov	r1, r5
 80170f4:	4630      	mov	r0, r6
 80170f6:	f7f9 fc3e 	bl	8010976 <_ZN8touchgfx8Drawable4setYEs>
 80170fa:	4631      	mov	r1, r6
 80170fc:	4620      	mov	r0, r4
 80170fe:	f000 f877 	bl	80171f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017102:	4620      	mov	r0, r4
 8017104:	4639      	mov	r1, r7
 8017106:	f000 f873 	bl	80171f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801710a:	4620      	mov	r0, r4
 801710c:	b003      	add	sp, #12
 801710e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017110:	08030838 	.word	0x08030838
 8017114:	08031b18 	.word	0x08031b18
 8017118:	08030a2c 	.word	0x08030a2c
 801711c:	0801d99d 	.word	0x0801d99d

08017120 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017120:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017122:	2000      	movs	r0, #0
 8017124:	b12b      	cbz	r3, 8017132 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017126:	b920      	cbnz	r0, 8017132 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017128:	1a5a      	subs	r2, r3, r1
 801712a:	4250      	negs	r0, r2
 801712c:	4150      	adcs	r0, r2
 801712e:	699b      	ldr	r3, [r3, #24]
 8017130:	e7f8      	b.n	8017124 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017132:	4770      	bx	lr

08017134 <_ZN8touchgfx9Container9removeAllEv>:
 8017134:	2200      	movs	r2, #0
 8017136:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017138:	b123      	cbz	r3, 8017144 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801713a:	6999      	ldr	r1, [r3, #24]
 801713c:	6281      	str	r1, [r0, #40]	; 0x28
 801713e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017142:	e7f8      	b.n	8017136 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017144:	4770      	bx	lr

08017146 <_ZN8touchgfx9Container6unlinkEv>:
 8017146:	2300      	movs	r3, #0
 8017148:	6283      	str	r3, [r0, #40]	; 0x28
 801714a:	4770      	bx	lr

0801714c <_ZNK8touchgfx9Container12getSolidRectEv>:
 801714c:	2200      	movs	r2, #0
 801714e:	8002      	strh	r2, [r0, #0]
 8017150:	8042      	strh	r2, [r0, #2]
 8017152:	8082      	strh	r2, [r0, #4]
 8017154:	80c2      	strh	r2, [r0, #6]
 8017156:	4770      	bx	lr

08017158 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017158:	b570      	push	{r4, r5, r6, lr}
 801715a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801715c:	460d      	mov	r5, r1
 801715e:	4616      	mov	r6, r2
 8017160:	b13c      	cbz	r4, 8017172 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017162:	6823      	ldr	r3, [r4, #0]
 8017164:	4620      	mov	r0, r4
 8017166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017168:	4632      	mov	r2, r6
 801716a:	4629      	mov	r1, r5
 801716c:	4798      	blx	r3
 801716e:	69a4      	ldr	r4, [r4, #24]
 8017170:	e7f6      	b.n	8017160 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017172:	bd70      	pop	{r4, r5, r6, pc}

08017174 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017174:	b538      	push	{r3, r4, r5, lr}
 8017176:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017178:	460d      	mov	r5, r1
 801717a:	b134      	cbz	r4, 801718a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801717c:	682b      	ldr	r3, [r5, #0]
 801717e:	4621      	mov	r1, r4
 8017180:	689b      	ldr	r3, [r3, #8]
 8017182:	4628      	mov	r0, r5
 8017184:	4798      	blx	r3
 8017186:	69a4      	ldr	r4, [r4, #24]
 8017188:	e7f7      	b.n	801717a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801718a:	bd38      	pop	{r3, r4, r5, pc}

0801718c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801718c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801718e:	b19b      	cbz	r3, 80171b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017190:	428b      	cmp	r3, r1
 8017192:	d109      	bne.n	80171a8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017194:	699a      	ldr	r2, [r3, #24]
 8017196:	2100      	movs	r1, #0
 8017198:	6159      	str	r1, [r3, #20]
 801719a:	6282      	str	r2, [r0, #40]	; 0x28
 801719c:	b902      	cbnz	r2, 80171a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801719e:	4770      	bx	lr
 80171a0:	6199      	str	r1, [r3, #24]
 80171a2:	4770      	bx	lr
 80171a4:	4613      	mov	r3, r2
 80171a6:	b13a      	cbz	r2, 80171b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80171a8:	699a      	ldr	r2, [r3, #24]
 80171aa:	428a      	cmp	r2, r1
 80171ac:	d1fa      	bne.n	80171a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80171ae:	698a      	ldr	r2, [r1, #24]
 80171b0:	619a      	str	r2, [r3, #24]
 80171b2:	2300      	movs	r3, #0
 80171b4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80171b8:	4770      	bx	lr

080171ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80171ba:	b410      	push	{r4}
 80171bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80171be:	4604      	mov	r4, r0
 80171c0:	b92b      	cbnz	r3, 80171ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80171c2:	6803      	ldr	r3, [r0, #0]
 80171c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80171ca:	4611      	mov	r1, r2
 80171cc:	4718      	bx	r3
 80171ce:	b941      	cbnz	r1, 80171e2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80171d0:	6193      	str	r3, [r2, #24]
 80171d2:	6282      	str	r2, [r0, #40]	; 0x28
 80171d4:	6154      	str	r4, [r2, #20]
 80171d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171da:	4770      	bx	lr
 80171dc:	4603      	mov	r3, r0
 80171de:	2800      	cmp	r0, #0
 80171e0:	d0f9      	beq.n	80171d6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80171e2:	4299      	cmp	r1, r3
 80171e4:	6998      	ldr	r0, [r3, #24]
 80171e6:	d1f9      	bne.n	80171dc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80171e8:	6190      	str	r0, [r2, #24]
 80171ea:	618a      	str	r2, [r1, #24]
 80171ec:	e7f2      	b.n	80171d4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080171f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80171f0:	4288      	cmp	r0, r1
 80171f2:	b508      	push	{r3, lr}
 80171f4:	d105      	bne.n	8017202 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80171f6:	4b11      	ldr	r3, [pc, #68]	; (801723c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80171f8:	4a11      	ldr	r2, [pc, #68]	; (8017240 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80171fa:	2123      	movs	r1, #35	; 0x23
 80171fc:	4811      	ldr	r0, [pc, #68]	; (8017244 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80171fe:	f016 fe27 	bl	802de50 <__assert_func>
 8017202:	694b      	ldr	r3, [r1, #20]
 8017204:	b11b      	cbz	r3, 801720e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8017206:	4b10      	ldr	r3, [pc, #64]	; (8017248 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017208:	4a0d      	ldr	r2, [pc, #52]	; (8017240 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801720a:	2124      	movs	r1, #36	; 0x24
 801720c:	e7f6      	b.n	80171fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801720e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8017212:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017214:	b913      	cbnz	r3, 801721c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017216:	6281      	str	r1, [r0, #40]	; 0x28
 8017218:	bd08      	pop	{r3, pc}
 801721a:	4613      	mov	r3, r2
 801721c:	699a      	ldr	r2, [r3, #24]
 801721e:	b12a      	cbz	r2, 801722c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017220:	428b      	cmp	r3, r1
 8017222:	d1fa      	bne.n	801721a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017224:	4b09      	ldr	r3, [pc, #36]	; (801724c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017226:	4a06      	ldr	r2, [pc, #24]	; (8017240 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017228:	2135      	movs	r1, #53	; 0x35
 801722a:	e7e7      	b.n	80171fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801722c:	428b      	cmp	r3, r1
 801722e:	d103      	bne.n	8017238 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017230:	4b06      	ldr	r3, [pc, #24]	; (801724c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017232:	4a03      	ldr	r2, [pc, #12]	; (8017240 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017234:	2138      	movs	r1, #56	; 0x38
 8017236:	e7e1      	b.n	80171fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017238:	6199      	str	r1, [r3, #24]
 801723a:	e7ed      	b.n	8017218 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801723c:	08030959 	.word	0x08030959
 8017240:	08030ab0 	.word	0x08030ab0
 8017244:	08030985 	.word	0x08030985
 8017248:	080309b8 	.word	0x080309b8
 801724c:	080309ee 	.word	0x080309ee

08017250 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017254:	461f      	mov	r7, r3
 8017256:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801725a:	460d      	mov	r5, r1
 801725c:	4616      	mov	r6, r2
 801725e:	b103      	cbz	r3, 8017262 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017260:	6038      	str	r0, [r7, #0]
 8017262:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017264:	b314      	cbz	r4, 80172ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017266:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801726a:	b1eb      	cbz	r3, 80172a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801726c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017270:	428d      	cmp	r5, r1
 8017272:	db19      	blt.n	80172a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017274:	8923      	ldrh	r3, [r4, #8]
 8017276:	b289      	uxth	r1, r1
 8017278:	440b      	add	r3, r1
 801727a:	b21b      	sxth	r3, r3
 801727c:	429d      	cmp	r5, r3
 801727e:	da13      	bge.n	80172a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017280:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017284:	4296      	cmp	r6, r2
 8017286:	db0f      	blt.n	80172a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017288:	8963      	ldrh	r3, [r4, #10]
 801728a:	b292      	uxth	r2, r2
 801728c:	4413      	add	r3, r2
 801728e:	b21b      	sxth	r3, r3
 8017290:	429e      	cmp	r6, r3
 8017292:	da09      	bge.n	80172a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017294:	6823      	ldr	r3, [r4, #0]
 8017296:	1ab2      	subs	r2, r6, r2
 8017298:	1a69      	subs	r1, r5, r1
 801729a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801729e:	b212      	sxth	r2, r2
 80172a0:	463b      	mov	r3, r7
 80172a2:	b209      	sxth	r1, r1
 80172a4:	4620      	mov	r0, r4
 80172a6:	47c0      	blx	r8
 80172a8:	69a4      	ldr	r4, [r4, #24]
 80172aa:	e7db      	b.n	8017264 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80172ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80172b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b4:	4c6e      	ldr	r4, [pc, #440]	; (8017470 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80172b6:	b0a1      	sub	sp, #132	; 0x84
 80172b8:	6824      	ldr	r4, [r4, #0]
 80172ba:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80172bc:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80172c0:	9303      	str	r3, [sp, #12]
 80172c2:	2400      	movs	r4, #0
 80172c4:	802c      	strh	r4, [r5, #0]
 80172c6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80172c8:	802c      	strh	r4, [r5, #0]
 80172ca:	601c      	str	r4, [r3, #0]
 80172cc:	4606      	mov	r6, r0
 80172ce:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80172d2:	f7ff ffbd 	bl	8017250 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80172d6:	f1b9 0f03 	cmp.w	r9, #3
 80172da:	f340 80c2 	ble.w	8017462 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80172de:	4631      	mov	r1, r6
 80172e0:	a80c      	add	r0, sp, #48	; 0x30
 80172e2:	f005 fef9 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80172e6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80172ea:	9306      	str	r3, [sp, #24]
 80172ec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80172f0:	9307      	str	r3, [sp, #28]
 80172f2:	9b03      	ldr	r3, [sp, #12]
 80172f4:	f8d3 a000 	ldr.w	sl, [r3]
 80172f8:	f1ba 0f00 	cmp.w	sl, #0
 80172fc:	f000 80b4 	beq.w	8017468 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8017300:	4651      	mov	r1, sl
 8017302:	a810      	add	r0, sp, #64	; 0x40
 8017304:	f005 fee8 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017308:	9b01      	ldr	r3, [sp, #4]
 801730a:	9a06      	ldr	r2, [sp, #24]
 801730c:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8017310:	189d      	adds	r5, r3, r2
 8017312:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017316:	9a07      	ldr	r2, [sp, #28]
 8017318:	2002      	movs	r0, #2
 801731a:	fb91 f1f0 	sdiv	r1, r1, r0
 801731e:	4419      	add	r1, r3
 8017320:	1a6d      	subs	r5, r5, r1
 8017322:	9b02      	ldr	r3, [sp, #8]
 8017324:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017328:	4413      	add	r3, r2
 801732a:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801732e:	fb92 f2f0 	sdiv	r2, r2, r0
 8017332:	440a      	add	r2, r1
 8017334:	1a9b      	subs	r3, r3, r2
 8017336:	435b      	muls	r3, r3
 8017338:	fb05 3505 	mla	r5, r5, r5, r3
 801733c:	4f4d      	ldr	r7, [pc, #308]	; (8017474 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 801733e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017340:	ac10      	add	r4, sp, #64	; 0x40
 8017342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017344:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017348:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801734a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801734c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017350:	f1b9 0f0c 	cmp.w	r9, #12
 8017354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017358:	f04f 0303 	mov.w	r3, #3
 801735c:	bfc8      	it	gt
 801735e:	4698      	movgt	r8, r3
 8017360:	f8cd 9000 	str.w	r9, [sp]
 8017364:	f04f 0400 	mov.w	r4, #0
 8017368:	bfdc      	itt	le
 801736a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801736e:	fb92 f8f3 	sdivle	r8, r2, r3
 8017372:	1c63      	adds	r3, r4, #1
 8017374:	aa10      	add	r2, sp, #64	; 0x40
 8017376:	f004 0401 	and.w	r4, r4, #1
 801737a:	9308      	str	r3, [sp, #32]
 801737c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017380:	9b00      	ldr	r3, [sp, #0]
 8017382:	fb93 f3f8 	sdiv	r3, r3, r8
 8017386:	b29b      	uxth	r3, r3
 8017388:	3404      	adds	r4, #4
 801738a:	f04f 0b00 	mov.w	fp, #0
 801738e:	9304      	str	r3, [sp, #16]
 8017390:	9a04      	ldr	r2, [sp, #16]
 8017392:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017396:	fb13 f302 	smulbb	r3, r3, r2
 801739a:	9a01      	ldr	r2, [sp, #4]
 801739c:	b29b      	uxth	r3, r3
 801739e:	1899      	adds	r1, r3, r2
 80173a0:	9305      	str	r3, [sp, #20]
 80173a2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80173a6:	b209      	sxth	r1, r1
 80173a8:	4299      	cmp	r1, r3
 80173aa:	db4d      	blt.n	8017448 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173ac:	8932      	ldrh	r2, [r6, #8]
 80173ae:	4413      	add	r3, r2
 80173b0:	b21b      	sxth	r3, r3
 80173b2:	4299      	cmp	r1, r3
 80173b4:	da48      	bge.n	8017448 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173b6:	9b04      	ldr	r3, [sp, #16]
 80173b8:	6827      	ldr	r7, [r4, #0]
 80173ba:	fb17 f703 	smulbb	r7, r7, r3
 80173be:	9b02      	ldr	r3, [sp, #8]
 80173c0:	b2bf      	uxth	r7, r7
 80173c2:	18fa      	adds	r2, r7, r3
 80173c4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80173c8:	b212      	sxth	r2, r2
 80173ca:	429a      	cmp	r2, r3
 80173cc:	db3c      	blt.n	8017448 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173ce:	8970      	ldrh	r0, [r6, #10]
 80173d0:	4403      	add	r3, r0
 80173d2:	b21b      	sxth	r3, r3
 80173d4:	429a      	cmp	r2, r3
 80173d6:	da37      	bge.n	8017448 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173d8:	2300      	movs	r3, #0
 80173da:	930b      	str	r3, [sp, #44]	; 0x2c
 80173dc:	4630      	mov	r0, r6
 80173de:	ab0b      	add	r3, sp, #44	; 0x2c
 80173e0:	f7ff ff36 	bl	8017250 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80173e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80173e6:	b37a      	cbz	r2, 8017448 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173e8:	4552      	cmp	r2, sl
 80173ea:	d02d      	beq.n	8017448 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80173ec:	4611      	mov	r1, r2
 80173ee:	a80e      	add	r0, sp, #56	; 0x38
 80173f0:	9209      	str	r2, [sp, #36]	; 0x24
 80173f2:	f005 fe71 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80173f6:	9a06      	ldr	r2, [sp, #24]
 80173f8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80173fc:	9b01      	ldr	r3, [sp, #4]
 80173fe:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8017402:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8017406:	4413      	add	r3, r2
 8017408:	f04f 0e02 	mov.w	lr, #2
 801740c:	fb91 f1fe 	sdiv	r1, r1, lr
 8017410:	4401      	add	r1, r0
 8017412:	1a58      	subs	r0, r3, r1
 8017414:	9a07      	ldr	r2, [sp, #28]
 8017416:	9b02      	ldr	r3, [sp, #8]
 8017418:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801741c:	fb9c fcfe 	sdiv	ip, ip, lr
 8017420:	4413      	add	r3, r2
 8017422:	448c      	add	ip, r1
 8017424:	eba3 030c 	sub.w	r3, r3, ip
 8017428:	435b      	muls	r3, r3
 801742a:	fb00 3300 	mla	r3, r0, r0, r3
 801742e:	42ab      	cmp	r3, r5
 8017430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017432:	d208      	bcs.n	8017446 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017434:	9803      	ldr	r0, [sp, #12]
 8017436:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017438:	6001      	str	r1, [r0, #0]
 801743a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801743c:	9805      	ldr	r0, [sp, #20]
 801743e:	8008      	strh	r0, [r1, #0]
 8017440:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017442:	461d      	mov	r5, r3
 8017444:	800f      	strh	r7, [r1, #0]
 8017446:	4692      	mov	sl, r2
 8017448:	f10b 0b01 	add.w	fp, fp, #1
 801744c:	f1bb 0f04 	cmp.w	fp, #4
 8017450:	f104 0408 	add.w	r4, r4, #8
 8017454:	d19c      	bne.n	8017390 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017456:	9b00      	ldr	r3, [sp, #0]
 8017458:	9c08      	ldr	r4, [sp, #32]
 801745a:	444b      	add	r3, r9
 801745c:	4544      	cmp	r4, r8
 801745e:	9300      	str	r3, [sp, #0]
 8017460:	d187      	bne.n	8017372 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017462:	b021      	add	sp, #132	; 0x84
 8017464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017468:	f04f 35ff 	mov.w	r5, #4294967295
 801746c:	e766      	b.n	801733c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801746e:	bf00      	nop
 8017470:	200097a8 	.word	0x200097a8
 8017474:	0802fbdc 	.word	0x0802fbdc

08017478 <_ZN8touchgfx4RectaNERKS0_>:
 8017478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801747c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017480:	888c      	ldrh	r4, [r1, #4]
 8017482:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017486:	443c      	add	r4, r7
 8017488:	b2a4      	uxth	r4, r4
 801748a:	fa0f f884 	sxth.w	r8, r4
 801748e:	45c1      	cmp	r9, r8
 8017490:	da2f      	bge.n	80174f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017492:	8882      	ldrh	r2, [r0, #4]
 8017494:	444a      	add	r2, r9
 8017496:	b292      	uxth	r2, r2
 8017498:	fa0f fe82 	sxth.w	lr, r2
 801749c:	4577      	cmp	r7, lr
 801749e:	da28      	bge.n	80174f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80174a0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80174a4:	88cb      	ldrh	r3, [r1, #6]
 80174a6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80174aa:	442b      	add	r3, r5
 80174ac:	b21b      	sxth	r3, r3
 80174ae:	429e      	cmp	r6, r3
 80174b0:	da1f      	bge.n	80174f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80174b2:	88c3      	ldrh	r3, [r0, #6]
 80174b4:	4433      	add	r3, r6
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	fa0f fc83 	sxth.w	ip, r3
 80174bc:	4565      	cmp	r5, ip
 80174be:	da18      	bge.n	80174f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80174c0:	454f      	cmp	r7, r9
 80174c2:	bfb8      	it	lt
 80174c4:	464f      	movlt	r7, r9
 80174c6:	42b5      	cmp	r5, r6
 80174c8:	bfb8      	it	lt
 80174ca:	4635      	movlt	r5, r6
 80174cc:	45f0      	cmp	r8, lr
 80174ce:	bfd8      	it	le
 80174d0:	4622      	movle	r2, r4
 80174d2:	1bd2      	subs	r2, r2, r7
 80174d4:	8082      	strh	r2, [r0, #4]
 80174d6:	884a      	ldrh	r2, [r1, #2]
 80174d8:	88c9      	ldrh	r1, [r1, #6]
 80174da:	8007      	strh	r7, [r0, #0]
 80174dc:	440a      	add	r2, r1
 80174de:	b292      	uxth	r2, r2
 80174e0:	b211      	sxth	r1, r2
 80174e2:	458c      	cmp	ip, r1
 80174e4:	bfa8      	it	ge
 80174e6:	4613      	movge	r3, r2
 80174e8:	1b5b      	subs	r3, r3, r5
 80174ea:	80c3      	strh	r3, [r0, #6]
 80174ec:	8045      	strh	r5, [r0, #2]
 80174ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174f2:	2300      	movs	r3, #0
 80174f4:	8003      	strh	r3, [r0, #0]
 80174f6:	8043      	strh	r3, [r0, #2]
 80174f8:	8083      	strh	r3, [r0, #4]
 80174fa:	80c3      	strh	r3, [r0, #6]
 80174fc:	e7f7      	b.n	80174ee <_ZN8touchgfx4RectaNERKS0_+0x76>

080174fe <_ZNK8touchgfx4Rect7isEmptyEv>:
 80174fe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017502:	2b00      	cmp	r3, #0
 8017504:	dd06      	ble.n	8017514 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017506:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801750a:	2800      	cmp	r0, #0
 801750c:	bfcc      	ite	gt
 801750e:	2000      	movgt	r0, #0
 8017510:	2001      	movle	r0, #1
 8017512:	4770      	bx	lr
 8017514:	2001      	movs	r0, #1
 8017516:	4770      	bx	lr

08017518 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801751c:	2300      	movs	r3, #0
 801751e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017520:	8003      	strh	r3, [r0, #0]
 8017522:	4604      	mov	r4, r0
 8017524:	8043      	strh	r3, [r0, #2]
 8017526:	8083      	strh	r3, [r0, #4]
 8017528:	80c3      	strh	r3, [r0, #6]
 801752a:	2d00      	cmp	r5, #0
 801752c:	d040      	beq.n	80175b0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801752e:	1d28      	adds	r0, r5, #4
 8017530:	f7ff ffe5 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8017534:	b988      	cbnz	r0, 801755a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017536:	4620      	mov	r0, r4
 8017538:	f7ff ffe1 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801753c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017540:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017544:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017548:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801754c:	b138      	cbz	r0, 801755e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801754e:	8022      	strh	r2, [r4, #0]
 8017550:	8063      	strh	r3, [r4, #2]
 8017552:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017556:	f8a4 c006 	strh.w	ip, [r4, #6]
 801755a:	69ad      	ldr	r5, [r5, #24]
 801755c:	e7e5      	b.n	801752a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801755e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017562:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017566:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801756a:	4290      	cmp	r0, r2
 801756c:	4607      	mov	r7, r0
 801756e:	bfa8      	it	ge
 8017570:	4617      	movge	r7, r2
 8017572:	4472      	add	r2, lr
 8017574:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017578:	8027      	strh	r7, [r4, #0]
 801757a:	4299      	cmp	r1, r3
 801757c:	460e      	mov	r6, r1
 801757e:	4440      	add	r0, r8
 8017580:	bfa8      	it	ge
 8017582:	461e      	movge	r6, r3
 8017584:	4471      	add	r1, lr
 8017586:	4463      	add	r3, ip
 8017588:	b200      	sxth	r0, r0
 801758a:	b212      	sxth	r2, r2
 801758c:	b209      	sxth	r1, r1
 801758e:	b21b      	sxth	r3, r3
 8017590:	4290      	cmp	r0, r2
 8017592:	bfac      	ite	ge
 8017594:	ebc7 0200 	rsbge	r2, r7, r0
 8017598:	ebc7 0202 	rsblt	r2, r7, r2
 801759c:	4299      	cmp	r1, r3
 801759e:	bfac      	ite	ge
 80175a0:	ebc6 0301 	rsbge	r3, r6, r1
 80175a4:	ebc6 0303 	rsblt	r3, r6, r3
 80175a8:	8066      	strh	r6, [r4, #2]
 80175aa:	80a2      	strh	r2, [r4, #4]
 80175ac:	80e3      	strh	r3, [r4, #6]
 80175ae:	e7d4      	b.n	801755a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80175b0:	4620      	mov	r0, r4
 80175b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080175b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80175b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80175ba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80175be:	b383      	cbz	r3, 8017622 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80175c0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80175c2:	b374      	cbz	r4, 8017622 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80175c4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80175c8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80175cc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80175d0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80175d4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80175d8:	b303      	cbz	r3, 801761c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80175da:	4668      	mov	r0, sp
 80175dc:	1d21      	adds	r1, r4, #4
 80175de:	f8ad 5000 	strh.w	r5, [sp]
 80175e2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80175e6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80175ea:	f8ad 8006 	strh.w	r8, [sp, #6]
 80175ee:	f7ff ff43 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 80175f2:	4668      	mov	r0, sp
 80175f4:	f7ff ff83 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80175f8:	b980      	cbnz	r0, 801761c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80175fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80175fe:	88a2      	ldrh	r2, [r4, #4]
 8017600:	1a9b      	subs	r3, r3, r2
 8017602:	f8ad 3000 	strh.w	r3, [sp]
 8017606:	88e2      	ldrh	r2, [r4, #6]
 8017608:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801760c:	1a9b      	subs	r3, r3, r2
 801760e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017612:	6823      	ldr	r3, [r4, #0]
 8017614:	4669      	mov	r1, sp
 8017616:	689b      	ldr	r3, [r3, #8]
 8017618:	4620      	mov	r0, r4
 801761a:	4798      	blx	r3
 801761c:	69a4      	ldr	r4, [r4, #24]
 801761e:	2c00      	cmp	r4, #0
 8017620:	d1d8      	bne.n	80175d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017622:	b002      	add	sp, #8
 8017624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017628 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017628:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801762a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801762e:	460d      	mov	r5, r1
 8017630:	4616      	mov	r6, r2
 8017632:	b323      	cbz	r3, 801767e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017634:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017636:	b314      	cbz	r4, 801767e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017638:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801763c:	b1eb      	cbz	r3, 801767a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801763e:	6828      	ldr	r0, [r5, #0]
 8017640:	6869      	ldr	r1, [r5, #4]
 8017642:	466b      	mov	r3, sp
 8017644:	c303      	stmia	r3!, {r0, r1}
 8017646:	4668      	mov	r0, sp
 8017648:	1d21      	adds	r1, r4, #4
 801764a:	f7ff ff15 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801764e:	4668      	mov	r0, sp
 8017650:	f7ff ff55 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8017654:	b988      	cbnz	r0, 801767a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017656:	f8bd 3000 	ldrh.w	r3, [sp]
 801765a:	88a2      	ldrh	r2, [r4, #4]
 801765c:	1a9b      	subs	r3, r3, r2
 801765e:	f8ad 3000 	strh.w	r3, [sp]
 8017662:	88e2      	ldrh	r2, [r4, #6]
 8017664:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017668:	1a9b      	subs	r3, r3, r2
 801766a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801766e:	6823      	ldr	r3, [r4, #0]
 8017670:	4632      	mov	r2, r6
 8017672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017674:	4669      	mov	r1, sp
 8017676:	4620      	mov	r0, r4
 8017678:	4798      	blx	r3
 801767a:	69a4      	ldr	r4, [r4, #24]
 801767c:	e7db      	b.n	8017636 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801767e:	b002      	add	sp, #8
 8017680:	bd70      	pop	{r4, r5, r6, pc}

08017682 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8017682:	b513      	push	{r0, r1, r4, lr}
 8017684:	6803      	ldr	r3, [r0, #0]
 8017686:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 801768a:	2300      	movs	r3, #0
 801768c:	e9cd 3300 	strd	r3, r3, [sp]
 8017690:	466b      	mov	r3, sp
 8017692:	47a0      	blx	r4
 8017694:	b002      	add	sp, #8
 8017696:	bd10      	pop	{r4, pc}

08017698 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017698:	2301      	movs	r3, #1
 801769a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801769e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80176a2:	4770      	bx	lr

080176a4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80176a4:	2301      	movs	r3, #1
 80176a6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80176aa:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80176ae:	4770      	bx	lr

080176b0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80176b0:	6843      	ldr	r3, [r0, #4]
 80176b2:	2201      	movs	r2, #1
 80176b4:	725a      	strb	r2, [r3, #9]
 80176b6:	6840      	ldr	r0, [r0, #4]
 80176b8:	6803      	ldr	r3, [r0, #0]
 80176ba:	691b      	ldr	r3, [r3, #16]
 80176bc:	4718      	bx	r3

080176be <_ZN8touchgfx3HAL8flushDMAEv>:
 80176be:	6840      	ldr	r0, [r0, #4]
 80176c0:	6803      	ldr	r3, [r0, #0]
 80176c2:	689b      	ldr	r3, [r3, #8]
 80176c4:	4718      	bx	r3

080176c6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80176c6:	b530      	push	{r4, r5, lr}
 80176c8:	b08b      	sub	sp, #44	; 0x2c
 80176ca:	6804      	ldr	r4, [r0, #0]
 80176cc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80176d0:	9509      	str	r5, [sp, #36]	; 0x24
 80176d2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80176d6:	9508      	str	r5, [sp, #32]
 80176d8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80176dc:	9507      	str	r5, [sp, #28]
 80176de:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80176e2:	9506      	str	r5, [sp, #24]
 80176e4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80176e8:	9505      	str	r5, [sp, #20]
 80176ea:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80176ee:	9504      	str	r5, [sp, #16]
 80176f0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80176f4:	9503      	str	r5, [sp, #12]
 80176f6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80176fa:	9502      	str	r5, [sp, #8]
 80176fc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017700:	e9cd 3500 	strd	r3, r5, [sp]
 8017704:	4613      	mov	r3, r2
 8017706:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017708:	2200      	movs	r2, #0
 801770a:	47a0      	blx	r4
 801770c:	b00b      	add	sp, #44	; 0x2c
 801770e:	bd30      	pop	{r4, r5, pc}

08017710 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017710:	4b04      	ldr	r3, [pc, #16]	; (8017724 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	b123      	cbz	r3, 8017720 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017716:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801771a:	f080 0001 	eor.w	r0, r0, #1
 801771e:	4770      	bx	lr
 8017720:	2001      	movs	r0, #1
 8017722:	4770      	bx	lr
 8017724:	200097a6 	.word	0x200097a6

08017728 <_ZN8touchgfx3HAL8endFrameEv>:
 8017728:	b510      	push	{r4, lr}
 801772a:	4604      	mov	r4, r0
 801772c:	6840      	ldr	r0, [r0, #4]
 801772e:	6803      	ldr	r3, [r0, #0]
 8017730:	689b      	ldr	r3, [r3, #8]
 8017732:	4798      	blx	r3
 8017734:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017738:	b113      	cbz	r3, 8017740 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801773a:	2301      	movs	r3, #1
 801773c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017740:	bd10      	pop	{r4, pc}

08017742 <_ZN8touchgfx3HAL10initializeEv>:
 8017742:	b510      	push	{r4, lr}
 8017744:	4604      	mov	r4, r0
 8017746:	f7fd ff89 	bl	801565c <_ZN8touchgfx10OSWrappers10initializeEv>
 801774a:	6860      	ldr	r0, [r4, #4]
 801774c:	6803      	ldr	r3, [r0, #0]
 801774e:	68db      	ldr	r3, [r3, #12]
 8017750:	4798      	blx	r3
 8017752:	68e0      	ldr	r0, [r4, #12]
 8017754:	6803      	ldr	r3, [r0, #0]
 8017756:	689b      	ldr	r3, [r3, #8]
 8017758:	4798      	blx	r3
 801775a:	6823      	ldr	r3, [r4, #0]
 801775c:	4620      	mov	r0, r4
 801775e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017764:	4718      	bx	r3

08017766 <_ZN8touchgfx3HAL9taskEntryEv>:
 8017766:	b508      	push	{r3, lr}
 8017768:	6803      	ldr	r3, [r0, #0]
 801776a:	4604      	mov	r4, r0
 801776c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801776e:	4798      	blx	r3
 8017770:	6823      	ldr	r3, [r4, #0]
 8017772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017774:	4620      	mov	r0, r4
 8017776:	4798      	blx	r3
 8017778:	f7fd ffe6 	bl	8015748 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801777c:	6823      	ldr	r3, [r4, #0]
 801777e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017780:	e7f8      	b.n	8017774 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08017784 <_ZN8touchgfx3HAL4tickEv>:
 8017784:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017786:	6803      	ldr	r3, [r0, #0]
 8017788:	4d5c      	ldr	r5, [pc, #368]	; (80178fc <_ZN8touchgfx3HAL4tickEv+0x178>)
 801778a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801778e:	4604      	mov	r4, r0
 8017790:	4798      	blx	r3
 8017792:	2800      	cmp	r0, #0
 8017794:	f000 8097 	beq.w	80178c6 <_ZN8touchgfx3HAL4tickEv+0x142>
 8017798:	2001      	movs	r0, #1
 801779a:	f7fd fd0b 	bl	80151b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801779e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80177a2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80177a6:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80177aa:	2600      	movs	r6, #0
 80177ac:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80177b0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80177b4:	b133      	cbz	r3, 80177c4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80177b6:	6823      	ldr	r3, [r4, #0]
 80177b8:	4620      	mov	r0, r4
 80177ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80177be:	4798      	blx	r3
 80177c0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80177c4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80177c8:	6862      	ldr	r2, [r4, #4]
 80177ca:	f083 0301 	eor.w	r3, r3, #1
 80177ce:	7253      	strb	r3, [r2, #9]
 80177d0:	2601      	movs	r6, #1
 80177d2:	702e      	strb	r6, [r5, #0]
 80177d4:	f004 fc1e 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 80177d8:	6803      	ldr	r3, [r0, #0]
 80177da:	4631      	mov	r1, r6
 80177dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177de:	4798      	blx	r3
 80177e0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80177e4:	b90b      	cbnz	r3, 80177ea <_ZN8touchgfx3HAL4tickEv+0x66>
 80177e6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80177ea:	f004 fc13 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 80177ee:	6803      	ldr	r3, [r0, #0]
 80177f0:	695b      	ldr	r3, [r3, #20]
 80177f2:	4798      	blx	r3
 80177f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177f6:	6803      	ldr	r3, [r0, #0]
 80177f8:	691b      	ldr	r3, [r3, #16]
 80177fa:	4798      	blx	r3
 80177fc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017800:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017804:	3b01      	subs	r3, #1
 8017806:	b2db      	uxtb	r3, r3
 8017808:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801780c:	b10a      	cbz	r2, 8017812 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801780e:	2b00      	cmp	r3, #0
 8017810:	d1eb      	bne.n	80177ea <_ZN8touchgfx3HAL4tickEv+0x66>
 8017812:	4a3b      	ldr	r2, [pc, #236]	; (8017900 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017814:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017818:	7813      	ldrb	r3, [r2, #0]
 801781a:	3301      	adds	r3, #1
 801781c:	b25b      	sxtb	r3, r3
 801781e:	4299      	cmp	r1, r3
 8017820:	7013      	strb	r3, [r2, #0]
 8017822:	dc10      	bgt.n	8017846 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017824:	68e0      	ldr	r0, [r4, #12]
 8017826:	2300      	movs	r3, #0
 8017828:	7013      	strb	r3, [r2, #0]
 801782a:	6803      	ldr	r3, [r0, #0]
 801782c:	aa03      	add	r2, sp, #12
 801782e:	68db      	ldr	r3, [r3, #12]
 8017830:	a902      	add	r1, sp, #8
 8017832:	4798      	blx	r3
 8017834:	6823      	ldr	r3, [r4, #0]
 8017836:	2800      	cmp	r0, #0
 8017838:	d051      	beq.n	80178de <_ZN8touchgfx3HAL4tickEv+0x15a>
 801783a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801783e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017842:	4620      	mov	r0, r4
 8017844:	4798      	blx	r3
 8017846:	6960      	ldr	r0, [r4, #20]
 8017848:	2300      	movs	r3, #0
 801784a:	f88d 3007 	strb.w	r3, [sp, #7]
 801784e:	b158      	cbz	r0, 8017868 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8017850:	6803      	ldr	r3, [r0, #0]
 8017852:	f10d 0107 	add.w	r1, sp, #7
 8017856:	68db      	ldr	r3, [r3, #12]
 8017858:	4798      	blx	r3
 801785a:	b128      	cbz	r0, 8017868 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801785c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801785e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017862:	6803      	ldr	r3, [r0, #0]
 8017864:	68db      	ldr	r3, [r3, #12]
 8017866:	4798      	blx	r3
 8017868:	f104 001c 	add.w	r0, r4, #28
 801786c:	f013 ff52 	bl	802b714 <_ZN8touchgfx8Gestures4tickEv>
 8017870:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8017874:	b30b      	cbz	r3, 80178ba <_ZN8touchgfx3HAL4tickEv+0x136>
 8017876:	6920      	ldr	r0, [r4, #16]
 8017878:	6803      	ldr	r3, [r0, #0]
 801787a:	691b      	ldr	r3, [r3, #16]
 801787c:	4798      	blx	r3
 801787e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017880:	4606      	mov	r6, r0
 8017882:	b903      	cbnz	r3, 8017886 <_ZN8touchgfx3HAL4tickEv+0x102>
 8017884:	6720      	str	r0, [r4, #112]	; 0x70
 8017886:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017888:	4a1e      	ldr	r2, [pc, #120]	; (8017904 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801788a:	1af3      	subs	r3, r6, r3
 801788c:	4293      	cmp	r3, r2
 801788e:	d914      	bls.n	80178ba <_ZN8touchgfx3HAL4tickEv+0x136>
 8017890:	6920      	ldr	r0, [r4, #16]
 8017892:	6803      	ldr	r3, [r0, #0]
 8017894:	699b      	ldr	r3, [r3, #24]
 8017896:	4798      	blx	r3
 8017898:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801789a:	2264      	movs	r2, #100	; 0x64
 801789c:	1af3      	subs	r3, r6, r3
 801789e:	fbb3 f3f2 	udiv	r3, r3, r2
 80178a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80178a6:	2800      	cmp	r0, #0
 80178a8:	dc1e      	bgt.n	80178e8 <_ZN8touchgfx3HAL4tickEv+0x164>
 80178aa:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80178ae:	6920      	ldr	r0, [r4, #16]
 80178b0:	6803      	ldr	r3, [r0, #0]
 80178b2:	2100      	movs	r1, #0
 80178b4:	69db      	ldr	r3, [r3, #28]
 80178b6:	4798      	blx	r3
 80178b8:	6726      	str	r6, [r4, #112]	; 0x70
 80178ba:	f004 fbab 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 80178be:	6803      	ldr	r3, [r0, #0]
 80178c0:	2100      	movs	r1, #0
 80178c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178c4:	4798      	blx	r3
 80178c6:	6823      	ldr	r3, [r4, #0]
 80178c8:	4620      	mov	r0, r4
 80178ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80178ce:	4798      	blx	r3
 80178d0:	2001      	movs	r0, #1
 80178d2:	f7fd fc7a 	bl	80151ca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80178d6:	2300      	movs	r3, #0
 80178d8:	702b      	strb	r3, [r5, #0]
 80178da:	b004      	add	sp, #16
 80178dc:	bd70      	pop	{r4, r5, r6, pc}
 80178de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80178e2:	4620      	mov	r0, r4
 80178e4:	4798      	blx	r3
 80178e6:	e7ae      	b.n	8017846 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80178e8:	2863      	cmp	r0, #99	; 0x63
 80178ea:	bfcb      	itete	gt
 80178ec:	2300      	movgt	r3, #0
 80178ee:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80178f2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80178f6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80178fa:	e7d8      	b.n	80178ae <_ZN8touchgfx3HAL4tickEv+0x12a>
 80178fc:	200097ac 	.word	0x200097ac
 8017900:	200097ad 	.word	0x200097ad
 8017904:	05f5e100 	.word	0x05f5e100

08017908 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017908:	f7fd beea 	b.w	80156e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801790c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801790c:	6581      	str	r1, [r0, #88]	; 0x58
 801790e:	301c      	adds	r0, #28
 8017910:	f013 befe 	b.w	802b710 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017914 <_ZN8touchgfx3HAL5touchEll>:
 8017914:	b530      	push	{r4, r5, lr}
 8017916:	b087      	sub	sp, #28
 8017918:	4604      	mov	r4, r0
 801791a:	a804      	add	r0, sp, #16
 801791c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017920:	f004 f93e 	bl	801bba0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017924:	9b04      	ldr	r3, [sp, #16]
 8017926:	f8ad 300c 	strh.w	r3, [sp, #12]
 801792a:	a906      	add	r1, sp, #24
 801792c:	9b05      	ldr	r3, [sp, #20]
 801792e:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017932:	a803      	add	r0, sp, #12
 8017934:	f004 f986 	bl	801bc44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017938:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801793c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017940:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017944:	f104 001c 	add.w	r0, r4, #28
 8017948:	b189      	cbz	r1, 801796e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801794a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801794e:	9300      	str	r3, [sp, #0]
 8017950:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017954:	4613      	mov	r3, r2
 8017956:	462a      	mov	r2, r5
 8017958:	f013 feea 	bl	802b730 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801795c:	b128      	cbz	r0, 801796a <_ZN8touchgfx3HAL5touchEll+0x56>
 801795e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017962:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017964:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017968:	6623      	str	r3, [r4, #96]	; 0x60
 801796a:	b007      	add	sp, #28
 801796c:	bd30      	pop	{r4, r5, pc}
 801796e:	f013 ff23 	bl	802b7b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017972:	2301      	movs	r3, #1
 8017974:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017978:	e7f1      	b.n	801795e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801797a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801797a:	b510      	push	{r4, lr}
 801797c:	2b00      	cmp	r3, #0
 801797e:	d046      	beq.n	8017a0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017980:	ea81 0002 	eor.w	r0, r1, r2
 8017984:	07c4      	lsls	r4, r0, #31
 8017986:	d508      	bpl.n	801799a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017988:	440b      	add	r3, r1
 801798a:	3a01      	subs	r2, #1
 801798c:	428b      	cmp	r3, r1
 801798e:	d93e      	bls.n	8017a0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017990:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017994:	f801 0b01 	strb.w	r0, [r1], #1
 8017998:	e7f8      	b.n	801798c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801799a:	07d0      	lsls	r0, r2, #31
 801799c:	bf42      	ittt	mi
 801799e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80179a2:	f801 0b01 	strbmi.w	r0, [r1], #1
 80179a6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80179aa:	2b01      	cmp	r3, #1
 80179ac:	d911      	bls.n	80179d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80179ae:	ea81 0402 	eor.w	r4, r1, r2
 80179b2:	07a4      	lsls	r4, r4, #30
 80179b4:	4610      	mov	r0, r2
 80179b6:	d022      	beq.n	80179fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80179b8:	f023 0401 	bic.w	r4, r3, #1
 80179bc:	440c      	add	r4, r1
 80179be:	428c      	cmp	r4, r1
 80179c0:	4602      	mov	r2, r0
 80179c2:	d904      	bls.n	80179ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80179c4:	8812      	ldrh	r2, [r2, #0]
 80179c6:	f821 2b02 	strh.w	r2, [r1], #2
 80179ca:	3002      	adds	r0, #2
 80179cc:	e7f7      	b.n	80179be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80179ce:	f003 0301 	and.w	r3, r3, #1
 80179d2:	f023 0003 	bic.w	r0, r3, #3
 80179d6:	4408      	add	r0, r1
 80179d8:	4288      	cmp	r0, r1
 80179da:	4614      	mov	r4, r2
 80179dc:	d904      	bls.n	80179e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80179de:	6824      	ldr	r4, [r4, #0]
 80179e0:	f841 4b04 	str.w	r4, [r1], #4
 80179e4:	3204      	adds	r2, #4
 80179e6:	e7f7      	b.n	80179d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80179e8:	f003 0303 	and.w	r3, r3, #3
 80179ec:	440b      	add	r3, r1
 80179ee:	3a01      	subs	r2, #1
 80179f0:	428b      	cmp	r3, r1
 80179f2:	d90c      	bls.n	8017a0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80179f4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80179f8:	f801 0b01 	strb.w	r0, [r1], #1
 80179fc:	e7f8      	b.n	80179f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80179fe:	0790      	lsls	r0, r2, #30
 8017a00:	d0e7      	beq.n	80179d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017a02:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017a06:	f821 0b02 	strh.w	r0, [r1], #2
 8017a0a:	3b02      	subs	r3, #2
 8017a0c:	e7e1      	b.n	80179d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017a0e:	2001      	movs	r0, #1
 8017a10:	bd10      	pop	{r4, pc}

08017a12 <_ZN8touchgfx3HAL7noTouchEv>:
 8017a12:	b510      	push	{r4, lr}
 8017a14:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017a18:	4604      	mov	r4, r0
 8017a1a:	b153      	cbz	r3, 8017a32 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017a1c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017a20:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017a24:	2101      	movs	r1, #1
 8017a26:	301c      	adds	r0, #28
 8017a28:	f013 fec6 	bl	802b7b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017a32:	bd10      	pop	{r4, pc}

08017a34 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a38:	4604      	mov	r4, r0
 8017a3a:	6980      	ldr	r0, [r0, #24]
 8017a3c:	b085      	sub	sp, #20
 8017a3e:	460f      	mov	r7, r1
 8017a40:	4690      	mov	r8, r2
 8017a42:	4699      	mov	r9, r3
 8017a44:	b930      	cbnz	r0, 8017a54 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8017a46:	4b1c      	ldr	r3, [pc, #112]	; (8017ab8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8017a48:	4a1c      	ldr	r2, [pc, #112]	; (8017abc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017a4a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8017a4e:	481c      	ldr	r0, [pc, #112]	; (8017ac0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8017a50:	f016 f9fe 	bl	802de50 <__assert_func>
 8017a54:	ad04      	add	r5, sp, #16
 8017a56:	2600      	movs	r6, #0
 8017a58:	f845 6d04 	str.w	r6, [r5, #-4]!
 8017a5c:	6806      	ldr	r6, [r0, #0]
 8017a5e:	9501      	str	r5, [sp, #4]
 8017a60:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017a64:	9500      	str	r5, [sp, #0]
 8017a66:	6835      	ldr	r5, [r6, #0]
 8017a68:	47a8      	blx	r5
 8017a6a:	4d16      	ldr	r5, [pc, #88]	; (8017ac4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8017a6c:	4606      	mov	r6, r0
 8017a6e:	f8a5 9000 	strh.w	r9, [r5]
 8017a72:	f7f8 fa4f 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 8017a76:	6803      	ldr	r3, [r0, #0]
 8017a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a7a:	4798      	blx	r3
 8017a7c:	2801      	cmp	r0, #1
 8017a7e:	d012      	beq.n	8017aa6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8017a80:	d306      	bcc.n	8017a90 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8017a82:	280d      	cmp	r0, #13
 8017a84:	d80b      	bhi.n	8017a9e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017a86:	4b10      	ldr	r3, [pc, #64]	; (8017ac8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017a88:	4a0c      	ldr	r2, [pc, #48]	; (8017abc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017a8a:	f240 1167 	movw	r1, #359	; 0x167
 8017a8e:	e7de      	b.n	8017a4e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017a90:	882b      	ldrh	r3, [r5, #0]
 8017a92:	fb08 7203 	mla	r2, r8, r3, r7
 8017a96:	9b03      	ldr	r3, [sp, #12]
 8017a98:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017a9c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017a9e:	4630      	mov	r0, r6
 8017aa0:	b005      	add	sp, #20
 8017aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017aa6:	882a      	ldrh	r2, [r5, #0]
 8017aa8:	9b03      	ldr	r3, [sp, #12]
 8017aaa:	fb08 7202 	mla	r2, r8, r2, r7
 8017aae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017ab2:	1a9a      	subs	r2, r3, r2
 8017ab4:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017ab6:	e7f2      	b.n	8017a9e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017ab8:	08030c58 	.word	0x08030c58
 8017abc:	08030fe7 	.word	0x08030fe7
 8017ac0:	08030c9d 	.word	0x08030c9d
 8017ac4:	200097a2 	.word	0x200097a2
 8017ac8:	08030cc3 	.word	0x08030cc3

08017acc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ace:	b08b      	sub	sp, #44	; 0x2c
 8017ad0:	4617      	mov	r7, r2
 8017ad2:	4604      	mov	r4, r0
 8017ad4:	460e      	mov	r6, r1
 8017ad6:	461d      	mov	r5, r3
 8017ad8:	f7f8 fa1c 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 8017adc:	6803      	ldr	r3, [r0, #0]
 8017ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ae0:	4798      	blx	r3
 8017ae2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017ae6:	9007      	str	r0, [sp, #28]
 8017ae8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017aec:	4b0d      	ldr	r3, [pc, #52]	; (8017b24 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017aee:	6822      	ldr	r2, [r4, #0]
 8017af0:	881b      	ldrh	r3, [r3, #0]
 8017af2:	9306      	str	r3, [sp, #24]
 8017af4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017af8:	9305      	str	r3, [sp, #20]
 8017afa:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017afe:	9304      	str	r3, [sp, #16]
 8017b00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017b04:	9303      	str	r3, [sp, #12]
 8017b06:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017b0a:	9302      	str	r3, [sp, #8]
 8017b0c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017b10:	e9cd 5300 	strd	r5, r3, [sp]
 8017b14:	4631      	mov	r1, r6
 8017b16:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017b18:	463b      	mov	r3, r7
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	4620      	mov	r0, r4
 8017b1e:	47a8      	blx	r5
 8017b20:	b00b      	add	sp, #44	; 0x2c
 8017b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b24:	200097a2 	.word	0x200097a2

08017b28 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b2c:	4698      	mov	r8, r3
 8017b2e:	6803      	ldr	r3, [r0, #0]
 8017b30:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017b32:	4b15      	ldr	r3, [pc, #84]	; (8017b88 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017b34:	b08b      	sub	sp, #44	; 0x2c
 8017b36:	4617      	mov	r7, r2
 8017b38:	f8b3 9000 	ldrh.w	r9, [r3]
 8017b3c:	460e      	mov	r6, r1
 8017b3e:	4604      	mov	r4, r0
 8017b40:	f7f8 f9e8 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 8017b44:	6803      	ldr	r3, [r0, #0]
 8017b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b48:	4798      	blx	r3
 8017b4a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017b4e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017b52:	2302      	movs	r3, #2
 8017b54:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8017b58:	2301      	movs	r3, #1
 8017b5a:	9305      	str	r3, [sp, #20]
 8017b5c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017b60:	9304      	str	r3, [sp, #16]
 8017b62:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017b66:	9303      	str	r3, [sp, #12]
 8017b68:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017b6c:	9302      	str	r3, [sp, #8]
 8017b6e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017b72:	2200      	movs	r2, #0
 8017b74:	e9cd 8300 	strd	r8, r3, [sp]
 8017b78:	4631      	mov	r1, r6
 8017b7a:	463b      	mov	r3, r7
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	47a8      	blx	r5
 8017b80:	b00b      	add	sp, #44	; 0x2c
 8017b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b86:	bf00      	nop
 8017b88:	200097a2 	.word	0x200097a2

08017b8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b90:	4698      	mov	r8, r3
 8017b92:	6803      	ldr	r3, [r0, #0]
 8017b94:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017b96:	4b11      	ldr	r3, [pc, #68]	; (8017bdc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017b98:	b087      	sub	sp, #28
 8017b9a:	f8b3 9000 	ldrh.w	r9, [r3]
 8017b9e:	460e      	mov	r6, r1
 8017ba0:	4617      	mov	r7, r2
 8017ba2:	4604      	mov	r4, r0
 8017ba4:	f7f8 f9b6 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 8017ba8:	6803      	ldr	r3, [r0, #0]
 8017baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bac:	4798      	blx	r3
 8017bae:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017bb2:	f8cd 900c 	str.w	r9, [sp, #12]
 8017bb6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017bba:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017bbe:	9302      	str	r3, [sp, #8]
 8017bc0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017bc4:	9301      	str	r3, [sp, #4]
 8017bc6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017bca:	9300      	str	r3, [sp, #0]
 8017bcc:	463a      	mov	r2, r7
 8017bce:	4643      	mov	r3, r8
 8017bd0:	4631      	mov	r1, r6
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	47a8      	blx	r5
 8017bd6:	b007      	add	sp, #28
 8017bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bdc:	200097a2 	.word	0x200097a2

08017be0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be4:	4604      	mov	r4, r0
 8017be6:	b08f      	sub	sp, #60	; 0x3c
 8017be8:	4610      	mov	r0, r2
 8017bea:	460d      	mov	r5, r1
 8017bec:	4691      	mov	r9, r2
 8017bee:	461e      	mov	r6, r3
 8017bf0:	f007 fd5c 	bl	801f6ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	f000 809c 	beq.w	8017d32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8017bfa:	6823      	ldr	r3, [r4, #0]
 8017bfc:	f8df b194 	ldr.w	fp, [pc, #404]	; 8017d94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8017c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c02:	f8df a194 	ldr.w	sl, [pc, #404]	; 8017d98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017c06:	4f60      	ldr	r7, [pc, #384]	; (8017d88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017c08:	4620      	mov	r0, r4
 8017c0a:	4798      	blx	r3
 8017c0c:	6823      	ldr	r3, [r4, #0]
 8017c0e:	4620      	mov	r0, r4
 8017c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c12:	4798      	blx	r3
 8017c14:	f8bb 3000 	ldrh.w	r3, [fp]
 8017c18:	9301      	str	r3, [sp, #4]
 8017c1a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017c1e:	f8ba 3000 	ldrh.w	r3, [sl]
 8017c22:	9302      	str	r3, [sp, #8]
 8017c24:	883b      	ldrh	r3, [r7, #0]
 8017c26:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017c2a:	9303      	str	r3, [sp, #12]
 8017c2c:	4b57      	ldr	r3, [pc, #348]	; (8017d8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017c2e:	9305      	str	r3, [sp, #20]
 8017c30:	881a      	ldrh	r2, [r3, #0]
 8017c32:	9204      	str	r2, [sp, #16]
 8017c34:	4640      	mov	r0, r8
 8017c36:	f007 fdf3 	bl	801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c3a:	8038      	strh	r0, [r7, #0]
 8017c3c:	4640      	mov	r0, r8
 8017c3e:	f007 fe29 	bl	801f894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017c42:	9b05      	ldr	r3, [sp, #20]
 8017c44:	8018      	strh	r0, [r3, #0]
 8017c46:	4b52      	ldr	r3, [pc, #328]	; (8017d90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017c48:	781b      	ldrb	r3, [r3, #0]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d174      	bne.n	8017d38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8017c4e:	883b      	ldrh	r3, [r7, #0]
 8017c50:	f8ab 3000 	strh.w	r3, [fp]
 8017c54:	f8aa 0000 	strh.w	r0, [sl]
 8017c58:	4648      	mov	r0, r9
 8017c5a:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017c5e:	f007 fd25 	bl	801f6ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017c62:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017c66:	2200      	movs	r2, #0
 8017c68:	4611      	mov	r1, r2
 8017c6a:	4628      	mov	r0, r5
 8017c6c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017c70:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017c74:	f7f8 fe8e 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
 8017c78:	2301      	movs	r3, #1
 8017c7a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017c7e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017c82:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	dd5c      	ble.n	8017d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017c8a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	dd58      	ble.n	8017d44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017c92:	462a      	mov	r2, r5
 8017c94:	ab0a      	add	r3, sp, #40	; 0x28
 8017c96:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017c9a:	6851      	ldr	r1, [r2, #4]
 8017c9c:	c303      	stmia	r3!, {r0, r1}
 8017c9e:	4631      	mov	r1, r6
 8017ca0:	a80a      	add	r0, sp, #40	; 0x28
 8017ca2:	f7ff fbe9 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 8017ca6:	4b38      	ldr	r3, [pc, #224]	; (8017d88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017ca8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017cac:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017cb0:	2100      	movs	r1, #0
 8017cb2:	aa0a      	add	r2, sp, #40	; 0x28
 8017cb4:	4b35      	ldr	r3, [pc, #212]	; (8017d8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017cb6:	910c      	str	r1, [sp, #48]	; 0x30
 8017cb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017cc0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017cc4:	ab08      	add	r3, sp, #32
 8017cc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8017cca:	4618      	mov	r0, r3
 8017ccc:	a90c      	add	r1, sp, #48	; 0x30
 8017cce:	f7ff fbd3 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 8017cd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d13c      	bne.n	8017d52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8017cd8:	2000      	movs	r0, #0
 8017cda:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017cde:	2600      	movs	r6, #0
 8017ce0:	682a      	ldr	r2, [r5, #0]
 8017ce2:	696b      	ldr	r3, [r5, #20]
 8017ce4:	616e      	str	r6, [r5, #20]
 8017ce6:	9305      	str	r3, [sp, #20]
 8017ce8:	6892      	ldr	r2, [r2, #8]
 8017cea:	a908      	add	r1, sp, #32
 8017cec:	4628      	mov	r0, r5
 8017cee:	4790      	blx	r2
 8017cf0:	9b05      	ldr	r3, [sp, #20]
 8017cf2:	616b      	str	r3, [r5, #20]
 8017cf4:	4652      	mov	r2, sl
 8017cf6:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017cfa:	4649      	mov	r1, r9
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017d02:	f7f8 fe47 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
 8017d06:	4b23      	ldr	r3, [pc, #140]	; (8017d94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017d08:	9a01      	ldr	r2, [sp, #4]
 8017d0a:	801a      	strh	r2, [r3, #0]
 8017d0c:	4b22      	ldr	r3, [pc, #136]	; (8017d98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017d0e:	9a02      	ldr	r2, [sp, #8]
 8017d10:	801a      	strh	r2, [r3, #0]
 8017d12:	4b1d      	ldr	r3, [pc, #116]	; (8017d88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017d14:	9a03      	ldr	r2, [sp, #12]
 8017d16:	801a      	strh	r2, [r3, #0]
 8017d18:	4b1c      	ldr	r3, [pc, #112]	; (8017d8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017d1a:	9a04      	ldr	r2, [sp, #16]
 8017d1c:	801a      	strh	r2, [r3, #0]
 8017d1e:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017d22:	6823      	ldr	r3, [r4, #0]
 8017d24:	4620      	mov	r0, r4
 8017d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d28:	4798      	blx	r3
 8017d2a:	6823      	ldr	r3, [r4, #0]
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d30:	4798      	blx	r3
 8017d32:	b00f      	add	sp, #60	; 0x3c
 8017d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d38:	883b      	ldrh	r3, [r7, #0]
 8017d3a:	f8ab 0000 	strh.w	r0, [fp]
 8017d3e:	f8aa 3000 	strh.w	r3, [sl]
 8017d42:	e789      	b.n	8017c58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8017d44:	462a      	mov	r2, r5
 8017d46:	ab0a      	add	r3, sp, #40	; 0x28
 8017d48:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017d4c:	6851      	ldr	r1, [r2, #4]
 8017d4e:	c303      	stmia	r3!, {r0, r1}
 8017d50:	e7a9      	b.n	8017ca6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8017d52:	a807      	add	r0, sp, #28
 8017d54:	f007 fef6 	bl	801fb44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017d58:	4606      	mov	r6, r0
 8017d5a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017d5c:	6803      	ldr	r3, [r0, #0]
 8017d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d60:	4798      	blx	r3
 8017d62:	4286      	cmp	r6, r0
 8017d64:	d1b8      	bne.n	8017cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8017d66:	f7f8 f8d5 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 8017d6a:	6803      	ldr	r3, [r0, #0]
 8017d6c:	4606      	mov	r6, r0
 8017d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d70:	9305      	str	r3, [sp, #20]
 8017d72:	a807      	add	r0, sp, #28
 8017d74:	f007 fee6 	bl	801fb44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017d78:	9b05      	ldr	r3, [sp, #20]
 8017d7a:	4601      	mov	r1, r0
 8017d7c:	4630      	mov	r0, r6
 8017d7e:	4798      	blx	r3
 8017d80:	f080 0001 	eor.w	r0, r0, #1
 8017d84:	b2c0      	uxtb	r0, r0
 8017d86:	e7a8      	b.n	8017cda <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017d88:	2000979c 	.word	0x2000979c
 8017d8c:	2000979e 	.word	0x2000979e
 8017d90:	200097a0 	.word	0x200097a0
 8017d94:	200097a2 	.word	0x200097a2
 8017d98:	200097a4 	.word	0x200097a4

08017d9c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017d9c:	b510      	push	{r4, lr}
 8017d9e:	4b07      	ldr	r3, [pc, #28]	; (8017dbc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	4604      	mov	r4, r0
 8017da4:	b13b      	cbz	r3, 8017db6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017da6:	6803      	ldr	r3, [r0, #0]
 8017da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017daa:	4798      	blx	r3
 8017dac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017dae:	4283      	cmp	r3, r0
 8017db0:	d101      	bne.n	8017db6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017db2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017db4:	bd10      	pop	{r4, pc}
 8017db6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017db8:	e7fc      	b.n	8017db4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017dba:	bf00      	nop
 8017dbc:	200097a6 	.word	0x200097a6

08017dc0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dc4:	b088      	sub	sp, #32
 8017dc6:	461d      	mov	r5, r3
 8017dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017dcc:	2400      	movs	r4, #0
 8017dce:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8017dd2:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8017dd6:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8017dda:	9403      	str	r4, [sp, #12]
 8017ddc:	e9cd 3100 	strd	r3, r1, [sp]
 8017de0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017de4:	f8ad 8014 	strh.w	r8, [sp, #20]
 8017de8:	4692      	mov	sl, r2
 8017dea:	4606      	mov	r6, r0
 8017dec:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017df0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017df4:	f88d 401c 	strb.w	r4, [sp, #28]
 8017df8:	f7ff ffd0 	bl	8017d9c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017dfc:	fb09 a505 	mla	r5, r9, r5, sl
 8017e00:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017e04:	9504      	str	r5, [sp, #16]
 8017e06:	f8ad 901a 	strh.w	r9, [sp, #26]
 8017e0a:	f88d 401e 	strb.w	r4, [sp, #30]
 8017e0e:	f88d 401d 	strb.w	r4, [sp, #29]
 8017e12:	f88d 401f 	strb.w	r4, [sp, #31]
 8017e16:	f1b8 0f00 	cmp.w	r8, #0
 8017e1a:	d000      	beq.n	8017e1e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8017e1c:	b937      	cbnz	r7, 8017e2c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8017e1e:	4b0d      	ldr	r3, [pc, #52]	; (8017e54 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8017e20:	4a0d      	ldr	r2, [pc, #52]	; (8017e58 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8017e22:	f240 210b 	movw	r1, #523	; 0x20b
 8017e26:	480d      	ldr	r0, [pc, #52]	; (8017e5c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8017e28:	f016 f812 	bl	802de50 <__assert_func>
 8017e2c:	6833      	ldr	r3, [r6, #0]
 8017e2e:	9c00      	ldr	r4, [sp, #0]
 8017e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e32:	4630      	mov	r0, r6
 8017e34:	4798      	blx	r3
 8017e36:	4220      	tst	r0, r4
 8017e38:	d104      	bne.n	8017e44 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8017e3a:	4b09      	ldr	r3, [pc, #36]	; (8017e60 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8017e3c:	4a06      	ldr	r2, [pc, #24]	; (8017e58 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8017e3e:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8017e42:	e7f0      	b.n	8017e26 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8017e44:	6870      	ldr	r0, [r6, #4]
 8017e46:	6803      	ldr	r3, [r0, #0]
 8017e48:	4669      	mov	r1, sp
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	4798      	blx	r3
 8017e4e:	b008      	add	sp, #32
 8017e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e54:	08030aeb 	.word	0x08030aeb
 8017e58:	08030e1c 	.word	0x08030e1c
 8017e5c:	08030c9d 	.word	0x08030c9d
 8017e60:	08030b23 	.word	0x08030b23

08017e64 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8017e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e68:	b089      	sub	sp, #36	; 0x24
 8017e6a:	2400      	movs	r4, #0
 8017e6c:	461d      	mov	r5, r3
 8017e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017e72:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8017e76:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8017e7a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8017e7e:	9403      	str	r4, [sp, #12]
 8017e80:	468a      	mov	sl, r1
 8017e82:	4693      	mov	fp, r2
 8017e84:	4606      	mov	r6, r0
 8017e86:	e9cd 3400 	strd	r3, r4, [sp]
 8017e8a:	f7ff ff87 	bl	8017d9c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017e8e:	fb09 b505 	mla	r5, r9, r5, fp
 8017e92:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017e96:	9504      	str	r5, [sp, #16]
 8017e98:	f8ad 8014 	strh.w	r8, [sp, #20]
 8017e9c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017ea0:	f8ad 4018 	strh.w	r4, [sp, #24]
 8017ea4:	f8ad 901a 	strh.w	r9, [sp, #26]
 8017ea8:	f8cd a00c 	str.w	sl, [sp, #12]
 8017eac:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017eb0:	f88d 401e 	strb.w	r4, [sp, #30]
 8017eb4:	f88d 401f 	strb.w	r4, [sp, #31]
 8017eb8:	f1b8 0f00 	cmp.w	r8, #0
 8017ebc:	d000      	beq.n	8017ec0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8017ebe:	b937      	cbnz	r7, 8017ece <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8017ec0:	4b0d      	ldr	r3, [pc, #52]	; (8017ef8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8017ec2:	4a0e      	ldr	r2, [pc, #56]	; (8017efc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8017ec4:	f240 2121 	movw	r1, #545	; 0x221
 8017ec8:	480d      	ldr	r0, [pc, #52]	; (8017f00 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8017eca:	f015 ffc1 	bl	802de50 <__assert_func>
 8017ece:	6833      	ldr	r3, [r6, #0]
 8017ed0:	9c00      	ldr	r4, [sp, #0]
 8017ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ed4:	4630      	mov	r0, r6
 8017ed6:	4798      	blx	r3
 8017ed8:	4220      	tst	r0, r4
 8017eda:	d104      	bne.n	8017ee6 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8017edc:	4b09      	ldr	r3, [pc, #36]	; (8017f04 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8017ede:	4a07      	ldr	r2, [pc, #28]	; (8017efc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8017ee0:	f240 2122 	movw	r1, #546	; 0x222
 8017ee4:	e7f0      	b.n	8017ec8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8017ee6:	6870      	ldr	r0, [r6, #4]
 8017ee8:	6803      	ldr	r3, [r0, #0]
 8017eea:	4669      	mov	r1, sp
 8017eec:	685b      	ldr	r3, [r3, #4]
 8017eee:	4798      	blx	r3
 8017ef0:	b009      	add	sp, #36	; 0x24
 8017ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ef6:	bf00      	nop
 8017ef8:	08030b68 	.word	0x08030b68
 8017efc:	08030e92 	.word	0x08030e92
 8017f00:	08030c9d 	.word	0x08030c9d
 8017f04:	08030ba0 	.word	0x08030ba0

08017f08 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8017f08:	b510      	push	{r4, lr}
 8017f0a:	4b0b      	ldr	r3, [pc, #44]	; (8017f38 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8017f0c:	781b      	ldrb	r3, [r3, #0]
 8017f0e:	4604      	mov	r4, r0
 8017f10:	b95b      	cbnz	r3, 8017f2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017f12:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017f16:	2b02      	cmp	r3, #2
 8017f18:	d007      	beq.n	8017f2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017f1a:	6840      	ldr	r0, [r0, #4]
 8017f1c:	f000 fb5e 	bl	80185dc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017f20:	b118      	cbz	r0, 8017f2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017f22:	6862      	ldr	r2, [r4, #4]
 8017f24:	7a53      	ldrb	r3, [r2, #9]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d0fc      	beq.n	8017f24 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8017f2a:	f7fd fbcb 	bl	80156c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017f2e:	4620      	mov	r0, r4
 8017f30:	f7ff ff34 	bl	8017d9c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017f34:	bd10      	pop	{r4, pc}
 8017f36:	bf00      	nop
 8017f38:	200097a6 	.word	0x200097a6

08017f3c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8017f3c:	b508      	push	{r3, lr}
 8017f3e:	290d      	cmp	r1, #13
 8017f40:	d817      	bhi.n	8017f72 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8017f42:	e8df f001 	tbb	[pc, r1]
 8017f46:	090b      	.short	0x090b
 8017f48:	0d0d0d07 	.word	0x0d0d0d07
 8017f4c:	1414140d 	.word	0x1414140d
 8017f50:	0d0d1414 	.word	0x0d0d1414
 8017f54:	2020      	movs	r0, #32
 8017f56:	bd08      	pop	{r3, pc}
 8017f58:	2018      	movs	r0, #24
 8017f5a:	e7fc      	b.n	8017f56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017f5c:	2010      	movs	r0, #16
 8017f5e:	e7fa      	b.n	8017f56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017f60:	4b05      	ldr	r3, [pc, #20]	; (8017f78 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8017f62:	4a06      	ldr	r2, [pc, #24]	; (8017f7c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8017f64:	4806      	ldr	r0, [pc, #24]	; (8017f80 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8017f66:	f240 2182 	movw	r1, #642	; 0x282
 8017f6a:	f015 ff71 	bl	802de50 <__assert_func>
 8017f6e:	2008      	movs	r0, #8
 8017f70:	e7f1      	b.n	8017f56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017f72:	2000      	movs	r0, #0
 8017f74:	e7ef      	b.n	8017f56 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017f76:	bf00      	nop
 8017f78:	08030d19 	.word	0x08030d19
 8017f7c:	080311bd 	.word	0x080311bd
 8017f80:	08030c9d 	.word	0x08030c9d

08017f84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8017f84:	b570      	push	{r4, r5, r6, lr}
 8017f86:	460d      	mov	r5, r1
 8017f88:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8017f8c:	4616      	mov	r6, r2
 8017f8e:	461c      	mov	r4, r3
 8017f90:	f7ff ffd4 	bl	8017f3c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8017f94:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017f98:	10c0      	asrs	r0, r0, #3
 8017f9a:	fb06 5101 	mla	r1, r6, r1, r5
 8017f9e:	fb00 4001 	mla	r0, r0, r1, r4
 8017fa2:	bd70      	pop	{r4, r5, r6, pc}

08017fa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8017fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fa8:	b08a      	sub	sp, #40	; 0x28
 8017faa:	f04f 0c00 	mov.w	ip, #0
 8017fae:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8017fb2:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8017fb6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8017fba:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8017fbe:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8017fc2:	f8cd c014 	str.w	ip, [sp, #20]
 8017fc6:	2d0b      	cmp	r5, #11
 8017fc8:	4604      	mov	r4, r0
 8017fca:	469a      	mov	sl, r3
 8017fcc:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017fd0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017fd4:	d12d      	bne.n	8018032 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8017fd6:	2080      	movs	r0, #128	; 0x80
 8017fd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017fdc:	9204      	str	r2, [sp, #16]
 8017fde:	4620      	mov	r0, r4
 8017fe0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017fe4:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017fe8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017fec:	f8ad 701c 	strh.w	r7, [sp, #28]
 8017ff0:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017ff4:	f7ff fed2 	bl	8017d9c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017ff8:	e9cd 9800 	strd	r9, r8, [sp]
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018002:	4651      	mov	r1, sl
 8018004:	4620      	mov	r0, r4
 8018006:	f7ff ffbd 	bl	8017f84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801800a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801800e:	9006      	str	r0, [sp, #24]
 8018010:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8018014:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018018:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 801801c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018020:	b107      	cbz	r7, 8018024 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018022:	b9d6      	cbnz	r6, 801805a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018024:	4b17      	ldr	r3, [pc, #92]	; (8018084 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8018026:	4a18      	ldr	r2, [pc, #96]	; (8018088 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018028:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 801802c:	4817      	ldr	r0, [pc, #92]	; (801808c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 801802e:	f015 ff0f 	bl	802de50 <__assert_func>
 8018032:	2d02      	cmp	r5, #2
 8018034:	d108      	bne.n	8018048 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8018036:	2bff      	cmp	r3, #255	; 0xff
 8018038:	d104      	bne.n	8018044 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 801803a:	2800      	cmp	r0, #0
 801803c:	bf14      	ite	ne
 801803e:	2040      	movne	r0, #64	; 0x40
 8018040:	2020      	moveq	r0, #32
 8018042:	e7c9      	b.n	8017fd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018044:	2040      	movs	r0, #64	; 0x40
 8018046:	e7c7      	b.n	8017fd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018048:	2bff      	cmp	r3, #255	; 0xff
 801804a:	d104      	bne.n	8018056 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 801804c:	2800      	cmp	r0, #0
 801804e:	bf14      	ite	ne
 8018050:	2004      	movne	r0, #4
 8018052:	2001      	moveq	r0, #1
 8018054:	e7c0      	b.n	8017fd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018056:	2004      	movs	r0, #4
 8018058:	e7be      	b.n	8017fd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801805a:	6823      	ldr	r3, [r4, #0]
 801805c:	9d02      	ldr	r5, [sp, #8]
 801805e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018060:	4620      	mov	r0, r4
 8018062:	4798      	blx	r3
 8018064:	4228      	tst	r0, r5
 8018066:	d104      	bne.n	8018072 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8018068:	4b09      	ldr	r3, [pc, #36]	; (8018090 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 801806a:	4a07      	ldr	r2, [pc, #28]	; (8018088 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 801806c:	f240 11d5 	movw	r1, #469	; 0x1d5
 8018070:	e7dc      	b.n	801802c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8018072:	6860      	ldr	r0, [r4, #4]
 8018074:	6803      	ldr	r3, [r0, #0]
 8018076:	a902      	add	r1, sp, #8
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	4798      	blx	r3
 801807c:	b00a      	add	sp, #40	; 0x28
 801807e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018082:	bf00      	nop
 8018084:	08030aeb 	.word	0x08030aeb
 8018088:	0803104b 	.word	0x0803104b
 801808c:	08030c9d 	.word	0x08030c9d
 8018090:	08030b23 	.word	0x08030b23

08018094 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018098:	b08b      	sub	sp, #44	; 0x2c
 801809a:	469b      	mov	fp, r3
 801809c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80180a0:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80180a4:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80180a8:	2fff      	cmp	r7, #255	; 0xff
 80180aa:	bf14      	ite	ne
 80180ac:	2308      	movne	r3, #8
 80180ae:	2302      	moveq	r3, #2
 80180b0:	2600      	movs	r6, #0
 80180b2:	4604      	mov	r4, r0
 80180b4:	4689      	mov	r9, r1
 80180b6:	4692      	mov	sl, r2
 80180b8:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80180bc:	9605      	str	r6, [sp, #20]
 80180be:	f7ff fe6d 	bl	8017d9c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80180c2:	e9cd 8500 	strd	r8, r5, [sp]
 80180c6:	4603      	mov	r3, r0
 80180c8:	465a      	mov	r2, fp
 80180ca:	4651      	mov	r1, sl
 80180cc:	4620      	mov	r0, r4
 80180ce:	f7ff ff59 	bl	8017f84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80180d2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80180d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80180da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80180de:	f8ad 301e 	strh.w	r3, [sp, #30]
 80180e2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80180e6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 80180ea:	6823      	ldr	r3, [r4, #0]
 80180ec:	9006      	str	r0, [sp, #24]
 80180ee:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80180f2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80180f6:	f8ad 6020 	strh.w	r6, [sp, #32]
 80180fa:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 80180fe:	f8cd 9014 	str.w	r9, [sp, #20]
 8018102:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018108:	9d02      	ldr	r5, [sp, #8]
 801810a:	4620      	mov	r0, r4
 801810c:	4798      	blx	r3
 801810e:	4228      	tst	r0, r5
 8018110:	d106      	bne.n	8018120 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8018112:	4b07      	ldr	r3, [pc, #28]	; (8018130 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8018114:	4a07      	ldr	r2, [pc, #28]	; (8018134 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8018116:	4808      	ldr	r0, [pc, #32]	; (8018138 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8018118:	f240 2137 	movw	r1, #567	; 0x237
 801811c:	f015 fe98 	bl	802de50 <__assert_func>
 8018120:	6860      	ldr	r0, [r4, #4]
 8018122:	6803      	ldr	r3, [r0, #0]
 8018124:	a902      	add	r1, sp, #8
 8018126:	685b      	ldr	r3, [r3, #4]
 8018128:	4798      	blx	r3
 801812a:	b00b      	add	sp, #44	; 0x2c
 801812c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018130:	08030b23 	.word	0x08030b23
 8018134:	08031122 	.word	0x08031122
 8018138:	08030c9d 	.word	0x08030c9d

0801813c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801813c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018140:	461f      	mov	r7, r3
 8018142:	4b0b      	ldr	r3, [pc, #44]	; (8018170 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018144:	460d      	mov	r5, r1
 8018146:	f8b3 8000 	ldrh.w	r8, [r3]
 801814a:	4616      	mov	r6, r2
 801814c:	4604      	mov	r4, r0
 801814e:	f7f7 fee1 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 8018152:	6803      	ldr	r3, [r0, #0]
 8018154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018156:	4798      	blx	r3
 8018158:	463b      	mov	r3, r7
 801815a:	e9cd 8000 	strd	r8, r0, [sp]
 801815e:	4632      	mov	r2, r6
 8018160:	4629      	mov	r1, r5
 8018162:	4620      	mov	r0, r4
 8018164:	f7ff ff0e 	bl	8017f84 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018168:	b002      	add	sp, #8
 801816a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801816e:	bf00      	nop
 8018170:	200097a2 	.word	0x200097a2

08018174 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018178:	b088      	sub	sp, #32
 801817a:	4698      	mov	r8, r3
 801817c:	2300      	movs	r3, #0
 801817e:	9303      	str	r3, [sp, #12]
 8018180:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018184:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018188:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801818c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8018190:	e9cd 3100 	strd	r3, r1, [sp]
 8018194:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018198:	f8ad 3018 	strh.w	r3, [sp, #24]
 801819c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80181a0:	f88d 301c 	strb.w	r3, [sp, #28]
 80181a4:	4617      	mov	r7, r2
 80181a6:	4604      	mov	r4, r0
 80181a8:	f8ad 5016 	strh.w	r5, [sp, #22]
 80181ac:	f7ff fdf6 	bl	8017d9c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80181b0:	4642      	mov	r2, r8
 80181b2:	4603      	mov	r3, r0
 80181b4:	4639      	mov	r1, r7
 80181b6:	4620      	mov	r0, r4
 80181b8:	f7ff ffc0 	bl	801813c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80181bc:	4b18      	ldr	r3, [pc, #96]	; (8018220 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 80181be:	9004      	str	r0, [sp, #16]
 80181c0:	881b      	ldrh	r3, [r3, #0]
 80181c2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80181c6:	f7f7 fea5 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 80181ca:	6803      	ldr	r3, [r0, #0]
 80181cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181ce:	4798      	blx	r3
 80181d0:	f88d 001e 	strb.w	r0, [sp, #30]
 80181d4:	f88d 001d 	strb.w	r0, [sp, #29]
 80181d8:	b106      	cbz	r6, 80181dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 80181da:	b935      	cbnz	r5, 80181ea <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 80181dc:	4b11      	ldr	r3, [pc, #68]	; (8018224 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 80181de:	4a12      	ldr	r2, [pc, #72]	; (8018228 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 80181e0:	f240 11f1 	movw	r1, #497	; 0x1f1
 80181e4:	4811      	ldr	r0, [pc, #68]	; (801822c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 80181e6:	f015 fe33 	bl	802de50 <__assert_func>
 80181ea:	6823      	ldr	r3, [r4, #0]
 80181ec:	9d00      	ldr	r5, [sp, #0]
 80181ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181f0:	4620      	mov	r0, r4
 80181f2:	4798      	blx	r3
 80181f4:	4228      	tst	r0, r5
 80181f6:	d104      	bne.n	8018202 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 80181f8:	4b0d      	ldr	r3, [pc, #52]	; (8018230 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 80181fa:	4a0b      	ldr	r2, [pc, #44]	; (8018228 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 80181fc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8018200:	e7f0      	b.n	80181e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018204:	9303      	str	r3, [sp, #12]
 8018206:	6860      	ldr	r0, [r4, #4]
 8018208:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801820c:	f88d 301f 	strb.w	r3, [sp, #31]
 8018210:	6803      	ldr	r3, [r0, #0]
 8018212:	4669      	mov	r1, sp
 8018214:	685b      	ldr	r3, [r3, #4]
 8018216:	4798      	blx	r3
 8018218:	b008      	add	sp, #32
 801821a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801821e:	bf00      	nop
 8018220:	200097a2 	.word	0x200097a2
 8018224:	08030aeb 	.word	0x08030aeb
 8018228:	08030ef7 	.word	0x08030ef7
 801822c:	08030c9d 	.word	0x08030c9d
 8018230:	08030b23 	.word	0x08030b23

08018234 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018236:	b08b      	sub	sp, #44	; 0x2c
 8018238:	466b      	mov	r3, sp
 801823a:	e883 0006 	stmia.w	r3, {r1, r2}
 801823e:	4b21      	ldr	r3, [pc, #132]	; (80182c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018240:	781b      	ldrb	r3, [r3, #0]
 8018242:	4604      	mov	r4, r0
 8018244:	b933      	cbnz	r3, 8018254 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8018246:	4b20      	ldr	r3, [pc, #128]	; (80182c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8018248:	4a20      	ldr	r2, [pc, #128]	; (80182cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801824a:	4821      	ldr	r0, [pc, #132]	; (80182d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801824c:	f44f 7112 	mov.w	r1, #584	; 0x248
 8018250:	f015 fdfe 	bl	802de50 <__assert_func>
 8018254:	2301      	movs	r3, #1
 8018256:	9302      	str	r3, [sp, #8]
 8018258:	6803      	ldr	r3, [r0, #0]
 801825a:	f8bd 6000 	ldrh.w	r6, [sp]
 801825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018260:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018264:	2500      	movs	r5, #0
 8018266:	9505      	str	r5, [sp, #20]
 8018268:	4798      	blx	r3
 801826a:	463a      	mov	r2, r7
 801826c:	4631      	mov	r1, r6
 801826e:	4603      	mov	r3, r0
 8018270:	4620      	mov	r0, r4
 8018272:	f7ff ff63 	bl	801813c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018276:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018278:	9306      	str	r3, [sp, #24]
 801827a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801827e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018282:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018286:	f8ad 301e 	strh.w	r3, [sp, #30]
 801828a:	4b12      	ldr	r3, [pc, #72]	; (80182d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 801828c:	9003      	str	r0, [sp, #12]
 801828e:	881b      	ldrh	r3, [r3, #0]
 8018290:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018294:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018298:	f7f7 fe3c 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 801829c:	6803      	ldr	r3, [r0, #0]
 801829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182a0:	4798      	blx	r3
 80182a2:	23ff      	movs	r3, #255	; 0xff
 80182a4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80182a8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80182ac:	6860      	ldr	r0, [r4, #4]
 80182ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80182b2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 80182b6:	6803      	ldr	r3, [r0, #0]
 80182b8:	a902      	add	r1, sp, #8
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	4798      	blx	r3
 80182be:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80182c0:	b00b      	add	sp, #44	; 0x2c
 80182c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182c4:	200097a7 	.word	0x200097a7
 80182c8:	08030bea 	.word	0x08030bea
 80182cc:	08030fa1 	.word	0x08030fa1
 80182d0:	08030c9d 	.word	0x08030c9d
 80182d4:	200097a2 	.word	0x200097a2

080182d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80182d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182dc:	b08a      	sub	sp, #40	; 0x28
 80182de:	466d      	mov	r5, sp
 80182e0:	e885 0006 	stmia.w	r5, {r1, r2}
 80182e4:	461d      	mov	r5, r3
 80182e6:	2301      	movs	r3, #1
 80182e8:	9302      	str	r3, [sp, #8]
 80182ea:	6803      	ldr	r3, [r0, #0]
 80182ec:	f8bd 7000 	ldrh.w	r7, [sp]
 80182f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182f2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80182f6:	2600      	movs	r6, #0
 80182f8:	9605      	str	r6, [sp, #20]
 80182fa:	4604      	mov	r4, r0
 80182fc:	4798      	blx	r3
 80182fe:	4642      	mov	r2, r8
 8018300:	4639      	mov	r1, r7
 8018302:	4603      	mov	r3, r0
 8018304:	4620      	mov	r0, r4
 8018306:	f7ff ff19 	bl	801813c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801830a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801830e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018312:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018316:	f8ad 301e 	strh.w	r3, [sp, #30]
 801831a:	4b10      	ldr	r3, [pc, #64]	; (801835c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 801831c:	9003      	str	r0, [sp, #12]
 801831e:	881b      	ldrh	r3, [r3, #0]
 8018320:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018326:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801832a:	9506      	str	r5, [sp, #24]
 801832c:	f7f7 fdf2 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 8018330:	6803      	ldr	r3, [r0, #0]
 8018332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018334:	4798      	blx	r3
 8018336:	23ff      	movs	r3, #255	; 0xff
 8018338:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801833c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018340:	6860      	ldr	r0, [r4, #4]
 8018342:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018346:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 801834a:	6803      	ldr	r3, [r0, #0]
 801834c:	a902      	add	r1, sp, #8
 801834e:	685b      	ldr	r3, [r3, #4]
 8018350:	4798      	blx	r3
 8018352:	4628      	mov	r0, r5
 8018354:	b00a      	add	sp, #40	; 0x28
 8018356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801835a:	bf00      	nop
 801835c:	200097a2 	.word	0x200097a2

08018360 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018360:	b570      	push	{r4, r5, r6, lr}
 8018362:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018366:	4604      	mov	r4, r0
 8018368:	b19b      	cbz	r3, 8018392 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801836a:	2002      	movs	r0, #2
 801836c:	f7fc ff38 	bl	80151e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018370:	2300      	movs	r3, #0
 8018372:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018376:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801837a:	6823      	ldr	r3, [r4, #0]
 801837c:	4620      	mov	r0, r4
 801837e:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8018382:	f7ff fd0b 	bl	8017d9c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018386:	462b      	mov	r3, r5
 8018388:	4601      	mov	r1, r0
 801838a:	4620      	mov	r0, r4
 801838c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018390:	4718      	bx	r3
 8018392:	bd70      	pop	{r4, r5, r6, pc}

08018394 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018394:	4770      	bx	lr

08018396 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8018396:	4770      	bx	lr

08018398 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8018398:	2000      	movs	r0, #0
 801839a:	4770      	bx	lr

0801839c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801839c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80183a0:	1a13      	subs	r3, r2, r0
 80183a2:	4258      	negs	r0, r3
 80183a4:	4158      	adcs	r0, r3
 80183a6:	4770      	bx	lr

080183a8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80183a8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80183ac:	1a9b      	subs	r3, r3, r2
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	bfdc      	itt	le
 80183b2:	6882      	ldrle	r2, [r0, #8]
 80183b4:	189b      	addle	r3, r3, r2
 80183b6:	2b01      	cmp	r3, #1
 80183b8:	bfcc      	ite	gt
 80183ba:	2000      	movgt	r0, #0
 80183bc:	2001      	movle	r0, #1
 80183be:	4770      	bx	lr

080183c0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80183c0:	6902      	ldr	r2, [r0, #16]
 80183c2:	6840      	ldr	r0, [r0, #4]
 80183c4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80183c8:	4770      	bx	lr

080183ca <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80183ca:	6803      	ldr	r3, [r0, #0]
 80183cc:	691b      	ldr	r3, [r3, #16]
 80183ce:	4718      	bx	r3

080183d0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80183d0:	4770      	bx	lr

080183d2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80183d2:	4770      	bx	lr

080183d4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80183d4:	b570      	push	{r4, r5, r6, lr}
 80183d6:	2301      	movs	r3, #1
 80183d8:	7203      	strb	r3, [r0, #8]
 80183da:	4604      	mov	r4, r0
 80183dc:	6840      	ldr	r0, [r0, #4]
 80183de:	6803      	ldr	r3, [r0, #0]
 80183e0:	699b      	ldr	r3, [r3, #24]
 80183e2:	4798      	blx	r3
 80183e4:	6803      	ldr	r3, [r0, #0]
 80183e6:	2b40      	cmp	r3, #64	; 0x40
 80183e8:	4605      	mov	r5, r0
 80183ea:	d039      	beq.n	8018460 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80183ec:	d815      	bhi.n	801841a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80183ee:	2b04      	cmp	r3, #4
 80183f0:	d022      	beq.n	8018438 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80183f2:	d808      	bhi.n	8018406 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80183f4:	2b01      	cmp	r3, #1
 80183f6:	d033      	beq.n	8018460 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80183f8:	2b02      	cmp	r3, #2
 80183fa:	d108      	bne.n	801840e <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 80183fc:	6823      	ldr	r3, [r4, #0]
 80183fe:	4620      	mov	r0, r4
 8018400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018402:	4798      	blx	r3
 8018404:	e025      	b.n	8018452 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8018406:	2b08      	cmp	r3, #8
 8018408:	d01e      	beq.n	8018448 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 801840a:	2b20      	cmp	r3, #32
 801840c:	d028      	beq.n	8018460 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801840e:	4b17      	ldr	r3, [pc, #92]	; (801846c <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8018410:	4a17      	ldr	r2, [pc, #92]	; (8018470 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8018412:	4818      	ldr	r0, [pc, #96]	; (8018474 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8018414:	218b      	movs	r1, #139	; 0x8b
 8018416:	f015 fd1b 	bl	802de50 <__assert_func>
 801841a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801841e:	d01f      	beq.n	8018460 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018420:	d804      	bhi.n	801842c <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8018422:	2b80      	cmp	r3, #128	; 0x80
 8018424:	d01c      	beq.n	8018460 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801842a:	e7ef      	b.n	801840c <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 801842c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018430:	d016      	beq.n	8018460 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018436:	e7e0      	b.n	80183fa <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8018438:	6823      	ldr	r3, [r4, #0]
 801843a:	7f01      	ldrb	r1, [r0, #28]
 801843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801843e:	4620      	mov	r0, r4
 8018440:	4798      	blx	r3
 8018442:	6823      	ldr	r3, [r4, #0]
 8018444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018446:	e006      	b.n	8018456 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8018448:	6823      	ldr	r3, [r4, #0]
 801844a:	7f01      	ldrb	r1, [r0, #28]
 801844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801844e:	4620      	mov	r0, r4
 8018450:	4798      	blx	r3
 8018452:	6823      	ldr	r3, [r4, #0]
 8018454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018456:	4629      	mov	r1, r5
 8018458:	4620      	mov	r0, r4
 801845a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801845e:	4718      	bx	r3
 8018460:	6823      	ldr	r3, [r4, #0]
 8018462:	4620      	mov	r0, r4
 8018464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018466:	4798      	blx	r3
 8018468:	e7eb      	b.n	8018442 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801846a:	bf00      	nop
 801846c:	08031206 	.word	0x08031206
 8018470:	08031318 	.word	0x08031318
 8018474:	0803122b 	.word	0x0803122b

08018478 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018478:	b570      	push	{r4, r5, r6, lr}
 801847a:	4604      	mov	r4, r0
 801847c:	460e      	mov	r6, r1
 801847e:	6860      	ldr	r0, [r4, #4]
 8018480:	6803      	ldr	r3, [r0, #0]
 8018482:	685b      	ldr	r3, [r3, #4]
 8018484:	4798      	blx	r3
 8018486:	2800      	cmp	r0, #0
 8018488:	d1f9      	bne.n	801847e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801848a:	4d0d      	ldr	r5, [pc, #52]	; (80184c0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801848c:	6828      	ldr	r0, [r5, #0]
 801848e:	6803      	ldr	r3, [r0, #0]
 8018490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018492:	4798      	blx	r3
 8018494:	f7fd f930 	bl	80156f8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018498:	6828      	ldr	r0, [r5, #0]
 801849a:	2101      	movs	r1, #1
 801849c:	f7ff ff7a 	bl	8018394 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80184a0:	6860      	ldr	r0, [r4, #4]
 80184a2:	6803      	ldr	r3, [r0, #0]
 80184a4:	4631      	mov	r1, r6
 80184a6:	689b      	ldr	r3, [r3, #8]
 80184a8:	4798      	blx	r3
 80184aa:	6823      	ldr	r3, [r4, #0]
 80184ac:	4620      	mov	r0, r4
 80184ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184b0:	4798      	blx	r3
 80184b2:	6828      	ldr	r0, [r5, #0]
 80184b4:	6803      	ldr	r3, [r0, #0]
 80184b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184bc:	4718      	bx	r3
 80184be:	bf00      	nop
 80184c0:	200097a8 	.word	0x200097a8

080184c4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80184c4:	b508      	push	{r3, lr}
 80184c6:	f7fd f8fd 	bl	80156c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80184ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80184ce:	f7fd b907 	b.w	80156e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080184d2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80184d2:	b510      	push	{r4, lr}
 80184d4:	4604      	mov	r4, r0
 80184d6:	6840      	ldr	r0, [r0, #4]
 80184d8:	6803      	ldr	r3, [r0, #0]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	4798      	blx	r3
 80184de:	b948      	cbnz	r0, 80184f4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80184e0:	7a63      	ldrb	r3, [r4, #9]
 80184e2:	b13b      	cbz	r3, 80184f4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80184e4:	7a23      	ldrb	r3, [r4, #8]
 80184e6:	b92b      	cbnz	r3, 80184f4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80184e8:	6823      	ldr	r3, [r4, #0]
 80184ea:	4620      	mov	r0, r4
 80184ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184f2:	4718      	bx	r3
 80184f4:	bd10      	pop	{r4, pc}
	...

080184f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80184f8:	b570      	push	{r4, r5, r6, lr}
 80184fa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80184fe:	1a9b      	subs	r3, r3, r2
 8018500:	2b00      	cmp	r3, #0
 8018502:	4606      	mov	r6, r0
 8018504:	bfdc      	itt	le
 8018506:	6880      	ldrle	r0, [r0, #8]
 8018508:	181b      	addle	r3, r3, r0
 801850a:	2b01      	cmp	r3, #1
 801850c:	dd13      	ble.n	8018536 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 801850e:	6874      	ldr	r4, [r6, #4]
 8018510:	460d      	mov	r5, r1
 8018512:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 8018516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801851a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801851e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018522:	68f3      	ldr	r3, [r6, #12]
 8018524:	68b2      	ldr	r2, [r6, #8]
 8018526:	f3bf 8f5b 	dmb	ish
 801852a:	3301      	adds	r3, #1
 801852c:	429a      	cmp	r2, r3
 801852e:	bfd8      	it	le
 8018530:	1a9b      	suble	r3, r3, r2
 8018532:	60f3      	str	r3, [r6, #12]
 8018534:	bd70      	pop	{r4, r5, r6, pc}
 8018536:	4b03      	ldr	r3, [pc, #12]	; (8018544 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 8018538:	4a03      	ldr	r2, [pc, #12]	; (8018548 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801853a:	4804      	ldr	r0, [pc, #16]	; (801854c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801853c:	2139      	movs	r1, #57	; 0x39
 801853e:	f015 fc87 	bl	802de50 <__assert_func>
 8018542:	bf00      	nop
 8018544:	08031251 	.word	0x08031251
 8018548:	08031348 	.word	0x08031348
 801854c:	0803122b 	.word	0x0803122b

08018550 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018550:	b510      	push	{r4, lr}
 8018552:	6803      	ldr	r3, [r0, #0]
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	4604      	mov	r4, r0
 8018558:	4798      	blx	r3
 801855a:	b128      	cbz	r0, 8018568 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801855c:	4b07      	ldr	r3, [pc, #28]	; (801857c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801855e:	4a08      	ldr	r2, [pc, #32]	; (8018580 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8018560:	4808      	ldr	r0, [pc, #32]	; (8018584 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8018562:	213f      	movs	r1, #63	; 0x3f
 8018564:	f015 fc74 	bl	802de50 <__assert_func>
 8018568:	6923      	ldr	r3, [r4, #16]
 801856a:	68a2      	ldr	r2, [r4, #8]
 801856c:	f3bf 8f5b 	dmb	ish
 8018570:	3301      	adds	r3, #1
 8018572:	429a      	cmp	r2, r3
 8018574:	bfd8      	it	le
 8018576:	1a9b      	suble	r3, r3, r2
 8018578:	6123      	str	r3, [r4, #16]
 801857a:	bd10      	pop	{r4, pc}
 801857c:	08031274 	.word	0x08031274
 8018580:	08031396 	.word	0x08031396
 8018584:	0803122b 	.word	0x0803122b

08018588 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018588:	b570      	push	{r4, r5, r6, lr}
 801858a:	4604      	mov	r4, r0
 801858c:	6840      	ldr	r0, [r0, #4]
 801858e:	6803      	ldr	r3, [r0, #0]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	4798      	blx	r3
 8018594:	4605      	mov	r5, r0
 8018596:	b930      	cbnz	r0, 80185a6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018598:	7a23      	ldrb	r3, [r4, #8]
 801859a:	b123      	cbz	r3, 80185a6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801859c:	6860      	ldr	r0, [r4, #4]
 801859e:	6803      	ldr	r3, [r0, #0]
 80185a0:	695b      	ldr	r3, [r3, #20]
 80185a2:	4798      	blx	r3
 80185a4:	7225      	strb	r5, [r4, #8]
 80185a6:	6860      	ldr	r0, [r4, #4]
 80185a8:	6803      	ldr	r3, [r0, #0]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	4798      	blx	r3
 80185ae:	b928      	cbnz	r0, 80185bc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80185b0:	6823      	ldr	r3, [r4, #0]
 80185b2:	4620      	mov	r0, r4
 80185b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185ba:	4718      	bx	r3
 80185bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185c0:	f7fd b8a6 	b.w	8015710 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080185c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80185c4:	b510      	push	{r4, lr}
 80185c6:	4c04      	ldr	r4, [pc, #16]	; (80185d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80185c8:	6082      	str	r2, [r0, #8]
 80185ca:	2200      	movs	r2, #0
 80185cc:	e9c0 4100 	strd	r4, r1, [r0]
 80185d0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80185d4:	bd10      	pop	{r4, pc}
 80185d6:	bf00      	nop
 80185d8:	080312fc 	.word	0x080312fc

080185dc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80185dc:	6840      	ldr	r0, [r0, #4]
 80185de:	6803      	ldr	r3, [r0, #0]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	4718      	bx	r3

080185e4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80185e4:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80185e8:	4770      	bx	lr

080185ea <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80185ea:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 80185ee:	4770      	bx	lr

080185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80185f0:	b507      	push	{r0, r1, r2, lr}
 80185f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80185f6:	ab01      	add	r3, sp, #4
 80185f8:	6809      	ldr	r1, [r1, #0]
 80185fa:	6800      	ldr	r0, [r0, #0]
 80185fc:	f004 fe9c 	bl	801d338 <_ZN8touchgfx6muldivElllRl>
 8018600:	b003      	add	sp, #12
 8018602:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08018608 <_ZN8touchgfx7CWRUtil4sineEi>:
 8018608:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801860c:	fb90 f3f2 	sdiv	r3, r0, r2
 8018610:	fb03 0312 	mls	r3, r3, r2, r0
 8018614:	4413      	add	r3, r2
 8018616:	fb93 f0f2 	sdiv	r0, r3, r2
 801861a:	fb02 3010 	mls	r0, r2, r0, r3
 801861e:	285a      	cmp	r0, #90	; 0x5a
 8018620:	4b09      	ldr	r3, [pc, #36]	; (8018648 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8018622:	dc02      	bgt.n	801862a <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8018624:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018628:	4770      	bx	lr
 801862a:	28b4      	cmp	r0, #180	; 0xb4
 801862c:	dc02      	bgt.n	8018634 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801862e:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8018632:	e7f7      	b.n	8018624 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8018634:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8018638:	bfd4      	ite	le
 801863a:	38b4      	suble	r0, #180	; 0xb4
 801863c:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8018640:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018644:	4240      	negs	r0, r0
 8018646:	4770      	bx	lr
 8018648:	080313c6 	.word	0x080313c6

0801864c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 801864c:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8018650:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018652:	fb90 f3f2 	sdiv	r3, r0, r2
 8018656:	fb03 0012 	mls	r0, r3, r2, r0
 801865a:	4410      	add	r0, r2
 801865c:	fb90 f4f2 	sdiv	r4, r0, r2
 8018660:	fb02 0414 	mls	r4, r2, r4, r0
 8018664:	f004 061f 	and.w	r6, r4, #31
 8018668:	1164      	asrs	r4, r4, #5
 801866a:	4620      	mov	r0, r4
 801866c:	f7ff ffcc 	bl	8018608 <_ZN8touchgfx7CWRUtil4sineEi>
 8018670:	4605      	mov	r5, r0
 8018672:	b90e      	cbnz	r6, 8018678 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8018674:	b002      	add	sp, #8
 8018676:	bd70      	pop	{r4, r5, r6, pc}
 8018678:	1c60      	adds	r0, r4, #1
 801867a:	f7ff ffc5 	bl	8018608 <_ZN8touchgfx7CWRUtil4sineEi>
 801867e:	ab01      	add	r3, sp, #4
 8018680:	2220      	movs	r2, #32
 8018682:	4631      	mov	r1, r6
 8018684:	1b40      	subs	r0, r0, r5
 8018686:	f004 fe57 	bl	801d338 <_ZN8touchgfx6muldivElllRl>
 801868a:	4428      	add	r0, r5
 801868c:	e7f2      	b.n	8018674 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

0801868e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801868e:	b508      	push	{r3, lr}
 8018690:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8018694:	f7ff ffda 	bl	801864c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018698:	bd08      	pop	{r3, pc}
	...

0801869c <_ZN8touchgfx6CircleC1Ev>:
 801869c:	b510      	push	{r4, lr}
 801869e:	4604      	mov	r4, r0
 80186a0:	f000 fcde 	bl	8019060 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80186a4:	4b08      	ldr	r3, [pc, #32]	; (80186c8 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80186a6:	6023      	str	r3, [r4, #0]
 80186a8:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80186ac:	2300      	movs	r3, #0
 80186ae:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 80186b2:	f24b 4205 	movw	r2, #46085	; 0xb405
 80186b6:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80186ba:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80186be:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 80186c2:	60a3      	str	r3, [r4, #8]
 80186c4:	4620      	mov	r0, r4
 80186c6:	bd10      	pop	{r4, pc}
 80186c8:	08031484 	.word	0x08031484

080186cc <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 80186cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80186d0:	4606      	mov	r6, r0
 80186d2:	6810      	ldr	r0, [r2, #0]
 80186d4:	4698      	mov	r8, r3
 80186d6:	4691      	mov	r9, r2
 80186d8:	460f      	mov	r7, r1
 80186da:	f7ff ffb7 	bl	801864c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80186de:	a902      	add	r1, sp, #8
 80186e0:	2402      	movs	r4, #2
 80186e2:	f841 0d08 	str.w	r0, [r1, #-8]!
 80186e6:	4640      	mov	r0, r8
 80186e8:	f7ff ff82 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80186ec:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80186ee:	fb90 f0f4 	sdiv	r0, r0, r4
 80186f2:	4405      	add	r5, r0
 80186f4:	f8d9 0000 	ldr.w	r0, [r9]
 80186f8:	f7ff ffc9 	bl	801868e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80186fc:	a902      	add	r1, sp, #8
 80186fe:	f841 0d04 	str.w	r0, [r1, #-4]!
 8018702:	4640      	mov	r0, r8
 8018704:	f7ff ff74 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018708:	6b72      	ldr	r2, [r6, #52]	; 0x34
 801870a:	fb90 f0f4 	sdiv	r0, r0, r4
 801870e:	4629      	mov	r1, r5
 8018710:	1a12      	subs	r2, r2, r0
 8018712:	4638      	mov	r0, r7
 8018714:	f013 facd 	bl	802bcb2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018718:	b003      	add	sp, #12
 801871a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801871e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 801871e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018722:	9e08      	ldr	r6, [sp, #32]
 8018724:	6830      	ldr	r0, [r6, #0]
 8018726:	4698      	mov	r8, r3
 8018728:	4615      	mov	r5, r2
 801872a:	460f      	mov	r7, r1
 801872c:	f7ff ff8e 	bl	801864c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018730:	a902      	add	r1, sp, #8
 8018732:	2402      	movs	r4, #2
 8018734:	f841 0d08 	str.w	r0, [r1, #-8]!
 8018738:	9809      	ldr	r0, [sp, #36]	; 0x24
 801873a:	f7ff ff59 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801873e:	682d      	ldr	r5, [r5, #0]
 8018740:	fb90 f0f4 	sdiv	r0, r0, r4
 8018744:	4405      	add	r5, r0
 8018746:	6830      	ldr	r0, [r6, #0]
 8018748:	f7ff ffa1 	bl	801868e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801874c:	a902      	add	r1, sp, #8
 801874e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8018752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018754:	f7ff ff4c 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018758:	f8d8 2000 	ldr.w	r2, [r8]
 801875c:	fb90 f0f4 	sdiv	r0, r0, r4
 8018760:	4629      	mov	r1, r5
 8018762:	1a12      	subs	r2, r2, r0
 8018764:	4638      	mov	r0, r7
 8018766:	f013 fa33 	bl	802bbd0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801876a:	b002      	add	sp, #8
 801876c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018770 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8018770:	b513      	push	{r0, r1, r4, lr}
 8018772:	e9cd 2300 	strd	r2, r3, [sp]
 8018776:	f100 0334 	add.w	r3, r0, #52	; 0x34
 801877a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801877e:	f7ff ffce 	bl	801871e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018782:	b002      	add	sp, #8
 8018784:	bd10      	pop	{r4, pc}

08018786 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8018786:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018788:	680e      	ldr	r6, [r1, #0]
 801878a:	681f      	ldr	r7, [r3, #0]
 801878c:	9807      	ldr	r0, [sp, #28]
 801878e:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8018792:	42be      	cmp	r6, r7
 8018794:	bfb8      	it	lt
 8018796:	601e      	strlt	r6, [r3, #0]
 8018798:	680b      	ldr	r3, [r1, #0]
 801879a:	6829      	ldr	r1, [r5, #0]
 801879c:	428b      	cmp	r3, r1
 801879e:	bfc8      	it	gt
 80187a0:	602b      	strgt	r3, [r5, #0]
 80187a2:	6813      	ldr	r3, [r2, #0]
 80187a4:	6821      	ldr	r1, [r4, #0]
 80187a6:	428b      	cmp	r3, r1
 80187a8:	bfb8      	it	lt
 80187aa:	6023      	strlt	r3, [r4, #0]
 80187ac:	6813      	ldr	r3, [r2, #0]
 80187ae:	6802      	ldr	r2, [r0, #0]
 80187b0:	4293      	cmp	r3, r2
 80187b2:	bfc8      	it	gt
 80187b4:	6003      	strgt	r3, [r0, #0]
 80187b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187b8 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 80187b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187bc:	4606      	mov	r6, r0
 80187be:	b089      	sub	sp, #36	; 0x24
 80187c0:	6808      	ldr	r0, [r1, #0]
 80187c2:	4690      	mov	r8, r2
 80187c4:	461f      	mov	r7, r3
 80187c6:	4689      	mov	r9, r1
 80187c8:	f7ff ff40 	bl	801864c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80187cc:	ad08      	add	r5, sp, #32
 80187ce:	2402      	movs	r4, #2
 80187d0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80187d4:	4640      	mov	r0, r8
 80187d6:	4629      	mov	r1, r5
 80187d8:	f7ff ff0a 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80187dc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80187de:	fb90 f0f4 	sdiv	r0, r0, r4
 80187e2:	4418      	add	r0, r3
 80187e4:	9005      	str	r0, [sp, #20]
 80187e6:	f8d9 0000 	ldr.w	r0, [r9]
 80187ea:	f7ff ff50 	bl	801868e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80187ee:	4629      	mov	r1, r5
 80187f0:	9007      	str	r0, [sp, #28]
 80187f2:	4640      	mov	r0, r8
 80187f4:	f7ff fefc 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80187f8:	fb90 f0f4 	sdiv	r0, r0, r4
 80187fc:	6b74      	ldr	r4, [r6, #52]	; 0x34
 80187fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018800:	aa08      	add	r2, sp, #32
 8018802:	1a24      	subs	r4, r4, r0
 8018804:	f842 4d08 	str.w	r4, [r2, #-8]!
 8018808:	9302      	str	r3, [sp, #8]
 801880a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801880c:	9301      	str	r3, [sp, #4]
 801880e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018810:	9300      	str	r3, [sp, #0]
 8018812:	a905      	add	r1, sp, #20
 8018814:	463b      	mov	r3, r7
 8018816:	4630      	mov	r0, r6
 8018818:	f7ff ffb5 	bl	8018786 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801881c:	b009      	add	sp, #36	; 0x24
 801881e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08018822 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8018822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018826:	4291      	cmp	r1, r2
 8018828:	b08d      	sub	sp, #52	; 0x34
 801882a:	e9cd 2106 	strd	r2, r1, [sp, #24]
 801882e:	bfc8      	it	gt
 8018830:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8018834:	461e      	mov	r6, r3
 8018836:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801883a:	1a9b      	subs	r3, r3, r2
 801883c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018840:	bfa2      	ittt	ge
 8018842:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018846:	2200      	movge	r2, #0
 8018848:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 801884c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801884e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8018850:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8018854:	ad0c      	add	r5, sp, #48	; 0x30
 8018856:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 801885a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801885e:	f845 3d04 	str.w	r3, [r5, #-4]!
 8018862:	a907      	add	r1, sp, #28
 8018864:	4633      	mov	r3, r6
 8018866:	462a      	mov	r2, r5
 8018868:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801886c:	9700      	str	r7, [sp, #0]
 801886e:	4604      	mov	r4, r0
 8018870:	f7ff ffa2 	bl	80187b8 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018874:	9b07      	ldr	r3, [sp, #28]
 8018876:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 801887a:	f103 0120 	add.w	r1, r3, #32
 801887e:	fb91 f3f0 	sdiv	r3, r1, r0
 8018882:	fb00 1313 	mls	r3, r0, r3, r1
 8018886:	1ac3      	subs	r3, r0, r3
 8018888:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 801888c:	fb93 f2f0 	sdiv	r2, r3, r0
 8018890:	fb00 3312 	mls	r3, r0, r2, r3
 8018894:	440b      	add	r3, r1
 8018896:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 801889a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801889c:	9906      	ldr	r1, [sp, #24]
 801889e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80188a0:	4291      	cmp	r1, r2
 80188a2:	db11      	blt.n	80188c8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 80188a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80188a6:	9700      	str	r7, [sp, #0]
 80188a8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80188ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80188ae:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80188b2:	4633      	mov	r3, r6
 80188b4:	462a      	mov	r2, r5
 80188b6:	4651      	mov	r1, sl
 80188b8:	4620      	mov	r0, r4
 80188ba:	f7ff ff7d 	bl	80187b8 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80188be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188c0:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80188c4:	9309      	str	r3, [sp, #36]	; 0x24
 80188c6:	e7e8      	b.n	801889a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 80188c8:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 80188cc:	4291      	cmp	r1, r2
 80188ce:	dd0c      	ble.n	80188ea <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 80188d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80188d2:	9700      	str	r7, [sp, #0]
 80188d4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80188d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80188da:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80188de:	4633      	mov	r3, r6
 80188e0:	462a      	mov	r2, r5
 80188e2:	a906      	add	r1, sp, #24
 80188e4:	4620      	mov	r0, r4
 80188e6:	f7ff ff67 	bl	80187b8 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80188ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	f040 8097 	bne.w	8018a20 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 80188f2:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 80188f6:	1a52      	subs	r2, r2, r1
 80188f8:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 80188fc:	da0a      	bge.n	8018914 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 80188fe:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018902:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8018906:	9700      	str	r7, [sp, #0]
 8018908:	4633      	mov	r3, r6
 801890a:	462a      	mov	r2, r5
 801890c:	a90a      	add	r1, sp, #40	; 0x28
 801890e:	4620      	mov	r0, r4
 8018910:	f7ff ff52 	bl	80187b8 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018914:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8018918:	2bb3      	cmp	r3, #179	; 0xb3
 801891a:	d87e      	bhi.n	8018a1a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 801891c:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8018920:	1a1b      	subs	r3, r3, r0
 8018922:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018926:	da78      	bge.n	8018a1a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8018928:	f7ff fe90 	bl	801864c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801892c:	ad0c      	add	r5, sp, #48	; 0x30
 801892e:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8018932:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018936:	4658      	mov	r0, fp
 8018938:	4629      	mov	r1, r5
 801893a:	f7ff fe59 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801893e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018940:	18c3      	adds	r3, r0, r3
 8018942:	9807      	ldr	r0, [sp, #28]
 8018944:	9305      	str	r3, [sp, #20]
 8018946:	f7ff fea2 	bl	801868e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801894a:	4629      	mov	r1, r5
 801894c:	900b      	str	r0, [sp, #44]	; 0x2c
 801894e:	4658      	mov	r0, fp
 8018950:	f7ff fe4e 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018954:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018956:	9a05      	ldr	r2, [sp, #20]
 8018958:	9700      	str	r7, [sp, #0]
 801895a:	1a1b      	subs	r3, r3, r0
 801895c:	f04f 0a02 	mov.w	sl, #2
 8018960:	9304      	str	r3, [sp, #16]
 8018962:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018964:	fb93 f3fa 	sdiv	r3, r3, sl
 8018968:	1ad2      	subs	r2, r2, r3
 801896a:	920a      	str	r2, [sp, #40]	; 0x28
 801896c:	9a04      	ldr	r2, [sp, #16]
 801896e:	1ad3      	subs	r3, r2, r3
 8018970:	930b      	str	r3, [sp, #44]	; 0x2c
 8018972:	462a      	mov	r2, r5
 8018974:	4633      	mov	r3, r6
 8018976:	a90a      	add	r1, sp, #40	; 0x28
 8018978:	4620      	mov	r0, r4
 801897a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801897e:	f7ff ff02 	bl	8018786 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018982:	9a05      	ldr	r2, [sp, #20]
 8018984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018986:	fb93 f3fa 	sdiv	r3, r3, sl
 801898a:	189a      	adds	r2, r3, r2
 801898c:	920a      	str	r2, [sp, #40]	; 0x28
 801898e:	9a04      	ldr	r2, [sp, #16]
 8018990:	9700      	str	r7, [sp, #0]
 8018992:	4413      	add	r3, r2
 8018994:	a90a      	add	r1, sp, #40	; 0x28
 8018996:	462a      	mov	r2, r5
 8018998:	930b      	str	r3, [sp, #44]	; 0x2c
 801899a:	4620      	mov	r0, r4
 801899c:	4633      	mov	r3, r6
 801899e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80189a2:	f7ff fef0 	bl	8018786 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80189a6:	9806      	ldr	r0, [sp, #24]
 80189a8:	f7ff fe50 	bl	801864c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80189ac:	4629      	mov	r1, r5
 80189ae:	900b      	str	r0, [sp, #44]	; 0x2c
 80189b0:	4658      	mov	r0, fp
 80189b2:	f7ff fe1d 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80189b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80189b8:	18c3      	adds	r3, r0, r3
 80189ba:	9806      	ldr	r0, [sp, #24]
 80189bc:	9304      	str	r3, [sp, #16]
 80189be:	f7ff fe66 	bl	801868e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80189c2:	4629      	mov	r1, r5
 80189c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80189c6:	4658      	mov	r0, fp
 80189c8:	f7ff fe12 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80189cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80189ce:	9a04      	ldr	r2, [sp, #16]
 80189d0:	9700      	str	r7, [sp, #0]
 80189d2:	eba3 0b00 	sub.w	fp, r3, r0
 80189d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80189d8:	fb93 f3fa 	sdiv	r3, r3, sl
 80189dc:	1ad2      	subs	r2, r2, r3
 80189de:	ebab 0303 	sub.w	r3, fp, r3
 80189e2:	920a      	str	r2, [sp, #40]	; 0x28
 80189e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80189e6:	462a      	mov	r2, r5
 80189e8:	4633      	mov	r3, r6
 80189ea:	a90a      	add	r1, sp, #40	; 0x28
 80189ec:	4620      	mov	r0, r4
 80189ee:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80189f2:	f7ff fec8 	bl	8018786 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80189f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80189f8:	fb93 fafa 	sdiv	sl, r3, sl
 80189fc:	9b04      	ldr	r3, [sp, #16]
 80189fe:	9700      	str	r7, [sp, #0]
 8018a00:	4453      	add	r3, sl
 8018a02:	930a      	str	r3, [sp, #40]	; 0x28
 8018a04:	eb0a 030b 	add.w	r3, sl, fp
 8018a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a0a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018a0e:	4633      	mov	r3, r6
 8018a10:	462a      	mov	r2, r5
 8018a12:	a90a      	add	r1, sp, #40	; 0x28
 8018a14:	4620      	mov	r0, r4
 8018a16:	f7ff feb6 	bl	8018786 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018a1a:	b00d      	add	sp, #52	; 0x34
 8018a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018a22:	9700      	str	r7, [sp, #0]
 8018a24:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a2a:	462a      	mov	r2, r5
 8018a2c:	4633      	mov	r3, r6
 8018a2e:	a907      	add	r1, sp, #28
 8018a30:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018a34:	4620      	mov	r0, r4
 8018a36:	f7ff febf 	bl	80187b8 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8018a3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018a3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018a3e:	9700      	str	r7, [sp, #0]
 8018a40:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8018a46:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8018a4a:	4633      	mov	r3, r6
 8018a4c:	462a      	mov	r2, r5
 8018a4e:	a906      	add	r1, sp, #24
 8018a50:	e75d      	b.n	801890e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08018a52 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8018a52:	b530      	push	{r4, r5, lr}
 8018a54:	4604      	mov	r4, r0
 8018a56:	4608      	mov	r0, r1
 8018a58:	4611      	mov	r1, r2
 8018a5a:	461a      	mov	r2, r3
 8018a5c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018a60:	b089      	sub	sp, #36	; 0x24
 8018a62:	015b      	lsls	r3, r3, #5
 8018a64:	9304      	str	r3, [sp, #16]
 8018a66:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018a6a:	2500      	movs	r5, #0
 8018a6c:	015b      	lsls	r3, r3, #5
 8018a6e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8018a72:	ab07      	add	r3, sp, #28
 8018a74:	9302      	str	r3, [sp, #8]
 8018a76:	ab06      	add	r3, sp, #24
 8018a78:	9301      	str	r3, [sp, #4]
 8018a7a:	ab05      	add	r3, sp, #20
 8018a7c:	9300      	str	r3, [sp, #0]
 8018a7e:	ab04      	add	r3, sp, #16
 8018a80:	9505      	str	r5, [sp, #20]
 8018a82:	f7ff fece 	bl	8018822 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8018a86:	2520      	movs	r5, #32
 8018a88:	9a04      	ldr	r2, [sp, #16]
 8018a8a:	9805      	ldr	r0, [sp, #20]
 8018a8c:	fb92 f2f5 	sdiv	r2, r2, r5
 8018a90:	fb90 f0f5 	sdiv	r0, r0, r5
 8018a94:	b292      	uxth	r2, r2
 8018a96:	3002      	adds	r0, #2
 8018a98:	1a80      	subs	r0, r0, r2
 8018a9a:	9b06      	ldr	r3, [sp, #24]
 8018a9c:	9907      	ldr	r1, [sp, #28]
 8018a9e:	fb93 f3f5 	sdiv	r3, r3, r5
 8018aa2:	fb91 f1f5 	sdiv	r1, r1, r5
 8018aa6:	b29b      	uxth	r3, r3
 8018aa8:	3102      	adds	r1, #2
 8018aaa:	1ac9      	subs	r1, r1, r3
 8018aac:	3a01      	subs	r2, #1
 8018aae:	3b01      	subs	r3, #1
 8018ab0:	80a0      	strh	r0, [r4, #4]
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	8022      	strh	r2, [r4, #0]
 8018ab6:	8063      	strh	r3, [r4, #2]
 8018ab8:	80e1      	strh	r1, [r4, #6]
 8018aba:	b009      	add	sp, #36	; 0x24
 8018abc:	bd30      	pop	{r4, r5, pc}

08018abe <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8018abe:	b510      	push	{r4, lr}
 8018ac0:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8018ac4:	4604      	mov	r4, r0
 8018ac6:	f7ff ffc4 	bl	8018a52 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018aca:	4620      	mov	r0, r4
 8018acc:	bd10      	pop	{r4, pc}

08018ace <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8018ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ad0:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8018ad4:	4606      	mov	r6, r0
 8018ad6:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 8018ada:	6813      	ldr	r3, [r2, #0]
 8018adc:	42a5      	cmp	r5, r4
 8018ade:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8018ae2:	da2b      	bge.n	8018b3c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8018ae4:	42a3      	cmp	r3, r4
 8018ae6:	dd14      	ble.n	8018b12 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8018ae8:	b168      	cbz	r0, 8018b06 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018aea:	4267      	negs	r7, r4
 8018aec:	fb97 f2f0 	sdiv	r2, r7, r0
 8018af0:	fb00 7212 	mls	r2, r0, r2, r7
 8018af4:	1a82      	subs	r2, r0, r2
 8018af6:	fb92 f7f0 	sdiv	r7, r2, r0
 8018afa:	fb00 2017 	mls	r0, r0, r7, r2
 8018afe:	1a24      	subs	r4, r4, r0
 8018b00:	42ac      	cmp	r4, r5
 8018b02:	bfb8      	it	lt
 8018b04:	462c      	movlt	r4, r5
 8018b06:	4630      	mov	r0, r6
 8018b08:	4622      	mov	r2, r4
 8018b0a:	f7ff ffa2 	bl	8018a52 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8018b0e:	4630      	mov	r0, r6
 8018b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b12:	42ab      	cmp	r3, r5
 8018b14:	dd0e      	ble.n	8018b34 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8018b16:	b168      	cbz	r0, 8018b34 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8018b18:	425f      	negs	r7, r3
 8018b1a:	fb97 f2f0 	sdiv	r2, r7, r0
 8018b1e:	fb00 7212 	mls	r2, r0, r2, r7
 8018b22:	1a82      	subs	r2, r0, r2
 8018b24:	fb92 f7f0 	sdiv	r7, r2, r0
 8018b28:	fb00 2017 	mls	r0, r0, r7, r2
 8018b2c:	1a1b      	subs	r3, r3, r0
 8018b2e:	42ab      	cmp	r3, r5
 8018b30:	bfb8      	it	lt
 8018b32:	462b      	movlt	r3, r5
 8018b34:	4622      	mov	r2, r4
 8018b36:	461c      	mov	r4, r3
 8018b38:	4613      	mov	r3, r2
 8018b3a:	e7e4      	b.n	8018b06 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018b3c:	42a3      	cmp	r3, r4
 8018b3e:	da10      	bge.n	8018b62 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8018b40:	b148      	cbz	r0, 8018b56 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8018b42:	fb94 f2f0 	sdiv	r2, r4, r0
 8018b46:	fb00 4212 	mls	r2, r0, r2, r4
 8018b4a:	1a82      	subs	r2, r0, r2
 8018b4c:	fb92 f7f0 	sdiv	r7, r2, r0
 8018b50:	fb00 2017 	mls	r0, r0, r7, r2
 8018b54:	4404      	add	r4, r0
 8018b56:	42a5      	cmp	r5, r4
 8018b58:	bfa8      	it	ge
 8018b5a:	4625      	movge	r5, r4
 8018b5c:	461c      	mov	r4, r3
 8018b5e:	462b      	mov	r3, r5
 8018b60:	e7d1      	b.n	8018b06 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018b62:	42ab      	cmp	r3, r5
 8018b64:	dacf      	bge.n	8018b06 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018b66:	2800      	cmp	r0, #0
 8018b68:	d0cd      	beq.n	8018b06 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8018b6a:	fb93 f2f0 	sdiv	r2, r3, r0
 8018b6e:	fb00 3212 	mls	r2, r0, r2, r3
 8018b72:	1a82      	subs	r2, r0, r2
 8018b74:	fb92 f7f0 	sdiv	r7, r2, r0
 8018b78:	fb00 2017 	mls	r0, r0, r7, r2
 8018b7c:	4403      	add	r3, r0
 8018b7e:	42ab      	cmp	r3, r5
 8018b80:	bfa8      	it	ge
 8018b82:	462b      	movge	r3, r5
 8018b84:	e7bf      	b.n	8018b06 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08018b86 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8018b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b8a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8018b8c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8018b8e:	b0ba      	sub	sp, #232	; 0xe8
 8018b90:	429a      	cmp	r2, r3
 8018b92:	9303      	str	r3, [sp, #12]
 8018b94:	9204      	str	r2, [sp, #16]
 8018b96:	bfb8      	it	lt
 8018b98:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8018b9c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8018ba0:	1a9b      	subs	r3, r3, r2
 8018ba2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018ba6:	bfa2      	ittt	ge
 8018ba8:	2200      	movge	r2, #0
 8018baa:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8018bae:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8018bb2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	460f      	mov	r7, r1
 8018bb8:	ae0a      	add	r6, sp, #40	; 0x28
 8018bba:	2a00      	cmp	r2, #0
 8018bbc:	d131      	bne.n	8018c22 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8018bbe:	463a      	mov	r2, r7
 8018bc0:	4621      	mov	r1, r4
 8018bc2:	a80b      	add	r0, sp, #44	; 0x2c
 8018bc4:	f012 feaa 	bl	802b91c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018bc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018bca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018bcc:	9205      	str	r2, [sp, #20]
 8018bce:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8018bd2:	9306      	str	r3, [sp, #24]
 8018bd4:	dc6d      	bgt.n	8018cb2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x12c>
 8018bd6:	9b03      	ldr	r3, [sp, #12]
 8018bd8:	9307      	str	r3, [sp, #28]
 8018bda:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018bde:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8018be2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018be6:	930a      	str	r3, [sp, #40]	; 0x28
 8018be8:	aa07      	add	r2, sp, #28
 8018bea:	4633      	mov	r3, r6
 8018bec:	a90b      	add	r1, sp, #44	; 0x2c
 8018bee:	4620      	mov	r0, r4
 8018bf0:	016d      	lsls	r5, r5, #5
 8018bf2:	f7ff fd6b 	bl	80186cc <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018bf6:	9f07      	ldr	r7, [sp, #28]
 8018bf8:	2d00      	cmp	r5, #0
 8018bfa:	d163      	bne.n	8018cc4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x13e>
 8018bfc:	3720      	adds	r7, #32
 8018bfe:	9a04      	ldr	r2, [sp, #16]
 8018c00:	9b06      	ldr	r3, [sp, #24]
 8018c02:	4639      	mov	r1, r7
 8018c04:	4291      	cmp	r1, r2
 8018c06:	442f      	add	r7, r5
 8018c08:	dc69      	bgt.n	8018cde <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x158>
 8018c0a:	9a05      	ldr	r2, [sp, #20]
 8018c0c:	9107      	str	r1, [sp, #28]
 8018c0e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018c12:	930a      	str	r3, [sp, #40]	; 0x28
 8018c14:	aa07      	add	r2, sp, #28
 8018c16:	4633      	mov	r3, r6
 8018c18:	a90b      	add	r1, sp, #44	; 0x2c
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	f7ff fda8 	bl	8018770 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018c20:	e7ed      	b.n	8018bfe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8018c22:	f9b1 c000 	ldrsh.w	ip, [r1]
 8018c26:	88bd      	ldrh	r5, [r7, #4]
 8018c28:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8018c2c:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8018c30:	4465      	add	r5, ip
 8018c32:	b22d      	sxth	r5, r5
 8018c34:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8018c38:	2d00      	cmp	r5, #0
 8018c3a:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8018c3e:	bfb8      	it	lt
 8018c40:	426d      	neglt	r5, r5
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	bfb8      	it	lt
 8018c46:	425b      	neglt	r3, r3
 8018c48:	429d      	cmp	r5, r3
 8018c4a:	bfb8      	it	lt
 8018c4c:	461d      	movlt	r5, r3
 8018c4e:	88fb      	ldrh	r3, [r7, #6]
 8018c50:	4403      	add	r3, r0
 8018c52:	b21b      	sxth	r3, r3
 8018c54:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8018c5e:	bfb8      	it	lt
 8018c60:	425b      	neglt	r3, r3
 8018c62:	2900      	cmp	r1, #0
 8018c64:	bfb8      	it	lt
 8018c66:	4249      	neglt	r1, r1
 8018c68:	428b      	cmp	r3, r1
 8018c6a:	bfb8      	it	lt
 8018c6c:	460b      	movlt	r3, r1
 8018c6e:	115b      	asrs	r3, r3, #5
 8018c70:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8018c74:	116d      	asrs	r5, r5, #5
 8018c76:	3301      	adds	r3, #1
 8018c78:	435b      	muls	r3, r3
 8018c7a:	3501      	adds	r5, #1
 8018c7c:	fb05 3505 	mla	r5, r5, r5, r3
 8018c80:	3001      	adds	r0, #1
 8018c82:	2302      	movs	r3, #2
 8018c84:	fb92 f2f3 	sdiv	r2, r2, r3
 8018c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018c8a:	1040      	asrs	r0, r0, #1
 8018c8c:	1a9a      	subs	r2, r3, r2
 8018c8e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8018c92:	920a      	str	r2, [sp, #40]	; 0x28
 8018c94:	f7ff fcb8 	bl	8018608 <_ZN8touchgfx7CWRUtil4sineEi>
 8018c98:	a90b      	add	r1, sp, #44	; 0x2c
 8018c9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8018c9c:	4630      	mov	r0, r6
 8018c9e:	f7ff fca7 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ca2:	2320      	movs	r3, #32
 8018ca4:	fb90 f0f3 	sdiv	r0, r0, r3
 8018ca8:	4340      	muls	r0, r0
 8018caa:	42a8      	cmp	r0, r5
 8018cac:	dd87      	ble.n	8018bbe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8018cae:	2401      	movs	r4, #1
 8018cb0:	e037      	b.n	8018d22 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19c>
 8018cb2:	2102      	movs	r1, #2
 8018cb4:	fb93 f3f1 	sdiv	r3, r3, r1
 8018cb8:	4413      	add	r3, r2
 8018cba:	9306      	str	r3, [sp, #24]
 8018cbc:	fb93 f3f1 	sdiv	r3, r3, r1
 8018cc0:	9305      	str	r3, [sp, #20]
 8018cc2:	e788      	b.n	8018bd6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8018cc4:	f107 0320 	add.w	r3, r7, #32
 8018cc8:	fb93 f7f5 	sdiv	r7, r3, r5
 8018ccc:	fb05 3717 	mls	r7, r5, r7, r3
 8018cd0:	1bea      	subs	r2, r5, r7
 8018cd2:	fb92 f7f5 	sdiv	r7, r2, r5
 8018cd6:	fb05 2717 	mls	r7, r5, r7, r2
 8018cda:	441f      	add	r7, r3
 8018cdc:	e78f      	b.n	8018bfe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8018cde:	9907      	ldr	r1, [sp, #28]
 8018ce0:	428a      	cmp	r2, r1
 8018ce2:	dd09      	ble.n	8018cf8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x172>
 8018ce4:	9a05      	ldr	r2, [sp, #20]
 8018ce6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018cea:	930a      	str	r3, [sp, #40]	; 0x28
 8018cec:	aa04      	add	r2, sp, #16
 8018cee:	4633      	mov	r3, r6
 8018cf0:	a90b      	add	r1, sp, #44	; 0x2c
 8018cf2:	4620      	mov	r0, r4
 8018cf4:	f7ff fd3c 	bl	8018770 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018cf8:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8018cfc:	9a06      	ldr	r2, [sp, #24]
 8018cfe:	1ac3      	subs	r3, r0, r3
 8018d00:	b99a      	cbnz	r2, 8018d2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a4>
 8018d02:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018d06:	da04      	bge.n	8018d12 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018d08:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8018d0c:	a80b      	add	r0, sp, #44	; 0x2c
 8018d0e:	f012 ff5f 	bl	802bbd0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d12:	21ff      	movs	r1, #255	; 0xff
 8018d14:	a80b      	add	r0, sp, #44	; 0x2c
 8018d16:	f013 f8d0 	bl	802beba <_ZN8touchgfx6Canvas6renderEh>
 8018d1a:	4604      	mov	r4, r0
 8018d1c:	a80b      	add	r0, sp, #44	; 0x2c
 8018d1e:	f013 f90b 	bl	802bf38 <_ZN8touchgfx6CanvasD1Ev>
 8018d22:	4620      	mov	r0, r4
 8018d24:	b03a      	add	sp, #232	; 0xe8
 8018d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d2a:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8018d2e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018d32:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8018d36:	da2b      	bge.n	8018d90 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8018d38:	f7ff fc88 	bl	801864c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018d3c:	4631      	mov	r1, r6
 8018d3e:	900a      	str	r0, [sp, #40]	; 0x28
 8018d40:	a805      	add	r0, sp, #20
 8018d42:	f7ff fc55 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018d48:	4418      	add	r0, r3
 8018d4a:	9008      	str	r0, [sp, #32]
 8018d4c:	9804      	ldr	r0, [sp, #16]
 8018d4e:	f7ff fc9e 	bl	801868e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018d52:	4631      	mov	r1, r6
 8018d54:	900a      	str	r0, [sp, #40]	; 0x28
 8018d56:	a805      	add	r0, sp, #20
 8018d58:	f7ff fc4a 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d5e:	1a18      	subs	r0, r3, r0
 8018d60:	9b04      	ldr	r3, [sp, #16]
 8018d62:	9009      	str	r0, [sp, #36]	; 0x24
 8018d64:	443b      	add	r3, r7
 8018d66:	930a      	str	r3, [sp, #40]	; 0x28
 8018d68:	f10d 0818 	add.w	r8, sp, #24
 8018d6c:	9b04      	ldr	r3, [sp, #16]
 8018d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d70:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8018d74:	4293      	cmp	r3, r2
 8018d76:	dd0b      	ble.n	8018d90 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20a>
 8018d78:	ab09      	add	r3, sp, #36	; 0x24
 8018d7a:	e9cd 6800 	strd	r6, r8, [sp]
 8018d7e:	aa08      	add	r2, sp, #32
 8018d80:	a90b      	add	r1, sp, #44	; 0x2c
 8018d82:	4620      	mov	r0, r4
 8018d84:	f7ff fccb 	bl	801871e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d8a:	443b      	add	r3, r7
 8018d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8018d8e:	e7ed      	b.n	8018d6c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e6>
 8018d90:	9a04      	ldr	r2, [sp, #16]
 8018d92:	9b07      	ldr	r3, [sp, #28]
 8018d94:	429a      	cmp	r2, r3
 8018d96:	dd0a      	ble.n	8018dae <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x228>
 8018d98:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018d9c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018da0:	930a      	str	r3, [sp, #40]	; 0x28
 8018da2:	aa04      	add	r2, sp, #16
 8018da4:	4633      	mov	r3, r6
 8018da6:	a90b      	add	r1, sp, #44	; 0x2c
 8018da8:	4620      	mov	r0, r4
 8018daa:	f7ff fce1 	bl	8018770 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018dae:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018db2:	9b03      	ldr	r3, [sp, #12]
 8018db4:	4642      	mov	r2, r8
 8018db6:	429a      	cmp	r2, r3
 8018db8:	eba8 0805 	sub.w	r8, r8, r5
 8018dbc:	db0c      	blt.n	8018dd8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x252>
 8018dbe:	9207      	str	r2, [sp, #28]
 8018dc0:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018dc4:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018dc8:	930a      	str	r3, [sp, #40]	; 0x28
 8018dca:	aa07      	add	r2, sp, #28
 8018dcc:	4633      	mov	r3, r6
 8018dce:	a90b      	add	r1, sp, #44	; 0x2c
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	f7ff fccd 	bl	8018770 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018dd6:	e7ec      	b.n	8018db2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8018dd8:	9a07      	ldr	r2, [sp, #28]
 8018dda:	4293      	cmp	r3, r2
 8018ddc:	da0a      	bge.n	8018df4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x26e>
 8018dde:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8018de2:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8018de6:	930a      	str	r3, [sp, #40]	; 0x28
 8018de8:	aa03      	add	r2, sp, #12
 8018dea:	4633      	mov	r3, r6
 8018dec:	a90b      	add	r1, sp, #44	; 0x2c
 8018dee:	4620      	mov	r0, r4
 8018df0:	f7ff fcbe 	bl	8018770 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8018df4:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8018df8:	1a1b      	subs	r3, r3, r0
 8018dfa:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8018dfe:	da88      	bge.n	8018d12 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018e00:	f7ff fc24 	bl	801864c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8018e04:	4631      	mov	r1, r6
 8018e06:	900a      	str	r0, [sp, #40]	; 0x28
 8018e08:	a805      	add	r0, sp, #20
 8018e0a:	f7ff fbf1 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018e10:	4418      	add	r0, r3
 8018e12:	9008      	str	r0, [sp, #32]
 8018e14:	9803      	ldr	r0, [sp, #12]
 8018e16:	f7ff fc3a 	bl	801868e <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8018e1a:	4631      	mov	r1, r6
 8018e1c:	900a      	str	r0, [sp, #40]	; 0x28
 8018e1e:	a805      	add	r0, sp, #20
 8018e20:	f7ff fbe6 	bl	80185f0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018e26:	1a18      	subs	r0, r3, r0
 8018e28:	9b03      	ldr	r3, [sp, #12]
 8018e2a:	9009      	str	r0, [sp, #36]	; 0x24
 8018e2c:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8018e30:	443b      	add	r3, r7
 8018e32:	930a      	str	r3, [sp, #40]	; 0x28
 8018e34:	ad06      	add	r5, sp, #24
 8018e36:	9a03      	ldr	r2, [sp, #12]
 8018e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e3a:	429a      	cmp	r2, r3
 8018e3c:	f77f af69 	ble.w	8018d12 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18c>
 8018e40:	ab09      	add	r3, sp, #36	; 0x24
 8018e42:	e9cd 6500 	strd	r6, r5, [sp]
 8018e46:	aa08      	add	r2, sp, #32
 8018e48:	a90b      	add	r1, sp, #44	; 0x2c
 8018e4a:	4620      	mov	r0, r4
 8018e4c:	f7ff fc67 	bl	801871e <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8018e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e52:	443b      	add	r3, r7
 8018e54:	930a      	str	r3, [sp, #40]	; 0x28
 8018e56:	e7ee      	b.n	8018e36 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b0>

08018e58 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8018e58:	6281      	str	r1, [r0, #40]	; 0x28
 8018e5a:	4770      	bx	lr

08018e5c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8018e5c:	b510      	push	{r4, lr}
 8018e5e:	2200      	movs	r2, #0
 8018e60:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8018e64:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8018e68:	8002      	strh	r2, [r0, #0]
 8018e6a:	8042      	strh	r2, [r0, #2]
 8018e6c:	8084      	strh	r4, [r0, #4]
 8018e6e:	80c1      	strh	r1, [r0, #6]
 8018e70:	bd10      	pop	{r4, pc}

08018e72 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8018e72:	2200      	movs	r2, #0
 8018e74:	8002      	strh	r2, [r0, #0]
 8018e76:	8042      	strh	r2, [r0, #2]
 8018e78:	8082      	strh	r2, [r0, #4]
 8018e7a:	80c2      	strh	r2, [r0, #6]
 8018e7c:	4770      	bx	lr
	...

08018e80 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8018e80:	b508      	push	{r3, lr}
 8018e82:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018e84:	b928      	cbnz	r0, 8018e92 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8018e86:	4b03      	ldr	r3, [pc, #12]	; (8018e94 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8018e88:	4a03      	ldr	r2, [pc, #12]	; (8018e98 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8018e8a:	4804      	ldr	r0, [pc, #16]	; (8018e9c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8018e8c:	2126      	movs	r1, #38	; 0x26
 8018e8e:	f014 ffdf 	bl	802de50 <__assert_func>
 8018e92:	bd08      	pop	{r3, pc}
 8018e94:	080314f8 	.word	0x080314f8
 8018e98:	080315d8 	.word	0x080315d8
 8018e9c:	0803151f 	.word	0x0803151f

08018ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018ea0:	b510      	push	{r4, lr}
 8018ea2:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018ea6:	888a      	ldrh	r2, [r1, #4]
 8018ea8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018eac:	4422      	add	r2, r4
 8018eae:	b212      	sxth	r2, r2
 8018eb0:	4293      	cmp	r3, r2
 8018eb2:	da15      	bge.n	8018ee0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018eb4:	8882      	ldrh	r2, [r0, #4]
 8018eb6:	4413      	add	r3, r2
 8018eb8:	b21b      	sxth	r3, r3
 8018eba:	429c      	cmp	r4, r3
 8018ebc:	da10      	bge.n	8018ee0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018ebe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018ec2:	88c9      	ldrh	r1, [r1, #6]
 8018ec4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018ec8:	4419      	add	r1, r3
 8018eca:	b209      	sxth	r1, r1
 8018ecc:	428a      	cmp	r2, r1
 8018ece:	da07      	bge.n	8018ee0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018ed0:	88c0      	ldrh	r0, [r0, #6]
 8018ed2:	4410      	add	r0, r2
 8018ed4:	b200      	sxth	r0, r0
 8018ed6:	4283      	cmp	r3, r0
 8018ed8:	bfac      	ite	ge
 8018eda:	2000      	movge	r0, #0
 8018edc:	2001      	movlt	r0, #1
 8018ede:	bd10      	pop	{r4, pc}
 8018ee0:	2000      	movs	r0, #0
 8018ee2:	e7fc      	b.n	8018ede <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018ee4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8018ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ee8:	4604      	mov	r4, r0
 8018eea:	b08b      	sub	sp, #44	; 0x2c
 8018eec:	6808      	ldr	r0, [r1, #0]
 8018eee:	6849      	ldr	r1, [r1, #4]
 8018ef0:	ab04      	add	r3, sp, #16
 8018ef2:	c303      	stmia	r3!, {r0, r1}
 8018ef4:	4b37      	ldr	r3, [pc, #220]	; (8018fd4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8018ef6:	781b      	ldrb	r3, [r3, #0]
 8018ef8:	2b01      	cmp	r3, #1
 8018efa:	6823      	ldr	r3, [r4, #0]
 8018efc:	4621      	mov	r1, r4
 8018efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f00:	a806      	add	r0, sp, #24
 8018f02:	bf1f      	itttt	ne
 8018f04:	f10d 090e 	addne.w	r9, sp, #14
 8018f08:	ae05      	addne	r6, sp, #20
 8018f0a:	f10d 0516 	addne.w	r5, sp, #22
 8018f0e:	f10d 0812 	addne.w	r8, sp, #18
 8018f12:	bf01      	itttt	eq
 8018f14:	f10d 0916 	addeq.w	r9, sp, #22
 8018f18:	f10d 060e 	addeq.w	r6, sp, #14
 8018f1c:	ad05      	addeq	r5, sp, #20
 8018f1e:	f10d 0810 	addeq.w	r8, sp, #16
 8018f22:	4798      	blx	r3
 8018f24:	f04f 0a00 	mov.w	sl, #0
 8018f28:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8018f2c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018f30:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d042      	beq.n	8018fbe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8018f38:	4293      	cmp	r3, r2
 8018f3a:	bfa8      	it	ge
 8018f3c:	4613      	movge	r3, r2
 8018f3e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018f42:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8018f46:	2f00      	cmp	r7, #0
 8018f48:	dd21      	ble.n	8018f8e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8018f4a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8018f4e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8018f52:	f9b6 2000 	ldrsh.w	r2, [r6]
 8018f56:	f9b9 3000 	ldrsh.w	r3, [r9]
 8018f5a:	f8ad 0020 	strh.w	r0, [sp, #32]
 8018f5e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8018f62:	a808      	add	r0, sp, #32
 8018f64:	a906      	add	r1, sp, #24
 8018f66:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018f6a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018f6e:	f7ff ff97 	bl	8018ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018f72:	9001      	str	r0, [sp, #4]
 8018f74:	b1d0      	cbz	r0, 8018fac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8018f76:	6822      	ldr	r2, [r4, #0]
 8018f78:	a908      	add	r1, sp, #32
 8018f7a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8018f7c:	4620      	mov	r0, r4
 8018f7e:	4790      	blx	r2
 8018f80:	b9a0      	cbnz	r0, 8018fac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8018f82:	9b01      	ldr	r3, [sp, #4]
 8018f84:	107f      	asrs	r7, r7, #1
 8018f86:	f8ad 700e 	strh.w	r7, [sp, #14]
 8018f8a:	469a      	mov	sl, r3
 8018f8c:	e7d9      	b.n	8018f42 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8018f8e:	d10d      	bne.n	8018fac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8018f90:	2301      	movs	r3, #1
 8018f92:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018f96:	f8b8 2000 	ldrh.w	r2, [r8]
 8018f9a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8018f9e:	440a      	add	r2, r1
 8018fa0:	f8a8 2000 	strh.w	r2, [r8]
 8018fa4:	882b      	ldrh	r3, [r5, #0]
 8018fa6:	1a5b      	subs	r3, r3, r1
 8018fa8:	802b      	strh	r3, [r5, #0]
 8018faa:	e7bf      	b.n	8018f2c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8018fac:	f1ba 0f00 	cmp.w	sl, #0
 8018fb0:	d0f1      	beq.n	8018f96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8018fb2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8018fb6:	455b      	cmp	r3, fp
 8018fb8:	bf08      	it	eq
 8018fba:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8018fbc:	e7eb      	b.n	8018f96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 8018fbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	bf04      	itt	eq
 8018fc6:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8018fca:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8018fcc:	b00b      	add	sp, #44	; 0x2c
 8018fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd2:	bf00      	nop
 8018fd4:	200097a0 	.word	0x200097a0

08018fd8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8018fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fda:	6803      	ldr	r3, [r0, #0]
 8018fdc:	b085      	sub	sp, #20
 8018fde:	4604      	mov	r4, r0
 8018fe0:	4601      	mov	r1, r0
 8018fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fe4:	4668      	mov	r0, sp
 8018fe6:	4798      	blx	r3
 8018fe8:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 8018fec:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8018ff0:	f8ad 600c 	strh.w	r6, [sp, #12]
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	a902      	add	r1, sp, #8
 8018ff8:	4668      	mov	r0, sp
 8018ffa:	9302      	str	r3, [sp, #8]
 8018ffc:	f8ad 500e 	strh.w	r5, [sp, #14]
 8019000:	f7ff ff4e 	bl	8018ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019004:	b340      	cbz	r0, 8019058 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 8019006:	f9bd 2000 	ldrsh.w	r2, [sp]
 801900a:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 801900e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8019012:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8019016:	443a      	add	r2, r7
 8019018:	b292      	uxth	r2, r2
 801901a:	b217      	sxth	r7, r2
 801901c:	42be      	cmp	r6, r7
 801901e:	bfd8      	it	le
 8019020:	b2b2      	uxthle	r2, r6
 8019022:	1a12      	subs	r2, r2, r0
 8019024:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019028:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801902c:	f8ad 0000 	strh.w	r0, [sp]
 8019030:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 8019034:	4413      	add	r3, r2
 8019036:	b29b      	uxth	r3, r3
 8019038:	b21a      	sxth	r2, r3
 801903a:	4295      	cmp	r5, r2
 801903c:	bfd8      	it	le
 801903e:	b2ab      	uxthle	r3, r5
 8019040:	1a5b      	subs	r3, r3, r1
 8019042:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019046:	f8ad 1002 	strh.w	r1, [sp, #2]
 801904a:	6823      	ldr	r3, [r4, #0]
 801904c:	4669      	mov	r1, sp
 801904e:	691b      	ldr	r3, [r3, #16]
 8019050:	4620      	mov	r0, r4
 8019052:	4798      	blx	r3
 8019054:	b005      	add	sp, #20
 8019056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019058:	e9cd 0000 	strd	r0, r0, [sp]
 801905c:	e7f5      	b.n	801904a <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08019060 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8019060:	2200      	movs	r2, #0
 8019062:	8082      	strh	r2, [r0, #4]
 8019064:	80c2      	strh	r2, [r0, #6]
 8019066:	8102      	strh	r2, [r0, #8]
 8019068:	8142      	strh	r2, [r0, #10]
 801906a:	8182      	strh	r2, [r0, #12]
 801906c:	81c2      	strh	r2, [r0, #14]
 801906e:	8202      	strh	r2, [r0, #16]
 8019070:	8242      	strh	r2, [r0, #18]
 8019072:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019076:	61c2      	str	r2, [r0, #28]
 8019078:	8402      	strh	r2, [r0, #32]
 801907a:	8442      	strh	r2, [r0, #34]	; 0x22
 801907c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8019080:	2101      	movs	r1, #1
 8019082:	6282      	str	r2, [r0, #40]	; 0x28
 8019084:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019088:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801908c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801908e:	4903      	ldr	r1, [pc, #12]	; (801909c <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 8019090:	6001      	str	r1, [r0, #0]
 8019092:	22ff      	movs	r2, #255	; 0xff
 8019094:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8019098:	4770      	bx	lr
 801909a:	bf00      	nop
 801909c:	08031564 	.word	0x08031564

080190a0 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 80190a0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80190a4:	4770      	bx	lr

080190a6 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 80190a6:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80190aa:	4770      	bx	lr

080190ac <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 80190ac:	6802      	ldr	r2, [r0, #0]
 80190ae:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 80190b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80190b4:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80190b8:	4710      	bx	r2

080190ba <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 80190ba:	6802      	ldr	r2, [r0, #0]
 80190bc:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 80190c0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80190c2:	eef0 0a40 	vmov.f32	s1, s0
 80190c6:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80190ca:	4710      	bx	r2

080190cc <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 80190cc:	6802      	ldr	r2, [r0, #0]
 80190ce:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80190d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80190d4:	eeb0 1a40 	vmov.f32	s2, s0
 80190d8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80190dc:	4710      	bx	r2

080190de <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 80190de:	6802      	ldr	r2, [r0, #0]
 80190e0:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 80190e4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80190e6:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 80190ea:	4710      	bx	r2

080190ec <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 80190ec:	6802      	ldr	r2, [r0, #0]
 80190ee:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 80190f2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80190f4:	eef0 0a40 	vmov.f32	s1, s0
 80190f8:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80190fc:	4710      	bx	r2

080190fe <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 80190fe:	6802      	ldr	r2, [r0, #0]
 8019100:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 8019104:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8019106:	eeb0 1a40 	vmov.f32	s2, s0
 801910a:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801910e:	4710      	bx	r2

08019110 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8019110:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8019114:	4770      	bx	lr

08019116 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8019116:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 801911a:	4770      	bx	lr

0801911c <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 801911c:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8019120:	4770      	bx	lr

08019122 <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8019122:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 8019126:	4770      	bx	lr

08019128 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8019128:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 801912c:	4770      	bx	lr

0801912e <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 801912e:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 8019132:	4770      	bx	lr

08019134 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8019134:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 8019138:	4770      	bx	lr

0801913a <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 801913a:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 801913e:	4770      	bx	lr

08019140 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8019140:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 8019144:	4770      	bx	lr

08019146 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8019146:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 801914a:	4770      	bx	lr

0801914c <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 801914c:	ee07 2a90 	vmov	s15, r2
 8019150:	6803      	ldr	r3, [r0, #0]
 8019152:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8019156:	ee07 1a90 	vmov	s15, r1
 801915a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801915e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8019162:	4718      	bx	r3

08019164 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8019164:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8019168:	4770      	bx	lr

0801916a <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 801916a:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801916e:	4770      	bx	lr

08019170 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8019170:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 8019174:	4770      	bx	lr

08019176 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8019176:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 801917a:	4770      	bx	lr

0801917c <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 801917c:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 8019180:	4770      	bx	lr

08019182 <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8019182:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 8019186:	4770      	bx	lr

08019188 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8019188:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 801918c:	4770      	bx	lr

0801918e <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 801918e:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 8019192:	4770      	bx	lr

08019194 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8019194:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 8019198:	4770      	bx	lr

0801919a <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 801919a:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 801919e:	4770      	bx	lr

080191a0 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 80191a0:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 80191a4:	4770      	bx	lr

080191a6 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 80191a6:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 80191aa:	4770      	bx	lr

080191ac <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 80191ac:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 80191b0:	4770      	bx	lr

080191b2 <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 80191b2:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 80191b6:	4770      	bx	lr

080191b8 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 80191b8:	2200      	movs	r2, #0
 80191ba:	8002      	strh	r2, [r0, #0]
 80191bc:	8042      	strh	r2, [r0, #2]
 80191be:	8082      	strh	r2, [r0, #4]
 80191c0:	80c2      	strh	r2, [r0, #6]
 80191c2:	4770      	bx	lr

080191c4 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 80191c4:	b538      	push	{r3, r4, r5, lr}
 80191c6:	2500      	movs	r5, #0
 80191c8:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80191cc:	2301      	movs	r3, #1
 80191ce:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 80191d2:	4b1f      	ldr	r3, [pc, #124]	; (8019250 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 80191d4:	8085      	strh	r5, [r0, #4]
 80191d6:	80c5      	strh	r5, [r0, #6]
 80191d8:	8105      	strh	r5, [r0, #8]
 80191da:	8145      	strh	r5, [r0, #10]
 80191dc:	8185      	strh	r5, [r0, #12]
 80191de:	81c5      	strh	r5, [r0, #14]
 80191e0:	8205      	strh	r5, [r0, #16]
 80191e2:	8245      	strh	r5, [r0, #18]
 80191e4:	61c5      	str	r5, [r0, #28]
 80191e6:	8405      	strh	r5, [r0, #32]
 80191e8:	8445      	strh	r5, [r0, #34]	; 0x22
 80191ea:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 80191ee:	6003      	str	r3, [r0, #0]
 80191f0:	880b      	ldrh	r3, [r1, #0]
 80191f2:	84c3      	strh	r3, [r0, #38]	; 0x26
 80191f4:	23ff      	movs	r3, #255	; 0xff
 80191f6:	4604      	mov	r4, r0
 80191f8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80191fc:	f001 fa02 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019200:	4b14      	ldr	r3, [pc, #80]	; (8019254 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8019202:	6023      	str	r3, [r4, #0]
 8019204:	2300      	movs	r3, #0
 8019206:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801920a:	4913      	ldr	r1, [pc, #76]	; (8019258 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 801920c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801920e:	6323      	str	r3, [r4, #48]	; 0x30
 8019210:	6363      	str	r3, [r4, #52]	; 0x34
 8019212:	63a3      	str	r3, [r4, #56]	; 0x38
 8019214:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019216:	6463      	str	r3, [r4, #68]	; 0x44
 8019218:	64a3      	str	r3, [r4, #72]	; 0x48
 801921a:	6523      	str	r3, [r4, #80]	; 0x50
 801921c:	6563      	str	r3, [r4, #84]	; 0x54
 801921e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019220:	6623      	str	r3, [r4, #96]	; 0x60
 8019222:	66a3      	str	r3, [r4, #104]	; 0x68
 8019224:	66e3      	str	r3, [r4, #108]	; 0x6c
 8019226:	6763      	str	r3, [r4, #116]	; 0x74
 8019228:	67a3      	str	r3, [r4, #120]	; 0x78
 801922a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801922e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8019232:	230c      	movs	r3, #12
 8019234:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8019238:	6422      	str	r2, [r4, #64]	; 0x40
 801923a:	64e1      	str	r1, [r4, #76]	; 0x4c
 801923c:	65a1      	str	r1, [r4, #88]	; 0x58
 801923e:	6662      	str	r2, [r4, #100]	; 0x64
 8019240:	6722      	str	r2, [r4, #112]	; 0x70
 8019242:	67e2      	str	r2, [r4, #124]	; 0x7c
 8019244:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8019248:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 801924c:	4620      	mov	r0, r4
 801924e:	bd38      	pop	{r3, r4, r5, pc}
 8019250:	08031b18 	.word	0x08031b18
 8019254:	08031630 	.word	0x08031630
 8019258:	447a0000 	.word	0x447a0000

0801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 801925c:	b570      	push	{r4, r5, r6, lr}
 801925e:	ed2d 8b04 	vpush	{d8-d9}
 8019262:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8019266:	add0      	add	r5, sp, #832	; 0x340
 8019268:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801926a:	f825 3d40 	strh.w	r3, [r5, #-64]!
 801926e:	4604      	mov	r4, r0
 8019270:	4628      	mov	r0, r5
 8019272:	f006 fad5 	bl	801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019276:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8019278:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 801927c:	4606      	mov	r6, r0
 801927e:	4628      	mov	r0, r5
 8019280:	f006 fb08 	bl	801f894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019284:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019288:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801928c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801928e:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8019292:	9312      	str	r3, [sp, #72]	; 0x48
 8019294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019298:	1c72      	adds	r2, r6, #1
 801929a:	3001      	adds	r0, #1
 801929c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80192a0:	ee07 2a90 	vmov	s15, r2
 80192a4:	ee06 0a90 	vmov	s13, r0
 80192a8:	ee36 6a47 	vsub.f32	s12, s12, s14
 80192ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80192b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80192b8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80192bc:	9316      	str	r3, [sp, #88]	; 0x58
 80192be:	931a      	str	r3, [sp, #104]	; 0x68
 80192c0:	931e      	str	r3, [sp, #120]	; 0x78
 80192c2:	2300      	movs	r3, #0
 80192c4:	9320      	str	r3, [sp, #128]	; 0x80
 80192c6:	9321      	str	r3, [sp, #132]	; 0x84
 80192c8:	9322      	str	r3, [sp, #136]	; 0x88
 80192ca:	9324      	str	r3, [sp, #144]	; 0x90
 80192cc:	9325      	str	r3, [sp, #148]	; 0x94
 80192ce:	9326      	str	r3, [sp, #152]	; 0x98
 80192d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80192d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80192d4:	932a      	str	r3, [sp, #168]	; 0xa8
 80192d6:	932c      	str	r3, [sp, #176]	; 0xb0
 80192d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80192da:	932e      	str	r3, [sp, #184]	; 0xb8
 80192dc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80192e0:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 80192e4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 80192e8:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 80192ec:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 80192f0:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 80192f4:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 80192f8:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 80192fc:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 8019300:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8019304:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8019308:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 801930c:	a830      	add	r0, sp, #192	; 0xc0
 801930e:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 8019312:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 8019316:	f005 f935 	bl	801e584 <_ZN8touchgfx9Matrix4x4C1Ev>
 801931a:	eeb1 0a49 	vneg.f32	s0, s18
 801931e:	a830      	add	r0, sp, #192	; 0xc0
 8019320:	f005 fa04 	bl	801e72c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8019324:	eeb1 0a68 	vneg.f32	s0, s17
 8019328:	f005 fa0e 	bl	801e748 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801932c:	eeb1 0a48 	vneg.f32	s0, s16
 8019330:	f005 fa19 	bl	801e766 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8019334:	a840      	add	r0, sp, #256	; 0x100
 8019336:	f005 f925 	bl	801e584 <_ZN8touchgfx9Matrix4x4C1Ev>
 801933a:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 801933e:	a840      	add	r0, sp, #256	; 0x100
 8019340:	f005 f978 	bl	801e634 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8019344:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8019348:	f005 f99e 	bl	801e688 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 801934c:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8019350:	f005 f9c3 	bl	801e6da <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8019354:	a850      	add	r0, sp, #320	; 0x140
 8019356:	f005 f915 	bl	801e584 <_ZN8touchgfx9Matrix4x4C1Ev>
 801935a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801935e:	a850      	add	r0, sp, #320	; 0x140
 8019360:	f005 fa10 	bl	801e784 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8019364:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8019368:	f005 fa18 	bl	801e79c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 801936c:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8019370:	f005 fa21 	bl	801e7b6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8019374:	a860      	add	r0, sp, #384	; 0x180
 8019376:	f005 f905 	bl	801e584 <_ZN8touchgfx9Matrix4x4C1Ev>
 801937a:	eeb0 0a49 	vmov.f32	s0, s18
 801937e:	a860      	add	r0, sp, #384	; 0x180
 8019380:	f005 f9d4 	bl	801e72c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8019384:	eeb0 0a68 	vmov.f32	s0, s17
 8019388:	f005 f9de 	bl	801e748 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801938c:	eeb0 0a48 	vmov.f32	s0, s16
 8019390:	f005 f9e9 	bl	801e766 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8019394:	aa50      	add	r2, sp, #320	; 0x140
 8019396:	a960      	add	r1, sp, #384	; 0x180
 8019398:	a8b0      	add	r0, sp, #704	; 0x2c0
 801939a:	f005 f90d 	bl	801e5b8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801939e:	4628      	mov	r0, r5
 80193a0:	aa40      	add	r2, sp, #256	; 0x100
 80193a2:	a9b0      	add	r1, sp, #704	; 0x2c0
 80193a4:	f005 f908 	bl	801e5b8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80193a8:	4629      	mov	r1, r5
 80193aa:	aa30      	add	r2, sp, #192	; 0xc0
 80193ac:	a870      	add	r0, sp, #448	; 0x1c0
 80193ae:	f005 f903 	bl	801e5b8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 80193b2:	a880      	add	r0, sp, #512	; 0x200
 80193b4:	f005 f8e6 	bl	801e584 <_ZN8touchgfx9Matrix4x4C1Ev>
 80193b8:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 80193bc:	a880      	add	r0, sp, #512	; 0x200
 80193be:	eeb1 0a40 	vneg.f32	s0, s0
 80193c2:	f005 f9b3 	bl	801e72c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80193c6:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 80193ca:	a880      	add	r0, sp, #512	; 0x200
 80193cc:	eeb1 0a40 	vneg.f32	s0, s0
 80193d0:	f005 f9ba 	bl	801e748 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80193d4:	a890      	add	r0, sp, #576	; 0x240
 80193d6:	f005 f8d5 	bl	801e584 <_ZN8touchgfx9Matrix4x4C1Ev>
 80193da:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 80193de:	a890      	add	r0, sp, #576	; 0x240
 80193e0:	f005 f918 	bl	801e614 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 80193e4:	a8a0      	add	r0, sp, #640	; 0x280
 80193e6:	f005 f8cd 	bl	801e584 <_ZN8touchgfx9Matrix4x4C1Ev>
 80193ea:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 80193ee:	a8a0      	add	r0, sp, #640	; 0x280
 80193f0:	f005 f99c 	bl	801e72c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 80193f4:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 80193f8:	f005 f9a6 	bl	801e748 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 80193fc:	aa90      	add	r2, sp, #576	; 0x240
 80193fe:	a9a0      	add	r1, sp, #640	; 0x280
 8019400:	a8b0      	add	r0, sp, #704	; 0x2c0
 8019402:	f005 f8d9 	bl	801e5b8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019406:	4628      	mov	r0, r5
 8019408:	aa80      	add	r2, sp, #512	; 0x200
 801940a:	a9b0      	add	r1, sp, #704	; 0x2c0
 801940c:	f005 f8d4 	bl	801e5b8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8019410:	4629      	mov	r1, r5
 8019412:	aa70      	add	r2, sp, #448	; 0x1c0
 8019414:	4668      	mov	r0, sp
 8019416:	466d      	mov	r5, sp
 8019418:	f005 f8ce 	bl	801e5b8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801941c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801941e:	ae70      	add	r6, sp, #448	; 0x1c0
 8019420:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019424:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019428:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801942a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801942e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8019432:	2500      	movs	r5, #0
 8019434:	0129      	lsls	r1, r5, #4
 8019436:	ab20      	add	r3, sp, #128	; 0x80
 8019438:	185e      	adds	r6, r3, r1
 801943a:	ab10      	add	r3, sp, #64	; 0x40
 801943c:	4419      	add	r1, r3
 801943e:	a870      	add	r0, sp, #448	; 0x1c0
 8019440:	f005 f870 	bl	801e524 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 8019444:	3501      	adds	r5, #1
 8019446:	2d04      	cmp	r5, #4
 8019448:	ed86 0a00 	vstr	s0, [r6]
 801944c:	edc6 0a01 	vstr	s1, [r6, #4]
 8019450:	ed86 1a02 	vstr	s2, [r6, #8]
 8019454:	edc6 1a03 	vstr	s3, [r6, #12]
 8019458:	d1ec      	bne.n	8019434 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 801945a:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 801945e:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 8019462:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 8019466:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801946a:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 801946e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019472:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8019476:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 801947a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801947e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8019482:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 8019486:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801948a:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 801948e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8019492:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 8019496:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801949a:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 801949e:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 80194a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80194a6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80194aa:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 80194ae:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 80194b2:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 80194b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80194ba:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 80194be:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80194c2:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 80194c6:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 80194ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80194ce:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80194d2:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 80194d6:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 80194da:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 80194de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80194e2:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 80194e6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80194ea:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 80194ee:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 80194f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80194f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80194fa:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 80194fe:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 8019502:	ecbd 8b04 	vpop	{d8-d9}
 8019506:	bd70      	pop	{r4, r5, r6, pc}

08019508 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 8019508:	b510      	push	{r4, lr}
 801950a:	4604      	mov	r4, r0
 801950c:	f001 f87a 	bl	801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8019510:	4620      	mov	r0, r4
 8019512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019516:	f7ff bea1 	b.w	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801951a <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 801951a:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 801951e:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 8019522:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 8019526:	f7ff be99 	b.w	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801952a <_ZN8touchgfx13TextureMapper8setScaleEf>:
 801952a:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 801952e:	f7ff be95 	b.w	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019532 <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 8019532:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 8019536:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 801953a:	f7ff be8f 	b.w	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801953e <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 801953e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019542:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801954a:	bfd8      	it	le
 801954c:	eeb0 0a67 	vmovle.f32	s0, s15
 8019550:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 8019554:	f7ff be82 	b.w	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019558 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 8019558:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 801955c:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 8019560:	f7ff be7c 	b.w	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019564 <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 8019564:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8019568:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 801956c:	f7ff be76 	b.w	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019570 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8019570:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 8019574:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 8019578:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 801957c:	f7ff be6e 	b.w	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08019580 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 8019580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019584:	ed2d 8b04 	vpush	{d8-d9}
 8019588:	edd1 9a1a 	vldr	s19, [r1, #104]	; 0x68
 801958c:	ed91 8a17 	vldr	s16, [r1, #92]	; 0x5c
 8019590:	ed91 9a1d 	vldr	s18, [r1, #116]	; 0x74
 8019594:	edd1 8a20 	vldr	s17, [r1, #128]	; 0x80
 8019598:	eeb4 8ae9 	vcmpe.f32	s16, s19
 801959c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195a0:	bf54      	ite	pl
 80195a2:	eeb0 0a69 	vmovpl.f32	s0, s19
 80195a6:	eeb0 0a48 	vmovmi.f32	s0, s16
 80195aa:	eeb4 9ac0 	vcmpe.f32	s18, s0
 80195ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195b2:	bfd8      	it	le
 80195b4:	eeb0 0a49 	vmovle.f32	s0, s18
 80195b8:	eef4 8ac0 	vcmpe.f32	s17, s0
 80195bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c0:	bfd8      	it	le
 80195c2:	eeb0 0a68 	vmovle.f32	s0, s17
 80195c6:	460c      	mov	r4, r1
 80195c8:	4607      	mov	r7, r0
 80195ca:	f013 fecd 	bl	802d368 <floorf>
 80195ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80195d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195d6:	bf58      	it	pl
 80195d8:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 80195dc:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80195e0:	bf56      	itet	pl
 80195e2:	ee10 3a10 	vmovpl	r3, s0
 80195e6:	2600      	movmi	r6, #0
 80195e8:	b21e      	sxthpl	r6, r3
 80195ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195ee:	bfd8      	it	le
 80195f0:	eeb0 8a69 	vmovle.f32	s16, s19
 80195f4:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80195f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195fc:	bf58      	it	pl
 80195fe:	eeb0 8a49 	vmovpl.f32	s16, s18
 8019602:	eef4 8ac8 	vcmpe.f32	s17, s16
 8019606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801960a:	bf54      	ite	pl
 801960c:	eeb0 0a68 	vmovpl.f32	s0, s17
 8019610:	eeb0 0a48 	vmovmi.f32	s0, s16
 8019614:	f013 fe26 	bl	802d264 <ceilf>
 8019618:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 801961c:	edd4 9a1b 	vldr	s19, [r4, #108]	; 0x6c
 8019620:	ed94 8a18 	vldr	s16, [r4, #96]	; 0x60
 8019624:	ed94 9a1e 	vldr	s18, [r4, #120]	; 0x78
 8019628:	edd4 8a21 	vldr	s17, [r4, #132]	; 0x84
 801962c:	ee07 8a90 	vmov	s15, r8
 8019630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019634:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801963c:	bfd8      	it	le
 801963e:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 8019642:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8019646:	bfdc      	itt	le
 8019648:	ee10 3a10 	vmovle	r3, s0
 801964c:	fa0f f883 	sxthle.w	r8, r3
 8019650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019654:	bf54      	ite	pl
 8019656:	eeb0 0a69 	vmovpl.f32	s0, s19
 801965a:	eeb0 0a48 	vmovmi.f32	s0, s16
 801965e:	eeb4 9ac0 	vcmpe.f32	s18, s0
 8019662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019666:	bfd8      	it	le
 8019668:	eeb0 0a49 	vmovle.f32	s0, s18
 801966c:	eef4 8ac0 	vcmpe.f32	s17, s0
 8019670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019674:	bfd8      	it	le
 8019676:	eeb0 0a68 	vmovle.f32	s0, s17
 801967a:	f013 fe75 	bl	802d368 <floorf>
 801967e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019686:	bf58      	it	pl
 8019688:	eebd 0ac0 	vcvtpl.s32.f32	s0, s0
 801968c:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8019690:	bf56      	itet	pl
 8019692:	ee10 3a10 	vmovpl	r3, s0
 8019696:	2500      	movmi	r5, #0
 8019698:	b21d      	sxthpl	r5, r3
 801969a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801969e:	bfd8      	it	le
 80196a0:	eeb0 8a69 	vmovle.f32	s16, s19
 80196a4:	eeb4 9ac8 	vcmpe.f32	s18, s16
 80196a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ac:	bf58      	it	pl
 80196ae:	eeb0 8a49 	vmovpl.f32	s16, s18
 80196b2:	eef4 8ac8 	vcmpe.f32	s17, s16
 80196b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ba:	bf54      	ite	pl
 80196bc:	eeb0 0a68 	vmovpl.f32	s0, s17
 80196c0:	eeb0 0a48 	vmovmi.f32	s0, s16
 80196c4:	f013 fdce 	bl	802d264 <ceilf>
 80196c8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80196cc:	803e      	strh	r6, [r7, #0]
 80196ce:	ee07 3a90 	vmov	s15, r3
 80196d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196d6:	807d      	strh	r5, [r7, #2]
 80196d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80196dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196e0:	bfd8      	it	le
 80196e2:	eebd 0ac0 	vcvtle.s32.f32	s0, s0
 80196e6:	eba8 0606 	sub.w	r6, r8, r6
 80196ea:	bfdc      	itt	le
 80196ec:	ee10 3a10 	vmovle	r3, s0
 80196f0:	b21b      	sxthle	r3, r3
 80196f2:	1b5d      	subs	r5, r3, r5
 80196f4:	80be      	strh	r6, [r7, #4]
 80196f6:	80fd      	strh	r5, [r7, #6]
 80196f8:	ecbd 8b04 	vpop	{d8-d9}
 80196fc:	4638      	mov	r0, r7
 80196fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019702 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8019702:	b510      	push	{r4, lr}
 8019704:	ed2d 8b04 	vpush	{d8-d9}
 8019708:	4604      	mov	r4, r0
 801970a:	b084      	sub	sp, #16
 801970c:	4601      	mov	r1, r0
 801970e:	4668      	mov	r0, sp
 8019710:	eeb0 8a40 	vmov.f32	s16, s0
 8019714:	eef0 8a60 	vmov.f32	s17, s1
 8019718:	eeb0 9a41 	vmov.f32	s18, s2
 801971c:	f7ff ff30 	bl	8019580 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8019720:	6823      	ldr	r3, [r4, #0]
 8019722:	4669      	mov	r1, sp
 8019724:	4620      	mov	r0, r4
 8019726:	691b      	ldr	r3, [r3, #16]
 8019728:	4798      	blx	r3
 801972a:	6823      	ldr	r3, [r4, #0]
 801972c:	eeb0 1a49 	vmov.f32	s2, s18
 8019730:	eef0 0a68 	vmov.f32	s1, s17
 8019734:	eeb0 0a48 	vmov.f32	s0, s16
 8019738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801973a:	4620      	mov	r0, r4
 801973c:	4798      	blx	r3
 801973e:	4621      	mov	r1, r4
 8019740:	a802      	add	r0, sp, #8
 8019742:	f7ff ff1d 	bl	8019580 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 8019746:	6823      	ldr	r3, [r4, #0]
 8019748:	a902      	add	r1, sp, #8
 801974a:	691b      	ldr	r3, [r3, #16]
 801974c:	4620      	mov	r0, r4
 801974e:	4798      	blx	r3
 8019750:	b004      	add	sp, #16
 8019752:	ecbd 8b04 	vpop	{d8-d9}
 8019756:	bd10      	pop	{r4, pc}

08019758 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8019758:	b510      	push	{r4, lr}
 801975a:	ed2d 8b02 	vpush	{d8}
 801975e:	4604      	mov	r4, r0
 8019760:	b084      	sub	sp, #16
 8019762:	4601      	mov	r1, r0
 8019764:	4668      	mov	r0, sp
 8019766:	eeb0 8a40 	vmov.f32	s16, s0
 801976a:	f7ff ff09 	bl	8019580 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801976e:	6823      	ldr	r3, [r4, #0]
 8019770:	4669      	mov	r1, sp
 8019772:	4620      	mov	r0, r4
 8019774:	691b      	ldr	r3, [r3, #16]
 8019776:	4798      	blx	r3
 8019778:	6823      	ldr	r3, [r4, #0]
 801977a:	eeb0 0a48 	vmov.f32	s0, s16
 801977e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019782:	4620      	mov	r0, r4
 8019784:	4798      	blx	r3
 8019786:	4621      	mov	r1, r4
 8019788:	a802      	add	r0, sp, #8
 801978a:	f7ff fef9 	bl	8019580 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801978e:	6823      	ldr	r3, [r4, #0]
 8019790:	a902      	add	r1, sp, #8
 8019792:	691b      	ldr	r3, [r3, #16]
 8019794:	4620      	mov	r0, r4
 8019796:	4798      	blx	r3
 8019798:	b004      	add	sp, #16
 801979a:	ecbd 8b02 	vpop	{d8}
 801979e:	bd10      	pop	{r4, pc}

080197a0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 80197a0:	4603      	mov	r3, r0
 80197a2:	3026      	adds	r0, #38	; 0x26
 80197a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197a8:	b90b      	cbnz	r3, 80197ae <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 80197aa:	f003 bd3a 	b.w	801d222 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80197ae:	f003 bd48 	b.w	801d242 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

080197b4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80197b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b8:	ed2d 8b04 	vpush	{d8-d9}
 80197bc:	4604      	mov	r4, r0
 80197be:	469b      	mov	fp, r3
 80197c0:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 80197c4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80197c8:	f9b1 6000 	ldrsh.w	r6, [r1]
 80197cc:	8888      	ldrh	r0, [r1, #4]
 80197ce:	b0b3      	sub	sp, #204	; 0xcc
 80197d0:	4430      	add	r0, r6
 80197d2:	b280      	uxth	r0, r0
 80197d4:	9206      	str	r2, [sp, #24]
 80197d6:	fa0f fe80 	sxth.w	lr, r0
 80197da:	2200      	movs	r2, #0
 80197dc:	4596      	cmp	lr, r2
 80197de:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 80197e2:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 80197e6:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 80197ea:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 80197ec:	9211      	str	r2, [sp, #68]	; 0x44
 80197ee:	f340 8129 	ble.w	8019a44 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80197f2:	45b4      	cmp	ip, r6
 80197f4:	f340 8126 	ble.w	8019a44 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 80197f8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80197fc:	88ca      	ldrh	r2, [r1, #6]
 80197fe:	442a      	add	r2, r5
 8019800:	b292      	uxth	r2, r2
 8019802:	b211      	sxth	r1, r2
 8019804:	2900      	cmp	r1, #0
 8019806:	f340 811d 	ble.w	8019a44 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801980a:	42ab      	cmp	r3, r5
 801980c:	f340 811a 	ble.w	8019a44 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8019810:	45f4      	cmp	ip, lr
 8019812:	bfb8      	it	lt
 8019814:	fa1f f08c 	uxthlt.w	r0, ip
 8019818:	428b      	cmp	r3, r1
 801981a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801981e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019822:	bfb8      	it	lt
 8019824:	b29a      	uxthlt	r2, r3
 8019826:	1b80      	subs	r0, r0, r6
 8019828:	1b52      	subs	r2, r2, r5
 801982a:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801982e:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8019832:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8019836:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801983a:	ab11      	add	r3, sp, #68	; 0x44
 801983c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019840:	6822      	ldr	r2, [r4, #0]
 8019842:	9307      	str	r3, [sp, #28]
 8019844:	ad13      	add	r5, sp, #76	; 0x4c
 8019846:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019848:	e885 0003 	stmia.w	r5, {r0, r1}
 801984c:	4629      	mov	r1, r5
 801984e:	4620      	mov	r0, r4
 8019850:	4790      	blx	r2
 8019852:	4621      	mov	r1, r4
 8019854:	a815      	add	r0, sp, #84	; 0x54
 8019856:	f003 fc3f 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801985a:	a815      	add	r0, sp, #84	; 0x54
 801985c:	f002 fa20 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019860:	9b07      	ldr	r3, [sp, #28]
 8019862:	1d26      	adds	r6, r4, #4
 8019864:	4618      	mov	r0, r3
 8019866:	4631      	mov	r1, r6
 8019868:	f002 fa5e 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801986c:	4628      	mov	r0, r5
 801986e:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8019872:	f002 fa15 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019876:	4628      	mov	r0, r5
 8019878:	f006 f8da 	bl	801fa30 <_ZNK8touchgfx6Bitmap7getDataEv>
 801987c:	9007      	str	r0, [sp, #28]
 801987e:	2800      	cmp	r0, #0
 8019880:	f000 80db 	beq.w	8019a3a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8019884:	f8db 2000 	ldr.w	r2, [fp]
 8019888:	9209      	str	r2, [sp, #36]	; 0x24
 801988a:	f8db 2004 	ldr.w	r2, [fp, #4]
 801988e:	920a      	str	r2, [sp, #40]	; 0x28
 8019890:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019894:	920b      	str	r2, [sp, #44]	; 0x2c
 8019896:	f8db 200c 	ldr.w	r2, [fp, #12]
 801989a:	920c      	str	r2, [sp, #48]	; 0x30
 801989c:	f8da 2000 	ldr.w	r2, [sl]
 80198a0:	920d      	str	r2, [sp, #52]	; 0x34
 80198a2:	f8da 2004 	ldr.w	r2, [sl, #4]
 80198a6:	920e      	str	r2, [sp, #56]	; 0x38
 80198a8:	f8da 2008 	ldr.w	r2, [sl, #8]
 80198ac:	920f      	str	r2, [sp, #60]	; 0x3c
 80198ae:	f8da 200c 	ldr.w	r2, [sl, #12]
 80198b2:	9210      	str	r2, [sp, #64]	; 0x40
 80198b4:	a90d      	add	r1, sp, #52	; 0x34
 80198b6:	4632      	mov	r2, r6
 80198b8:	a809      	add	r0, sp, #36	; 0x24
 80198ba:	f002 fa19 	bl	801bcf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80198be:	4632      	mov	r2, r6
 80198c0:	a90e      	add	r1, sp, #56	; 0x38
 80198c2:	a80a      	add	r0, sp, #40	; 0x28
 80198c4:	f002 fa14 	bl	801bcf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80198c8:	4632      	mov	r2, r6
 80198ca:	a90f      	add	r1, sp, #60	; 0x3c
 80198cc:	a80b      	add	r0, sp, #44	; 0x2c
 80198ce:	f002 fa0f 	bl	801bcf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80198d2:	4632      	mov	r2, r6
 80198d4:	a910      	add	r1, sp, #64	; 0x40
 80198d6:	a80c      	add	r0, sp, #48	; 0x30
 80198d8:	f002 fa0a 	bl	801bcf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 80198dc:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80198e0:	edd7 4a00 	vldr	s9, [r7]
 80198e4:	edd7 5a01 	vldr	s11, [r7, #4]
 80198e8:	ed98 4a00 	vldr	s8, [r8]
 80198ec:	ed98 5a01 	vldr	s10, [r8, #4]
 80198f0:	ed99 9a00 	vldr	s18, [r9]
 80198f4:	ed99 8a01 	vldr	s16, [r9, #4]
 80198f8:	edd9 8a02 	vldr	s17, [r9, #8]
 80198fc:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8019900:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8019904:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 8019908:	eef0 6a67 	vmov.f32	s13, s15
 801990c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8019910:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 8019914:	eeb0 7a67 	vmov.f32	s14, s15
 8019918:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801991c:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 8019920:	eeb0 6a67 	vmov.f32	s12, s15
 8019924:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019928:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801992c:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 8019930:	ee16 6a10 	vmov	r6, s12
 8019934:	eeb0 6a67 	vmov.f32	s12, s15
 8019938:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801993c:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8019940:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8019944:	f8d8 b008 	ldr.w	fp, [r8, #8]
 8019948:	68ff      	ldr	r7, [r7, #12]
 801994a:	9624      	str	r6, [sp, #144]	; 0x90
 801994c:	ee16 0a10 	vmov	r0, s12
 8019950:	eeb0 6a67 	vmov.f32	s12, s15
 8019954:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019958:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801995c:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 8019960:	ee16 1a10 	vmov	r1, s12
 8019964:	eeb0 6a67 	vmov.f32	s12, s15
 8019968:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801996c:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8019970:	ee16 2a10 	vmov	r2, s12
 8019974:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 8019978:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801997c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8019980:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8019984:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019988:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801998c:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 8019990:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8019994:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 8019998:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 801999c:	922d      	str	r2, [sp, #180]	; 0xb4
 801999e:	4a2b      	ldr	r2, [pc, #172]	; (8019a4c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 80199a0:	9b06      	ldr	r3, [sp, #24]
 80199a2:	8812      	ldrh	r2, [r2, #0]
 80199a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80199a6:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80199aa:	9b07      	ldr	r3, [sp, #28]
 80199ac:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 80199b0:	4628      	mov	r0, r5
 80199b2:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 80199b6:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 80199ba:	9218      	str	r2, [sp, #96]	; 0x60
 80199bc:	9319      	str	r3, [sp, #100]	; 0x64
 80199be:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 80199c2:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 80199c6:	9731      	str	r7, [sp, #196]	; 0xc4
 80199c8:	f006 f864 	bl	801fa94 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80199cc:	901a      	str	r0, [sp, #104]	; 0x68
 80199ce:	4628      	mov	r0, r5
 80199d0:	f005 ff26 	bl	801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80199d4:	901b      	str	r0, [sp, #108]	; 0x6c
 80199d6:	4628      	mov	r0, r5
 80199d8:	f005 ff5c 	bl	801f894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80199dc:	901c      	str	r0, [sp, #112]	; 0x70
 80199de:	4628      	mov	r0, r5
 80199e0:	f005 ff1e 	bl	801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80199e4:	eeb4 9a48 	vcmp.f32	s18, s16
 80199e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199ec:	901d      	str	r0, [sp, #116]	; 0x74
 80199ee:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 80199f2:	d107      	bne.n	8019a04 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 80199f4:	eeb4 8a68 	vcmp.f32	s16, s17
 80199f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019a00:	bf08      	it	eq
 8019a02:	461e      	moveq	r6, r3
 8019a04:	4b12      	ldr	r3, [pc, #72]	; (8019a50 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019a0c:	b10a      	cbz	r2, 8019a12 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 8019a0e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8019a10:	b905      	cbnz	r5, 8019a14 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 8019a12:	689d      	ldr	r5, [r3, #8]
 8019a14:	682b      	ldr	r3, [r5, #0]
 8019a16:	4620      	mov	r0, r4
 8019a18:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8019a1a:	f7ff fec1 	bl	80197a0 <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 8019a1e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8019a22:	9604      	str	r6, [sp, #16]
 8019a24:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8019a28:	ab13      	add	r3, sp, #76	; 0x4c
 8019a2a:	9301      	str	r3, [sp, #4]
 8019a2c:	ab15      	add	r3, sp, #84	; 0x54
 8019a2e:	9300      	str	r3, [sp, #0]
 8019a30:	aa1e      	add	r2, sp, #120	; 0x78
 8019a32:	ab19      	add	r3, sp, #100	; 0x64
 8019a34:	a917      	add	r1, sp, #92	; 0x5c
 8019a36:	4628      	mov	r0, r5
 8019a38:	47b8      	blx	r7
 8019a3a:	b033      	add	sp, #204	; 0xcc
 8019a3c:	ecbd 8b04 	vpop	{d8-d9}
 8019a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a44:	2300      	movs	r3, #0
 8019a46:	9312      	str	r3, [sp, #72]	; 0x48
 8019a48:	e6f7      	b.n	801983a <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 8019a4a:	bf00      	nop
 8019a4c:	200097a2 	.word	0x200097a2
 8019a50:	200097a8 	.word	0x200097a8

08019a54 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 8019a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a58:	ed2d 8b02 	vpush	{d8}
 8019a5c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8019a60:	b098      	sub	sp, #96	; 0x60
 8019a62:	4604      	mov	r4, r0
 8019a64:	4688      	mov	r8, r1
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d077      	beq.n	8019b5a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 8019a6a:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019a6e:	4628      	mov	r0, r5
 8019a70:	f005 fed6 	bl	801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019a74:	ee07 0a90 	vmov	s15, r0
 8019a78:	4628      	mov	r0, r5
 8019a7a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8019a7e:	f005 ff09 	bl	801f894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019a82:	4b4e      	ldr	r3, [pc, #312]	; (8019bbc <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8019a84:	781b      	ldrb	r3, [r3, #0]
 8019a86:	ee07 0a90 	vmov	s15, r0
 8019a8a:	2b01      	cmp	r3, #1
 8019a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8019a90:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019a94:	d066      	beq.n	8019b64 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8019a96:	eeb0 6a47 	vmov.f32	s12, s14
 8019a9a:	ee17 3a10 	vmov	r3, s14
 8019a9e:	eeb0 4a48 	vmov.f32	s8, s16
 8019aa2:	eeb0 7a48 	vmov.f32	s14, s16
 8019aa6:	eef0 4a67 	vmov.f32	s9, s15
 8019aaa:	eeb0 8a67 	vmov.f32	s16, s15
 8019aae:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 8019ab2:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 8019ab6:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 8019aba:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 8019abe:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 8019ac2:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 8019ac6:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8019ac8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8019aca:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8019acc:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 8019ad0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 8019ad4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8019ad8:	ee73 1a65 	vsub.f32	s3, s6, s11
 8019adc:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8019ae0:	ee32 1a45 	vsub.f32	s2, s4, s10
 8019ae4:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8019ae8:	ee73 1ae5 	vsub.f32	s3, s7, s11
 8019aec:	eee1 6a21 	vfma.f32	s13, s2, s3
 8019af0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8019af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019af8:	dd3d      	ble.n	8019b76 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8019afa:	ed8d 5a04 	vstr	s10, [sp, #16]
 8019afe:	ed8d 2a05 	vstr	s4, [sp, #20]
 8019b02:	edcd 2a06 	vstr	s5, [sp, #24]
 8019b06:	f8cd c01c 	str.w	ip, [sp, #28]
 8019b0a:	edcd 5a08 	vstr	s11, [sp, #32]
 8019b0e:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 8019b12:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 8019b16:	970b      	str	r7, [sp, #44]	; 0x2c
 8019b18:	960c      	str	r6, [sp, #48]	; 0x30
 8019b1a:	950d      	str	r5, [sp, #52]	; 0x34
 8019b1c:	920e      	str	r2, [sp, #56]	; 0x38
 8019b1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8019b20:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8019b24:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 8019b28:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 8019b2c:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 8019b30:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 8019b34:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8019b38:	9316      	str	r3, [sp, #88]	; 0x58
 8019b3a:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 8019b3e:	ab14      	add	r3, sp, #80	; 0x50
 8019b40:	9303      	str	r3, [sp, #12]
 8019b42:	ab10      	add	r3, sp, #64	; 0x40
 8019b44:	9302      	str	r3, [sp, #8]
 8019b46:	ab0c      	add	r3, sp, #48	; 0x30
 8019b48:	9301      	str	r3, [sp, #4]
 8019b4a:	ab08      	add	r3, sp, #32
 8019b4c:	9300      	str	r3, [sp, #0]
 8019b4e:	2200      	movs	r2, #0
 8019b50:	ab04      	add	r3, sp, #16
 8019b52:	4641      	mov	r1, r8
 8019b54:	4620      	mov	r0, r4
 8019b56:	f7ff fe2d 	bl	80197b4 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8019b5a:	b018      	add	sp, #96	; 0x60
 8019b5c:	ecbd 8b02 	vpop	{d8}
 8019b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b64:	eeb0 6a48 	vmov.f32	s12, s16
 8019b68:	eef0 4a47 	vmov.f32	s9, s14
 8019b6c:	ee17 3a90 	vmov	r3, s15
 8019b70:	eeb0 4a67 	vmov.f32	s8, s15
 8019b74:	e79b      	b.n	8019aae <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 8019b76:	ed8d 5a05 	vstr	s10, [sp, #20]
 8019b7a:	ed8d 2a04 	vstr	s4, [sp, #16]
 8019b7e:	f8cd c018 	str.w	ip, [sp, #24]
 8019b82:	edcd 2a07 	vstr	s5, [sp, #28]
 8019b86:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8019b8a:	ed8d 3a08 	vstr	s6, [sp, #32]
 8019b8e:	970a      	str	r7, [sp, #40]	; 0x28
 8019b90:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 8019b94:	960d      	str	r6, [sp, #52]	; 0x34
 8019b96:	950c      	str	r5, [sp, #48]	; 0x30
 8019b98:	900e      	str	r0, [sp, #56]	; 0x38
 8019b9a:	920f      	str	r2, [sp, #60]	; 0x3c
 8019b9c:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 8019ba0:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 8019ba4:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 8019ba8:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 8019bac:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 8019bb0:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 8019bb4:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 8019bb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8019bba:	e7c0      	b.n	8019b3e <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8019bbc:	200097a0 	.word	0x200097a0

08019bc0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8019bc0:	2200      	movs	r2, #0
 8019bc2:	8002      	strh	r2, [r0, #0]
 8019bc4:	8042      	strh	r2, [r0, #2]
 8019bc6:	8082      	strh	r2, [r0, #4]
 8019bc8:	80c2      	strh	r2, [r0, #6]
 8019bca:	4770      	bx	lr

08019bcc <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8019bcc:	b570      	push	{r4, r5, r6, lr}
 8019bce:	6803      	ldr	r3, [r0, #0]
 8019bd0:	4604      	mov	r4, r0
 8019bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bd4:	4615      	mov	r5, r2
 8019bd6:	4798      	blx	r3
 8019bd8:	6823      	ldr	r3, [r4, #0]
 8019bda:	4629      	mov	r1, r5
 8019bdc:	4620      	mov	r0, r4
 8019bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019be4:	4718      	bx	r3
	...

08019be8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8019be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019bea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019bf0:	4299      	cmp	r1, r3
 8019bf2:	d029      	beq.n	8019c48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8019bf4:	4b15      	ldr	r3, [pc, #84]	; (8019c4c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	b92b      	cbnz	r3, 8019c06 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8019bfa:	4b15      	ldr	r3, [pc, #84]	; (8019c50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8019bfc:	4a15      	ldr	r2, [pc, #84]	; (8019c54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019bfe:	21ae      	movs	r1, #174	; 0xae
 8019c00:	4815      	ldr	r0, [pc, #84]	; (8019c58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8019c02:	f014 f925 	bl	802de50 <__assert_func>
 8019c06:	4a15      	ldr	r2, [pc, #84]	; (8019c5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8019c08:	8812      	ldrh	r2, [r2, #0]
 8019c0a:	428a      	cmp	r2, r1
 8019c0c:	d803      	bhi.n	8019c16 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8019c0e:	4b14      	ldr	r3, [pc, #80]	; (8019c60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8019c10:	4a10      	ldr	r2, [pc, #64]	; (8019c54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019c12:	21af      	movs	r1, #175	; 0xaf
 8019c14:	e7f4      	b.n	8019c00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8019c16:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019c1a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019c1e:	4b11      	ldr	r3, [pc, #68]	; (8019c64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8019c20:	7854      	ldrb	r4, [r2, #1]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019c28:	682b      	ldr	r3, [r5, #0]
 8019c2a:	69de      	ldr	r6, [r3, #28]
 8019c2c:	4b0e      	ldr	r3, [pc, #56]	; (8019c68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8019c2e:	6818      	ldr	r0, [r3, #0]
 8019c30:	f7fa fc3e 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8019c34:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019c38:	2300      	movs	r3, #0
 8019c3a:	4602      	mov	r2, r0
 8019c3c:	9300      	str	r3, [sp, #0]
 8019c3e:	4621      	mov	r1, r4
 8019c40:	4628      	mov	r0, r5
 8019c42:	47b0      	blx	r6
 8019c44:	b002      	add	sp, #8
 8019c46:	bd70      	pop	{r4, r5, r6, pc}
 8019c48:	2000      	movs	r0, #0
 8019c4a:	e7fb      	b.n	8019c44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8019c4c:	200097f8 	.word	0x200097f8
 8019c50:	08031738 	.word	0x08031738
 8019c54:	08031870 	.word	0x08031870
 8019c58:	0803177a 	.word	0x0803177a
 8019c5c:	200097fc 	.word	0x200097fc
 8019c60:	080317a3 	.word	0x080317a3
 8019c64:	20009800 	.word	0x20009800
 8019c68:	20009804 	.word	0x20009804

08019c6c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8019c6c:	b570      	push	{r4, r5, r6, lr}
 8019c6e:	6803      	ldr	r3, [r0, #0]
 8019c70:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019c72:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8019c74:	4b11      	ldr	r3, [pc, #68]	; (8019cbc <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	4604      	mov	r4, r0
 8019c7a:	b28d      	uxth	r5, r1
 8019c7c:	b92b      	cbnz	r3, 8019c8a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8019c7e:	4b10      	ldr	r3, [pc, #64]	; (8019cc0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8019c80:	4a10      	ldr	r2, [pc, #64]	; (8019cc4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019c82:	21ae      	movs	r1, #174	; 0xae
 8019c84:	4810      	ldr	r0, [pc, #64]	; (8019cc8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8019c86:	f014 f8e3 	bl	802de50 <__assert_func>
 8019c8a:	4910      	ldr	r1, [pc, #64]	; (8019ccc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019c8c:	8809      	ldrh	r1, [r1, #0]
 8019c8e:	4291      	cmp	r1, r2
 8019c90:	d803      	bhi.n	8019c9a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8019c92:	4b0f      	ldr	r3, [pc, #60]	; (8019cd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8019c94:	4a0b      	ldr	r2, [pc, #44]	; (8019cc4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019c96:	21af      	movs	r1, #175	; 0xaf
 8019c98:	e7f4      	b.n	8019c84 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8019c9a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019c9e:	4b0d      	ldr	r3, [pc, #52]	; (8019cd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019ca6:	6803      	ldr	r3, [r0, #0]
 8019ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019caa:	4798      	blx	r3
 8019cac:	1a29      	subs	r1, r5, r0
 8019cae:	4633      	mov	r3, r6
 8019cb0:	4620      	mov	r0, r4
 8019cb2:	b209      	sxth	r1, r1
 8019cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cb8:	4718      	bx	r3
 8019cba:	bf00      	nop
 8019cbc:	200097f8 	.word	0x200097f8
 8019cc0:	08031738 	.word	0x08031738
 8019cc4:	08031870 	.word	0x08031870
 8019cc8:	0803177a 	.word	0x0803177a
 8019ccc:	200097fc 	.word	0x200097fc
 8019cd0:	080317a3 	.word	0x080317a3
 8019cd4:	20009800 	.word	0x20009800

08019cd8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cdc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ce2:	4293      	cmp	r3, r2
 8019ce4:	b08c      	sub	sp, #48	; 0x30
 8019ce6:	4604      	mov	r4, r0
 8019ce8:	4688      	mov	r8, r1
 8019cea:	d05f      	beq.n	8019dac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019cec:	4e31      	ldr	r6, [pc, #196]	; (8019db4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8019cee:	6832      	ldr	r2, [r6, #0]
 8019cf0:	b92a      	cbnz	r2, 8019cfe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8019cf2:	4b31      	ldr	r3, [pc, #196]	; (8019db8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8019cf4:	4a31      	ldr	r2, [pc, #196]	; (8019dbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019cf6:	21ae      	movs	r1, #174	; 0xae
 8019cf8:	4831      	ldr	r0, [pc, #196]	; (8019dc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8019cfa:	f014 f8a9 	bl	802de50 <__assert_func>
 8019cfe:	4d31      	ldr	r5, [pc, #196]	; (8019dc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8019d00:	8829      	ldrh	r1, [r5, #0]
 8019d02:	4299      	cmp	r1, r3
 8019d04:	d803      	bhi.n	8019d0e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8019d06:	4b30      	ldr	r3, [pc, #192]	; (8019dc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8019d08:	4a2c      	ldr	r2, [pc, #176]	; (8019dbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019d0a:	21af      	movs	r1, #175	; 0xaf
 8019d0c:	e7f4      	b.n	8019cf8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8019d0e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019d12:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019d16:	4b2d      	ldr	r3, [pc, #180]	; (8019dcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019d1e:	2a00      	cmp	r2, #0
 8019d20:	d044      	beq.n	8019dac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019d22:	784b      	ldrb	r3, [r1, #1]
 8019d24:	9207      	str	r2, [sp, #28]
 8019d26:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019d2a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019d2e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019d32:	4b27      	ldr	r3, [pc, #156]	; (8019dd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8019d34:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019d3e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019d42:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8019d46:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8019d4a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019d4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019d50:	f88d a020 	strb.w	sl, [sp, #32]
 8019d54:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8019d58:	9009      	str	r0, [sp, #36]	; 0x24
 8019d5a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8019d5e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019d62:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8019d66:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8019d6a:	b10a      	cbz	r2, 8019d70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8019d6c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8019d6e:	b907      	cbnz	r7, 8019d72 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8019d70:	689f      	ldr	r7, [r3, #8]
 8019d72:	f10d 0914 	add.w	r9, sp, #20
 8019d76:	4621      	mov	r1, r4
 8019d78:	4648      	mov	r0, r9
 8019d7a:	f003 f9ad 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d7e:	6833      	ldr	r3, [r6, #0]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d0b6      	beq.n	8019cf2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8019d84:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019d86:	882b      	ldrh	r3, [r5, #0]
 8019d88:	428b      	cmp	r3, r1
 8019d8a:	d9bc      	bls.n	8019d06 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019d8c:	4b11      	ldr	r3, [pc, #68]	; (8019dd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8019d8e:	6818      	ldr	r0, [r3, #0]
 8019d90:	f7fa fb8e 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8019d94:	2300      	movs	r3, #0
 8019d96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019d9a:	ab07      	add	r3, sp, #28
 8019d9c:	9001      	str	r0, [sp, #4]
 8019d9e:	9300      	str	r3, [sp, #0]
 8019da0:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019da4:	4643      	mov	r3, r8
 8019da6:	4638      	mov	r0, r7
 8019da8:	f7fa fb13 	bl	80143d2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019dac:	b00c      	add	sp, #48	; 0x30
 8019dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019db2:	bf00      	nop
 8019db4:	200097f8 	.word	0x200097f8
 8019db8:	08031738 	.word	0x08031738
 8019dbc:	08031870 	.word	0x08031870
 8019dc0:	0803177a 	.word	0x0803177a
 8019dc4:	200097fc 	.word	0x200097fc
 8019dc8:	080317a3 	.word	0x080317a3
 8019dcc:	20009800 	.word	0x20009800
 8019dd0:	200097a8 	.word	0x200097a8
 8019dd4:	20009804 	.word	0x20009804

08019dd8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8019dd8:	b40e      	push	{r1, r2, r3}
 8019dda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dde:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019de4:	4293      	cmp	r3, r2
 8019de6:	b09c      	sub	sp, #112	; 0x70
 8019de8:	4604      	mov	r4, r0
 8019dea:	d06b      	beq.n	8019ec4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8019dec:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8019ed8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8019df0:	aa26      	add	r2, sp, #152	; 0x98
 8019df2:	9202      	str	r2, [sp, #8]
 8019df4:	f8da 2000 	ldr.w	r2, [sl]
 8019df8:	b92a      	cbnz	r2, 8019e06 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8019dfa:	4b33      	ldr	r3, [pc, #204]	; (8019ec8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8019dfc:	4a33      	ldr	r2, [pc, #204]	; (8019ecc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019dfe:	21ae      	movs	r1, #174	; 0xae
 8019e00:	4833      	ldr	r0, [pc, #204]	; (8019ed0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8019e02:	f014 f825 	bl	802de50 <__assert_func>
 8019e06:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8019edc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8019e0a:	f8b8 1000 	ldrh.w	r1, [r8]
 8019e0e:	4299      	cmp	r1, r3
 8019e10:	d803      	bhi.n	8019e1a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8019e12:	4b30      	ldr	r3, [pc, #192]	; (8019ed4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8019e14:	4a2d      	ldr	r2, [pc, #180]	; (8019ecc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019e16:	21af      	movs	r1, #175	; 0xaf
 8019e18:	e7f2      	b.n	8019e00 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8019e1a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8019ee0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8019e1e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019e22:	f8d9 3000 	ldr.w	r3, [r9]
 8019e26:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019e2a:	682b      	ldr	r3, [r5, #0]
 8019e2c:	4628      	mov	r0, r5
 8019e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e30:	4798      	blx	r3
 8019e32:	4606      	mov	r6, r0
 8019e34:	b207      	sxth	r7, r0
 8019e36:	a803      	add	r0, sp, #12
 8019e38:	f003 fddd 	bl	801d9f6 <_ZN8touchgfx12TextProviderC1Ev>
 8019e3c:	682b      	ldr	r3, [r5, #0]
 8019e3e:	4628      	mov	r0, r5
 8019e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e42:	4798      	blx	r3
 8019e44:	682b      	ldr	r3, [r5, #0]
 8019e46:	4683      	mov	fp, r0
 8019e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019e4a:	4628      	mov	r0, r5
 8019e4c:	4798      	blx	r3
 8019e4e:	465b      	mov	r3, fp
 8019e50:	9000      	str	r0, [sp, #0]
 8019e52:	9925      	ldr	r1, [sp, #148]	; 0x94
 8019e54:	9a02      	ldr	r2, [sp, #8]
 8019e56:	a803      	add	r0, sp, #12
 8019e58:	f003 fe20 	bl	801da9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019e5c:	f8da 3000 	ldr.w	r3, [sl]
 8019e60:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d0c8      	beq.n	8019dfa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8019e68:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019e6a:	f8b8 0000 	ldrh.w	r0, [r8]
 8019e6e:	4290      	cmp	r0, r2
 8019e70:	d9cf      	bls.n	8019e12 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8019e72:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8019e76:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019e7a:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8019e7e:	786a      	ldrb	r2, [r5, #1]
 8019e80:	8925      	ldrh	r5, [r4, #8]
 8019e82:	f8d9 3000 	ldr.w	r3, [r9]
 8019e86:	eba5 050c 	sub.w	r5, r5, ip
 8019e8a:	b22d      	sxth	r5, r5
 8019e8c:	9500      	str	r5, [sp, #0]
 8019e8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019e92:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019e96:	a803      	add	r0, sp, #12
 8019e98:	f001 fc1e 	bl	801b6d8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019e9c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019ea0:	18b9      	adds	r1, r7, r2
 8019ea2:	2900      	cmp	r1, #0
 8019ea4:	b203      	sxth	r3, r0
 8019ea6:	dd0b      	ble.n	8019ec0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8019ea8:	3b01      	subs	r3, #1
 8019eaa:	fb13 f302 	smulbb	r3, r3, r2
 8019eae:	fb16 3300 	smlabb	r3, r6, r0, r3
 8019eb2:	b21f      	sxth	r7, r3
 8019eb4:	4638      	mov	r0, r7
 8019eb6:	b01c      	add	sp, #112	; 0x70
 8019eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ebc:	b003      	add	sp, #12
 8019ebe:	4770      	bx	lr
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	dcf7      	bgt.n	8019eb4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019ec4:	2700      	movs	r7, #0
 8019ec6:	e7f5      	b.n	8019eb4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019ec8:	08031738 	.word	0x08031738
 8019ecc:	08031870 	.word	0x08031870
 8019ed0:	0803177a 	.word	0x0803177a
 8019ed4:	080317a3 	.word	0x080317a3
 8019ed8:	200097f8 	.word	0x200097f8
 8019edc:	200097fc 	.word	0x200097fc
 8019ee0:	20009800 	.word	0x20009800

08019ee4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8019ee4:	b570      	push	{r4, r5, r6, lr}
 8019ee6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019eec:	4299      	cmp	r1, r3
 8019eee:	4604      	mov	r4, r0
 8019ef0:	d01e      	beq.n	8019f30 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8019ef2:	6803      	ldr	r3, [r0, #0]
 8019ef4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019ef6:	4b0f      	ldr	r3, [pc, #60]	; (8019f34 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	b92b      	cbnz	r3, 8019f08 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8019efc:	4b0e      	ldr	r3, [pc, #56]	; (8019f38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8019efe:	4a0f      	ldr	r2, [pc, #60]	; (8019f3c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019f00:	21ae      	movs	r1, #174	; 0xae
 8019f02:	480f      	ldr	r0, [pc, #60]	; (8019f40 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8019f04:	f013 ffa4 	bl	802de50 <__assert_func>
 8019f08:	4b0e      	ldr	r3, [pc, #56]	; (8019f44 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8019f0a:	881b      	ldrh	r3, [r3, #0]
 8019f0c:	428b      	cmp	r3, r1
 8019f0e:	d803      	bhi.n	8019f18 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8019f10:	4b0d      	ldr	r3, [pc, #52]	; (8019f48 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8019f12:	4a0a      	ldr	r2, [pc, #40]	; (8019f3c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019f14:	21af      	movs	r1, #175	; 0xaf
 8019f16:	e7f4      	b.n	8019f02 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8019f18:	4b0c      	ldr	r3, [pc, #48]	; (8019f4c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8019f1a:	6818      	ldr	r0, [r3, #0]
 8019f1c:	f7fa fac8 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 8019f20:	2300      	movs	r3, #0
 8019f22:	4601      	mov	r1, r0
 8019f24:	46ac      	mov	ip, r5
 8019f26:	4620      	mov	r0, r4
 8019f28:	461a      	mov	r2, r3
 8019f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f2e:	4760      	bx	ip
 8019f30:	2000      	movs	r0, #0
 8019f32:	bd70      	pop	{r4, r5, r6, pc}
 8019f34:	200097f8 	.word	0x200097f8
 8019f38:	08031738 	.word	0x08031738
 8019f3c:	08031870 	.word	0x08031870
 8019f40:	0803177a 	.word	0x0803177a
 8019f44:	200097fc 	.word	0x200097fc
 8019f48:	080317a3 	.word	0x080317a3
 8019f4c:	20009804 	.word	0x20009804

08019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019f50:	b538      	push	{r3, r4, r5, lr}
 8019f52:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f58:	429a      	cmp	r2, r3
 8019f5a:	4604      	mov	r4, r0
 8019f5c:	d014      	beq.n	8019f88 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8019f5e:	6803      	ldr	r3, [r0, #0]
 8019f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019f62:	4798      	blx	r3
 8019f64:	6823      	ldr	r3, [r4, #0]
 8019f66:	4605      	mov	r5, r0
 8019f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019f6a:	4620      	mov	r0, r4
 8019f6c:	4798      	blx	r3
 8019f6e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019f72:	b22d      	sxth	r5, r5
 8019f74:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019f78:	4601      	mov	r1, r0
 8019f7a:	bf06      	itte	eq
 8019f7c:	4602      	moveq	r2, r0
 8019f7e:	4629      	moveq	r1, r5
 8019f80:	462a      	movne	r2, r5
 8019f82:	4620      	mov	r0, r4
 8019f84:	f7f6 fd62 	bl	8010a4c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019f88:	bd38      	pop	{r3, r4, r5, pc}

08019f8a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019f8a:	888a      	ldrh	r2, [r1, #4]
 8019f8c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019f8e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019f92:	b922      	cbnz	r2, 8019f9e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019f94:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019f98:	b90b      	cbnz	r3, 8019f9e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019f9a:	f7ff bfd9 	b.w	8019f50 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019f9e:	4770      	bx	lr

08019fa0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>:
 8019fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fa4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019faa:	429a      	cmp	r2, r3
 8019fac:	4604      	mov	r4, r0
 8019fae:	d054      	beq.n	801a05a <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xba>
 8019fb0:	4b42      	ldr	r3, [pc, #264]	; (801a0bc <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x11c>)
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	b92b      	cbnz	r3, 8019fc2 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x22>
 8019fb6:	4b42      	ldr	r3, [pc, #264]	; (801a0c0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x120>)
 8019fb8:	4a42      	ldr	r2, [pc, #264]	; (801a0c4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 8019fba:	21ae      	movs	r1, #174	; 0xae
 8019fbc:	4842      	ldr	r0, [pc, #264]	; (801a0c8 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x128>)
 8019fbe:	f013 ff47 	bl	802de50 <__assert_func>
 8019fc2:	4942      	ldr	r1, [pc, #264]	; (801a0cc <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x12c>)
 8019fc4:	8809      	ldrh	r1, [r1, #0]
 8019fc6:	4291      	cmp	r1, r2
 8019fc8:	d803      	bhi.n	8019fd2 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x32>
 8019fca:	4b41      	ldr	r3, [pc, #260]	; (801a0d0 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x130>)
 8019fcc:	4a3d      	ldr	r2, [pc, #244]	; (801a0c4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x124>)
 8019fce:	21af      	movs	r1, #175	; 0xaf
 8019fd0:	e7f4      	b.n	8019fbc <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x1c>
 8019fd2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019fd6:	f893 9001 	ldrb.w	r9, [r3, #1]
 8019fda:	6803      	ldr	r3, [r0, #0]
 8019fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019fde:	4798      	blx	r3
 8019fe0:	6823      	ldr	r3, [r4, #0]
 8019fe2:	4680      	mov	r8, r0
 8019fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	4798      	blx	r3
 8019fea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019fee:	f009 0903 	and.w	r9, r9, #3
 8019ff2:	4605      	mov	r5, r0
 8019ff4:	b287      	uxth	r7, r0
 8019ff6:	fa0f f688 	sxth.w	r6, r8
 8019ffa:	b1cb      	cbz	r3, 801a030 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x90>
 8019ffc:	2b02      	cmp	r3, #2
 8019ffe:	d12e      	bne.n	801a05e <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xbe>
 801a000:	f1b9 0f02 	cmp.w	r9, #2
 801a004:	d017      	beq.n	801a036 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801a006:	8920      	ldrh	r0, [r4, #8]
 801a008:	88a1      	ldrh	r1, [r4, #4]
 801a00a:	6822      	ldr	r2, [r4, #0]
 801a00c:	f1b9 0f01 	cmp.w	r9, #1
 801a010:	bf13      	iteet	ne
 801a012:	1840      	addne	r0, r0, r1
 801a014:	2302      	moveq	r3, #2
 801a016:	eba0 0008 	subeq.w	r0, r0, r8
 801a01a:	eba0 0108 	subne.w	r1, r0, r8
 801a01e:	bf04      	itt	eq
 801a020:	fb90 f3f3 	sdiveq	r3, r0, r3
 801a024:	18c9      	addeq	r1, r1, r3
 801a026:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801a028:	b209      	sxth	r1, r1
 801a02a:	4620      	mov	r0, r4
 801a02c:	4790      	blx	r2
 801a02e:	e002      	b.n	801a036 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801a030:	f1b9 0f00 	cmp.w	r9, #0
 801a034:	d1e7      	bne.n	801a006 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x66>
 801a036:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a03a:	2b02      	cmp	r3, #2
 801a03c:	d108      	bne.n	801a050 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb0>
 801a03e:	88e3      	ldrh	r3, [r4, #6]
 801a040:	8961      	ldrh	r1, [r4, #10]
 801a042:	4419      	add	r1, r3
 801a044:	6823      	ldr	r3, [r4, #0]
 801a046:	1bc9      	subs	r1, r1, r7
 801a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a04a:	b209      	sxth	r1, r1
 801a04c:	4620      	mov	r0, r4
 801a04e:	4798      	blx	r3
 801a050:	462a      	mov	r2, r5
 801a052:	4631      	mov	r1, r6
 801a054:	4620      	mov	r0, r4
 801a056:	f7f6 fcf9 	bl	8010a4c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801a05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a05e:	2b01      	cmp	r3, #1
 801a060:	d112      	bne.n	801a088 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe8>
 801a062:	f1b9 0f00 	cmp.w	r9, #0
 801a066:	d114      	bne.n	801a092 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 801a068:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a06c:	2b01      	cmp	r3, #1
 801a06e:	d108      	bne.n	801a082 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xe2>
 801a070:	88a3      	ldrh	r3, [r4, #4]
 801a072:	8921      	ldrh	r1, [r4, #8]
 801a074:	4419      	add	r1, r3
 801a076:	6823      	ldr	r3, [r4, #0]
 801a078:	1bc9      	subs	r1, r1, r7
 801a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a07c:	b209      	sxth	r1, r1
 801a07e:	4620      	mov	r0, r4
 801a080:	4798      	blx	r3
 801a082:	4632      	mov	r2, r6
 801a084:	4629      	mov	r1, r5
 801a086:	e7e5      	b.n	801a054 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xb4>
 801a088:	2b03      	cmp	r3, #3
 801a08a:	d102      	bne.n	801a092 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf2>
 801a08c:	f1b9 0f02 	cmp.w	r9, #2
 801a090:	d0ea      	beq.n	801a068 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 801a092:	8963      	ldrh	r3, [r4, #10]
 801a094:	88e1      	ldrh	r1, [r4, #6]
 801a096:	6822      	ldr	r2, [r4, #0]
 801a098:	f1b9 0f01 	cmp.w	r9, #1
 801a09c:	bf0b      	itete	eq
 801a09e:	2002      	moveq	r0, #2
 801a0a0:	185b      	addne	r3, r3, r1
 801a0a2:	eba3 0308 	subeq.w	r3, r3, r8
 801a0a6:	eba3 0108 	subne.w	r1, r3, r8
 801a0aa:	bf04      	itt	eq
 801a0ac:	fb93 f0f0 	sdiveq	r0, r3, r0
 801a0b0:	1809      	addeq	r1, r1, r0
 801a0b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801a0b4:	b209      	sxth	r1, r1
 801a0b6:	4620      	mov	r0, r4
 801a0b8:	4790      	blx	r2
 801a0ba:	e7d5      	b.n	801a068 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc8>
 801a0bc:	200097f8 	.word	0x200097f8
 801a0c0:	08031738 	.word	0x08031738
 801a0c4:	08031870 	.word	0x08031870
 801a0c8:	0803177a 	.word	0x0803177a
 801a0cc:	200097fc 	.word	0x200097fc
 801a0d0:	080317a3 	.word	0x080317a3

0801a0d4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	8083      	strh	r3, [r0, #4]
 801a0d8:	80c3      	strh	r3, [r0, #6]
 801a0da:	8003      	strh	r3, [r0, #0]
 801a0dc:	8043      	strh	r3, [r0, #2]
 801a0de:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801a0e2:	2bff      	cmp	r3, #255	; 0xff
 801a0e4:	bf01      	itttt	eq
 801a0e6:	890b      	ldrheq	r3, [r1, #8]
 801a0e8:	8083      	strheq	r3, [r0, #4]
 801a0ea:	894b      	ldrheq	r3, [r1, #10]
 801a0ec:	80c3      	strheq	r3, [r0, #6]
 801a0ee:	4770      	bx	lr

0801a0f0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801a0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a0f2:	4604      	mov	r4, r0
 801a0f4:	6808      	ldr	r0, [r1, #0]
 801a0f6:	6849      	ldr	r1, [r1, #4]
 801a0f8:	466b      	mov	r3, sp
 801a0fa:	c303      	stmia	r3!, {r0, r1}
 801a0fc:	6823      	ldr	r3, [r4, #0]
 801a0fe:	4669      	mov	r1, sp
 801a100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a102:	4620      	mov	r0, r4
 801a104:	4798      	blx	r3
 801a106:	4b08      	ldr	r3, [pc, #32]	; (801a128 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a10e:	b10a      	cbz	r2, 801a114 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801a110:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a112:	b900      	cbnz	r0, 801a116 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801a114:	6898      	ldr	r0, [r3, #8]
 801a116:	6803      	ldr	r3, [r0, #0]
 801a118:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801a11a:	699d      	ldr	r5, [r3, #24]
 801a11c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a120:	4669      	mov	r1, sp
 801a122:	47a8      	blx	r5
 801a124:	b003      	add	sp, #12
 801a126:	bd30      	pop	{r4, r5, pc}
 801a128:	200097a8 	.word	0x200097a8

0801a12c <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 801a12c:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 801a130:	600b      	str	r3, [r1, #0]
 801a132:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 801a136:	6013      	str	r3, [r2, #0]
 801a138:	4770      	bx	lr

0801a13a <_ZN8touchgfx5Gauge8setWidthEs>:
 801a13a:	8101      	strh	r1, [r0, #8]
 801a13c:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 801a140:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 801a144:	4770      	bx	lr

0801a146 <_ZN8touchgfx5Gauge9setHeightEs>:
 801a146:	8141      	strh	r1, [r0, #10]
 801a148:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 801a14c:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 801a150:	4770      	bx	lr

0801a152 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 801a152:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801a156:	4770      	bx	lr

0801a158 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 801a158:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801a15c:	4770      	bx	lr

0801a15e <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801a15e:	4770      	bx	lr

0801a160 <_ZN8touchgfx5Gauge8setAlphaEh>:
 801a160:	b538      	push	{r3, r4, r5, lr}
 801a162:	4604      	mov	r4, r0
 801a164:	460d      	mov	r5, r1
 801a166:	f7fc fe60 	bl	8016e2a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801a16a:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801a16e:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
 801a172:	bd38      	pop	{r3, r4, r5, pc}

0801a174 <_ZN8touchgfx5GaugeC1Ev>:
 801a174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a176:	4604      	mov	r4, r0
 801a178:	4626      	mov	r6, r4
 801a17a:	f7fc ff7b 	bl	8017074 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801a17e:	4b18      	ldr	r3, [pc, #96]	; (801a1e0 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 801a180:	f846 3bb4 	str.w	r3, [r6], #180
 801a184:	a902      	add	r1, sp, #8
 801a186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a18a:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801a18e:	4630      	mov	r0, r6
 801a190:	f7ff f818 	bl	80191c4 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801a194:	2500      	movs	r5, #0
 801a196:	2301      	movs	r3, #1
 801a198:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 801a19c:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 801a1a0:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 801a1a4:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 801a1a8:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 801a1ac:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 801a1b0:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 801a1b4:	4638      	mov	r0, r7
 801a1b6:	f7fe fa71 	bl	801869c <_ZN8touchgfx6CircleC1Ev>
 801a1ba:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801a1be:	4620      	mov	r0, r4
 801a1c0:	f7fc ffe4 	bl	801718c <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801a1c4:	4639      	mov	r1, r7
 801a1c6:	4620      	mov	r0, r4
 801a1c8:	f7fd f812 	bl	80171f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a1cc:	4620      	mov	r0, r4
 801a1ce:	4631      	mov	r1, r6
 801a1d0:	f7fd f80e 	bl	80171f0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 801a1da:	b003      	add	sp, #12
 801a1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1de:	bf00      	nop
 801a1e0:	08031950 	.word	0x08031950

0801a1e4 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801a1e4:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 801a1e8:	4770      	bx	lr

0801a1ea <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801a1ea:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 801a1ee:	4770      	bx	lr

0801a1f0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 801a1f0:	b538      	push	{r3, r4, r5, lr}
 801a1f2:	8902      	ldrh	r2, [r0, #8]
 801a1f4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801a1f8:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 801a1fc:	4604      	mov	r4, r0
 801a1fe:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 801a202:	2200      	movs	r2, #0
 801a204:	4611      	mov	r1, r2
 801a206:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 801a20a:	4628      	mov	r0, r5
 801a20c:	f7f6 fbc2 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
 801a210:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 801a214:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801a218:	1a9b      	subs	r3, r3, r2
 801a21a:	ee07 3a90 	vmov	s15, r3
 801a21e:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 801a222:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 801a226:	1a9b      	subs	r3, r3, r2
 801a228:	ee07 3a10 	vmov	s14, r3
 801a22c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a230:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a234:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 801a238:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 801a23c:	4628      	mov	r0, r5
 801a23e:	f7ff f80d 	bl	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a242:	4b16      	ldr	r3, [pc, #88]	; (801a29c <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 801a244:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 801a248:	4628      	mov	r0, r5
 801a24a:	f7ff f807 	bl	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a24e:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801a252:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 801a256:	ee07 3a90 	vmov	s15, r3
 801a25a:	ee07 2a10 	vmov	s14, r2
 801a25e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a262:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a266:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 801a26a:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801a26e:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 801a272:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801a276:	4628      	mov	r0, r5
 801a278:	f7fe fff0 	bl	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a27c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801a280:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 801a284:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 801a288:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 801a28c:	4628      	mov	r0, r5
 801a28e:	f7fe ffe5 	bl	801925c <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801a292:	2301      	movs	r3, #1
 801a294:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801a298:	bd38      	pop	{r3, r4, r5, pc}
 801a29a:	bf00      	nop
 801a29c:	43960000 	.word	0x43960000

0801a2a0 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 801a2a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a2a2:	4604      	mov	r4, r0
 801a2a4:	a802      	add	r0, sp, #8
 801a2a6:	4616      	mov	r6, r2
 801a2a8:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801a2ac:	461d      	mov	r5, r3
 801a2ae:	4601      	mov	r1, r0
 801a2b0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801a2b4:	f7ff f928 	bl	8019508 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 801a2b8:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 801a2bc:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	f7ff ff95 	bl	801a1f0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801a2c6:	b002      	add	sp, #8
 801a2c8:	bd70      	pop	{r4, r5, r6, pc}

0801a2ca <_ZN8touchgfx5Gauge9setCenterEii>:
 801a2ca:	b570      	push	{r4, r5, r6, lr}
 801a2cc:	4606      	mov	r6, r0
 801a2ce:	460d      	mov	r5, r1
 801a2d0:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 801a2d4:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 801a2d8:	4614      	mov	r4, r2
 801a2da:	f7ff ff89 	bl	801a1f0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801a2de:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 801a2e2:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 801a2e6:	1aa4      	subs	r4, r4, r2
 801a2e8:	1a6d      	subs	r5, r5, r1
 801a2ea:	0164      	lsls	r4, r4, #5
 801a2ec:	016d      	lsls	r5, r5, #5
 801a2ee:	3410      	adds	r4, #16
 801a2f0:	3510      	adds	r5, #16
 801a2f2:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
 801a2f6:	f8c6 418c 	str.w	r4, [r6, #396]	; 0x18c
 801a2fa:	bd70      	pop	{r4, r5, r6, pc}

0801a2fc <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 801a2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a2fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801a300:	0149      	lsls	r1, r1, #5
 801a302:	4299      	cmp	r1, r3
 801a304:	4604      	mov	r4, r0
 801a306:	9101      	str	r1, [sp, #4]
 801a308:	d00b      	beq.n	801a322 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801a30a:	4601      	mov	r1, r0
 801a30c:	aa01      	add	r2, sp, #4
 801a30e:	a802      	add	r0, sp, #8
 801a310:	f7fe fbdd 	bl	8018ace <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 801a314:	9b01      	ldr	r3, [sp, #4]
 801a316:	6423      	str	r3, [r4, #64]	; 0x40
 801a318:	6823      	ldr	r3, [r4, #0]
 801a31a:	a902      	add	r1, sp, #8
 801a31c:	691b      	ldr	r3, [r3, #16]
 801a31e:	4620      	mov	r0, r4
 801a320:	4798      	blx	r3
 801a322:	b004      	add	sp, #16
 801a324:	bd10      	pop	{r4, pc}
	...

0801a328 <_ZN8touchgfx5Gauge8setValueEi>:
 801a328:	b570      	push	{r4, r5, r6, lr}
 801a32a:	4604      	mov	r4, r0
 801a32c:	f7fc fdc6 	bl	8016ebc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801a330:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801a334:	429a      	cmp	r2, r3
 801a336:	bfac      	ite	ge
 801a338:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 801a33c:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 801a340:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801a344:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 801a348:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801a34c:	1ac9      	subs	r1, r1, r3
 801a34e:	2900      	cmp	r1, #0
 801a350:	bfb8      	it	lt
 801a352:	4249      	neglt	r1, r1
 801a354:	b289      	uxth	r1, r1
 801a356:	4620      	mov	r0, r4
 801a358:	f7fc fe43 	bl	8016fe2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801a35c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801a360:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801a364:	eddf 6a19 	vldr	s13, [pc, #100]	; 801a3cc <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801a368:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801a3d0 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 801a36c:	429a      	cmp	r2, r3
 801a36e:	4605      	mov	r5, r0
 801a370:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 801a374:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801a378:	da15      	bge.n	801a3a6 <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 801a37a:	1b5b      	subs	r3, r3, r5
 801a37c:	ee07 3a90 	vmov	s15, r3
 801a380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a384:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801a388:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801a38c:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801a390:	ee21 1a07 	vmul.f32	s2, s2, s14
 801a394:	f7ff f9b5 	bl	8019702 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801a398:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801a39c:	1b49      	subs	r1, r1, r5
 801a39e:	4630      	mov	r0, r6
 801a3a0:	f7ff ffac 	bl	801a2fc <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 801a3a4:	bd70      	pop	{r4, r5, r6, pc}
 801a3a6:	442b      	add	r3, r5
 801a3a8:	ee07 3a90 	vmov	s15, r3
 801a3ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3b0:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801a3b4:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801a3b8:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801a3bc:	ee21 1a07 	vmul.f32	s2, s2, s14
 801a3c0:	f7ff f99f 	bl	8019702 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801a3c4:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801a3c8:	4429      	add	r1, r5
 801a3ca:	e7e8      	b.n	801a39e <_ZN8touchgfx5Gauge8setValueEi+0x76>
 801a3cc:	43340000 	.word	0x43340000
 801a3d0:	40490fdb 	.word	0x40490fdb

0801a3d4 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 801a3d4:	4291      	cmp	r1, r2
 801a3d6:	b510      	push	{r4, lr}
 801a3d8:	4604      	mov	r4, r0
 801a3da:	d105      	bne.n	801a3e8 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 801a3dc:	4b0b      	ldr	r3, [pc, #44]	; (801a40c <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 801a3de:	4a0c      	ldr	r2, [pc, #48]	; (801a410 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 801a3e0:	480c      	ldr	r0, [pc, #48]	; (801a414 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 801a3e2:	215e      	movs	r1, #94	; 0x5e
 801a3e4:	f013 fd34 	bl	802de50 <__assert_func>
 801a3e8:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 801a3ec:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 801a3f0:	0149      	lsls	r1, r1, #5
 801a3f2:	0152      	lsls	r2, r2, #5
 801a3f4:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
 801a3f8:	f8c0 2198 	str.w	r2, [r0, #408]	; 0x198
 801a3fc:	f7fc fd12 	bl	8016e24 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 801a400:	4601      	mov	r1, r0
 801a402:	4620      	mov	r0, r4
 801a404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a408:	f7ff bf8e 	b.w	801a328 <_ZN8touchgfx5Gauge8setValueEi>
 801a40c:	08031904 	.word	0x08031904
 801a410:	08031a2c 	.word	0x08031a2c
 801a414:	0803191b 	.word	0x0803191b

0801a418 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801a418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a41a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a41c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a420:	4299      	cmp	r1, r3
 801a422:	4606      	mov	r6, r0
 801a424:	d02a      	beq.n	801a47c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801a426:	4b16      	ldr	r3, [pc, #88]	; (801a480 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	b92b      	cbnz	r3, 801a438 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801a42c:	4b15      	ldr	r3, [pc, #84]	; (801a484 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801a42e:	4a16      	ldr	r2, [pc, #88]	; (801a488 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801a430:	21ae      	movs	r1, #174	; 0xae
 801a432:	4816      	ldr	r0, [pc, #88]	; (801a48c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801a434:	f013 fd0c 	bl	802de50 <__assert_func>
 801a438:	4a15      	ldr	r2, [pc, #84]	; (801a490 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801a43a:	8812      	ldrh	r2, [r2, #0]
 801a43c:	428a      	cmp	r2, r1
 801a43e:	d803      	bhi.n	801a448 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801a440:	4b14      	ldr	r3, [pc, #80]	; (801a494 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801a442:	4a11      	ldr	r2, [pc, #68]	; (801a488 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801a444:	21af      	movs	r1, #175	; 0xaf
 801a446:	e7f4      	b.n	801a432 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801a448:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801a44c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801a450:	4b11      	ldr	r3, [pc, #68]	; (801a498 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801a452:	7854      	ldrb	r4, [r2, #1]
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801a45a:	682b      	ldr	r3, [r5, #0]
 801a45c:	69df      	ldr	r7, [r3, #28]
 801a45e:	4b0f      	ldr	r3, [pc, #60]	; (801a49c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801a460:	6818      	ldr	r0, [r3, #0]
 801a462:	f7fa f825 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 801a466:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801a46a:	2300      	movs	r3, #0
 801a46c:	9300      	str	r3, [sp, #0]
 801a46e:	4602      	mov	r2, r0
 801a470:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801a472:	4621      	mov	r1, r4
 801a474:	4628      	mov	r0, r5
 801a476:	47b8      	blx	r7
 801a478:	b003      	add	sp, #12
 801a47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a47c:	2000      	movs	r0, #0
 801a47e:	e7fb      	b.n	801a478 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801a480:	200097f8 	.word	0x200097f8
 801a484:	08031738 	.word	0x08031738
 801a488:	08031ae0 	.word	0x08031ae0
 801a48c:	0803177a 	.word	0x0803177a
 801a490:	200097fc 	.word	0x200097fc
 801a494:	080317a3 	.word	0x080317a3
 801a498:	20009800 	.word	0x20009800
 801a49c:	20009804 	.word	0x20009804

0801a4a0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801a4a0:	b570      	push	{r4, r5, r6, lr}
 801a4a2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801a4a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a4a8:	4299      	cmp	r1, r3
 801a4aa:	4604      	mov	r4, r0
 801a4ac:	d01e      	beq.n	801a4ec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801a4ae:	6803      	ldr	r3, [r0, #0]
 801a4b0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801a4b2:	4b0f      	ldr	r3, [pc, #60]	; (801a4f0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	b92b      	cbnz	r3, 801a4c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801a4b8:	4b0e      	ldr	r3, [pc, #56]	; (801a4f4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801a4ba:	4a0f      	ldr	r2, [pc, #60]	; (801a4f8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a4bc:	21ae      	movs	r1, #174	; 0xae
 801a4be:	480f      	ldr	r0, [pc, #60]	; (801a4fc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801a4c0:	f013 fcc6 	bl	802de50 <__assert_func>
 801a4c4:	4b0e      	ldr	r3, [pc, #56]	; (801a500 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801a4c6:	881b      	ldrh	r3, [r3, #0]
 801a4c8:	428b      	cmp	r3, r1
 801a4ca:	d803      	bhi.n	801a4d4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801a4cc:	4b0d      	ldr	r3, [pc, #52]	; (801a504 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801a4ce:	4a0a      	ldr	r2, [pc, #40]	; (801a4f8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a4d0:	21af      	movs	r1, #175	; 0xaf
 801a4d2:	e7f4      	b.n	801a4be <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801a4d4:	4b0c      	ldr	r3, [pc, #48]	; (801a508 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801a4d6:	6818      	ldr	r0, [r3, #0]
 801a4d8:	f7f9 ffea 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 801a4dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801a4de:	4601      	mov	r1, r0
 801a4e0:	46ac      	mov	ip, r5
 801a4e2:	4620      	mov	r0, r4
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4ea:	4760      	bx	ip
 801a4ec:	2000      	movs	r0, #0
 801a4ee:	bd70      	pop	{r4, r5, r6, pc}
 801a4f0:	200097f8 	.word	0x200097f8
 801a4f4:	08031738 	.word	0x08031738
 801a4f8:	08031ae0 	.word	0x08031ae0
 801a4fc:	0803177a 	.word	0x0803177a
 801a500:	200097fc 	.word	0x200097fc
 801a504:	080317a3 	.word	0x080317a3
 801a508:	20009804 	.word	0x20009804

0801a50c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801a50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a510:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a516:	4293      	cmp	r3, r2
 801a518:	b08c      	sub	sp, #48	; 0x30
 801a51a:	4604      	mov	r4, r0
 801a51c:	460e      	mov	r6, r1
 801a51e:	d05d      	beq.n	801a5dc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a520:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801a600 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801a524:	f8d8 2000 	ldr.w	r2, [r8]
 801a528:	b92a      	cbnz	r2, 801a536 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801a52a:	4b2e      	ldr	r3, [pc, #184]	; (801a5e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801a52c:	4a2e      	ldr	r2, [pc, #184]	; (801a5e8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a52e:	21ae      	movs	r1, #174	; 0xae
 801a530:	482e      	ldr	r0, [pc, #184]	; (801a5ec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801a532:	f013 fc8d 	bl	802de50 <__assert_func>
 801a536:	4f2e      	ldr	r7, [pc, #184]	; (801a5f0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801a538:	8839      	ldrh	r1, [r7, #0]
 801a53a:	4299      	cmp	r1, r3
 801a53c:	d803      	bhi.n	801a546 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801a53e:	4b2d      	ldr	r3, [pc, #180]	; (801a5f4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801a540:	4a29      	ldr	r2, [pc, #164]	; (801a5e8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a542:	21af      	movs	r1, #175	; 0xaf
 801a544:	e7f4      	b.n	801a530 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801a546:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a54a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a54e:	4b2a      	ldr	r3, [pc, #168]	; (801a5f8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a556:	2a00      	cmp	r2, #0
 801a558:	d040      	beq.n	801a5dc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a55a:	784b      	ldrb	r3, [r1, #1]
 801a55c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801a560:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801a564:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801a568:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801a56c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801a570:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a572:	9207      	str	r2, [sp, #28]
 801a574:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801a578:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a57c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a580:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801a584:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801a588:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801a58c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a590:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801a594:	f88d a020 	strb.w	sl, [sp, #32]
 801a598:	9009      	str	r0, [sp, #36]	; 0x24
 801a59a:	f7f5 fcbb 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 801a59e:	ad05      	add	r5, sp, #20
 801a5a0:	4681      	mov	r9, r0
 801a5a2:	4621      	mov	r1, r4
 801a5a4:	4628      	mov	r0, r5
 801a5a6:	f002 fd97 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a5aa:	f8d8 3000 	ldr.w	r3, [r8]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d0bb      	beq.n	801a52a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801a5b2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a5b4:	883b      	ldrh	r3, [r7, #0]
 801a5b6:	428b      	cmp	r3, r1
 801a5b8:	d9c1      	bls.n	801a53e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801a5ba:	4b10      	ldr	r3, [pc, #64]	; (801a5fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801a5bc:	6818      	ldr	r0, [r3, #0]
 801a5be:	f7f9 ff77 	bl	80144b0 <_ZNK8touchgfx5Texts7getTextEt>
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	9303      	str	r3, [sp, #12]
 801a5c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a5c8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801a5cc:	ab07      	add	r3, sp, #28
 801a5ce:	9300      	str	r3, [sp, #0]
 801a5d0:	e895 0006 	ldmia.w	r5, {r1, r2}
 801a5d4:	4633      	mov	r3, r6
 801a5d6:	4648      	mov	r0, r9
 801a5d8:	f7f9 fefb 	bl	80143d2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a5dc:	b00c      	add	sp, #48	; 0x30
 801a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5e2:	bf00      	nop
 801a5e4:	08031738 	.word	0x08031738
 801a5e8:	08031ae0 	.word	0x08031ae0
 801a5ec:	0803177a 	.word	0x0803177a
 801a5f0:	200097fc 	.word	0x200097fc
 801a5f4:	080317a3 	.word	0x080317a3
 801a5f8:	20009800 	.word	0x20009800
 801a5fc:	20009804 	.word	0x20009804
 801a600:	200097f8 	.word	0x200097f8

0801a604 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a604:	b570      	push	{r4, r5, r6, lr}
 801a606:	880b      	ldrh	r3, [r1, #0]
 801a608:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a60a:	4604      	mov	r4, r0
 801a60c:	4608      	mov	r0, r1
 801a60e:	460d      	mov	r5, r1
 801a610:	f005 f906 	bl	801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a614:	4606      	mov	r6, r0
 801a616:	4628      	mov	r0, r5
 801a618:	f005 f93c 	bl	801f894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a61c:	6823      	ldr	r3, [r4, #0]
 801a61e:	4605      	mov	r5, r0
 801a620:	b231      	sxth	r1, r6
 801a622:	4620      	mov	r0, r4
 801a624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a626:	4798      	blx	r3
 801a628:	6823      	ldr	r3, [r4, #0]
 801a62a:	b229      	sxth	r1, r5
 801a62c:	4620      	mov	r0, r4
 801a62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a634:	4718      	bx	r3

0801a636 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a636:	b510      	push	{r4, lr}
 801a638:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a63c:	2bff      	cmp	r3, #255	; 0xff
 801a63e:	4604      	mov	r4, r0
 801a640:	d006      	beq.n	801a650 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801a642:	2300      	movs	r3, #0
 801a644:	8003      	strh	r3, [r0, #0]
 801a646:	8043      	strh	r3, [r0, #2]
 801a648:	8083      	strh	r3, [r0, #4]
 801a64a:	80c3      	strh	r3, [r0, #6]
 801a64c:	4620      	mov	r0, r4
 801a64e:	bd10      	pop	{r4, pc}
 801a650:	3126      	adds	r1, #38	; 0x26
 801a652:	f005 f959 	bl	801f908 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a656:	e7f9      	b.n	801a64c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801a658 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801a658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a65c:	4604      	mov	r4, r0
 801a65e:	b088      	sub	sp, #32
 801a660:	f854 3b26 	ldr.w	r3, [r4], #38
 801a664:	2500      	movs	r5, #0
 801a666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a668:	460f      	mov	r7, r1
 801a66a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a66e:	a904      	add	r1, sp, #16
 801a670:	4606      	mov	r6, r0
 801a672:	4798      	blx	r3
 801a674:	4620      	mov	r0, r4
 801a676:	f005 f8d3 	bl	801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a67a:	4680      	mov	r8, r0
 801a67c:	4620      	mov	r0, r4
 801a67e:	f005 f909 	bl	801f894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a682:	9506      	str	r5, [sp, #24]
 801a684:	ad06      	add	r5, sp, #24
 801a686:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a68a:	4639      	mov	r1, r7
 801a68c:	4628      	mov	r0, r5
 801a68e:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a692:	f7fc fef1 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801a696:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	dd19      	ble.n	801a6d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a69e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	dd15      	ble.n	801a6d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a6a6:	4b0c      	ldr	r3, [pc, #48]	; (801a6d8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a6ae:	b10a      	cbz	r2, 801a6b4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801a6b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a6b2:	b900      	cbnz	r0, 801a6b6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801a6b4:	6898      	ldr	r0, [r3, #8]
 801a6b6:	6801      	ldr	r1, [r0, #0]
 801a6b8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a6bc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a6c0:	2701      	movs	r7, #1
 801a6c2:	9702      	str	r7, [sp, #8]
 801a6c4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801a6c8:	e9cd 5600 	strd	r5, r6, [sp]
 801a6cc:	688d      	ldr	r5, [r1, #8]
 801a6ce:	4621      	mov	r1, r4
 801a6d0:	47a8      	blx	r5
 801a6d2:	b008      	add	sp, #32
 801a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6d8:	200097a8 	.word	0x200097a8

0801a6dc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a6dc:	b510      	push	{r4, lr}
 801a6de:	6803      	ldr	r3, [r0, #0]
 801a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6e2:	460c      	mov	r4, r1
 801a6e4:	4798      	blx	r3
 801a6e6:	1b03      	subs	r3, r0, r4
 801a6e8:	4258      	negs	r0, r3
 801a6ea:	4158      	adcs	r0, r3
 801a6ec:	bd10      	pop	{r4, pc}
	...

0801a6f0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a6f0:	4b01      	ldr	r3, [pc, #4]	; (801a6f8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a6f2:	6019      	str	r1, [r3, #0]
 801a6f4:	4770      	bx	lr
 801a6f6:	bf00      	nop
 801a6f8:	200097b0 	.word	0x200097b0

0801a6fc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a700:	4696      	mov	lr, r2
 801a702:	4605      	mov	r5, r0
 801a704:	4614      	mov	r4, r2
 801a706:	460e      	mov	r6, r1
 801a708:	461f      	mov	r7, r3
 801a70a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a70e:	b097      	sub	sp, #92	; 0x5c
 801a710:	f10d 0c1c 	add.w	ip, sp, #28
 801a714:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a718:	f8de 3000 	ldr.w	r3, [lr]
 801a71c:	f8cc 3000 	str.w	r3, [ip]
 801a720:	f104 0e14 	add.w	lr, r4, #20
 801a724:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a728:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a72c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a730:	f8de 3000 	ldr.w	r3, [lr]
 801a734:	f8cc 3000 	str.w	r3, [ip]
 801a738:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a73c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a740:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a748:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a74c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a750:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a754:	f8de 3000 	ldr.w	r3, [lr]
 801a758:	f8cc 3000 	str.w	r3, [ip]
 801a75c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a75e:	682b      	ldr	r3, [r5, #0]
 801a760:	9201      	str	r2, [sp, #4]
 801a762:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a766:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a768:	9200      	str	r2, [sp, #0]
 801a76a:	f8cd 8008 	str.w	r8, [sp, #8]
 801a76e:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 801a772:	aa07      	add	r2, sp, #28
 801a774:	463b      	mov	r3, r7
 801a776:	4631      	mov	r1, r6
 801a778:	4628      	mov	r0, r5
 801a77a:	47d8      	blx	fp
 801a77c:	46a6      	mov	lr, r4
 801a77e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a782:	f10d 0c1c 	add.w	ip, sp, #28
 801a786:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a78a:	f8de 3000 	ldr.w	r3, [lr]
 801a78e:	f8cc 3000 	str.w	r3, [ip]
 801a792:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a796:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a79a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a79e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a7a2:	343c      	adds	r4, #60	; 0x3c
 801a7a4:	f8de 3000 	ldr.w	r3, [lr]
 801a7a8:	f8cc 3000 	str.w	r3, [ip]
 801a7ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a7ae:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a7b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a7b6:	6823      	ldr	r3, [r4, #0]
 801a7b8:	f8cc 3000 	str.w	r3, [ip]
 801a7bc:	682b      	ldr	r3, [r5, #0]
 801a7be:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a7c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a7c4:	9201      	str	r2, [sp, #4]
 801a7c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a7c8:	9200      	str	r2, [sp, #0]
 801a7ca:	f8cd 8008 	str.w	r8, [sp, #8]
 801a7ce:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801a7d0:	aa07      	add	r2, sp, #28
 801a7d2:	463b      	mov	r3, r7
 801a7d4:	4631      	mov	r1, r6
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	47a0      	blx	r4
 801a7da:	b017      	add	sp, #92	; 0x5c
 801a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7e0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a7e0:	2000      	movs	r0, #0
 801a7e2:	4770      	bx	lr

0801a7e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e8:	b08d      	sub	sp, #52	; 0x34
 801a7ea:	4688      	mov	r8, r1
 801a7ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a7ee:	f8d3 c000 	ldr.w	ip, [r3]
 801a7f2:	680f      	ldr	r7, [r1, #0]
 801a7f4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a7f8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a7fc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a800:	edd3 6a07 	vldr	s13, [r3, #28]
 801a804:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a806:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a80a:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a80e:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a812:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a816:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a81a:	eba7 070c 	sub.w	r7, r7, ip
 801a81e:	42bc      	cmp	r4, r7
 801a820:	bfa8      	it	ge
 801a822:	463c      	movge	r4, r7
 801a824:	ee07 4a90 	vmov	s15, r4
 801a828:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a82c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a830:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a834:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a838:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a83c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a840:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a844:	eb09 0e0c 	add.w	lr, r9, ip
 801a848:	4571      	cmp	r1, lr
 801a84a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a84e:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a852:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a856:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a85a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a85e:	f340 808d 	ble.w	801a97c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801a862:	eba1 060e 	sub.w	r6, r1, lr
 801a866:	fb96 f5f4 	sdiv	r5, r6, r4
 801a86a:	ee07 5a10 	vmov	s14, r5
 801a86e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a872:	2d00      	cmp	r5, #0
 801a874:	fb04 6615 	mls	r6, r4, r5, r6
 801a878:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a87c:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a880:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a884:	dd13      	ble.n	801a8ae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 801a886:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a88a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a88e:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a896:	bf18      	it	ne
 801a898:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a89c:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a8a0:	bf08      	it	eq
 801a8a2:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a8a6:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a8aa:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a8ae:	fb05 f204 	mul.w	r2, r5, r4
 801a8b2:	1abf      	subs	r7, r7, r2
 801a8b4:	4494      	add	ip, r2
 801a8b6:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a8ba:	4411      	add	r1, r2
 801a8bc:	eb09 020c 	add.w	r2, r9, ip
 801a8c0:	443a      	add	r2, r7
 801a8c2:	b209      	sxth	r1, r1
 801a8c4:	428a      	cmp	r2, r1
 801a8c6:	bfc4      	itt	gt
 801a8c8:	eba1 0209 	subgt.w	r2, r1, r9
 801a8cc:	eba2 070c 	subgt.w	r7, r2, ip
 801a8d0:	2f00      	cmp	r7, #0
 801a8d2:	dd50      	ble.n	801a976 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 801a8d4:	fb97 f1f4 	sdiv	r1, r7, r4
 801a8d8:	fb04 7211 	mls	r2, r4, r1, r7
 801a8dc:	b90a      	cbnz	r2, 801a8e2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 801a8de:	3901      	subs	r1, #1
 801a8e0:	4622      	mov	r2, r4
 801a8e2:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a8e6:	6840      	ldr	r0, [r0, #4]
 801a8e8:	900b      	str	r0, [sp, #44]	; 0x2c
 801a8ea:	f8d0 a000 	ldr.w	sl, [r0]
 801a8ee:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a8f0:	9008      	str	r0, [sp, #32]
 801a8f2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a8f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a8f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a8fc:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a900:	695b      	ldr	r3, [r3, #20]
 801a902:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a904:	445b      	add	r3, fp
 801a906:	eef0 6a42 	vmov.f32	s13, s4
 801a90a:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a90e:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a912:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a916:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a91a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a91e:	9307      	str	r3, [sp, #28]
 801a920:	ee17 7a90 	vmov	r7, s15
 801a924:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a928:	eeb0 7a61 	vmov.f32	s14, s3
 801a92c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a930:	ee16 3a90 	vmov	r3, s13
 801a934:	fb97 f7f4 	sdiv	r7, r7, r4
 801a938:	ee17 ca90 	vmov	ip, s15
 801a93c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a940:	fb9c fcf4 	sdiv	ip, ip, r4
 801a944:	fb0c 3306 	mla	r3, ip, r6, r3
 801a948:	9302      	str	r3, [sp, #8]
 801a94a:	ee17 3a10 	vmov	r3, s14
 801a94e:	44b6      	add	lr, r6
 801a950:	fb04 e505 	mla	r5, r4, r5, lr
 801a954:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a958:	fb07 3706 	mla	r7, r7, r6, r3
 801a95c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a960:	e9cd 4700 	strd	r4, r7, [sp]
 801a964:	2900      	cmp	r1, #0
 801a966:	bfcc      	ite	gt
 801a968:	46a1      	movgt	r9, r4
 801a96a:	4691      	movle	r9, r2
 801a96c:	eba9 0306 	sub.w	r3, r9, r6
 801a970:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a974:	47a0      	blx	r4
 801a976:	b00d      	add	sp, #52	; 0x34
 801a978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a97c:	2500      	movs	r5, #0
 801a97e:	462e      	mov	r6, r5
 801a980:	e799      	b.n	801a8b6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0801a984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a988:	b0db      	sub	sp, #364	; 0x16c
 801a98a:	461d      	mov	r5, r3
 801a98c:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a990:	930a      	str	r3, [sp, #40]	; 0x28
 801a992:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a996:	930b      	str	r3, [sp, #44]	; 0x2c
 801a998:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a99c:	9310      	str	r3, [sp, #64]	; 0x40
 801a99e:	6803      	ldr	r3, [r0, #0]
 801a9a0:	910f      	str	r1, [sp, #60]	; 0x3c
 801a9a2:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801a9a4:	9009      	str	r0, [sp, #36]	; 0x24
 801a9a6:	4614      	mov	r4, r2
 801a9a8:	4629      	mov	r1, r5
 801a9aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a9ae:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a9b2:	47b8      	blx	r7
 801a9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9b6:	6058      	str	r0, [r3, #4]
 801a9b8:	2800      	cmp	r0, #0
 801a9ba:	f000 83a1 	beq.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a9be:	682b      	ldr	r3, [r5, #0]
 801a9c0:	9314      	str	r3, [sp, #80]	; 0x50
 801a9c2:	686b      	ldr	r3, [r5, #4]
 801a9c4:	9315      	str	r3, [sp, #84]	; 0x54
 801a9c6:	4bc4      	ldr	r3, [pc, #784]	; (801acd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a9c8:	ed94 7a02 	vldr	s14, [r4, #8]
 801a9cc:	7819      	ldrb	r1, [r3, #0]
 801a9ce:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a9d2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a9d6:	2900      	cmp	r1, #0
 801a9d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a9dc:	bf16      	itet	ne
 801a9de:	4619      	movne	r1, r3
 801a9e0:	4611      	moveq	r1, r2
 801a9e2:	4613      	movne	r3, r2
 801a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e8:	9116      	str	r1, [sp, #88]	; 0x58
 801a9ea:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a9ee:	f240 8387 	bls.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a9f2:	ed94 7a07 	vldr	s14, [r4, #28]
 801a9f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9fe:	f240 837f 	bls.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa02:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801aa06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801aa0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa0e:	f240 8377 	bls.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa12:	6822      	ldr	r2, [r4, #0]
 801aa14:	4bb1      	ldr	r3, [pc, #708]	; (801acdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801aa16:	429a      	cmp	r2, r3
 801aa18:	f2c0 8372 	blt.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa1c:	49b0      	ldr	r1, [pc, #704]	; (801ace0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801aa1e:	6963      	ldr	r3, [r4, #20]
 801aa20:	428a      	cmp	r2, r1
 801aa22:	f300 836d 	bgt.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa26:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801aa2a:	48ae      	ldr	r0, [pc, #696]	; (801ace4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801aa2c:	33ff      	adds	r3, #255	; 0xff
 801aa2e:	4283      	cmp	r3, r0
 801aa30:	f200 8366 	bhi.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801aa36:	4dac      	ldr	r5, [pc, #688]	; (801ace8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801aa38:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801aa3c:	33ff      	adds	r3, #255	; 0xff
 801aa3e:	42ab      	cmp	r3, r5
 801aa40:	f200 835e 	bhi.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa44:	6862      	ldr	r2, [r4, #4]
 801aa46:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801aa4a:	33ff      	adds	r3, #255	; 0xff
 801aa4c:	4283      	cmp	r3, r0
 801aa4e:	f200 8357 	bhi.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa52:	69a1      	ldr	r1, [r4, #24]
 801aa54:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801aa58:	33ff      	adds	r3, #255	; 0xff
 801aa5a:	4283      	cmp	r3, r0
 801aa5c:	f200 8350 	bhi.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801aa62:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801aa66:	30ff      	adds	r0, #255	; 0xff
 801aa68:	42a8      	cmp	r0, r5
 801aa6a:	f200 8349 	bhi.w	801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa6e:	428a      	cmp	r2, r1
 801aa70:	f280 8110 	bge.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801aa74:	429a      	cmp	r2, r3
 801aa76:	f300 8119 	bgt.w	801acac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801aa7a:	4299      	cmp	r1, r3
 801aa7c:	f280 811d 	bge.w	801acba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801aa80:	2502      	movs	r5, #2
 801aa82:	2701      	movs	r7, #1
 801aa84:	46a9      	mov	r9, r5
 801aa86:	46b8      	mov	r8, r7
 801aa88:	f04f 0a00 	mov.w	sl, #0
 801aa8c:	4621      	mov	r1, r4
 801aa8e:	a849      	add	r0, sp, #292	; 0x124
 801aa90:	f003 fed6 	bl	801e840 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801aa94:	4622      	mov	r2, r4
 801aa96:	4653      	mov	r3, sl
 801aa98:	a949      	add	r1, sp, #292	; 0x124
 801aa9a:	f8cd 9000 	str.w	r9, [sp]
 801aa9e:	a819      	add	r0, sp, #100	; 0x64
 801aaa0:	f003 fffe 	bl	801eaa0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801aaa4:	4622      	mov	r2, r4
 801aaa6:	4653      	mov	r3, sl
 801aaa8:	a949      	add	r1, sp, #292	; 0x124
 801aaaa:	f8cd 8000 	str.w	r8, [sp]
 801aaae:	a829      	add	r0, sp, #164	; 0xa4
 801aab0:	f003 fff6 	bl	801eaa0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801aab4:	4643      	mov	r3, r8
 801aab6:	4622      	mov	r2, r4
 801aab8:	a949      	add	r1, sp, #292	; 0x124
 801aaba:	f8cd 9000 	str.w	r9, [sp]
 801aabe:	a839      	add	r0, sp, #228	; 0xe4
 801aac0:	f003 ffee 	bl	801eaa0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801aac4:	42af      	cmp	r7, r5
 801aac6:	bfb5      	itete	lt
 801aac8:	2300      	movlt	r3, #0
 801aaca:	2301      	movge	r3, #1
 801aacc:	930e      	strlt	r3, [sp, #56]	; 0x38
 801aace:	930e      	strge	r3, [sp, #56]	; 0x38
 801aad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aad2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801aad6:	af12      	add	r7, sp, #72	; 0x48
 801aad8:	bfb9      	ittee	lt
 801aada:	ad29      	addlt	r5, sp, #164	; 0xa4
 801aadc:	ac19      	addlt	r4, sp, #100	; 0x64
 801aade:	ad19      	addge	r5, sp, #100	; 0x64
 801aae0:	ac29      	addge	r4, sp, #164	; 0xa4
 801aae2:	e887 0003 	stmia.w	r7, {r0, r1}
 801aae6:	b928      	cbnz	r0, 801aaf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801aae8:	4b80      	ldr	r3, [pc, #512]	; (801acec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801aaea:	6818      	ldr	r0, [r3, #0]
 801aaec:	6803      	ldr	r3, [r0, #0]
 801aaee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aaf0:	4798      	blx	r3
 801aaf2:	6038      	str	r0, [r7, #0]
 801aaf4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aaf6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801aafa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aafe:	930c      	str	r3, [sp, #48]	; 0x30
 801ab00:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ab02:	6963      	ldr	r3, [r4, #20]
 801ab04:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ab06:	440b      	add	r3, r1
 801ab08:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801ab0c:	4408      	add	r0, r1
 801ab0e:	b200      	sxth	r0, r0
 801ab10:	4283      	cmp	r3, r0
 801ab12:	900d      	str	r0, [sp, #52]	; 0x34
 801ab14:	f280 80dd 	bge.w	801acd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801ab18:	428b      	cmp	r3, r1
 801ab1a:	da08      	bge.n	801ab2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ab1c:	2a00      	cmp	r2, #0
 801ab1e:	dd06      	ble.n	801ab2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ab20:	1acb      	subs	r3, r1, r3
 801ab22:	429a      	cmp	r2, r3
 801ab24:	f2c0 80e4 	blt.w	801acf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	f300 80e2 	bgt.w	801acf2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801ab2e:	6967      	ldr	r7, [r4, #20]
 801ab30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab32:	443b      	add	r3, r7
 801ab34:	461f      	mov	r7, r3
 801ab36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab38:	1bdf      	subs	r7, r3, r7
 801ab3a:	4297      	cmp	r7, r2
 801ab3c:	bfa8      	it	ge
 801ab3e:	4617      	movge	r7, r2
 801ab40:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801ab44:	2f00      	cmp	r7, #0
 801ab46:	f340 8166 	ble.w	801ae16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801ab4a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ab4c:	6829      	ldr	r1, [r5, #0]
 801ab4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab52:	f9bb 3000 	ldrsh.w	r3, [fp]
 801ab56:	6820      	ldr	r0, [r4, #0]
 801ab58:	4411      	add	r1, r2
 801ab5a:	4299      	cmp	r1, r3
 801ab5c:	dd1a      	ble.n	801ab94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801ab5e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801ab62:	440b      	add	r3, r1
 801ab64:	4402      	add	r2, r0
 801ab66:	b21b      	sxth	r3, r3
 801ab68:	429a      	cmp	r2, r3
 801ab6a:	dc13      	bgt.n	801ab94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801ab6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	9206      	str	r2, [sp, #24]
 801ab74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ab76:	9205      	str	r2, [sp, #20]
 801ab78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab7a:	9500      	str	r5, [sp, #0]
 801ab7c:	e9cd b203 	strd	fp, r2, [sp, #12]
 801ab80:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ab82:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab84:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801ab88:	a912      	add	r1, sp, #72	; 0x48
 801ab8a:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801ab8e:	aa49      	add	r2, sp, #292	; 0x124
 801ab90:	4623      	mov	r3, r4
 801ab92:	47c8      	blx	r9
 801ab94:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ab98:	441a      	add	r2, r3
 801ab9a:	6963      	ldr	r3, [r4, #20]
 801ab9c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801aba0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801aba4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801aba8:	68a1      	ldr	r1, [r4, #8]
 801abaa:	ed94 6a08 	vldr	s12, [r4, #32]
 801abae:	6022      	str	r2, [r4, #0]
 801abb0:	3301      	adds	r3, #1
 801abb2:	6163      	str	r3, [r4, #20]
 801abb4:	69a3      	ldr	r3, [r4, #24]
 801abb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801abba:	3b01      	subs	r3, #1
 801abbc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801abc0:	61a3      	str	r3, [r4, #24]
 801abc2:	6923      	ldr	r3, [r4, #16]
 801abc4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801abc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801abcc:	edd4 6a07 	vldr	s13, [r4, #28]
 801abd0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801abd4:	440b      	add	r3, r1
 801abd6:	68e1      	ldr	r1, [r4, #12]
 801abd8:	6123      	str	r3, [r4, #16]
 801abda:	ee76 6a86 	vadd.f32	s13, s13, s12
 801abde:	428b      	cmp	r3, r1
 801abe0:	edc4 6a07 	vstr	s13, [r4, #28]
 801abe4:	db15      	blt.n	801ac12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801abe6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801abea:	ee76 6a26 	vadd.f32	s13, s12, s13
 801abee:	3201      	adds	r2, #1
 801abf0:	edc4 6a07 	vstr	s13, [r4, #28]
 801abf4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801abf8:	6022      	str	r2, [r4, #0]
 801abfa:	ee36 7a87 	vadd.f32	s14, s13, s14
 801abfe:	1a5b      	subs	r3, r3, r1
 801ac00:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ac04:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801ac08:	6123      	str	r3, [r4, #16]
 801ac0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac0e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ac12:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ac16:	441a      	add	r2, r3
 801ac18:	696b      	ldr	r3, [r5, #20]
 801ac1a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801ac1e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801ac22:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801ac26:	68a9      	ldr	r1, [r5, #8]
 801ac28:	ed95 6a08 	vldr	s12, [r5, #32]
 801ac2c:	602a      	str	r2, [r5, #0]
 801ac2e:	3301      	adds	r3, #1
 801ac30:	616b      	str	r3, [r5, #20]
 801ac32:	69ab      	ldr	r3, [r5, #24]
 801ac34:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ac38:	3b01      	subs	r3, #1
 801ac3a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801ac3e:	61ab      	str	r3, [r5, #24]
 801ac40:	692b      	ldr	r3, [r5, #16]
 801ac42:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ac46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ac4a:	edd5 6a07 	vldr	s13, [r5, #28]
 801ac4e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ac52:	440b      	add	r3, r1
 801ac54:	68e9      	ldr	r1, [r5, #12]
 801ac56:	612b      	str	r3, [r5, #16]
 801ac58:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ac5c:	428b      	cmp	r3, r1
 801ac5e:	edc5 6a07 	vstr	s13, [r5, #28]
 801ac62:	db15      	blt.n	801ac90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801ac64:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ac68:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ac6c:	3201      	adds	r2, #1
 801ac6e:	edc5 6a07 	vstr	s13, [r5, #28]
 801ac72:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801ac76:	602a      	str	r2, [r5, #0]
 801ac78:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ac7c:	1a5b      	subs	r3, r3, r1
 801ac7e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ac82:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801ac86:	612b      	str	r3, [r5, #16]
 801ac88:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac8c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ac90:	3f01      	subs	r7, #1
 801ac92:	e757      	b.n	801ab44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801ac94:	4299      	cmp	r1, r3
 801ac96:	dc13      	bgt.n	801acc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801ac98:	429a      	cmp	r2, r3
 801ac9a:	da14      	bge.n	801acc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801ac9c:	2502      	movs	r5, #2
 801ac9e:	2703      	movs	r7, #3
 801aca0:	46a9      	mov	r9, r5
 801aca2:	f04f 0800 	mov.w	r8, #0
 801aca6:	f04f 0a01 	mov.w	sl, #1
 801acaa:	e6ef      	b.n	801aa8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801acac:	2501      	movs	r5, #1
 801acae:	2700      	movs	r7, #0
 801acb0:	46a9      	mov	r9, r5
 801acb2:	46b8      	mov	r8, r7
 801acb4:	f04f 0a02 	mov.w	sl, #2
 801acb8:	e6e8      	b.n	801aa8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801acba:	2501      	movs	r5, #1
 801acbc:	2702      	movs	r7, #2
 801acbe:	e6e1      	b.n	801aa84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801acc0:	2500      	movs	r5, #0
 801acc2:	2701      	movs	r7, #1
 801acc4:	e7f4      	b.n	801acb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801acc6:	2702      	movs	r7, #2
 801acc8:	2503      	movs	r5, #3
 801acca:	f04f 0900 	mov.w	r9, #0
 801acce:	46b8      	mov	r8, r7
 801acd0:	e7e9      	b.n	801aca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801acd2:	4613      	mov	r3, r2
 801acd4:	e728      	b.n	801ab28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801acd6:	bf00      	nop
 801acd8:	200097a0 	.word	0x200097a0
 801acdc:	fffd8f01 	.word	0xfffd8f01
 801ace0:	00027100 	.word	0x00027100
 801ace4:	0004e1ff 	.word	0x0004e1ff
 801ace8:	0004e1fe 	.word	0x0004e1fe
 801acec:	200097a8 	.word	0x200097a8
 801acf0:	4613      	mov	r3, r2
 801acf2:	992b      	ldr	r1, [sp, #172]	; 0xac
 801acf4:	9111      	str	r1, [sp, #68]	; 0x44
 801acf6:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801acfa:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801acfe:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801ad00:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801ad04:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801ad08:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801ad0c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801ad10:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801ad14:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ad18:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801ad1c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801ad20:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801ad24:	469e      	mov	lr, r3
 801ad26:	469c      	mov	ip, r3
 801ad28:	f04f 0900 	mov.w	r9, #0
 801ad2c:	f1bc 0f00 	cmp.w	ip, #0
 801ad30:	d147      	bne.n	801adc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801ad32:	eb03 0c07 	add.w	ip, r3, r7
 801ad36:	1ad7      	subs	r7, r2, r3
 801ad38:	f1b9 0f00 	cmp.w	r9, #0
 801ad3c:	d009      	beq.n	801ad52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801ad3e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801ad42:	9029      	str	r0, [sp, #164]	; 0xa4
 801ad44:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801ad48:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801ad4c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801ad50:	912d      	str	r1, [sp, #180]	; 0xb4
 801ad52:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ad54:	9111      	str	r1, [sp, #68]	; 0x44
 801ad56:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ad5a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ad5e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ad62:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ad66:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ad6a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ad6e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ad72:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ad76:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ad7a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ad7e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ad82:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ad86:	f04f 0800 	mov.w	r8, #0
 801ad8a:	f1be 0f00 	cmp.w	lr, #0
 801ad8e:	d031      	beq.n	801adf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801ad90:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ad92:	4431      	add	r1, r6
 801ad94:	4549      	cmp	r1, r9
 801ad96:	4450      	add	r0, sl
 801ad98:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ad9c:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ada0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ada4:	db08      	blt.n	801adb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801ada6:	ee77 7a85 	vadd.f32	s15, s15, s10
 801adaa:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801adae:	ee37 7a06 	vadd.f32	s14, s14, s12
 801adb2:	3001      	adds	r0, #1
 801adb4:	eba1 0109 	sub.w	r1, r1, r9
 801adb8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801adbc:	f04f 0801 	mov.w	r8, #1
 801adc0:	e7e3      	b.n	801ad8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801adc2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801adc4:	4431      	add	r1, r6
 801adc6:	4541      	cmp	r1, r8
 801adc8:	4450      	add	r0, sl
 801adca:	ee37 7a24 	vadd.f32	s14, s14, s9
 801adce:	ee77 7a84 	vadd.f32	s15, s15, s8
 801add2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801add6:	db08      	blt.n	801adea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801add8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801addc:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ade0:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ade4:	3001      	adds	r0, #1
 801ade6:	eba1 0108 	sub.w	r1, r1, r8
 801adea:	f10c 3cff 	add.w	ip, ip, #4294967295
 801adee:	f04f 0901 	mov.w	r9, #1
 801adf2:	e79b      	b.n	801ad2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801adf4:	449c      	add	ip, r3
 801adf6:	1aff      	subs	r7, r7, r3
 801adf8:	f1b8 0f00 	cmp.w	r8, #0
 801adfc:	d009      	beq.n	801ae12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801adfe:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801ae02:	9019      	str	r0, [sp, #100]	; 0x64
 801ae04:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ae08:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ae0c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801ae10:	911d      	str	r1, [sp, #116]	; 0x74
 801ae12:	1ad2      	subs	r2, r2, r3
 801ae14:	e68b      	b.n	801ab2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801ae16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae18:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	f000 80d1 	beq.w	801afc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801ae20:	ad19      	add	r5, sp, #100	; 0x64
 801ae22:	ac39      	add	r4, sp, #228	; 0xe4
 801ae24:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ae26:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801ae2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ae2e:	930c      	str	r3, [sp, #48]	; 0x30
 801ae30:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ae32:	6963      	ldr	r3, [r4, #20]
 801ae34:	440b      	add	r3, r1
 801ae36:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801ae3a:	4408      	add	r0, r1
 801ae3c:	b200      	sxth	r0, r0
 801ae3e:	4283      	cmp	r3, r0
 801ae40:	900d      	str	r0, [sp, #52]	; 0x34
 801ae42:	f280 80c1 	bge.w	801afc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801ae46:	428b      	cmp	r3, r1
 801ae48:	da08      	bge.n	801ae5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ae4a:	2a00      	cmp	r2, #0
 801ae4c:	dd06      	ble.n	801ae5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ae4e:	1acb      	subs	r3, r1, r3
 801ae50:	429a      	cmp	r2, r3
 801ae52:	f2c0 80bb 	blt.w	801afcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	f300 80b9 	bgt.w	801afce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801ae5c:	6967      	ldr	r7, [r4, #20]
 801ae5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae60:	443b      	add	r3, r7
 801ae62:	461f      	mov	r7, r3
 801ae64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae66:	1bdf      	subs	r7, r3, r7
 801ae68:	4297      	cmp	r7, r2
 801ae6a:	bfa8      	it	ge
 801ae6c:	4617      	movge	r7, r2
 801ae6e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801ae72:	2f00      	cmp	r7, #0
 801ae74:	f340 813c 	ble.w	801b0f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801ae78:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ae7a:	6829      	ldr	r1, [r5, #0]
 801ae7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ae80:	f9bb 3000 	ldrsh.w	r3, [fp]
 801ae84:	6820      	ldr	r0, [r4, #0]
 801ae86:	4411      	add	r1, r2
 801ae88:	4299      	cmp	r1, r3
 801ae8a:	dd1a      	ble.n	801aec2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801ae8c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801ae90:	440b      	add	r3, r1
 801ae92:	4402      	add	r2, r0
 801ae94:	b21b      	sxth	r3, r3
 801ae96:	429a      	cmp	r2, r3
 801ae98:	dc13      	bgt.n	801aec2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801ae9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	9206      	str	r2, [sp, #24]
 801aea2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aea4:	9205      	str	r2, [sp, #20]
 801aea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aea8:	9500      	str	r5, [sp, #0]
 801aeaa:	e9cd b203 	strd	fp, r2, [sp, #12]
 801aeae:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801aeb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aeb2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801aeb6:	a912      	add	r1, sp, #72	; 0x48
 801aeb8:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801aebc:	aa49      	add	r2, sp, #292	; 0x124
 801aebe:	4623      	mov	r3, r4
 801aec0:	47c8      	blx	r9
 801aec2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aec6:	441a      	add	r2, r3
 801aec8:	6963      	ldr	r3, [r4, #20]
 801aeca:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801aece:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801aed2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801aed6:	68a1      	ldr	r1, [r4, #8]
 801aed8:	ed94 6a08 	vldr	s12, [r4, #32]
 801aedc:	6022      	str	r2, [r4, #0]
 801aede:	3301      	adds	r3, #1
 801aee0:	6163      	str	r3, [r4, #20]
 801aee2:	69a3      	ldr	r3, [r4, #24]
 801aee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aee8:	3b01      	subs	r3, #1
 801aeea:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801aeee:	61a3      	str	r3, [r4, #24]
 801aef0:	6923      	ldr	r3, [r4, #16]
 801aef2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aefa:	edd4 6a07 	vldr	s13, [r4, #28]
 801aefe:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801af02:	440b      	add	r3, r1
 801af04:	68e1      	ldr	r1, [r4, #12]
 801af06:	6123      	str	r3, [r4, #16]
 801af08:	ee76 6a86 	vadd.f32	s13, s13, s12
 801af0c:	428b      	cmp	r3, r1
 801af0e:	edc4 6a07 	vstr	s13, [r4, #28]
 801af12:	db15      	blt.n	801af40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801af14:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801af18:	ee76 6a26 	vadd.f32	s13, s12, s13
 801af1c:	3201      	adds	r2, #1
 801af1e:	edc4 6a07 	vstr	s13, [r4, #28]
 801af22:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801af26:	6022      	str	r2, [r4, #0]
 801af28:	ee36 7a87 	vadd.f32	s14, s13, s14
 801af2c:	1a5b      	subs	r3, r3, r1
 801af2e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801af32:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801af36:	6123      	str	r3, [r4, #16]
 801af38:	ee77 7a27 	vadd.f32	s15, s14, s15
 801af3c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801af40:	e9d5 2300 	ldrd	r2, r3, [r5]
 801af44:	441a      	add	r2, r3
 801af46:	696b      	ldr	r3, [r5, #20]
 801af48:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801af4c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801af50:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801af54:	68a9      	ldr	r1, [r5, #8]
 801af56:	ed95 6a08 	vldr	s12, [r5, #32]
 801af5a:	602a      	str	r2, [r5, #0]
 801af5c:	3301      	adds	r3, #1
 801af5e:	616b      	str	r3, [r5, #20]
 801af60:	69ab      	ldr	r3, [r5, #24]
 801af62:	ee37 7a27 	vadd.f32	s14, s14, s15
 801af66:	3b01      	subs	r3, #1
 801af68:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801af6c:	61ab      	str	r3, [r5, #24]
 801af6e:	692b      	ldr	r3, [r5, #16]
 801af70:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801af74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801af78:	edd5 6a07 	vldr	s13, [r5, #28]
 801af7c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801af80:	440b      	add	r3, r1
 801af82:	68e9      	ldr	r1, [r5, #12]
 801af84:	612b      	str	r3, [r5, #16]
 801af86:	ee76 6a86 	vadd.f32	s13, s13, s12
 801af8a:	428b      	cmp	r3, r1
 801af8c:	edc5 6a07 	vstr	s13, [r5, #28]
 801af90:	db15      	blt.n	801afbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801af92:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801af96:	ee76 6a26 	vadd.f32	s13, s12, s13
 801af9a:	3201      	adds	r2, #1
 801af9c:	edc5 6a07 	vstr	s13, [r5, #28]
 801afa0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801afa4:	602a      	str	r2, [r5, #0]
 801afa6:	ee36 7a87 	vadd.f32	s14, s13, s14
 801afaa:	1a5b      	subs	r3, r3, r1
 801afac:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801afb0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801afb4:	612b      	str	r3, [r5, #16]
 801afb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801afba:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801afbe:	3f01      	subs	r7, #1
 801afc0:	e757      	b.n	801ae72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801afc2:	ad39      	add	r5, sp, #228	; 0xe4
 801afc4:	ac19      	add	r4, sp, #100	; 0x64
 801afc6:	e72d      	b.n	801ae24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801afc8:	4613      	mov	r3, r2
 801afca:	e744      	b.n	801ae56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801afcc:	4613      	mov	r3, r2
 801afce:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801afd2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801afd4:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801afd8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801afdc:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801afe0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801afe4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801afe8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801afec:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801aff0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801aff2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801aff6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801affa:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801affe:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801b002:	960e      	str	r6, [sp, #56]	; 0x38
 801b004:	469e      	mov	lr, r3
 801b006:	461f      	mov	r7, r3
 801b008:	f04f 0900 	mov.w	r9, #0
 801b00c:	2f00      	cmp	r7, #0
 801b00e:	d146      	bne.n	801b09e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801b010:	449c      	add	ip, r3
 801b012:	1ad7      	subs	r7, r2, r3
 801b014:	f1b9 0f00 	cmp.w	r9, #0
 801b018:	d009      	beq.n	801b02e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801b01a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801b01e:	9039      	str	r0, [sp, #228]	; 0xe4
 801b020:	913d      	str	r1, [sp, #244]	; 0xf4
 801b022:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801b026:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801b02a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801b02e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801b030:	910e      	str	r1, [sp, #56]	; 0x38
 801b032:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801b036:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801b03a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801b03e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801b042:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801b046:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801b04a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801b04e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801b052:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801b056:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801b05a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801b05e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801b062:	f04f 0800 	mov.w	r8, #0
 801b066:	f1be 0f00 	cmp.w	lr, #0
 801b06a:	d030      	beq.n	801b0ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801b06c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b06e:	4431      	add	r1, r6
 801b070:	4549      	cmp	r1, r9
 801b072:	4450      	add	r0, sl
 801b074:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801b078:	ee37 7a04 	vadd.f32	s14, s14, s8
 801b07c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801b080:	db08      	blt.n	801b094 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801b082:	ee77 7a85 	vadd.f32	s15, s15, s10
 801b086:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b08a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801b08e:	3001      	adds	r0, #1
 801b090:	eba1 0109 	sub.w	r1, r1, r9
 801b094:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b098:	f04f 0801 	mov.w	r8, #1
 801b09c:	e7e3      	b.n	801b066 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801b09e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b0a0:	4431      	add	r1, r6
 801b0a2:	4541      	cmp	r1, r8
 801b0a4:	4450      	add	r0, sl
 801b0a6:	ee37 7a24 	vadd.f32	s14, s14, s9
 801b0aa:	ee77 7a84 	vadd.f32	s15, s15, s8
 801b0ae:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801b0b2:	db08      	blt.n	801b0c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801b0b4:	ee76 6a85 	vadd.f32	s13, s13, s10
 801b0b8:	ee37 7a25 	vadd.f32	s14, s14, s11
 801b0bc:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b0c0:	3001      	adds	r0, #1
 801b0c2:	eba1 0108 	sub.w	r1, r1, r8
 801b0c6:	3f01      	subs	r7, #1
 801b0c8:	f04f 0901 	mov.w	r9, #1
 801b0cc:	e79e      	b.n	801b00c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801b0ce:	449c      	add	ip, r3
 801b0d0:	1aff      	subs	r7, r7, r3
 801b0d2:	f1b8 0f00 	cmp.w	r8, #0
 801b0d6:	d009      	beq.n	801b0ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801b0d8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801b0dc:	9019      	str	r0, [sp, #100]	; 0x64
 801b0de:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801b0e2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801b0e6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801b0ea:	911d      	str	r1, [sp, #116]	; 0x74
 801b0ec:	1ad2      	subs	r2, r2, r3
 801b0ee:	e6b5      	b.n	801ae5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801b0f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	b923      	cbnz	r3, 801b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801b0f6:	4b04      	ldr	r3, [pc, #16]	; (801b108 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801b0f8:	6818      	ldr	r0, [r3, #0]
 801b0fa:	6803      	ldr	r3, [r0, #0]
 801b0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0fe:	4798      	blx	r3
 801b100:	b05b      	add	sp, #364	; 0x16c
 801b102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b106:	bf00      	nop
 801b108:	200097a8 	.word	0x200097a8

0801b10c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801b10c:	b570      	push	{r4, r5, r6, lr}
 801b10e:	4604      	mov	r4, r0
 801b110:	2500      	movs	r5, #0
 801b112:	7223      	strb	r3, [r4, #8]
 801b114:	9804      	ldr	r0, [sp, #16]
 801b116:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801b11a:	8025      	strh	r5, [r4, #0]
 801b11c:	6061      	str	r1, [r4, #4]
 801b11e:	7263      	strb	r3, [r4, #9]
 801b120:	60e0      	str	r0, [r4, #12]
 801b122:	8222      	strh	r2, [r4, #16]
 801b124:	8265      	strh	r5, [r4, #18]
 801b126:	82a5      	strh	r5, [r4, #20]
 801b128:	82e5      	strh	r5, [r4, #22]
 801b12a:	8325      	strh	r5, [r4, #24]
 801b12c:	8365      	strh	r5, [r4, #26]
 801b12e:	83a5      	strh	r5, [r4, #28]
 801b130:	77a5      	strb	r5, [r4, #30]
 801b132:	6803      	ldr	r3, [r0, #0]
 801b134:	695b      	ldr	r3, [r3, #20]
 801b136:	4798      	blx	r3
 801b138:	4606      	mov	r6, r0
 801b13a:	b1f8      	cbz	r0, 801b17c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b13c:	68e0      	ldr	r0, [r4, #12]
 801b13e:	6803      	ldr	r3, [r0, #0]
 801b140:	4631      	mov	r1, r6
 801b142:	68db      	ldr	r3, [r3, #12]
 801b144:	4798      	blx	r3
 801b146:	7b43      	ldrb	r3, [r0, #13]
 801b148:	7a82      	ldrb	r2, [r0, #10]
 801b14a:	005b      	lsls	r3, r3, #1
 801b14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b150:	4313      	orrs	r3, r2
 801b152:	83a3      	strh	r3, [r4, #28]
 801b154:	7a63      	ldrb	r3, [r4, #9]
 801b156:	2b04      	cmp	r3, #4
 801b158:	4605      	mov	r5, r0
 801b15a:	d10f      	bne.n	801b17c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801b15c:	68e0      	ldr	r0, [r4, #12]
 801b15e:	6803      	ldr	r3, [r0, #0]
 801b160:	462a      	mov	r2, r5
 801b162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b164:	4631      	mov	r1, r6
 801b166:	4798      	blx	r3
 801b168:	7b6b      	ldrb	r3, [r5, #13]
 801b16a:	005b      	lsls	r3, r3, #1
 801b16c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b170:	7aab      	ldrb	r3, [r5, #10]
 801b172:	4313      	orrs	r3, r2
 801b174:	4418      	add	r0, r3
 801b176:	8ba3      	ldrh	r3, [r4, #28]
 801b178:	4418      	add	r0, r3
 801b17a:	83a0      	strh	r0, [r4, #28]
 801b17c:	4620      	mov	r0, r4
 801b17e:	bd70      	pop	{r4, r5, r6, pc}

0801b180 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b184:	2400      	movs	r4, #0
 801b186:	b085      	sub	sp, #20
 801b188:	4681      	mov	r9, r0
 801b18a:	4688      	mov	r8, r1
 801b18c:	4692      	mov	sl, r2
 801b18e:	469b      	mov	fp, r3
 801b190:	4627      	mov	r7, r4
 801b192:	4625      	mov	r5, r4
 801b194:	4626      	mov	r6, r4
 801b196:	4554      	cmp	r4, sl
 801b198:	da2a      	bge.n	801b1f0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b19a:	2300      	movs	r3, #0
 801b19c:	9303      	str	r3, [sp, #12]
 801b19e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b1a2:	429d      	cmp	r5, r3
 801b1a4:	d004      	beq.n	801b1b0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801b1a6:	f242 030b 	movw	r3, #8203	; 0x200b
 801b1aa:	429d      	cmp	r5, r3
 801b1ac:	bf18      	it	ne
 801b1ae:	462f      	movne	r7, r5
 801b1b0:	ab03      	add	r3, sp, #12
 801b1b2:	4642      	mov	r2, r8
 801b1b4:	4659      	mov	r1, fp
 801b1b6:	4648      	mov	r0, r9
 801b1b8:	f002 ff70 	bl	801e09c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b1bc:	4605      	mov	r5, r0
 801b1be:	b1b8      	cbz	r0, 801b1f0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b1c0:	280a      	cmp	r0, #10
 801b1c2:	d015      	beq.n	801b1f0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801b1c4:	9a03      	ldr	r2, [sp, #12]
 801b1c6:	b18a      	cbz	r2, 801b1ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801b1c8:	7b50      	ldrb	r0, [r2, #13]
 801b1ca:	7a93      	ldrb	r3, [r2, #10]
 801b1cc:	8895      	ldrh	r5, [r2, #4]
 801b1ce:	0040      	lsls	r0, r0, #1
 801b1d0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801b1d4:	4303      	orrs	r3, r0
 801b1d6:	9301      	str	r3, [sp, #4]
 801b1d8:	f8d8 3000 	ldr.w	r3, [r8]
 801b1dc:	4639      	mov	r1, r7
 801b1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b1e0:	4640      	mov	r0, r8
 801b1e2:	4798      	blx	r3
 801b1e4:	9b01      	ldr	r3, [sp, #4]
 801b1e6:	4418      	add	r0, r3
 801b1e8:	4406      	add	r6, r0
 801b1ea:	b2b6      	uxth	r6, r6
 801b1ec:	3401      	adds	r4, #1
 801b1ee:	e7d2      	b.n	801b196 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801b1f0:	4630      	mov	r0, r6
 801b1f2:	b005      	add	sp, #20
 801b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b1f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801b1f8:	2a02      	cmp	r2, #2
 801b1fa:	b530      	push	{r4, r5, lr}
 801b1fc:	d011      	beq.n	801b222 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801b1fe:	2a03      	cmp	r2, #3
 801b200:	d01c      	beq.n	801b23c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801b202:	2a01      	cmp	r2, #1
 801b204:	d10c      	bne.n	801b220 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b206:	888b      	ldrh	r3, [r1, #4]
 801b208:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801b20c:	8801      	ldrh	r1, [r0, #0]
 801b20e:	8844      	ldrh	r4, [r0, #2]
 801b210:	8004      	strh	r4, [r0, #0]
 801b212:	1a9b      	subs	r3, r3, r2
 801b214:	1a5b      	subs	r3, r3, r1
 801b216:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b21a:	8043      	strh	r3, [r0, #2]
 801b21c:	8081      	strh	r1, [r0, #4]
 801b21e:	80c2      	strh	r2, [r0, #6]
 801b220:	bd30      	pop	{r4, r5, pc}
 801b222:	88cb      	ldrh	r3, [r1, #6]
 801b224:	88c2      	ldrh	r2, [r0, #6]
 801b226:	1a9b      	subs	r3, r3, r2
 801b228:	8842      	ldrh	r2, [r0, #2]
 801b22a:	1a9b      	subs	r3, r3, r2
 801b22c:	888a      	ldrh	r2, [r1, #4]
 801b22e:	8881      	ldrh	r1, [r0, #4]
 801b230:	8043      	strh	r3, [r0, #2]
 801b232:	1a52      	subs	r2, r2, r1
 801b234:	8801      	ldrh	r1, [r0, #0]
 801b236:	1a52      	subs	r2, r2, r1
 801b238:	8002      	strh	r2, [r0, #0]
 801b23a:	e7f1      	b.n	801b220 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801b23c:	88cb      	ldrh	r3, [r1, #6]
 801b23e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801b242:	8841      	ldrh	r1, [r0, #2]
 801b244:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b248:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801b24c:	8045      	strh	r5, [r0, #2]
 801b24e:	1a9b      	subs	r3, r3, r2
 801b250:	1a5b      	subs	r3, r3, r1
 801b252:	8003      	strh	r3, [r0, #0]
 801b254:	8082      	strh	r2, [r0, #4]
 801b256:	80c4      	strh	r4, [r0, #6]
 801b258:	e7e2      	b.n	801b220 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801b25a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801b25a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b25e:	b09f      	sub	sp, #124	; 0x7c
 801b260:	9116      	str	r1, [sp, #88]	; 0x58
 801b262:	9317      	str	r3, [sp, #92]	; 0x5c
 801b264:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b266:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b268:	8809      	ldrh	r1, [r1, #0]
 801b26a:	889b      	ldrh	r3, [r3, #4]
 801b26c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801b270:	9212      	str	r2, [sp, #72]	; 0x48
 801b272:	440b      	add	r3, r1
 801b274:	b21b      	sxth	r3, r3
 801b276:	9310      	str	r3, [sp, #64]	; 0x40
 801b278:	f8d8 3000 	ldr.w	r3, [r8]
 801b27c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801b280:	7a59      	ldrb	r1, [r3, #9]
 801b282:	7a1b      	ldrb	r3, [r3, #8]
 801b284:	9315      	str	r3, [sp, #84]	; 0x54
 801b286:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b288:	9011      	str	r0, [sp, #68]	; 0x44
 801b28a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801b28e:	9114      	str	r1, [sp, #80]	; 0x50
 801b290:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b294:	2a00      	cmp	r2, #0
 801b296:	d067      	beq.n	801b368 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801b298:	f898 3010 	ldrb.w	r3, [r8, #16]
 801b29c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b29e:	2b04      	cmp	r3, #4
 801b2a0:	bf14      	ite	ne
 801b2a2:	2301      	movne	r3, #1
 801b2a4:	2302      	moveq	r3, #2
 801b2a6:	4413      	add	r3, r2
 801b2a8:	f04f 0900 	mov.w	r9, #0
 801b2ac:	930f      	str	r3, [sp, #60]	; 0x3c
 801b2ae:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801b2b2:	464c      	mov	r4, r9
 801b2b4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801b2b8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801b2bc:	4293      	cmp	r3, r2
 801b2be:	f280 808c 	bge.w	801b3da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	931c      	str	r3, [sp, #112]	; 0x70
 801b2c6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b2ca:	429c      	cmp	r4, r3
 801b2cc:	d006      	beq.n	801b2dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801b2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b2d0:	f242 020b 	movw	r2, #8203	; 0x200b
 801b2d4:	4294      	cmp	r4, r2
 801b2d6:	bf18      	it	ne
 801b2d8:	4623      	movne	r3, r4
 801b2da:	930d      	str	r3, [sp, #52]	; 0x34
 801b2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b2de:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801b2e0:	f8d8 2000 	ldr.w	r2, [r8]
 801b2e4:	428b      	cmp	r3, r1
 801b2e6:	db41      	blt.n	801b36c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801b2e8:	6813      	ldr	r3, [r2, #0]
 801b2ea:	4610      	mov	r0, r2
 801b2ec:	695b      	ldr	r3, [r3, #20]
 801b2ee:	4798      	blx	r3
 801b2f0:	4604      	mov	r4, r0
 801b2f2:	f8d8 0000 	ldr.w	r0, [r8]
 801b2f6:	6803      	ldr	r3, [r0, #0]
 801b2f8:	aa1d      	add	r2, sp, #116	; 0x74
 801b2fa:	689e      	ldr	r6, [r3, #8]
 801b2fc:	4621      	mov	r1, r4
 801b2fe:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b302:	47b0      	blx	r6
 801b304:	901c      	str	r0, [sp, #112]	; 0x70
 801b306:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b30a:	429c      	cmp	r4, r3
 801b30c:	f000 80e9 	beq.w	801b4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b310:	f242 030b 	movw	r3, #8203	; 0x200b
 801b314:	429c      	cmp	r4, r3
 801b316:	f000 80e4 	beq.w	801b4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b31a:	2c00      	cmp	r4, #0
 801b31c:	f000 80f6 	beq.w	801b50c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b320:	2c0a      	cmp	r4, #10
 801b322:	d060      	beq.n	801b3e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b324:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b326:	b36a      	cbz	r2, 801b384 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801b328:	8894      	ldrh	r4, [r2, #4]
 801b32a:	f1bb 0f00 	cmp.w	fp, #0
 801b32e:	d03b      	beq.n	801b3a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801b330:	f892 900d 	ldrb.w	r9, [r2, #13]
 801b334:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801b338:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b33c:	f892 900a 	ldrb.w	r9, [r2, #10]
 801b340:	f1bb 0f01 	cmp.w	fp, #1
 801b344:	ea49 0903 	orr.w	r9, r9, r3
 801b348:	d134      	bne.n	801b3b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801b34a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b34c:	eba5 0509 	sub.w	r5, r5, r9
 801b350:	2b00      	cmp	r3, #0
 801b352:	d14f      	bne.n	801b3f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b354:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b356:	eb09 0305 	add.w	r3, r9, r5
 801b35a:	4413      	add	r3, r2
 801b35c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b35e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b362:	4293      	cmp	r3, r2
 801b364:	da51      	bge.n	801b40a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b366:	e038      	b.n	801b3da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801b368:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b36a:	e79d      	b.n	801b2a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801b36c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801b370:	9301      	str	r3, [sp, #4]
 801b372:	ab1d      	add	r3, sp, #116	; 0x74
 801b374:	9300      	str	r3, [sp, #0]
 801b376:	4659      	mov	r1, fp
 801b378:	ab1c      	add	r3, sp, #112	; 0x70
 801b37a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b37c:	f002 fee6 	bl	801e14c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801b380:	4604      	mov	r4, r0
 801b382:	e7c0      	b.n	801b306 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801b384:	f8d8 0000 	ldr.w	r0, [r8]
 801b388:	6803      	ldr	r3, [r0, #0]
 801b38a:	691b      	ldr	r3, [r3, #16]
 801b38c:	4798      	blx	r3
 801b38e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b392:	4298      	cmp	r0, r3
 801b394:	f000 80a5 	beq.w	801b4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b398:	f242 030b 	movw	r3, #8203	; 0x200b
 801b39c:	4298      	cmp	r0, r3
 801b39e:	f000 80a0 	beq.w	801b4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b3a2:	f1bb 0f00 	cmp.w	fp, #0
 801b3a6:	d100      	bne.n	801b3aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801b3a8:	444d      	add	r5, r9
 801b3aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b3ac:	2a00      	cmp	r2, #0
 801b3ae:	d1bf      	bne.n	801b330 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801b3b0:	4691      	mov	r9, r2
 801b3b2:	e096      	b.n	801b4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b3b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	f000 80aa 	beq.w	801b510 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801b3bc:	f1bb 0f00 	cmp.w	fp, #0
 801b3c0:	d118      	bne.n	801b3f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b3c2:	f8d8 0000 	ldr.w	r0, [r8]
 801b3c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b3c8:	6803      	ldr	r3, [r0, #0]
 801b3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b3cc:	4798      	blx	r3
 801b3ce:	4405      	add	r5, r0
 801b3d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b3d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b3d4:	1aeb      	subs	r3, r5, r3
 801b3d6:	4293      	cmp	r3, r2
 801b3d8:	dd17      	ble.n	801b40a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b3da:	2c00      	cmp	r4, #0
 801b3dc:	f000 8096 	beq.w	801b50c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b3e0:	2c0a      	cmp	r4, #10
 801b3e2:	f040 8084 	bne.w	801b4ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801b3e6:	240a      	movs	r4, #10
 801b3e8:	fab4 f084 	clz	r0, r4
 801b3ec:	0940      	lsrs	r0, r0, #5
 801b3ee:	b01f      	add	sp, #124	; 0x7c
 801b3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3f4:	f8d8 0000 	ldr.w	r0, [r8]
 801b3f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b3fa:	6803      	ldr	r3, [r0, #0]
 801b3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b3fe:	4798      	blx	r3
 801b400:	f1bb 0f01 	cmp.w	fp, #1
 801b404:	eba5 0500 	sub.w	r5, r5, r0
 801b408:	d0a4      	beq.n	801b354 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801b40a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b40c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b40e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b412:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b416:	7b43      	ldrb	r3, [r0, #13]
 801b418:	015b      	lsls	r3, r3, #5
 801b41a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b41e:	7983      	ldrb	r3, [r0, #6]
 801b420:	4429      	add	r1, r5
 801b422:	4313      	orrs	r3, r2
 801b424:	440b      	add	r3, r1
 801b426:	42b3      	cmp	r3, r6
 801b428:	db5b      	blt.n	801b4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b42a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b42c:	4299      	cmp	r1, r3
 801b42e:	da58      	bge.n	801b4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b430:	f8d8 0000 	ldr.w	r0, [r8]
 801b434:	6803      	ldr	r3, [r0, #0]
 801b436:	42ae      	cmp	r6, r5
 801b438:	bfc8      	it	gt
 801b43a:	1b76      	subgt	r6, r6, r5
 801b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b43e:	bfcc      	ite	gt
 801b440:	b2b6      	uxthgt	r6, r6
 801b442:	2600      	movle	r6, #0
 801b444:	4798      	blx	r3
 801b446:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b448:	7b5a      	ldrb	r2, [r3, #13]
 801b44a:	00d1      	lsls	r1, r2, #3
 801b44c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801b450:	7a19      	ldrb	r1, [r3, #8]
 801b452:	4339      	orrs	r1, r7
 801b454:	0657      	lsls	r7, r2, #25
 801b456:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b458:	bf44      	itt	mi
 801b45a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b45e:	b209      	sxthmi	r1, r1
 801b460:	19c7      	adds	r7, r0, r7
 801b462:	1a7f      	subs	r7, r7, r1
 801b464:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b466:	b2bf      	uxth	r7, r7
 801b468:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b46c:	fa0f fa87 	sxth.w	sl, r7
 801b470:	4551      	cmp	r1, sl
 801b472:	dd3a      	ble.n	801b4ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801b474:	0112      	lsls	r2, r2, #4
 801b476:	79d8      	ldrb	r0, [r3, #7]
 801b478:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b47c:	4302      	orrs	r2, r0
 801b47e:	4492      	add	sl, r2
 801b480:	4551      	cmp	r1, sl
 801b482:	dc2e      	bgt.n	801b4e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801b484:	1bcf      	subs	r7, r1, r7
 801b486:	b2bf      	uxth	r7, r7
 801b488:	468a      	mov	sl, r1
 801b48a:	9319      	str	r3, [sp, #100]	; 0x64
 801b48c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b48e:	f8d8 0000 	ldr.w	r0, [r8]
 801b492:	681a      	ldr	r2, [r3, #0]
 801b494:	6801      	ldr	r1, [r0, #0]
 801b496:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801b498:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b49a:	9313      	str	r3, [sp, #76]	; 0x4c
 801b49c:	9218      	str	r2, [sp, #96]	; 0x60
 801b49e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b4a0:	4788      	blx	r1
 801b4a2:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b4a6:	910b      	str	r1, [sp, #44]	; 0x2c
 801b4a8:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b4ac:	910a      	str	r1, [sp, #40]	; 0x28
 801b4ae:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b4b2:	9109      	str	r1, [sp, #36]	; 0x24
 801b4b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b4b6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b4ba:	9305      	str	r3, [sp, #20]
 801b4bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b4be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b4c0:	9206      	str	r2, [sp, #24]
 801b4c2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b4c6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b4ca:	e9cd a601 	strd	sl, r6, [sp, #4]
 801b4ce:	442e      	add	r6, r5
 801b4d0:	b236      	sxth	r6, r6
 801b4d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b4d4:	9600      	str	r6, [sp, #0]
 801b4d6:	681a      	ldr	r2, [r3, #0]
 801b4d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b4da:	685b      	ldr	r3, [r3, #4]
 801b4dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b4de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b4e0:	47b0      	blx	r6
 801b4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b4e4:	3301      	adds	r3, #1
 801b4e6:	930e      	str	r3, [sp, #56]	; 0x38
 801b4e8:	e6e6      	b.n	801b2b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801b4ea:	2700      	movs	r7, #0
 801b4ec:	e7cd      	b.n	801b48a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 801b4ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b4f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b4f2:	3501      	adds	r5, #1
 801b4f4:	429d      	cmp	r5, r3
 801b4f6:	f6bf af77 	bge.w	801b3e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b4fa:	4659      	mov	r1, fp
 801b4fc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b4fe:	f7f8 feb7 	bl	8014270 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b502:	4604      	mov	r4, r0
 801b504:	b110      	cbz	r0, 801b50c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801b506:	280a      	cmp	r0, #10
 801b508:	d1f2      	bne.n	801b4f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801b50a:	e76c      	b.n	801b3e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b50c:	2400      	movs	r4, #0
 801b50e:	e76b      	b.n	801b3e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b510:	f1bb 0f00 	cmp.w	fp, #0
 801b514:	f43f af5c 	beq.w	801b3d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b518:	e777      	b.n	801b40a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801b51a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b51a:	b530      	push	{r4, r5, lr}
 801b51c:	8a44      	ldrh	r4, [r0, #18]
 801b51e:	8ac5      	ldrh	r5, [r0, #22]
 801b520:	82c3      	strh	r3, [r0, #22]
 801b522:	442c      	add	r4, r5
 801b524:	1ae4      	subs	r4, r4, r3
 801b526:	8244      	strh	r4, [r0, #18]
 801b528:	8b03      	ldrh	r3, [r0, #24]
 801b52a:	8a84      	ldrh	r4, [r0, #20]
 801b52c:	4422      	add	r2, r4
 801b52e:	440c      	add	r4, r1
 801b530:	1a59      	subs	r1, r3, r1
 801b532:	8342      	strh	r2, [r0, #26]
 801b534:	8284      	strh	r4, [r0, #20]
 801b536:	8301      	strh	r1, [r0, #24]
 801b538:	bd30      	pop	{r4, r5, pc}

0801b53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b53a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b53e:	7a43      	ldrb	r3, [r0, #9]
 801b540:	1eda      	subs	r2, r3, #3
 801b542:	b087      	sub	sp, #28
 801b544:	4604      	mov	r4, r0
 801b546:	b2d2      	uxtb	r2, r2
 801b548:	460f      	mov	r7, r1
 801b54a:	2900      	cmp	r1, #0
 801b54c:	d036      	beq.n	801b5bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801b54e:	2a01      	cmp	r2, #1
 801b550:	d932      	bls.n	801b5b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801b552:	1e58      	subs	r0, r3, #1
 801b554:	f1d0 0b00 	rsbs	fp, r0, #0
 801b558:	eb4b 0b00 	adc.w	fp, fp, r0
 801b55c:	1e99      	subs	r1, r3, #2
 801b55e:	424b      	negs	r3, r1
 801b560:	414b      	adcs	r3, r1
 801b562:	9303      	str	r3, [sp, #12]
 801b564:	2300      	movs	r3, #0
 801b566:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801b56a:	2500      	movs	r5, #0
 801b56c:	8265      	strh	r5, [r4, #18]
 801b56e:	82a5      	strh	r5, [r4, #20]
 801b570:	46a9      	mov	r9, r5
 801b572:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801b576:	2300      	movs	r3, #0
 801b578:	9305      	str	r3, [sp, #20]
 801b57a:	8823      	ldrh	r3, [r4, #0]
 801b57c:	2b20      	cmp	r3, #32
 801b57e:	d02b      	beq.n	801b5d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801b580:	eba3 020a 	sub.w	r2, r3, sl
 801b584:	4256      	negs	r6, r2
 801b586:	4156      	adcs	r6, r2
 801b588:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b58c:	4293      	cmp	r3, r2
 801b58e:	d004      	beq.n	801b59a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b590:	4553      	cmp	r3, sl
 801b592:	bf16      	itet	ne
 801b594:	4699      	movne	r9, r3
 801b596:	2601      	moveq	r6, #1
 801b598:	2600      	movne	r6, #0
 801b59a:	ab05      	add	r3, sp, #20
 801b59c:	68e2      	ldr	r2, [r4, #12]
 801b59e:	7a21      	ldrb	r1, [r4, #8]
 801b5a0:	6860      	ldr	r0, [r4, #4]
 801b5a2:	f002 fd7b 	bl	801e09c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b5a6:	8020      	strh	r0, [r4, #0]
 801b5a8:	b9c8      	cbnz	r0, 801b5de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b5aa:	8b22      	ldrh	r2, [r4, #24]
 801b5ac:	2300      	movs	r3, #0
 801b5ae:	4611      	mov	r1, r2
 801b5b0:	4620      	mov	r0, r4
 801b5b2:	f7ff ffb2 	bl	801b51a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b5b6:	e066      	b.n	801b686 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b5b8:	468b      	mov	fp, r1
 801b5ba:	e7cf      	b.n	801b55c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801b5bc:	3b01      	subs	r3, #1
 801b5be:	2a01      	cmp	r2, #1
 801b5c0:	bf8c      	ite	hi
 801b5c2:	2200      	movhi	r2, #0
 801b5c4:	2201      	movls	r2, #1
 801b5c6:	2b01      	cmp	r3, #1
 801b5c8:	bf8c      	ite	hi
 801b5ca:	2300      	movhi	r3, #0
 801b5cc:	2301      	movls	r3, #1
 801b5ce:	9202      	str	r2, [sp, #8]
 801b5d0:	9301      	str	r3, [sp, #4]
 801b5d2:	9103      	str	r1, [sp, #12]
 801b5d4:	468b      	mov	fp, r1
 801b5d6:	e7c8      	b.n	801b56a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801b5d8:	4699      	mov	r9, r3
 801b5da:	2601      	movs	r6, #1
 801b5dc:	e7dd      	b.n	801b59a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b5de:	8ae3      	ldrh	r3, [r4, #22]
 801b5e0:	280a      	cmp	r0, #10
 801b5e2:	f103 0301 	add.w	r3, r3, #1
 801b5e6:	82e3      	strh	r3, [r4, #22]
 801b5e8:	d0df      	beq.n	801b5aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801b5ea:	9a05      	ldr	r2, [sp, #20]
 801b5ec:	bb42      	cbnz	r2, 801b640 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801b5ee:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b5f2:	4298      	cmp	r0, r3
 801b5f4:	d001      	beq.n	801b5fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b5f6:	4550      	cmp	r0, sl
 801b5f8:	d1bd      	bne.n	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b5fa:	8823      	ldrh	r3, [r4, #0]
 801b5fc:	8b21      	ldrh	r1, [r4, #24]
 801b5fe:	2b20      	cmp	r3, #32
 801b600:	d001      	beq.n	801b606 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801b602:	4553      	cmp	r3, sl
 801b604:	d131      	bne.n	801b66a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801b606:	2e00      	cmp	r6, #0
 801b608:	bf0a      	itet	eq
 801b60a:	460d      	moveq	r5, r1
 801b60c:	4630      	movne	r0, r6
 801b60e:	2001      	moveq	r0, #1
 801b610:	440a      	add	r2, r1
 801b612:	8aa3      	ldrh	r3, [r4, #20]
 801b614:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b618:	b292      	uxth	r2, r2
 801b61a:	8322      	strh	r2, [r4, #24]
 801b61c:	4413      	add	r3, r2
 801b61e:	2f00      	cmp	r7, #0
 801b620:	d03a      	beq.n	801b698 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801b622:	f1bb 0f00 	cmp.w	fp, #0
 801b626:	d102      	bne.n	801b62e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801b628:	9903      	ldr	r1, [sp, #12]
 801b62a:	b301      	cbz	r1, 801b66e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b62c:	b1f8      	cbz	r0, 801b66e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b62e:	8ba1      	ldrh	r1, [r4, #28]
 801b630:	4419      	add	r1, r3
 801b632:	458c      	cmp	ip, r1
 801b634:	da2a      	bge.n	801b68c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b636:	8a61      	ldrh	r1, [r4, #18]
 801b638:	b341      	cbz	r1, 801b68c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b63a:	4563      	cmp	r3, ip
 801b63c:	dd9b      	ble.n	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b63e:	e01c      	b.n	801b67a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801b640:	8893      	ldrh	r3, [r2, #4]
 801b642:	8023      	strh	r3, [r4, #0]
 801b644:	f892 800d 	ldrb.w	r8, [r2, #13]
 801b648:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b64c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801b650:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b654:	ea48 0800 	orr.w	r8, r8, r0
 801b658:	68e0      	ldr	r0, [r4, #12]
 801b65a:	6803      	ldr	r3, [r0, #0]
 801b65c:	4649      	mov	r1, r9
 801b65e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b660:	4798      	blx	r3
 801b662:	eb08 0200 	add.w	r2, r8, r0
 801b666:	b292      	uxth	r2, r2
 801b668:	e7c7      	b.n	801b5fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b66a:	2000      	movs	r0, #0
 801b66c:	e7d0      	b.n	801b610 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801b66e:	4563      	cmp	r3, ip
 801b670:	dd81      	ble.n	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b672:	8a63      	ldrh	r3, [r4, #18]
 801b674:	2b00      	cmp	r3, #0
 801b676:	f43f af7e 	beq.w	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b67a:	2301      	movs	r3, #1
 801b67c:	77a3      	strb	r3, [r4, #30]
 801b67e:	8ba2      	ldrh	r2, [r4, #28]
 801b680:	8b63      	ldrh	r3, [r4, #26]
 801b682:	4413      	add	r3, r2
 801b684:	8363      	strh	r3, [r4, #26]
 801b686:	b007      	add	sp, #28
 801b688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b68c:	2300      	movs	r3, #0
 801b68e:	4611      	mov	r1, r2
 801b690:	4620      	mov	r0, r4
 801b692:	f7ff ff42 	bl	801b51a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b696:	e76e      	b.n	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b698:	4563      	cmp	r3, ip
 801b69a:	dd14      	ble.n	801b6c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801b69c:	9b02      	ldr	r3, [sp, #8]
 801b69e:	b113      	cbz	r3, 801b6a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801b6a0:	2301      	movs	r3, #1
 801b6a2:	460a      	mov	r2, r1
 801b6a4:	e783      	b.n	801b5ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801b6a6:	9b01      	ldr	r3, [sp, #4]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	f43f af64 	beq.w	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b6ae:	2800      	cmp	r0, #0
 801b6b0:	f47f af61 	bne.w	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b6b4:	b116      	cbz	r6, 801b6bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801b6b6:	2301      	movs	r3, #1
 801b6b8:	462a      	mov	r2, r5
 801b6ba:	e779      	b.n	801b5b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801b6bc:	8a63      	ldrh	r3, [r4, #18]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	f43f af59 	beq.w	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b6c4:	e7df      	b.n	801b686 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b6c6:	2800      	cmp	r0, #0
 801b6c8:	f47f af55 	bne.w	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b6cc:	2e00      	cmp	r6, #0
 801b6ce:	f43f af52 	beq.w	801b576 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b6d2:	2301      	movs	r3, #1
 801b6d4:	462a      	mov	r2, r5
 801b6d6:	e7db      	b.n	801b690 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801b6d8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b6d8:	b530      	push	{r4, r5, lr}
 801b6da:	4605      	mov	r5, r0
 801b6dc:	b08b      	sub	sp, #44	; 0x2c
 801b6de:	b191      	cbz	r1, 801b706 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801b6e0:	e9cd 3100 	strd	r3, r1, [sp]
 801b6e4:	4613      	mov	r3, r2
 801b6e6:	4601      	mov	r1, r0
 801b6e8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b6ec:	a802      	add	r0, sp, #8
 801b6ee:	f7ff fd0d 	bl	801b10c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b6f2:	2401      	movs	r4, #1
 801b6f4:	2100      	movs	r1, #0
 801b6f6:	a802      	add	r0, sp, #8
 801b6f8:	f7ff ff1f 	bl	801b53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b6fc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b700:	b163      	cbz	r3, 801b71c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b702:	3401      	adds	r4, #1
 801b704:	e7f6      	b.n	801b6f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801b706:	f002 fdc3 	bl	801e290 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b70a:	2401      	movs	r4, #1
 801b70c:	280a      	cmp	r0, #10
 801b70e:	4628      	mov	r0, r5
 801b710:	bf08      	it	eq
 801b712:	3401      	addeq	r4, #1
 801b714:	f002 fdbc 	bl	801e290 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b718:	2800      	cmp	r0, #0
 801b71a:	d1f7      	bne.n	801b70c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b71c:	b2a0      	uxth	r0, r4
 801b71e:	b00b      	add	sp, #44	; 0x2c
 801b720:	bd30      	pop	{r4, r5, pc}

0801b722 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b726:	b0e5      	sub	sp, #404	; 0x194
 801b728:	4689      	mov	r9, r1
 801b72a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801b72e:	900a      	str	r0, [sp, #40]	; 0x28
 801b730:	461c      	mov	r4, r3
 801b732:	f1ba 0f00 	cmp.w	sl, #0
 801b736:	f000 80b4 	beq.w	801b8a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	f000 80b0 	beq.w	801b8a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b742:	7ba3      	ldrb	r3, [r4, #14]
 801b744:	2b00      	cmp	r3, #0
 801b746:	f000 80ac 	beq.w	801b8a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b74a:	6810      	ldr	r0, [r2, #0]
 801b74c:	6851      	ldr	r1, [r2, #4]
 801b74e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801b752:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b756:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801b75a:	4643      	mov	r3, r8
 801b75c:	c303      	stmia	r3!, {r0, r1}
 801b75e:	2500      	movs	r5, #0
 801b760:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801b764:	79a2      	ldrb	r2, [r4, #6]
 801b766:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b76a:	a90f      	add	r1, sp, #60	; 0x3c
 801b76c:	4640      	mov	r0, r8
 801b76e:	950f      	str	r5, [sp, #60]	; 0x3c
 801b770:	f7ff fd42 	bl	801b1f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b774:	a90f      	add	r1, sp, #60	; 0x3c
 801b776:	4608      	mov	r0, r1
 801b778:	79a2      	ldrb	r2, [r4, #6]
 801b77a:	af19      	add	r7, sp, #100	; 0x64
 801b77c:	f7ff fd3c 	bl	801b1f8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b780:	4638      	mov	r0, r7
 801b782:	f002 f938 	bl	801d9f6 <_ZN8touchgfx12TextProviderC1Ev>
 801b786:	6820      	ldr	r0, [r4, #0]
 801b788:	6803      	ldr	r3, [r0, #0]
 801b78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b78c:	4798      	blx	r3
 801b78e:	4606      	mov	r6, r0
 801b790:	6820      	ldr	r0, [r4, #0]
 801b792:	6803      	ldr	r3, [r0, #0]
 801b794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b796:	4798      	blx	r3
 801b798:	4633      	mov	r3, r6
 801b79a:	9000      	str	r0, [sp, #0]
 801b79c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b79e:	4651      	mov	r1, sl
 801b7a0:	4638      	mov	r0, r7
 801b7a2:	f002 f97b 	bl	801da9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b7a6:	6820      	ldr	r0, [r4, #0]
 801b7a8:	7923      	ldrb	r3, [r4, #4]
 801b7aa:	9308      	str	r3, [sp, #32]
 801b7ac:	6803      	ldr	r3, [r0, #0]
 801b7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b7b0:	4798      	blx	r3
 801b7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b7b6:	181e      	adds	r6, r3, r0
 801b7b8:	42ae      	cmp	r6, r5
 801b7ba:	dd06      	ble.n	801b7ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801b7bc:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801b7c0:	4282      	cmp	r2, r0
 801b7c2:	bfa4      	itt	ge
 801b7c4:	189d      	addge	r5, r3, r2
 801b7c6:	fb95 f5f6 	sdivge	r5, r5, r6
 801b7ca:	a832      	add	r0, sp, #200	; 0xc8
 801b7cc:	f002 f913 	bl	801d9f6 <_ZN8touchgfx12TextProviderC1Ev>
 801b7d0:	7c23      	ldrb	r3, [r4, #16]
 801b7d2:	b17b      	cbz	r3, 801b7f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801b7d4:	6820      	ldr	r0, [r4, #0]
 801b7d6:	6803      	ldr	r3, [r0, #0]
 801b7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7da:	4798      	blx	r3
 801b7dc:	4683      	mov	fp, r0
 801b7de:	6820      	ldr	r0, [r4, #0]
 801b7e0:	6803      	ldr	r3, [r0, #0]
 801b7e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b7e4:	4798      	blx	r3
 801b7e6:	465b      	mov	r3, fp
 801b7e8:	9000      	str	r0, [sp, #0]
 801b7ea:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b7ec:	4651      	mov	r1, sl
 801b7ee:	a832      	add	r0, sp, #200	; 0xc8
 801b7f0:	f002 f954 	bl	801da9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b7f4:	7be1      	ldrb	r1, [r4, #15]
 801b7f6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801b7fa:	7963      	ldrb	r3, [r4, #5]
 801b7fc:	1a52      	subs	r2, r2, r1
 801b7fe:	7c21      	ldrb	r1, [r4, #16]
 801b800:	9101      	str	r1, [sp, #4]
 801b802:	6821      	ldr	r1, [r4, #0]
 801b804:	9100      	str	r1, [sp, #0]
 801b806:	b292      	uxth	r2, r2
 801b808:	a932      	add	r1, sp, #200	; 0xc8
 801b80a:	a811      	add	r0, sp, #68	; 0x44
 801b80c:	f7ff fc7e 	bl	801b10c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b810:	7c23      	ldrb	r3, [r4, #16]
 801b812:	b9bb      	cbnz	r3, 801b844 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801b814:	fa1f fa86 	uxth.w	sl, r6
 801b818:	2d00      	cmp	r5, #0
 801b81a:	dd45      	ble.n	801b8a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b81c:	4638      	mov	r0, r7
 801b81e:	f002 fd37 	bl	801e290 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b822:	2800      	cmp	r0, #0
 801b824:	d03d      	beq.n	801b8a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b826:	280a      	cmp	r0, #10
 801b828:	d1f6      	bne.n	801b818 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b82a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b82e:	4453      	add	r3, sl
 801b830:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b834:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b838:	eba3 030a 	sub.w	r3, r3, sl
 801b83c:	3d01      	subs	r5, #1
 801b83e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b842:	e7e9      	b.n	801b818 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b844:	0073      	lsls	r3, r6, #1
 801b846:	9309      	str	r3, [sp, #36]	; 0x24
 801b848:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801b84c:	fa1f fa86 	uxth.w	sl, r6
 801b850:	2d00      	cmp	r5, #0
 801b852:	dd29      	ble.n	801b8a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b854:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b85a:	428b      	cmp	r3, r1
 801b85c:	bfd4      	ite	le
 801b85e:	2100      	movle	r1, #0
 801b860:	2101      	movgt	r1, #1
 801b862:	a811      	add	r0, sp, #68	; 0x44
 801b864:	f7ff fe69 	bl	801b53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b868:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b86c:	3b01      	subs	r3, #1
 801b86e:	b29b      	uxth	r3, r3
 801b870:	455b      	cmp	r3, fp
 801b872:	930b      	str	r3, [sp, #44]	; 0x2c
 801b874:	d005      	beq.n	801b882 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801b876:	7961      	ldrb	r1, [r4, #5]
 801b878:	4638      	mov	r0, r7
 801b87a:	f7f8 fcf9 	bl	8014270 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b880:	e7f4      	b.n	801b86c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801b882:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b886:	4453      	add	r3, sl
 801b888:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b88c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b890:	eba3 030a 	sub.w	r3, r3, sl
 801b894:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b898:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b89c:	3d01      	subs	r5, #1
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d1d6      	bne.n	801b850 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801b8a2:	b065      	add	sp, #404	; 0x194
 801b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8a8:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801b8ac:	ad4b      	add	r5, sp, #300	; 0x12c
 801b8ae:	f04f 0b00 	mov.w	fp, #0
 801b8b2:	7c23      	ldrb	r3, [r4, #16]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d067      	beq.n	801b988 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801b8b8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b8bc:	458a      	cmp	sl, r1
 801b8be:	bfd4      	ite	le
 801b8c0:	2100      	movle	r1, #0
 801b8c2:	2101      	movgt	r1, #1
 801b8c4:	a811      	add	r0, sp, #68	; 0x44
 801b8c6:	f7ff fe38 	bl	801b53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b8ca:	9b08      	ldr	r3, [sp, #32]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d056      	beq.n	801b97e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b8d0:	7c23      	ldrb	r3, [r4, #16]
 801b8d2:	9309      	str	r3, [sp, #36]	; 0x24
 801b8d4:	2264      	movs	r2, #100	; 0x64
 801b8d6:	4639      	mov	r1, r7
 801b8d8:	4628      	mov	r0, r5
 801b8da:	f012 fc39 	bl	802e150 <memcpy>
 801b8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d059      	beq.n	801b998 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801b8e4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801b8e8:	7922      	ldrb	r2, [r4, #4]
 801b8ea:	2a01      	cmp	r2, #1
 801b8ec:	d13d      	bne.n	801b96a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801b8ee:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801b8f2:	1ac0      	subs	r0, r0, r3
 801b8f4:	2302      	movs	r3, #2
 801b8f6:	fb90 f0f3 	sdiv	r0, r0, r3
 801b8fa:	b200      	sxth	r0, r0
 801b8fc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801b900:	4418      	add	r0, r3
 801b902:	7c23      	ldrb	r3, [r4, #16]
 801b904:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d03a      	beq.n	801b982 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801b90c:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801b910:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801b914:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801b918:	9500      	str	r5, [sp, #0]
 801b91a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b91e:	e9cd b703 	strd	fp, r7, [sp, #12]
 801b922:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801b926:	464a      	mov	r2, r9
 801b928:	2100      	movs	r1, #0
 801b92a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b92c:	f7ff fc95 	bl	801b25a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b930:	2800      	cmp	r0, #0
 801b932:	d1b6      	bne.n	801b8a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b934:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b938:	b2b2      	uxth	r2, r6
 801b93a:	4611      	mov	r1, r2
 801b93c:	4413      	add	r3, r2
 801b93e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b942:	1a52      	subs	r2, r2, r1
 801b944:	7c21      	ldrb	r1, [r4, #16]
 801b946:	b21b      	sxth	r3, r3
 801b948:	b212      	sxth	r2, r2
 801b94a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b94e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801b952:	b109      	cbz	r1, 801b958 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801b954:	42b2      	cmp	r2, r6
 801b956:	dba4      	blt.n	801b8a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b958:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801b95c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801b960:	440a      	add	r2, r1
 801b962:	b212      	sxth	r2, r2
 801b964:	4293      	cmp	r3, r2
 801b966:	dda4      	ble.n	801b8b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801b968:	e79b      	b.n	801b8a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b96a:	2a02      	cmp	r2, #2
 801b96c:	d105      	bne.n	801b97a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801b96e:	7be2      	ldrb	r2, [r4, #15]
 801b970:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801b974:	1a80      	subs	r0, r0, r2
 801b976:	1ac0      	subs	r0, r0, r3
 801b978:	e7bf      	b.n	801b8fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801b97a:	2000      	movs	r0, #0
 801b97c:	e7be      	b.n	801b8fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b97e:	7be0      	ldrb	r0, [r4, #15]
 801b980:	e7bc      	b.n	801b8fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b982:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b986:	e7c3      	b.n	801b910 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801b988:	9b08      	ldr	r3, [sp, #32]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d0f7      	beq.n	801b97e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b98e:	2264      	movs	r2, #100	; 0x64
 801b990:	4639      	mov	r1, r7
 801b992:	4628      	mov	r0, r5
 801b994:	f012 fbdc 	bl	802e150 <memcpy>
 801b998:	2300      	movs	r3, #0
 801b99a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b99e:	6821      	ldr	r1, [r4, #0]
 801b9a0:	4628      	mov	r0, r5
 801b9a2:	f7ff fbed 	bl	801b180 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b9a6:	b203      	sxth	r3, r0
 801b9a8:	e79e      	b.n	801b8e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801b9aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b9aa:	b510      	push	{r4, lr}
 801b9ac:	2b02      	cmp	r3, #2
 801b9ae:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b9b2:	d00b      	beq.n	801b9cc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801b9b4:	2b03      	cmp	r3, #3
 801b9b6:	d00e      	beq.n	801b9d6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801b9b8:	2b01      	cmp	r3, #1
 801b9ba:	d001      	beq.n	801b9c0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801b9bc:	1860      	adds	r0, r4, r1
 801b9be:	bd10      	pop	{r4, pc}
 801b9c0:	8880      	ldrh	r0, [r0, #4]
 801b9c2:	4420      	add	r0, r4
 801b9c4:	b200      	sxth	r0, r0
 801b9c6:	1a80      	subs	r0, r0, r2
 801b9c8:	3801      	subs	r0, #1
 801b9ca:	e7f8      	b.n	801b9be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801b9cc:	8880      	ldrh	r0, [r0, #4]
 801b9ce:	4420      	add	r0, r4
 801b9d0:	b200      	sxth	r0, r0
 801b9d2:	1a40      	subs	r0, r0, r1
 801b9d4:	e7f8      	b.n	801b9c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b9d6:	18a0      	adds	r0, r4, r2
 801b9d8:	e7f1      	b.n	801b9be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801b9da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b9da:	b510      	push	{r4, lr}
 801b9dc:	2b02      	cmp	r3, #2
 801b9de:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801b9e2:	d006      	beq.n	801b9f2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801b9e4:	2b03      	cmp	r3, #3
 801b9e6:	d00a      	beq.n	801b9fe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b9e8:	2b01      	cmp	r3, #1
 801b9ea:	bf14      	ite	ne
 801b9ec:	18a0      	addne	r0, r4, r2
 801b9ee:	1860      	addeq	r0, r4, r1
 801b9f0:	bd10      	pop	{r4, pc}
 801b9f2:	88c0      	ldrh	r0, [r0, #6]
 801b9f4:	4420      	add	r0, r4
 801b9f6:	b200      	sxth	r0, r0
 801b9f8:	1a80      	subs	r0, r0, r2
 801b9fa:	3801      	subs	r0, #1
 801b9fc:	e7f8      	b.n	801b9f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801b9fe:	88c0      	ldrh	r0, [r0, #6]
 801ba00:	4420      	add	r0, r4
 801ba02:	b200      	sxth	r0, r0
 801ba04:	1a40      	subs	r0, r0, r1
 801ba06:	e7f8      	b.n	801b9fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801ba08 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ba08:	4b01      	ldr	r3, [pc, #4]	; (801ba10 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ba0a:	2200      	movs	r2, #0
 801ba0c:	601a      	str	r2, [r3, #0]
 801ba0e:	4770      	bx	lr
 801ba10:	200097b0 	.word	0x200097b0

0801ba14 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ba14:	4603      	mov	r3, r0
 801ba16:	b1c8      	cbz	r0, 801ba4c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ba18:	0c02      	lsrs	r2, r0, #16
 801ba1a:	0412      	lsls	r2, r2, #16
 801ba1c:	b9a2      	cbnz	r2, 801ba48 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ba1e:	0403      	lsls	r3, r0, #16
 801ba20:	2010      	movs	r0, #16
 801ba22:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ba26:	bf04      	itt	eq
 801ba28:	021b      	lsleq	r3, r3, #8
 801ba2a:	3008      	addeq	r0, #8
 801ba2c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ba30:	bf04      	itt	eq
 801ba32:	011b      	lsleq	r3, r3, #4
 801ba34:	3004      	addeq	r0, #4
 801ba36:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ba3a:	bf04      	itt	eq
 801ba3c:	009b      	lsleq	r3, r3, #2
 801ba3e:	3002      	addeq	r0, #2
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	db04      	blt.n	801ba4e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ba44:	3001      	adds	r0, #1
 801ba46:	4770      	bx	lr
 801ba48:	2000      	movs	r0, #0
 801ba4a:	e7ea      	b.n	801ba22 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ba4c:	2020      	movs	r0, #32
 801ba4e:	4770      	bx	lr

0801ba50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ba50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba54:	b087      	sub	sp, #28
 801ba56:	4681      	mov	r9, r0
 801ba58:	4698      	mov	r8, r3
 801ba5a:	4610      	mov	r0, r2
 801ba5c:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801ba60:	460d      	mov	r5, r1
 801ba62:	b981      	cbnz	r1, 801ba86 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801ba64:	b14b      	cbz	r3, 801ba7a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801ba66:	460b      	mov	r3, r1
 801ba68:	e9cd 4700 	strd	r4, r7, [sp]
 801ba6c:	464a      	mov	r2, r9
 801ba6e:	4641      	mov	r1, r8
 801ba70:	f7ff ffee 	bl	801ba50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ba74:	b007      	add	sp, #28
 801ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba7a:	f04f 33ff 	mov.w	r3, #4294967295
 801ba7e:	603b      	str	r3, [r7, #0]
 801ba80:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ba84:	e7f6      	b.n	801ba74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ba86:	fa32 fa01 	lsrs.w	sl, r2, r1
 801ba8a:	d107      	bne.n	801ba9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801ba8c:	fb09 f602 	mul.w	r6, r9, r2
 801ba90:	fbb6 f0f4 	udiv	r0, r6, r4
 801ba94:	fb04 6610 	mls	r6, r4, r0, r6
 801ba98:	603e      	str	r6, [r7, #0]
 801ba9a:	e7eb      	b.n	801ba74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ba9c:	2601      	movs	r6, #1
 801ba9e:	408e      	lsls	r6, r1
 801baa0:	3e01      	subs	r6, #1
 801baa2:	4016      	ands	r6, r2
 801baa4:	fa09 fb01 	lsl.w	fp, r9, r1
 801baa8:	4630      	mov	r0, r6
 801baaa:	fbbb f3f4 	udiv	r3, fp, r4
 801baae:	9302      	str	r3, [sp, #8]
 801bab0:	fb0a f303 	mul.w	r3, sl, r3
 801bab4:	9303      	str	r3, [sp, #12]
 801bab6:	f7ff ffad 	bl	801ba14 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801baba:	464a      	mov	r2, r9
 801babc:	460b      	mov	r3, r1
 801babe:	e9cd 4700 	strd	r4, r7, [sp]
 801bac2:	4601      	mov	r1, r0
 801bac4:	4630      	mov	r0, r6
 801bac6:	f7ff ffc3 	bl	801ba50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801baca:	9b02      	ldr	r3, [sp, #8]
 801bacc:	fb04 bb13 	mls	fp, r4, r3, fp
 801bad0:	4606      	mov	r6, r0
 801bad2:	4658      	mov	r0, fp
 801bad4:	eb05 0108 	add.w	r1, r5, r8
 801bad8:	f7ff ff9c 	bl	801ba14 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801badc:	ab05      	add	r3, sp, #20
 801bade:	e9cd 4300 	strd	r4, r3, [sp]
 801bae2:	465a      	mov	r2, fp
 801bae4:	4603      	mov	r3, r0
 801bae6:	4650      	mov	r0, sl
 801bae8:	f7ff ffb2 	bl	801ba50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801baec:	6839      	ldr	r1, [r7, #0]
 801baee:	9a05      	ldr	r2, [sp, #20]
 801baf0:	9b03      	ldr	r3, [sp, #12]
 801baf2:	4411      	add	r1, r2
 801baf4:	fbb1 f2f4 	udiv	r2, r1, r4
 801baf8:	18d3      	adds	r3, r2, r3
 801bafa:	441e      	add	r6, r3
 801bafc:	fb04 1412 	mls	r4, r4, r2, r1
 801bb00:	4430      	add	r0, r6
 801bb02:	603c      	str	r4, [r7, #0]
 801bb04:	e7b6      	b.n	801ba74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801bb06 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801bb06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bb0a:	b085      	sub	sp, #20
 801bb0c:	f1b0 0900 	subs.w	r9, r0, #0
 801bb10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bb12:	461d      	mov	r5, r3
 801bb14:	bfbf      	itttt	lt
 801bb16:	6823      	ldrlt	r3, [r4, #0]
 801bb18:	425b      	neglt	r3, r3
 801bb1a:	f1c9 0900 	rsblt	r9, r9, #0
 801bb1e:	6023      	strlt	r3, [r4, #0]
 801bb20:	bfb4      	ite	lt
 801bb22:	f04f 36ff 	movlt.w	r6, #4294967295
 801bb26:	2601      	movge	r6, #1
 801bb28:	2a00      	cmp	r2, #0
 801bb2a:	4617      	mov	r7, r2
 801bb2c:	da04      	bge.n	801bb38 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801bb2e:	6823      	ldr	r3, [r4, #0]
 801bb30:	425b      	negs	r3, r3
 801bb32:	4257      	negs	r7, r2
 801bb34:	4276      	negs	r6, r6
 801bb36:	6023      	str	r3, [r4, #0]
 801bb38:	2d00      	cmp	r5, #0
 801bb3a:	4638      	mov	r0, r7
 801bb3c:	bfba      	itte	lt
 801bb3e:	426d      	neglt	r5, r5
 801bb40:	f04f 38ff 	movlt.w	r8, #4294967295
 801bb44:	f04f 0801 	movge.w	r8, #1
 801bb48:	f7ff ff64 	bl	801ba14 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801bb4c:	ab03      	add	r3, sp, #12
 801bb4e:	e9cd 5300 	strd	r5, r3, [sp]
 801bb52:	463a      	mov	r2, r7
 801bb54:	4603      	mov	r3, r0
 801bb56:	4648      	mov	r0, r9
 801bb58:	f7ff ff7a 	bl	801ba50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801bb5c:	6823      	ldr	r3, [r4, #0]
 801bb5e:	9a03      	ldr	r2, [sp, #12]
 801bb60:	4546      	cmp	r6, r8
 801bb62:	441a      	add	r2, r3
 801bb64:	fb92 f3f5 	sdiv	r3, r2, r5
 801bb68:	4418      	add	r0, r3
 801bb6a:	bf18      	it	ne
 801bb6c:	4240      	negne	r0, r0
 801bb6e:	fb05 2313 	mls	r3, r5, r3, r2
 801bb72:	1c72      	adds	r2, r6, #1
 801bb74:	6023      	str	r3, [r4, #0]
 801bb76:	d105      	bne.n	801bb84 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	f1c3 0200 	rsb	r2, r3, #0
 801bb7e:	db0b      	blt.n	801bb98 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801bb80:	6022      	str	r2, [r4, #0]
 801bb82:	e006      	b.n	801bb92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bb84:	2e01      	cmp	r6, #1
 801bb86:	d104      	bne.n	801bb92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	da02      	bge.n	801bb92 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801bb8c:	442b      	add	r3, r5
 801bb8e:	3801      	subs	r0, #1
 801bb90:	6023      	str	r3, [r4, #0]
 801bb92:	b005      	add	sp, #20
 801bb94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb98:	3801      	subs	r0, #1
 801bb9a:	1b52      	subs	r2, r2, r5
 801bb9c:	e7f0      	b.n	801bb80 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801bba0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801bba0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bba4:	4c1c      	ldr	r4, [pc, #112]	; (801bc18 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801bba6:	6807      	ldr	r7, [r0, #0]
 801bba8:	69a3      	ldr	r3, [r4, #24]
 801bbaa:	4605      	mov	r5, r0
 801bbac:	b92b      	cbnz	r3, 801bbba <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801bbae:	6840      	ldr	r0, [r0, #4]
 801bbb0:	e9c5 7000 	strd	r7, r0, [r5]
 801bbb4:	b004      	add	sp, #16
 801bbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbba:	68a2      	ldr	r2, [r4, #8]
 801bbbc:	6820      	ldr	r0, [r4, #0]
 801bbbe:	ae04      	add	r6, sp, #16
 801bbc0:	f04f 0802 	mov.w	r8, #2
 801bbc4:	fb93 f1f8 	sdiv	r1, r3, r8
 801bbc8:	440a      	add	r2, r1
 801bbca:	f846 2d04 	str.w	r2, [r6, #-4]!
 801bbce:	69e1      	ldr	r1, [r4, #28]
 801bbd0:	9600      	str	r6, [sp, #0]
 801bbd2:	463a      	mov	r2, r7
 801bbd4:	f7ff ff97 	bl	801bb06 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bbd8:	69a3      	ldr	r3, [r4, #24]
 801bbda:	686a      	ldr	r2, [r5, #4]
 801bbdc:	6a21      	ldr	r1, [r4, #32]
 801bbde:	9600      	str	r6, [sp, #0]
 801bbe0:	4607      	mov	r7, r0
 801bbe2:	6860      	ldr	r0, [r4, #4]
 801bbe4:	f7ff ff8f 	bl	801bb06 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bbe8:	6962      	ldr	r2, [r4, #20]
 801bbea:	69a3      	ldr	r3, [r4, #24]
 801bbec:	fb93 f8f8 	sdiv	r8, r3, r8
 801bbf0:	4442      	add	r2, r8
 801bbf2:	9203      	str	r2, [sp, #12]
 801bbf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801bbf6:	682a      	ldr	r2, [r5, #0]
 801bbf8:	9600      	str	r6, [sp, #0]
 801bbfa:	4407      	add	r7, r0
 801bbfc:	68e0      	ldr	r0, [r4, #12]
 801bbfe:	f7ff ff82 	bl	801bb06 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bc02:	9600      	str	r6, [sp, #0]
 801bc04:	4680      	mov	r8, r0
 801bc06:	69a3      	ldr	r3, [r4, #24]
 801bc08:	686a      	ldr	r2, [r5, #4]
 801bc0a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801bc0c:	6920      	ldr	r0, [r4, #16]
 801bc0e:	f7ff ff7a 	bl	801bb06 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801bc12:	4440      	add	r0, r8
 801bc14:	e7cc      	b.n	801bbb0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801bc16:	bf00      	nop
 801bc18:	200097b4 	.word	0x200097b4

0801bc1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801bc1c:	4b07      	ldr	r3, [pc, #28]	; (801bc3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801bc1e:	781b      	ldrb	r3, [r3, #0]
 801bc20:	2b01      	cmp	r3, #1
 801bc22:	d109      	bne.n	801bc38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801bc24:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bc28:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bc2c:	8003      	strh	r3, [r0, #0]
 801bc2e:	4b04      	ldr	r3, [pc, #16]	; (801bc40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801bc30:	881b      	ldrh	r3, [r3, #0]
 801bc32:	3b01      	subs	r3, #1
 801bc34:	1a9b      	subs	r3, r3, r2
 801bc36:	800b      	strh	r3, [r1, #0]
 801bc38:	4770      	bx	lr
 801bc3a:	bf00      	nop
 801bc3c:	200097a0 	.word	0x200097a0
 801bc40:	200097a4 	.word	0x200097a4

0801bc44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801bc44:	b510      	push	{r4, lr}
 801bc46:	4b07      	ldr	r3, [pc, #28]	; (801bc64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801bc48:	781b      	ldrb	r3, [r3, #0]
 801bc4a:	2b01      	cmp	r3, #1
 801bc4c:	d108      	bne.n	801bc60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801bc4e:	4b06      	ldr	r3, [pc, #24]	; (801bc68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801bc50:	880c      	ldrh	r4, [r1, #0]
 801bc52:	881b      	ldrh	r3, [r3, #0]
 801bc54:	f9b0 2000 	ldrsh.w	r2, [r0]
 801bc58:	3b01      	subs	r3, #1
 801bc5a:	1b1b      	subs	r3, r3, r4
 801bc5c:	8003      	strh	r3, [r0, #0]
 801bc5e:	800a      	strh	r2, [r1, #0]
 801bc60:	bd10      	pop	{r4, pc}
 801bc62:	bf00      	nop
 801bc64:	200097a0 	.word	0x200097a0
 801bc68:	200097a4 	.word	0x200097a4

0801bc6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801bc6c:	b510      	push	{r4, lr}
 801bc6e:	4b0a      	ldr	r3, [pc, #40]	; (801bc98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801bc70:	781b      	ldrb	r3, [r3, #0]
 801bc72:	2b01      	cmp	r3, #1
 801bc74:	d10e      	bne.n	801bc94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801bc76:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801bc7a:	8843      	ldrh	r3, [r0, #2]
 801bc7c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bc80:	8044      	strh	r4, [r0, #2]
 801bc82:	18ca      	adds	r2, r1, r3
 801bc84:	4b05      	ldr	r3, [pc, #20]	; (801bc9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801bc86:	881b      	ldrh	r3, [r3, #0]
 801bc88:	1a9b      	subs	r3, r3, r2
 801bc8a:	8003      	strh	r3, [r0, #0]
 801bc8c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bc90:	80c3      	strh	r3, [r0, #6]
 801bc92:	8081      	strh	r1, [r0, #4]
 801bc94:	bd10      	pop	{r4, pc}
 801bc96:	bf00      	nop
 801bc98:	200097a0 	.word	0x200097a0
 801bc9c:	200097a4 	.word	0x200097a4

0801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801bca0:	4b08      	ldr	r3, [pc, #32]	; (801bcc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801bca2:	781b      	ldrb	r3, [r3, #0]
 801bca4:	2b01      	cmp	r3, #1
 801bca6:	d10c      	bne.n	801bcc2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801bca8:	8803      	ldrh	r3, [r0, #0]
 801bcaa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801bcae:	8842      	ldrh	r2, [r0, #2]
 801bcb0:	8002      	strh	r2, [r0, #0]
 801bcb2:	185a      	adds	r2, r3, r1
 801bcb4:	4b04      	ldr	r3, [pc, #16]	; (801bcc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801bcb6:	881b      	ldrh	r3, [r3, #0]
 801bcb8:	1a9b      	subs	r3, r3, r2
 801bcba:	8043      	strh	r3, [r0, #2]
 801bcbc:	88c3      	ldrh	r3, [r0, #6]
 801bcbe:	8083      	strh	r3, [r0, #4]
 801bcc0:	80c1      	strh	r1, [r0, #6]
 801bcc2:	4770      	bx	lr
 801bcc4:	200097a0 	.word	0x200097a0
 801bcc8:	200097a4 	.word	0x200097a4

0801bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801bccc:	b510      	push	{r4, lr}
 801bcce:	4b07      	ldr	r3, [pc, #28]	; (801bcec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801bcd0:	781b      	ldrb	r3, [r3, #0]
 801bcd2:	2b01      	cmp	r3, #1
 801bcd4:	d108      	bne.n	801bce8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801bcd6:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bcda:	f9b0 4000 	ldrsh.w	r4, [r0]
 801bcde:	8003      	strh	r3, [r0, #0]
 801bce0:	8893      	ldrh	r3, [r2, #4]
 801bce2:	3b01      	subs	r3, #1
 801bce4:	1b1b      	subs	r3, r3, r4
 801bce6:	800b      	strh	r3, [r1, #0]
 801bce8:	bd10      	pop	{r4, pc}
 801bcea:	bf00      	nop
 801bcec:	200097a0 	.word	0x200097a0

0801bcf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801bcf0:	4b0b      	ldr	r3, [pc, #44]	; (801bd20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801bcf2:	781b      	ldrb	r3, [r3, #0]
 801bcf4:	2b01      	cmp	r3, #1
 801bcf6:	d111      	bne.n	801bd1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801bcf8:	680b      	ldr	r3, [r1, #0]
 801bcfa:	ed90 7a00 	vldr	s14, [r0]
 801bcfe:	6003      	str	r3, [r0, #0]
 801bd00:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801bd04:	eddf 6a07 	vldr	s13, [pc, #28]	; 801bd24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801bd08:	ee07 3a90 	vmov	s15, r3
 801bd0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801bd14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bd18:	edc1 7a00 	vstr	s15, [r1]
 801bd1c:	4770      	bx	lr
 801bd1e:	bf00      	nop
 801bd20:	200097a0 	.word	0x200097a0
 801bd24:	38d1b717 	.word	0x38d1b717

0801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801bd28:	b510      	push	{r4, lr}
 801bd2a:	4b0a      	ldr	r3, [pc, #40]	; (801bd54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801bd2c:	781b      	ldrb	r3, [r3, #0]
 801bd2e:	2b01      	cmp	r3, #1
 801bd30:	460a      	mov	r2, r1
 801bd32:	d10d      	bne.n	801bd50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801bd34:	8881      	ldrh	r1, [r0, #4]
 801bd36:	8803      	ldrh	r3, [r0, #0]
 801bd38:	440b      	add	r3, r1
 801bd3a:	4601      	mov	r1, r0
 801bd3c:	3b01      	subs	r3, #1
 801bd3e:	f821 3b02 	strh.w	r3, [r1], #2
 801bd42:	f7ff ffc3 	bl	801bccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801bd46:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801bd4a:	88c2      	ldrh	r2, [r0, #6]
 801bd4c:	8082      	strh	r2, [r0, #4]
 801bd4e:	80c3      	strh	r3, [r0, #6]
 801bd50:	bd10      	pop	{r4, pc}
 801bd52:	bf00      	nop
 801bd54:	200097a0 	.word	0x200097a0

0801bd58 <_ZN8touchgfx11Application13requestRedrawEv>:
 801bd58:	4b06      	ldr	r3, [pc, #24]	; (801bd74 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801bd5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bd5e:	4b06      	ldr	r3, [pc, #24]	; (801bd78 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801bd60:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801bd64:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd68:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801bd6c:	2100      	movs	r1, #0
 801bd6e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801bd72:	4770      	bx	lr
 801bd74:	2000979c 	.word	0x2000979c
 801bd78:	2000979e 	.word	0x2000979e

0801bd7c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801bd7c:	4b03      	ldr	r3, [pc, #12]	; (801bd8c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801bd7e:	6818      	ldr	r0, [r3, #0]
 801bd80:	b110      	cbz	r0, 801bd88 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801bd82:	6803      	ldr	r3, [r0, #0]
 801bd84:	699b      	ldr	r3, [r3, #24]
 801bd86:	4718      	bx	r3
 801bd88:	4770      	bx	lr
 801bd8a:	bf00      	nop
 801bd8c:	200097e4 	.word	0x200097e4

0801bd90 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801bd90:	4770      	bx	lr
	...

0801bd94 <_ZN8touchgfx11Application4drawEv>:
 801bd94:	b507      	push	{r0, r1, r2, lr}
 801bd96:	4b09      	ldr	r3, [pc, #36]	; (801bdbc <_ZN8touchgfx11Application4drawEv+0x28>)
 801bd98:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bd9c:	4b08      	ldr	r3, [pc, #32]	; (801bdc0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801bd9e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bda2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bda6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bdaa:	6803      	ldr	r3, [r0, #0]
 801bdac:	2100      	movs	r1, #0
 801bdae:	9100      	str	r1, [sp, #0]
 801bdb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bdb2:	4669      	mov	r1, sp
 801bdb4:	4798      	blx	r3
 801bdb6:	b003      	add	sp, #12
 801bdb8:	f85d fb04 	ldr.w	pc, [sp], #4
 801bdbc:	2000979c 	.word	0x2000979c
 801bdc0:	2000979e 	.word	0x2000979e

0801bdc4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801bdc4:	4b03      	ldr	r3, [pc, #12]	; (801bdd4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801bdc6:	6818      	ldr	r0, [r3, #0]
 801bdc8:	b110      	cbz	r0, 801bdd0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801bdca:	6803      	ldr	r3, [r0, #0]
 801bdcc:	69db      	ldr	r3, [r3, #28]
 801bdce:	4718      	bx	r3
 801bdd0:	4770      	bx	lr
 801bdd2:	bf00      	nop
 801bdd4:	200097e4 	.word	0x200097e4

0801bdd8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801bdd8:	4b03      	ldr	r3, [pc, #12]	; (801bde8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801bdda:	6818      	ldr	r0, [r3, #0]
 801bddc:	b110      	cbz	r0, 801bde4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801bdde:	6803      	ldr	r3, [r0, #0]
 801bde0:	6a1b      	ldr	r3, [r3, #32]
 801bde2:	4718      	bx	r3
 801bde4:	4770      	bx	lr
 801bde6:	bf00      	nop
 801bde8:	200097e4 	.word	0x200097e4

0801bdec <_ZN8touchgfx11Application14handleKeyEventEh>:
 801bdec:	4b03      	ldr	r3, [pc, #12]	; (801bdfc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801bdee:	6818      	ldr	r0, [r3, #0]
 801bdf0:	b110      	cbz	r0, 801bdf8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801bdf2:	6803      	ldr	r3, [r0, #0]
 801bdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bdf6:	4718      	bx	r3
 801bdf8:	4770      	bx	lr
 801bdfa:	bf00      	nop
 801bdfc:	200097e4 	.word	0x200097e4

0801be00 <_ZN8touchgfx11Application15handleTickEventEv>:
 801be00:	b570      	push	{r4, r5, r6, lr}
 801be02:	4d38      	ldr	r5, [pc, #224]	; (801bee4 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801be04:	4604      	mov	r4, r0
 801be06:	6828      	ldr	r0, [r5, #0]
 801be08:	b140      	cbz	r0, 801be1c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801be0a:	7a03      	ldrb	r3, [r0, #8]
 801be0c:	b933      	cbnz	r3, 801be1c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801be0e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801be12:	6803      	ldr	r3, [r0, #0]
 801be14:	689b      	ldr	r3, [r3, #8]
 801be16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be1a:	4718      	bx	r3
 801be1c:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801be20:	b97b      	cbnz	r3, 801be42 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801be22:	b170      	cbz	r0, 801be42 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801be24:	7a03      	ldrb	r3, [r0, #8]
 801be26:	b163      	cbz	r3, 801be42 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801be28:	4b2f      	ldr	r3, [pc, #188]	; (801bee8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801be2a:	6818      	ldr	r0, [r3, #0]
 801be2c:	b110      	cbz	r0, 801be34 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801be2e:	6803      	ldr	r3, [r0, #0]
 801be30:	691b      	ldr	r3, [r3, #16]
 801be32:	4798      	blx	r3
 801be34:	6828      	ldr	r0, [r5, #0]
 801be36:	6803      	ldr	r3, [r0, #0]
 801be38:	68db      	ldr	r3, [r3, #12]
 801be3a:	4798      	blx	r3
 801be3c:	2301      	movs	r3, #1
 801be3e:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801be42:	2500      	movs	r5, #0
 801be44:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801be48:	42a8      	cmp	r0, r5
 801be4a:	dd0c      	ble.n	801be66 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801be4c:	1963      	adds	r3, r4, r5
 801be4e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801be52:	b132      	cbz	r2, 801be62 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801be54:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801be58:	4413      	add	r3, r2
 801be5a:	6858      	ldr	r0, [r3, #4]
 801be5c:	6803      	ldr	r3, [r0, #0]
 801be5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801be60:	4798      	blx	r3
 801be62:	3501      	adds	r5, #1
 801be64:	e7ee      	b.n	801be44 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801be66:	2300      	movs	r3, #0
 801be68:	461a      	mov	r2, r3
 801be6a:	4298      	cmp	r0, r3
 801be6c:	d10f      	bne.n	801be8e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801be6e:	1d25      	adds	r5, r4, #4
 801be70:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801be74:	4291      	cmp	r1, r2
 801be76:	dd2d      	ble.n	801bed4 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801be78:	1e48      	subs	r0, r1, #1
 801be7a:	b280      	uxth	r0, r0
 801be7c:	4288      	cmp	r0, r1
 801be7e:	d31a      	bcc.n	801beb6 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801be80:	4b1a      	ldr	r3, [pc, #104]	; (801beec <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801be82:	4a1b      	ldr	r2, [pc, #108]	; (801bef0 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801be84:	481b      	ldr	r0, [pc, #108]	; (801bef4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801be86:	f240 11a9 	movw	r1, #425	; 0x1a9
 801be8a:	f011 ffe1 	bl	802de50 <__assert_func>
 801be8e:	18e1      	adds	r1, r4, r3
 801be90:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801be94:	b16d      	cbz	r5, 801beb2 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801be96:	429a      	cmp	r2, r3
 801be98:	d00a      	beq.n	801beb0 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801be9a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801be9e:	4431      	add	r1, r6
 801bea0:	684e      	ldr	r6, [r1, #4]
 801bea2:	b291      	uxth	r1, r2
 801bea4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bea8:	604e      	str	r6, [r1, #4]
 801beaa:	18a1      	adds	r1, r4, r2
 801beac:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801beb0:	3201      	adds	r2, #1
 801beb2:	3301      	adds	r3, #1
 801beb4:	e7d9      	b.n	801be6a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801beb6:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801beba:	3304      	adds	r3, #4
 801bebc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801bec0:	428b      	cmp	r3, r1
 801bec2:	d004      	beq.n	801bece <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801bec4:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801bec8:	f843 6c04 	str.w	r6, [r3, #-4]
 801becc:	e7f8      	b.n	801bec0 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801bece:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801bed2:	e7cd      	b.n	801be70 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801bed4:	4b04      	ldr	r3, [pc, #16]	; (801bee8 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801bed6:	6818      	ldr	r0, [r3, #0]
 801bed8:	b110      	cbz	r0, 801bee0 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801beda:	6803      	ldr	r3, [r0, #0]
 801bedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bede:	e79a      	b.n	801be16 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801bee0:	bd70      	pop	{r4, r5, r6, pc}
 801bee2:	bf00      	nop
 801bee4:	200097e8 	.word	0x200097e8
 801bee8:	200097e4 	.word	0x200097e4
 801beec:	08031bfc 	.word	0x08031bfc
 801bef0:	08031e55 	.word	0x08031e55
 801bef4:	08031c0a 	.word	0x08031c0a

0801bef8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801bef8:	b570      	push	{r4, r5, r6, lr}
 801befa:	4606      	mov	r6, r0
 801befc:	460c      	mov	r4, r1
 801befe:	b929      	cbnz	r1, 801bf0c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801bf00:	4b0c      	ldr	r3, [pc, #48]	; (801bf34 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801bf02:	4a0d      	ldr	r2, [pc, #52]	; (801bf38 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801bf04:	480d      	ldr	r0, [pc, #52]	; (801bf3c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801bf06:	2167      	movs	r1, #103	; 0x67
 801bf08:	f011 ffa2 	bl	802de50 <__assert_func>
 801bf0c:	4d0c      	ldr	r5, [pc, #48]	; (801bf40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801bf0e:	2300      	movs	r3, #0
 801bf10:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801bf14:	6828      	ldr	r0, [r5, #0]
 801bf16:	b110      	cbz	r0, 801bf1e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801bf18:	6803      	ldr	r3, [r0, #0]
 801bf1a:	695b      	ldr	r3, [r3, #20]
 801bf1c:	4798      	blx	r3
 801bf1e:	602c      	str	r4, [r5, #0]
 801bf20:	6823      	ldr	r3, [r4, #0]
 801bf22:	4620      	mov	r0, r4
 801bf24:	68db      	ldr	r3, [r3, #12]
 801bf26:	4798      	blx	r3
 801bf28:	6833      	ldr	r3, [r6, #0]
 801bf2a:	4630      	mov	r0, r6
 801bf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf32:	4718      	bx	r3
 801bf34:	08031bc8 	.word	0x08031bc8
 801bf38:	08031cd0 	.word	0x08031cd0
 801bf3c:	08031bd2 	.word	0x08031bd2
 801bf40:	200097e4 	.word	0x200097e4

0801bf44 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bf44:	b570      	push	{r4, r5, r6, lr}
 801bf46:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bf4a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801bf4e:	42ac      	cmp	r4, r5
 801bf50:	db18      	blt.n	801bf84 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bf52:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801bf56:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bf5a:	429a      	cmp	r2, r3
 801bf5c:	db12      	blt.n	801bf84 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bf5e:	8886      	ldrh	r6, [r0, #4]
 801bf60:	4435      	add	r5, r6
 801bf62:	888e      	ldrh	r6, [r1, #4]
 801bf64:	4434      	add	r4, r6
 801bf66:	b22d      	sxth	r5, r5
 801bf68:	b224      	sxth	r4, r4
 801bf6a:	42a5      	cmp	r5, r4
 801bf6c:	db0a      	blt.n	801bf84 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bf6e:	88c0      	ldrh	r0, [r0, #6]
 801bf70:	4418      	add	r0, r3
 801bf72:	88cb      	ldrh	r3, [r1, #6]
 801bf74:	441a      	add	r2, r3
 801bf76:	b200      	sxth	r0, r0
 801bf78:	b212      	sxth	r2, r2
 801bf7a:	4290      	cmp	r0, r2
 801bf7c:	bfb4      	ite	lt
 801bf7e:	2000      	movlt	r0, #0
 801bf80:	2001      	movge	r0, #1
 801bf82:	bd70      	pop	{r4, r5, r6, pc}
 801bf84:	2000      	movs	r0, #0
 801bf86:	e7fc      	b.n	801bf82 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801bf88 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf8a:	4604      	mov	r4, r0
 801bf8c:	4608      	mov	r0, r1
 801bf8e:	460d      	mov	r5, r1
 801bf90:	f7fb fab5 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf94:	b978      	cbnz	r0, 801bfb6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801bf96:	4620      	mov	r0, r4
 801bf98:	f7fb fab1 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf9c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801bfa0:	b150      	cbz	r0, 801bfb8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801bfa2:	8026      	strh	r6, [r4, #0]
 801bfa4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bfa8:	8063      	strh	r3, [r4, #2]
 801bfaa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801bfae:	80a3      	strh	r3, [r4, #4]
 801bfb0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bfb4:	80e3      	strh	r3, [r4, #6]
 801bfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfb8:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bfbc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801bfc0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bfc4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801bfc8:	88ed      	ldrh	r5, [r5, #6]
 801bfca:	42b1      	cmp	r1, r6
 801bfcc:	460f      	mov	r7, r1
 801bfce:	bfa8      	it	ge
 801bfd0:	4637      	movge	r7, r6
 801bfd2:	4293      	cmp	r3, r2
 801bfd4:	4618      	mov	r0, r3
 801bfd6:	4466      	add	r6, ip
 801bfd8:	bfa8      	it	ge
 801bfda:	4610      	movge	r0, r2
 801bfdc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801bfe0:	8027      	strh	r7, [r4, #0]
 801bfe2:	442a      	add	r2, r5
 801bfe4:	88e5      	ldrh	r5, [r4, #6]
 801bfe6:	8060      	strh	r0, [r4, #2]
 801bfe8:	4461      	add	r1, ip
 801bfea:	442b      	add	r3, r5
 801bfec:	b236      	sxth	r6, r6
 801bfee:	b209      	sxth	r1, r1
 801bff0:	b212      	sxth	r2, r2
 801bff2:	b21b      	sxth	r3, r3
 801bff4:	428e      	cmp	r6, r1
 801bff6:	bfac      	ite	ge
 801bff8:	ebc7 0106 	rsbge	r1, r7, r6
 801bffc:	ebc7 0101 	rsblt	r1, r7, r1
 801c000:	429a      	cmp	r2, r3
 801c002:	bfac      	ite	ge
 801c004:	ebc0 0202 	rsbge	r2, r0, r2
 801c008:	ebc0 0203 	rsblt	r2, r0, r3
 801c00c:	80a1      	strh	r1, [r4, #4]
 801c00e:	80e2      	strh	r2, [r4, #6]
 801c010:	e7d1      	b.n	801bfb6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801c014 <_ZN8touchgfx11Application11getInstanceEv>:
 801c014:	4b01      	ldr	r3, [pc, #4]	; (801c01c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801c016:	6818      	ldr	r0, [r3, #0]
 801c018:	4770      	bx	lr
 801c01a:	bf00      	nop
 801c01c:	200097f4 	.word	0x200097f4

0801c020 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801c020:	b570      	push	{r4, r5, r6, lr}
 801c022:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801c026:	1d04      	adds	r4, r0, #4
 801c028:	2200      	movs	r2, #0
 801c02a:	b295      	uxth	r5, r2
 801c02c:	42ab      	cmp	r3, r5
 801c02e:	d90f      	bls.n	801c050 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 801c030:	f854 6b04 	ldr.w	r6, [r4], #4
 801c034:	428e      	cmp	r6, r1
 801c036:	4615      	mov	r5, r2
 801c038:	f102 0201 	add.w	r2, r2, #1
 801c03c:	d1f5      	bne.n	801c02a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801c03e:	4428      	add	r0, r5
 801c040:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801c044:	2bff      	cmp	r3, #255	; 0xff
 801c046:	d002      	beq.n	801c04e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801c048:	3301      	adds	r3, #1
 801c04a:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801c04e:	bd70      	pop	{r4, r5, r6, pc}
 801c050:	2b20      	cmp	r3, #32
 801c052:	d106      	bne.n	801c062 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x42>
 801c054:	4b08      	ldr	r3, [pc, #32]	; (801c078 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801c056:	4a09      	ldr	r2, [pc, #36]	; (801c07c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801c058:	4809      	ldr	r0, [pc, #36]	; (801c080 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801c05a:	f240 215f 	movw	r1, #607	; 0x25f
 801c05e:	f011 fef7 	bl	802de50 <__assert_func>
 801c062:	18c2      	adds	r2, r0, r3
 801c064:	2401      	movs	r4, #1
 801c066:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801c06a:	191a      	adds	r2, r3, r4
 801c06c:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801c070:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801c074:	6041      	str	r1, [r0, #4]
 801c076:	e7ea      	b.n	801c04e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801c078:	08031c33 	.word	0x08031c33
 801c07c:	08031d14 	.word	0x08031d14
 801c080:	08031bd2 	.word	0x08031bd2

0801c084 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801c084:	b570      	push	{r4, r5, r6, lr}
 801c086:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801c08a:	1d04      	adds	r4, r0, #4
 801c08c:	2300      	movs	r3, #0
 801c08e:	b29a      	uxth	r2, r3
 801c090:	4296      	cmp	r6, r2
 801c092:	d90a      	bls.n	801c0aa <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801c094:	f854 2b04 	ldr.w	r2, [r4], #4
 801c098:	428a      	cmp	r2, r1
 801c09a:	d107      	bne.n	801c0ac <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c09c:	18c5      	adds	r5, r0, r3
 801c09e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801c0a2:	b11a      	cbz	r2, 801c0ac <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801c0a4:	3a01      	subs	r2, #1
 801c0a6:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801c0aa:	bd70      	pop	{r4, r5, r6, pc}
 801c0ac:	3301      	adds	r3, #1
 801c0ae:	e7ee      	b.n	801c08e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801c0b0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801c0b6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801c0ba:	30a8      	adds	r0, #168	; 0xa8
 801c0bc:	f802 3b01 	strb.w	r3, [r2], #1
 801c0c0:	4282      	cmp	r2, r0
 801c0c2:	d1fb      	bne.n	801c0bc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801c0c4:	4770      	bx	lr

0801c0c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801c0cc:	2200      	movs	r2, #0
 801c0ce:	801a      	strh	r2, [r3, #0]
 801c0d0:	805a      	strh	r2, [r3, #2]
 801c0d2:	809a      	strh	r2, [r3, #4]
 801c0d4:	80da      	strh	r2, [r3, #6]
 801c0d6:	3308      	adds	r3, #8
 801c0d8:	428b      	cmp	r3, r1
 801c0da:	d1f8      	bne.n	801c0ce <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801c0dc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c0e0:	4770      	bx	lr
	...

0801c0e4 <_ZN8touchgfx11ApplicationC1Ev>:
 801c0e4:	b570      	push	{r4, r5, r6, lr}
 801c0e6:	4b1a      	ldr	r3, [pc, #104]	; (801c150 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801c0e8:	6003      	str	r3, [r0, #0]
 801c0ea:	2500      	movs	r5, #0
 801c0ec:	4604      	mov	r4, r0
 801c0ee:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801c0f2:	30a8      	adds	r0, #168	; 0xa8
 801c0f4:	f7ff ffe7 	bl	801c0c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c0f8:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801c0fc:	f7ff ffe3 	bl	801c0c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c100:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801c104:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801c108:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801c10c:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801c110:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801c114:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801c118:	490e      	ldr	r1, [pc, #56]	; (801c154 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801c11a:	480f      	ldr	r0, [pc, #60]	; (801c158 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801c11c:	4e0f      	ldr	r6, [pc, #60]	; (801c15c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801c11e:	f00f faa5 	bl	802b66c <CRC_Lock>
 801c122:	4b0f      	ldr	r3, [pc, #60]	; (801c160 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801c124:	b158      	cbz	r0, 801c13e <_ZN8touchgfx11ApplicationC1Ev+0x5a>
 801c126:	801d      	strh	r5, [r3, #0]
 801c128:	4a0e      	ldr	r2, [pc, #56]	; (801c164 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801c12a:	2300      	movs	r3, #0
 801c12c:	6013      	str	r3, [r2, #0]
 801c12e:	4a0e      	ldr	r2, [pc, #56]	; (801c168 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801c130:	6033      	str	r3, [r6, #0]
 801c132:	4620      	mov	r0, r4
 801c134:	6013      	str	r3, [r2, #0]
 801c136:	f7ff ffbb 	bl	801c0b0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801c13a:	4620      	mov	r0, r4
 801c13c:	bd70      	pop	{r4, r5, r6, pc}
 801c13e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c142:	2002      	movs	r0, #2
 801c144:	801a      	strh	r2, [r3, #0]
 801c146:	6030      	str	r0, [r6, #0]
 801c148:	f001 faae 	bl	801d6a8 <_ZN8touchgfx6Screen4drawEv>
 801c14c:	e7ec      	b.n	801c128 <_ZN8touchgfx11ApplicationC1Ev+0x44>
 801c14e:	bf00      	nop
 801c150:	08031c94 	.word	0x08031c94
 801c154:	b5e8b5cd 	.word	0xb5e8b5cd
 801c158:	f407a5c2 	.word	0xf407a5c2
 801c15c:	200097e4 	.word	0x200097e4
 801c160:	20000020 	.word	0x20000020
 801c164:	200097f4 	.word	0x200097f4
 801c168:	200097e8 	.word	0x200097e8

0801c16c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801c16c:	b510      	push	{r4, lr}
 801c16e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801c172:	428b      	cmp	r3, r1
 801c174:	d806      	bhi.n	801c184 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801c176:	4b0b      	ldr	r3, [pc, #44]	; (801c1a4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801c178:	4a0b      	ldr	r2, [pc, #44]	; (801c1a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801c17a:	480c      	ldr	r0, [pc, #48]	; (801c1ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801c17c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801c180:	f011 fe66 	bl	802de50 <__assert_func>
 801c184:	3b01      	subs	r3, #1
 801c186:	b29b      	uxth	r3, r3
 801c188:	428b      	cmp	r3, r1
 801c18a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801c18e:	d908      	bls.n	801c1a2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801c190:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801c194:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801c198:	681a      	ldr	r2, [r3, #0]
 801c19a:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801c19e:	685a      	ldr	r2, [r3, #4]
 801c1a0:	6062      	str	r2, [r4, #4]
 801c1a2:	bd10      	pop	{r4, pc}
 801c1a4:	08031bfc 	.word	0x08031bfc
 801c1a8:	08031d59 	.word	0x08031d59
 801c1ac:	08031c0a 	.word	0x08031c0a

0801c1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801c1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1b2:	466b      	mov	r3, sp
 801c1b4:	e883 0006 	stmia.w	r3, {r1, r2}
 801c1b8:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801c1bc:	2a07      	cmp	r2, #7
 801c1be:	4604      	mov	r4, r0
 801c1c0:	d906      	bls.n	801c1d0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801c1c2:	4b09      	ldr	r3, [pc, #36]	; (801c1e8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801c1c4:	4a09      	ldr	r2, [pc, #36]	; (801c1ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801c1c6:	480a      	ldr	r0, [pc, #40]	; (801c1f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801c1c8:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801c1cc:	f011 fe40 	bl	802de50 <__assert_func>
 801c1d0:	1c51      	adds	r1, r2, #1
 801c1d2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c1d6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801c1da:	cb03      	ldmia	r3!, {r0, r1}
 801c1dc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801c1e0:	6069      	str	r1, [r5, #4]
 801c1e2:	b003      	add	sp, #12
 801c1e4:	bd30      	pop	{r4, r5, pc}
 801c1e6:	bf00      	nop
 801c1e8:	08031c5b 	.word	0x08031c5b
 801c1ec:	08031def 	.word	0x08031def
 801c1f0:	08031c0a 	.word	0x08031c0a

0801c1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801c1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1f8:	b08d      	sub	sp, #52	; 0x34
 801c1fa:	ac08      	add	r4, sp, #32
 801c1fc:	4683      	mov	fp, r0
 801c1fe:	4620      	mov	r0, r4
 801c200:	e884 0006 	stmia.w	r4, {r1, r2}
 801c204:	f7fb f97b 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801c208:	2800      	cmp	r0, #0
 801c20a:	d16a      	bne.n	801c2e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c20c:	9402      	str	r4, [sp, #8]
 801c20e:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801c212:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801c216:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801c21a:	2400      	movs	r4, #0
 801c21c:	9301      	str	r3, [sp, #4]
 801c21e:	36a0      	adds	r6, #160	; 0xa0
 801c220:	42a5      	cmp	r5, r4
 801c222:	d00d      	beq.n	801c240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801c224:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801c228:	9802      	ldr	r0, [sp, #8]
 801c22a:	f7ff fe8b 	bl	801bf44 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c22e:	b128      	cbz	r0, 801c23c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801c230:	1e69      	subs	r1, r5, #1
 801c232:	1b09      	subs	r1, r1, r4
 801c234:	b289      	uxth	r1, r1
 801c236:	9801      	ldr	r0, [sp, #4]
 801c238:	f7ff ff98 	bl	801c16c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c23c:	3401      	adds	r4, #1
 801c23e:	e7ef      	b.n	801c220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c240:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801c244:	9703      	str	r7, [sp, #12]
 801c246:	1e7b      	subs	r3, r7, #1
 801c248:	9300      	str	r3, [sp, #0]
 801c24a:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801c24e:	2400      	movs	r4, #0
 801c250:	4655      	mov	r5, sl
 801c252:	9704      	str	r7, [sp, #16]
 801c254:	4626      	mov	r6, r4
 801c256:	9b04      	ldr	r3, [sp, #16]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d078      	beq.n	801c34e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801c25c:	9902      	ldr	r1, [sp, #8]
 801c25e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801c262:	f7fc fe1d 	bl	8018ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c266:	b360      	cbz	r0, 801c2c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801c268:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801c26c:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801c270:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801c274:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801c278:	45e6      	cmp	lr, ip
 801c27a:	db35      	blt.n	801c2e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801c27c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c280:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801c284:	4472      	add	r2, lr
 801c286:	4463      	add	r3, ip
 801c288:	b212      	sxth	r2, r2
 801c28a:	b21b      	sxth	r3, r3
 801c28c:	429a      	cmp	r2, r3
 801c28e:	dc2b      	bgt.n	801c2e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801c290:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801c294:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c298:	fa1f f288 	uxth.w	r2, r8
 801c29c:	4413      	add	r3, r2
 801c29e:	b29b      	uxth	r3, r3
 801c2a0:	45c1      	cmp	r9, r8
 801c2a2:	fa0f fe83 	sxth.w	lr, r3
 801c2a6:	fa1f fc89 	uxth.w	ip, r9
 801c2aa:	db0f      	blt.n	801c2cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801c2ac:	eba3 030c 	sub.w	r3, r3, ip
 801c2b0:	1ac9      	subs	r1, r1, r3
 801c2b2:	b209      	sxth	r1, r1
 801c2b4:	2900      	cmp	r1, #0
 801c2b6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c2ba:	dd12      	ble.n	801c2e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c2bc:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801c2c0:	4604      	mov	r4, r0
 801c2c2:	9b04      	ldr	r3, [sp, #16]
 801c2c4:	3b01      	subs	r3, #1
 801c2c6:	9304      	str	r3, [sp, #16]
 801c2c8:	3d08      	subs	r5, #8
 801c2ca:	e7c4      	b.n	801c256 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801c2cc:	4461      	add	r1, ip
 801c2ce:	b209      	sxth	r1, r1
 801c2d0:	4571      	cmp	r1, lr
 801c2d2:	dc3a      	bgt.n	801c34a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c2d4:	eba2 020c 	sub.w	r2, r2, ip
 801c2d8:	b212      	sxth	r2, r2
 801c2da:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c2de:	2a00      	cmp	r2, #0
 801c2e0:	dcee      	bgt.n	801c2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801c2e2:	b00d      	add	sp, #52	; 0x34
 801c2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2e8:	45c1      	cmp	r9, r8
 801c2ea:	db2e      	blt.n	801c34a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c2ec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801c2f0:	4499      	add	r9, r3
 801c2f2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801c2f6:	4498      	add	r8, r3
 801c2f8:	fa0f f989 	sxth.w	r9, r9
 801c2fc:	fa0f f888 	sxth.w	r8, r8
 801c300:	45c1      	cmp	r9, r8
 801c302:	dc22      	bgt.n	801c34a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c304:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801c308:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801c30c:	fa1f f28c 	uxth.w	r2, ip
 801c310:	4413      	add	r3, r2
 801c312:	b29b      	uxth	r3, r3
 801c314:	45e6      	cmp	lr, ip
 801c316:	fa1f f88e 	uxth.w	r8, lr
 801c31a:	fa0f f983 	sxth.w	r9, r3
 801c31e:	db0a      	blt.n	801c336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801c320:	eba3 0308 	sub.w	r3, r3, r8
 801c324:	1ac9      	subs	r1, r1, r3
 801c326:	b209      	sxth	r1, r1
 801c328:	2900      	cmp	r1, #0
 801c32a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801c32e:	ddd8      	ble.n	801c2e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c330:	f8ad 9020 	strh.w	r9, [sp, #32]
 801c334:	e7c4      	b.n	801c2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801c336:	4441      	add	r1, r8
 801c338:	b209      	sxth	r1, r1
 801c33a:	4549      	cmp	r1, r9
 801c33c:	dc05      	bgt.n	801c34a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801c33e:	eba2 0208 	sub.w	r2, r2, r8
 801c342:	b212      	sxth	r2, r2
 801c344:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801c348:	e7c9      	b.n	801c2de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801c34a:	4606      	mov	r6, r0
 801c34c:	e7b9      	b.n	801c2c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801c34e:	2c00      	cmp	r4, #0
 801c350:	f47f af7d 	bne.w	801c24e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801c354:	2e00      	cmp	r6, #0
 801c356:	f000 81dd 	beq.w	801c714 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c35a:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801c35e:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801c362:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801c366:	b2b9      	uxth	r1, r7
 801c368:	9104      	str	r1, [sp, #16]
 801c36a:	9804      	ldr	r0, [sp, #16]
 801c36c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c370:	4401      	add	r1, r0
 801c372:	b2b3      	uxth	r3, r6
 801c374:	b289      	uxth	r1, r1
 801c376:	441a      	add	r2, r3
 801c378:	9105      	str	r1, [sp, #20]
 801c37a:	b292      	uxth	r2, r2
 801c37c:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801c380:	fa0f f882 	sxth.w	r8, r2
 801c384:	4655      	mov	r5, sl
 801c386:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c38a:	9b03      	ldr	r3, [sp, #12]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d054      	beq.n	801c43a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801c390:	9902      	ldr	r1, [sp, #8]
 801c392:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801c396:	f7fc fd83 	bl	8018ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c39a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c39e:	b1d8      	cbz	r0, 801c3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c3a0:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801c3a4:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801c3a8:	4576      	cmp	r6, lr
 801c3aa:	dc26      	bgt.n	801c3fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c3ac:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801c3b0:	44f4      	add	ip, lr
 801c3b2:	fa0f fc8c 	sxth.w	ip, ip
 801c3b6:	45e0      	cmp	r8, ip
 801c3b8:	db1f      	blt.n	801c3fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c3ba:	428f      	cmp	r7, r1
 801c3bc:	fa1f fc81 	uxth.w	ip, r1
 801c3c0:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801c3c4:	dc0f      	bgt.n	801c3e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801c3c6:	9805      	ldr	r0, [sp, #20]
 801c3c8:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801c3cc:	eba0 0c0c 	sub.w	ip, r0, ip
 801c3d0:	eba1 010c 	sub.w	r1, r1, ip
 801c3d4:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801c3d8:	4620      	mov	r0, r4
 801c3da:	9903      	ldr	r1, [sp, #12]
 801c3dc:	3901      	subs	r1, #1
 801c3de:	9103      	str	r1, [sp, #12]
 801c3e0:	3d08      	subs	r5, #8
 801c3e2:	4604      	mov	r4, r0
 801c3e4:	e7cf      	b.n	801c386 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801c3e6:	4461      	add	r1, ip
 801c3e8:	b209      	sxth	r1, r1
 801c3ea:	4549      	cmp	r1, r9
 801c3ec:	dcf5      	bgt.n	801c3da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c3ee:	9904      	ldr	r1, [sp, #16]
 801c3f0:	eba1 0c0c 	sub.w	ip, r1, ip
 801c3f4:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801c3f8:	e7ee      	b.n	801c3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c3fa:	428f      	cmp	r7, r1
 801c3fc:	dced      	bgt.n	801c3da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c3fe:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801c402:	4461      	add	r1, ip
 801c404:	b209      	sxth	r1, r1
 801c406:	4589      	cmp	r9, r1
 801c408:	dbe7      	blt.n	801c3da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c40a:	4576      	cmp	r6, lr
 801c40c:	fa1f fc8e 	uxth.w	ip, lr
 801c410:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801c414:	dc08      	bgt.n	801c428 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801c416:	eba2 0c0c 	sub.w	ip, r2, ip
 801c41a:	eba1 010c 	sub.w	r1, r1, ip
 801c41e:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801c422:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801c426:	e7d7      	b.n	801c3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c428:	4461      	add	r1, ip
 801c42a:	b209      	sxth	r1, r1
 801c42c:	4588      	cmp	r8, r1
 801c42e:	dbd4      	blt.n	801c3da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c430:	eba3 0c0c 	sub.w	ip, r3, ip
 801c434:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801c438:	e7ce      	b.n	801c3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c43a:	2c00      	cmp	r4, #0
 801c43c:	f000 816a 	beq.w	801c714 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c440:	9b00      	ldr	r3, [sp, #0]
 801c442:	3301      	adds	r3, #1
 801c444:	f000 8166 	beq.w	801c714 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x520>
 801c448:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801c44c:	4621      	mov	r1, r4
 801c44e:	9802      	ldr	r0, [sp, #8]
 801c450:	f7ff fd78 	bl	801bf44 <_ZNK8touchgfx4Rect8includesERKS0_>
 801c454:	b120      	cbz	r0, 801c460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801c456:	f8bd 1000 	ldrh.w	r1, [sp]
 801c45a:	9801      	ldr	r0, [sp, #4]
 801c45c:	f7ff fe86 	bl	801c16c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c460:	9902      	ldr	r1, [sp, #8]
 801c462:	4620      	mov	r0, r4
 801c464:	f7fc fd1c 	bl	8018ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c468:	2800      	cmp	r0, #0
 801c46a:	f000 809b 	beq.w	801c5a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801c46e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c472:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801c476:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801c47a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801c47e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c482:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801c486:	fa1f f288 	uxth.w	r2, r8
 801c48a:	19d5      	adds	r5, r2, r7
 801c48c:	fa1f f985 	uxth.w	r9, r5
 801c490:	fa0f f589 	sxth.w	r5, r9
 801c494:	b2a1      	uxth	r1, r4
 801c496:	440b      	add	r3, r1
 801c498:	9503      	str	r5, [sp, #12]
 801c49a:	45a0      	cmp	r8, r4
 801c49c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801c4a0:	9507      	str	r5, [sp, #28]
 801c4a2:	b29b      	uxth	r3, r3
 801c4a4:	f340 809d 	ble.w	801c5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c4a8:	1a52      	subs	r2, r2, r1
 801c4aa:	b292      	uxth	r2, r2
 801c4ac:	4584      	cmp	ip, r0
 801c4ae:	fa0f fe83 	sxth.w	lr, r3
 801c4b2:	b215      	sxth	r5, r2
 801c4b4:	dd2f      	ble.n	801c516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801c4b6:	9e00      	ldr	r6, [sp, #0]
 801c4b8:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c4bc:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801c4c0:	9e03      	ldr	r6, [sp, #12]
 801c4c2:	eba6 060e 	sub.w	r6, r6, lr
 801c4c6:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801c4ca:	fa1f fc8c 	uxth.w	ip, ip
 801c4ce:	b280      	uxth	r0, r0
 801c4d0:	ebac 0300 	sub.w	r3, ip, r0
 801c4d4:	448c      	add	ip, r1
 801c4d6:	4470      	add	r0, lr
 801c4d8:	b29b      	uxth	r3, r3
 801c4da:	fa0f fc8c 	sxth.w	ip, ip
 801c4de:	b200      	sxth	r0, r0
 801c4e0:	b21c      	sxth	r4, r3
 801c4e2:	ebac 0000 	sub.w	r0, ip, r0
 801c4e6:	4366      	muls	r6, r4
 801c4e8:	4368      	muls	r0, r5
 801c4ea:	4286      	cmp	r6, r0
 801c4ec:	db09      	blt.n	801c502 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801c4ee:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801c4f2:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801c4f6:	4417      	add	r7, r2
 801c4f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c4fc:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c500:	e685      	b.n	801c20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c502:	440b      	add	r3, r1
 801c504:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c508:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801c50c:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801c510:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c514:	e67b      	b.n	801c20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c516:	9e03      	ldr	r6, [sp, #12]
 801c518:	45b6      	cmp	lr, r6
 801c51a:	da28      	bge.n	801c56e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801c51c:	9b00      	ldr	r3, [sp, #0]
 801c51e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801c522:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801c526:	eb04 030c 	add.w	r3, r4, ip
 801c52a:	fa1f f883 	uxth.w	r8, r3
 801c52e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801c532:	4403      	add	r3, r0
 801c534:	eba3 0308 	sub.w	r3, r3, r8
 801c538:	b29b      	uxth	r3, r3
 801c53a:	fa0f f988 	sxth.w	r9, r8
 801c53e:	eba0 000c 	sub.w	r0, r0, ip
 801c542:	fa0f f883 	sxth.w	r8, r3
 801c546:	eba6 060e 	sub.w	r6, r6, lr
 801c54a:	4368      	muls	r0, r5
 801c54c:	fb08 f606 	mul.w	r6, r8, r6
 801c550:	42b0      	cmp	r0, r6
 801c552:	dc06      	bgt.n	801c562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801c554:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801c558:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801c55c:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801c560:	e7c9      	b.n	801c4f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801c562:	4423      	add	r3, r4
 801c564:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801c568:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c56c:	e64f      	b.n	801c20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c56e:	9807      	ldr	r0, [sp, #28]
 801c570:	eba3 0309 	sub.w	r3, r3, r9
 801c574:	b29b      	uxth	r3, r3
 801c576:	2806      	cmp	r0, #6
 801c578:	fa0f fc83 	sxth.w	ip, r3
 801c57c:	d818      	bhi.n	801c5b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801c57e:	4652      	mov	r2, sl
 801c580:	ab0a      	add	r3, sp, #40	; 0x28
 801c582:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801c586:	6851      	ldr	r1, [r2, #4]
 801c588:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801c58c:	c303      	stmia	r3!, {r0, r1}
 801c58e:	9b03      	ldr	r3, [sp, #12]
 801c590:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801c594:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801c598:	ab0a      	add	r3, sp, #40	; 0x28
 801c59a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c59e:	9801      	ldr	r0, [sp, #4]
 801c5a0:	f7ff fe06 	bl	801c1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c5a4:	9b00      	ldr	r3, [sp, #0]
 801c5a6:	3b01      	subs	r3, #1
 801c5a8:	9300      	str	r3, [sp, #0]
 801c5aa:	f1aa 0a08 	sub.w	sl, sl, #8
 801c5ae:	e747      	b.n	801c440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c5b0:	9800      	ldr	r0, [sp, #0]
 801c5b2:	45ac      	cmp	ip, r5
 801c5b4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c5b8:	db0c      	blt.n	801c5d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801c5ba:	4417      	add	r7, r2
 801c5bc:	b2bf      	uxth	r7, r7
 801c5be:	4458      	add	r0, fp
 801c5c0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c5c4:	440f      	add	r7, r1
 801c5c6:	f8ad 4020 	strh.w	r4, [sp, #32]
 801c5ca:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801c5ce:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801c5d2:	e61c      	b.n	801c20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c5d4:	4458      	add	r0, fp
 801c5d6:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801c5da:	443b      	add	r3, r7
 801c5dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801c5e0:	e615      	b.n	801c20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c5e2:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801c5e6:	fa1f f18c 	uxth.w	r1, ip
 801c5ea:	eb01 0e05 	add.w	lr, r1, r5
 801c5ee:	b282      	uxth	r2, r0
 801c5f0:	fa1f fe8e 	uxth.w	lr, lr
 801c5f4:	9204      	str	r2, [sp, #16]
 801c5f6:	fa0f f28e 	sxth.w	r2, lr
 801c5fa:	9205      	str	r2, [sp, #20]
 801c5fc:	9e04      	ldr	r6, [sp, #16]
 801c5fe:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801c602:	4432      	add	r2, r6
 801c604:	b292      	uxth	r2, r2
 801c606:	4584      	cmp	ip, r0
 801c608:	9206      	str	r2, [sp, #24]
 801c60a:	da26      	bge.n	801c65a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801c60c:	eba3 0309 	sub.w	r3, r3, r9
 801c610:	eba2 020e 	sub.w	r2, r2, lr
 801c614:	b29b      	uxth	r3, r3
 801c616:	b292      	uxth	r2, r2
 801c618:	fa0f fa83 	sxth.w	sl, r3
 801c61c:	b211      	sxth	r1, r2
 801c61e:	eba0 000c 	sub.w	r0, r0, ip
 801c622:	eba4 0408 	sub.w	r4, r4, r8
 801c626:	fb0a f000 	mul.w	r0, sl, r0
 801c62a:	434c      	muls	r4, r1
 801c62c:	42a0      	cmp	r0, r4
 801c62e:	9800      	ldr	r0, [sp, #0]
 801c630:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c634:	dc06      	bgt.n	801c644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801c636:	4458      	add	r0, fp
 801c638:	9a05      	ldr	r2, [sp, #20]
 801c63a:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801c63e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801c642:	e7ca      	b.n	801c5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c644:	eb0b 0300 	add.w	r3, fp, r0
 801c648:	9903      	ldr	r1, [sp, #12]
 801c64a:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801c64e:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801c652:	442a      	add	r2, r5
 801c654:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c658:	e5d9      	b.n	801c20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c65a:	9e04      	ldr	r6, [sp, #16]
 801c65c:	9a03      	ldr	r2, [sp, #12]
 801c65e:	1b89      	subs	r1, r1, r6
 801c660:	b21e      	sxth	r6, r3
 801c662:	b289      	uxth	r1, r1
 801c664:	4296      	cmp	r6, r2
 801c666:	fa0f fc81 	sxth.w	ip, r1
 801c66a:	dd26      	ble.n	801c6ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c6>
 801c66c:	eba3 0309 	sub.w	r3, r3, r9
 801c670:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801c674:	9e05      	ldr	r6, [sp, #20]
 801c676:	b29b      	uxth	r3, r3
 801c678:	eba6 0902 	sub.w	r9, r6, r2
 801c67c:	b218      	sxth	r0, r3
 801c67e:	eba4 0408 	sub.w	r4, r4, r8
 801c682:	fb0c f404 	mul.w	r4, ip, r4
 801c686:	fb00 f909 	mul.w	r9, r0, r9
 801c68a:	9a00      	ldr	r2, [sp, #0]
 801c68c:	454c      	cmp	r4, r9
 801c68e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c692:	db03      	blt.n	801c69c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a8>
 801c694:	445a      	add	r2, fp
 801c696:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801c69a:	e79e      	b.n	801c5da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c69c:	eb0b 0302 	add.w	r3, fp, r2
 801c6a0:	9a03      	ldr	r2, [sp, #12]
 801c6a2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801c6a6:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801c6aa:	4429      	add	r1, r5
 801c6ac:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801c6b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c6b4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c6b8:	e5a9      	b.n	801c20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c6ba:	9b06      	ldr	r3, [sp, #24]
 801c6bc:	9c07      	ldr	r4, [sp, #28]
 801c6be:	eba3 020e 	sub.w	r2, r3, lr
 801c6c2:	b292      	uxth	r2, r2
 801c6c4:	2c06      	cmp	r4, #6
 801c6c6:	b213      	sxth	r3, r2
 801c6c8:	d80d      	bhi.n	801c6e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f2>
 801c6ca:	4651      	mov	r1, sl
 801c6cc:	aa0a      	add	r2, sp, #40	; 0x28
 801c6ce:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801c6d2:	6849      	ldr	r1, [r1, #4]
 801c6d4:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801c6d8:	9b05      	ldr	r3, [sp, #20]
 801c6da:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801c6de:	c203      	stmia	r2!, {r0, r1}
 801c6e0:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801c6e4:	e758      	b.n	801c598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801c6e6:	9c00      	ldr	r4, [sp, #0]
 801c6e8:	4563      	cmp	r3, ip
 801c6ea:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c6ee:	db0d      	blt.n	801c70c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x518>
 801c6f0:	4429      	add	r1, r5
 801c6f2:	9a04      	ldr	r2, [sp, #16]
 801c6f4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c6f8:	b289      	uxth	r1, r1
 801c6fa:	445c      	add	r4, fp
 801c6fc:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c700:	4411      	add	r1, r2
 801c702:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801c706:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801c70a:	e580      	b.n	801c20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c70c:	445c      	add	r4, fp
 801c70e:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801c712:	e79e      	b.n	801c652 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801c714:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801c718:	2f07      	cmp	r7, #7
 801c71a:	d806      	bhi.n	801c72a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x536>
 801c71c:	ab08      	add	r3, sp, #32
 801c71e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c722:	9801      	ldr	r0, [sp, #4]
 801c724:	f7ff fd44 	bl	801c1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c728:	e5db      	b.n	801c2e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c72a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801c72e:	f107 39ff 	add.w	r9, r7, #4294967295
 801c732:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801c736:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801c73a:	f04f 35ff 	mov.w	r5, #4294967295
 801c73e:	2400      	movs	r4, #0
 801c740:	9304      	str	r3, [sp, #16]
 801c742:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801c746:	9300      	str	r3, [sp, #0]
 801c748:	f109 32ff 	add.w	r2, r9, #4294967295
 801c74c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801c750:	9303      	str	r3, [sp, #12]
 801c752:	4690      	mov	r8, r2
 801c754:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c758:	f1b8 3fff 	cmp.w	r8, #4294967295
 801c75c:	bf14      	ite	ne
 801c75e:	9904      	ldrne	r1, [sp, #16]
 801c760:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801c764:	6818      	ldr	r0, [r3, #0]
 801c766:	9206      	str	r2, [sp, #24]
 801c768:	bf18      	it	ne
 801c76a:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801c76e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801c772:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c776:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801c77a:	9305      	str	r3, [sp, #20]
 801c77c:	fb16 f601 	smulbb	r6, r6, r1
 801c780:	6859      	ldr	r1, [r3, #4]
 801c782:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c786:	4671      	mov	r1, lr
 801c788:	a80a      	add	r0, sp, #40	; 0x28
 801c78a:	f7ff fbfd 	bl	801bf88 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c78e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801c792:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c796:	9b03      	ldr	r3, [sp, #12]
 801c798:	9a00      	ldr	r2, [sp, #0]
 801c79a:	fb11 f100 	smulbb	r1, r1, r0
 801c79e:	fb02 6603 	mla	r6, r2, r3, r6
 801c7a2:	1b8e      	subs	r6, r1, r6
 801c7a4:	2008      	movs	r0, #8
 801c7a6:	fb91 f1f0 	sdiv	r1, r1, r0
 801c7aa:	42b1      	cmp	r1, r6
 801c7ac:	dc21      	bgt.n	801c7f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801c7ae:	4556      	cmp	r6, sl
 801c7b0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801c7b4:	da03      	bge.n	801c7be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801c7b6:	b1e6      	cbz	r6, 801c7f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801c7b8:	46b2      	mov	sl, r6
 801c7ba:	4645      	mov	r5, r8
 801c7bc:	464c      	mov	r4, r9
 801c7be:	f108 38ff 	add.w	r8, r8, #4294967295
 801c7c2:	f118 0f02 	cmn.w	r8, #2
 801c7c6:	d1c7      	bne.n	801c758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x564>
 801c7c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c7cc:	f1a7 0708 	sub.w	r7, r7, #8
 801c7d0:	4691      	mov	r9, r2
 801c7d2:	d1b6      	bne.n	801c742 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 801c7d4:	9b01      	ldr	r3, [sp, #4]
 801c7d6:	b2a6      	uxth	r6, r4
 801c7d8:	00e4      	lsls	r4, r4, #3
 801c7da:	1918      	adds	r0, r3, r4
 801c7dc:	1c6b      	adds	r3, r5, #1
 801c7de:	d10b      	bne.n	801c7f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 801c7e0:	4601      	mov	r1, r0
 801c7e2:	9802      	ldr	r0, [sp, #8]
 801c7e4:	f7ff fbd0 	bl	801bf88 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c7e8:	4631      	mov	r1, r6
 801c7ea:	9801      	ldr	r0, [sp, #4]
 801c7ec:	f7ff fcbe 	bl	801c16c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c7f0:	e50d      	b.n	801c20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c7f2:	4645      	mov	r5, r8
 801c7f4:	464c      	mov	r4, r9
 801c7f6:	e7ed      	b.n	801c7d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 801c7f8:	9b01      	ldr	r3, [sp, #4]
 801c7fa:	00ed      	lsls	r5, r5, #3
 801c7fc:	1959      	adds	r1, r3, r5
 801c7fe:	f7ff fbc3 	bl	801bf88 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c802:	9b02      	ldr	r3, [sp, #8]
 801c804:	cb03      	ldmia	r3!, {r0, r1}
 801c806:	445d      	add	r5, fp
 801c808:	445c      	add	r4, fp
 801c80a:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801c80e:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801c812:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801c816:	9b02      	ldr	r3, [sp, #8]
 801c818:	6861      	ldr	r1, [r4, #4]
 801c81a:	c303      	stmia	r3!, {r0, r1}
 801c81c:	e7e4      	b.n	801c7e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f4>
	...

0801c820 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c820:	b530      	push	{r4, r5, lr}
 801c822:	4b1d      	ldr	r3, [pc, #116]	; (801c898 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c824:	b085      	sub	sp, #20
 801c826:	460c      	mov	r4, r1
 801c828:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c82c:	4b1b      	ldr	r3, [pc, #108]	; (801c89c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c82e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c832:	2100      	movs	r1, #0
 801c834:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c838:	9100      	str	r1, [sp, #0]
 801c83a:	4605      	mov	r5, r0
 801c83c:	6861      	ldr	r1, [r4, #4]
 801c83e:	6820      	ldr	r0, [r4, #0]
 801c840:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c844:	ab02      	add	r3, sp, #8
 801c846:	c303      	stmia	r3!, {r0, r1}
 801c848:	4669      	mov	r1, sp
 801c84a:	a802      	add	r0, sp, #8
 801c84c:	f7fa fe14 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801c850:	ab02      	add	r3, sp, #8
 801c852:	cb03      	ldmia	r3!, {r0, r1}
 801c854:	4b12      	ldr	r3, [pc, #72]	; (801c8a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c856:	6020      	str	r0, [r4, #0]
 801c858:	6818      	ldr	r0, [r3, #0]
 801c85a:	6061      	str	r1, [r4, #4]
 801c85c:	b138      	cbz	r0, 801c86e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c85e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801c862:	b133      	cbz	r3, 801c872 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c864:	6821      	ldr	r1, [r4, #0]
 801c866:	6862      	ldr	r2, [r4, #4]
 801c868:	4628      	mov	r0, r5
 801c86a:	f7ff fcc3 	bl	801c1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c86e:	b005      	add	sp, #20
 801c870:	bd30      	pop	{r4, r5, pc}
 801c872:	6803      	ldr	r3, [r0, #0]
 801c874:	4621      	mov	r1, r4
 801c876:	689b      	ldr	r3, [r3, #8]
 801c878:	4798      	blx	r3
 801c87a:	4b0a      	ldr	r3, [pc, #40]	; (801c8a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c87c:	6818      	ldr	r0, [r3, #0]
 801c87e:	b118      	cbz	r0, 801c888 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c880:	6803      	ldr	r3, [r0, #0]
 801c882:	4621      	mov	r1, r4
 801c884:	689b      	ldr	r3, [r3, #8]
 801c886:	4798      	blx	r3
 801c888:	4b07      	ldr	r3, [pc, #28]	; (801c8a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c88a:	6818      	ldr	r0, [r3, #0]
 801c88c:	6803      	ldr	r3, [r0, #0]
 801c88e:	4621      	mov	r1, r4
 801c890:	69db      	ldr	r3, [r3, #28]
 801c892:	4798      	blx	r3
 801c894:	e7eb      	b.n	801c86e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c896:	bf00      	nop
 801c898:	2000979c 	.word	0x2000979c
 801c89c:	2000979e 	.word	0x2000979e
 801c8a0:	200097e4 	.word	0x200097e4
 801c8a4:	200097e0 	.word	0x200097e0
 801c8a8:	200097a8 	.word	0x200097a8

0801c8ac <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8b0:	4604      	mov	r4, r0
 801c8b2:	b09b      	sub	sp, #108	; 0x6c
 801c8b4:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801c8b8:	b129      	cbz	r1, 801c8c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801c8c0:	b01b      	add	sp, #108	; 0x6c
 801c8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8c6:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801c8ca:	4630      	mov	r0, r6
 801c8cc:	f7fa fe17 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8d0:	4605      	mov	r5, r0
 801c8d2:	b940      	cbnz	r0, 801c8e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801c8d4:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c8d8:	4620      	mov	r0, r4
 801c8da:	f7ff fc8b 	bl	801c1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c8de:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801c8e2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801c8e6:	4ba7      	ldr	r3, [pc, #668]	; (801cb84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	b33b      	cbz	r3, 801c93c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c8ec:	4da6      	ldr	r5, [pc, #664]	; (801cb88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c8ee:	4628      	mov	r0, r5
 801c8f0:	f7fa fe05 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8f4:	4606      	mov	r6, r0
 801c8f6:	bb08      	cbnz	r0, 801c93c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c8f8:	4628      	mov	r0, r5
 801c8fa:	f7ff f9b7 	bl	801bc6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c8fe:	6829      	ldr	r1, [r5, #0]
 801c900:	686a      	ldr	r2, [r5, #4]
 801c902:	4620      	mov	r0, r4
 801c904:	f7ff fc76 	bl	801c1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c908:	802e      	strh	r6, [r5, #0]
 801c90a:	806e      	strh	r6, [r5, #2]
 801c90c:	80ae      	strh	r6, [r5, #4]
 801c90e:	80ee      	strh	r6, [r5, #6]
 801c910:	4f9e      	ldr	r7, [pc, #632]	; (801cb8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c912:	a809      	add	r0, sp, #36	; 0x24
 801c914:	f7ff fbd7 	bl	801c0c6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c918:	883d      	ldrh	r5, [r7, #0]
 801c91a:	462e      	mov	r6, r5
 801c91c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c920:	42b3      	cmp	r3, r6
 801c922:	d910      	bls.n	801c946 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801c924:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c928:	a809      	add	r0, sp, #36	; 0x24
 801c92a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c92e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801c932:	3601      	adds	r6, #1
 801c934:	f7ff fc3c 	bl	801c1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c938:	b2b6      	uxth	r6, r6
 801c93a:	e7ef      	b.n	801c91c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c93c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c940:	2b00      	cmp	r3, #0
 801c942:	d1e5      	bne.n	801c910 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801c944:	e7bc      	b.n	801c8c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c946:	462e      	mov	r6, r5
 801c948:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c94c:	42b3      	cmp	r3, r6
 801c94e:	d90b      	bls.n	801c968 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801c950:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c954:	4620      	mov	r0, r4
 801c956:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c95a:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c95e:	3601      	adds	r6, #1
 801c960:	f7ff fc48 	bl	801c1f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c964:	b2b6      	uxth	r6, r6
 801c966:	e7ef      	b.n	801c948 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c968:	4a89      	ldr	r2, [pc, #548]	; (801cb90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801c96a:	6813      	ldr	r3, [r2, #0]
 801c96c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c970:	2b01      	cmp	r3, #1
 801c972:	4690      	mov	r8, r2
 801c974:	f040 8094 	bne.w	801caa0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801c978:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c97c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801c980:	33aa      	adds	r3, #170	; 0xaa
 801c982:	f04f 0900 	mov.w	r9, #0
 801c986:	42a8      	cmp	r0, r5
 801c988:	f103 0308 	add.w	r3, r3, #8
 801c98c:	dd0a      	ble.n	801c9a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801c98e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c992:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801c996:	440a      	add	r2, r1
 801c998:	b212      	sxth	r2, r2
 801c99a:	4591      	cmp	r9, r2
 801c99c:	bfb8      	it	lt
 801c99e:	4691      	movlt	r9, r2
 801c9a0:	3501      	adds	r5, #1
 801c9a2:	e7f0      	b.n	801c986 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801c9a4:	4b7b      	ldr	r3, [pc, #492]	; (801cb94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801c9a6:	4e7c      	ldr	r6, [pc, #496]	; (801cb98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801c9a8:	881d      	ldrh	r5, [r3, #0]
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c9b0:	2d0f      	cmp	r5, #15
 801c9b2:	bf8c      	ite	hi
 801c9b4:	08ed      	lsrhi	r5, r5, #3
 801c9b6:	2501      	movls	r5, #1
 801c9b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c9bc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c9c0:	f8d8 0000 	ldr.w	r0, [r8]
 801c9c4:	440b      	add	r3, r1
 801c9c6:	b21b      	sxth	r3, r3
 801c9c8:	4599      	cmp	r9, r3
 801c9ca:	6802      	ldr	r2, [r0, #0]
 801c9cc:	dd4b      	ble.n	801ca66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801c9ce:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801c9d2:	4798      	blx	r3
 801c9d4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c9d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c9dc:	4413      	add	r3, r2
 801c9de:	b21b      	sxth	r3, r3
 801c9e0:	195a      	adds	r2, r3, r5
 801c9e2:	4290      	cmp	r0, r2
 801c9e4:	da07      	bge.n	801c9f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c9e6:	4581      	cmp	r9, r0
 801c9e8:	dd05      	ble.n	801c9f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c9ea:	4298      	cmp	r0, r3
 801c9ec:	da33      	bge.n	801ca56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	dd31      	ble.n	801ca56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c9f2:	4648      	mov	r0, r9
 801c9f4:	e004      	b.n	801ca00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801c9f6:	4298      	cmp	r0, r3
 801c9f8:	dbfb      	blt.n	801c9f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801c9fa:	4548      	cmp	r0, r9
 801c9fc:	bfa8      	it	ge
 801c9fe:	4648      	movge	r0, r9
 801ca00:	f9b6 2000 	ldrsh.w	r2, [r6]
 801ca04:	f8b7 a000 	ldrh.w	sl, [r7]
 801ca08:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ca0c:	2100      	movs	r1, #0
 801ca0e:	1ac0      	subs	r0, r0, r3
 801ca10:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ca14:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ca18:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ca1c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ca20:	4553      	cmp	r3, sl
 801ca22:	d9c9      	bls.n	801c9b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801ca24:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801ca28:	ab07      	add	r3, sp, #28
 801ca2a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ca2e:	6851      	ldr	r1, [r2, #4]
 801ca30:	c303      	stmia	r3!, {r0, r1}
 801ca32:	a807      	add	r0, sp, #28
 801ca34:	a905      	add	r1, sp, #20
 801ca36:	f7fa fd1f 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801ca3a:	a807      	add	r0, sp, #28
 801ca3c:	f7fa fd5f 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801ca40:	b920      	cbnz	r0, 801ca4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801ca42:	6823      	ldr	r3, [r4, #0]
 801ca44:	a907      	add	r1, sp, #28
 801ca46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca48:	4620      	mov	r0, r4
 801ca4a:	4798      	blx	r3
 801ca4c:	f10a 0a01 	add.w	sl, sl, #1
 801ca50:	fa1f fa8a 	uxth.w	sl, sl
 801ca54:	e7e2      	b.n	801ca1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801ca56:	f8d8 0000 	ldr.w	r0, [r8]
 801ca5a:	6803      	ldr	r3, [r0, #0]
 801ca5c:	2101      	movs	r1, #1
 801ca5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ca62:	4798      	blx	r3
 801ca64:	e7a8      	b.n	801c9b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801ca66:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801ca68:	4798      	blx	r3
 801ca6a:	4b4c      	ldr	r3, [pc, #304]	; (801cb9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801ca6c:	781b      	ldrb	r3, [r3, #0]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	f43f af26 	beq.w	801c8c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ca74:	2300      	movs	r3, #0
 801ca76:	883d      	ldrh	r5, [r7, #0]
 801ca78:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801ca7c:	34ea      	adds	r4, #234	; 0xea
 801ca7e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801ca82:	42ab      	cmp	r3, r5
 801ca84:	f67f af1c 	bls.w	801c8c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ca88:	ab1a      	add	r3, sp, #104	; 0x68
 801ca8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ca8e:	3b44      	subs	r3, #68	; 0x44
 801ca90:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ca94:	4620      	mov	r0, r4
 801ca96:	3501      	adds	r5, #1
 801ca98:	f7ff fb8a 	bl	801c1b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ca9c:	b2ad      	uxth	r5, r5
 801ca9e:	e7ee      	b.n	801ca7e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801caa0:	2b02      	cmp	r3, #2
 801caa2:	f040 813e 	bne.w	801cd22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801caa6:	4b3e      	ldr	r3, [pc, #248]	; (801cba0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>)
 801caa8:	781b      	ldrb	r3, [r3, #0]
 801caaa:	2b01      	cmp	r3, #1
 801caac:	d02c      	beq.n	801cb08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801caae:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801cab2:	883a      	ldrh	r2, [r7, #0]
 801cab4:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801cab8:	3201      	adds	r2, #1
 801caba:	b292      	uxth	r2, r2
 801cabc:	2900      	cmp	r1, #0
 801cabe:	d0d4      	beq.n	801ca6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801cac0:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801cac4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801cac8:	441d      	add	r5, r3
 801caca:	b22d      	sxth	r5, r5
 801cacc:	4610      	mov	r0, r2
 801cace:	f04f 0a00 	mov.w	sl, #0
 801cad2:	b283      	uxth	r3, r0
 801cad4:	4299      	cmp	r1, r3
 801cad6:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801cada:	f240 80c5 	bls.w	801cc68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3bc>
 801cade:	4426      	add	r6, r4
 801cae0:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801cae4:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801cae8:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801caec:	4573      	cmp	r3, lr
 801caee:	4684      	mov	ip, r0
 801caf0:	f340 80a7 	ble.w	801cc42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x396>
 801caf4:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801caf8:	4475      	add	r5, lr
 801cafa:	b22d      	sxth	r5, r5
 801cafc:	429d      	cmp	r5, r3
 801cafe:	bfa8      	it	ge
 801cb00:	461d      	movge	r5, r3
 801cb02:	3001      	adds	r0, #1
 801cb04:	46e2      	mov	sl, ip
 801cb06:	e7e4      	b.n	801cad2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801cb08:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801cb0c:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801cb10:	f1bb 0f00 	cmp.w	fp, #0
 801cb14:	d0a9      	beq.n	801ca6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801cb16:	883b      	ldrh	r3, [r7, #0]
 801cb18:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801cb1c:	3301      	adds	r3, #1
 801cb1e:	b29b      	uxth	r3, r3
 801cb20:	2600      	movs	r6, #0
 801cb22:	b299      	uxth	r1, r3
 801cb24:	458b      	cmp	fp, r1
 801cb26:	ea4f 05c6 	mov.w	r5, r6, lsl #3
 801cb2a:	d93b      	bls.n	801cba4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f8>
 801cb2c:	4425      	add	r5, r4
 801cb2e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801cb32:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801cb36:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801cb3a:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801cb3e:	4408      	add	r0, r1
 801cb40:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801cb44:	4471      	add	r1, lr
 801cb46:	b200      	sxth	r0, r0
 801cb48:	b209      	sxth	r1, r1
 801cb4a:	4288      	cmp	r0, r1
 801cb4c:	469c      	mov	ip, r3
 801cb4e:	da06      	bge.n	801cb5e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b2>
 801cb50:	4586      	cmp	lr, r0
 801cb52:	4672      	mov	r2, lr
 801cb54:	bfb8      	it	lt
 801cb56:	4602      	movlt	r2, r0
 801cb58:	3301      	adds	r3, #1
 801cb5a:	4666      	mov	r6, ip
 801cb5c:	e7e1      	b.n	801cb22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801cb5e:	d10b      	bne.n	801cb78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2cc>
 801cb60:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801cb64:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801cb68:	458c      	cmp	ip, r1
 801cb6a:	bfb4      	ite	lt
 801cb6c:	469c      	movlt	ip, r3
 801cb6e:	46b4      	movge	ip, r6
 801cb70:	4572      	cmp	r2, lr
 801cb72:	bfb8      	it	lt
 801cb74:	4672      	movlt	r2, lr
 801cb76:	e7ef      	b.n	801cb58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801cb78:	428a      	cmp	r2, r1
 801cb7a:	bfb8      	it	lt
 801cb7c:	460a      	movlt	r2, r1
 801cb7e:	46b4      	mov	ip, r6
 801cb80:	e7ea      	b.n	801cb58 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ac>
 801cb82:	bf00      	nop
 801cb84:	200097e0 	.word	0x200097e0
 801cb88:	200097ec 	.word	0x200097ec
 801cb8c:	20000020 	.word	0x20000020
 801cb90:	200097a8 	.word	0x200097a8
 801cb94:	2000979e 	.word	0x2000979e
 801cb98:	2000979c 	.word	0x2000979c
 801cb9c:	200097a6 	.word	0x200097a6
 801cba0:	200097a0 	.word	0x200097a0
 801cba4:	1961      	adds	r1, r4, r5
 801cba6:	ab07      	add	r3, sp, #28
 801cba8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801cbac:	6849      	ldr	r1, [r1, #4]
 801cbae:	c303      	stmia	r3!, {r0, r1}
 801cbb0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801cbb4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cbb8:	2b13      	cmp	r3, #19
 801cbba:	bfd8      	it	le
 801cbbc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801cbc0:	f8ad 201c 	strh.w	r2, [sp, #28]
 801cbc4:	440b      	add	r3, r1
 801cbc6:	1a9b      	subs	r3, r3, r2
 801cbc8:	a807      	add	r0, sp, #28
 801cbca:	f8ad 3020 	strh.w	r3, [sp, #32]
 801cbce:	f7ff f867 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cbd2:	a807      	add	r0, sp, #28
 801cbd4:	f7fa fc93 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801cbd8:	2800      	cmp	r0, #0
 801cbda:	d197      	bne.n	801cb0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801cbdc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801cbe0:	f8d8 0000 	ldr.w	r0, [r8]
 801cbe4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cbe8:	f8d0 e000 	ldr.w	lr, [r0]
 801cbec:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801cbf0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cbf4:	f1bc 0f14 	cmp.w	ip, #20
 801cbf8:	bfa8      	it	ge
 801cbfa:	f04f 0c14 	movge.w	ip, #20
 801cbfe:	fa1f fc8c 	uxth.w	ip, ip
 801cc02:	f8cd c000 	str.w	ip, [sp]
 801cc06:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801cc0a:	47d0      	blx	sl
 801cc0c:	4682      	mov	sl, r0
 801cc0e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cc12:	a807      	add	r0, sp, #28
 801cc14:	f7ff f82a 	bl	801bc6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801cc18:	6823      	ldr	r3, [r4, #0]
 801cc1a:	4425      	add	r5, r4
 801cc1c:	4620      	mov	r0, r4
 801cc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc20:	a907      	add	r1, sp, #28
 801cc22:	4798      	blx	r3
 801cc24:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801cc28:	eba0 000a 	sub.w	r0, r0, sl
 801cc2c:	b200      	sxth	r0, r0
 801cc2e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801cc32:	2800      	cmp	r0, #0
 801cc34:	f47f af6a 	bne.w	801cb0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801cc38:	b2b1      	uxth	r1, r6
 801cc3a:	4648      	mov	r0, r9
 801cc3c:	f7ff fa96 	bl	801c16c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cc40:	e764      	b.n	801cb0c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801cc42:	d10c      	bne.n	801cc5e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b2>
 801cc44:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801cc48:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801cc4c:	45b4      	cmp	ip, r6
 801cc4e:	bfb4      	ite	lt
 801cc50:	4684      	movlt	ip, r0
 801cc52:	46d4      	movge	ip, sl
 801cc54:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801cc58:	4433      	add	r3, r6
 801cc5a:	b21b      	sxth	r3, r3
 801cc5c:	e74e      	b.n	801cafc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801cc5e:	4575      	cmp	r5, lr
 801cc60:	bfa8      	it	ge
 801cc62:	4675      	movge	r5, lr
 801cc64:	46d4      	mov	ip, sl
 801cc66:	e74c      	b.n	801cb02 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801cc68:	eb0b 0006 	add.w	r0, fp, r6
 801cc6c:	4426      	add	r6, r4
 801cc6e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801cc72:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801cc76:	f1b9 0f13 	cmp.w	r9, #19
 801cc7a:	bfde      	ittt	le
 801cc7c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801cc80:	444d      	addle	r5, r9
 801cc82:	b22d      	sxthle	r5, r5
 801cc84:	f7fa fc3b 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801cc88:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801cc8c:	2800      	cmp	r0, #0
 801cc8e:	f47f af15 	bne.w	801cabc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801cc92:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801cc96:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801cc9a:	eba5 050c 	sub.w	r5, r5, ip
 801cc9e:	fa1f f28c 	uxth.w	r2, ip
 801cca2:	fa1f f989 	uxth.w	r9, r9
 801cca6:	eb02 0009 	add.w	r0, r2, r9
 801ccaa:	2d14      	cmp	r5, #20
 801ccac:	bfa8      	it	ge
 801ccae:	2514      	movge	r5, #20
 801ccb0:	b200      	sxth	r0, r0
 801ccb2:	fa1f fe85 	uxth.w	lr, r5
 801ccb6:	eba0 000c 	sub.w	r0, r0, ip
 801ccba:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801ccbe:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801ccc2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ccc6:	4586      	cmp	lr, r0
 801ccc8:	f8d8 0000 	ldr.w	r0, [r8]
 801cccc:	f8ad c01e 	strh.w	ip, [sp, #30]
 801ccd0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ccd4:	bfb8      	it	lt
 801ccd6:	46f1      	movlt	r9, lr
 801ccd8:	6805      	ldr	r5, [r0, #0]
 801ccda:	f8cd 9000 	str.w	r9, [sp]
 801ccde:	b29b      	uxth	r3, r3
 801cce0:	b289      	uxth	r1, r1
 801cce2:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801cce6:	47a8      	blx	r5
 801cce8:	6823      	ldr	r3, [r4, #0]
 801ccea:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ccee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ccf0:	a907      	add	r1, sp, #28
 801ccf2:	4620      	mov	r0, r4
 801ccf4:	4798      	blx	r3
 801ccf6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ccfa:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801ccfe:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801cd02:	1a5b      	subs	r3, r3, r1
 801cd04:	440a      	add	r2, r1
 801cd06:	b21b      	sxth	r3, r3
 801cd08:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801cd0c:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	f47f aece 	bne.w	801cab2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801cd16:	fa1f f18a 	uxth.w	r1, sl
 801cd1a:	4658      	mov	r0, fp
 801cd1c:	f7ff fa26 	bl	801c16c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801cd20:	e6c7      	b.n	801cab2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801cd22:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801cd26:	42ab      	cmp	r3, r5
 801cd28:	f67f ae9f 	bls.w	801ca6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801cd2c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801cd30:	ab07      	add	r3, sp, #28
 801cd32:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801cd36:	6851      	ldr	r1, [r2, #4]
 801cd38:	c303      	stmia	r3!, {r0, r1}
 801cd3a:	a807      	add	r0, sp, #28
 801cd3c:	f7fa fbdf 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 801cd40:	b920      	cbnz	r0, 801cd4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x4a0>
 801cd42:	6823      	ldr	r3, [r4, #0]
 801cd44:	a907      	add	r1, sp, #28
 801cd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cd48:	4620      	mov	r0, r4
 801cd4a:	4798      	blx	r3
 801cd4c:	3501      	adds	r5, #1
 801cd4e:	b2ad      	uxth	r5, r5
 801cd50:	e7e7      	b.n	801cd22 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x476>
 801cd52:	bf00      	nop

0801cd54 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801cd54:	4b03      	ldr	r3, [pc, #12]	; (801cd64 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801cd56:	2200      	movs	r2, #0
 801cd58:	801a      	strh	r2, [r3, #0]
 801cd5a:	805a      	strh	r2, [r3, #2]
 801cd5c:	809a      	strh	r2, [r3, #4]
 801cd5e:	80da      	strh	r2, [r3, #6]
 801cd60:	4770      	bx	lr
 801cd62:	bf00      	nop
 801cd64:	200097ec 	.word	0x200097ec

0801cd68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd6c:	4606      	mov	r6, r0
 801cd6e:	b09d      	sub	sp, #116	; 0x74
 801cd70:	a803      	add	r0, sp, #12
 801cd72:	4614      	mov	r4, r2
 801cd74:	468a      	mov	sl, r1
 801cd76:	461d      	mov	r5, r3
 801cd78:	f000 fe3d 	bl	801d9f6 <_ZN8touchgfx12TextProviderC1Ev>
 801cd7c:	6833      	ldr	r3, [r6, #0]
 801cd7e:	4630      	mov	r0, r6
 801cd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd82:	4798      	blx	r3
 801cd84:	6833      	ldr	r3, [r6, #0]
 801cd86:	4607      	mov	r7, r0
 801cd88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd8a:	4630      	mov	r0, r6
 801cd8c:	4798      	blx	r3
 801cd8e:	462a      	mov	r2, r5
 801cd90:	9000      	str	r0, [sp, #0]
 801cd92:	4621      	mov	r1, r4
 801cd94:	463b      	mov	r3, r7
 801cd96:	a803      	add	r0, sp, #12
 801cd98:	f000 fe80 	bl	801da9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cd9c:	2500      	movs	r5, #0
 801cd9e:	462c      	mov	r4, r5
 801cda0:	46a9      	mov	r9, r5
 801cda2:	46a8      	mov	r8, r5
 801cda4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801cda8:	2300      	movs	r3, #0
 801cdaa:	9302      	str	r3, [sp, #8]
 801cdac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801cdb0:	429c      	cmp	r4, r3
 801cdb2:	d002      	beq.n	801cdba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801cdb4:	455c      	cmp	r4, fp
 801cdb6:	bf18      	it	ne
 801cdb8:	4625      	movne	r5, r4
 801cdba:	ab02      	add	r3, sp, #8
 801cdbc:	4632      	mov	r2, r6
 801cdbe:	4651      	mov	r1, sl
 801cdc0:	a803      	add	r0, sp, #12
 801cdc2:	f001 f96b 	bl	801e09c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cdc6:	4604      	mov	r4, r0
 801cdc8:	b108      	cbz	r0, 801cdce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801cdca:	280a      	cmp	r0, #10
 801cdcc:	d10a      	bne.n	801cde4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801cdce:	45c1      	cmp	r9, r8
 801cdd0:	bf38      	it	cc
 801cdd2:	46c1      	movcc	r9, r8
 801cdd4:	f04f 0800 	mov.w	r8, #0
 801cdd8:	2c00      	cmp	r4, #0
 801cdda:	d1e5      	bne.n	801cda8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801cddc:	4648      	mov	r0, r9
 801cdde:	b01d      	add	sp, #116	; 0x74
 801cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cde4:	9a02      	ldr	r2, [sp, #8]
 801cde6:	2a00      	cmp	r2, #0
 801cde8:	d0de      	beq.n	801cda8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801cdea:	7b57      	ldrb	r7, [r2, #13]
 801cdec:	6833      	ldr	r3, [r6, #0]
 801cdee:	8894      	ldrh	r4, [r2, #4]
 801cdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cdf2:	007f      	lsls	r7, r7, #1
 801cdf4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801cdf8:	7a97      	ldrb	r7, [r2, #10]
 801cdfa:	4629      	mov	r1, r5
 801cdfc:	4307      	orrs	r7, r0
 801cdfe:	4630      	mov	r0, r6
 801ce00:	4798      	blx	r3
 801ce02:	4438      	add	r0, r7
 801ce04:	4480      	add	r8, r0
 801ce06:	fa1f f888 	uxth.w	r8, r8
 801ce0a:	e7e5      	b.n	801cdd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ce0c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ce0c:	b508      	push	{r3, lr}
 801ce0e:	6803      	ldr	r3, [r0, #0]
 801ce10:	68db      	ldr	r3, [r3, #12]
 801ce12:	4798      	blx	r3
 801ce14:	b128      	cbz	r0, 801ce22 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ce16:	7b43      	ldrb	r3, [r0, #13]
 801ce18:	7a80      	ldrb	r0, [r0, #10]
 801ce1a:	005b      	lsls	r3, r3, #1
 801ce1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce20:	4318      	orrs	r0, r3
 801ce22:	bd08      	pop	{r3, pc}

0801ce24 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ce24:	b40e      	push	{r1, r2, r3}
 801ce26:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce28:	b09e      	sub	sp, #120	; 0x78
 801ce2a:	ab23      	add	r3, sp, #140	; 0x8c
 801ce2c:	4605      	mov	r5, r0
 801ce2e:	f853 4b04 	ldr.w	r4, [r3], #4
 801ce32:	9303      	str	r3, [sp, #12]
 801ce34:	a805      	add	r0, sp, #20
 801ce36:	f000 fdde 	bl	801d9f6 <_ZN8touchgfx12TextProviderC1Ev>
 801ce3a:	682b      	ldr	r3, [r5, #0]
 801ce3c:	4628      	mov	r0, r5
 801ce3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce40:	4798      	blx	r3
 801ce42:	682b      	ldr	r3, [r5, #0]
 801ce44:	4606      	mov	r6, r0
 801ce46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ce48:	4628      	mov	r0, r5
 801ce4a:	4798      	blx	r3
 801ce4c:	4633      	mov	r3, r6
 801ce4e:	ae1e      	add	r6, sp, #120	; 0x78
 801ce50:	4621      	mov	r1, r4
 801ce52:	9000      	str	r0, [sp, #0]
 801ce54:	9a03      	ldr	r2, [sp, #12]
 801ce56:	2400      	movs	r4, #0
 801ce58:	a805      	add	r0, sp, #20
 801ce5a:	f000 fe1f 	bl	801da9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ce5e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ce62:	462a      	mov	r2, r5
 801ce64:	4633      	mov	r3, r6
 801ce66:	4621      	mov	r1, r4
 801ce68:	a805      	add	r0, sp, #20
 801ce6a:	f001 f917 	bl	801e09c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ce6e:	b1f0      	cbz	r0, 801ceae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801ce70:	280a      	cmp	r0, #10
 801ce72:	d018      	beq.n	801cea6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801ce74:	9f04      	ldr	r7, [sp, #16]
 801ce76:	b1b7      	cbz	r7, 801cea6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801ce78:	7b78      	ldrb	r0, [r7, #13]
 801ce7a:	7a3b      	ldrb	r3, [r7, #8]
 801ce7c:	88aa      	ldrh	r2, [r5, #4]
 801ce7e:	00c1      	lsls	r1, r0, #3
 801ce80:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ce84:	4319      	orrs	r1, r3
 801ce86:	0643      	lsls	r3, r0, #25
 801ce88:	bf44      	itt	mi
 801ce8a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801ce8e:	b219      	sxthmi	r1, r3
 801ce90:	0100      	lsls	r0, r0, #4
 801ce92:	79fb      	ldrb	r3, [r7, #7]
 801ce94:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ce98:	4303      	orrs	r3, r0
 801ce9a:	4413      	add	r3, r2
 801ce9c:	1a5b      	subs	r3, r3, r1
 801ce9e:	b29b      	uxth	r3, r3
 801cea0:	42a3      	cmp	r3, r4
 801cea2:	bfc8      	it	gt
 801cea4:	b21c      	sxthgt	r4, r3
 801cea6:	4633      	mov	r3, r6
 801cea8:	462a      	mov	r2, r5
 801ceaa:	2100      	movs	r1, #0
 801ceac:	e7dc      	b.n	801ce68 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801ceae:	b2a0      	uxth	r0, r4
 801ceb0:	b01e      	add	sp, #120	; 0x78
 801ceb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ceb6:	b003      	add	sp, #12
 801ceb8:	4770      	bx	lr

0801ceba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ceba:	b40e      	push	{r1, r2, r3}
 801cebc:	b570      	push	{r4, r5, r6, lr}
 801cebe:	b09d      	sub	sp, #116	; 0x74
 801cec0:	ab21      	add	r3, sp, #132	; 0x84
 801cec2:	4604      	mov	r4, r0
 801cec4:	f853 5b04 	ldr.w	r5, [r3], #4
 801cec8:	9302      	str	r3, [sp, #8]
 801ceca:	a803      	add	r0, sp, #12
 801cecc:	f000 fd93 	bl	801d9f6 <_ZN8touchgfx12TextProviderC1Ev>
 801ced0:	6823      	ldr	r3, [r4, #0]
 801ced2:	4620      	mov	r0, r4
 801ced4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ced6:	4798      	blx	r3
 801ced8:	6823      	ldr	r3, [r4, #0]
 801ceda:	4606      	mov	r6, r0
 801cedc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cede:	4620      	mov	r0, r4
 801cee0:	4798      	blx	r3
 801cee2:	4633      	mov	r3, r6
 801cee4:	9000      	str	r0, [sp, #0]
 801cee6:	9a02      	ldr	r2, [sp, #8]
 801cee8:	4629      	mov	r1, r5
 801ceea:	a803      	add	r0, sp, #12
 801ceec:	f000 fdd6 	bl	801da9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cef0:	a803      	add	r0, sp, #12
 801cef2:	f001 f9cd 	bl	801e290 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cef6:	2401      	movs	r4, #1
 801cef8:	b2a3      	uxth	r3, r4
 801cefa:	b140      	cbz	r0, 801cf0e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801cefc:	280a      	cmp	r0, #10
 801cefe:	bf08      	it	eq
 801cf00:	3301      	addeq	r3, #1
 801cf02:	a803      	add	r0, sp, #12
 801cf04:	bf08      	it	eq
 801cf06:	b21c      	sxtheq	r4, r3
 801cf08:	f001 f9c2 	bl	801e290 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cf0c:	e7f4      	b.n	801cef8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cf0e:	4618      	mov	r0, r3
 801cf10:	b01d      	add	sp, #116	; 0x74
 801cf12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cf16:	b003      	add	sp, #12
 801cf18:	4770      	bx	lr

0801cf1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cf1a:	b40e      	push	{r1, r2, r3}
 801cf1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf1e:	b09e      	sub	sp, #120	; 0x78
 801cf20:	ab23      	add	r3, sp, #140	; 0x8c
 801cf22:	4604      	mov	r4, r0
 801cf24:	f853 5b04 	ldr.w	r5, [r3], #4
 801cf28:	9303      	str	r3, [sp, #12]
 801cf2a:	a805      	add	r0, sp, #20
 801cf2c:	f000 fd63 	bl	801d9f6 <_ZN8touchgfx12TextProviderC1Ev>
 801cf30:	6823      	ldr	r3, [r4, #0]
 801cf32:	4620      	mov	r0, r4
 801cf34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf36:	4798      	blx	r3
 801cf38:	6823      	ldr	r3, [r4, #0]
 801cf3a:	4606      	mov	r6, r0
 801cf3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf3e:	4620      	mov	r0, r4
 801cf40:	4798      	blx	r3
 801cf42:	4633      	mov	r3, r6
 801cf44:	4629      	mov	r1, r5
 801cf46:	9000      	str	r0, [sp, #0]
 801cf48:	9a03      	ldr	r2, [sp, #12]
 801cf4a:	a805      	add	r0, sp, #20
 801cf4c:	ad1e      	add	r5, sp, #120	; 0x78
 801cf4e:	f000 fda5 	bl	801da9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cf52:	2100      	movs	r1, #0
 801cf54:	f845 1d68 	str.w	r1, [r5, #-104]!
 801cf58:	4622      	mov	r2, r4
 801cf5a:	462b      	mov	r3, r5
 801cf5c:	a805      	add	r0, sp, #20
 801cf5e:	f001 f89d 	bl	801e09c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cf62:	26ff      	movs	r6, #255	; 0xff
 801cf64:	b1d8      	cbz	r0, 801cf9e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801cf66:	280a      	cmp	r0, #10
 801cf68:	d012      	beq.n	801cf90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cf6a:	9804      	ldr	r0, [sp, #16]
 801cf6c:	b180      	cbz	r0, 801cf90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cf6e:	7b47      	ldrb	r7, [r0, #13]
 801cf70:	7922      	ldrb	r2, [r4, #4]
 801cf72:	00fb      	lsls	r3, r7, #3
 801cf74:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cf78:	7a03      	ldrb	r3, [r0, #8]
 801cf7a:	430b      	orrs	r3, r1
 801cf7c:	0679      	lsls	r1, r7, #25
 801cf7e:	bf44      	itt	mi
 801cf80:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cf84:	b21b      	sxthmi	r3, r3
 801cf86:	1ad3      	subs	r3, r2, r3
 801cf88:	b2db      	uxtb	r3, r3
 801cf8a:	429e      	cmp	r6, r3
 801cf8c:	bf28      	it	cs
 801cf8e:	461e      	movcs	r6, r3
 801cf90:	462b      	mov	r3, r5
 801cf92:	4622      	mov	r2, r4
 801cf94:	2100      	movs	r1, #0
 801cf96:	a805      	add	r0, sp, #20
 801cf98:	f001 f880 	bl	801e09c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cf9c:	e7e2      	b.n	801cf64 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801cf9e:	4630      	mov	r0, r6
 801cfa0:	b01e      	add	sp, #120	; 0x78
 801cfa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cfa6:	b003      	add	sp, #12
 801cfa8:	4770      	bx	lr

0801cfaa <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cfaa:	b513      	push	{r0, r1, r4, lr}
 801cfac:	6803      	ldr	r3, [r0, #0]
 801cfae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cfb2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cfb6:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cfba:	2400      	movs	r4, #0
 801cfbc:	9400      	str	r4, [sp, #0]
 801cfbe:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cfc2:	691b      	ldr	r3, [r3, #16]
 801cfc4:	4669      	mov	r1, sp
 801cfc6:	4798      	blx	r3
 801cfc8:	b002      	add	sp, #8
 801cfca:	bd10      	pop	{r4, pc}

0801cfcc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cfcc:	b538      	push	{r3, r4, r5, lr}
 801cfce:	680b      	ldr	r3, [r1, #0]
 801cfd0:	460c      	mov	r4, r1
 801cfd2:	68db      	ldr	r3, [r3, #12]
 801cfd4:	4605      	mov	r5, r0
 801cfd6:	4798      	blx	r3
 801cfd8:	6823      	ldr	r3, [r4, #0]
 801cfda:	4620      	mov	r0, r4
 801cfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfde:	4629      	mov	r1, r5
 801cfe0:	4798      	blx	r3
 801cfe2:	4628      	mov	r0, r5
 801cfe4:	bd38      	pop	{r3, r4, r5, pc}

0801cfe6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801cfe6:	b410      	push	{r4}
 801cfe8:	880a      	ldrh	r2, [r1, #0]
 801cfea:	8884      	ldrh	r4, [r0, #4]
 801cfec:	4422      	add	r2, r4
 801cfee:	800a      	strh	r2, [r1, #0]
 801cff0:	88c4      	ldrh	r4, [r0, #6]
 801cff2:	884a      	ldrh	r2, [r1, #2]
 801cff4:	4422      	add	r2, r4
 801cff6:	804a      	strh	r2, [r1, #2]
 801cff8:	6940      	ldr	r0, [r0, #20]
 801cffa:	b120      	cbz	r0, 801d006 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801cffc:	6803      	ldr	r3, [r0, #0]
 801cffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d004:	4718      	bx	r3
 801d006:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d00a:	4770      	bx	lr

0801d00c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801d00c:	b570      	push	{r4, r5, r6, lr}
 801d00e:	8882      	ldrh	r2, [r0, #4]
 801d010:	880b      	ldrh	r3, [r1, #0]
 801d012:	4413      	add	r3, r2
 801d014:	800b      	strh	r3, [r1, #0]
 801d016:	88c2      	ldrh	r2, [r0, #6]
 801d018:	884b      	ldrh	r3, [r1, #2]
 801d01a:	460c      	mov	r4, r1
 801d01c:	4413      	add	r3, r2
 801d01e:	804b      	strh	r3, [r1, #2]
 801d020:	4605      	mov	r5, r0
 801d022:	1d01      	adds	r1, r0, #4
 801d024:	4620      	mov	r0, r4
 801d026:	f7fa fa27 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801d02a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d02e:	2b00      	cmp	r3, #0
 801d030:	dd0b      	ble.n	801d04a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d032:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d036:	2b00      	cmp	r3, #0
 801d038:	dd07      	ble.n	801d04a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d03a:	6968      	ldr	r0, [r5, #20]
 801d03c:	b128      	cbz	r0, 801d04a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801d03e:	6803      	ldr	r3, [r0, #0]
 801d040:	4621      	mov	r1, r4
 801d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d048:	4718      	bx	r3
 801d04a:	bd70      	pop	{r4, r5, r6, pc}

0801d04c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801d04c:	b570      	push	{r4, r5, r6, lr}
 801d04e:	8882      	ldrh	r2, [r0, #4]
 801d050:	880b      	ldrh	r3, [r1, #0]
 801d052:	4413      	add	r3, r2
 801d054:	800b      	strh	r3, [r1, #0]
 801d056:	88c2      	ldrh	r2, [r0, #6]
 801d058:	884b      	ldrh	r3, [r1, #2]
 801d05a:	460c      	mov	r4, r1
 801d05c:	4413      	add	r3, r2
 801d05e:	804b      	strh	r3, [r1, #2]
 801d060:	4605      	mov	r5, r0
 801d062:	1d01      	adds	r1, r0, #4
 801d064:	4620      	mov	r0, r4
 801d066:	f7fa fa07 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801d06a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d06e:	2b00      	cmp	r3, #0
 801d070:	dd15      	ble.n	801d09e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d072:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d076:	2b00      	cmp	r3, #0
 801d078:	dd11      	ble.n	801d09e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d07a:	6968      	ldr	r0, [r5, #20]
 801d07c:	b128      	cbz	r0, 801d08a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801d07e:	6803      	ldr	r3, [r0, #0]
 801d080:	691b      	ldr	r3, [r3, #16]
 801d082:	4621      	mov	r1, r4
 801d084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d088:	4718      	bx	r3
 801d08a:	4b05      	ldr	r3, [pc, #20]	; (801d0a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	3304      	adds	r3, #4
 801d090:	429d      	cmp	r5, r3
 801d092:	d104      	bne.n	801d09e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801d094:	f7fe ffbe 	bl	801c014 <_ZN8touchgfx11Application11getInstanceEv>
 801d098:	6803      	ldr	r3, [r0, #0]
 801d09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d09c:	e7f1      	b.n	801d082 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801d09e:	bd70      	pop	{r4, r5, r6, pc}
 801d0a0:	200097e4 	.word	0x200097e4

0801d0a4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801d0a4:	b570      	push	{r4, r5, r6, lr}
 801d0a6:	4604      	mov	r4, r0
 801d0a8:	4616      	mov	r6, r2
 801d0aa:	460d      	mov	r5, r1
 801d0ac:	b901      	cbnz	r1, 801d0b0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801d0ae:	b192      	cbz	r2, 801d0d6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801d0b0:	6823      	ldr	r3, [r4, #0]
 801d0b2:	4620      	mov	r0, r4
 801d0b4:	695b      	ldr	r3, [r3, #20]
 801d0b6:	4798      	blx	r3
 801d0b8:	88e2      	ldrh	r2, [r4, #6]
 801d0ba:	88a1      	ldrh	r1, [r4, #4]
 801d0bc:	4432      	add	r2, r6
 801d0be:	4429      	add	r1, r5
 801d0c0:	4620      	mov	r0, r4
 801d0c2:	b212      	sxth	r2, r2
 801d0c4:	b209      	sxth	r1, r1
 801d0c6:	f7f3 fc65 	bl	8010994 <_ZN8touchgfx8Drawable5setXYEss>
 801d0ca:	6823      	ldr	r3, [r4, #0]
 801d0cc:	4620      	mov	r0, r4
 801d0ce:	695b      	ldr	r3, [r3, #20]
 801d0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0d4:	4718      	bx	r3
 801d0d6:	bd70      	pop	{r4, r5, r6, pc}

0801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801d0d8:	b510      	push	{r4, lr}
 801d0da:	4604      	mov	r4, r0
 801d0dc:	4608      	mov	r0, r1
 801d0de:	2300      	movs	r3, #0
 801d0e0:	8023      	strh	r3, [r4, #0]
 801d0e2:	8063      	strh	r3, [r4, #2]
 801d0e4:	6803      	ldr	r3, [r0, #0]
 801d0e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d0ea:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801d0ee:	80a1      	strh	r1, [r4, #4]
 801d0f0:	80e2      	strh	r2, [r4, #6]
 801d0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0f4:	4621      	mov	r1, r4
 801d0f6:	4798      	blx	r3
 801d0f8:	4620      	mov	r0, r4
 801d0fa:	bd10      	pop	{r4, pc}

0801d0fc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801d0fc:	b530      	push	{r4, r5, lr}
 801d0fe:	8083      	strh	r3, [r0, #4]
 801d100:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801d104:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801d108:	7183      	strb	r3, [r0, #6]
 801d10a:	79c3      	ldrb	r3, [r0, #7]
 801d10c:	6101      	str	r1, [r0, #16]
 801d10e:	f365 0306 	bfi	r3, r5, #0, #7
 801d112:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801d116:	8282      	strh	r2, [r0, #20]
 801d118:	f365 13c7 	bfi	r3, r5, #7, #1
 801d11c:	71c3      	strb	r3, [r0, #7]
 801d11e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801d122:	7203      	strb	r3, [r0, #8]
 801d124:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801d128:	7243      	strb	r3, [r0, #9]
 801d12a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d12e:	8143      	strh	r3, [r0, #10]
 801d130:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d134:	8183      	strh	r3, [r0, #12]
 801d136:	4b01      	ldr	r3, [pc, #4]	; (801d13c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801d138:	6003      	str	r3, [r0, #0]
 801d13a:	bd30      	pop	{r4, r5, pc}
 801d13c:	08031f58 	.word	0x08031f58

0801d140 <_ZNK8touchgfx9ConstFont4findEt>:
 801d140:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d142:	6904      	ldr	r4, [r0, #16]
 801d144:	b3bc      	cbz	r4, 801d1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d146:	88a3      	ldrh	r3, [r4, #4]
 801d148:	8a82      	ldrh	r2, [r0, #20]
 801d14a:	1acb      	subs	r3, r1, r3
 801d14c:	f102 32ff 	add.w	r2, r2, #4294967295
 801d150:	d431      	bmi.n	801d1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d152:	4293      	cmp	r3, r2
 801d154:	dd0c      	ble.n	801d170 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801d156:	230e      	movs	r3, #14
 801d158:	fb03 4302 	mla	r3, r3, r2, r4
 801d15c:	889b      	ldrh	r3, [r3, #4]
 801d15e:	1a5b      	subs	r3, r3, r1
 801d160:	1ad3      	subs	r3, r2, r3
 801d162:	429a      	cmp	r2, r3
 801d164:	db27      	blt.n	801d1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d166:	2b00      	cmp	r3, #0
 801d168:	bfbc      	itt	lt
 801d16a:	2302      	movlt	r3, #2
 801d16c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801d170:	2500      	movs	r5, #0
 801d172:	260e      	movs	r6, #14
 801d174:	4295      	cmp	r5, r2
 801d176:	dc1e      	bgt.n	801d1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d178:	fb06 4003 	mla	r0, r6, r3, r4
 801d17c:	8887      	ldrh	r7, [r0, #4]
 801d17e:	42b9      	cmp	r1, r7
 801d180:	d01a      	beq.n	801d1b8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801d182:	d20d      	bcs.n	801d1a0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801d184:	1e5a      	subs	r2, r3, #1
 801d186:	4295      	cmp	r5, r2
 801d188:	dc15      	bgt.n	801d1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d18a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801d18e:	1a5b      	subs	r3, r3, r1
 801d190:	1ad3      	subs	r3, r2, r3
 801d192:	429a      	cmp	r2, r3
 801d194:	db0f      	blt.n	801d1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d196:	429d      	cmp	r5, r3
 801d198:	ddec      	ble.n	801d174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d19a:	1953      	adds	r3, r2, r5
 801d19c:	105b      	asrs	r3, r3, #1
 801d19e:	e7e9      	b.n	801d174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d1a0:	1c5d      	adds	r5, r3, #1
 801d1a2:	42aa      	cmp	r2, r5
 801d1a4:	db07      	blt.n	801d1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1a6:	8a43      	ldrh	r3, [r0, #18]
 801d1a8:	1acb      	subs	r3, r1, r3
 801d1aa:	442b      	add	r3, r5
 801d1ac:	429d      	cmp	r5, r3
 801d1ae:	dc02      	bgt.n	801d1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801d1b0:	429a      	cmp	r2, r3
 801d1b2:	dadf      	bge.n	801d174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801d1b4:	e7f1      	b.n	801d19a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801d1b6:	2000      	movs	r0, #0
 801d1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d1ba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801d1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1bc:	4604      	mov	r4, r0
 801d1be:	4617      	mov	r7, r2
 801d1c0:	461e      	mov	r6, r3
 801d1c2:	b911      	cbnz	r1, 801d1ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801d1c4:	2500      	movs	r5, #0
 801d1c6:	4628      	mov	r0, r5
 801d1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1ca:	290a      	cmp	r1, #10
 801d1cc:	d0fa      	beq.n	801d1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d1ce:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801d1d2:	4291      	cmp	r1, r2
 801d1d4:	d0f6      	beq.n	801d1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d1d6:	f242 020b 	movw	r2, #8203	; 0x200b
 801d1da:	4291      	cmp	r1, r2
 801d1dc:	d0f2      	beq.n	801d1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d1de:	f7ff ffaf 	bl	801d140 <_ZNK8touchgfx9ConstFont4findEt>
 801d1e2:	4605      	mov	r5, r0
 801d1e4:	b950      	cbnz	r0, 801d1fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801d1e6:	6823      	ldr	r3, [r4, #0]
 801d1e8:	4620      	mov	r0, r4
 801d1ea:	691b      	ldr	r3, [r3, #16]
 801d1ec:	4798      	blx	r3
 801d1ee:	4601      	mov	r1, r0
 801d1f0:	4620      	mov	r0, r4
 801d1f2:	f7ff ffa5 	bl	801d140 <_ZNK8touchgfx9ConstFont4findEt>
 801d1f6:	4605      	mov	r5, r0
 801d1f8:	2800      	cmp	r0, #0
 801d1fa:	d0e3      	beq.n	801d1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801d1fc:	6823      	ldr	r3, [r4, #0]
 801d1fe:	4629      	mov	r1, r5
 801d200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d202:	4620      	mov	r0, r4
 801d204:	4798      	blx	r3
 801d206:	6038      	str	r0, [r7, #0]
 801d208:	6823      	ldr	r3, [r4, #0]
 801d20a:	4620      	mov	r0, r4
 801d20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d20e:	4798      	blx	r3
 801d210:	7030      	strb	r0, [r6, #0]
 801d212:	e7d8      	b.n	801d1c6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801d214 <_ZN8touchgfx6memsetEPvhm>:
 801d214:	4402      	add	r2, r0
 801d216:	4290      	cmp	r0, r2
 801d218:	d002      	beq.n	801d220 <_ZN8touchgfx6memsetEPvhm+0xc>
 801d21a:	f800 1b01 	strb.w	r1, [r0], #1
 801d21e:	e7fa      	b.n	801d216 <_ZN8touchgfx6memsetEPvhm+0x2>
 801d220:	4770      	bx	lr

0801d222 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801d222:	b538      	push	{r3, r4, r5, lr}
 801d224:	4605      	mov	r5, r0
 801d226:	f002 fc8d 	bl	801fb44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d22a:	4604      	mov	r4, r0
 801d22c:	4628      	mov	r0, r5
 801d22e:	f002 fbc5 	bl	801f9bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d232:	2800      	cmp	r0, #0
 801d234:	bf14      	ite	ne
 801d236:	2002      	movne	r0, #2
 801d238:	2000      	moveq	r0, #0
 801d23a:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801d23e:	b280      	uxth	r0, r0
 801d240:	bd38      	pop	{r3, r4, r5, pc}

0801d242 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801d242:	b538      	push	{r3, r4, r5, lr}
 801d244:	4605      	mov	r5, r0
 801d246:	f002 fc7d 	bl	801fb44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d24a:	4604      	mov	r4, r0
 801d24c:	4628      	mov	r0, r5
 801d24e:	f002 fbb5 	bl	801f9bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d252:	2800      	cmp	r0, #0
 801d254:	bf14      	ite	ne
 801d256:	2002      	movne	r0, #2
 801d258:	2000      	moveq	r0, #0
 801d25a:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801d25e:	f040 0001 	orr.w	r0, r0, #1
 801d262:	b280      	uxth	r0, r0
 801d264:	bd38      	pop	{r3, r4, r5, pc}

0801d266 <_ZN8touchgfx4clzuEm>:
 801d266:	4603      	mov	r3, r0
 801d268:	b1c8      	cbz	r0, 801d29e <_ZN8touchgfx4clzuEm+0x38>
 801d26a:	0c02      	lsrs	r2, r0, #16
 801d26c:	0412      	lsls	r2, r2, #16
 801d26e:	b9a2      	cbnz	r2, 801d29a <_ZN8touchgfx4clzuEm+0x34>
 801d270:	0403      	lsls	r3, r0, #16
 801d272:	2010      	movs	r0, #16
 801d274:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d278:	bf04      	itt	eq
 801d27a:	021b      	lsleq	r3, r3, #8
 801d27c:	3008      	addeq	r0, #8
 801d27e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d282:	bf04      	itt	eq
 801d284:	011b      	lsleq	r3, r3, #4
 801d286:	3004      	addeq	r0, #4
 801d288:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d28c:	bf04      	itt	eq
 801d28e:	009b      	lsleq	r3, r3, #2
 801d290:	3002      	addeq	r0, #2
 801d292:	2b00      	cmp	r3, #0
 801d294:	db04      	blt.n	801d2a0 <_ZN8touchgfx4clzuEm+0x3a>
 801d296:	3001      	adds	r0, #1
 801d298:	4770      	bx	lr
 801d29a:	2000      	movs	r0, #0
 801d29c:	e7ea      	b.n	801d274 <_ZN8touchgfx4clzuEm+0xe>
 801d29e:	2020      	movs	r0, #32
 801d2a0:	4770      	bx	lr

0801d2a2 <_ZN8touchgfx7muldivuEmmmRm>:
 801d2a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2a6:	4680      	mov	r8, r0
 801d2a8:	460f      	mov	r7, r1
 801d2aa:	4615      	mov	r5, r2
 801d2ac:	461e      	mov	r6, r3
 801d2ae:	f7ff ffda 	bl	801d266 <_ZN8touchgfx4clzuEm>
 801d2b2:	b998      	cbnz	r0, 801d2dc <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801d2b4:	4608      	mov	r0, r1
 801d2b6:	f7ff ffd6 	bl	801d266 <_ZN8touchgfx4clzuEm>
 801d2ba:	2800      	cmp	r0, #0
 801d2bc:	dd08      	ble.n	801d2d0 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801d2be:	4633      	mov	r3, r6
 801d2c0:	462a      	mov	r2, r5
 801d2c2:	4641      	mov	r1, r8
 801d2c4:	4638      	mov	r0, r7
 801d2c6:	f7ff ffec 	bl	801d2a2 <_ZN8touchgfx7muldivuEmmmRm>
 801d2ca:	b003      	add	sp, #12
 801d2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2d0:	f04f 33ff 	mov.w	r3, #4294967295
 801d2d4:	6033      	str	r3, [r6, #0]
 801d2d6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801d2da:	e7f6      	b.n	801d2ca <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d2dc:	fa31 f900 	lsrs.w	r9, r1, r0
 801d2e0:	fb01 f308 	mul.w	r3, r1, r8
 801d2e4:	d105      	bne.n	801d2f2 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801d2e6:	fbb3 f0f5 	udiv	r0, r3, r5
 801d2ea:	fb05 3510 	mls	r5, r5, r0, r3
 801d2ee:	6035      	str	r5, [r6, #0]
 801d2f0:	e7eb      	b.n	801d2ca <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801d2f2:	2301      	movs	r3, #1
 801d2f4:	fa08 fb00 	lsl.w	fp, r8, r0
 801d2f8:	fa03 f000 	lsl.w	r0, r3, r0
 801d2fc:	3801      	subs	r0, #1
 801d2fe:	462a      	mov	r2, r5
 801d300:	4633      	mov	r3, r6
 801d302:	4641      	mov	r1, r8
 801d304:	4038      	ands	r0, r7
 801d306:	f7ff ffcc 	bl	801d2a2 <_ZN8touchgfx7muldivuEmmmRm>
 801d30a:	fbbb faf5 	udiv	sl, fp, r5
 801d30e:	462a      	mov	r2, r5
 801d310:	4607      	mov	r7, r0
 801d312:	ab01      	add	r3, sp, #4
 801d314:	fb05 b11a 	mls	r1, r5, sl, fp
 801d318:	4648      	mov	r0, r9
 801d31a:	f7ff ffc2 	bl	801d2a2 <_ZN8touchgfx7muldivuEmmmRm>
 801d31e:	9b01      	ldr	r3, [sp, #4]
 801d320:	6832      	ldr	r2, [r6, #0]
 801d322:	fb09 f40a 	mul.w	r4, r9, sl
 801d326:	441a      	add	r2, r3
 801d328:	fbb2 f3f5 	udiv	r3, r2, r5
 801d32c:	441c      	add	r4, r3
 801d32e:	443c      	add	r4, r7
 801d330:	4420      	add	r0, r4
 801d332:	fb05 2513 	mls	r5, r5, r3, r2
 801d336:	e7da      	b.n	801d2ee <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801d338 <_ZN8touchgfx6muldivElllRl>:
 801d338:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d33a:	2800      	cmp	r0, #0
 801d33c:	bfba      	itte	lt
 801d33e:	4240      	neglt	r0, r0
 801d340:	f04f 34ff 	movlt.w	r4, #4294967295
 801d344:	2401      	movge	r4, #1
 801d346:	2900      	cmp	r1, #0
 801d348:	bfbc      	itt	lt
 801d34a:	4249      	neglt	r1, r1
 801d34c:	4264      	neglt	r4, r4
 801d34e:	2a00      	cmp	r2, #0
 801d350:	bfb6      	itet	lt
 801d352:	4265      	neglt	r5, r4
 801d354:	4625      	movge	r5, r4
 801d356:	4252      	neglt	r2, r2
 801d358:	4288      	cmp	r0, r1
 801d35a:	461e      	mov	r6, r3
 801d35c:	bfc2      	ittt	gt
 801d35e:	4603      	movgt	r3, r0
 801d360:	4608      	movgt	r0, r1
 801d362:	4619      	movgt	r1, r3
 801d364:	ab01      	add	r3, sp, #4
 801d366:	f7ff ff9c 	bl	801d2a2 <_ZN8touchgfx7muldivuEmmmRm>
 801d36a:	9b01      	ldr	r3, [sp, #4]
 801d36c:	4368      	muls	r0, r5
 801d36e:	435c      	muls	r4, r3
 801d370:	6034      	str	r4, [r6, #0]
 801d372:	b002      	add	sp, #8
 801d374:	bd70      	pop	{r4, r5, r6, pc}

0801d376 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801d376:	2000      	movs	r0, #0
 801d378:	4770      	bx	lr

0801d37a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801d37a:	2001      	movs	r0, #1
 801d37c:	4770      	bx	lr

0801d37e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801d37e:	2002      	movs	r0, #2
 801d380:	4770      	bx	lr

0801d382 <_ZN8touchgfx12GestureEventD1Ev>:
 801d382:	4770      	bx	lr

0801d384 <_ZN8touchgfx9DragEventD1Ev>:
 801d384:	4770      	bx	lr

0801d386 <_ZN8touchgfx10ClickEventD1Ev>:
 801d386:	4770      	bx	lr

0801d388 <_ZN8touchgfx10ClickEventD0Ev>:
 801d388:	b510      	push	{r4, lr}
 801d38a:	210c      	movs	r1, #12
 801d38c:	4604      	mov	r4, r0
 801d38e:	f00f ff40 	bl	802d212 <_ZdlPvj>
 801d392:	4620      	mov	r0, r4
 801d394:	bd10      	pop	{r4, pc}

0801d396 <_ZN8touchgfx9DragEventD0Ev>:
 801d396:	b510      	push	{r4, lr}
 801d398:	2110      	movs	r1, #16
 801d39a:	4604      	mov	r4, r0
 801d39c:	f00f ff39 	bl	802d212 <_ZdlPvj>
 801d3a0:	4620      	mov	r0, r4
 801d3a2:	bd10      	pop	{r4, pc}

0801d3a4 <_ZN8touchgfx12GestureEventD0Ev>:
 801d3a4:	b510      	push	{r4, lr}
 801d3a6:	210c      	movs	r1, #12
 801d3a8:	4604      	mov	r4, r0
 801d3aa:	f00f ff32 	bl	802d212 <_ZdlPvj>
 801d3ae:	4620      	mov	r0, r4
 801d3b0:	bd10      	pop	{r4, pc}
	...

0801d3b4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801d3b4:	b530      	push	{r4, r5, lr}
 801d3b6:	460d      	mov	r5, r1
 801d3b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d3ba:	b087      	sub	sp, #28
 801d3bc:	4604      	mov	r4, r0
 801d3be:	b301      	cbz	r1, 801d402 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801d3c0:	a801      	add	r0, sp, #4
 801d3c2:	f7ff fe89 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d3c6:	892a      	ldrh	r2, [r5, #8]
 801d3c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d3cc:	7928      	ldrb	r0, [r5, #4]
 801d3ce:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801d3d2:	f88d 0010 	strb.w	r0, [sp, #16]
 801d3d6:	1ad2      	subs	r2, r2, r3
 801d3d8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801d3da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d3dc:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d3e0:	441a      	add	r2, r3
 801d3e2:	896b      	ldrh	r3, [r5, #10]
 801d3e4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d3e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d3ec:	1b5b      	subs	r3, r3, r5
 801d3ee:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801d3f0:	442b      	add	r3, r5
 801d3f2:	4d05      	ldr	r5, [pc, #20]	; (801d408 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d3f4:	9503      	str	r5, [sp, #12]
 801d3f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d3fa:	6803      	ldr	r3, [r0, #0]
 801d3fc:	a903      	add	r1, sp, #12
 801d3fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d400:	4798      	blx	r3
 801d402:	b007      	add	sp, #28
 801d404:	bd30      	pop	{r4, r5, pc}
 801d406:	bf00      	nop
 801d408:	08031fd8 	.word	0x08031fd8

0801d40c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d410:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801d412:	b08a      	sub	sp, #40	; 0x28
 801d414:	4604      	mov	r4, r0
 801d416:	460d      	mov	r5, r1
 801d418:	b113      	cbz	r3, 801d420 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801d41a:	790b      	ldrb	r3, [r1, #4]
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d044      	beq.n	801d4aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d420:	f104 0804 	add.w	r8, r4, #4
 801d424:	4641      	mov	r1, r8
 801d426:	a803      	add	r0, sp, #12
 801d428:	f7ff fe56 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d42c:	792b      	ldrb	r3, [r5, #4]
 801d42e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d432:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801d436:	b983      	cbnz	r3, 801d45a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801d438:	892a      	ldrh	r2, [r5, #8]
 801d43a:	88e9      	ldrh	r1, [r5, #6]
 801d43c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801d440:	1b92      	subs	r2, r2, r6
 801d442:	1bc9      	subs	r1, r1, r7
 801d444:	9301      	str	r3, [sp, #4]
 801d446:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801d44a:	9300      	str	r3, [sp, #0]
 801d44c:	b212      	sxth	r2, r2
 801d44e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d452:	b209      	sxth	r1, r1
 801d454:	4640      	mov	r0, r8
 801d456:	f7f9 ff2b 	bl	80172b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d45a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d45c:	b329      	cbz	r1, 801d4aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d45e:	a805      	add	r0, sp, #20
 801d460:	f7ff fe3a 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d464:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d468:	792b      	ldrb	r3, [r5, #4]
 801d46a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d46c:	f88d 3020 	strb.w	r3, [sp, #32]
 801d470:	1abf      	subs	r7, r7, r2
 801d472:	88ea      	ldrh	r2, [r5, #6]
 801d474:	4417      	add	r7, r2
 801d476:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801d478:	4417      	add	r7, r2
 801d47a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d47e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801d482:	1ab6      	subs	r6, r6, r2
 801d484:	892a      	ldrh	r2, [r5, #8]
 801d486:	4416      	add	r6, r2
 801d488:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d48a:	4416      	add	r6, r2
 801d48c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d490:	4a07      	ldr	r2, [pc, #28]	; (801d4b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d492:	9207      	str	r2, [sp, #28]
 801d494:	2600      	movs	r6, #0
 801d496:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801d49a:	6803      	ldr	r3, [r0, #0]
 801d49c:	a907      	add	r1, sp, #28
 801d49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4a0:	4798      	blx	r3
 801d4a2:	792b      	ldrb	r3, [r5, #4]
 801d4a4:	b10b      	cbz	r3, 801d4aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d4a6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d4aa:	b00a      	add	sp, #40	; 0x28
 801d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d4b0:	08031fb0 	.word	0x08031fb0

0801d4b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4b8:	460c      	mov	r4, r1
 801d4ba:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d4bc:	b088      	sub	sp, #32
 801d4be:	4605      	mov	r5, r0
 801d4c0:	2900      	cmp	r1, #0
 801d4c2:	d06d      	beq.n	801d5a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d4c4:	4668      	mov	r0, sp
 801d4c6:	f7ff fe07 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d4ca:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801d4cc:	88e3      	ldrh	r3, [r4, #6]
 801d4ce:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d4d2:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d4d6:	440b      	add	r3, r1
 801d4d8:	b21b      	sxth	r3, r3
 801d4da:	4543      	cmp	r3, r8
 801d4dc:	db31      	blt.n	801d542 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d4de:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d4e2:	44c4      	add	ip, r8
 801d4e4:	fa0f fc8c 	sxth.w	ip, ip
 801d4e8:	4563      	cmp	r3, ip
 801d4ea:	da2a      	bge.n	801d542 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d4ec:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801d4ee:	8926      	ldrh	r6, [r4, #8]
 801d4f0:	4416      	add	r6, r2
 801d4f2:	b236      	sxth	r6, r6
 801d4f4:	42be      	cmp	r6, r7
 801d4f6:	db24      	blt.n	801d542 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d4f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d4fc:	4438      	add	r0, r7
 801d4fe:	b200      	sxth	r0, r0
 801d500:	4286      	cmp	r6, r0
 801d502:	da1e      	bge.n	801d542 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d504:	8963      	ldrh	r3, [r4, #10]
 801d506:	4419      	add	r1, r3
 801d508:	b209      	sxth	r1, r1
 801d50a:	4541      	cmp	r1, r8
 801d50c:	db08      	blt.n	801d520 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d50e:	4561      	cmp	r1, ip
 801d510:	da06      	bge.n	801d520 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d512:	89a3      	ldrh	r3, [r4, #12]
 801d514:	441a      	add	r2, r3
 801d516:	b212      	sxth	r2, r2
 801d518:	42ba      	cmp	r2, r7
 801d51a:	db01      	blt.n	801d520 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d51c:	4282      	cmp	r2, r0
 801d51e:	db10      	blt.n	801d542 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d520:	4b21      	ldr	r3, [pc, #132]	; (801d5a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d522:	9304      	str	r3, [sp, #16]
 801d524:	2302      	movs	r3, #2
 801d526:	f88d 3014 	strb.w	r3, [sp, #20]
 801d52a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d52c:	2300      	movs	r3, #0
 801d52e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d532:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d536:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d53a:	6803      	ldr	r3, [r0, #0]
 801d53c:	a904      	add	r1, sp, #16
 801d53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d540:	4798      	blx	r3
 801d542:	1d29      	adds	r1, r5, #4
 801d544:	a802      	add	r0, sp, #8
 801d546:	f7ff fdc7 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d54a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d54e:	88e0      	ldrh	r0, [r4, #6]
 801d550:	7921      	ldrb	r1, [r4, #4]
 801d552:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d556:	8922      	ldrh	r2, [r4, #8]
 801d558:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d55a:	f88d 1014 	strb.w	r1, [sp, #20]
 801d55e:	eba3 0808 	sub.w	r8, r3, r8
 801d562:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d566:	1bdf      	subs	r7, r3, r7
 801d568:	b2bb      	uxth	r3, r7
 801d56a:	fa1f f888 	uxth.w	r8, r8
 801d56e:	8967      	ldrh	r7, [r4, #10]
 801d570:	89a4      	ldrh	r4, [r4, #12]
 801d572:	4440      	add	r0, r8
 801d574:	4460      	add	r0, ip
 801d576:	441a      	add	r2, r3
 801d578:	44b8      	add	r8, r7
 801d57a:	4423      	add	r3, r4
 801d57c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d580:	4433      	add	r3, r6
 801d582:	4432      	add	r2, r6
 801d584:	44e0      	add	r8, ip
 801d586:	4c09      	ldr	r4, [pc, #36]	; (801d5ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d588:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d58a:	9404      	str	r4, [sp, #16]
 801d58c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d590:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d594:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d598:	6803      	ldr	r3, [r0, #0]
 801d59a:	a904      	add	r1, sp, #16
 801d59c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d59e:	4798      	blx	r3
 801d5a0:	b008      	add	sp, #32
 801d5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5a6:	bf00      	nop
 801d5a8:	08031fb0 	.word	0x08031fb0
 801d5ac:	08031fc4 	.word	0x08031fc4

0801d5b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d5b2:	4604      	mov	r4, r0
 801d5b4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d5b8:	3201      	adds	r2, #1
 801d5ba:	d112      	bne.n	801d5e2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d5bc:	6803      	ldr	r3, [r0, #0]
 801d5be:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d5c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d5c6:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d5ca:	2500      	movs	r5, #0
 801d5cc:	9500      	str	r5, [sp, #0]
 801d5ce:	466d      	mov	r5, sp
 801d5d0:	4629      	mov	r1, r5
 801d5d2:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5d8:	4798      	blx	r3
 801d5da:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d5de:	e884 0003 	stmia.w	r4, {r0, r1}
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	b003      	add	sp, #12
 801d5e6:	bd30      	pop	{r4, r5, pc}

0801d5e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d5e8:	b513      	push	{r0, r1, r4, lr}
 801d5ea:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d5ee:	3301      	adds	r3, #1
 801d5f0:	4604      	mov	r4, r0
 801d5f2:	d109      	bne.n	801d608 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d5f4:	4601      	mov	r1, r0
 801d5f6:	4668      	mov	r0, sp
 801d5f8:	f7ff fd6e 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d5fc:	f8bd 3000 	ldrh.w	r3, [sp]
 801d600:	8423      	strh	r3, [r4, #32]
 801d602:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d606:	8463      	strh	r3, [r4, #34]	; 0x22
 801d608:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d60c:	b002      	add	sp, #8
 801d60e:	bd10      	pop	{r4, pc}

0801d610 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d610:	b513      	push	{r0, r1, r4, lr}
 801d612:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d616:	3301      	adds	r3, #1
 801d618:	4604      	mov	r4, r0
 801d61a:	d109      	bne.n	801d630 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d61c:	4601      	mov	r1, r0
 801d61e:	4668      	mov	r0, sp
 801d620:	f7ff fd5a 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d624:	f8bd 3000 	ldrh.w	r3, [sp]
 801d628:	8423      	strh	r3, [r4, #32]
 801d62a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d62e:	8463      	strh	r3, [r4, #34]	; 0x22
 801d630:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d634:	b002      	add	sp, #8
 801d636:	bd10      	pop	{r4, pc}

0801d638 <_ZN8touchgfx6ScreenC1Ev>:
 801d638:	b570      	push	{r4, r5, r6, lr}
 801d63a:	4605      	mov	r5, r0
 801d63c:	4b16      	ldr	r3, [pc, #88]	; (801d698 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d63e:	f845 3b04 	str.w	r3, [r5], #4
 801d642:	2300      	movs	r3, #0
 801d644:	8103      	strh	r3, [r0, #8]
 801d646:	8143      	strh	r3, [r0, #10]
 801d648:	8183      	strh	r3, [r0, #12]
 801d64a:	81c3      	strh	r3, [r0, #14]
 801d64c:	8203      	strh	r3, [r0, #16]
 801d64e:	8243      	strh	r3, [r0, #18]
 801d650:	8283      	strh	r3, [r0, #20]
 801d652:	82c3      	strh	r3, [r0, #22]
 801d654:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d658:	6203      	str	r3, [r0, #32]
 801d65a:	8483      	strh	r3, [r0, #36]	; 0x24
 801d65c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d65e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801d662:	4a0e      	ldr	r2, [pc, #56]	; (801d69c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d664:	6343      	str	r3, [r0, #52]	; 0x34
 801d666:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801d66a:	4b0d      	ldr	r3, [pc, #52]	; (801d6a0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d66c:	6042      	str	r2, [r0, #4]
 801d66e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d672:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801d674:	4a0b      	ldr	r2, [pc, #44]	; (801d6a4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d676:	4604      	mov	r4, r0
 801d678:	2101      	movs	r1, #1
 801d67a:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801d67e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801d682:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d686:	4628      	mov	r0, r5
 801d688:	4798      	blx	r3
 801d68a:	6863      	ldr	r3, [r4, #4]
 801d68c:	4628      	mov	r0, r5
 801d68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d690:	4631      	mov	r1, r6
 801d692:	4798      	blx	r3
 801d694:	4620      	mov	r0, r4
 801d696:	bd70      	pop	{r4, r5, r6, pc}
 801d698:	08031fec 	.word	0x08031fec
 801d69c:	08030a2c 	.word	0x08030a2c
 801d6a0:	2000979e 	.word	0x2000979e
 801d6a4:	2000979c 	.word	0x2000979c

0801d6a8 <_ZN8touchgfx6Screen4drawEv>:
 801d6a8:	b507      	push	{r0, r1, r2, lr}
 801d6aa:	4b09      	ldr	r3, [pc, #36]	; (801d6d0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d6ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d6b0:	4b08      	ldr	r3, [pc, #32]	; (801d6d4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d6b2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d6b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d6ba:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d6be:	6803      	ldr	r3, [r0, #0]
 801d6c0:	2100      	movs	r1, #0
 801d6c2:	9100      	str	r1, [sp, #0]
 801d6c4:	689b      	ldr	r3, [r3, #8]
 801d6c6:	4669      	mov	r1, sp
 801d6c8:	4798      	blx	r3
 801d6ca:	b003      	add	sp, #12
 801d6cc:	f85d fb04 	ldr.w	pc, [sp], #4
 801d6d0:	2000979c 	.word	0x2000979c
 801d6d4:	2000979e 	.word	0x2000979e

0801d6d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	b089      	sub	sp, #36	; 0x24
 801d6e4:	4680      	mov	r8, r0
 801d6e6:	460c      	mov	r4, r1
 801d6e8:	4615      	mov	r5, r2
 801d6ea:	dd0e      	ble.n	801d70a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d6ec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	dd0a      	ble.n	801d70a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d6f4:	4628      	mov	r0, r5
 801d6f6:	f7ff ff5b 	bl	801d5b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d6fa:	4621      	mov	r1, r4
 801d6fc:	f7fb fbd0 	bl	8018ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d700:	69eb      	ldr	r3, [r5, #28]
 801d702:	b928      	cbnz	r0, 801d710 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d704:	461d      	mov	r5, r3
 801d706:	2b00      	cmp	r3, #0
 801d708:	d1f4      	bne.n	801d6f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d70a:	b009      	add	sp, #36	; 0x24
 801d70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d710:	ae04      	add	r6, sp, #16
 801d712:	2b00      	cmp	r3, #0
 801d714:	f000 80b5 	beq.w	801d882 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d718:	682b      	ldr	r3, [r5, #0]
 801d71a:	4629      	mov	r1, r5
 801d71c:	68db      	ldr	r3, [r3, #12]
 801d71e:	a802      	add	r0, sp, #8
 801d720:	4798      	blx	r3
 801d722:	4628      	mov	r0, r5
 801d724:	f7ff ff60 	bl	801d5e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d728:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d72c:	4407      	add	r7, r0
 801d72e:	4628      	mov	r0, r5
 801d730:	f7ff ff6e 	bl	801d610 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d734:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d738:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d73c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d740:	4418      	add	r0, r3
 801d742:	4621      	mov	r1, r4
 801d744:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d748:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d74c:	b23f      	sxth	r7, r7
 801d74e:	4630      	mov	r0, r6
 801d750:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d754:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d758:	f7f9 fe8e 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801d75c:	4628      	mov	r0, r5
 801d75e:	f7ff ff27 	bl	801d5b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d762:	4602      	mov	r2, r0
 801d764:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d768:	ab06      	add	r3, sp, #24
 801d76a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d76e:	4611      	mov	r1, r2
 801d770:	4618      	mov	r0, r3
 801d772:	f7f9 fe81 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801d776:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d77a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d77e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d782:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d786:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d78a:	4299      	cmp	r1, r3
 801d78c:	d10b      	bne.n	801d7a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d78e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d792:	4552      	cmp	r2, sl
 801d794:	d107      	bne.n	801d7a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d796:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d79a:	455a      	cmp	r2, fp
 801d79c:	d103      	bne.n	801d7a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d79e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d7a2:	454a      	cmp	r2, r9
 801d7a4:	d06d      	beq.n	801d882 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d7a6:	f1bb 0f00 	cmp.w	fp, #0
 801d7aa:	dd65      	ble.n	801d878 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d7ac:	f1b9 0f00 	cmp.w	r9, #0
 801d7b0:	dd62      	ble.n	801d878 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d7b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d7b6:	fa1f f08a 	uxth.w	r0, sl
 801d7ba:	4552      	cmp	r2, sl
 801d7bc:	9000      	str	r0, [sp, #0]
 801d7be:	da12      	bge.n	801d7e6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d7c0:	9301      	str	r3, [sp, #4]
 801d7c2:	9b00      	ldr	r3, [sp, #0]
 801d7c4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d7c8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d7cc:	1a9a      	subs	r2, r3, r2
 801d7ce:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d7d2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d7d6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d7da:	69ea      	ldr	r2, [r5, #28]
 801d7dc:	4631      	mov	r1, r6
 801d7de:	4640      	mov	r0, r8
 801d7e0:	f7ff ff7a 	bl	801d6d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d7e4:	9b01      	ldr	r3, [sp, #4]
 801d7e6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d7ea:	429a      	cmp	r2, r3
 801d7ec:	b29f      	uxth	r7, r3
 801d7ee:	da0d      	bge.n	801d80c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d7f0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d7f4:	1aba      	subs	r2, r7, r2
 801d7f6:	f8ad a012 	strh.w	sl, [sp, #18]
 801d7fa:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d7fe:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d802:	69ea      	ldr	r2, [r5, #28]
 801d804:	4631      	mov	r1, r6
 801d806:	4640      	mov	r0, r8
 801d808:	f7ff ff66 	bl	801d6d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d80c:	8822      	ldrh	r2, [r4, #0]
 801d80e:	88a3      	ldrh	r3, [r4, #4]
 801d810:	445f      	add	r7, fp
 801d812:	4413      	add	r3, r2
 801d814:	b29b      	uxth	r3, r3
 801d816:	b2bf      	uxth	r7, r7
 801d818:	b23a      	sxth	r2, r7
 801d81a:	b219      	sxth	r1, r3
 801d81c:	4291      	cmp	r1, r2
 801d81e:	dd0d      	ble.n	801d83c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d820:	1bdb      	subs	r3, r3, r7
 801d822:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d826:	f8ad a012 	strh.w	sl, [sp, #18]
 801d82a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d82e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d832:	69ea      	ldr	r2, [r5, #28]
 801d834:	4631      	mov	r1, r6
 801d836:	4640      	mov	r0, r8
 801d838:	f7ff ff4e 	bl	801d6d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d83c:	88e2      	ldrh	r2, [r4, #6]
 801d83e:	8863      	ldrh	r3, [r4, #2]
 801d840:	4413      	add	r3, r2
 801d842:	9a00      	ldr	r2, [sp, #0]
 801d844:	444a      	add	r2, r9
 801d846:	b29b      	uxth	r3, r3
 801d848:	fa1f f982 	uxth.w	r9, r2
 801d84c:	fa0f f289 	sxth.w	r2, r9
 801d850:	b219      	sxth	r1, r3
 801d852:	428a      	cmp	r2, r1
 801d854:	da15      	bge.n	801d882 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d856:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d85a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d85e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d862:	eba3 0309 	sub.w	r3, r3, r9
 801d866:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d86a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d86e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d872:	69ea      	ldr	r2, [r5, #28]
 801d874:	4631      	mov	r1, r6
 801d876:	e001      	b.n	801d87c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d878:	69ea      	ldr	r2, [r5, #28]
 801d87a:	4621      	mov	r1, r4
 801d87c:	4640      	mov	r0, r8
 801d87e:	f7ff ff2b 	bl	801d6d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d882:	4628      	mov	r0, r5
 801d884:	f7ff fe94 	bl	801d5b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d888:	6861      	ldr	r1, [r4, #4]
 801d88a:	4602      	mov	r2, r0
 801d88c:	6820      	ldr	r0, [r4, #0]
 801d88e:	4633      	mov	r3, r6
 801d890:	c303      	stmia	r3!, {r0, r1}
 801d892:	4611      	mov	r1, r2
 801d894:	4630      	mov	r0, r6
 801d896:	f7f9 fdef 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801d89a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	f77f af33 	ble.w	801d70a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d8a4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d8a8:	2b00      	cmp	r3, #0
 801d8aa:	f77f af2e 	ble.w	801d70a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d8ae:	4628      	mov	r0, r5
 801d8b0:	f7ff fe9a 	bl	801d5e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d8b4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d8b8:	1a18      	subs	r0, r3, r0
 801d8ba:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d8be:	4628      	mov	r0, r5
 801d8c0:	f7ff fea6 	bl	801d610 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d8c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d8c8:	1a18      	subs	r0, r3, r0
 801d8ca:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d8ce:	682b      	ldr	r3, [r5, #0]
 801d8d0:	4631      	mov	r1, r6
 801d8d2:	689b      	ldr	r3, [r3, #8]
 801d8d4:	4628      	mov	r0, r5
 801d8d6:	4798      	blx	r3
 801d8d8:	e717      	b.n	801d70a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d8da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d8da:	b570      	push	{r4, r5, r6, lr}
 801d8dc:	460c      	mov	r4, r1
 801d8de:	b086      	sub	sp, #24
 801d8e0:	1d06      	adds	r6, r0, #4
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	4631      	mov	r1, r6
 801d8e6:	4605      	mov	r5, r0
 801d8e8:	a802      	add	r0, sp, #8
 801d8ea:	9301      	str	r3, [sp, #4]
 801d8ec:	f7ff fbf4 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d8f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d8f4:	8822      	ldrh	r2, [r4, #0]
 801d8f6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d8fa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d8fe:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d902:	1ad2      	subs	r2, r2, r3
 801d904:	8863      	ldrh	r3, [r4, #2]
 801d906:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d90a:	1a5b      	subs	r3, r3, r1
 801d90c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d910:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d914:	aa01      	add	r2, sp, #4
 801d916:	a904      	add	r1, sp, #16
 801d918:	4630      	mov	r0, r6
 801d91a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d91e:	f7f9 fe83 	bl	8017628 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d922:	9a01      	ldr	r2, [sp, #4]
 801d924:	b11a      	cbz	r2, 801d92e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d926:	4621      	mov	r1, r4
 801d928:	4628      	mov	r0, r5
 801d92a:	f7ff fed5 	bl	801d6d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d92e:	b006      	add	sp, #24
 801d930:	bd70      	pop	{r4, r5, r6, pc}

0801d932 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d932:	b530      	push	{r4, r5, lr}
 801d934:	4602      	mov	r2, r0
 801d936:	4604      	mov	r4, r0
 801d938:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d93c:	b085      	sub	sp, #20
 801d93e:	460d      	mov	r5, r1
 801d940:	6851      	ldr	r1, [r2, #4]
 801d942:	466b      	mov	r3, sp
 801d944:	c303      	stmia	r3!, {r0, r1}
 801d946:	4629      	mov	r1, r5
 801d948:	4668      	mov	r0, sp
 801d94a:	f7f9 fd95 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 801d94e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d952:	b12b      	cbz	r3, 801d960 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d954:	4669      	mov	r1, sp
 801d956:	4620      	mov	r0, r4
 801d958:	f7ff ffbf 	bl	801d8da <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d95c:	b005      	add	sp, #20
 801d95e:	bd30      	pop	{r4, r5, pc}
 801d960:	3404      	adds	r4, #4
 801d962:	4621      	mov	r1, r4
 801d964:	a802      	add	r0, sp, #8
 801d966:	f7ff fbb7 	bl	801d0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d96a:	f8bd 3000 	ldrh.w	r3, [sp]
 801d96e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d972:	1a9b      	subs	r3, r3, r2
 801d974:	f8ad 3000 	strh.w	r3, [sp]
 801d978:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d97c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d980:	4669      	mov	r1, sp
 801d982:	1a9b      	subs	r3, r3, r2
 801d984:	4620      	mov	r0, r4
 801d986:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d98a:	f7f9 fe14 	bl	80175b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d98e:	e7e5      	b.n	801d95c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d990 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d990:	680a      	ldr	r2, [r1, #0]
 801d992:	460b      	mov	r3, r1
 801d994:	6992      	ldr	r2, [r2, #24]
 801d996:	1d01      	adds	r1, r0, #4
 801d998:	4618      	mov	r0, r3
 801d99a:	4710      	bx	r2

0801d99c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801d99c:	4298      	cmp	r0, r3
 801d99e:	d200      	bcs.n	801d9a2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801d9a0:	b913      	cbnz	r3, 801d9a8 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801d9a2:	440a      	add	r2, r1
 801d9a4:	b210      	sxth	r0, r2
 801d9a6:	4770      	bx	lr
 801d9a8:	ee07 2a90 	vmov	s15, r2
 801d9ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d9b0:	ee07 0a90 	vmov	s15, r0
 801d9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d9b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d9bc:	ee07 3a10 	vmov	s14, r3
 801d9c0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801d9c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d9c8:	ee07 1a90 	vmov	s15, r1
 801d9cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d9d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d9d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d9d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9e0:	bfcc      	ite	gt
 801d9e2:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d9e6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d9ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d9ee:	ee17 3a90 	vmov	r3, s15
 801d9f2:	b218      	sxth	r0, r3
 801d9f4:	4770      	bx	lr

0801d9f6 <_ZN8touchgfx12TextProviderC1Ev>:
 801d9f6:	b538      	push	{r3, r4, r5, lr}
 801d9f8:	2500      	movs	r5, #0
 801d9fa:	2302      	movs	r3, #2
 801d9fc:	4604      	mov	r4, r0
 801d9fe:	e9c0 5500 	strd	r5, r5, [r0]
 801da02:	7403      	strb	r3, [r0, #16]
 801da04:	6145      	str	r5, [r0, #20]
 801da06:	7605      	strb	r5, [r0, #24]
 801da08:	83c5      	strh	r5, [r0, #30]
 801da0a:	8405      	strh	r5, [r0, #32]
 801da0c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801da0e:	8705      	strh	r5, [r0, #56]	; 0x38
 801da10:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801da12:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801da16:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801da1a:	220e      	movs	r2, #14
 801da1c:	4629      	mov	r1, r5
 801da1e:	304c      	adds	r0, #76	; 0x4c
 801da20:	f010 fba4 	bl	802e16c <memset>
 801da24:	2301      	movs	r3, #1
 801da26:	4620      	mov	r0, r4
 801da28:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801da2c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801da30:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801da34:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801da38:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801da3c:	f7f6 fcbe 	bl	80143bc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801da40:	4620      	mov	r0, r4
 801da42:	bd38      	pop	{r3, r4, r5, pc}

0801da44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801da44:	b530      	push	{r4, r5, lr}
 801da46:	2500      	movs	r5, #0
 801da48:	2401      	movs	r4, #1
 801da4a:	6843      	ldr	r3, [r0, #4]
 801da4c:	b913      	cbnz	r3, 801da54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801da4e:	6803      	ldr	r3, [r0, #0]
 801da50:	b313      	cbz	r3, 801da98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801da52:	6043      	str	r3, [r0, #4]
 801da54:	7e03      	ldrb	r3, [r0, #24]
 801da56:	b143      	cbz	r3, 801da6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801da58:	6943      	ldr	r3, [r0, #20]
 801da5a:	b12b      	cbz	r3, 801da68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801da5c:	881a      	ldrh	r2, [r3, #0]
 801da5e:	b11a      	cbz	r2, 801da68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801da60:	1c9a      	adds	r2, r3, #2
 801da62:	6142      	str	r2, [r0, #20]
 801da64:	8818      	ldrh	r0, [r3, #0]
 801da66:	bd30      	pop	{r4, r5, pc}
 801da68:	7605      	strb	r5, [r0, #24]
 801da6a:	6843      	ldr	r3, [r0, #4]
 801da6c:	8819      	ldrh	r1, [r3, #0]
 801da6e:	b199      	cbz	r1, 801da98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801da70:	1c9a      	adds	r2, r3, #2
 801da72:	2902      	cmp	r1, #2
 801da74:	6042      	str	r2, [r0, #4]
 801da76:	d1f5      	bne.n	801da64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801da78:	7c03      	ldrb	r3, [r0, #16]
 801da7a:	2b01      	cmp	r3, #1
 801da7c:	d8e5      	bhi.n	801da4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801da7e:	1c5a      	adds	r2, r3, #1
 801da80:	3302      	adds	r3, #2
 801da82:	7402      	strb	r2, [r0, #16]
 801da84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801da88:	6143      	str	r3, [r0, #20]
 801da8a:	2b00      	cmp	r3, #0
 801da8c:	d0dd      	beq.n	801da4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801da8e:	881b      	ldrh	r3, [r3, #0]
 801da90:	2b00      	cmp	r3, #0
 801da92:	d0da      	beq.n	801da4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801da94:	7604      	strb	r4, [r0, #24]
 801da96:	e7d8      	b.n	801da4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801da98:	2000      	movs	r0, #0
 801da9a:	e7e4      	b.n	801da66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801da9c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801da9c:	b430      	push	{r4, r5}
 801da9e:	6815      	ldr	r5, [r2, #0]
 801daa0:	6085      	str	r5, [r0, #8]
 801daa2:	6852      	ldr	r2, [r2, #4]
 801daa4:	60c2      	str	r2, [r0, #12]
 801daa6:	6443      	str	r3, [r0, #68]	; 0x44
 801daa8:	2200      	movs	r2, #0
 801daaa:	9b02      	ldr	r3, [sp, #8]
 801daac:	7402      	strb	r2, [r0, #16]
 801daae:	6001      	str	r1, [r0, #0]
 801dab0:	6483      	str	r3, [r0, #72]	; 0x48
 801dab2:	6042      	str	r2, [r0, #4]
 801dab4:	6142      	str	r2, [r0, #20]
 801dab6:	7602      	strb	r2, [r0, #24]
 801dab8:	8702      	strh	r2, [r0, #56]	; 0x38
 801daba:	8402      	strh	r2, [r0, #32]
 801dabc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801dac0:	bc30      	pop	{r4, r5}
 801dac2:	f7f6 bc7b 	b.w	80143bc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801dac6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801dac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dac8:	4605      	mov	r5, r0
 801daca:	4608      	mov	r0, r1
 801dacc:	b1e9      	cbz	r1, 801db0a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801dace:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801dad2:	460b      	mov	r3, r1
 801dad4:	f101 0708 	add.w	r7, r1, #8
 801dad8:	4622      	mov	r2, r4
 801dada:	6818      	ldr	r0, [r3, #0]
 801dadc:	6859      	ldr	r1, [r3, #4]
 801dade:	4626      	mov	r6, r4
 801dae0:	c603      	stmia	r6!, {r0, r1}
 801dae2:	3308      	adds	r3, #8
 801dae4:	42bb      	cmp	r3, r7
 801dae6:	4634      	mov	r4, r6
 801dae8:	d1f7      	bne.n	801dada <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801daea:	6818      	ldr	r0, [r3, #0]
 801daec:	6030      	str	r0, [r6, #0]
 801daee:	889b      	ldrh	r3, [r3, #4]
 801daf0:	80b3      	strh	r3, [r6, #4]
 801daf2:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801daf6:	015b      	lsls	r3, r3, #5
 801daf8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801dafc:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801db00:	430b      	orrs	r3, r1
 801db02:	425b      	negs	r3, r3
 801db04:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801db08:	4610      	mov	r0, r2
 801db0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801db0c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801db0c:	b538      	push	{r3, r4, r5, lr}
 801db0e:	460c      	mov	r4, r1
 801db10:	6811      	ldr	r1, [r2, #0]
 801db12:	4610      	mov	r0, r2
 801db14:	68cd      	ldr	r5, [r1, #12]
 801db16:	4619      	mov	r1, r3
 801db18:	47a8      	blx	r5
 801db1a:	2800      	cmp	r0, #0
 801db1c:	bf08      	it	eq
 801db1e:	4620      	moveq	r0, r4
 801db20:	bd38      	pop	{r3, r4, r5, pc}
	...

0801db24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db26:	4604      	mov	r4, r0
 801db28:	4615      	mov	r5, r2
 801db2a:	4608      	mov	r0, r1
 801db2c:	b93a      	cbnz	r2, 801db3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801db2e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801db32:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801db36:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801db3a:	4628      	mov	r0, r5
 801db3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db3e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801db42:	8893      	ldrh	r3, [r2, #4]
 801db44:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801db48:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801db4c:	79ee      	ldrb	r6, [r5, #7]
 801db4e:	4316      	orrs	r6, r2
 801db50:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801db54:	189a      	adds	r2, r3, r2
 801db56:	b291      	uxth	r1, r2
 801db58:	291d      	cmp	r1, #29
 801db5a:	b2b7      	uxth	r7, r6
 801db5c:	f200 8083 	bhi.w	801dc66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801db60:	2201      	movs	r2, #1
 801db62:	408a      	lsls	r2, r1
 801db64:	4978      	ldr	r1, [pc, #480]	; (801dd48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801db66:	420a      	tst	r2, r1
 801db68:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801db6c:	d12d      	bne.n	801dbca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801db6e:	f412 7f60 	tst.w	r2, #896	; 0x380
 801db72:	d078      	beq.n	801dc66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 801db74:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801db78:	462b      	mov	r3, r5
 801db7a:	f105 0e08 	add.w	lr, r5, #8
 801db7e:	4615      	mov	r5, r2
 801db80:	6818      	ldr	r0, [r3, #0]
 801db82:	6859      	ldr	r1, [r3, #4]
 801db84:	4694      	mov	ip, r2
 801db86:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801db8a:	3308      	adds	r3, #8
 801db8c:	4573      	cmp	r3, lr
 801db8e:	4662      	mov	r2, ip
 801db90:	d1f6      	bne.n	801db80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5c>
 801db92:	6818      	ldr	r0, [r3, #0]
 801db94:	f8cc 0000 	str.w	r0, [ip]
 801db98:	889b      	ldrh	r3, [r3, #4]
 801db9a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801db9e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801dba2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801dba6:	b2b3      	uxth	r3, r6
 801dba8:	1aca      	subs	r2, r1, r3
 801dbaa:	b292      	uxth	r2, r2
 801dbac:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801dbb0:	10d2      	asrs	r2, r2, #3
 801dbb2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801dbb6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801dbba:	4302      	orrs	r2, r0
 801dbbc:	1bcf      	subs	r7, r1, r7
 801dbbe:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801dbc2:	1afb      	subs	r3, r7, r3
 801dbc4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801dbc8:	e7b7      	b.n	801db3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801dbca:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dbcc:	b92b      	cbnz	r3, 801dbda <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801dbce:	4b5f      	ldr	r3, [pc, #380]	; (801dd4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801dbd0:	4a5f      	ldr	r2, [pc, #380]	; (801dd50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801dbd2:	4860      	ldr	r0, [pc, #384]	; (801dd54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801dbd4:	21c0      	movs	r1, #192	; 0xc0
 801dbd6:	f010 f93b 	bl	802de50 <__assert_func>
 801dbda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801dbdc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801dbe0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801dbe2:	f640 6333 	movw	r3, #3635	; 0xe33
 801dbe6:	4299      	cmp	r1, r3
 801dbe8:	d110      	bne.n	801dc0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801dbea:	6803      	ldr	r3, [r0, #0]
 801dbec:	68db      	ldr	r3, [r3, #12]
 801dbee:	4798      	blx	r3
 801dbf0:	7b41      	ldrb	r1, [r0, #13]
 801dbf2:	00cb      	lsls	r3, r1, #3
 801dbf4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dbf8:	7a03      	ldrb	r3, [r0, #8]
 801dbfa:	0648      	lsls	r0, r1, #25
 801dbfc:	ea43 0302 	orr.w	r3, r3, r2
 801dc00:	bf44      	itt	mi
 801dc02:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dc06:	b21b      	sxthmi	r3, r3
 801dc08:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dc0c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801dc10:	443b      	add	r3, r7
 801dc12:	4433      	add	r3, r6
 801dc14:	b29b      	uxth	r3, r3
 801dc16:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801dc1a:	462a      	mov	r2, r5
 801dc1c:	f105 0c08 	add.w	ip, r5, #8
 801dc20:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dc24:	4635      	mov	r5, r6
 801dc26:	6810      	ldr	r0, [r2, #0]
 801dc28:	6851      	ldr	r1, [r2, #4]
 801dc2a:	4637      	mov	r7, r6
 801dc2c:	c703      	stmia	r7!, {r0, r1}
 801dc2e:	3208      	adds	r2, #8
 801dc30:	4562      	cmp	r2, ip
 801dc32:	463e      	mov	r6, r7
 801dc34:	d1f7      	bne.n	801dc26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801dc36:	6810      	ldr	r0, [r2, #0]
 801dc38:	6038      	str	r0, [r7, #0]
 801dc3a:	8892      	ldrh	r2, [r2, #4]
 801dc3c:	80ba      	strh	r2, [r7, #4]
 801dc3e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dc42:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dc46:	10db      	asrs	r3, r3, #3
 801dc48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dc4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dc50:	4313      	orrs	r3, r2
 801dc52:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dc56:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801dc5a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801dc5e:	1a9b      	subs	r3, r3, r2
 801dc60:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801dc64:	e769      	b.n	801db3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801dc66:	f023 0204 	bic.w	r2, r3, #4
 801dc6a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801dc6e:	428a      	cmp	r2, r1
 801dc70:	d003      	beq.n	801dc7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801dc72:	f640 621d 	movw	r2, #3613	; 0xe1d
 801dc76:	4293      	cmp	r3, r2
 801dc78:	d120      	bne.n	801dcbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x198>
 801dc7a:	3b01      	subs	r3, #1
 801dc7c:	4602      	mov	r2, r0
 801dc7e:	b29b      	uxth	r3, r3
 801dc80:	4629      	mov	r1, r5
 801dc82:	4620      	mov	r0, r4
 801dc84:	f7ff ff42 	bl	801db0c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dc88:	7b41      	ldrb	r1, [r0, #13]
 801dc8a:	00cb      	lsls	r3, r1, #3
 801dc8c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dc90:	7a03      	ldrb	r3, [r0, #8]
 801dc92:	0649      	lsls	r1, r1, #25
 801dc94:	ea43 0302 	orr.w	r3, r3, r2
 801dc98:	bf44      	itt	mi
 801dc9a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dc9e:	b21b      	sxthmi	r3, r3
 801dca0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dca4:	7b6b      	ldrb	r3, [r5, #13]
 801dca6:	7aaa      	ldrb	r2, [r5, #10]
 801dca8:	005b      	lsls	r3, r3, #1
 801dcaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dcae:	4313      	orrs	r3, r2
 801dcb0:	115a      	asrs	r2, r3, #5
 801dcb2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801dcb6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801dcba:	e036      	b.n	801dd2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801dcbc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801dcc0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801dcc4:	7a2a      	ldrb	r2, [r5, #8]
 801dcc6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801dcca:	ea42 0201 	orr.w	r2, r2, r1
 801dcce:	bf1c      	itt	ne
 801dcd0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801dcd4:	b212      	sxthne	r2, r2
 801dcd6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801dcda:	f640 6109 	movw	r1, #3593	; 0xe09
 801dcde:	f023 0210 	bic.w	r2, r3, #16
 801dce2:	428a      	cmp	r2, r1
 801dce4:	d003      	beq.n	801dcee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ca>
 801dce6:	f640 6213 	movw	r2, #3603	; 0xe13
 801dcea:	4293      	cmp	r3, r2
 801dcec:	d12a      	bne.n	801dd44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801dcee:	7b6e      	ldrb	r6, [r5, #13]
 801dcf0:	0076      	lsls	r6, r6, #1
 801dcf2:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801dcf6:	7aae      	ldrb	r6, [r5, #10]
 801dcf8:	4316      	orrs	r6, r2
 801dcfa:	f640 6213 	movw	r2, #3603	; 0xe13
 801dcfe:	4293      	cmp	r3, r2
 801dd00:	bf18      	it	ne
 801dd02:	f103 33ff 	addne.w	r3, r3, #4294967295
 801dd06:	4602      	mov	r2, r0
 801dd08:	bf14      	ite	ne
 801dd0a:	b29b      	uxthne	r3, r3
 801dd0c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801dd10:	4629      	mov	r1, r5
 801dd12:	4620      	mov	r0, r4
 801dd14:	f7ff fefa 	bl	801db0c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801dd18:	7b43      	ldrb	r3, [r0, #13]
 801dd1a:	7a82      	ldrb	r2, [r0, #10]
 801dd1c:	005b      	lsls	r3, r3, #1
 801dd1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd22:	4313      	orrs	r3, r2
 801dd24:	1af6      	subs	r6, r6, r3
 801dd26:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801dd2a:	7b69      	ldrb	r1, [r5, #13]
 801dd2c:	00cb      	lsls	r3, r1, #3
 801dd2e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dd32:	7a2b      	ldrb	r3, [r5, #8]
 801dd34:	4313      	orrs	r3, r2
 801dd36:	064a      	lsls	r2, r1, #25
 801dd38:	bf44      	itt	mi
 801dd3a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dd3e:	b21b      	sxthmi	r3, r3
 801dd40:	1bdb      	subs	r3, r3, r7
 801dd42:	e73f      	b.n	801dbc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801dd44:	2300      	movs	r3, #0
 801dd46:	e7b6      	b.n	801dcb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x192>
 801dd48:	3fc00079 	.word	0x3fc00079
 801dd4c:	08032018 	.word	0x08032018
 801dd50:	0803228a 	.word	0x0803228a
 801dd54:	08032021 	.word	0x08032021

0801dd58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801dd58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dd5c:	4604      	mov	r4, r0
 801dd5e:	b942      	cbnz	r2, 801dd72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801dd60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dd64:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801dd68:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801dd6c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801dd70:	e046      	b.n	801de00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801dd72:	7b51      	ldrb	r1, [r2, #13]
 801dd74:	8893      	ldrh	r3, [r2, #4]
 801dd76:	010f      	lsls	r7, r1, #4
 801dd78:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801dd7c:	79d7      	ldrb	r7, [r2, #7]
 801dd7e:	4307      	orrs	r7, r0
 801dd80:	2f04      	cmp	r7, #4
 801dd82:	b2bd      	uxth	r5, r7
 801dd84:	bfcc      	ite	gt
 801dd86:	08bf      	lsrgt	r7, r7, #2
 801dd88:	2701      	movle	r7, #1
 801dd8a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801dd8e:	f200 80ab 	bhi.w	801dee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801dd92:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801dd96:	4283      	cmp	r3, r0
 801dd98:	d216      	bcs.n	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dd9a:	f240 605b 	movw	r0, #1627	; 0x65b
 801dd9e:	4283      	cmp	r3, r0
 801dda0:	d859      	bhi.n	801de56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801dda2:	f240 6057 	movw	r0, #1623	; 0x657
 801dda6:	4283      	cmp	r3, r0
 801dda8:	d20e      	bcs.n	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ddaa:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ddae:	d24a      	bcs.n	801de46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801ddb0:	f240 604e 	movw	r0, #1614	; 0x64e
 801ddb4:	4283      	cmp	r3, r0
 801ddb6:	d207      	bcs.n	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ddb8:	f240 601a 	movw	r0, #1562	; 0x61a
 801ddbc:	4283      	cmp	r3, r0
 801ddbe:	d02a      	beq.n	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ddc0:	d821      	bhi.n	801de06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801ddc2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801ddc6:	d35b      	bcc.n	801de80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ddc8:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801ddcc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ddd0:	f040 80d0 	bne.w	801df74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801ddd4:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801ddd8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dddc:	f040 80ca 	bne.w	801df74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801dde0:	00cb      	lsls	r3, r1, #3
 801dde2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801dde6:	7a13      	ldrb	r3, [r2, #8]
 801dde8:	0649      	lsls	r1, r1, #25
 801ddea:	ea43 0300 	orr.w	r3, r3, r0
 801ddee:	bf44      	itt	mi
 801ddf0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ddf4:	b21b      	sxthmi	r3, r3
 801ddf6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ddfa:	1b5d      	subs	r5, r3, r5
 801ddfc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801de00:	4610      	mov	r0, r2
 801de02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de06:	f240 604b 	movw	r0, #1611	; 0x64b
 801de0a:	4283      	cmp	r3, r0
 801de0c:	d338      	bcc.n	801de80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801de0e:	f240 604c 	movw	r0, #1612	; 0x64c
 801de12:	4283      	cmp	r3, r0
 801de14:	d9d8      	bls.n	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de16:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801de1a:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801de1e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801de22:	f040 80f1 	bne.w	801e008 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801de26:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801de2a:	f040 80ed 	bne.w	801e008 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>
 801de2e:	00cb      	lsls	r3, r1, #3
 801de30:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801de34:	7a13      	ldrb	r3, [r2, #8]
 801de36:	064e      	lsls	r6, r1, #25
 801de38:	ea43 0300 	orr.w	r3, r3, r0
 801de3c:	bf44      	itt	mi
 801de3e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801de42:	b21b      	sxthmi	r3, r3
 801de44:	e7d9      	b.n	801ddfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801de46:	f240 6054 	movw	r0, #1620	; 0x654
 801de4a:	4283      	cmp	r3, r0
 801de4c:	d8e3      	bhi.n	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801de4e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801de52:	d9e0      	bls.n	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801de54:	e7b8      	b.n	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de56:	f240 6074 	movw	r0, #1652	; 0x674
 801de5a:	4283      	cmp	r3, r0
 801de5c:	d0b4      	beq.n	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de5e:	d82d      	bhi.n	801debc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801de60:	f240 605e 	movw	r0, #1630	; 0x65e
 801de64:	4283      	cmp	r3, r0
 801de66:	d804      	bhi.n	801de72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801de68:	f240 605d 	movw	r0, #1629	; 0x65d
 801de6c:	4283      	cmp	r3, r0
 801de6e:	d3d2      	bcc.n	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801de70:	e7aa      	b.n	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de72:	f240 605f 	movw	r0, #1631	; 0x65f
 801de76:	4283      	cmp	r3, r0
 801de78:	d0cd      	beq.n	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801de7a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801de7e:	d0a3      	beq.n	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801de80:	00cb      	lsls	r3, r1, #3
 801de82:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801de86:	7a13      	ldrb	r3, [r2, #8]
 801de88:	0649      	lsls	r1, r1, #25
 801de8a:	ea43 0300 	orr.w	r3, r3, r0
 801de8e:	bf44      	itt	mi
 801de90:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801de94:	b21b      	sxthmi	r3, r3
 801de96:	1b5d      	subs	r5, r3, r5
 801de98:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801de9c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801dea0:	7b53      	ldrb	r3, [r2, #13]
 801dea2:	015b      	lsls	r3, r3, #5
 801dea4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801dea8:	7993      	ldrb	r3, [r2, #6]
 801deaa:	430b      	orrs	r3, r1
 801deac:	005b      	lsls	r3, r3, #1
 801deae:	2105      	movs	r1, #5
 801deb0:	fb93 f3f1 	sdiv	r3, r3, r1
 801deb4:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801deb8:	440b      	add	r3, r1
 801deba:	e757      	b.n	801dd6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801debc:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801dec0:	4283      	cmp	r3, r0
 801dec2:	d809      	bhi.n	801ded8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801dec4:	f240 60df 	movw	r0, #1759	; 0x6df
 801dec8:	4283      	cmp	r3, r0
 801deca:	f4bf af7d 	bcs.w	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dece:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ded2:	2b05      	cmp	r3, #5
 801ded4:	d8d4      	bhi.n	801de80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ded6:	e777      	b.n	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ded8:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801dedc:	4283      	cmp	r3, r0
 801dede:	d09a      	beq.n	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dee0:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801dee4:	4283      	cmp	r3, r0
 801dee6:	e7ca      	b.n	801de7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801dee8:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801deec:	d22b      	bcs.n	801df46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801deee:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801def2:	4283      	cmp	r3, r0
 801def4:	d28f      	bcs.n	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801def6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801defa:	4283      	cmp	r3, r0
 801defc:	d816      	bhi.n	801df2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801defe:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801df02:	4283      	cmp	r3, r0
 801df04:	f4bf af60 	bcs.w	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df08:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801df0c:	4283      	cmp	r3, r0
 801df0e:	d80a      	bhi.n	801df26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801df10:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801df14:	4283      	cmp	r3, r0
 801df16:	f4bf af57 	bcs.w	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df1a:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801df1e:	4283      	cmp	r3, r0
 801df20:	f43f af79 	beq.w	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df24:	e7ac      	b.n	801de80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801df26:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801df2a:	e7f8      	b.n	801df1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801df2c:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801df30:	4283      	cmp	r3, r0
 801df32:	d802      	bhi.n	801df3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801df34:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801df38:	e798      	b.n	801de6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801df3a:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801df3e:	4283      	cmp	r3, r0
 801df40:	f47f af42 	bne.w	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df44:	e767      	b.n	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df46:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801df4a:	4283      	cmp	r3, r0
 801df4c:	f43f af63 	beq.w	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df50:	d802      	bhi.n	801df58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801df52:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801df56:	e7f2      	b.n	801df3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801df58:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801df5c:	4283      	cmp	r3, r0
 801df5e:	d805      	bhi.n	801df6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801df60:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801df64:	4283      	cmp	r3, r0
 801df66:	f4ff af2f 	bcc.w	801ddc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801df6a:	e754      	b.n	801de16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801df6c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801df70:	4283      	cmp	r3, r0
 801df72:	e7af      	b.n	801ded4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801df74:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801df78:	4617      	mov	r7, r2
 801df7a:	f102 0808 	add.w	r8, r2, #8
 801df7e:	4666      	mov	r6, ip
 801df80:	6838      	ldr	r0, [r7, #0]
 801df82:	6879      	ldr	r1, [r7, #4]
 801df84:	46e6      	mov	lr, ip
 801df86:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801df8a:	3708      	adds	r7, #8
 801df8c:	4547      	cmp	r7, r8
 801df8e:	46f4      	mov	ip, lr
 801df90:	d1f6      	bne.n	801df80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801df92:	6838      	ldr	r0, [r7, #0]
 801df94:	f8ce 0000 	str.w	r0, [lr]
 801df98:	88b9      	ldrh	r1, [r7, #4]
 801df9a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801df9e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801dfa2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dfa6:	d009      	beq.n	801dfbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x264>
 801dfa8:	7b51      	ldrb	r1, [r2, #13]
 801dfaa:	7992      	ldrb	r2, [r2, #6]
 801dfac:	0149      	lsls	r1, r1, #5
 801dfae:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dfb2:	4311      	orrs	r1, r2
 801dfb4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dfb8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801dfbc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dfc0:	d00d      	beq.n	801dfde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x286>
 801dfc2:	442b      	add	r3, r5
 801dfc4:	b29b      	uxth	r3, r3
 801dfc6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dfca:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dfce:	10db      	asrs	r3, r3, #3
 801dfd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dfd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dfd8:	4313      	orrs	r3, r2
 801dfda:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dfde:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801dfe2:	00cb      	lsls	r3, r1, #3
 801dfe4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dfe8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801dfec:	064f      	lsls	r7, r1, #25
 801dfee:	ea43 0302 	orr.w	r3, r3, r2
 801dff2:	bf44      	itt	mi
 801dff4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dff8:	b21b      	sxthmi	r3, r3
 801dffa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dffe:	1b5d      	subs	r5, r3, r5
 801e000:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801e004:	4632      	mov	r2, r6
 801e006:	e6fb      	b.n	801de00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801e008:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801e00c:	4694      	mov	ip, r2
 801e00e:	f102 0908 	add.w	r9, r2, #8
 801e012:	4676      	mov	r6, lr
 801e014:	f8dc 0000 	ldr.w	r0, [ip]
 801e018:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801e01c:	46f0      	mov	r8, lr
 801e01e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801e022:	f10c 0c08 	add.w	ip, ip, #8
 801e026:	45cc      	cmp	ip, r9
 801e028:	46c6      	mov	lr, r8
 801e02a:	d1f3      	bne.n	801e014 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2bc>
 801e02c:	f8dc 0000 	ldr.w	r0, [ip]
 801e030:	f8c8 0000 	str.w	r0, [r8]
 801e034:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801e038:	f8a8 1004 	strh.w	r1, [r8, #4]
 801e03c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801e040:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801e044:	d009      	beq.n	801e05a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x302>
 801e046:	7b51      	ldrb	r1, [r2, #13]
 801e048:	7992      	ldrb	r2, [r2, #6]
 801e04a:	0149      	lsls	r1, r1, #5
 801e04c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e050:	4311      	orrs	r1, r2
 801e052:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801e056:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801e05a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801e05e:	d00d      	beq.n	801e07c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801e060:	1bdb      	subs	r3, r3, r7
 801e062:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801e066:	b29b      	uxth	r3, r3
 801e068:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801e06c:	10db      	asrs	r3, r3, #3
 801e06e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801e072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801e076:	4313      	orrs	r3, r2
 801e078:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e07c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801e080:	00cb      	lsls	r3, r1, #3
 801e082:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801e086:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801e08a:	0648      	lsls	r0, r1, #25
 801e08c:	ea43 0302 	orr.w	r3, r3, r2
 801e090:	bf44      	itt	mi
 801e092:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e096:	b21b      	sxthmi	r3, r3
 801e098:	e7b1      	b.n	801dffe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a6>
	...

0801e09c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801e09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0a0:	461e      	mov	r6, r3
 801e0a2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801e0a4:	4604      	mov	r4, r0
 801e0a6:	4617      	mov	r7, r2
 801e0a8:	b92b      	cbnz	r3, 801e0b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801e0aa:	4b25      	ldr	r3, [pc, #148]	; (801e140 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801e0ac:	4a25      	ldr	r2, [pc, #148]	; (801e144 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801e0ae:	4826      	ldr	r0, [pc, #152]	; (801e148 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801e0b0:	21c0      	movs	r1, #192	; 0xc0
 801e0b2:	f00f fecd 	bl	802de50 <__assert_func>
 801e0b6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e0b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e0bc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e0c0:	f7f6 f8d6 	bl	8014270 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e0c4:	4605      	mov	r5, r0
 801e0c6:	b918      	cbnz	r0, 801e0d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801e0c8:	6030      	str	r0, [r6, #0]
 801e0ca:	4628      	mov	r0, r5
 801e0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0d0:	683b      	ldr	r3, [r7, #0]
 801e0d2:	4601      	mov	r1, r0
 801e0d4:	68db      	ldr	r3, [r3, #12]
 801e0d6:	4638      	mov	r0, r7
 801e0d8:	4798      	blx	r3
 801e0da:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e0de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e0e2:	4602      	mov	r2, r0
 801e0e4:	6030      	str	r0, [r6, #0]
 801e0e6:	d213      	bcs.n	801e110 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801e0e8:	4643      	mov	r3, r8
 801e0ea:	4639      	mov	r1, r7
 801e0ec:	4620      	mov	r0, r4
 801e0ee:	f7ff fe33 	bl	801dd58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e0f2:	6030      	str	r0, [r6, #0]
 801e0f4:	6833      	ldr	r3, [r6, #0]
 801e0f6:	b143      	cbz	r3, 801e10a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801e0f8:	7b5a      	ldrb	r2, [r3, #13]
 801e0fa:	7a9b      	ldrb	r3, [r3, #10]
 801e0fc:	0052      	lsls	r2, r2, #1
 801e0fe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e102:	4313      	orrs	r3, r2
 801e104:	bf0c      	ite	eq
 801e106:	2301      	moveq	r3, #1
 801e108:	2300      	movne	r3, #0
 801e10a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e10e:	e7dc      	b.n	801e0ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801e110:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e114:	b29b      	uxth	r3, r3
 801e116:	2b7f      	cmp	r3, #127	; 0x7f
 801e118:	d804      	bhi.n	801e124 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801e11a:	4639      	mov	r1, r7
 801e11c:	4620      	mov	r0, r4
 801e11e:	f7ff fd01 	bl	801db24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e122:	e7e6      	b.n	801e0f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e124:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e128:	2b00      	cmp	r3, #0
 801e12a:	d0e3      	beq.n	801e0f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e12c:	f640 1302 	movw	r3, #2306	; 0x902
 801e130:	429d      	cmp	r5, r3
 801e132:	d1df      	bne.n	801e0f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801e134:	4601      	mov	r1, r0
 801e136:	4620      	mov	r0, r4
 801e138:	f7ff fcc5 	bl	801dac6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e13c:	e7d9      	b.n	801e0f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801e13e:	bf00      	nop
 801e140:	08032018 	.word	0x08032018
 801e144:	0803228a 	.word	0x0803228a
 801e148:	08032021 	.word	0x08032021

0801e14c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801e14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e150:	461e      	mov	r6, r3
 801e152:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801e154:	4604      	mov	r4, r0
 801e156:	4617      	mov	r7, r2
 801e158:	b92b      	cbnz	r3, 801e166 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801e15a:	4b26      	ldr	r3, [pc, #152]	; (801e1f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801e15c:	4a26      	ldr	r2, [pc, #152]	; (801e1f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801e15e:	4827      	ldr	r0, [pc, #156]	; (801e1fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801e160:	21c0      	movs	r1, #192	; 0xc0
 801e162:	f00f fe75 	bl	802de50 <__assert_func>
 801e166:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e168:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801e16c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e170:	f7f6 f87e 	bl	8014270 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e174:	4605      	mov	r5, r0
 801e176:	b918      	cbnz	r0, 801e180 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801e178:	6030      	str	r0, [r6, #0]
 801e17a:	4628      	mov	r0, r5
 801e17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e180:	683b      	ldr	r3, [r7, #0]
 801e182:	4601      	mov	r1, r0
 801e184:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801e188:	4638      	mov	r0, r7
 801e18a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e18e:	47c8      	blx	r9
 801e190:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801e194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e198:	4602      	mov	r2, r0
 801e19a:	6030      	str	r0, [r6, #0]
 801e19c:	d213      	bcs.n	801e1c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801e19e:	4643      	mov	r3, r8
 801e1a0:	4639      	mov	r1, r7
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	f7ff fdd8 	bl	801dd58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801e1a8:	6030      	str	r0, [r6, #0]
 801e1aa:	6833      	ldr	r3, [r6, #0]
 801e1ac:	b143      	cbz	r3, 801e1c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801e1ae:	7b5a      	ldrb	r2, [r3, #13]
 801e1b0:	7a9b      	ldrb	r3, [r3, #10]
 801e1b2:	0052      	lsls	r2, r2, #1
 801e1b4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801e1b8:	4313      	orrs	r3, r2
 801e1ba:	bf0c      	ite	eq
 801e1bc:	2301      	moveq	r3, #1
 801e1be:	2300      	movne	r3, #0
 801e1c0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801e1c4:	e7d9      	b.n	801e17a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801e1c6:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801e1ca:	b29b      	uxth	r3, r3
 801e1cc:	2b7f      	cmp	r3, #127	; 0x7f
 801e1ce:	d804      	bhi.n	801e1da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801e1d0:	4639      	mov	r1, r7
 801e1d2:	4620      	mov	r0, r4
 801e1d4:	f7ff fca6 	bl	801db24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801e1d8:	e7e6      	b.n	801e1a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801e1da:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d0e3      	beq.n	801e1aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801e1e2:	f640 1302 	movw	r3, #2306	; 0x902
 801e1e6:	429d      	cmp	r5, r3
 801e1e8:	d1df      	bne.n	801e1aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801e1ea:	4601      	mov	r1, r0
 801e1ec:	4620      	mov	r0, r4
 801e1ee:	f7ff fc6a 	bl	801dac6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801e1f2:	e7d9      	b.n	801e1a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801e1f4:	08032018 	.word	0x08032018
 801e1f8:	0803228a 	.word	0x0803228a
 801e1fc:	08032021 	.word	0x08032021

0801e200 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801e200:	b510      	push	{r4, lr}
 801e202:	4604      	mov	r4, r0
 801e204:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801e208:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e20a:	b9d9      	cbnz	r1, 801e244 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801e20c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e20e:	2b0a      	cmp	r3, #10
 801e210:	d037      	beq.n	801e282 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e212:	4620      	mov	r0, r4
 801e214:	f7ff fc16 	bl	801da44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801e218:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e21a:	2b09      	cmp	r3, #9
 801e21c:	d906      	bls.n	801e22c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801e21e:	4b19      	ldr	r3, [pc, #100]	; (801e284 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801e220:	4a19      	ldr	r2, [pc, #100]	; (801e288 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801e222:	481a      	ldr	r0, [pc, #104]	; (801e28c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801e224:	f44f 7182 	mov.w	r1, #260	; 0x104
 801e228:	f00f fe12 	bl	802de50 <__assert_func>
 801e22c:	1c5a      	adds	r2, r3, #1
 801e22e:	8722      	strh	r2, [r4, #56]	; 0x38
 801e230:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e232:	4413      	add	r3, r2
 801e234:	b29b      	uxth	r3, r3
 801e236:	2b09      	cmp	r3, #9
 801e238:	bf88      	it	hi
 801e23a:	3b0a      	subhi	r3, #10
 801e23c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e240:	8458      	strh	r0, [r3, #34]	; 0x22
 801e242:	e7e3      	b.n	801e20c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801e244:	2b0a      	cmp	r3, #10
 801e246:	d01c      	beq.n	801e282 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801e248:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801e24a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801e24e:	3901      	subs	r1, #1
 801e250:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801e252:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801e256:	1c51      	adds	r1, r2, #1
 801e258:	b289      	uxth	r1, r1
 801e25a:	2901      	cmp	r1, #1
 801e25c:	bf8a      	itet	hi
 801e25e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801e262:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801e264:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801e266:	2b09      	cmp	r3, #9
 801e268:	d8d9      	bhi.n	801e21e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801e26a:	1c5a      	adds	r2, r3, #1
 801e26c:	8722      	strh	r2, [r4, #56]	; 0x38
 801e26e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e270:	4413      	add	r3, r2
 801e272:	b29b      	uxth	r3, r3
 801e274:	2b09      	cmp	r3, #9
 801e276:	bf88      	it	hi
 801e278:	3b0a      	subhi	r3, #10
 801e27a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e27e:	8458      	strh	r0, [r3, #34]	; 0x22
 801e280:	e7c0      	b.n	801e204 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801e282:	bd10      	pop	{r4, pc}
 801e284:	0803204d 	.word	0x0803204d
 801e288:	080323e0 	.word	0x080323e0
 801e28c:	08032021 	.word	0x08032021

0801e290 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801e290:	b538      	push	{r3, r4, r5, lr}
 801e292:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801e294:	4604      	mov	r4, r0
 801e296:	b92a      	cbnz	r2, 801e2a4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801e298:	4b13      	ldr	r3, [pc, #76]	; (801e2e8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801e29a:	4a14      	ldr	r2, [pc, #80]	; (801e2ec <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801e29c:	4814      	ldr	r0, [pc, #80]	; (801e2f0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801e29e:	21d5      	movs	r1, #213	; 0xd5
 801e2a0:	f00f fdd6 	bl	802de50 <__assert_func>
 801e2a4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801e2a6:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801e2aa:	3a01      	subs	r2, #1
 801e2ac:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801e2ae:	8702      	strh	r2, [r0, #56]	; 0x38
 801e2b0:	1c5a      	adds	r2, r3, #1
 801e2b2:	b292      	uxth	r2, r2
 801e2b4:	2a09      	cmp	r2, #9
 801e2b6:	bf86      	itte	hi
 801e2b8:	3b09      	subhi	r3, #9
 801e2ba:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801e2bc:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801e2be:	f7ff ff9f 	bl	801e200 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e2c2:	8c23      	ldrh	r3, [r4, #32]
 801e2c4:	2b01      	cmp	r3, #1
 801e2c6:	bf9c      	itt	ls
 801e2c8:	3301      	addls	r3, #1
 801e2ca:	8423      	strhls	r3, [r4, #32]
 801e2cc:	8be3      	ldrh	r3, [r4, #30]
 801e2ce:	b90b      	cbnz	r3, 801e2d4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801e2d0:	2302      	movs	r3, #2
 801e2d2:	83e3      	strh	r3, [r4, #30]
 801e2d4:	8be3      	ldrh	r3, [r4, #30]
 801e2d6:	3b01      	subs	r3, #1
 801e2d8:	b29b      	uxth	r3, r3
 801e2da:	83e3      	strh	r3, [r4, #30]
 801e2dc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e2e0:	4628      	mov	r0, r5
 801e2e2:	8365      	strh	r5, [r4, #26]
 801e2e4:	bd38      	pop	{r3, r4, r5, pc}
 801e2e6:	bf00      	nop
 801e2e8:	08032018 	.word	0x08032018
 801e2ec:	08032335 	.word	0x08032335
 801e2f0:	08032021 	.word	0x08032021

0801e2f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801e2f4:	b538      	push	{r3, r4, r5, lr}
 801e2f6:	428a      	cmp	r2, r1
 801e2f8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801e2fa:	d90c      	bls.n	801e316 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801e2fc:	b92c      	cbnz	r4, 801e30a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801e2fe:	4b1c      	ldr	r3, [pc, #112]	; (801e370 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801e300:	4a1c      	ldr	r2, [pc, #112]	; (801e374 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801e302:	21e1      	movs	r1, #225	; 0xe1
 801e304:	481c      	ldr	r0, [pc, #112]	; (801e378 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801e306:	f00f fda3 	bl	802de50 <__assert_func>
 801e30a:	3c01      	subs	r4, #1
 801e30c:	8704      	strh	r4, [r0, #56]	; 0x38
 801e30e:	4b1b      	ldr	r3, [pc, #108]	; (801e37c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801e310:	4a1b      	ldr	r2, [pc, #108]	; (801e380 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801e312:	21c5      	movs	r1, #197	; 0xc5
 801e314:	e7f6      	b.n	801e304 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e316:	428c      	cmp	r4, r1
 801e318:	d203      	bcs.n	801e322 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801e31a:	4b1a      	ldr	r3, [pc, #104]	; (801e384 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801e31c:	4a1a      	ldr	r2, [pc, #104]	; (801e388 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801e31e:	21cb      	movs	r1, #203	; 0xcb
 801e320:	e7f0      	b.n	801e304 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e322:	1a64      	subs	r4, r4, r1
 801e324:	8704      	strh	r4, [r0, #56]	; 0x38
 801e326:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801e328:	4421      	add	r1, r4
 801e32a:	b289      	uxth	r1, r1
 801e32c:	2909      	cmp	r1, #9
 801e32e:	bf88      	it	hi
 801e330:	390a      	subhi	r1, #10
 801e332:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e334:	250a      	movs	r5, #10
 801e336:	b1ba      	cbz	r2, 801e368 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801e338:	3a01      	subs	r2, #1
 801e33a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801e33c:	b292      	uxth	r2, r2
 801e33e:	2909      	cmp	r1, #9
 801e340:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801e344:	d903      	bls.n	801e34e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801e346:	4b11      	ldr	r3, [pc, #68]	; (801e38c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801e348:	4a11      	ldr	r2, [pc, #68]	; (801e390 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801e34a:	21e6      	movs	r1, #230	; 0xe6
 801e34c:	e7da      	b.n	801e304 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801e34e:	3101      	adds	r1, #1
 801e350:	8701      	strh	r1, [r0, #56]	; 0x38
 801e352:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e354:	b901      	cbnz	r1, 801e358 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801e356:	86c5      	strh	r5, [r0, #54]	; 0x36
 801e358:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801e35a:	3901      	subs	r1, #1
 801e35c:	b289      	uxth	r1, r1
 801e35e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801e360:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e364:	844c      	strh	r4, [r1, #34]	; 0x22
 801e366:	e7e6      	b.n	801e336 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801e368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e36c:	f7ff bf48 	b.w	801e200 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801e370:	08032018 	.word	0x08032018
 801e374:	0803210e 	.word	0x0803210e
 801e378:	08032021 	.word	0x08032021
 801e37c:	08032059 	.word	0x08032059
 801e380:	080321b8 	.word	0x080321b8
 801e384:	08032067 	.word	0x08032067
 801e388:	0803248f 	.word	0x0803248f
 801e38c:	08032073 	.word	0x08032073
 801e390:	08032086 	.word	0x08032086

0801e394 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801e394:	3a01      	subs	r2, #1
 801e396:	b570      	push	{r4, r5, r6, lr}
 801e398:	b292      	uxth	r2, r2
 801e39a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801e39e:	42b2      	cmp	r2, r6
 801e3a0:	d019      	beq.n	801e3d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801e3a2:	8c04      	ldrh	r4, [r0, #32]
 801e3a4:	f831 5b02 	ldrh.w	r5, [r1], #2
 801e3a8:	4294      	cmp	r4, r2
 801e3aa:	d805      	bhi.n	801e3b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801e3ac:	4b19      	ldr	r3, [pc, #100]	; (801e414 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e3ae:	4a1a      	ldr	r2, [pc, #104]	; (801e418 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801e3b0:	481a      	ldr	r0, [pc, #104]	; (801e41c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801e3b2:	21c5      	movs	r1, #197	; 0xc5
 801e3b4:	f00f fd4c 	bl	802de50 <__assert_func>
 801e3b8:	8bc4      	ldrh	r4, [r0, #30]
 801e3ba:	4414      	add	r4, r2
 801e3bc:	b2a4      	uxth	r4, r4
 801e3be:	2c01      	cmp	r4, #1
 801e3c0:	bf88      	it	hi
 801e3c2:	3c02      	subhi	r4, #2
 801e3c4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e3c8:	3a01      	subs	r2, #1
 801e3ca:	8b64      	ldrh	r4, [r4, #26]
 801e3cc:	42ac      	cmp	r4, r5
 801e3ce:	b292      	uxth	r2, r2
 801e3d0:	d0e5      	beq.n	801e39e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801e3d2:	2000      	movs	r0, #0
 801e3d4:	bd70      	pop	{r4, r5, r6, pc}
 801e3d6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e3da:	2400      	movs	r4, #0
 801e3dc:	4413      	add	r3, r2
 801e3de:	b2a2      	uxth	r2, r4
 801e3e0:	429a      	cmp	r2, r3
 801e3e2:	da14      	bge.n	801e40e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801e3e4:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801e3e6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e3ea:	4296      	cmp	r6, r2
 801e3ec:	d802      	bhi.n	801e3f4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801e3ee:	4b09      	ldr	r3, [pc, #36]	; (801e414 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e3f0:	4a0b      	ldr	r2, [pc, #44]	; (801e420 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801e3f2:	e7dd      	b.n	801e3b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801e3f4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801e3f6:	4432      	add	r2, r6
 801e3f8:	b292      	uxth	r2, r2
 801e3fa:	2a09      	cmp	r2, #9
 801e3fc:	bf88      	it	hi
 801e3fe:	3a0a      	subhi	r2, #10
 801e400:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e404:	3401      	adds	r4, #1
 801e406:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801e408:	42aa      	cmp	r2, r5
 801e40a:	d0e8      	beq.n	801e3de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801e40c:	e7e1      	b.n	801e3d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801e40e:	2001      	movs	r0, #1
 801e410:	e7e0      	b.n	801e3d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801e412:	bf00      	nop
 801e414:	08032059 	.word	0x08032059
 801e418:	08032513 	.word	0x08032513
 801e41c:	08032021 	.word	0x08032021
 801e420:	080321b8 	.word	0x080321b8

0801e424 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e428:	4605      	mov	r5, r0
 801e42a:	4616      	mov	r6, r2
 801e42c:	1c8c      	adds	r4, r1, #2
 801e42e:	8809      	ldrh	r1, [r1, #0]
 801e430:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e434:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e438:	42b3      	cmp	r3, r6
 801e43a:	d124      	bne.n	801e486 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e43c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e440:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e444:	f001 070f 	and.w	r7, r1, #15
 801e448:	f8cd 8000 	str.w	r8, [sp]
 801e44c:	464b      	mov	r3, r9
 801e44e:	4652      	mov	r2, sl
 801e450:	4621      	mov	r1, r4
 801e452:	4628      	mov	r0, r5
 801e454:	f7ff ff9e 	bl	801e394 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e458:	4683      	mov	fp, r0
 801e45a:	b168      	cbz	r0, 801e478 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e45c:	eb0a 0109 	add.w	r1, sl, r9
 801e460:	4441      	add	r1, r8
 801e462:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e466:	463a      	mov	r2, r7
 801e468:	4649      	mov	r1, r9
 801e46a:	4628      	mov	r0, r5
 801e46c:	f7ff ff42 	bl	801e2f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e470:	4658      	mov	r0, fp
 801e472:	b003      	add	sp, #12
 801e474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e478:	eb07 010a 	add.w	r1, r7, sl
 801e47c:	4449      	add	r1, r9
 801e47e:	4441      	add	r1, r8
 801e480:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e484:	e7d2      	b.n	801e42c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e486:	f04f 0b00 	mov.w	fp, #0
 801e48a:	e7f1      	b.n	801e470 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e48c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e48c:	b570      	push	{r4, r5, r6, lr}
 801e48e:	8810      	ldrh	r0, [r2, #0]
 801e490:	4298      	cmp	r0, r3
 801e492:	d817      	bhi.n	801e4c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e494:	1e48      	subs	r0, r1, #1
 801e496:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e49a:	4298      	cmp	r0, r3
 801e49c:	d312      	bcc.n	801e4c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e49e:	2400      	movs	r4, #0
 801e4a0:	428c      	cmp	r4, r1
 801e4a2:	d20f      	bcs.n	801e4c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e4a4:	1860      	adds	r0, r4, r1
 801e4a6:	1040      	asrs	r0, r0, #1
 801e4a8:	0085      	lsls	r5, r0, #2
 801e4aa:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e4ae:	42b3      	cmp	r3, r6
 801e4b0:	d902      	bls.n	801e4b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e4b2:	3001      	adds	r0, #1
 801e4b4:	b284      	uxth	r4, r0
 801e4b6:	e7f3      	b.n	801e4a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e4b8:	d201      	bcs.n	801e4be <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e4ba:	b281      	uxth	r1, r0
 801e4bc:	e7f0      	b.n	801e4a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e4be:	442a      	add	r2, r5
 801e4c0:	8850      	ldrh	r0, [r2, #2]
 801e4c2:	bd70      	pop	{r4, r5, r6, pc}
 801e4c4:	2000      	movs	r0, #0
 801e4c6:	e7fc      	b.n	801e4c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e4c8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4cc:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801e4ce:	886f      	ldrh	r7, [r5, #2]
 801e4d0:	4604      	mov	r4, r0
 801e4d2:	087f      	lsrs	r7, r7, #1
 801e4d4:	260b      	movs	r6, #11
 801e4d6:	3e01      	subs	r6, #1
 801e4d8:	d01b      	beq.n	801e512 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e4da:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e4dc:	b92b      	cbnz	r3, 801e4ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801e4de:	4b0e      	ldr	r3, [pc, #56]	; (801e518 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801e4e0:	4a0e      	ldr	r2, [pc, #56]	; (801e51c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801e4e2:	480f      	ldr	r0, [pc, #60]	; (801e520 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801e4e4:	21c0      	movs	r1, #192	; 0xc0
 801e4e6:	f00f fcb3 	bl	802de50 <__assert_func>
 801e4ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e4ec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e4f0:	462a      	mov	r2, r5
 801e4f2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e4f6:	4639      	mov	r1, r7
 801e4f8:	4643      	mov	r3, r8
 801e4fa:	4620      	mov	r0, r4
 801e4fc:	f7ff ffc6 	bl	801e48c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e500:	b138      	cbz	r0, 801e512 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e502:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e506:	4642      	mov	r2, r8
 801e508:	4620      	mov	r0, r4
 801e50a:	f7ff ff8b 	bl	801e424 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e50e:	2800      	cmp	r0, #0
 801e510:	d1e1      	bne.n	801e4d6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e516:	bf00      	nop
 801e518:	08032018 	.word	0x08032018
 801e51c:	0803228a 	.word	0x0803228a
 801e520:	08032021 	.word	0x08032021

0801e524 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 801e524:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e526:	b08d      	sub	sp, #52	; 0x34
 801e528:	2300      	movs	r3, #0
 801e52a:	9304      	str	r3, [sp, #16]
 801e52c:	9305      	str	r3, [sp, #20]
 801e52e:	9306      	str	r3, [sp, #24]
 801e530:	aa04      	add	r2, sp, #16
 801e532:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801e536:	9307      	str	r3, [sp, #28]
 801e538:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801e53c:	4613      	mov	r3, r2
 801e53e:	f101 0710 	add.w	r7, r1, #16
 801e542:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e580 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 801e546:	460c      	mov	r4, r1
 801e548:	4605      	mov	r5, r0
 801e54a:	ecb4 7a01 	vldmia	r4!, {s14}
 801e54e:	ecf5 6a01 	vldmia	r5!, {s13}
 801e552:	42bc      	cmp	r4, r7
 801e554:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e558:	d1f7      	bne.n	801e54a <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 801e55a:	3010      	adds	r0, #16
 801e55c:	42b0      	cmp	r0, r6
 801e55e:	ece2 7a01 	vstmia	r2!, {s15}
 801e562:	d1ee      	bne.n	801e542 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 801e564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e566:	ac0c      	add	r4, sp, #48	; 0x30
 801e568:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801e56c:	ed9d 0a08 	vldr	s0, [sp, #32]
 801e570:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 801e574:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 801e578:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 801e57c:	b00d      	add	sp, #52	; 0x34
 801e57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e580:	00000000 	.word	0x00000000

0801e584 <_ZN8touchgfx9Matrix4x4C1Ev>:
 801e584:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801e5b4 <_ZN8touchgfx9Matrix4x4C1Ev+0x30>
 801e588:	2300      	movs	r3, #0
 801e58a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e58e:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 801e592:	2200      	movs	r2, #0
 801e594:	4293      	cmp	r3, r2
 801e596:	f102 0201 	add.w	r2, r2, #1
 801e59a:	bf14      	ite	ne
 801e59c:	eef0 6a47 	vmovne.f32	s13, s14
 801e5a0:	eef0 6a67 	vmoveq.f32	s13, s15
 801e5a4:	2a04      	cmp	r2, #4
 801e5a6:	ece1 6a01 	vstmia	r1!, {s13}
 801e5aa:	d1f3      	bne.n	801e594 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 801e5ac:	3301      	adds	r3, #1
 801e5ae:	2b04      	cmp	r3, #4
 801e5b0:	d1ed      	bne.n	801e58e <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 801e5b2:	4770      	bx	lr
 801e5b4:	00000000 	.word	0x00000000

0801e5b8 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 801e5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5bc:	460c      	mov	r4, r1
 801e5be:	4605      	mov	r5, r0
 801e5c0:	4690      	mov	r8, r2
 801e5c2:	f7ff ffdf 	bl	801e584 <_ZN8touchgfx9Matrix4x4C1Ev>
 801e5c6:	4628      	mov	r0, r5
 801e5c8:	4621      	mov	r1, r4
 801e5ca:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801e5ce:	2300      	movs	r3, #0
 801e5d0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e610 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x58>
 801e5d4:	eb08 0603 	add.w	r6, r8, r3
 801e5d8:	460f      	mov	r7, r1
 801e5da:	2400      	movs	r4, #0
 801e5dc:	4632      	mov	r2, r6
 801e5de:	ecf7 6a01 	vldmia	r7!, {s13}
 801e5e2:	ed92 7a00 	vldr	s14, [r2]
 801e5e6:	3401      	adds	r4, #1
 801e5e8:	2c04      	cmp	r4, #4
 801e5ea:	f106 0610 	add.w	r6, r6, #16
 801e5ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e5f2:	d1f3      	bne.n	801e5dc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 801e5f4:	18c2      	adds	r2, r0, r3
 801e5f6:	3304      	adds	r3, #4
 801e5f8:	2b10      	cmp	r3, #16
 801e5fa:	edc2 7a00 	vstr	s15, [r2]
 801e5fe:	d1e7      	bne.n	801e5d0 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 801e600:	3110      	adds	r1, #16
 801e602:	4561      	cmp	r1, ip
 801e604:	f100 0010 	add.w	r0, r0, #16
 801e608:	d1e1      	bne.n	801e5ce <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 801e60a:	4628      	mov	r0, r5
 801e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e610:	00000000 	.word	0x00000000

0801e614 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 801e614:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e618:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801e61c:	f100 0320 	add.w	r3, r0, #32
 801e620:	3030      	adds	r0, #48	; 0x30
 801e622:	ecf3 7a01 	vldmia	r3!, {s15}
 801e626:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e62a:	4283      	cmp	r3, r0
 801e62c:	edc3 7a03 	vstr	s15, [r3, #12]
 801e630:	d1f7      	bne.n	801e622 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 801e632:	4770      	bx	lr

0801e634 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 801e634:	b510      	push	{r4, lr}
 801e636:	ed2d 8b02 	vpush	{d8}
 801e63a:	4604      	mov	r4, r0
 801e63c:	eef0 8a40 	vmov.f32	s17, s0
 801e640:	f00e fed4 	bl	802d3ec <sinf>
 801e644:	eeb0 8a40 	vmov.f32	s16, s0
 801e648:	eeb0 0a68 	vmov.f32	s0, s17
 801e64c:	f00e fe4c 	bl	802d2e8 <cosf>
 801e650:	f104 0310 	add.w	r3, r4, #16
 801e654:	f104 0220 	add.w	r2, r4, #32
 801e658:	eeb1 6a48 	vneg.f32	s12, s16
 801e65c:	edd3 7a04 	vldr	s15, [r3, #16]
 801e660:	edd3 6a00 	vldr	s13, [r3]
 801e664:	ee26 7a27 	vmul.f32	s14, s12, s15
 801e668:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e66c:	eea6 7a80 	vfma.f32	s14, s13, s0
 801e670:	eee6 7a88 	vfma.f32	s15, s13, s16
 801e674:	eca3 7a01 	vstmia	r3!, {s14}
 801e678:	429a      	cmp	r2, r3
 801e67a:	edc3 7a03 	vstr	s15, [r3, #12]
 801e67e:	d1ed      	bne.n	801e65c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 801e680:	ecbd 8b02 	vpop	{d8}
 801e684:	4620      	mov	r0, r4
 801e686:	bd10      	pop	{r4, pc}

0801e688 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 801e688:	b510      	push	{r4, lr}
 801e68a:	ed2d 8b02 	vpush	{d8}
 801e68e:	4604      	mov	r4, r0
 801e690:	eef0 8a40 	vmov.f32	s17, s0
 801e694:	f00e feaa 	bl	802d3ec <sinf>
 801e698:	eeb0 8a40 	vmov.f32	s16, s0
 801e69c:	eeb0 0a68 	vmov.f32	s0, s17
 801e6a0:	f00e fe22 	bl	802d2e8 <cosf>
 801e6a4:	4623      	mov	r3, r4
 801e6a6:	f104 0210 	add.w	r2, r4, #16
 801e6aa:	eeb1 6a48 	vneg.f32	s12, s16
 801e6ae:	edd3 7a08 	vldr	s15, [r3, #32]
 801e6b2:	edd3 6a00 	vldr	s13, [r3]
 801e6b6:	ee27 7a88 	vmul.f32	s14, s15, s16
 801e6ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e6be:	eea6 7a80 	vfma.f32	s14, s13, s0
 801e6c2:	eee6 7a26 	vfma.f32	s15, s12, s13
 801e6c6:	eca3 7a01 	vstmia	r3!, {s14}
 801e6ca:	429a      	cmp	r2, r3
 801e6cc:	edc3 7a07 	vstr	s15, [r3, #28]
 801e6d0:	d1ed      	bne.n	801e6ae <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 801e6d2:	ecbd 8b02 	vpop	{d8}
 801e6d6:	4620      	mov	r0, r4
 801e6d8:	bd10      	pop	{r4, pc}

0801e6da <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 801e6da:	b510      	push	{r4, lr}
 801e6dc:	ed2d 8b02 	vpush	{d8}
 801e6e0:	4604      	mov	r4, r0
 801e6e2:	eef0 8a40 	vmov.f32	s17, s0
 801e6e6:	f00e fe81 	bl	802d3ec <sinf>
 801e6ea:	eeb0 8a40 	vmov.f32	s16, s0
 801e6ee:	eeb0 0a68 	vmov.f32	s0, s17
 801e6f2:	f00e fdf9 	bl	802d2e8 <cosf>
 801e6f6:	4623      	mov	r3, r4
 801e6f8:	f104 0210 	add.w	r2, r4, #16
 801e6fc:	eeb1 6a48 	vneg.f32	s12, s16
 801e700:	edd3 7a04 	vldr	s15, [r3, #16]
 801e704:	edd3 6a00 	vldr	s13, [r3]
 801e708:	ee26 7a27 	vmul.f32	s14, s12, s15
 801e70c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e710:	eea6 7a80 	vfma.f32	s14, s13, s0
 801e714:	eee6 7a88 	vfma.f32	s15, s13, s16
 801e718:	eca3 7a01 	vstmia	r3!, {s14}
 801e71c:	429a      	cmp	r2, r3
 801e71e:	edc3 7a03 	vstr	s15, [r3, #12]
 801e722:	d1ed      	bne.n	801e700 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 801e724:	ecbd 8b02 	vpop	{d8}
 801e728:	4620      	mov	r0, r4
 801e72a:	bd10      	pop	{r4, pc}

0801e72c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 801e72c:	4603      	mov	r3, r0
 801e72e:	f100 0210 	add.w	r2, r0, #16
 801e732:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801e736:	edd3 7a00 	vldr	s15, [r3]
 801e73a:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e73e:	ece3 7a01 	vstmia	r3!, {s15}
 801e742:	4293      	cmp	r3, r2
 801e744:	d1f5      	bne.n	801e732 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 801e746:	4770      	bx	lr

0801e748 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 801e748:	f100 0310 	add.w	r3, r0, #16
 801e74c:	f100 0220 	add.w	r2, r0, #32
 801e750:	ed93 7a08 	vldr	s14, [r3, #32]
 801e754:	edd3 7a00 	vldr	s15, [r3]
 801e758:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e75c:	ece3 7a01 	vstmia	r3!, {s15}
 801e760:	4293      	cmp	r3, r2
 801e762:	d1f5      	bne.n	801e750 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 801e764:	4770      	bx	lr

0801e766 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 801e766:	f100 0320 	add.w	r3, r0, #32
 801e76a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801e76e:	ed93 7a04 	vldr	s14, [r3, #16]
 801e772:	edd3 7a00 	vldr	s15, [r3]
 801e776:	eee7 7a00 	vfma.f32	s15, s14, s0
 801e77a:	ece3 7a01 	vstmia	r3!, {s15}
 801e77e:	4293      	cmp	r3, r2
 801e780:	d1f5      	bne.n	801e76e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 801e782:	4770      	bx	lr

0801e784 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 801e784:	4603      	mov	r3, r0
 801e786:	f100 0210 	add.w	r2, r0, #16
 801e78a:	edd3 7a00 	vldr	s15, [r3]
 801e78e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e792:	ece3 7a01 	vstmia	r3!, {s15}
 801e796:	4293      	cmp	r3, r2
 801e798:	d1f7      	bne.n	801e78a <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 801e79a:	4770      	bx	lr

0801e79c <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 801e79c:	f100 0310 	add.w	r3, r0, #16
 801e7a0:	f100 0220 	add.w	r2, r0, #32
 801e7a4:	edd3 7a00 	vldr	s15, [r3]
 801e7a8:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e7ac:	ece3 7a01 	vstmia	r3!, {s15}
 801e7b0:	4293      	cmp	r3, r2
 801e7b2:	d1f7      	bne.n	801e7a4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 801e7b4:	4770      	bx	lr

0801e7b6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 801e7b6:	f100 0320 	add.w	r3, r0, #32
 801e7ba:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801e7be:	edd3 7a00 	vldr	s15, [r3]
 801e7c2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e7c6:	ece3 7a01 	vstmia	r3!, {s15}
 801e7ca:	4293      	cmp	r3, r2
 801e7cc:	d1f7      	bne.n	801e7be <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 801e7ce:	4770      	bx	lr

0801e7d0 <_ZN8touchgfx8ceil28_4El>:
 801e7d0:	f110 030f 	adds.w	r3, r0, #15
 801e7d4:	d401      	bmi.n	801e7da <_ZN8touchgfx8ceil28_4El+0xa>
 801e7d6:	1118      	asrs	r0, r3, #4
 801e7d8:	4770      	bx	lr
 801e7da:	f1c0 0001 	rsb	r0, r0, #1
 801e7de:	f010 000f 	ands.w	r0, r0, #15
 801e7e2:	bf18      	it	ne
 801e7e4:	2001      	movne	r0, #1
 801e7e6:	2210      	movs	r2, #16
 801e7e8:	fb93 f3f2 	sdiv	r3, r3, r2
 801e7ec:	1a18      	subs	r0, r3, r0
 801e7ee:	4770      	bx	lr

0801e7f0 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801e7f0:	2900      	cmp	r1, #0
 801e7f2:	b538      	push	{r3, r4, r5, lr}
 801e7f4:	dc05      	bgt.n	801e802 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801e7f6:	4b0f      	ldr	r3, [pc, #60]	; (801e834 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801e7f8:	4a0f      	ldr	r2, [pc, #60]	; (801e838 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801e7fa:	4810      	ldr	r0, [pc, #64]	; (801e83c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801e7fc:	21f7      	movs	r1, #247	; 0xf7
 801e7fe:	f00f fb27 	bl	802de50 <__assert_func>
 801e802:	2800      	cmp	r0, #0
 801e804:	db06      	blt.n	801e814 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801e806:	fb90 f4f1 	sdiv	r4, r0, r1
 801e80a:	6014      	str	r4, [r2, #0]
 801e80c:	fb01 0114 	mls	r1, r1, r4, r0
 801e810:	6019      	str	r1, [r3, #0]
 801e812:	bd38      	pop	{r3, r4, r5, pc}
 801e814:	4240      	negs	r0, r0
 801e816:	fb90 f4f1 	sdiv	r4, r0, r1
 801e81a:	4265      	negs	r5, r4
 801e81c:	fb01 0014 	mls	r0, r1, r4, r0
 801e820:	6015      	str	r5, [r2, #0]
 801e822:	6018      	str	r0, [r3, #0]
 801e824:	2800      	cmp	r0, #0
 801e826:	d0f4      	beq.n	801e812 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801e828:	6810      	ldr	r0, [r2, #0]
 801e82a:	3801      	subs	r0, #1
 801e82c:	6010      	str	r0, [r2, #0]
 801e82e:	6818      	ldr	r0, [r3, #0]
 801e830:	1a09      	subs	r1, r1, r0
 801e832:	e7ed      	b.n	801e810 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801e834:	080325e4 	.word	0x080325e4
 801e838:	08032623 	.word	0x08032623
 801e83c:	080325f4 	.word	0x080325f4

0801e840 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e840:	b570      	push	{r4, r5, r6, lr}
 801e842:	694a      	ldr	r2, [r1, #20]
 801e844:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801e846:	684b      	ldr	r3, [r1, #4]
 801e848:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801e84a:	1b54      	subs	r4, r2, r5
 801e84c:	f000 8106 	beq.w	801ea5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e850:	1b9b      	subs	r3, r3, r6
 801e852:	d003      	beq.n	801e85c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e854:	4363      	muls	r3, r4
 801e856:	2210      	movs	r2, #16
 801e858:	fb93 f3f2 	sdiv	r3, r3, r2
 801e85c:	680c      	ldr	r4, [r1, #0]
 801e85e:	698a      	ldr	r2, [r1, #24]
 801e860:	1b65      	subs	r5, r4, r5
 801e862:	f000 80fd 	beq.w	801ea60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e866:	1b92      	subs	r2, r2, r6
 801e868:	d003      	beq.n	801e872 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e86a:	436a      	muls	r2, r5
 801e86c:	2410      	movs	r4, #16
 801e86e:	fb92 f2f4 	sdiv	r2, r2, r4
 801e872:	1a9b      	subs	r3, r3, r2
 801e874:	ee07 3a90 	vmov	s15, r3
 801e878:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801ea9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e87c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e884:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e888:	460a      	mov	r2, r1
 801e88a:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e88e:	4603      	mov	r3, r0
 801e890:	f100 040c 	add.w	r4, r0, #12
 801e894:	eeb1 6a43 	vneg.f32	s12, s6
 801e898:	edd2 7a02 	vldr	s15, [r2, #8]
 801e89c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e8a0:	3214      	adds	r2, #20
 801e8a2:	ece3 6a01 	vstmia	r3!, {s13}
 801e8a6:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e8aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e8ae:	429c      	cmp	r4, r3
 801e8b0:	edc3 7a02 	vstr	s15, [r3, #8]
 801e8b4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e8b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e8bc:	edc3 7a05 	vstr	s15, [r3, #20]
 801e8c0:	d1ea      	bne.n	801e898 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e8c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e8c4:	698b      	ldr	r3, [r1, #24]
 801e8c6:	edd0 4a02 	vldr	s9, [r0, #8]
 801e8ca:	edd0 3a00 	vldr	s7, [r0]
 801e8ce:	edd0 6a01 	vldr	s13, [r0, #4]
 801e8d2:	ed90 5a05 	vldr	s10, [r0, #20]
 801e8d6:	ed90 2a03 	vldr	s4, [r0, #12]
 801e8da:	edd0 5a04 	vldr	s11, [r0, #16]
 801e8de:	ed90 1a07 	vldr	s2, [r0, #28]
 801e8e2:	edd0 2a06 	vldr	s5, [r0, #24]
 801e8e6:	1a9b      	subs	r3, r3, r2
 801e8e8:	ee07 3a90 	vmov	s15, r3
 801e8ec:	684b      	ldr	r3, [r1, #4]
 801e8ee:	1a9b      	subs	r3, r3, r2
 801e8f0:	ee07 3a10 	vmov	s14, r3
 801e8f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e8f8:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e8fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e900:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e904:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e908:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e90c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e910:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e914:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e918:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e91c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e920:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801e924:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e926:	694a      	ldr	r2, [r1, #20]
 801e928:	1b13      	subs	r3, r2, r4
 801e92a:	ee07 3a10 	vmov	s14, r3
 801e92e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e932:	680b      	ldr	r3, [r1, #0]
 801e934:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e938:	1b1b      	subs	r3, r3, r4
 801e93a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e93e:	ee07 3a10 	vmov	s14, r3
 801e942:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e946:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e94a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e94e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e952:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801e956:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e958:	698b      	ldr	r3, [r1, #24]
 801e95a:	1a9b      	subs	r3, r3, r2
 801e95c:	ee06 3a90 	vmov	s13, r3
 801e960:	684b      	ldr	r3, [r1, #4]
 801e962:	1a9b      	subs	r3, r3, r2
 801e964:	ee07 3a10 	vmov	s14, r3
 801e968:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e96c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e970:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e974:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e978:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e97c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e980:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e984:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801e988:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e98a:	694a      	ldr	r2, [r1, #20]
 801e98c:	1b13      	subs	r3, r2, r4
 801e98e:	ee07 3a10 	vmov	s14, r3
 801e992:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e996:	680b      	ldr	r3, [r1, #0]
 801e998:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e99c:	1b1b      	subs	r3, r3, r4
 801e99e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e9a2:	ee07 3a10 	vmov	s14, r3
 801e9a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e9aa:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e9ae:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e9b2:	edd0 5a08 	vldr	s11, [r0, #32]
 801e9b6:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e9ba:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e9be:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801e9c2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e9c4:	698b      	ldr	r3, [r1, #24]
 801e9c6:	1a9b      	subs	r3, r3, r2
 801e9c8:	ee07 3a10 	vmov	s14, r3
 801e9cc:	684b      	ldr	r3, [r1, #4]
 801e9ce:	1a9b      	subs	r3, r3, r2
 801e9d0:	ee01 3a90 	vmov	s3, r3
 801e9d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e9d8:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e9dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e9e0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e9e4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e9e8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e9ec:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e9f0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e9f4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e9f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e9fa:	694a      	ldr	r2, [r1, #20]
 801e9fc:	1b13      	subs	r3, r2, r4
 801e9fe:	ee03 3a10 	vmov	s6, r3
 801ea02:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ea06:	680b      	ldr	r3, [r1, #0]
 801ea08:	ee23 3a04 	vmul.f32	s6, s6, s8
 801ea0c:	1b1b      	subs	r3, r3, r4
 801ea0e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801ea12:	ee03 3a10 	vmov	s6, r3
 801ea16:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801ea1a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801ea1e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801ea22:	ee25 6a86 	vmul.f32	s12, s11, s12
 801ea26:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801ea2a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801ea2e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801ea32:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801ea36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea3a:	dd13      	ble.n	801ea64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801ea3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ea40:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801ea44:	63c3      	str	r3, [r0, #60]	; 0x3c
 801ea46:	eee3 7a87 	vfma.f32	s15, s7, s14
 801ea4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801ea4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea52:	dd15      	ble.n	801ea80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801ea54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ea58:	6403      	str	r3, [r0, #64]	; 0x40
 801ea5a:	bd70      	pop	{r4, r5, r6, pc}
 801ea5c:	4623      	mov	r3, r4
 801ea5e:	e6fd      	b.n	801e85c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ea60:	462a      	mov	r2, r5
 801ea62:	e706      	b.n	801e872 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ea64:	d502      	bpl.n	801ea6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801ea66:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ea6a:	e7e9      	b.n	801ea40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801ea6c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801ea70:	eea3 2a85 	vfma.f32	s4, s7, s10
 801ea74:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801ea78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea7c:	dade      	bge.n	801ea3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801ea7e:	e7f2      	b.n	801ea66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801ea80:	d502      	bpl.n	801ea88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801ea82:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ea86:	e7e7      	b.n	801ea58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801ea88:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801ea8c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801ea90:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801ea94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea98:	dadc      	bge.n	801ea54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801ea9a:	e7f2      	b.n	801ea82 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801ea9c:	3d800000 	.word	0x3d800000

0801eaa0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801eaa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaa4:	f04f 0814 	mov.w	r8, #20
 801eaa8:	fb08 f903 	mul.w	r9, r8, r3
 801eaac:	eb02 0a09 	add.w	sl, r2, r9
 801eab0:	4604      	mov	r4, r0
 801eab2:	f8da 0004 	ldr.w	r0, [sl, #4]
 801eab6:	4617      	mov	r7, r2
 801eab8:	460d      	mov	r5, r1
 801eaba:	461e      	mov	r6, r3
 801eabc:	f7ff fe88 	bl	801e7d0 <_ZN8touchgfx8ceil28_4El>
 801eac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eac2:	6160      	str	r0, [r4, #20]
 801eac4:	fb08 f803 	mul.w	r8, r8, r3
 801eac8:	eb07 0b08 	add.w	fp, r7, r8
 801eacc:	9001      	str	r0, [sp, #4]
 801eace:	f8db 0004 	ldr.w	r0, [fp, #4]
 801ead2:	f7ff fe7d 	bl	801e7d0 <_ZN8touchgfx8ceil28_4El>
 801ead6:	9a01      	ldr	r2, [sp, #4]
 801ead8:	1a80      	subs	r0, r0, r2
 801eada:	61a0      	str	r0, [r4, #24]
 801eadc:	2800      	cmp	r0, #0
 801eade:	f000 8088 	beq.w	801ebf2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801eae2:	f857 3009 	ldr.w	r3, [r7, r9]
 801eae6:	f857 c008 	ldr.w	ip, [r7, r8]
 801eaea:	f8da 1004 	ldr.w	r1, [sl, #4]
 801eaee:	f8db 0004 	ldr.w	r0, [fp, #4]
 801eaf2:	ebac 0c03 	sub.w	ip, ip, r3
 801eaf6:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801eafa:	fb0b f202 	mul.w	r2, fp, r2
 801eafe:	fb0c 2211 	mls	r2, ip, r1, r2
 801eb02:	1a40      	subs	r0, r0, r1
 801eb04:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801eb08:	fb00 2003 	mla	r0, r0, r3, r2
 801eb0c:	3801      	subs	r0, #1
 801eb0e:	f104 0310 	add.w	r3, r4, #16
 801eb12:	4622      	mov	r2, r4
 801eb14:	4641      	mov	r1, r8
 801eb16:	4440      	add	r0, r8
 801eb18:	f7ff fe6a 	bl	801e7f0 <_ZN8touchgfx11floorDivModEllRlS0_>
 801eb1c:	f104 0308 	add.w	r3, r4, #8
 801eb20:	1d22      	adds	r2, r4, #4
 801eb22:	4641      	mov	r1, r8
 801eb24:	4658      	mov	r0, fp
 801eb26:	f7ff fe63 	bl	801e7f0 <_ZN8touchgfx11floorDivModEllRlS0_>
 801eb2a:	f8c4 800c 	str.w	r8, [r4, #12]
 801eb2e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801eb32:	6962      	ldr	r2, [r4, #20]
 801eb34:	eddf 6a31 	vldr	s13, [pc, #196]	; 801ebfc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801eb38:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801eb3c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801eb40:	ee07 3a10 	vmov	s14, r3
 801eb44:	6822      	ldr	r2, [r4, #0]
 801eb46:	f857 3009 	ldr.w	r3, [r7, r9]
 801eb4a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801eb4e:	ee07 3a90 	vmov	s15, r3
 801eb52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801eb56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eb5a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801eb5e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801eb62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801eb66:	edd3 6a00 	vldr	s13, [r3]
 801eb6a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801eb6e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801eb72:	eee6 6a27 	vfma.f32	s13, s12, s15
 801eb76:	edc4 6a07 	vstr	s13, [r4, #28]
 801eb7a:	edd4 6a01 	vldr	s13, [r4, #4]
 801eb7e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801eb82:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801eb86:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801eb8a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801eb8e:	ed84 6a08 	vstr	s12, [r4, #32]
 801eb92:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801eb94:	6262      	str	r2, [r4, #36]	; 0x24
 801eb96:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801eb9a:	ed93 6a03 	vldr	s12, [r3, #12]
 801eb9e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801eba2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801eba6:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801ebaa:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801ebae:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801ebb2:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801ebb6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801ebba:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801ebbe:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801ebc0:	6322      	str	r2, [r4, #48]	; 0x30
 801ebc2:	ed93 6a06 	vldr	s12, [r3, #24]
 801ebc6:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801ebca:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ebce:	eeb0 7a46 	vmov.f32	s14, s12
 801ebd2:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801ebd6:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ebda:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801ebde:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801ebe2:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801ebe6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ebea:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801ebee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801ebf0:	63e3      	str	r3, [r4, #60]	; 0x3c
 801ebf2:	4620      	mov	r0, r4
 801ebf4:	b003      	add	sp, #12
 801ebf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebfa:	bf00      	nop
 801ebfc:	3d800000 	.word	0x3d800000

0801ec00 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801ec00:	4602      	mov	r2, r0
 801ec02:	b148      	cbz	r0, 801ec18 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801ec04:	2300      	movs	r3, #0
 801ec06:	b298      	uxth	r0, r3
 801ec08:	3301      	adds	r3, #1
 801ec0a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801ec0e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801ec12:	2900      	cmp	r1, #0
 801ec14:	d1f7      	bne.n	801ec06 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801ec16:	4770      	bx	lr
 801ec18:	4770      	bx	lr

0801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801ec1a:	b530      	push	{r4, r5, lr}
 801ec1c:	4604      	mov	r4, r0
 801ec1e:	b159      	cbz	r1, 801ec38 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801ec20:	b148      	cbz	r0, 801ec36 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801ec22:	2300      	movs	r3, #0
 801ec24:	b298      	uxth	r0, r3
 801ec26:	4282      	cmp	r2, r0
 801ec28:	d905      	bls.n	801ec36 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801ec2a:	5ccd      	ldrb	r5, [r1, r3]
 801ec2c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801ec30:	3301      	adds	r3, #1
 801ec32:	2d00      	cmp	r5, #0
 801ec34:	d1f6      	bne.n	801ec24 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801ec36:	bd30      	pop	{r4, r5, pc}
 801ec38:	4608      	mov	r0, r1
 801ec3a:	e7fc      	b.n	801ec36 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801ec3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801ec3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec3e:	b08b      	sub	sp, #44	; 0x2c
 801ec40:	468c      	mov	ip, r1
 801ec42:	2100      	movs	r1, #0
 801ec44:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ec48:	ae01      	add	r6, sp, #4
 801ec4a:	211f      	movs	r1, #31
 801ec4c:	fbb0 f7f3 	udiv	r7, r0, r3
 801ec50:	fb03 0517 	mls	r5, r3, r7, r0
 801ec54:	b2ec      	uxtb	r4, r5
 801ec56:	2d09      	cmp	r5, #9
 801ec58:	bfd4      	ite	le
 801ec5a:	3430      	addle	r4, #48	; 0x30
 801ec5c:	3457      	addgt	r4, #87	; 0x57
 801ec5e:	b2e4      	uxtb	r4, r4
 801ec60:	558c      	strb	r4, [r1, r6]
 801ec62:	4638      	mov	r0, r7
 801ec64:	1e4c      	subs	r4, r1, #1
 801ec66:	b92f      	cbnz	r7, 801ec74 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801ec68:	4431      	add	r1, r6
 801ec6a:	4660      	mov	r0, ip
 801ec6c:	f7ff ffd5 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ec70:	b00b      	add	sp, #44	; 0x2c
 801ec72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec74:	4621      	mov	r1, r4
 801ec76:	e7e9      	b.n	801ec4c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801ec78 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801ec78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec7a:	4607      	mov	r7, r0
 801ec7c:	b08b      	sub	sp, #44	; 0x2c
 801ec7e:	4608      	mov	r0, r1
 801ec80:	b341      	cbz	r1, 801ecd4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ec82:	1e99      	subs	r1, r3, #2
 801ec84:	2922      	cmp	r1, #34	; 0x22
 801ec86:	d825      	bhi.n	801ecd4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801ec88:	2100      	movs	r1, #0
 801ec8a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ec8e:	463c      	mov	r4, r7
 801ec90:	261f      	movs	r6, #31
 801ec92:	f10d 0c04 	add.w	ip, sp, #4
 801ec96:	fb94 fef3 	sdiv	lr, r4, r3
 801ec9a:	fb03 441e 	mls	r4, r3, lr, r4
 801ec9e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801eca2:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801eca6:	b2ec      	uxtb	r4, r5
 801eca8:	2d09      	cmp	r5, #9
 801ecaa:	bfd4      	ite	le
 801ecac:	3430      	addle	r4, #48	; 0x30
 801ecae:	3457      	addgt	r4, #87	; 0x57
 801ecb0:	b2e4      	uxtb	r4, r4
 801ecb2:	f80c 4006 	strb.w	r4, [ip, r6]
 801ecb6:	4674      	mov	r4, lr
 801ecb8:	1e71      	subs	r1, r6, #1
 801ecba:	b96c      	cbnz	r4, 801ecd8 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801ecbc:	2f00      	cmp	r7, #0
 801ecbe:	da05      	bge.n	801eccc <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801ecc0:	ab0a      	add	r3, sp, #40	; 0x28
 801ecc2:	4419      	add	r1, r3
 801ecc4:	232d      	movs	r3, #45	; 0x2d
 801ecc6:	f801 3c24 	strb.w	r3, [r1, #-36]
 801ecca:	1eb1      	subs	r1, r6, #2
 801eccc:	3101      	adds	r1, #1
 801ecce:	4461      	add	r1, ip
 801ecd0:	f7ff ffa3 	bl	801ec1a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ecd4:	b00b      	add	sp, #44	; 0x2c
 801ecd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ecd8:	460e      	mov	r6, r1
 801ecda:	e7dc      	b.n	801ec96 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801ecdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801ecdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ece0:	4691      	mov	r9, r2
 801ece2:	b085      	sub	sp, #20
 801ece4:	6802      	ldr	r2, [r0, #0]
 801ece6:	9201      	str	r2, [sp, #4]
 801ece8:	4688      	mov	r8, r1
 801ecea:	4683      	mov	fp, r0
 801ecec:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801ecf0:	9103      	str	r1, [sp, #12]
 801ecf2:	4610      	mov	r0, r2
 801ecf4:	461c      	mov	r4, r3
 801ecf6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ecfa:	9302      	str	r3, [sp, #8]
 801ecfc:	f7ff ff80 	bl	801ec00 <_ZN8touchgfx7Unicode6strlenEPKt>
 801ed00:	f1b8 0f00 	cmp.w	r8, #0
 801ed04:	bf0c      	ite	eq
 801ed06:	4684      	moveq	ip, r0
 801ed08:	f100 0c01 	addne.w	ip, r0, #1
 801ed0c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801ed10:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801ed14:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ed16:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ed18:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801ed1c:	9903      	ldr	r1, [sp, #12]
 801ed1e:	fa1f fc8c 	uxth.w	ip, ip
 801ed22:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801ed26:	d041      	beq.n	801edac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ed28:	d834      	bhi.n	801ed94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801ed2a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801ed2e:	d059      	beq.n	801ede4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801ed30:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801ed34:	d03a      	beq.n	801edac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801ed36:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801ed3a:	d034      	beq.n	801eda6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ed3c:	2400      	movs	r4, #0
 801ed3e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801ed42:	3a01      	subs	r2, #1
 801ed44:	b169      	cbz	r1, 801ed62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ed46:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ed48:	458c      	cmp	ip, r1
 801ed4a:	da09      	bge.n	801ed60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ed4c:	eba1 010c 	sub.w	r1, r1, ip
 801ed50:	b289      	uxth	r1, r1
 801ed52:	b933      	cbnz	r3, 801ed62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ed54:	2e00      	cmp	r6, #0
 801ed56:	d051      	beq.n	801edfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ed58:	2800      	cmp	r0, #0
 801ed5a:	d04f      	beq.n	801edfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801ed5c:	440c      	add	r4, r1
 801ed5e:	b2a4      	uxth	r4, r4
 801ed60:	2100      	movs	r1, #0
 801ed62:	682b      	ldr	r3, [r5, #0]
 801ed64:	4293      	cmp	r3, r2
 801ed66:	da07      	bge.n	801ed78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ed68:	f1b8 0f00 	cmp.w	r8, #0
 801ed6c:	d004      	beq.n	801ed78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ed6e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ed72:	682b      	ldr	r3, [r5, #0]
 801ed74:	3301      	adds	r3, #1
 801ed76:	602b      	str	r3, [r5, #0]
 801ed78:	2730      	movs	r7, #48	; 0x30
 801ed7a:	2c00      	cmp	r4, #0
 801ed7c:	d04e      	beq.n	801ee1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ed7e:	682e      	ldr	r6, [r5, #0]
 801ed80:	3c01      	subs	r4, #1
 801ed82:	42b2      	cmp	r2, r6
 801ed84:	b2a4      	uxth	r4, r4
 801ed86:	dd49      	ble.n	801ee1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ed88:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ed8c:	682b      	ldr	r3, [r5, #0]
 801ed8e:	3301      	adds	r3, #1
 801ed90:	602b      	str	r3, [r5, #0]
 801ed92:	e7f2      	b.n	801ed7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801ed94:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801ed98:	d01d      	beq.n	801edd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801ed9a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801ed9e:	d002      	beq.n	801eda6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801eda0:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801eda4:	e7c9      	b.n	801ed3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801eda6:	4684      	mov	ip, r0
 801eda8:	f04f 0800 	mov.w	r8, #0
 801edac:	2c00      	cmp	r4, #0
 801edae:	d0c6      	beq.n	801ed3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801edb0:	b947      	cbnz	r7, 801edc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801edb2:	2801      	cmp	r0, #1
 801edb4:	d106      	bne.n	801edc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801edb6:	8814      	ldrh	r4, [r2, #0]
 801edb8:	2c30      	cmp	r4, #48	; 0x30
 801edba:	bf02      	ittt	eq
 801edbc:	3202      	addeq	r2, #2
 801edbe:	f8cb 2000 	streq.w	r2, [fp]
 801edc2:	4638      	moveq	r0, r7
 801edc4:	45bc      	cmp	ip, r7
 801edc6:	da14      	bge.n	801edf2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801edc8:	b2bf      	uxth	r7, r7
 801edca:	eba7 040c 	sub.w	r4, r7, ip
 801edce:	b2a4      	uxth	r4, r4
 801edd0:	46bc      	mov	ip, r7
 801edd2:	2600      	movs	r6, #0
 801edd4:	e7b3      	b.n	801ed3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801edd6:	4684      	mov	ip, r0
 801edd8:	b16c      	cbz	r4, 801edf6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801edda:	42b8      	cmp	r0, r7
 801eddc:	dd00      	ble.n	801ede0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801edde:	b2b8      	uxth	r0, r7
 801ede0:	2400      	movs	r4, #0
 801ede2:	e003      	b.n	801edec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801ede4:	f04f 0c01 	mov.w	ip, #1
 801ede8:	2400      	movs	r4, #0
 801edea:	4660      	mov	r0, ip
 801edec:	4626      	mov	r6, r4
 801edee:	46a0      	mov	r8, r4
 801edf0:	e7a5      	b.n	801ed3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801edf2:	2400      	movs	r4, #0
 801edf4:	e7ed      	b.n	801edd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801edf6:	4626      	mov	r6, r4
 801edf8:	46a0      	mov	r8, r4
 801edfa:	e7a0      	b.n	801ed3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801edfc:	2900      	cmp	r1, #0
 801edfe:	d0b0      	beq.n	801ed62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ee00:	2720      	movs	r7, #32
 801ee02:	682e      	ldr	r6, [r5, #0]
 801ee04:	2900      	cmp	r1, #0
 801ee06:	d0ac      	beq.n	801ed62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ee08:	3901      	subs	r1, #1
 801ee0a:	4296      	cmp	r6, r2
 801ee0c:	b289      	uxth	r1, r1
 801ee0e:	daa7      	bge.n	801ed60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801ee10:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ee14:	682b      	ldr	r3, [r5, #0]
 801ee16:	3301      	adds	r3, #1
 801ee18:	602b      	str	r3, [r5, #0]
 801ee1a:	e7f2      	b.n	801ee02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801ee1c:	b188      	cbz	r0, 801ee42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ee1e:	682b      	ldr	r3, [r5, #0]
 801ee20:	3801      	subs	r0, #1
 801ee22:	429a      	cmp	r2, r3
 801ee24:	b280      	uxth	r0, r0
 801ee26:	dd0c      	ble.n	801ee42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801ee28:	f8db 3000 	ldr.w	r3, [fp]
 801ee2c:	1c9c      	adds	r4, r3, #2
 801ee2e:	f8cb 4000 	str.w	r4, [fp]
 801ee32:	881c      	ldrh	r4, [r3, #0]
 801ee34:	682b      	ldr	r3, [r5, #0]
 801ee36:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801ee3a:	682b      	ldr	r3, [r5, #0]
 801ee3c:	3301      	adds	r3, #1
 801ee3e:	602b      	str	r3, [r5, #0]
 801ee40:	e7ec      	b.n	801ee1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ee42:	2620      	movs	r6, #32
 801ee44:	b151      	cbz	r1, 801ee5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ee46:	6828      	ldr	r0, [r5, #0]
 801ee48:	3901      	subs	r1, #1
 801ee4a:	4282      	cmp	r2, r0
 801ee4c:	b289      	uxth	r1, r1
 801ee4e:	dd05      	ble.n	801ee5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801ee50:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801ee54:	682b      	ldr	r3, [r5, #0]
 801ee56:	3301      	adds	r3, #1
 801ee58:	602b      	str	r3, [r5, #0]
 801ee5a:	e7f3      	b.n	801ee44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801ee5c:	b005      	add	sp, #20
 801ee5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801ee62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ee66:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801ee6a:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801ee6e:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801ee72:	2400      	movs	r4, #0
 801ee74:	8014      	strh	r4, [r2, #0]
 801ee76:	701c      	strb	r4, [r3, #0]
 801ee78:	f888 4000 	strb.w	r4, [r8]
 801ee7c:	f88c 4000 	strb.w	r4, [ip]
 801ee80:	f88e 4000 	strb.w	r4, [lr]
 801ee84:	703c      	strb	r4, [r7, #0]
 801ee86:	6804      	ldr	r4, [r0, #0]
 801ee88:	b1a4      	cbz	r4, 801eeb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801ee8a:	8824      	ldrh	r4, [r4, #0]
 801ee8c:	f04f 0901 	mov.w	r9, #1
 801ee90:	b314      	cbz	r4, 801eed8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801ee92:	2c2b      	cmp	r4, #43	; 0x2b
 801ee94:	d001      	beq.n	801ee9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801ee96:	2c20      	cmp	r4, #32
 801ee98:	d110      	bne.n	801eebc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801ee9a:	8014      	strh	r4, [r2, #0]
 801ee9c:	6804      	ldr	r4, [r0, #0]
 801ee9e:	b10c      	cbz	r4, 801eea4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801eea0:	3402      	adds	r4, #2
 801eea2:	6004      	str	r4, [r0, #0]
 801eea4:	680c      	ldr	r4, [r1, #0]
 801eea6:	b10c      	cbz	r4, 801eeac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801eea8:	3401      	adds	r4, #1
 801eeaa:	600c      	str	r4, [r1, #0]
 801eeac:	6804      	ldr	r4, [r0, #0]
 801eeae:	b17c      	cbz	r4, 801eed0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801eeb0:	8824      	ldrh	r4, [r4, #0]
 801eeb2:	e7ed      	b.n	801ee90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801eeb4:	680c      	ldr	r4, [r1, #0]
 801eeb6:	b17c      	cbz	r4, 801eed8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801eeb8:	7824      	ldrb	r4, [r4, #0]
 801eeba:	e7e7      	b.n	801ee8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801eebc:	2c2d      	cmp	r4, #45	; 0x2d
 801eebe:	d102      	bne.n	801eec6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801eec0:	f883 9000 	strb.w	r9, [r3]
 801eec4:	e7ea      	b.n	801ee9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801eec6:	2c23      	cmp	r4, #35	; 0x23
 801eec8:	d107      	bne.n	801eeda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801eeca:	f888 9000 	strb.w	r9, [r8]
 801eece:	e7e5      	b.n	801ee9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801eed0:	680c      	ldr	r4, [r1, #0]
 801eed2:	b10c      	cbz	r4, 801eed8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801eed4:	7824      	ldrb	r4, [r4, #0]
 801eed6:	e7db      	b.n	801ee90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801eed8:	2400      	movs	r4, #0
 801eeda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801eede:	2b09      	cmp	r3, #9
 801eee0:	d901      	bls.n	801eee6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801eee2:	2c2a      	cmp	r4, #42	; 0x2a
 801eee4:	d122      	bne.n	801ef2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801eee6:	2301      	movs	r3, #1
 801eee8:	2c30      	cmp	r4, #48	; 0x30
 801eeea:	f88e 3000 	strb.w	r3, [lr]
 801eeee:	d10d      	bne.n	801ef0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801eef0:	f88c 3000 	strb.w	r3, [ip]
 801eef4:	6803      	ldr	r3, [r0, #0]
 801eef6:	b10b      	cbz	r3, 801eefc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801eef8:	3302      	adds	r3, #2
 801eefa:	6003      	str	r3, [r0, #0]
 801eefc:	680b      	ldr	r3, [r1, #0]
 801eefe:	b10b      	cbz	r3, 801ef04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801ef00:	3301      	adds	r3, #1
 801ef02:	600b      	str	r3, [r1, #0]
 801ef04:	6803      	ldr	r3, [r0, #0]
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	d02f      	beq.n	801ef6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801ef0a:	881c      	ldrh	r4, [r3, #0]
 801ef0c:	2c2a      	cmp	r4, #42	; 0x2a
 801ef0e:	d135      	bne.n	801ef7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ef10:	f04f 33ff 	mov.w	r3, #4294967295
 801ef14:	6033      	str	r3, [r6, #0]
 801ef16:	6803      	ldr	r3, [r0, #0]
 801ef18:	b10b      	cbz	r3, 801ef1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801ef1a:	3302      	adds	r3, #2
 801ef1c:	6003      	str	r3, [r0, #0]
 801ef1e:	680b      	ldr	r3, [r1, #0]
 801ef20:	b10b      	cbz	r3, 801ef26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801ef22:	3301      	adds	r3, #1
 801ef24:	600b      	str	r3, [r1, #0]
 801ef26:	6803      	ldr	r3, [r0, #0]
 801ef28:	b31b      	cbz	r3, 801ef72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801ef2a:	881c      	ldrh	r4, [r3, #0]
 801ef2c:	2c2e      	cmp	r4, #46	; 0x2e
 801ef2e:	d11a      	bne.n	801ef66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ef30:	2301      	movs	r3, #1
 801ef32:	703b      	strb	r3, [r7, #0]
 801ef34:	6803      	ldr	r3, [r0, #0]
 801ef36:	b10b      	cbz	r3, 801ef3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801ef38:	3302      	adds	r3, #2
 801ef3a:	6003      	str	r3, [r0, #0]
 801ef3c:	680b      	ldr	r3, [r1, #0]
 801ef3e:	b10b      	cbz	r3, 801ef44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801ef40:	3301      	adds	r3, #1
 801ef42:	600b      	str	r3, [r1, #0]
 801ef44:	6803      	ldr	r3, [r0, #0]
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d036      	beq.n	801efb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801ef4a:	881b      	ldrh	r3, [r3, #0]
 801ef4c:	2b2a      	cmp	r3, #42	; 0x2a
 801ef4e:	d137      	bne.n	801efc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ef50:	f04f 33ff 	mov.w	r3, #4294967295
 801ef54:	602b      	str	r3, [r5, #0]
 801ef56:	6803      	ldr	r3, [r0, #0]
 801ef58:	b10b      	cbz	r3, 801ef5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801ef5a:	3302      	adds	r3, #2
 801ef5c:	6003      	str	r3, [r0, #0]
 801ef5e:	680b      	ldr	r3, [r1, #0]
 801ef60:	b10b      	cbz	r3, 801ef66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ef62:	3301      	adds	r3, #1
 801ef64:	600b      	str	r3, [r1, #0]
 801ef66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ef6a:	680c      	ldr	r4, [r1, #0]
 801ef6c:	b134      	cbz	r4, 801ef7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801ef6e:	7824      	ldrb	r4, [r4, #0]
 801ef70:	e7cc      	b.n	801ef0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801ef72:	680b      	ldr	r3, [r1, #0]
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d0f6      	beq.n	801ef66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801ef78:	781c      	ldrb	r4, [r3, #0]
 801ef7a:	e7d7      	b.n	801ef2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ef7c:	2300      	movs	r3, #0
 801ef7e:	6033      	str	r3, [r6, #0]
 801ef80:	220a      	movs	r2, #10
 801ef82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ef86:	fa1f f38c 	uxth.w	r3, ip
 801ef8a:	2b09      	cmp	r3, #9
 801ef8c:	d8ce      	bhi.n	801ef2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801ef8e:	6833      	ldr	r3, [r6, #0]
 801ef90:	fb02 c303 	mla	r3, r2, r3, ip
 801ef94:	6033      	str	r3, [r6, #0]
 801ef96:	6803      	ldr	r3, [r0, #0]
 801ef98:	b10b      	cbz	r3, 801ef9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801ef9a:	3302      	adds	r3, #2
 801ef9c:	6003      	str	r3, [r0, #0]
 801ef9e:	680b      	ldr	r3, [r1, #0]
 801efa0:	b10b      	cbz	r3, 801efa6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801efa2:	3301      	adds	r3, #1
 801efa4:	600b      	str	r3, [r1, #0]
 801efa6:	6803      	ldr	r3, [r0, #0]
 801efa8:	b10b      	cbz	r3, 801efae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801efaa:	881c      	ldrh	r4, [r3, #0]
 801efac:	e7e9      	b.n	801ef82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801efae:	680c      	ldr	r4, [r1, #0]
 801efb0:	2c00      	cmp	r4, #0
 801efb2:	d0e6      	beq.n	801ef82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801efb4:	7824      	ldrb	r4, [r4, #0]
 801efb6:	e7e4      	b.n	801ef82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801efb8:	680b      	ldr	r3, [r1, #0]
 801efba:	b10b      	cbz	r3, 801efc0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801efbc:	781b      	ldrb	r3, [r3, #0]
 801efbe:	e7c5      	b.n	801ef4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801efc0:	2200      	movs	r2, #0
 801efc2:	602a      	str	r2, [r5, #0]
 801efc4:	240a      	movs	r4, #10
 801efc6:	3b30      	subs	r3, #48	; 0x30
 801efc8:	b29e      	uxth	r6, r3
 801efca:	2e09      	cmp	r6, #9
 801efcc:	682a      	ldr	r2, [r5, #0]
 801efce:	d813      	bhi.n	801eff8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801efd0:	fb04 3302 	mla	r3, r4, r2, r3
 801efd4:	602b      	str	r3, [r5, #0]
 801efd6:	6803      	ldr	r3, [r0, #0]
 801efd8:	b10b      	cbz	r3, 801efde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801efda:	3302      	adds	r3, #2
 801efdc:	6003      	str	r3, [r0, #0]
 801efde:	680b      	ldr	r3, [r1, #0]
 801efe0:	b10b      	cbz	r3, 801efe6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801efe2:	3301      	adds	r3, #1
 801efe4:	600b      	str	r3, [r1, #0]
 801efe6:	6803      	ldr	r3, [r0, #0]
 801efe8:	b10b      	cbz	r3, 801efee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801efea:	881b      	ldrh	r3, [r3, #0]
 801efec:	e7eb      	b.n	801efc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801efee:	680b      	ldr	r3, [r1, #0]
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	d0e8      	beq.n	801efc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801eff4:	781b      	ldrb	r3, [r3, #0]
 801eff6:	e7e6      	b.n	801efc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801eff8:	2a06      	cmp	r2, #6
 801effa:	bfa8      	it	ge
 801effc:	2206      	movge	r2, #6
 801effe:	602a      	str	r2, [r5, #0]
 801f000:	e7b1      	b.n	801ef66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801f002 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801f002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f006:	b0a3      	sub	sp, #140	; 0x8c
 801f008:	2600      	movs	r6, #0
 801f00a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801f00e:	4607      	mov	r7, r0
 801f010:	4688      	mov	r8, r1
 801f012:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f016:	4631      	mov	r1, r6
 801f018:	2242      	movs	r2, #66	; 0x42
 801f01a:	4648      	mov	r0, r9
 801f01c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801f01e:	960d      	str	r6, [sp, #52]	; 0x34
 801f020:	f00f f8a4 	bl	802e16c <memset>
 801f024:	b15f      	cbz	r7, 801f03e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801f026:	f108 3aff 	add.w	sl, r8, #4294967295
 801f02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f02e:	b152      	cbz	r2, 801f046 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801f030:	8812      	ldrh	r2, [r2, #0]
 801f032:	b10a      	cbz	r2, 801f038 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f034:	459a      	cmp	sl, r3
 801f036:	dc2e      	bgt.n	801f096 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801f038:	2200      	movs	r2, #0
 801f03a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f03e:	4638      	mov	r0, r7
 801f040:	b023      	add	sp, #140	; 0x8c
 801f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f046:	9a08      	ldr	r2, [sp, #32]
 801f048:	2a00      	cmp	r2, #0
 801f04a:	d0f5      	beq.n	801f038 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801f04c:	7812      	ldrb	r2, [r2, #0]
 801f04e:	e7f0      	b.n	801f032 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801f050:	2d00      	cmp	r5, #0
 801f052:	d0ea      	beq.n	801f02a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f054:	782a      	ldrb	r2, [r5, #0]
 801f056:	b142      	cbz	r2, 801f06a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801f058:	2a25      	cmp	r2, #37	; 0x25
 801f05a:	d001      	beq.n	801f060 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801f05c:	459a      	cmp	sl, r3
 801f05e:	dc08      	bgt.n	801f072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801f060:	f1bb 0f00 	cmp.w	fp, #0
 801f064:	d121      	bne.n	801f0aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801f066:	2d00      	cmp	r5, #0
 801f068:	d0df      	beq.n	801f02a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f06a:	782a      	ldrb	r2, [r5, #0]
 801f06c:	f04f 0b00 	mov.w	fp, #0
 801f070:	e01d      	b.n	801f0ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801f072:	f1bb 0f00 	cmp.w	fp, #0
 801f076:	d078      	beq.n	801f16a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 801f078:	f8bb 2000 	ldrh.w	r2, [fp]
 801f07c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f080:	f1bb 0f00 	cmp.w	fp, #0
 801f084:	d002      	beq.n	801f08c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801f086:	f10b 0202 	add.w	r2, fp, #2
 801f08a:	9209      	str	r2, [sp, #36]	; 0x24
 801f08c:	b10d      	cbz	r5, 801f092 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801f08e:	3501      	adds	r5, #1
 801f090:	9508      	str	r5, [sp, #32]
 801f092:	3301      	adds	r3, #1
 801f094:	930d      	str	r3, [sp, #52]	; 0x34
 801f096:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801f09a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f09c:	f1bb 0f00 	cmp.w	fp, #0
 801f0a0:	d0d6      	beq.n	801f050 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801f0a2:	f8bb 2000 	ldrh.w	r2, [fp]
 801f0a6:	2a00      	cmp	r2, #0
 801f0a8:	d1d6      	bne.n	801f058 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801f0aa:	f8bb 2000 	ldrh.w	r2, [fp]
 801f0ae:	2a00      	cmp	r2, #0
 801f0b0:	d0bb      	beq.n	801f02a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f0b2:	459a      	cmp	sl, r3
 801f0b4:	ddb9      	ble.n	801f02a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f0b6:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801f0ba:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801f0be:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801f0c2:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801f0c6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801f0ca:	960e      	str	r6, [sp, #56]	; 0x38
 801f0cc:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801f0d0:	960f      	str	r6, [sp, #60]	; 0x3c
 801f0d2:	f1bb 0f00 	cmp.w	fp, #0
 801f0d6:	d002      	beq.n	801f0de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801f0d8:	f10b 0302 	add.w	r3, fp, #2
 801f0dc:	9309      	str	r3, [sp, #36]	; 0x24
 801f0de:	b10d      	cbz	r5, 801f0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801f0e0:	1c6b      	adds	r3, r5, #1
 801f0e2:	9308      	str	r3, [sp, #32]
 801f0e4:	ab0f      	add	r3, sp, #60	; 0x3c
 801f0e6:	9305      	str	r3, [sp, #20]
 801f0e8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801f0ec:	9304      	str	r3, [sp, #16]
 801f0ee:	ab0e      	add	r3, sp, #56	; 0x38
 801f0f0:	9303      	str	r3, [sp, #12]
 801f0f2:	ab0c      	add	r3, sp, #48	; 0x30
 801f0f4:	9302      	str	r3, [sp, #8]
 801f0f6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801f0fa:	9301      	str	r3, [sp, #4]
 801f0fc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801f100:	9300      	str	r3, [sp, #0]
 801f102:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801f106:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801f10a:	a908      	add	r1, sp, #32
 801f10c:	a809      	add	r0, sp, #36	; 0x24
 801f10e:	f7ff fea8 	bl	801ee62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801f112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f114:	2b00      	cmp	r3, #0
 801f116:	bfbe      	ittt	lt
 801f118:	6823      	ldrlt	r3, [r4, #0]
 801f11a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f11e:	930e      	strlt	r3, [sp, #56]	; 0x38
 801f120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f122:	bfb8      	it	lt
 801f124:	3404      	addlt	r4, #4
 801f126:	2b00      	cmp	r3, #0
 801f128:	bfb8      	it	lt
 801f12a:	6823      	ldrlt	r3, [r4, #0]
 801f12c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f130:	bfbe      	ittt	lt
 801f132:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801f136:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801f138:	3404      	addlt	r4, #4
 801f13a:	b1d9      	cbz	r1, 801f174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801f13c:	880b      	ldrh	r3, [r1, #0]
 801f13e:	2b69      	cmp	r3, #105	; 0x69
 801f140:	d01f      	beq.n	801f182 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f142:	d82f      	bhi.n	801f1a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 801f144:	2b58      	cmp	r3, #88	; 0x58
 801f146:	d01c      	beq.n	801f182 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f148:	d818      	bhi.n	801f17c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801f14a:	2b25      	cmp	r3, #37	; 0x25
 801f14c:	d034      	beq.n	801f1b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801f14e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801f152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f154:	f1bb 0f00 	cmp.w	fp, #0
 801f158:	f000 80b8 	beq.w	801f2cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801f15c:	f8bb 5000 	ldrh.w	r5, [fp]
 801f160:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801f164:	3301      	adds	r3, #1
 801f166:	930d      	str	r3, [sp, #52]	; 0x34
 801f168:	e029      	b.n	801f1be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801f16a:	b10d      	cbz	r5, 801f170 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801f16c:	782a      	ldrb	r2, [r5, #0]
 801f16e:	e785      	b.n	801f07c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f170:	462a      	mov	r2, r5
 801f172:	e783      	b.n	801f07c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801f174:	2a00      	cmp	r2, #0
 801f176:	d0ea      	beq.n	801f14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f178:	7813      	ldrb	r3, [r2, #0]
 801f17a:	e7e0      	b.n	801f13e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801f17c:	3b63      	subs	r3, #99	; 0x63
 801f17e:	2b01      	cmp	r3, #1
 801f180:	d8e5      	bhi.n	801f14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f182:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801f186:	b329      	cbz	r1, 801f1d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 801f188:	880b      	ldrh	r3, [r1, #0]
 801f18a:	2b69      	cmp	r3, #105	; 0x69
 801f18c:	d063      	beq.n	801f256 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801f18e:	d825      	bhi.n	801f1dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 801f190:	2b63      	cmp	r3, #99	; 0x63
 801f192:	d038      	beq.n	801f206 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 801f194:	2b64      	cmp	r3, #100	; 0x64
 801f196:	d05e      	beq.n	801f256 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801f198:	2b58      	cmp	r3, #88	; 0x58
 801f19a:	d07b      	beq.n	801f294 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801f19c:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801f1a0:	4625      	mov	r5, r4
 801f1a2:	e036      	b.n	801f212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f1a4:	2b73      	cmp	r3, #115	; 0x73
 801f1a6:	d0ec      	beq.n	801f182 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f1a8:	d802      	bhi.n	801f1b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801f1aa:	2b6f      	cmp	r3, #111	; 0x6f
 801f1ac:	d1cf      	bne.n	801f14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801f1ae:	e7e8      	b.n	801f182 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f1b0:	2b75      	cmp	r3, #117	; 0x75
 801f1b2:	d0e6      	beq.n	801f182 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 801f1b4:	2b78      	cmp	r3, #120	; 0x78
 801f1b6:	e7f9      	b.n	801f1ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801f1b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f1ba:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801f1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1c0:	b10b      	cbz	r3, 801f1c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 801f1c2:	3302      	adds	r3, #2
 801f1c4:	9309      	str	r3, [sp, #36]	; 0x24
 801f1c6:	9b08      	ldr	r3, [sp, #32]
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	f43f af2e 	beq.w	801f02a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f1ce:	3301      	adds	r3, #1
 801f1d0:	9308      	str	r3, [sp, #32]
 801f1d2:	e72a      	b.n	801f02a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801f1d4:	2a00      	cmp	r2, #0
 801f1d6:	d0e1      	beq.n	801f19c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f1d8:	7813      	ldrb	r3, [r2, #0]
 801f1da:	e7d6      	b.n	801f18a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801f1dc:	2b73      	cmp	r3, #115	; 0x73
 801f1de:	d036      	beq.n	801f24e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801f1e0:	d807      	bhi.n	801f1f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 801f1e2:	2b6f      	cmp	r3, #111	; 0x6f
 801f1e4:	d1da      	bne.n	801f19c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f1e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f1e8:	1d25      	adds	r5, r4, #4
 801f1ea:	eba8 0202 	sub.w	r2, r8, r2
 801f1ee:	2308      	movs	r3, #8
 801f1f0:	e04a      	b.n	801f288 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801f1f2:	2b75      	cmp	r3, #117	; 0x75
 801f1f4:	d043      	beq.n	801f27e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 801f1f6:	2b78      	cmp	r3, #120	; 0x78
 801f1f8:	d1d0      	bne.n	801f19c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 801f1fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f1fc:	1d25      	adds	r5, r4, #4
 801f1fe:	eba8 0202 	sub.w	r2, r8, r2
 801f202:	2310      	movs	r3, #16
 801f204:	e040      	b.n	801f288 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 801f206:	7823      	ldrb	r3, [r4, #0]
 801f208:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801f20c:	1d25      	adds	r5, r4, #4
 801f20e:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801f212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f214:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801f218:	2b00      	cmp	r3, #0
 801f21a:	d052      	beq.n	801f2c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 801f21c:	881a      	ldrh	r2, [r3, #0]
 801f21e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801f222:	a80d      	add	r0, sp, #52	; 0x34
 801f224:	9005      	str	r0, [sp, #20]
 801f226:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801f22a:	9004      	str	r0, [sp, #16]
 801f22c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f22e:	9003      	str	r0, [sp, #12]
 801f230:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801f234:	9002      	str	r0, [sp, #8]
 801f236:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f238:	9001      	str	r0, [sp, #4]
 801f23a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801f23e:	9000      	str	r0, [sp, #0]
 801f240:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801f244:	a810      	add	r0, sp, #64	; 0x40
 801f246:	f7ff fd49 	bl	801ecdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801f24a:	462c      	mov	r4, r5
 801f24c:	e7b7      	b.n	801f1be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801f24e:	6823      	ldr	r3, [r4, #0]
 801f250:	1d25      	adds	r5, r4, #4
 801f252:	9310      	str	r3, [sp, #64]	; 0x40
 801f254:	e7dd      	b.n	801f212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f258:	6820      	ldr	r0, [r4, #0]
 801f25a:	eba8 0202 	sub.w	r2, r8, r2
 801f25e:	230a      	movs	r3, #10
 801f260:	b292      	uxth	r2, r2
 801f262:	4649      	mov	r1, r9
 801f264:	f7ff fd08 	bl	801ec78 <_ZN8touchgfx7Unicode4itoaElPtti>
 801f268:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801f26c:	2b2d      	cmp	r3, #45	; 0x2d
 801f26e:	f104 0504 	add.w	r5, r4, #4
 801f272:	d1ce      	bne.n	801f212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f274:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f278:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f27a:	3302      	adds	r3, #2
 801f27c:	e7e9      	b.n	801f252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801f27e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f280:	1d25      	adds	r5, r4, #4
 801f282:	eba8 0202 	sub.w	r2, r8, r2
 801f286:	230a      	movs	r3, #10
 801f288:	b292      	uxth	r2, r2
 801f28a:	4649      	mov	r1, r9
 801f28c:	6820      	ldr	r0, [r4, #0]
 801f28e:	f7ff fcd5 	bl	801ec3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801f292:	e7be      	b.n	801f212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f296:	6820      	ldr	r0, [r4, #0]
 801f298:	eba8 0202 	sub.w	r2, r8, r2
 801f29c:	b292      	uxth	r2, r2
 801f29e:	2310      	movs	r3, #16
 801f2a0:	4649      	mov	r1, r9
 801f2a2:	f7ff fccb 	bl	801ec3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801f2a6:	1d25      	adds	r5, r4, #4
 801f2a8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801f2ac:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	d0ae      	beq.n	801f212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 801f2b4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801f2b8:	2919      	cmp	r1, #25
 801f2ba:	d8f7      	bhi.n	801f2ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801f2bc:	3b20      	subs	r3, #32
 801f2be:	8013      	strh	r3, [r2, #0]
 801f2c0:	e7f4      	b.n	801f2ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801f2c2:	9a08      	ldr	r2, [sp, #32]
 801f2c4:	2a00      	cmp	r2, #0
 801f2c6:	d0aa      	beq.n	801f21e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801f2c8:	7812      	ldrb	r2, [r2, #0]
 801f2ca:	e7a8      	b.n	801f21e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801f2cc:	2d00      	cmp	r5, #0
 801f2ce:	f43f af47 	beq.w	801f160 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 801f2d2:	782d      	ldrb	r5, [r5, #0]
 801f2d4:	e744      	b.n	801f160 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

0801f2d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801f2d6:	b507      	push	{r0, r1, r2, lr}
 801f2d8:	9300      	str	r3, [sp, #0]
 801f2da:	4613      	mov	r3, r2
 801f2dc:	2200      	movs	r2, #0
 801f2de:	f7ff fe90 	bl	801f002 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801f2e2:	b003      	add	sp, #12
 801f2e4:	f85d fb04 	ldr.w	pc, [sp], #4

0801f2e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801f2e8:	b40c      	push	{r2, r3}
 801f2ea:	b507      	push	{r0, r1, r2, lr}
 801f2ec:	ab04      	add	r3, sp, #16
 801f2ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2f2:	9301      	str	r3, [sp, #4]
 801f2f4:	f7ff ffef 	bl	801f2d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801f2f8:	b003      	add	sp, #12
 801f2fa:	f85d eb04 	ldr.w	lr, [sp], #4
 801f2fe:	b002      	add	sp, #8
 801f300:	4770      	bx	lr
	...

0801f304 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 801f304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f308:	b0c3      	sub	sp, #268	; 0x10c
 801f30a:	2600      	movs	r6, #0
 801f30c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 801f310:	4607      	mov	r7, r0
 801f312:	4689      	mov	r9, r1
 801f314:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f318:	4631      	mov	r1, r6
 801f31a:	22c8      	movs	r2, #200	; 0xc8
 801f31c:	4640      	mov	r0, r8
 801f31e:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 801f322:	960c      	str	r6, [sp, #48]	; 0x30
 801f324:	f00e ff22 	bl	802e16c <memset>
 801f328:	b16f      	cbz	r7, 801f346 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x42>
 801f32a:	f04f 0b0a 	mov.w	fp, #10
 801f32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f332:	b162      	cbz	r2, 801f34e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4a>
 801f334:	8812      	ldrh	r2, [r2, #0]
 801f336:	b11a      	cbz	r2, 801f340 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801f338:	f109 31ff 	add.w	r1, r9, #4294967295
 801f33c:	4299      	cmp	r1, r3
 801f33e:	dc26      	bgt.n	801f38e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 801f340:	2200      	movs	r2, #0
 801f342:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f346:	4638      	mov	r0, r7
 801f348:	b043      	add	sp, #268	; 0x10c
 801f34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f34e:	9a08      	ldr	r2, [sp, #32]
 801f350:	2a00      	cmp	r2, #0
 801f352:	d0f5      	beq.n	801f340 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x3c>
 801f354:	7812      	ldrb	r2, [r2, #0]
 801f356:	e7ee      	b.n	801f336 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32>
 801f358:	2c00      	cmp	r4, #0
 801f35a:	d0e8      	beq.n	801f32e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f35c:	7822      	ldrb	r2, [r4, #0]
 801f35e:	b132      	cbz	r2, 801f36e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6a>
 801f360:	2a25      	cmp	r2, #37	; 0x25
 801f362:	d001      	beq.n	801f368 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x64>
 801f364:	4299      	cmp	r1, r3
 801f366:	dc05      	bgt.n	801f374 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x70>
 801f368:	b9cd      	cbnz	r5, 801f39e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9a>
 801f36a:	2c00      	cmp	r4, #0
 801f36c:	d0df      	beq.n	801f32e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f36e:	7822      	ldrb	r2, [r4, #0]
 801f370:	2500      	movs	r5, #0
 801f372:	e015      	b.n	801f3a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9c>
 801f374:	2d00      	cmp	r5, #0
 801f376:	d073      	beq.n	801f460 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x15c>
 801f378:	882a      	ldrh	r2, [r5, #0]
 801f37a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f37e:	b10d      	cbz	r5, 801f384 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x80>
 801f380:	3502      	adds	r5, #2
 801f382:	9509      	str	r5, [sp, #36]	; 0x24
 801f384:	b10c      	cbz	r4, 801f38a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x86>
 801f386:	3401      	adds	r4, #1
 801f388:	9408      	str	r4, [sp, #32]
 801f38a:	3301      	adds	r3, #1
 801f38c:	930c      	str	r3, [sp, #48]	; 0x30
 801f38e:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801f392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f394:	2d00      	cmp	r5, #0
 801f396:	d0df      	beq.n	801f358 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x54>
 801f398:	882a      	ldrh	r2, [r5, #0]
 801f39a:	2a00      	cmp	r2, #0
 801f39c:	d1e0      	bne.n	801f360 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x5c>
 801f39e:	882a      	ldrh	r2, [r5, #0]
 801f3a0:	2a00      	cmp	r2, #0
 801f3a2:	d0c4      	beq.n	801f32e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f3a4:	4299      	cmp	r1, r3
 801f3a6:	ddc2      	ble.n	801f32e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f3a8:	2300      	movs	r3, #0
 801f3aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f3b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f3b6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801f3ba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801f3be:	930d      	str	r3, [sp, #52]	; 0x34
 801f3c0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801f3c4:	930e      	str	r3, [sp, #56]	; 0x38
 801f3c6:	b10d      	cbz	r5, 801f3cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xc8>
 801f3c8:	1cab      	adds	r3, r5, #2
 801f3ca:	9309      	str	r3, [sp, #36]	; 0x24
 801f3cc:	b10c      	cbz	r4, 801f3d2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xce>
 801f3ce:	1c63      	adds	r3, r4, #1
 801f3d0:	9308      	str	r3, [sp, #32]
 801f3d2:	ab0e      	add	r3, sp, #56	; 0x38
 801f3d4:	9305      	str	r3, [sp, #20]
 801f3d6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801f3da:	9304      	str	r3, [sp, #16]
 801f3dc:	ab0d      	add	r3, sp, #52	; 0x34
 801f3de:	9303      	str	r3, [sp, #12]
 801f3e0:	ab0b      	add	r3, sp, #44	; 0x2c
 801f3e2:	9302      	str	r3, [sp, #8]
 801f3e4:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801f3e8:	9301      	str	r3, [sp, #4]
 801f3ea:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801f3ee:	9300      	str	r3, [sp, #0]
 801f3f0:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 801f3f4:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 801f3f8:	a908      	add	r1, sp, #32
 801f3fa:	a809      	add	r0, sp, #36	; 0x24
 801f3fc:	f7ff fd31 	bl	801ee62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801f400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f402:	2b00      	cmp	r3, #0
 801f404:	da0b      	bge.n	801f41e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11a>
 801f406:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f40a:	edd3 7a00 	vldr	s15, [r3]
 801f40e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f412:	3601      	adds	r6, #1
 801f414:	ee17 3a90 	vmov	r3, s15
 801f418:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f41c:	930d      	str	r3, [sp, #52]	; 0x34
 801f41e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f420:	2b00      	cmp	r3, #0
 801f422:	da0b      	bge.n	801f43c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x138>
 801f424:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f428:	edd3 7a00 	vldr	s15, [r3]
 801f42c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f430:	3601      	adds	r6, #1
 801f432:	ee17 3a90 	vmov	r3, s15
 801f436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f43a:	930e      	str	r3, [sp, #56]	; 0x38
 801f43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f43e:	b1a3      	cbz	r3, 801f46a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 801f440:	881a      	ldrh	r2, [r3, #0]
 801f442:	2a25      	cmp	r2, #37	; 0x25
 801f444:	d016      	beq.n	801f474 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x170>
 801f446:	2a66      	cmp	r2, #102	; 0x66
 801f448:	d01a      	beq.n	801f480 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 801f44a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 801f44e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f450:	2d00      	cmp	r5, #0
 801f452:	f000 80fd 	beq.w	801f650 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x34c>
 801f456:	882c      	ldrh	r4, [r5, #0]
 801f458:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801f45c:	3301      	adds	r3, #1
 801f45e:	e00d      	b.n	801f47c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x178>
 801f460:	b10c      	cbz	r4, 801f466 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x162>
 801f462:	7822      	ldrb	r2, [r4, #0]
 801f464:	e789      	b.n	801f37a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801f466:	4622      	mov	r2, r4
 801f468:	e787      	b.n	801f37a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x76>
 801f46a:	9b08      	ldr	r3, [sp, #32]
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d0ec      	beq.n	801f44a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x146>
 801f470:	781a      	ldrb	r2, [r3, #0]
 801f472:	e7e6      	b.n	801f442 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13e>
 801f474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f476:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801f47a:	3302      	adds	r3, #2
 801f47c:	930c      	str	r3, [sp, #48]	; 0x30
 801f47e:	e04b      	b.n	801f518 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x214>
 801f480:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 801f484:	ed93 7a00 	vldr	s14, [r3]
 801f488:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801f48c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 801f490:	3601      	adds	r6, #1
 801f492:	b923      	cbnz	r3, 801f49e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19a>
 801f494:	2301      	movs	r3, #1
 801f496:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 801f49a:	2306      	movs	r3, #6
 801f49c:	930e      	str	r3, [sp, #56]	; 0x38
 801f49e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801f4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4a6:	bf48      	it	mi
 801f4a8:	eeb1 7a47 	vnegmi.f32	s14, s14
 801f4ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801f4b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 801f4b4:	bf48      	it	mi
 801f4b6:	232d      	movmi	r3, #45	; 0x2d
 801f4b8:	eef4 6a47 	vcmp.f32	s13, s14
 801f4bc:	bf48      	it	mi
 801f4be:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801f4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4c6:	d132      	bne.n	801f52e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801f4c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f4cc:	eef4 7a47 	vcmp.f32	s15, s14
 801f4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4d4:	d12b      	bne.n	801f52e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x22a>
 801f4d6:	4b61      	ldr	r3, [pc, #388]	; (801f65c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x358>)
 801f4d8:	9310      	str	r3, [sp, #64]	; 0x40
 801f4da:	2366      	movs	r3, #102	; 0x66
 801f4dc:	9311      	str	r3, [sp, #68]	; 0x44
 801f4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4e0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	f000 80ad 	beq.w	801f644 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x340>
 801f4ea:	881a      	ldrh	r2, [r3, #0]
 801f4ec:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801f4f0:	a80c      	add	r0, sp, #48	; 0x30
 801f4f2:	9005      	str	r0, [sp, #20]
 801f4f4:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 801f4f8:	9004      	str	r0, [sp, #16]
 801f4fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f4fc:	9003      	str	r0, [sp, #12]
 801f4fe:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801f502:	9002      	str	r0, [sp, #8]
 801f504:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f506:	9001      	str	r0, [sp, #4]
 801f508:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 801f50c:	9000      	str	r0, [sp, #0]
 801f50e:	e9cd 9706 	strd	r9, r7, [sp, #24]
 801f512:	a80f      	add	r0, sp, #60	; 0x3c
 801f514:	f7ff fbe2 	bl	801ecdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801f518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f51a:	b10b      	cbz	r3, 801f520 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21c>
 801f51c:	3302      	adds	r3, #2
 801f51e:	9309      	str	r3, [sp, #36]	; 0x24
 801f520:	9b08      	ldr	r3, [sp, #32]
 801f522:	2b00      	cmp	r3, #0
 801f524:	f43f af03 	beq.w	801f32e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f528:	3301      	adds	r3, #1
 801f52a:	9308      	str	r3, [sp, #32]
 801f52c:	e6ff      	b.n	801f32e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2a>
 801f52e:	eeb4 7a47 	vcmp.f32	s14, s14
 801f532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f536:	d10b      	bne.n	801f550 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x24c>
 801f538:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f53a:	eddf 7a49 	vldr	s15, [pc, #292]	; 801f660 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x35c>
 801f53e:	2300      	movs	r3, #0
 801f540:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801f544:	4283      	cmp	r3, r0
 801f546:	da07      	bge.n	801f558 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x254>
 801f548:	eec7 7a86 	vdiv.f32	s15, s15, s12
 801f54c:	3301      	adds	r3, #1
 801f54e:	e7f9      	b.n	801f544 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x240>
 801f550:	4b44      	ldr	r3, [pc, #272]	; (801f664 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x360>)
 801f552:	9310      	str	r3, [sp, #64]	; 0x40
 801f554:	236e      	movs	r3, #110	; 0x6e
 801f556:	e7c1      	b.n	801f4dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1d8>
 801f558:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f55c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f560:	eeb0 7a67 	vmov.f32	s14, s15
 801f564:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801f568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f56c:	da27      	bge.n	801f5be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ba>
 801f56e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f570:	2100      	movs	r1, #0
 801f572:	eba9 0202 	sub.w	r2, r9, r2
 801f576:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801f57a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801f57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f582:	b28c      	uxth	r4, r1
 801f584:	db21      	blt.n	801f5ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801f586:	1a53      	subs	r3, r2, r1
 801f588:	2b00      	cmp	r3, #0
 801f58a:	dd1e      	ble.n	801f5ca <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c6>
 801f58c:	2963      	cmp	r1, #99	; 0x63
 801f58e:	d01b      	beq.n	801f5c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 801f590:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801f594:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801f598:	ee17 3a10 	vmov	r3, s14
 801f59c:	2b09      	cmp	r3, #9
 801f59e:	bfa8      	it	ge
 801f5a0:	2309      	movge	r3, #9
 801f5a2:	ee07 3a10 	vmov	s14, r3
 801f5a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f5aa:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801f5ae:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 801f5b2:	eee7 7a66 	vfms.f32	s15, s14, s13
 801f5b6:	3101      	adds	r1, #1
 801f5b8:	eec6 6a86 	vdiv.f32	s13, s13, s12
 801f5bc:	e7dd      	b.n	801f57a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x276>
 801f5be:	ee66 6a86 	vmul.f32	s13, s13, s12
 801f5c2:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801f5c6:	e7cd      	b.n	801f564 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x260>
 801f5c8:	460c      	mov	r4, r1
 801f5ca:	2a63      	cmp	r2, #99	; 0x63
 801f5cc:	bfd4      	ite	le
 801f5ce:	ebc4 0202 	rsble	r2, r4, r2
 801f5d2:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 801f5d6:	2a00      	cmp	r2, #0
 801f5d8:	dd2f      	ble.n	801f63a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x336>
 801f5da:	4603      	mov	r3, r0
 801f5dc:	2501      	movs	r5, #1
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	dd0d      	ble.n	801f5fe <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2fa>
 801f5e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801f5e6:	3b01      	subs	r3, #1
 801f5e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f5ec:	ee17 1a10 	vmov	r1, s14
 801f5f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f5f4:	fb0b 1505 	mla	r5, fp, r5, r1
 801f5f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f5fc:	e7ef      	b.n	801f5de <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2da>
 801f5fe:	2800      	cmp	r0, #0
 801f600:	f100 33ff 	add.w	r3, r0, #4294967295
 801f604:	bfac      	ite	ge
 801f606:	1a18      	subge	r0, r3, r0
 801f608:	4618      	movlt	r0, r3
 801f60a:	0064      	lsls	r4, r4, #1
 801f60c:	900e      	str	r0, [sp, #56]	; 0x38
 801f60e:	230a      	movs	r3, #10
 801f610:	b292      	uxth	r2, r2
 801f612:	eb08 0104 	add.w	r1, r8, r4
 801f616:	4628      	mov	r0, r5
 801f618:	f7ff fb2e 	bl	801ec78 <_ZN8touchgfx7Unicode4itoaElPtti>
 801f61c:	2d01      	cmp	r5, #1
 801f61e:	dc0a      	bgt.n	801f636 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 801f620:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 801f624:	2b00      	cmp	r3, #0
 801f626:	bf0c      	ite	eq
 801f628:	2300      	moveq	r3, #0
 801f62a:	232e      	movne	r3, #46	; 0x2e
 801f62c:	aa42      	add	r2, sp, #264	; 0x108
 801f62e:	4414      	add	r4, r2
 801f630:	f824 3cc8 	strh.w	r3, [r4, #-200]
 801f634:	e753      	b.n	801f4de <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 801f636:	232e      	movs	r3, #46	; 0x2e
 801f638:	e7f8      	b.n	801f62c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x328>
 801f63a:	ab42      	add	r3, sp, #264	; 0x108
 801f63c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801f640:	2300      	movs	r3, #0
 801f642:	e7f5      	b.n	801f630 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32c>
 801f644:	9a08      	ldr	r2, [sp, #32]
 801f646:	2a00      	cmp	r2, #0
 801f648:	f43f af50 	beq.w	801f4ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801f64c:	7812      	ldrb	r2, [r2, #0]
 801f64e:	e74d      	b.n	801f4ec <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1e8>
 801f650:	2c00      	cmp	r4, #0
 801f652:	f43f af01 	beq.w	801f458 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801f656:	7824      	ldrb	r4, [r4, #0]
 801f658:	e6fe      	b.n	801f458 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x154>
 801f65a:	bf00      	nop
 801f65c:	006e0069 	.word	0x006e0069
 801f660:	3f000002 	.word	0x3f000002
 801f664:	0061006e 	.word	0x0061006e

0801f668 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 801f668:	b507      	push	{r0, r1, r2, lr}
 801f66a:	9300      	str	r3, [sp, #0]
 801f66c:	4613      	mov	r3, r2
 801f66e:	2200      	movs	r2, #0
 801f670:	f7ff fe48 	bl	801f304 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 801f674:	b003      	add	sp, #12
 801f676:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f67c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801f67c:	4b01      	ldr	r3, [pc, #4]	; (801f684 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801f67e:	6018      	str	r0, [r3, #0]
 801f680:	4770      	bx	lr
 801f682:	bf00      	nop
 801f684:	20009808 	.word	0x20009808

0801f688 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801f688:	4b06      	ldr	r3, [pc, #24]	; (801f6a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801f68a:	881a      	ldrh	r2, [r3, #0]
 801f68c:	4282      	cmp	r2, r0
 801f68e:	d807      	bhi.n	801f6a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801f690:	4b05      	ldr	r3, [pc, #20]	; (801f6a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801f692:	881b      	ldrh	r3, [r3, #0]
 801f694:	4413      	add	r3, r2
 801f696:	4298      	cmp	r0, r3
 801f698:	bfac      	ite	ge
 801f69a:	2000      	movge	r0, #0
 801f69c:	2001      	movlt	r0, #1
 801f69e:	4770      	bx	lr
 801f6a0:	2000      	movs	r0, #0
 801f6a2:	4770      	bx	lr
 801f6a4:	20009828 	.word	0x20009828
 801f6a8:	2000982c 	.word	0x2000982c

0801f6ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801f6ac:	b508      	push	{r3, lr}
 801f6ae:	4601      	mov	r1, r0
 801f6b0:	f7ff ffea 	bl	801f688 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801f6b4:	b118      	cbz	r0, 801f6be <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801f6b6:	4b02      	ldr	r3, [pc, #8]	; (801f6c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801f6be:	bd08      	pop	{r3, pc}
 801f6c0:	2000980c 	.word	0x2000980c

0801f6c4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801f6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6c8:	4d28      	ldr	r5, [pc, #160]	; (801f76c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801f6ca:	682b      	ldr	r3, [r5, #0]
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	d04a      	beq.n	801f766 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801f6d0:	4a27      	ldr	r2, [pc, #156]	; (801f770 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801f6d2:	4e28      	ldr	r6, [pc, #160]	; (801f774 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801f6d4:	8810      	ldrh	r0, [r2, #0]
 801f6d6:	f8b6 8000 	ldrh.w	r8, [r6]
 801f6da:	4c27      	ldr	r4, [pc, #156]	; (801f778 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801f6dc:	4f27      	ldr	r7, [pc, #156]	; (801f77c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801f6de:	4440      	add	r0, r8
 801f6e0:	1c41      	adds	r1, r0, #1
 801f6e2:	f021 0101 	bic.w	r1, r1, #1
 801f6e6:	0409      	lsls	r1, r1, #16
 801f6e8:	0c09      	lsrs	r1, r1, #16
 801f6ea:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801f6ee:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801f6f2:	eb03 020e 	add.w	r2, r3, lr
 801f6f6:	eb0e 010c 	add.w	r1, lr, ip
 801f6fa:	6022      	str	r2, [r4, #0]
 801f6fc:	185a      	adds	r2, r3, r1
 801f6fe:	603a      	str	r2, [r7, #0]
 801f700:	220e      	movs	r2, #14
 801f702:	fb02 f208 	mul.w	r2, r2, r8
 801f706:	3203      	adds	r2, #3
 801f708:	f022 0203 	bic.w	r2, r2, #3
 801f70c:	4411      	add	r1, r2
 801f70e:	440b      	add	r3, r1
 801f710:	491b      	ldr	r1, [pc, #108]	; (801f780 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801f712:	600b      	str	r3, [r1, #0]
 801f714:	491b      	ldr	r1, [pc, #108]	; (801f784 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801f716:	2300      	movs	r3, #0
 801f718:	800b      	strh	r3, [r1, #0]
 801f71a:	491b      	ldr	r1, [pc, #108]	; (801f788 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801f71c:	6809      	ldr	r1, [r1, #0]
 801f71e:	eba1 010e 	sub.w	r1, r1, lr
 801f722:	eba1 010c 	sub.w	r1, r1, ip
 801f726:	1a8a      	subs	r2, r1, r2
 801f728:	4918      	ldr	r1, [pc, #96]	; (801f78c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801f72a:	600a      	str	r2, [r1, #0]
 801f72c:	4a18      	ldr	r2, [pc, #96]	; (801f790 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801f72e:	469c      	mov	ip, r3
 801f730:	8013      	strh	r3, [r2, #0]
 801f732:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801f736:	4283      	cmp	r3, r0
 801f738:	d10d      	bne.n	801f756 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801f73a:	8835      	ldrh	r5, [r6, #0]
 801f73c:	6838      	ldr	r0, [r7, #0]
 801f73e:	2300      	movs	r3, #0
 801f740:	240e      	movs	r4, #14
 801f742:	429d      	cmp	r5, r3
 801f744:	d90f      	bls.n	801f766 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801f746:	fb04 0203 	mla	r2, r4, r3, r0
 801f74a:	3301      	adds	r3, #1
 801f74c:	7b11      	ldrb	r1, [r2, #12]
 801f74e:	f36f 1145 	bfc	r1, #5, #1
 801f752:	7311      	strb	r1, [r2, #12]
 801f754:	e7f5      	b.n	801f742 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801f756:	682a      	ldr	r2, [r5, #0]
 801f758:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801f75c:	6822      	ldr	r2, [r4, #0]
 801f75e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801f762:	3301      	adds	r3, #1
 801f764:	e7e7      	b.n	801f736 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801f766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f76a:	bf00      	nop
 801f76c:	2000980c 	.word	0x2000980c
 801f770:	20009828 	.word	0x20009828
 801f774:	2000982c 	.word	0x2000982c
 801f778:	20009820 	.word	0x20009820
 801f77c:	20009810 	.word	0x20009810
 801f780:	20009818 	.word	0x20009818
 801f784:	2000982a 	.word	0x2000982a
 801f788:	20009814 	.word	0x20009814
 801f78c:	20009824 	.word	0x20009824
 801f790:	2000981c 	.word	0x2000981c

0801f794 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801f794:	b510      	push	{r4, lr}
 801f796:	4b10      	ldr	r3, [pc, #64]	; (801f7d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	b9db      	cbnz	r3, 801f7d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801f79c:	b1d1      	cbz	r1, 801f7d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801f79e:	4b0f      	ldr	r3, [pc, #60]	; (801f7dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801f7a0:	801a      	strh	r2, [r3, #0]
 801f7a2:	4b0f      	ldr	r3, [pc, #60]	; (801f7e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801f7a4:	881b      	ldrh	r3, [r3, #0]
 801f7a6:	b292      	uxth	r2, r2
 801f7a8:	240e      	movs	r4, #14
 801f7aa:	4413      	add	r3, r2
 801f7ac:	4362      	muls	r2, r4
 801f7ae:	2406      	movs	r4, #6
 801f7b0:	fb04 2203 	mla	r2, r4, r3, r2
 801f7b4:	428a      	cmp	r2, r1
 801f7b6:	d305      	bcc.n	801f7c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801f7b8:	4b0a      	ldr	r3, [pc, #40]	; (801f7e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801f7ba:	4a0b      	ldr	r2, [pc, #44]	; (801f7e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801f7bc:	480b      	ldr	r0, [pc, #44]	; (801f7ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801f7be:	2135      	movs	r1, #53	; 0x35
 801f7c0:	f00e fb46 	bl	802de50 <__assert_func>
 801f7c4:	4b0a      	ldr	r3, [pc, #40]	; (801f7f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801f7c6:	6019      	str	r1, [r3, #0]
 801f7c8:	4b0a      	ldr	r3, [pc, #40]	; (801f7f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801f7ca:	6018      	str	r0, [r3, #0]
 801f7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f7d0:	f7ff bf78 	b.w	801f6c4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801f7d4:	bd10      	pop	{r4, pc}
 801f7d6:	bf00      	nop
 801f7d8:	20009818 	.word	0x20009818
 801f7dc:	2000982c 	.word	0x2000982c
 801f7e0:	20009828 	.word	0x20009828
 801f7e4:	080326c1 	.word	0x080326c1
 801f7e8:	08032756 	.word	0x08032756
 801f7ec:	0803269c 	.word	0x0803269c
 801f7f0:	20009814 	.word	0x20009814
 801f7f4:	2000980c 	.word	0x2000980c

0801f7f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801f7f8:	b470      	push	{r4, r5, r6}
 801f7fa:	4c07      	ldr	r4, [pc, #28]	; (801f818 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801f7fc:	6826      	ldr	r6, [r4, #0]
 801f7fe:	4605      	mov	r5, r0
 801f800:	4610      	mov	r0, r2
 801f802:	9a03      	ldr	r2, [sp, #12]
 801f804:	b936      	cbnz	r6, 801f814 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801f806:	6025      	str	r5, [r4, #0]
 801f808:	4c04      	ldr	r4, [pc, #16]	; (801f81c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801f80a:	8021      	strh	r1, [r4, #0]
 801f80c:	bc70      	pop	{r4, r5, r6}
 801f80e:	4619      	mov	r1, r3
 801f810:	f7ff bfc0 	b.w	801f794 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801f814:	bc70      	pop	{r4, r5, r6}
 801f816:	4770      	bx	lr
 801f818:	20009830 	.word	0x20009830
 801f81c:	20009828 	.word	0x20009828

0801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801f820:	b508      	push	{r3, lr}
 801f822:	4b14      	ldr	r3, [pc, #80]	; (801f874 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801f824:	6819      	ldr	r1, [r3, #0]
 801f826:	b931      	cbnz	r1, 801f836 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801f828:	4b13      	ldr	r3, [pc, #76]	; (801f878 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801f82a:	4a14      	ldr	r2, [pc, #80]	; (801f87c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801f82c:	4814      	ldr	r0, [pc, #80]	; (801f880 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801f82e:	f240 4185 	movw	r1, #1157	; 0x485
 801f832:	f00e fb0d 	bl	802de50 <__assert_func>
 801f836:	4a13      	ldr	r2, [pc, #76]	; (801f884 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801f838:	8803      	ldrh	r3, [r0, #0]
 801f83a:	8812      	ldrh	r2, [r2, #0]
 801f83c:	4293      	cmp	r3, r2
 801f83e:	d204      	bcs.n	801f84a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801f840:	2214      	movs	r2, #20
 801f842:	fb02 1303 	mla	r3, r2, r3, r1
 801f846:	8918      	ldrh	r0, [r3, #8]
 801f848:	bd08      	pop	{r3, pc}
 801f84a:	490f      	ldr	r1, [pc, #60]	; (801f888 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801f84c:	8809      	ldrh	r1, [r1, #0]
 801f84e:	4411      	add	r1, r2
 801f850:	428b      	cmp	r3, r1
 801f852:	da06      	bge.n	801f862 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801f854:	1a9b      	subs	r3, r3, r2
 801f856:	4a0d      	ldr	r2, [pc, #52]	; (801f88c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801f858:	6812      	ldr	r2, [r2, #0]
 801f85a:	210e      	movs	r1, #14
 801f85c:	fb01 2303 	mla	r3, r1, r3, r2
 801f860:	e7f1      	b.n	801f846 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801f862:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f866:	4293      	cmp	r3, r2
 801f868:	bf0a      	itet	eq
 801f86a:	4b09      	ldreq	r3, [pc, #36]	; (801f890 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801f86c:	2000      	movne	r0, #0
 801f86e:	8818      	ldrheq	r0, [r3, #0]
 801f870:	e7ea      	b.n	801f848 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801f872:	bf00      	nop
 801f874:	20009830 	.word	0x20009830
 801f878:	0803271a 	.word	0x0803271a
 801f87c:	08032803 	.word	0x08032803
 801f880:	0803269c 	.word	0x0803269c
 801f884:	20009828 	.word	0x20009828
 801f888:	2000982c 	.word	0x2000982c
 801f88c:	20009810 	.word	0x20009810
 801f890:	2000979c 	.word	0x2000979c

0801f894 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801f894:	b508      	push	{r3, lr}
 801f896:	4b14      	ldr	r3, [pc, #80]	; (801f8e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801f898:	6819      	ldr	r1, [r3, #0]
 801f89a:	b931      	cbnz	r1, 801f8aa <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801f89c:	4b13      	ldr	r3, [pc, #76]	; (801f8ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801f89e:	4a14      	ldr	r2, [pc, #80]	; (801f8f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801f8a0:	4814      	ldr	r0, [pc, #80]	; (801f8f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801f8a2:	f240 4199 	movw	r1, #1177	; 0x499
 801f8a6:	f00e fad3 	bl	802de50 <__assert_func>
 801f8aa:	4a13      	ldr	r2, [pc, #76]	; (801f8f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801f8ac:	8803      	ldrh	r3, [r0, #0]
 801f8ae:	8812      	ldrh	r2, [r2, #0]
 801f8b0:	4293      	cmp	r3, r2
 801f8b2:	d204      	bcs.n	801f8be <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801f8b4:	2214      	movs	r2, #20
 801f8b6:	fb02 1303 	mla	r3, r2, r3, r1
 801f8ba:	8958      	ldrh	r0, [r3, #10]
 801f8bc:	bd08      	pop	{r3, pc}
 801f8be:	490f      	ldr	r1, [pc, #60]	; (801f8fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801f8c0:	8809      	ldrh	r1, [r1, #0]
 801f8c2:	4411      	add	r1, r2
 801f8c4:	428b      	cmp	r3, r1
 801f8c6:	da06      	bge.n	801f8d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801f8c8:	1a9b      	subs	r3, r3, r2
 801f8ca:	4a0d      	ldr	r2, [pc, #52]	; (801f900 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801f8cc:	6812      	ldr	r2, [r2, #0]
 801f8ce:	210e      	movs	r1, #14
 801f8d0:	fb01 2303 	mla	r3, r1, r3, r2
 801f8d4:	e7f1      	b.n	801f8ba <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801f8d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f8da:	4293      	cmp	r3, r2
 801f8dc:	bf0a      	itet	eq
 801f8de:	4b09      	ldreq	r3, [pc, #36]	; (801f904 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801f8e0:	2000      	movne	r0, #0
 801f8e2:	8818      	ldrheq	r0, [r3, #0]
 801f8e4:	e7ea      	b.n	801f8bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801f8e6:	bf00      	nop
 801f8e8:	20009830 	.word	0x20009830
 801f8ec:	0803271a 	.word	0x0803271a
 801f8f0:	0803282f 	.word	0x0803282f
 801f8f4:	0803269c 	.word	0x0803269c
 801f8f8:	20009828 	.word	0x20009828
 801f8fc:	2000982c 	.word	0x2000982c
 801f900:	20009810 	.word	0x20009810
 801f904:	2000979e 	.word	0x2000979e

0801f908 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801f908:	b510      	push	{r4, lr}
 801f90a:	4b23      	ldr	r3, [pc, #140]	; (801f998 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801f90c:	681c      	ldr	r4, [r3, #0]
 801f90e:	b934      	cbnz	r4, 801f91e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801f910:	4b22      	ldr	r3, [pc, #136]	; (801f99c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801f912:	4a23      	ldr	r2, [pc, #140]	; (801f9a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801f914:	4823      	ldr	r0, [pc, #140]	; (801f9a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801f916:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801f91a:	f00e fa99 	bl	802de50 <__assert_func>
 801f91e:	4a22      	ldr	r2, [pc, #136]	; (801f9a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801f920:	880b      	ldrh	r3, [r1, #0]
 801f922:	8812      	ldrh	r2, [r2, #0]
 801f924:	4293      	cmp	r3, r2
 801f926:	d211      	bcs.n	801f94c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801f928:	2214      	movs	r2, #20
 801f92a:	fb02 4303 	mla	r3, r2, r3, r4
 801f92e:	8a1a      	ldrh	r2, [r3, #16]
 801f930:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801f934:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801f938:	8a5b      	ldrh	r3, [r3, #18]
 801f93a:	8004      	strh	r4, [r0, #0]
 801f93c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f944:	8041      	strh	r1, [r0, #2]
 801f946:	8082      	strh	r2, [r0, #4]
 801f948:	80c3      	strh	r3, [r0, #6]
 801f94a:	e00e      	b.n	801f96a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801f94c:	4917      	ldr	r1, [pc, #92]	; (801f9ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801f94e:	8809      	ldrh	r1, [r1, #0]
 801f950:	4411      	add	r1, r2
 801f952:	428b      	cmp	r3, r1
 801f954:	da0a      	bge.n	801f96c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801f956:	1a9b      	subs	r3, r3, r2
 801f958:	4a15      	ldr	r2, [pc, #84]	; (801f9b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801f95a:	6812      	ldr	r2, [r2, #0]
 801f95c:	210e      	movs	r1, #14
 801f95e:	fb01 2303 	mla	r3, r1, r3, r2
 801f962:	681a      	ldr	r2, [r3, #0]
 801f964:	6002      	str	r2, [r0, #0]
 801f966:	685a      	ldr	r2, [r3, #4]
 801f968:	6042      	str	r2, [r0, #4]
 801f96a:	bd10      	pop	{r4, pc}
 801f96c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f970:	4293      	cmp	r3, r2
 801f972:	d10b      	bne.n	801f98c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801f974:	4b0f      	ldr	r3, [pc, #60]	; (801f9b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801f976:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f97a:	4b0f      	ldr	r3, [pc, #60]	; (801f9b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801f97c:	8081      	strh	r1, [r0, #4]
 801f97e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f982:	80c2      	strh	r2, [r0, #6]
 801f984:	2300      	movs	r3, #0
 801f986:	8003      	strh	r3, [r0, #0]
 801f988:	8043      	strh	r3, [r0, #2]
 801f98a:	e7ee      	b.n	801f96a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801f98c:	2300      	movs	r3, #0
 801f98e:	8003      	strh	r3, [r0, #0]
 801f990:	8043      	strh	r3, [r0, #2]
 801f992:	8083      	strh	r3, [r0, #4]
 801f994:	e7d8      	b.n	801f948 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801f996:	bf00      	nop
 801f998:	20009830 	.word	0x20009830
 801f99c:	0803271a 	.word	0x0803271a
 801f9a0:	0803279c 	.word	0x0803279c
 801f9a4:	0803269c 	.word	0x0803269c
 801f9a8:	20009828 	.word	0x20009828
 801f9ac:	2000982c 	.word	0x2000982c
 801f9b0:	20009810 	.word	0x20009810
 801f9b4:	2000979c 	.word	0x2000979c
 801f9b8:	2000979e 	.word	0x2000979e

0801f9bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801f9bc:	4b18      	ldr	r3, [pc, #96]	; (801fa20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	b34b      	cbz	r3, 801fa16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801f9c2:	4a18      	ldr	r2, [pc, #96]	; (801fa24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801f9c4:	8800      	ldrh	r0, [r0, #0]
 801f9c6:	8812      	ldrh	r2, [r2, #0]
 801f9c8:	4290      	cmp	r0, r2
 801f9ca:	d211      	bcs.n	801f9f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801f9cc:	2214      	movs	r2, #20
 801f9ce:	fb02 3300 	mla	r3, r2, r0, r3
 801f9d2:	8a1a      	ldrh	r2, [r3, #16]
 801f9d4:	8919      	ldrh	r1, [r3, #8]
 801f9d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f9da:	428a      	cmp	r2, r1
 801f9dc:	db1d      	blt.n	801fa1a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801f9de:	8a58      	ldrh	r0, [r3, #18]
 801f9e0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801f9e4:	895b      	ldrh	r3, [r3, #10]
 801f9e6:	4298      	cmp	r0, r3
 801f9e8:	bfac      	ite	ge
 801f9ea:	2000      	movge	r0, #0
 801f9ec:	2001      	movlt	r0, #1
 801f9ee:	4770      	bx	lr
 801f9f0:	4b0d      	ldr	r3, [pc, #52]	; (801fa28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801f9f2:	881b      	ldrh	r3, [r3, #0]
 801f9f4:	4413      	add	r3, r2
 801f9f6:	4298      	cmp	r0, r3
 801f9f8:	da0d      	bge.n	801fa16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801f9fa:	4b0c      	ldr	r3, [pc, #48]	; (801fa2c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801f9fc:	681b      	ldr	r3, [r3, #0]
 801f9fe:	1a80      	subs	r0, r0, r2
 801fa00:	220e      	movs	r2, #14
 801fa02:	fb02 3300 	mla	r3, r2, r0, r3
 801fa06:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801fa0a:	891a      	ldrh	r2, [r3, #8]
 801fa0c:	4291      	cmp	r1, r2
 801fa0e:	db04      	blt.n	801fa1a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801fa10:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801fa14:	e7e6      	b.n	801f9e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801fa16:	2000      	movs	r0, #0
 801fa18:	4770      	bx	lr
 801fa1a:	2001      	movs	r0, #1
 801fa1c:	4770      	bx	lr
 801fa1e:	bf00      	nop
 801fa20:	20009830 	.word	0x20009830
 801fa24:	20009828 	.word	0x20009828
 801fa28:	2000982c 	.word	0x2000982c
 801fa2c:	20009810 	.word	0x20009810

0801fa30 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801fa30:	b508      	push	{r3, lr}
 801fa32:	4b12      	ldr	r3, [pc, #72]	; (801fa7c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801fa34:	6819      	ldr	r1, [r3, #0]
 801fa36:	b931      	cbnz	r1, 801fa46 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801fa38:	4b11      	ldr	r3, [pc, #68]	; (801fa80 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fa3a:	4a12      	ldr	r2, [pc, #72]	; (801fa84 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801fa3c:	4812      	ldr	r0, [pc, #72]	; (801fa88 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801fa3e:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801fa42:	f00e fa05 	bl	802de50 <__assert_func>
 801fa46:	8803      	ldrh	r3, [r0, #0]
 801fa48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801fa4c:	4293      	cmp	r3, r2
 801fa4e:	d012      	beq.n	801fa76 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801fa50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fa54:	4293      	cmp	r3, r2
 801fa56:	d103      	bne.n	801fa60 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801fa58:	4b0c      	ldr	r3, [pc, #48]	; (801fa8c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801fa5a:	681b      	ldr	r3, [r3, #0]
 801fa5c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801fa5e:	bd08      	pop	{r3, pc}
 801fa60:	4a0b      	ldr	r2, [pc, #44]	; (801fa90 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801fa62:	6812      	ldr	r2, [r2, #0]
 801fa64:	b11a      	cbz	r2, 801fa6e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801fa66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fa6a:	2800      	cmp	r0, #0
 801fa6c:	d1f7      	bne.n	801fa5e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fa6e:	2214      	movs	r2, #20
 801fa70:	4353      	muls	r3, r2
 801fa72:	58c8      	ldr	r0, [r1, r3]
 801fa74:	e7f3      	b.n	801fa5e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fa76:	2000      	movs	r0, #0
 801fa78:	e7f1      	b.n	801fa5e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801fa7a:	bf00      	nop
 801fa7c:	20009830 	.word	0x20009830
 801fa80:	0803271a 	.word	0x0803271a
 801fa84:	080327d2 	.word	0x080327d2
 801fa88:	0803269c 	.word	0x0803269c
 801fa8c:	200097a8 	.word	0x200097a8
 801fa90:	2000980c 	.word	0x2000980c

0801fa94 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801fa94:	8802      	ldrh	r2, [r0, #0]
 801fa96:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801fa9a:	429a      	cmp	r2, r3
 801fa9c:	d845      	bhi.n	801fb2a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801fa9e:	4b24      	ldr	r3, [pc, #144]	; (801fb30 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801faa0:	8818      	ldrh	r0, [r3, #0]
 801faa2:	4282      	cmp	r2, r0
 801faa4:	d221      	bcs.n	801faea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801faa6:	4b23      	ldr	r3, [pc, #140]	; (801fb34 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801faa8:	6819      	ldr	r1, [r3, #0]
 801faaa:	2314      	movs	r3, #20
 801faac:	fb03 1302 	mla	r3, r3, r2, r1
 801fab0:	6858      	ldr	r0, [r3, #4]
 801fab2:	2800      	cmp	r0, #0
 801fab4:	d03a      	beq.n	801fb2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fab6:	4920      	ldr	r1, [pc, #128]	; (801fb38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fab8:	6809      	ldr	r1, [r1, #0]
 801faba:	2900      	cmp	r1, #0
 801fabc:	d036      	beq.n	801fb2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fabe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801fac2:	2900      	cmp	r1, #0
 801fac4:	d032      	beq.n	801fb2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801fac6:	891a      	ldrh	r2, [r3, #8]
 801fac8:	8958      	ldrh	r0, [r3, #10]
 801faca:	4350      	muls	r0, r2
 801facc:	7c5a      	ldrb	r2, [r3, #17]
 801face:	7cdb      	ldrb	r3, [r3, #19]
 801fad0:	0952      	lsrs	r2, r2, #5
 801fad2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801fad6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801fada:	2b0b      	cmp	r3, #11
 801fadc:	bf18      	it	ne
 801fade:	0040      	lslne	r0, r0, #1
 801fae0:	3003      	adds	r0, #3
 801fae2:	f020 0003 	bic.w	r0, r0, #3
 801fae6:	4408      	add	r0, r1
 801fae8:	4770      	bx	lr
 801faea:	4b14      	ldr	r3, [pc, #80]	; (801fb3c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801faec:	881b      	ldrh	r3, [r3, #0]
 801faee:	4403      	add	r3, r0
 801faf0:	429a      	cmp	r2, r3
 801faf2:	da1a      	bge.n	801fb2a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801faf4:	4b12      	ldr	r3, [pc, #72]	; (801fb40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801faf6:	681b      	ldr	r3, [r3, #0]
 801faf8:	1a10      	subs	r0, r2, r0
 801fafa:	210e      	movs	r1, #14
 801fafc:	fb01 3000 	mla	r0, r1, r0, r3
 801fb00:	7b03      	ldrb	r3, [r0, #12]
 801fb02:	f003 031f 	and.w	r3, r3, #31
 801fb06:	2b0b      	cmp	r3, #11
 801fb08:	d10b      	bne.n	801fb22 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801fb0a:	8903      	ldrh	r3, [r0, #8]
 801fb0c:	8940      	ldrh	r0, [r0, #10]
 801fb0e:	4358      	muls	r0, r3
 801fb10:	4b09      	ldr	r3, [pc, #36]	; (801fb38 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801fb12:	6819      	ldr	r1, [r3, #0]
 801fb14:	3003      	adds	r0, #3
 801fb16:	f020 0303 	bic.w	r3, r0, #3
 801fb1a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801fb1e:	4418      	add	r0, r3
 801fb20:	4770      	bx	lr
 801fb22:	2b0d      	cmp	r3, #13
 801fb24:	d101      	bne.n	801fb2a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801fb26:	300d      	adds	r0, #13
 801fb28:	4770      	bx	lr
 801fb2a:	2000      	movs	r0, #0
 801fb2c:	4770      	bx	lr
 801fb2e:	bf00      	nop
 801fb30:	20009828 	.word	0x20009828
 801fb34:	20009830 	.word	0x20009830
 801fb38:	2000980c 	.word	0x2000980c
 801fb3c:	2000982c 	.word	0x2000982c
 801fb40:	20009810 	.word	0x20009810

0801fb44 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801fb44:	b510      	push	{r4, lr}
 801fb46:	4b17      	ldr	r3, [pc, #92]	; (801fba4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801fb48:	6819      	ldr	r1, [r3, #0]
 801fb4a:	8803      	ldrh	r3, [r0, #0]
 801fb4c:	b1e9      	cbz	r1, 801fb8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801fb4e:	4a16      	ldr	r2, [pc, #88]	; (801fba8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801fb50:	8812      	ldrh	r2, [r2, #0]
 801fb52:	429a      	cmp	r2, r3
 801fb54:	d90a      	bls.n	801fb6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801fb56:	2214      	movs	r2, #20
 801fb58:	fb02 1303 	mla	r3, r2, r3, r1
 801fb5c:	7c58      	ldrb	r0, [r3, #17]
 801fb5e:	0942      	lsrs	r2, r0, #5
 801fb60:	7cd8      	ldrb	r0, [r3, #19]
 801fb62:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801fb66:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801fb6a:	bd10      	pop	{r4, pc}
 801fb6c:	490f      	ldr	r1, [pc, #60]	; (801fbac <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801fb6e:	8809      	ldrh	r1, [r1, #0]
 801fb70:	4411      	add	r1, r2
 801fb72:	428b      	cmp	r3, r1
 801fb74:	da09      	bge.n	801fb8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801fb76:	1a9b      	subs	r3, r3, r2
 801fb78:	4a0d      	ldr	r2, [pc, #52]	; (801fbb0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801fb7a:	6812      	ldr	r2, [r2, #0]
 801fb7c:	210e      	movs	r1, #14
 801fb7e:	fb01 2303 	mla	r3, r1, r3, r2
 801fb82:	7b18      	ldrb	r0, [r3, #12]
 801fb84:	f000 001f 	and.w	r0, r0, #31
 801fb88:	e7ef      	b.n	801fb6a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801fb8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fb8e:	4293      	cmp	r3, r2
 801fb90:	d106      	bne.n	801fba0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801fb92:	f7f0 f9bf 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 801fb96:	6803      	ldr	r3, [r0, #0]
 801fb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb9e:	4718      	bx	r3
 801fba0:	2000      	movs	r0, #0
 801fba2:	e7e2      	b.n	801fb6a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801fba4:	20009830 	.word	0x20009830
 801fba8:	20009828 	.word	0x20009828
 801fbac:	2000982c 	.word	0x2000982c
 801fbb0:	20009810 	.word	0x20009810

0801fbb4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801fbb4:	2010      	movs	r0, #16
 801fbb6:	4770      	bx	lr

0801fbb8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801fbb8:	2000      	movs	r0, #0
 801fbba:	4770      	bx	lr

0801fbbc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801fbbc:	2bff      	cmp	r3, #255	; 0xff
 801fbbe:	d050      	beq.n	801fc62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801fbc0:	2a0b      	cmp	r2, #11
 801fbc2:	d04a      	beq.n	801fc5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801fbc4:	d80e      	bhi.n	801fbe4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801fbc6:	2a03      	cmp	r2, #3
 801fbc8:	d03f      	beq.n	801fc4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801fbca:	d804      	bhi.n	801fbd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801fbcc:	2a01      	cmp	r2, #1
 801fbce:	d03e      	beq.n	801fc4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801fbd0:	d93f      	bls.n	801fc52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801fbd2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801fbd4:	4770      	bx	lr
 801fbd6:	2a09      	cmp	r2, #9
 801fbd8:	d03f      	beq.n	801fc5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801fbda:	d83c      	bhi.n	801fc56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801fbdc:	2a08      	cmp	r2, #8
 801fbde:	d03a      	beq.n	801fc56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801fbe0:	2000      	movs	r0, #0
 801fbe2:	4770      	bx	lr
 801fbe4:	2a2f      	cmp	r2, #47	; 0x2f
 801fbe6:	d024      	beq.n	801fc32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801fbe8:	d80d      	bhi.n	801fc06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801fbea:	2a2d      	cmp	r2, #45	; 0x2d
 801fbec:	d014      	beq.n	801fc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801fbee:	d826      	bhi.n	801fc3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801fbf0:	2a2c      	cmp	r2, #44	; 0x2c
 801fbf2:	d1f5      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fbf4:	684b      	ldr	r3, [r1, #4]
 801fbf6:	781b      	ldrb	r3, [r3, #0]
 801fbf8:	2b01      	cmp	r3, #1
 801fbfa:	d018      	beq.n	801fc2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801fbfc:	d323      	bcc.n	801fc46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801fbfe:	2b02      	cmp	r3, #2
 801fc00:	d1ee      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc02:	6880      	ldr	r0, [r0, #8]
 801fc04:	4770      	bx	lr
 801fc06:	2a31      	cmp	r2, #49	; 0x31
 801fc08:	d004      	beq.n	801fc14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801fc0a:	d328      	bcc.n	801fc5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801fc0c:	2a32      	cmp	r2, #50	; 0x32
 801fc0e:	d026      	beq.n	801fc5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801fc10:	2a33      	cmp	r2, #51	; 0x33
 801fc12:	d1e5      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc14:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801fc16:	4770      	bx	lr
 801fc18:	684b      	ldr	r3, [r1, #4]
 801fc1a:	781b      	ldrb	r3, [r3, #0]
 801fc1c:	2b01      	cmp	r3, #1
 801fc1e:	d004      	beq.n	801fc2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801fc20:	d30b      	bcc.n	801fc3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801fc22:	2b02      	cmp	r3, #2
 801fc24:	d1dc      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc26:	6900      	ldr	r0, [r0, #16]
 801fc28:	4770      	bx	lr
 801fc2a:	6a00      	ldr	r0, [r0, #32]
 801fc2c:	4770      	bx	lr
 801fc2e:	6980      	ldr	r0, [r0, #24]
 801fc30:	4770      	bx	lr
 801fc32:	684b      	ldr	r3, [r1, #4]
 801fc34:	781b      	ldrb	r3, [r3, #0]
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	d1d2      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc3a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801fc3c:	4770      	bx	lr
 801fc3e:	684b      	ldr	r3, [r1, #4]
 801fc40:	781b      	ldrb	r3, [r3, #0]
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d1cc      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc46:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801fc48:	4770      	bx	lr
 801fc4a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801fc4c:	4770      	bx	lr
 801fc4e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801fc50:	4770      	bx	lr
 801fc52:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801fc54:	4770      	bx	lr
 801fc56:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801fc58:	4770      	bx	lr
 801fc5a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801fc5c:	4770      	bx	lr
 801fc5e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801fc60:	4770      	bx	lr
 801fc62:	2a0b      	cmp	r2, #11
 801fc64:	d049      	beq.n	801fcfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801fc66:	d80e      	bhi.n	801fc86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801fc68:	2a03      	cmp	r2, #3
 801fc6a:	d040      	beq.n	801fcee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801fc6c:	d804      	bhi.n	801fc78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801fc6e:	2a01      	cmp	r2, #1
 801fc70:	d03f      	beq.n	801fcf2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801fc72:	d940      	bls.n	801fcf6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801fc74:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801fc76:	4770      	bx	lr
 801fc78:	2a09      	cmp	r2, #9
 801fc7a:	d03e      	beq.n	801fcfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801fc7c:	d801      	bhi.n	801fc82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801fc7e:	2a08      	cmp	r2, #8
 801fc80:	d1ae      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc82:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801fc84:	4770      	bx	lr
 801fc86:	2a2f      	cmp	r2, #47	; 0x2f
 801fc88:	d024      	beq.n	801fcd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801fc8a:	d80d      	bhi.n	801fca8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801fc8c:	2a2d      	cmp	r2, #45	; 0x2d
 801fc8e:	d014      	beq.n	801fcba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801fc90:	d826      	bhi.n	801fce0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801fc92:	2a2c      	cmp	r2, #44	; 0x2c
 801fc94:	d1a4      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fc96:	684b      	ldr	r3, [r1, #4]
 801fc98:	781b      	ldrb	r3, [r3, #0]
 801fc9a:	2b01      	cmp	r3, #1
 801fc9c:	d018      	beq.n	801fcd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801fc9e:	d324      	bcc.n	801fcea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801fca0:	2b02      	cmp	r3, #2
 801fca2:	d19d      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fca4:	68c0      	ldr	r0, [r0, #12]
 801fca6:	4770      	bx	lr
 801fca8:	2a31      	cmp	r2, #49	; 0x31
 801fcaa:	d004      	beq.n	801fcb6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801fcac:	d327      	bcc.n	801fcfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801fcae:	2a32      	cmp	r2, #50	; 0x32
 801fcb0:	d025      	beq.n	801fcfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801fcb2:	2a33      	cmp	r2, #51	; 0x33
 801fcb4:	d194      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcb6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801fcb8:	4770      	bx	lr
 801fcba:	684b      	ldr	r3, [r1, #4]
 801fcbc:	781b      	ldrb	r3, [r3, #0]
 801fcbe:	2b01      	cmp	r3, #1
 801fcc0:	d004      	beq.n	801fccc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801fcc2:	d30b      	bcc.n	801fcdc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801fcc4:	2b02      	cmp	r3, #2
 801fcc6:	d18b      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcc8:	6940      	ldr	r0, [r0, #20]
 801fcca:	4770      	bx	lr
 801fccc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801fcce:	4770      	bx	lr
 801fcd0:	69c0      	ldr	r0, [r0, #28]
 801fcd2:	4770      	bx	lr
 801fcd4:	684b      	ldr	r3, [r1, #4]
 801fcd6:	781b      	ldrb	r3, [r3, #0]
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	d181      	bne.n	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcdc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801fcde:	4770      	bx	lr
 801fce0:	684b      	ldr	r3, [r1, #4]
 801fce2:	781b      	ldrb	r3, [r3, #0]
 801fce4:	2b00      	cmp	r3, #0
 801fce6:	f47f af7b 	bne.w	801fbe0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801fcea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801fcec:	4770      	bx	lr
 801fcee:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801fcf0:	4770      	bx	lr
 801fcf2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801fcf4:	4770      	bx	lr
 801fcf6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801fcf8:	4770      	bx	lr
 801fcfa:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801fcfc:	4770      	bx	lr
 801fcfe:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801fd00:	4770      	bx	lr

0801fd02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd06:	b087      	sub	sp, #28
 801fd08:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fd0a:	9205      	str	r2, [sp, #20]
 801fd0c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fd10:	9202      	str	r2, [sp, #8]
 801fd12:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fd16:	9101      	str	r1, [sp, #4]
 801fd18:	6841      	ldr	r1, [r0, #4]
 801fd1a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801fd1e:	fb01 2404 	mla	r4, r1, r4, r2
 801fd22:	6802      	ldr	r2, [r0, #0]
 801fd24:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fd28:	f8de 2000 	ldr.w	r2, [lr]
 801fd2c:	9203      	str	r2, [sp, #12]
 801fd2e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fd32:	3204      	adds	r2, #4
 801fd34:	9204      	str	r2, [sp, #16]
 801fd36:	9a02      	ldr	r2, [sp, #8]
 801fd38:	43d6      	mvns	r6, r2
 801fd3a:	b2f6      	uxtb	r6, r6
 801fd3c:	9a01      	ldr	r2, [sp, #4]
 801fd3e:	2a00      	cmp	r2, #0
 801fd40:	dc03      	bgt.n	801fd4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fd42:	9a05      	ldr	r2, [sp, #20]
 801fd44:	2a00      	cmp	r2, #0
 801fd46:	f340 8129 	ble.w	801ff9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fd4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd4c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801fd50:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801fd54:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fd58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fd5a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	dd0e      	ble.n	801fd80 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fd62:	1408      	asrs	r0, r1, #16
 801fd64:	d405      	bmi.n	801fd72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd66:	4560      	cmp	r0, ip
 801fd68:	da03      	bge.n	801fd72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd6a:	1410      	asrs	r0, r2, #16
 801fd6c:	d401      	bmi.n	801fd72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd6e:	42b8      	cmp	r0, r7
 801fd70:	db07      	blt.n	801fd82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fd72:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fd74:	4401      	add	r1, r0
 801fd76:	9814      	ldr	r0, [sp, #80]	; 0x50
 801fd78:	3b01      	subs	r3, #1
 801fd7a:	4402      	add	r2, r0
 801fd7c:	3402      	adds	r4, #2
 801fd7e:	e7ee      	b.n	801fd5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801fd80:	d071      	beq.n	801fe66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fd84:	1e58      	subs	r0, r3, #1
 801fd86:	fb05 1500 	mla	r5, r5, r0, r1
 801fd8a:	142d      	asrs	r5, r5, #16
 801fd8c:	d45f      	bmi.n	801fe4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fd8e:	4565      	cmp	r5, ip
 801fd90:	da5d      	bge.n	801fe4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fd92:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fd94:	fb05 2000 	mla	r0, r5, r0, r2
 801fd98:	1400      	asrs	r0, r0, #16
 801fd9a:	d458      	bmi.n	801fe4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fd9c:	42b8      	cmp	r0, r7
 801fd9e:	da56      	bge.n	801fe4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801fda0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801fda4:	4699      	mov	r9, r3
 801fda6:	46a2      	mov	sl, r4
 801fda8:	f1b9 0f00 	cmp.w	r9, #0
 801fdac:	dd57      	ble.n	801fe5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801fdae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fdb2:	9803      	ldr	r0, [sp, #12]
 801fdb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801fdb8:	140d      	asrs	r5, r1, #16
 801fdba:	fb07 000c 	mla	r0, r7, ip, r0
 801fdbe:	f109 39ff 	add.w	r9, r9, #4294967295
 801fdc2:	5d40      	ldrb	r0, [r0, r5]
 801fdc4:	9d04      	ldr	r5, [sp, #16]
 801fdc6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801fdca:	f8ba 5000 	ldrh.w	r5, [sl]
 801fdce:	122f      	asrs	r7, r5, #8
 801fdd0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801fdd4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fdd8:	fb17 f706 	smulbb	r7, r7, r6
 801fddc:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801fde0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fde4:	00ed      	lsls	r5, r5, #3
 801fde6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801fdea:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801fdee:	10c7      	asrs	r7, r0, #3
 801fdf0:	b2ed      	uxtb	r5, r5
 801fdf2:	00c0      	lsls	r0, r0, #3
 801fdf4:	fb18 f806 	smulbb	r8, r8, r6
 801fdf8:	fb15 f506 	smulbb	r5, r5, r6
 801fdfc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fe00:	b2c0      	uxtb	r0, r0
 801fe02:	fa1f fc8c 	uxth.w	ip, ip
 801fe06:	fb07 870b 	mla	r7, r7, fp, r8
 801fe0a:	fb00 500b 	mla	r0, r0, fp, r5
 801fe0e:	b280      	uxth	r0, r0
 801fe10:	b2bf      	uxth	r7, r7
 801fe12:	f10c 0501 	add.w	r5, ip, #1
 801fe16:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fe1a:	f107 0801 	add.w	r8, r7, #1
 801fe1e:	1c45      	adds	r5, r0, #1
 801fe20:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fe24:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801fe28:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fe2a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fe2e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fe32:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801fe36:	ea45 0c0c 	orr.w	ip, r5, ip
 801fe3a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801fe3e:	4401      	add	r1, r0
 801fe40:	9814      	ldr	r0, [sp, #80]	; 0x50
 801fe42:	ea4c 0c08 	orr.w	ip, ip, r8
 801fe46:	f82a cb02 	strh.w	ip, [sl], #2
 801fe4a:	4402      	add	r2, r0
 801fe4c:	e7ac      	b.n	801fda8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fe4e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801fe52:	f04f 0800 	mov.w	r8, #0
 801fe56:	eb03 0008 	add.w	r0, r3, r8
 801fe5a:	2800      	cmp	r0, #0
 801fe5c:	dc41      	bgt.n	801fee2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801fe5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe62:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fe66:	9b01      	ldr	r3, [sp, #4]
 801fe68:	2b00      	cmp	r3, #0
 801fe6a:	f340 8097 	ble.w	801ff9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801fe6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fe76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fe7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe80:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe88:	eef0 6a62 	vmov.f32	s13, s5
 801fe8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe94:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe98:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801fe9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fea0:	eef0 6a43 	vmov.f32	s13, s6
 801fea4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fea8:	ee12 2a90 	vmov	r2, s5
 801feac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801feb0:	fb92 f3f3 	sdiv	r3, r2, r3
 801feb4:	ee13 2a10 	vmov	r2, s6
 801feb8:	9313      	str	r3, [sp, #76]	; 0x4c
 801feba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801febc:	fb92 f3f3 	sdiv	r3, r2, r3
 801fec0:	9314      	str	r3, [sp, #80]	; 0x50
 801fec2:	9b01      	ldr	r3, [sp, #4]
 801fec4:	9a05      	ldr	r2, [sp, #20]
 801fec6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801feca:	3b01      	subs	r3, #1
 801fecc:	9301      	str	r3, [sp, #4]
 801fece:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801fed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fed4:	eeb0 3a67 	vmov.f32	s6, s15
 801fed8:	bf08      	it	eq
 801feda:	4613      	moveq	r3, r2
 801fedc:	eef0 2a47 	vmov.f32	s5, s14
 801fee0:	e72c      	b.n	801fd3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fee2:	140f      	asrs	r7, r1, #16
 801fee4:	d453      	bmi.n	801ff8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801fee6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801feea:	42bd      	cmp	r5, r7
 801feec:	dd4f      	ble.n	801ff8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801feee:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fef2:	d44c      	bmi.n	801ff8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801fef4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801fef8:	4560      	cmp	r0, ip
 801fefa:	dd48      	ble.n	801ff8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801fefc:	9803      	ldr	r0, [sp, #12]
 801fefe:	b22d      	sxth	r5, r5
 801ff00:	fb0c 0505 	mla	r5, ip, r5, r0
 801ff04:	5de8      	ldrb	r0, [r5, r7]
 801ff06:	9d04      	ldr	r5, [sp, #16]
 801ff08:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ff0c:	f06f 0501 	mvn.w	r5, #1
 801ff10:	fb05 fb08 	mul.w	fp, r5, r8
 801ff14:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ff18:	f834 500b 	ldrh.w	r5, [r4, fp]
 801ff1c:	122f      	asrs	r7, r5, #8
 801ff1e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ff22:	fb17 f706 	smulbb	r7, r7, r6
 801ff26:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801ff2a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ff2e:	00ed      	lsls	r5, r5, #3
 801ff30:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801ff34:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ff38:	10c7      	asrs	r7, r0, #3
 801ff3a:	b2ed      	uxtb	r5, r5
 801ff3c:	00c0      	lsls	r0, r0, #3
 801ff3e:	fb19 f906 	smulbb	r9, r9, r6
 801ff42:	fb15 f506 	smulbb	r5, r5, r6
 801ff46:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ff4a:	b2c0      	uxtb	r0, r0
 801ff4c:	fa1f fc8c 	uxth.w	ip, ip
 801ff50:	fb07 970a 	mla	r7, r7, sl, r9
 801ff54:	fb00 500a 	mla	r0, r0, sl, r5
 801ff58:	b2bf      	uxth	r7, r7
 801ff5a:	b280      	uxth	r0, r0
 801ff5c:	f10c 0501 	add.w	r5, ip, #1
 801ff60:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ff64:	f107 0901 	add.w	r9, r7, #1
 801ff68:	1c45      	adds	r5, r0, #1
 801ff6a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ff6e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ff72:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ff76:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ff7a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ff7e:	ea45 0c0c 	orr.w	ip, r5, ip
 801ff82:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ff86:	ea4c 0c09 	orr.w	ip, ip, r9
 801ff8a:	f824 c00b 	strh.w	ip, [r4, fp]
 801ff8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ff90:	4401      	add	r1, r0
 801ff92:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ff94:	f108 38ff 	add.w	r8, r8, #4294967295
 801ff98:	4402      	add	r2, r0
 801ff9a:	e75c      	b.n	801fe56 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ff9c:	b007      	add	sp, #28
 801ff9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ffa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ffa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffa6:	b085      	sub	sp, #20
 801ffa8:	4693      	mov	fp, r2
 801ffaa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ffac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ffae:	6870      	ldr	r0, [r6, #4]
 801ffb0:	9100      	str	r1, [sp, #0]
 801ffb2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ffb6:	fb00 2404 	mla	r4, r0, r4, r2
 801ffba:	6832      	ldr	r2, [r6, #0]
 801ffbc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ffc0:	682a      	ldr	r2, [r5, #0]
 801ffc2:	9201      	str	r2, [sp, #4]
 801ffc4:	686a      	ldr	r2, [r5, #4]
 801ffc6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ffca:	3204      	adds	r2, #4
 801ffcc:	9202      	str	r2, [sp, #8]
 801ffce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ffd2:	9a00      	ldr	r2, [sp, #0]
 801ffd4:	2a00      	cmp	r2, #0
 801ffd6:	dc03      	bgt.n	801ffe0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ffd8:	f1bb 0f00 	cmp.w	fp, #0
 801ffdc:	f340 80a0 	ble.w	8020120 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801ffe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ffe2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ffe6:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801ffea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ffee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fff0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fff4:	2b00      	cmp	r3, #0
 801fff6:	dd0c      	ble.n	8020012 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fff8:	1406      	asrs	r6, r0, #16
 801fffa:	d405      	bmi.n	8020008 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fffc:	454e      	cmp	r6, r9
 801fffe:	da03      	bge.n	8020008 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020000:	1416      	asrs	r6, r2, #16
 8020002:	d401      	bmi.n	8020008 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020004:	4546      	cmp	r6, r8
 8020006:	db05      	blt.n	8020014 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020008:	4470      	add	r0, lr
 802000a:	4462      	add	r2, ip
 802000c:	3b01      	subs	r3, #1
 802000e:	3402      	adds	r4, #2
 8020010:	e7f0      	b.n	801fff4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020012:	d00f      	beq.n	8020034 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020014:	1e5e      	subs	r6, r3, #1
 8020016:	fb0e 0706 	mla	r7, lr, r6, r0
 802001a:	143f      	asrs	r7, r7, #16
 802001c:	d541      	bpl.n	80200a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 802001e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8020022:	4698      	mov	r8, r3
 8020024:	9603      	str	r6, [sp, #12]
 8020026:	f1b8 0f00 	cmp.w	r8, #0
 802002a:	dc59      	bgt.n	80200e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802002c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020030:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020034:	9b00      	ldr	r3, [sp, #0]
 8020036:	2b00      	cmp	r3, #0
 8020038:	dd72      	ble.n	8020120 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 802003a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802003e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020042:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020048:	ee31 1a05 	vadd.f32	s2, s2, s10
 802004c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020050:	eeb0 6a62 	vmov.f32	s12, s5
 8020054:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020058:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802005c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020060:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020064:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020068:	eeb0 6a43 	vmov.f32	s12, s6
 802006c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020070:	ee12 2a90 	vmov	r2, s5
 8020074:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020078:	fb92 fef3 	sdiv	lr, r2, r3
 802007c:	ee13 2a10 	vmov	r2, s6
 8020080:	fb92 fcf3 	sdiv	ip, r2, r3
 8020084:	9b00      	ldr	r3, [sp, #0]
 8020086:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802008a:	3b01      	subs	r3, #1
 802008c:	9300      	str	r3, [sp, #0]
 802008e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020094:	eeb0 3a67 	vmov.f32	s6, s15
 8020098:	bf08      	it	eq
 802009a:	465b      	moveq	r3, fp
 802009c:	eef0 2a47 	vmov.f32	s5, s14
 80200a0:	e797      	b.n	801ffd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80200a2:	454f      	cmp	r7, r9
 80200a4:	dabb      	bge.n	802001e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80200a6:	fb0c 2606 	mla	r6, ip, r6, r2
 80200aa:	1436      	asrs	r6, r6, #16
 80200ac:	d4b7      	bmi.n	802001e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80200ae:	4546      	cmp	r6, r8
 80200b0:	dab5      	bge.n	802001e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80200b2:	461e      	mov	r6, r3
 80200b4:	46a0      	mov	r8, r4
 80200b6:	2e00      	cmp	r6, #0
 80200b8:	ddb8      	ble.n	802002c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80200ba:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80200be:	9901      	ldr	r1, [sp, #4]
 80200c0:	1417      	asrs	r7, r2, #16
 80200c2:	ea4f 4920 	mov.w	r9, r0, asr #16
 80200c6:	fb0a 1707 	mla	r7, sl, r7, r1
 80200ca:	9902      	ldr	r1, [sp, #8]
 80200cc:	f817 7009 	ldrb.w	r7, [r7, r9]
 80200d0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80200d4:	f828 7b02 	strh.w	r7, [r8], #2
 80200d8:	4470      	add	r0, lr
 80200da:	4462      	add	r2, ip
 80200dc:	3e01      	subs	r6, #1
 80200de:	e7ea      	b.n	80200b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80200e0:	ea5f 4920 	movs.w	r9, r0, asr #16
 80200e4:	d417      	bmi.n	8020116 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80200e6:	68ae      	ldr	r6, [r5, #8]
 80200e8:	454e      	cmp	r6, r9
 80200ea:	dd14      	ble.n	8020116 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80200ec:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80200f0:	d411      	bmi.n	8020116 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80200f2:	68ef      	ldr	r7, [r5, #12]
 80200f4:	4557      	cmp	r7, sl
 80200f6:	dd0e      	ble.n	8020116 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80200f8:	9f01      	ldr	r7, [sp, #4]
 80200fa:	b236      	sxth	r6, r6
 80200fc:	fb0a 7606 	mla	r6, sl, r6, r7
 8020100:	9f02      	ldr	r7, [sp, #8]
 8020102:	f816 6009 	ldrb.w	r6, [r6, r9]
 8020106:	f06f 0101 	mvn.w	r1, #1
 802010a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 802010e:	fb01 f608 	mul.w	r6, r1, r8
 8020112:	9903      	ldr	r1, [sp, #12]
 8020114:	538f      	strh	r7, [r1, r6]
 8020116:	4470      	add	r0, lr
 8020118:	4462      	add	r2, ip
 802011a:	f108 38ff 	add.w	r8, r8, #4294967295
 802011e:	e782      	b.n	8020026 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020120:	b005      	add	sp, #20
 8020122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020126 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802012a:	b087      	sub	sp, #28
 802012c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802012e:	9205      	str	r2, [sp, #20]
 8020130:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020134:	9203      	str	r2, [sp, #12]
 8020136:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 802013a:	9102      	str	r1, [sp, #8]
 802013c:	6861      	ldr	r1, [r4, #4]
 802013e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8020142:	fb01 2000 	mla	r0, r1, r0, r2
 8020146:	6822      	ldr	r2, [r4, #0]
 8020148:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 802014c:	9200      	str	r2, [sp, #0]
 802014e:	f8dc 2000 	ldr.w	r2, [ip]
 8020152:	9204      	str	r2, [sp, #16]
 8020154:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020158:	3204      	adds	r2, #4
 802015a:	9201      	str	r2, [sp, #4]
 802015c:	9a03      	ldr	r2, [sp, #12]
 802015e:	43d5      	mvns	r5, r2
 8020160:	b2ed      	uxtb	r5, r5
 8020162:	9a02      	ldr	r2, [sp, #8]
 8020164:	2a00      	cmp	r2, #0
 8020166:	dc03      	bgt.n	8020170 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020168:	9a05      	ldr	r2, [sp, #20]
 802016a:	2a00      	cmp	r2, #0
 802016c:	f340 812c 	ble.w	80203c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020170:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020172:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8020176:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802017a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802017e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020180:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020184:	2b00      	cmp	r3, #0
 8020186:	dd10      	ble.n	80201aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020188:	140c      	asrs	r4, r1, #16
 802018a:	d405      	bmi.n	8020198 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802018c:	4574      	cmp	r4, lr
 802018e:	da03      	bge.n	8020198 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020190:	1414      	asrs	r4, r2, #16
 8020192:	d401      	bmi.n	8020198 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020194:	42bc      	cmp	r4, r7
 8020196:	db09      	blt.n	80201ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8020198:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802019a:	9800      	ldr	r0, [sp, #0]
 802019c:	4421      	add	r1, r4
 802019e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80201a0:	3002      	adds	r0, #2
 80201a2:	4422      	add	r2, r4
 80201a4:	3b01      	subs	r3, #1
 80201a6:	9000      	str	r0, [sp, #0]
 80201a8:	e7ec      	b.n	8020184 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80201aa:	d071      	beq.n	8020290 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80201ac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80201ae:	1e5c      	subs	r4, r3, #1
 80201b0:	fb06 1604 	mla	r6, r6, r4, r1
 80201b4:	1436      	asrs	r6, r6, #16
 80201b6:	d45d      	bmi.n	8020274 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80201b8:	4576      	cmp	r6, lr
 80201ba:	da5b      	bge.n	8020274 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80201bc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80201be:	fb06 2404 	mla	r4, r6, r4, r2
 80201c2:	1424      	asrs	r4, r4, #16
 80201c4:	d456      	bmi.n	8020274 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80201c6:	42bc      	cmp	r4, r7
 80201c8:	da54      	bge.n	8020274 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80201ca:	f8dd 9000 	ldr.w	r9, [sp]
 80201ce:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80201d2:	4698      	mov	r8, r3
 80201d4:	f1b8 0f00 	cmp.w	r8, #0
 80201d8:	dd54      	ble.n	8020284 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80201da:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80201de:	9804      	ldr	r0, [sp, #16]
 80201e0:	1414      	asrs	r4, r2, #16
 80201e2:	fb07 0404 	mla	r4, r7, r4, r0
 80201e6:	140e      	asrs	r6, r1, #16
 80201e8:	9801      	ldr	r0, [sp, #4]
 80201ea:	f814 e006 	ldrb.w	lr, [r4, r6]
 80201ee:	f8b9 4000 	ldrh.w	r4, [r9]
 80201f2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80201f6:	eb00 0b0e 	add.w	fp, r0, lr
 80201fa:	1227      	asrs	r7, r4, #8
 80201fc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8020200:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020204:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8020208:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802020a:	fb16 f60a 	smulbb	r6, r6, sl
 802020e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020212:	fb07 6705 	mla	r7, r7, r5, r6
 8020216:	10e6      	asrs	r6, r4, #3
 8020218:	00e4      	lsls	r4, r4, #3
 802021a:	b2e4      	uxtb	r4, r4
 802021c:	fb1b fb0a 	smulbb	fp, fp, sl
 8020220:	fb14 f405 	smulbb	r4, r4, r5
 8020224:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020228:	b2bf      	uxth	r7, r7
 802022a:	fb06 b605 	mla	r6, r6, r5, fp
 802022e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 8020232:	b2b6      	uxth	r6, r6
 8020234:	fa1f fe8e 	uxth.w	lr, lr
 8020238:	1c7c      	adds	r4, r7, #1
 802023a:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 802023e:	f106 0b01 	add.w	fp, r6, #1
 8020242:	f10e 0401 	add.w	r4, lr, #1
 8020246:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 802024a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 802024e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020252:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8020256:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802025a:	4327      	orrs	r7, r4
 802025c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020260:	4401      	add	r1, r0
 8020262:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020264:	ea47 070b 	orr.w	r7, r7, fp
 8020268:	f829 7b02 	strh.w	r7, [r9], #2
 802026c:	4402      	add	r2, r0
 802026e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020272:	e7af      	b.n	80201d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020274:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8020278:	f04f 0e00 	mov.w	lr, #0
 802027c:	eb03 040e 	add.w	r4, r3, lr
 8020280:	2c00      	cmp	r4, #0
 8020282:	dc43      	bgt.n	802030c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020284:	9a00      	ldr	r2, [sp, #0]
 8020286:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802028a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802028e:	9300      	str	r3, [sp, #0]
 8020290:	9b02      	ldr	r3, [sp, #8]
 8020292:	2b00      	cmp	r3, #0
 8020294:	f340 8098 	ble.w	80203c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020298:	ee30 0a04 	vadd.f32	s0, s0, s8
 802029c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80202a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80202a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80202aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80202ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202b2:	eef0 6a62 	vmov.f32	s13, s5
 80202b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202c2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80202c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202ca:	eef0 6a43 	vmov.f32	s13, s6
 80202ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202d2:	ee12 2a90 	vmov	r2, s5
 80202d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202da:	fb92 f3f3 	sdiv	r3, r2, r3
 80202de:	ee13 2a10 	vmov	r2, s6
 80202e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80202e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80202ea:	9314      	str	r3, [sp, #80]	; 0x50
 80202ec:	9b02      	ldr	r3, [sp, #8]
 80202ee:	9a05      	ldr	r2, [sp, #20]
 80202f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202f4:	3b01      	subs	r3, #1
 80202f6:	9302      	str	r3, [sp, #8]
 80202f8:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80202fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202fe:	eeb0 3a67 	vmov.f32	s6, s15
 8020302:	bf08      	it	eq
 8020304:	4613      	moveq	r3, r2
 8020306:	eef0 2a47 	vmov.f32	s5, s14
 802030a:	e72a      	b.n	8020162 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802030c:	140f      	asrs	r7, r1, #16
 802030e:	d454      	bmi.n	80203ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020310:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8020314:	42be      	cmp	r6, r7
 8020316:	dd50      	ble.n	80203ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020318:	ea5f 4822 	movs.w	r8, r2, asr #16
 802031c:	d44d      	bmi.n	80203ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802031e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8020322:	4544      	cmp	r4, r8
 8020324:	dd49      	ble.n	80203ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020326:	9c04      	ldr	r4, [sp, #16]
 8020328:	b236      	sxth	r6, r6
 802032a:	fb08 4606 	mla	r6, r8, r6, r4
 802032e:	f06f 0001 	mvn.w	r0, #1
 8020332:	f816 8007 	ldrb.w	r8, [r6, r7]
 8020336:	9c01      	ldr	r4, [sp, #4]
 8020338:	fb00 fa0e 	mul.w	sl, r0, lr
 802033c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020340:	9800      	ldr	r0, [sp, #0]
 8020342:	eb04 0b08 	add.w	fp, r4, r8
 8020346:	f830 400a 	ldrh.w	r4, [r0, sl]
 802034a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 802034e:	9801      	ldr	r0, [sp, #4]
 8020350:	f89b b001 	ldrb.w	fp, [fp, #1]
 8020354:	f810 8008 	ldrb.w	r8, [r0, r8]
 8020358:	9800      	ldr	r0, [sp, #0]
 802035a:	1227      	asrs	r7, r4, #8
 802035c:	fb16 f609 	smulbb	r6, r6, r9
 8020360:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020364:	fb07 6705 	mla	r7, r7, r5, r6
 8020368:	10e6      	asrs	r6, r4, #3
 802036a:	00e4      	lsls	r4, r4, #3
 802036c:	b2e4      	uxtb	r4, r4
 802036e:	fb1b fb09 	smulbb	fp, fp, r9
 8020372:	fb14 f405 	smulbb	r4, r4, r5
 8020376:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802037a:	b2bf      	uxth	r7, r7
 802037c:	fb06 b605 	mla	r6, r6, r5, fp
 8020380:	fb08 4809 	mla	r8, r8, r9, r4
 8020384:	b2b6      	uxth	r6, r6
 8020386:	fa1f f888 	uxth.w	r8, r8
 802038a:	1c7c      	adds	r4, r7, #1
 802038c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8020390:	f106 0b01 	add.w	fp, r6, #1
 8020394:	f108 0401 	add.w	r4, r8, #1
 8020398:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 802039c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80203a0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80203a4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80203a8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80203ac:	4327      	orrs	r7, r4
 80203ae:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80203b2:	ea47 070b 	orr.w	r7, r7, fp
 80203b6:	f820 700a 	strh.w	r7, [r0, sl]
 80203ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80203bc:	4401      	add	r1, r0
 80203be:	9814      	ldr	r0, [sp, #80]	; 0x50
 80203c0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80203c4:	4402      	add	r2, r0
 80203c6:	e759      	b.n	802027c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80203c8:	b007      	add	sp, #28
 80203ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080203d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80203d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203d4:	b085      	sub	sp, #20
 80203d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80203da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80203dc:	9203      	str	r2, [sp, #12]
 80203de:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80203e2:	6870      	ldr	r0, [r6, #4]
 80203e4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80203e6:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80203ea:	686f      	ldr	r7, [r5, #4]
 80203ec:	9101      	str	r1, [sp, #4]
 80203ee:	fb00 2404 	mla	r4, r0, r4, r2
 80203f2:	6832      	ldr	r2, [r6, #0]
 80203f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80203f8:	682a      	ldr	r2, [r5, #0]
 80203fa:	9202      	str	r2, [sp, #8]
 80203fc:	3704      	adds	r7, #4
 80203fe:	9a01      	ldr	r2, [sp, #4]
 8020400:	2a00      	cmp	r2, #0
 8020402:	dc03      	bgt.n	802040c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020404:	9a03      	ldr	r2, [sp, #12]
 8020406:	2a00      	cmp	r2, #0
 8020408:	f340 80cc 	ble.w	80205a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802040c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802040e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020412:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8020416:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802041a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802041c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020420:	2b00      	cmp	r3, #0
 8020422:	dd0d      	ble.n	8020440 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020424:	1406      	asrs	r6, r0, #16
 8020426:	d405      	bmi.n	8020434 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020428:	454e      	cmp	r6, r9
 802042a:	da03      	bge.n	8020434 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802042c:	1416      	asrs	r6, r2, #16
 802042e:	d401      	bmi.n	8020434 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020430:	4546      	cmp	r6, r8
 8020432:	db06      	blt.n	8020442 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020434:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8020436:	4460      	add	r0, ip
 8020438:	4432      	add	r2, r6
 802043a:	3b01      	subs	r3, #1
 802043c:	3402      	adds	r4, #2
 802043e:	e7ef      	b.n	8020420 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8020440:	d00f      	beq.n	8020462 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020442:	1e5e      	subs	r6, r3, #1
 8020444:	fb0c 0e06 	mla	lr, ip, r6, r0
 8020448:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 802044c:	d543      	bpl.n	80204d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802044e:	4698      	mov	r8, r3
 8020450:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8020454:	f1b8 0f00 	cmp.w	r8, #0
 8020458:	dc71      	bgt.n	802053e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802045a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802045e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020462:	9b01      	ldr	r3, [sp, #4]
 8020464:	2b00      	cmp	r3, #0
 8020466:	f340 809d 	ble.w	80205a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802046a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802046e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020472:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020478:	ee31 1a05 	vadd.f32	s2, s2, s10
 802047c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020480:	eeb0 6a62 	vmov.f32	s12, s5
 8020484:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020488:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802048c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020490:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020494:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020498:	eeb0 6a43 	vmov.f32	s12, s6
 802049c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80204a0:	ee12 2a90 	vmov	r2, s5
 80204a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80204a8:	fb92 fcf3 	sdiv	ip, r2, r3
 80204ac:	ee13 2a10 	vmov	r2, s6
 80204b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80204b4:	9312      	str	r3, [sp, #72]	; 0x48
 80204b6:	9b01      	ldr	r3, [sp, #4]
 80204b8:	9a03      	ldr	r2, [sp, #12]
 80204ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80204be:	3b01      	subs	r3, #1
 80204c0:	9301      	str	r3, [sp, #4]
 80204c2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80204c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204c8:	eeb0 3a67 	vmov.f32	s6, s15
 80204cc:	bf08      	it	eq
 80204ce:	4613      	moveq	r3, r2
 80204d0:	eef0 2a47 	vmov.f32	s5, s14
 80204d4:	e793      	b.n	80203fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80204d6:	45ce      	cmp	lr, r9
 80204d8:	dab9      	bge.n	802044e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80204da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80204dc:	fb01 2606 	mla	r6, r1, r6, r2
 80204e0:	1436      	asrs	r6, r6, #16
 80204e2:	d4b4      	bmi.n	802044e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80204e4:	4546      	cmp	r6, r8
 80204e6:	dab2      	bge.n	802044e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80204e8:	4698      	mov	r8, r3
 80204ea:	46a2      	mov	sl, r4
 80204ec:	f1b8 0f00 	cmp.w	r8, #0
 80204f0:	ddb3      	ble.n	802045a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80204f2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80204f6:	9902      	ldr	r1, [sp, #8]
 80204f8:	1416      	asrs	r6, r2, #16
 80204fa:	fb09 1606 	mla	r6, r9, r6, r1
 80204fe:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8020502:	492a      	ldr	r1, [pc, #168]	; (80205ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8020504:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8020508:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802050c:	eb07 0b0e 	add.w	fp, r7, lr
 8020510:	4460      	add	r0, ip
 8020512:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8020516:	f89b 9002 	ldrb.w	r9, [fp, #2]
 802051a:	00f6      	lsls	r6, r6, #3
 802051c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8020520:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020524:	ea49 0606 	orr.w	r6, r9, r6
 8020528:	f817 900e 	ldrb.w	r9, [r7, lr]
 802052c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802052e:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8020532:	f82a 6b02 	strh.w	r6, [sl], #2
 8020536:	440a      	add	r2, r1
 8020538:	f108 38ff 	add.w	r8, r8, #4294967295
 802053c:	e7d6      	b.n	80204ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802053e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020542:	d429      	bmi.n	8020598 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020544:	68ae      	ldr	r6, [r5, #8]
 8020546:	454e      	cmp	r6, r9
 8020548:	dd26      	ble.n	8020598 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802054a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 802054e:	d423      	bmi.n	8020598 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020550:	68e9      	ldr	r1, [r5, #12]
 8020552:	4559      	cmp	r1, fp
 8020554:	dd20      	ble.n	8020598 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020556:	9902      	ldr	r1, [sp, #8]
 8020558:	fa0f fe86 	sxth.w	lr, r6
 802055c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8020560:	f06f 0101 	mvn.w	r1, #1
 8020564:	f81e e009 	ldrb.w	lr, [lr, r9]
 8020568:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802056c:	eb07 060e 	add.w	r6, r7, lr
 8020570:	fb01 f908 	mul.w	r9, r1, r8
 8020574:	f896 b002 	ldrb.w	fp, [r6, #2]
 8020578:	7876      	ldrb	r6, [r6, #1]
 802057a:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 802057e:	00f6      	lsls	r6, r6, #3
 8020580:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8020584:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020588:	ea4b 0606 	orr.w	r6, fp, r6
 802058c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8020590:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8020594:	f82a 6009 	strh.w	r6, [sl, r9]
 8020598:	9912      	ldr	r1, [sp, #72]	; 0x48
 802059a:	4460      	add	r0, ip
 802059c:	440a      	add	r2, r1
 802059e:	f108 38ff 	add.w	r8, r8, #4294967295
 80205a2:	e757      	b.n	8020454 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80205a4:	b005      	add	sp, #20
 80205a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205aa:	bf00      	nop
 80205ac:	fffff800 	.word	0xfffff800

080205b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80205b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205b4:	b087      	sub	sp, #28
 80205b6:	468b      	mov	fp, r1
 80205b8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80205ba:	9204      	str	r2, [sp, #16]
 80205bc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80205c0:	9205      	str	r2, [sp, #20]
 80205c2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80205c6:	6841      	ldr	r1, [r0, #4]
 80205c8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80205cc:	fb01 2404 	mla	r4, r1, r4, r2
 80205d0:	6802      	ldr	r2, [r0, #0]
 80205d2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80205d6:	f8dc 2000 	ldr.w	r2, [ip]
 80205da:	9201      	str	r2, [sp, #4]
 80205dc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80205e0:	3204      	adds	r2, #4
 80205e2:	9202      	str	r2, [sp, #8]
 80205e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80205e8:	f1bb 0f00 	cmp.w	fp, #0
 80205ec:	dc03      	bgt.n	80205f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80205ee:	9a04      	ldr	r2, [sp, #16]
 80205f0:	2a00      	cmp	r2, #0
 80205f2:	f340 8138 	ble.w	8020866 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80205f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80205f8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80205fc:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8020600:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020604:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020606:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802060a:	2b00      	cmp	r3, #0
 802060c:	dd0e      	ble.n	802062c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802060e:	1402      	asrs	r2, r0, #16
 8020610:	d405      	bmi.n	802061e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020612:	42ba      	cmp	r2, r7
 8020614:	da03      	bge.n	802061e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020616:	140a      	asrs	r2, r1, #16
 8020618:	d401      	bmi.n	802061e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802061a:	42b2      	cmp	r2, r6
 802061c:	db07      	blt.n	802062e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802061e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020620:	4410      	add	r0, r2
 8020622:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020624:	3b01      	subs	r3, #1
 8020626:	4411      	add	r1, r2
 8020628:	3402      	adds	r4, #2
 802062a:	e7ee      	b.n	802060a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802062c:	d019      	beq.n	8020662 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802062e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020630:	1e5a      	subs	r2, r3, #1
 8020632:	fb05 0502 	mla	r5, r5, r2, r0
 8020636:	142d      	asrs	r5, r5, #16
 8020638:	d409      	bmi.n	802064e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802063a:	42bd      	cmp	r5, r7
 802063c:	da07      	bge.n	802064e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802063e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020640:	fb05 1202 	mla	r2, r5, r2, r1
 8020644:	1412      	asrs	r2, r2, #16
 8020646:	d402      	bmi.n	802064e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020648:	42b2      	cmp	r2, r6
 802064a:	f2c0 80ac 	blt.w	80207a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802064e:	f04f 0e00 	mov.w	lr, #0
 8020652:	eb03 020e 	add.w	r2, r3, lr
 8020656:	2a00      	cmp	r2, #0
 8020658:	dc3e      	bgt.n	80206d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802065a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802065e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020662:	f1bb 0f00 	cmp.w	fp, #0
 8020666:	f340 80fe 	ble.w	8020866 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802066a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802066e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020672:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020676:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020678:	f1bb 0b01 	subs.w	fp, fp, #1
 802067c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020680:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020684:	eeb0 6a62 	vmov.f32	s12, s5
 8020688:	ee61 7a27 	vmul.f32	s15, s2, s15
 802068c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020690:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020694:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020698:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802069c:	eeb0 6a43 	vmov.f32	s12, s6
 80206a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80206a4:	ee12 2a90 	vmov	r2, s5
 80206a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80206ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80206b0:	ee13 2a10 	vmov	r2, s6
 80206b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80206b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80206ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80206c0:	9a04      	ldr	r2, [sp, #16]
 80206c2:	9314      	str	r3, [sp, #80]	; 0x50
 80206c4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80206c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80206ca:	eeb0 3a67 	vmov.f32	s6, s15
 80206ce:	bf08      	it	eq
 80206d0:	4613      	moveq	r3, r2
 80206d2:	eef0 2a47 	vmov.f32	s5, s14
 80206d6:	e787      	b.n	80205e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80206d8:	1406      	asrs	r6, r0, #16
 80206da:	d45d      	bmi.n	8020798 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80206dc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80206e0:	42b5      	cmp	r5, r6
 80206e2:	dd59      	ble.n	8020798 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80206e4:	140f      	asrs	r7, r1, #16
 80206e6:	d457      	bmi.n	8020798 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80206e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80206ec:	42ba      	cmp	r2, r7
 80206ee:	dd53      	ble.n	8020798 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80206f0:	9a01      	ldr	r2, [sp, #4]
 80206f2:	b22d      	sxth	r5, r5
 80206f4:	fb07 2505 	mla	r5, r7, r5, r2
 80206f8:	5daa      	ldrb	r2, [r5, r6]
 80206fa:	9d02      	ldr	r5, [sp, #8]
 80206fc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8020700:	0e2e      	lsrs	r6, r5, #24
 8020702:	d049      	beq.n	8020798 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020704:	f06f 0201 	mvn.w	r2, #1
 8020708:	fb02 f20e 	mul.w	r2, r2, lr
 802070c:	9203      	str	r2, [sp, #12]
 802070e:	f834 8002 	ldrh.w	r8, [r4, r2]
 8020712:	9a05      	ldr	r2, [sp, #20]
 8020714:	4356      	muls	r6, r2
 8020716:	1c72      	adds	r2, r6, #1
 8020718:	eb02 2226 	add.w	r2, r2, r6, asr #8
 802071c:	1212      	asrs	r2, r2, #8
 802071e:	fa1f f982 	uxth.w	r9, r2
 8020722:	ea4f 2728 	mov.w	r7, r8, asr #8
 8020726:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802072a:	43d2      	mvns	r2, r2
 802072c:	b2d2      	uxtb	r2, r2
 802072e:	fb16 f609 	smulbb	r6, r6, r9
 8020732:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020736:	fb07 6702 	mla	r7, r7, r2, r6
 802073a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802073e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020742:	b2ed      	uxtb	r5, r5
 8020744:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020748:	fa5f f888 	uxtb.w	r8, r8
 802074c:	fb15 f509 	smulbb	r5, r5, r9
 8020750:	fb08 5502 	mla	r5, r8, r2, r5
 8020754:	b2bf      	uxth	r7, r7
 8020756:	fb1a fa09 	smulbb	sl, sl, r9
 802075a:	b2ad      	uxth	r5, r5
 802075c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020760:	fb06 a602 	mla	r6, r6, r2, sl
 8020764:	1c7a      	adds	r2, r7, #1
 8020766:	f105 0a01 	add.w	sl, r5, #1
 802076a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802076e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020772:	b2b6      	uxth	r6, r6
 8020774:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020778:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802077c:	ea4a 0707 	orr.w	r7, sl, r7
 8020780:	f106 0a01 	add.w	sl, r6, #1
 8020784:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020788:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802078c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020790:	9a03      	ldr	r2, [sp, #12]
 8020792:	ea47 070a 	orr.w	r7, r7, sl
 8020796:	52a7      	strh	r7, [r4, r2]
 8020798:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802079a:	4410      	add	r0, r2
 802079c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802079e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80207a2:	4411      	add	r1, r2
 80207a4:	e755      	b.n	8020652 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80207a6:	f04f 0800 	mov.w	r8, #0
 80207aa:	eba3 0208 	sub.w	r2, r3, r8
 80207ae:	2a00      	cmp	r2, #0
 80207b0:	f77f af53 	ble.w	802065a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80207b4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 80207b8:	9f01      	ldr	r7, [sp, #4]
 80207ba:	140a      	asrs	r2, r1, #16
 80207bc:	1405      	asrs	r5, r0, #16
 80207be:	fb06 7202 	mla	r2, r6, r2, r7
 80207c2:	5d52      	ldrb	r2, [r2, r5]
 80207c4:	9d02      	ldr	r5, [sp, #8]
 80207c6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80207ca:	0e2e      	lsrs	r6, r5, #24
 80207cc:	d044      	beq.n	8020858 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80207ce:	9a05      	ldr	r2, [sp, #20]
 80207d0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80207d4:	4356      	muls	r6, r2
 80207d6:	1c72      	adds	r2, r6, #1
 80207d8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80207dc:	1212      	asrs	r2, r2, #8
 80207de:	fa1f f982 	uxth.w	r9, r2
 80207e2:	ea4f 272e 	mov.w	r7, lr, asr #8
 80207e6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80207ea:	43d2      	mvns	r2, r2
 80207ec:	b2d2      	uxtb	r2, r2
 80207ee:	fb16 f609 	smulbb	r6, r6, r9
 80207f2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80207f6:	fb07 6702 	mla	r7, r7, r2, r6
 80207fa:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80207fe:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020802:	b2ed      	uxtb	r5, r5
 8020804:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020808:	fa5f fe8e 	uxtb.w	lr, lr
 802080c:	fb15 f509 	smulbb	r5, r5, r9
 8020810:	fb0e 5502 	mla	r5, lr, r2, r5
 8020814:	b2bf      	uxth	r7, r7
 8020816:	fb1a fa09 	smulbb	sl, sl, r9
 802081a:	b2ad      	uxth	r5, r5
 802081c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020820:	fb06 a602 	mla	r6, r6, r2, sl
 8020824:	1c7a      	adds	r2, r7, #1
 8020826:	f105 0a01 	add.w	sl, r5, #1
 802082a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802082e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020832:	b2b6      	uxth	r6, r6
 8020834:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020838:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802083c:	ea4a 0707 	orr.w	r7, sl, r7
 8020840:	f106 0a01 	add.w	sl, r6, #1
 8020844:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020848:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802084c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020850:	ea47 070a 	orr.w	r7, r7, sl
 8020854:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802085a:	4410      	add	r0, r2
 802085c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802085e:	f108 0801 	add.w	r8, r8, #1
 8020862:	4411      	add	r1, r2
 8020864:	e7a1      	b.n	80207aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020866:	b007      	add	sp, #28
 8020868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802086c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020870:	b085      	sub	sp, #20
 8020872:	468b      	mov	fp, r1
 8020874:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020876:	9203      	str	r2, [sp, #12]
 8020878:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802087c:	6841      	ldr	r1, [r0, #4]
 802087e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8020882:	fb01 2404 	mla	r4, r1, r4, r2
 8020886:	6802      	ldr	r2, [r0, #0]
 8020888:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802088c:	f8de 2000 	ldr.w	r2, [lr]
 8020890:	9200      	str	r2, [sp, #0]
 8020892:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020896:	3204      	adds	r2, #4
 8020898:	9201      	str	r2, [sp, #4]
 802089a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802089e:	f1bb 0f00 	cmp.w	fp, #0
 80208a2:	dc03      	bgt.n	80208ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80208a4:	9a03      	ldr	r2, [sp, #12]
 80208a6:	2a00      	cmp	r2, #0
 80208a8:	f340 8153 	ble.w	8020b52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80208ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80208ae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80208b2:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80208b6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80208ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80208bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	dd0e      	ble.n	80208e2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80208c4:	1408      	asrs	r0, r1, #16
 80208c6:	d405      	bmi.n	80208d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80208c8:	42b8      	cmp	r0, r7
 80208ca:	da03      	bge.n	80208d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80208cc:	1410      	asrs	r0, r2, #16
 80208ce:	d401      	bmi.n	80208d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80208d0:	42b0      	cmp	r0, r6
 80208d2:	db07      	blt.n	80208e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80208d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80208d6:	4401      	add	r1, r0
 80208d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80208da:	3b01      	subs	r3, #1
 80208dc:	4402      	add	r2, r0
 80208de:	3402      	adds	r4, #2
 80208e0:	e7ee      	b.n	80208c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80208e2:	d017      	beq.n	8020914 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80208e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80208e6:	1e58      	subs	r0, r3, #1
 80208e8:	fb05 1500 	mla	r5, r5, r0, r1
 80208ec:	142d      	asrs	r5, r5, #16
 80208ee:	d409      	bmi.n	8020904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80208f0:	42bd      	cmp	r5, r7
 80208f2:	da07      	bge.n	8020904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80208f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80208f6:	fb05 2000 	mla	r0, r5, r0, r2
 80208fa:	1400      	asrs	r0, r0, #16
 80208fc:	d402      	bmi.n	8020904 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80208fe:	42b0      	cmp	r0, r6
 8020900:	f2c0 80bc 	blt.w	8020a7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8020904:	2600      	movs	r6, #0
 8020906:	1998      	adds	r0, r3, r6
 8020908:	2800      	cmp	r0, #0
 802090a:	dc3e      	bgt.n	802098a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802090c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020910:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020914:	f1bb 0f00 	cmp.w	fp, #0
 8020918:	f340 811b 	ble.w	8020b52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 802091c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020920:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020924:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802092a:	f1bb 0b01 	subs.w	fp, fp, #1
 802092e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020932:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020936:	eeb0 6a62 	vmov.f32	s12, s5
 802093a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802093e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020942:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020946:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802094a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802094e:	eeb0 6a43 	vmov.f32	s12, s6
 8020952:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020956:	ee12 2a90 	vmov	r2, s5
 802095a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802095e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020962:	ee13 2a10 	vmov	r2, s6
 8020966:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802096a:	9311      	str	r3, [sp, #68]	; 0x44
 802096c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802096e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020972:	9a03      	ldr	r2, [sp, #12]
 8020974:	9312      	str	r3, [sp, #72]	; 0x48
 8020976:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802097a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802097c:	eeb0 3a67 	vmov.f32	s6, s15
 8020980:	bf08      	it	eq
 8020982:	4613      	moveq	r3, r2
 8020984:	eef0 2a47 	vmov.f32	s5, s14
 8020988:	e789      	b.n	802089e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802098a:	140f      	asrs	r7, r1, #16
 802098c:	d426      	bmi.n	80209dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 802098e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020992:	42bd      	cmp	r5, r7
 8020994:	dd22      	ble.n	80209dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020996:	ea5f 4c22 	movs.w	ip, r2, asr #16
 802099a:	d41f      	bmi.n	80209dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 802099c:	f8de 000c 	ldr.w	r0, [lr, #12]
 80209a0:	4560      	cmp	r0, ip
 80209a2:	dd1b      	ble.n	80209dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80209a4:	9800      	ldr	r0, [sp, #0]
 80209a6:	b22d      	sxth	r5, r5
 80209a8:	fb0c 0505 	mla	r5, ip, r5, r0
 80209ac:	5de8      	ldrb	r0, [r5, r7]
 80209ae:	9d01      	ldr	r5, [sp, #4]
 80209b0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80209b4:	0e07      	lsrs	r7, r0, #24
 80209b6:	2fff      	cmp	r7, #255	; 0xff
 80209b8:	d116      	bne.n	80209e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80209ba:	f06f 0501 	mvn.w	r5, #1
 80209be:	fb05 f706 	mul.w	r7, r5, r6
 80209c2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80209c6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80209ca:	0945      	lsrs	r5, r0, #5
 80209cc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80209d0:	ea4c 0505 	orr.w	r5, ip, r5
 80209d4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80209d8:	4305      	orrs	r5, r0
 80209da:	53e5      	strh	r5, [r4, r7]
 80209dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80209de:	4401      	add	r1, r0
 80209e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80209e2:	3e01      	subs	r6, #1
 80209e4:	4402      	add	r2, r0
 80209e6:	e78e      	b.n	8020906 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80209e8:	b2fd      	uxtb	r5, r7
 80209ea:	2f00      	cmp	r7, #0
 80209ec:	d0f6      	beq.n	80209dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80209ee:	f06f 0701 	mvn.w	r7, #1
 80209f2:	4377      	muls	r7, r6
 80209f4:	fa1f f985 	uxth.w	r9, r5
 80209f8:	f834 8007 	ldrh.w	r8, [r4, r7]
 80209fc:	9702      	str	r7, [sp, #8]
 80209fe:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020a02:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020a06:	43ed      	mvns	r5, r5
 8020a08:	b2ed      	uxtb	r5, r5
 8020a0a:	fb17 f709 	smulbb	r7, r7, r9
 8020a0e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020a12:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020a16:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020a1a:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8020a1e:	b2c0      	uxtb	r0, r0
 8020a20:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020a24:	fa5f f888 	uxtb.w	r8, r8
 8020a28:	fb10 f009 	smulbb	r0, r0, r9
 8020a2c:	fb08 0005 	mla	r0, r8, r5, r0
 8020a30:	b280      	uxth	r0, r0
 8020a32:	fa1f fc8c 	uxth.w	ip, ip
 8020a36:	fb1a fa09 	smulbb	sl, sl, r9
 8020a3a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020a3e:	fb07 a705 	mla	r7, r7, r5, sl
 8020a42:	f100 0a01 	add.w	sl, r0, #1
 8020a46:	f10c 0501 	add.w	r5, ip, #1
 8020a4a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020a4e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020a52:	b2bf      	uxth	r7, r7
 8020a54:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020a58:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020a5c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020a60:	f107 0a01 	add.w	sl, r7, #1
 8020a64:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020a68:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020a6c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020a70:	9802      	ldr	r0, [sp, #8]
 8020a72:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020a76:	f824 c000 	strh.w	ip, [r4, r0]
 8020a7a:	e7af      	b.n	80209dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020a7c:	f04f 0800 	mov.w	r8, #0
 8020a80:	eba3 0008 	sub.w	r0, r3, r8
 8020a84:	2800      	cmp	r0, #0
 8020a86:	f77f af41 	ble.w	802090c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020a8a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020a8e:	9f00      	ldr	r7, [sp, #0]
 8020a90:	1410      	asrs	r0, r2, #16
 8020a92:	140d      	asrs	r5, r1, #16
 8020a94:	fb06 7000 	mla	r0, r6, r0, r7
 8020a98:	5d40      	ldrb	r0, [r0, r5]
 8020a9a:	9d01      	ldr	r5, [sp, #4]
 8020a9c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020aa0:	0e2e      	lsrs	r6, r5, #24
 8020aa2:	2eff      	cmp	r6, #255	; 0xff
 8020aa4:	d112      	bne.n	8020acc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8020aa6:	482c      	ldr	r0, [pc, #176]	; (8020b58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8020aa8:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020aac:	0968      	lsrs	r0, r5, #5
 8020aae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020ab2:	4330      	orrs	r0, r6
 8020ab4:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020ab8:	4328      	orrs	r0, r5
 8020aba:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8020abe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020ac0:	4401      	add	r1, r0
 8020ac2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020ac4:	f108 0801 	add.w	r8, r8, #1
 8020ac8:	4402      	add	r2, r0
 8020aca:	e7d9      	b.n	8020a80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020acc:	b2f0      	uxtb	r0, r6
 8020ace:	2e00      	cmp	r6, #0
 8020ad0:	d0f5      	beq.n	8020abe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020ad2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8020ad6:	fa1f f980 	uxth.w	r9, r0
 8020ada:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020ade:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020ae2:	43c0      	mvns	r0, r0
 8020ae4:	b2c0      	uxtb	r0, r0
 8020ae6:	fb16 f609 	smulbb	r6, r6, r9
 8020aea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020aee:	fb07 6700 	mla	r7, r7, r0, r6
 8020af2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020af6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020afa:	b2ed      	uxtb	r5, r5
 8020afc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020b00:	fa5f fc8c 	uxtb.w	ip, ip
 8020b04:	fb15 f509 	smulbb	r5, r5, r9
 8020b08:	fb0c 5500 	mla	r5, ip, r0, r5
 8020b0c:	b2bf      	uxth	r7, r7
 8020b0e:	fb1a fa09 	smulbb	sl, sl, r9
 8020b12:	b2ad      	uxth	r5, r5
 8020b14:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020b18:	fb06 a600 	mla	r6, r6, r0, sl
 8020b1c:	1c78      	adds	r0, r7, #1
 8020b1e:	f105 0a01 	add.w	sl, r5, #1
 8020b22:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020b26:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020b2a:	b2b6      	uxth	r6, r6
 8020b2c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020b30:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020b34:	ea4a 0707 	orr.w	r7, sl, r7
 8020b38:	f106 0a01 	add.w	sl, r6, #1
 8020b3c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020b40:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020b44:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020b48:	ea47 070a 	orr.w	r7, r7, sl
 8020b4c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020b50:	e7b5      	b.n	8020abe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020b52:	b005      	add	sp, #20
 8020b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b58:	fffff800 	.word	0xfffff800

08020b5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b60:	b087      	sub	sp, #28
 8020b62:	468b      	mov	fp, r1
 8020b64:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020b66:	9204      	str	r2, [sp, #16]
 8020b68:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020b6c:	9205      	str	r2, [sp, #20]
 8020b6e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8020b72:	6861      	ldr	r1, [r4, #4]
 8020b74:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8020b78:	fb01 2000 	mla	r0, r1, r0, r2
 8020b7c:	6822      	ldr	r2, [r4, #0]
 8020b7e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020b82:	f8de 2000 	ldr.w	r2, [lr]
 8020b86:	9201      	str	r2, [sp, #4]
 8020b88:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020b8c:	9202      	str	r2, [sp, #8]
 8020b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020b92:	f1bb 0f00 	cmp.w	fp, #0
 8020b96:	dc03      	bgt.n	8020ba0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020b98:	9a04      	ldr	r2, [sp, #16]
 8020b9a:	2a00      	cmp	r2, #0
 8020b9c:	f340 8142 	ble.w	8020e24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020ba0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020ba2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020ba6:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020baa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020bae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020bb0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	dd0e      	ble.n	8020bd6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020bb8:	140c      	asrs	r4, r1, #16
 8020bba:	d405      	bmi.n	8020bc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020bbc:	42bc      	cmp	r4, r7
 8020bbe:	da03      	bge.n	8020bc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020bc0:	1414      	asrs	r4, r2, #16
 8020bc2:	d401      	bmi.n	8020bc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020bc4:	42b4      	cmp	r4, r6
 8020bc6:	db07      	blt.n	8020bd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bc8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020bca:	4421      	add	r1, r4
 8020bcc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020bce:	3b01      	subs	r3, #1
 8020bd0:	4422      	add	r2, r4
 8020bd2:	3002      	adds	r0, #2
 8020bd4:	e7ee      	b.n	8020bb4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020bd6:	d019      	beq.n	8020c0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020bd8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020bda:	1e5c      	subs	r4, r3, #1
 8020bdc:	fb05 1504 	mla	r5, r5, r4, r1
 8020be0:	142d      	asrs	r5, r5, #16
 8020be2:	d409      	bmi.n	8020bf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020be4:	42bd      	cmp	r5, r7
 8020be6:	da07      	bge.n	8020bf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020be8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020bea:	fb05 2404 	mla	r4, r5, r4, r2
 8020bee:	1424      	asrs	r4, r4, #16
 8020bf0:	d402      	bmi.n	8020bf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020bf2:	42b4      	cmp	r4, r6
 8020bf4:	f2c0 80b1 	blt.w	8020d5a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8020bf8:	f04f 0800 	mov.w	r8, #0
 8020bfc:	eb03 0408 	add.w	r4, r3, r8
 8020c00:	2c00      	cmp	r4, #0
 8020c02:	dc3e      	bgt.n	8020c82 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020c04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020c08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020c0c:	f1bb 0f00 	cmp.w	fp, #0
 8020c10:	f340 8108 	ble.w	8020e24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020c14:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c22:	f1bb 0b01 	subs.w	fp, fp, #1
 8020c26:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c2e:	eeb0 6a62 	vmov.f32	s12, s5
 8020c32:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c3e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020c42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c46:	eeb0 6a43 	vmov.f32	s12, s6
 8020c4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c4e:	ee12 2a90 	vmov	r2, s5
 8020c52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c5a:	ee13 2a10 	vmov	r2, s6
 8020c5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c62:	9313      	str	r3, [sp, #76]	; 0x4c
 8020c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c66:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c6a:	9a04      	ldr	r2, [sp, #16]
 8020c6c:	9314      	str	r3, [sp, #80]	; 0x50
 8020c6e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020c72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c74:	eeb0 3a67 	vmov.f32	s6, s15
 8020c78:	bf08      	it	eq
 8020c7a:	4613      	moveq	r3, r2
 8020c7c:	eef0 2a47 	vmov.f32	s5, s14
 8020c80:	e787      	b.n	8020b92 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020c82:	140e      	asrs	r6, r1, #16
 8020c84:	d462      	bmi.n	8020d4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020c86:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020c8a:	42b5      	cmp	r5, r6
 8020c8c:	dd5e      	ble.n	8020d4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020c8e:	1417      	asrs	r7, r2, #16
 8020c90:	d45c      	bmi.n	8020d4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020c92:	f8de 400c 	ldr.w	r4, [lr, #12]
 8020c96:	42bc      	cmp	r4, r7
 8020c98:	dd58      	ble.n	8020d4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020c9a:	b22d      	sxth	r5, r5
 8020c9c:	fb07 6505 	mla	r5, r7, r5, r6
 8020ca0:	9c02      	ldr	r4, [sp, #8]
 8020ca2:	5d66      	ldrb	r6, [r4, r5]
 8020ca4:	2e00      	cmp	r6, #0
 8020ca6:	d051      	beq.n	8020d4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020ca8:	9c01      	ldr	r4, [sp, #4]
 8020caa:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8020cae:	f06f 0401 	mvn.w	r4, #1
 8020cb2:	fb04 f408 	mul.w	r4, r4, r8
 8020cb6:	9403      	str	r4, [sp, #12]
 8020cb8:	5b05      	ldrh	r5, [r0, r4]
 8020cba:	9c05      	ldr	r4, [sp, #20]
 8020cbc:	4366      	muls	r6, r4
 8020cbe:	1c74      	adds	r4, r6, #1
 8020cc0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020cc4:	1224      	asrs	r4, r4, #8
 8020cc6:	b2a7      	uxth	r7, r4
 8020cc8:	122e      	asrs	r6, r5, #8
 8020cca:	43e4      	mvns	r4, r4
 8020ccc:	b2e4      	uxtb	r4, r4
 8020cce:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8020cd2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020cd6:	fb16 f604 	smulbb	r6, r6, r4
 8020cda:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020cde:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020ce2:	00ed      	lsls	r5, r5, #3
 8020ce4:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020ce8:	b2ed      	uxtb	r5, r5
 8020cea:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8020cee:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020cf2:	fb15 f504 	smulbb	r5, r5, r4
 8020cf6:	fa5f f989 	uxtb.w	r9, r9
 8020cfa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020cfe:	fb09 5507 	mla	r5, r9, r7, r5
 8020d02:	fb1a fa04 	smulbb	sl, sl, r4
 8020d06:	fa1f fc8c 	uxth.w	ip, ip
 8020d0a:	b2ad      	uxth	r5, r5
 8020d0c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020d10:	fb06 a607 	mla	r6, r6, r7, sl
 8020d14:	f10c 0401 	add.w	r4, ip, #1
 8020d18:	f105 0a01 	add.w	sl, r5, #1
 8020d1c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020d20:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020d24:	b2b6      	uxth	r6, r6
 8020d26:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020d2a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020d2e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020d32:	f106 0a01 	add.w	sl, r6, #1
 8020d36:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020d3a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020d3e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020d42:	9c03      	ldr	r4, [sp, #12]
 8020d44:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020d48:	f820 c004 	strh.w	ip, [r0, r4]
 8020d4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020d4e:	4421      	add	r1, r4
 8020d50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020d52:	f108 38ff 	add.w	r8, r8, #4294967295
 8020d56:	4422      	add	r2, r4
 8020d58:	e750      	b.n	8020bfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020d5a:	f04f 0900 	mov.w	r9, #0
 8020d5e:	eba3 0409 	sub.w	r4, r3, r9
 8020d62:	2c00      	cmp	r4, #0
 8020d64:	f77f af4e 	ble.w	8020c04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020d68:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020d6c:	140d      	asrs	r5, r1, #16
 8020d6e:	1414      	asrs	r4, r2, #16
 8020d70:	fb06 5404 	mla	r4, r6, r4, r5
 8020d74:	9d02      	ldr	r5, [sp, #8]
 8020d76:	5d2e      	ldrb	r6, [r5, r4]
 8020d78:	2e00      	cmp	r6, #0
 8020d7a:	d04c      	beq.n	8020e16 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020d7c:	9d01      	ldr	r5, [sp, #4]
 8020d7e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8020d82:	9c05      	ldr	r4, [sp, #20]
 8020d84:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8020d88:	4366      	muls	r6, r4
 8020d8a:	1c74      	adds	r4, r6, #1
 8020d8c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020d90:	1224      	asrs	r4, r4, #8
 8020d92:	b2a7      	uxth	r7, r4
 8020d94:	122e      	asrs	r6, r5, #8
 8020d96:	43e4      	mvns	r4, r4
 8020d98:	b2e4      	uxtb	r4, r4
 8020d9a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020d9e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020da2:	fb16 f604 	smulbb	r6, r6, r4
 8020da6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020daa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020dae:	00ed      	lsls	r5, r5, #3
 8020db0:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020db4:	b2ed      	uxtb	r5, r5
 8020db6:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020dba:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020dbe:	fb15 f504 	smulbb	r5, r5, r4
 8020dc2:	fa5f f888 	uxtb.w	r8, r8
 8020dc6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020dca:	fb08 5507 	mla	r5, r8, r7, r5
 8020dce:	fb1a fa04 	smulbb	sl, sl, r4
 8020dd2:	fa1f fc8c 	uxth.w	ip, ip
 8020dd6:	b2ad      	uxth	r5, r5
 8020dd8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020ddc:	fb06 a607 	mla	r6, r6, r7, sl
 8020de0:	f10c 0401 	add.w	r4, ip, #1
 8020de4:	f105 0a01 	add.w	sl, r5, #1
 8020de8:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020dec:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020df0:	b2b6      	uxth	r6, r6
 8020df2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020df6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020dfa:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020dfe:	f106 0a01 	add.w	sl, r6, #1
 8020e02:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020e06:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020e0a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020e0e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020e12:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020e16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020e18:	4421      	add	r1, r4
 8020e1a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020e1c:	f109 0901 	add.w	r9, r9, #1
 8020e20:	4422      	add	r2, r4
 8020e22:	e79c      	b.n	8020d5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020e24:	b007      	add	sp, #28
 8020e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020e2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e2e:	b085      	sub	sp, #20
 8020e30:	468b      	mov	fp, r1
 8020e32:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020e34:	9203      	str	r2, [sp, #12]
 8020e36:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8020e3a:	6861      	ldr	r1, [r4, #4]
 8020e3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020e40:	fb01 2000 	mla	r0, r1, r0, r2
 8020e44:	6822      	ldr	r2, [r4, #0]
 8020e46:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020e4a:	f8d8 2000 	ldr.w	r2, [r8]
 8020e4e:	9200      	str	r2, [sp, #0]
 8020e50:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020e54:	9201      	str	r2, [sp, #4]
 8020e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020e5a:	f1bb 0f00 	cmp.w	fp, #0
 8020e5e:	dc03      	bgt.n	8020e68 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020e60:	9a03      	ldr	r2, [sp, #12]
 8020e62:	2a00      	cmp	r2, #0
 8020e64:	f340 8146 	ble.w	80210f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020e68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e6a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020e6e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020e72:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020e76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020e78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	dd0e      	ble.n	8020e9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020e80:	140c      	asrs	r4, r1, #16
 8020e82:	d405      	bmi.n	8020e90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020e84:	42bc      	cmp	r4, r7
 8020e86:	da03      	bge.n	8020e90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020e88:	1414      	asrs	r4, r2, #16
 8020e8a:	d401      	bmi.n	8020e90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020e8c:	42b4      	cmp	r4, r6
 8020e8e:	db07      	blt.n	8020ea0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020e90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020e92:	4421      	add	r1, r4
 8020e94:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020e96:	3b01      	subs	r3, #1
 8020e98:	4422      	add	r2, r4
 8020e9a:	3002      	adds	r0, #2
 8020e9c:	e7ee      	b.n	8020e7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020e9e:	d017      	beq.n	8020ed0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020ea0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020ea2:	1e5c      	subs	r4, r3, #1
 8020ea4:	fb05 1504 	mla	r5, r5, r4, r1
 8020ea8:	142d      	asrs	r5, r5, #16
 8020eaa:	d409      	bmi.n	8020ec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020eac:	42bd      	cmp	r5, r7
 8020eae:	da07      	bge.n	8020ec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020eb0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020eb2:	fb05 2404 	mla	r4, r5, r4, r2
 8020eb6:	1424      	asrs	r4, r4, #16
 8020eb8:	d402      	bmi.n	8020ec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020eba:	42b4      	cmp	r4, r6
 8020ebc:	f2c0 80b3 	blt.w	8021026 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020ec0:	2600      	movs	r6, #0
 8020ec2:	199c      	adds	r4, r3, r6
 8020ec4:	2c00      	cmp	r4, #0
 8020ec6:	dc3e      	bgt.n	8020f46 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020ec8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ecc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020ed0:	f1bb 0f00 	cmp.w	fp, #0
 8020ed4:	f340 810e 	ble.w	80210f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020ed8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020edc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ee0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ee6:	f1bb 0b01 	subs.w	fp, fp, #1
 8020eea:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020eee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020ef2:	eeb0 6a62 	vmov.f32	s12, s5
 8020ef6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020efa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020efe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f02:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020f06:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f0a:	eeb0 6a43 	vmov.f32	s12, s6
 8020f0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f12:	ee12 2a90 	vmov	r2, s5
 8020f16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f1e:	ee13 2a10 	vmov	r2, s6
 8020f22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f26:	9311      	str	r3, [sp, #68]	; 0x44
 8020f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f2e:	9a03      	ldr	r2, [sp, #12]
 8020f30:	9312      	str	r3, [sp, #72]	; 0x48
 8020f32:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f38:	eeb0 3a67 	vmov.f32	s6, s15
 8020f3c:	bf08      	it	eq
 8020f3e:	4613      	moveq	r3, r2
 8020f40:	eef0 2a47 	vmov.f32	s5, s14
 8020f44:	e789      	b.n	8020e5a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020f46:	140f      	asrs	r7, r1, #16
 8020f48:	d418      	bmi.n	8020f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020f4a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020f4e:	42bd      	cmp	r5, r7
 8020f50:	dd14      	ble.n	8020f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020f52:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020f56:	d411      	bmi.n	8020f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020f58:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8020f5c:	4564      	cmp	r4, ip
 8020f5e:	dd0d      	ble.n	8020f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020f60:	b22d      	sxth	r5, r5
 8020f62:	fb0c 7505 	mla	r5, ip, r5, r7
 8020f66:	9c01      	ldr	r4, [sp, #4]
 8020f68:	5d64      	ldrb	r4, [r4, r5]
 8020f6a:	2cff      	cmp	r4, #255	; 0xff
 8020f6c:	d10c      	bne.n	8020f88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8020f6e:	9c00      	ldr	r4, [sp, #0]
 8020f70:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8020f74:	f06f 0401 	mvn.w	r4, #1
 8020f78:	4374      	muls	r4, r6
 8020f7a:	5305      	strh	r5, [r0, r4]
 8020f7c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020f7e:	4421      	add	r1, r4
 8020f80:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020f82:	3e01      	subs	r6, #1
 8020f84:	4422      	add	r2, r4
 8020f86:	e79c      	b.n	8020ec2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020f88:	2c00      	cmp	r4, #0
 8020f8a:	d0f7      	beq.n	8020f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020f8c:	9f00      	ldr	r7, [sp, #0]
 8020f8e:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8020f92:	f06f 0501 	mvn.w	r5, #1
 8020f96:	4375      	muls	r5, r6
 8020f98:	9502      	str	r5, [sp, #8]
 8020f9a:	5b45      	ldrh	r5, [r0, r5]
 8020f9c:	fa1f fc84 	uxth.w	ip, r4
 8020fa0:	122f      	asrs	r7, r5, #8
 8020fa2:	43e4      	mvns	r4, r4
 8020fa4:	b2e4      	uxtb	r4, r4
 8020fa6:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8020faa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020fae:	fb17 f704 	smulbb	r7, r7, r4
 8020fb2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020fb6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020fba:	00ed      	lsls	r5, r5, #3
 8020fbc:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8020fc0:	b2ed      	uxtb	r5, r5
 8020fc2:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8020fc6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020fca:	fb15 f504 	smulbb	r5, r5, r4
 8020fce:	fa5f f989 	uxtb.w	r9, r9
 8020fd2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020fd6:	fb09 550c 	mla	r5, r9, ip, r5
 8020fda:	fb1a fa04 	smulbb	sl, sl, r4
 8020fde:	fa1f fe8e 	uxth.w	lr, lr
 8020fe2:	b2ad      	uxth	r5, r5
 8020fe4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020fe8:	fb07 a70c 	mla	r7, r7, ip, sl
 8020fec:	f10e 0401 	add.w	r4, lr, #1
 8020ff0:	f105 0a01 	add.w	sl, r5, #1
 8020ff4:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8020ff8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020ffc:	b2bf      	uxth	r7, r7
 8020ffe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021002:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8021006:	ea4a 0e0e 	orr.w	lr, sl, lr
 802100a:	f107 0a01 	add.w	sl, r7, #1
 802100e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021012:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021016:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802101a:	9c02      	ldr	r4, [sp, #8]
 802101c:	ea4e 0e0a 	orr.w	lr, lr, sl
 8021020:	f820 e004 	strh.w	lr, [r0, r4]
 8021024:	e7aa      	b.n	8020f7c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021026:	f04f 0900 	mov.w	r9, #0
 802102a:	eba3 0409 	sub.w	r4, r3, r9
 802102e:	2c00      	cmp	r4, #0
 8021030:	f77f af4a 	ble.w	8020ec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021034:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8021038:	1414      	asrs	r4, r2, #16
 802103a:	140d      	asrs	r5, r1, #16
 802103c:	fb06 5504 	mla	r5, r6, r4, r5
 8021040:	9c01      	ldr	r4, [sp, #4]
 8021042:	5d64      	ldrb	r4, [r4, r5]
 8021044:	2cff      	cmp	r4, #255	; 0xff
 8021046:	d10b      	bne.n	8021060 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8021048:	9c00      	ldr	r4, [sp, #0]
 802104a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 802104e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8021052:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021054:	4421      	add	r1, r4
 8021056:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021058:	f109 0901 	add.w	r9, r9, #1
 802105c:	4422      	add	r2, r4
 802105e:	e7e4      	b.n	802102a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021060:	2c00      	cmp	r4, #0
 8021062:	d0f6      	beq.n	8021052 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021064:	9e00      	ldr	r6, [sp, #0]
 8021066:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802106a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 802106e:	b2a7      	uxth	r7, r4
 8021070:	122e      	asrs	r6, r5, #8
 8021072:	43e4      	mvns	r4, r4
 8021074:	b2e4      	uxtb	r4, r4
 8021076:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802107a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802107e:	fb16 f604 	smulbb	r6, r6, r4
 8021082:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021086:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802108a:	00ed      	lsls	r5, r5, #3
 802108c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021090:	b2ed      	uxtb	r5, r5
 8021092:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021096:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802109a:	fb15 f504 	smulbb	r5, r5, r4
 802109e:	fa5f fe8e 	uxtb.w	lr, lr
 80210a2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80210a6:	fb0e 5507 	mla	r5, lr, r7, r5
 80210aa:	fb1a fa04 	smulbb	sl, sl, r4
 80210ae:	fa1f fc8c 	uxth.w	ip, ip
 80210b2:	b2ad      	uxth	r5, r5
 80210b4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80210b8:	fb06 a607 	mla	r6, r6, r7, sl
 80210bc:	f10c 0401 	add.w	r4, ip, #1
 80210c0:	f105 0a01 	add.w	sl, r5, #1
 80210c4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80210c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80210cc:	b2b6      	uxth	r6, r6
 80210ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80210d2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80210d6:	ea4a 0c0c 	orr.w	ip, sl, ip
 80210da:	f106 0a01 	add.w	sl, r6, #1
 80210de:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80210e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80210e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80210ea:	ea4c 0c0a 	orr.w	ip, ip, sl
 80210ee:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80210f2:	e7ae      	b.n	8021052 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80210f4:	b005      	add	sp, #20
 80210f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080210fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80210fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210fe:	b085      	sub	sp, #20
 8021100:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021102:	9203      	str	r2, [sp, #12]
 8021104:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8021108:	9201      	str	r2, [sp, #4]
 802110a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802110e:	9100      	str	r1, [sp, #0]
 8021110:	6841      	ldr	r1, [r0, #4]
 8021112:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8021116:	fb01 2404 	mla	r4, r1, r4, r2
 802111a:	6802      	ldr	r2, [r0, #0]
 802111c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021120:	f8de 2000 	ldr.w	r2, [lr]
 8021124:	9202      	str	r2, [sp, #8]
 8021126:	9a01      	ldr	r2, [sp, #4]
 8021128:	43d6      	mvns	r6, r2
 802112a:	b2f6      	uxtb	r6, r6
 802112c:	9a00      	ldr	r2, [sp, #0]
 802112e:	2a00      	cmp	r2, #0
 8021130:	dc03      	bgt.n	802113a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8021132:	9a03      	ldr	r2, [sp, #12]
 8021134:	2a00      	cmp	r2, #0
 8021136:	f340 8124 	ble.w	8021382 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802113a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802113c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8021140:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8021144:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021148:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802114a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802114e:	2b00      	cmp	r3, #0
 8021150:	dd0e      	ble.n	8021170 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021152:	1408      	asrs	r0, r1, #16
 8021154:	d405      	bmi.n	8021162 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021156:	4560      	cmp	r0, ip
 8021158:	da03      	bge.n	8021162 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802115a:	1410      	asrs	r0, r2, #16
 802115c:	d401      	bmi.n	8021162 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802115e:	42b8      	cmp	r0, r7
 8021160:	db07      	blt.n	8021172 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021162:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021164:	4401      	add	r1, r0
 8021166:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021168:	3b01      	subs	r3, #1
 802116a:	4402      	add	r2, r0
 802116c:	3402      	adds	r4, #2
 802116e:	e7ee      	b.n	802114e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8021170:	d06e      	beq.n	8021250 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021172:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021174:	1e58      	subs	r0, r3, #1
 8021176:	fb05 1500 	mla	r5, r5, r0, r1
 802117a:	142d      	asrs	r5, r5, #16
 802117c:	d45c      	bmi.n	8021238 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802117e:	4565      	cmp	r5, ip
 8021180:	da5a      	bge.n	8021238 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021182:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021184:	fb05 2000 	mla	r0, r5, r0, r2
 8021188:	1400      	asrs	r0, r0, #16
 802118a:	d455      	bmi.n	8021238 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802118c:	42b8      	cmp	r0, r7
 802118e:	da53      	bge.n	8021238 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021190:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8021194:	4699      	mov	r9, r3
 8021196:	46a2      	mov	sl, r4
 8021198:	f1b9 0f00 	cmp.w	r9, #0
 802119c:	dd54      	ble.n	8021248 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802119e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80211a2:	140d      	asrs	r5, r1, #16
 80211a4:	1410      	asrs	r0, r2, #16
 80211a6:	fb07 5000 	mla	r0, r7, r0, r5
 80211aa:	9d02      	ldr	r5, [sp, #8]
 80211ac:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80211b0:	f8ba 5000 	ldrh.w	r5, [sl]
 80211b4:	122f      	asrs	r7, r5, #8
 80211b6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80211ba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80211be:	fb17 f706 	smulbb	r7, r7, r6
 80211c2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80211c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80211ca:	00ed      	lsls	r5, r5, #3
 80211cc:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80211d0:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80211d4:	10c7      	asrs	r7, r0, #3
 80211d6:	b2ed      	uxtb	r5, r5
 80211d8:	00c0      	lsls	r0, r0, #3
 80211da:	fb18 f806 	smulbb	r8, r8, r6
 80211de:	fb15 f506 	smulbb	r5, r5, r6
 80211e2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80211e6:	b2c0      	uxtb	r0, r0
 80211e8:	fa1f fc8c 	uxth.w	ip, ip
 80211ec:	fb07 870b 	mla	r7, r7, fp, r8
 80211f0:	fb00 500b 	mla	r0, r0, fp, r5
 80211f4:	b280      	uxth	r0, r0
 80211f6:	b2bf      	uxth	r7, r7
 80211f8:	f10c 0501 	add.w	r5, ip, #1
 80211fc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021200:	f107 0801 	add.w	r8, r7, #1
 8021204:	1c45      	adds	r5, r0, #1
 8021206:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802120a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 802120e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021210:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021214:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021218:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802121c:	ea45 0c0c 	orr.w	ip, r5, ip
 8021220:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021224:	4401      	add	r1, r0
 8021226:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021228:	ea4c 0c08 	orr.w	ip, ip, r8
 802122c:	f82a cb02 	strh.w	ip, [sl], #2
 8021230:	4402      	add	r2, r0
 8021232:	f109 39ff 	add.w	r9, r9, #4294967295
 8021236:	e7af      	b.n	8021198 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021238:	f8bd a004 	ldrh.w	sl, [sp, #4]
 802123c:	f04f 0800 	mov.w	r8, #0
 8021240:	eb03 0008 	add.w	r0, r3, r8
 8021244:	2800      	cmp	r0, #0
 8021246:	dc41      	bgt.n	80212cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021248:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802124c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021250:	9b00      	ldr	r3, [sp, #0]
 8021252:	2b00      	cmp	r3, #0
 8021254:	f340 8095 	ble.w	8021382 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8021258:	ee30 0a04 	vadd.f32	s0, s0, s8
 802125c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021260:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021266:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802126a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802126e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021272:	eef0 6a62 	vmov.f32	s13, s5
 8021276:	ee61 7a27 	vmul.f32	s15, s2, s15
 802127a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802127e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021282:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8021286:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802128a:	eef0 6a43 	vmov.f32	s13, s6
 802128e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021292:	ee12 2a90 	vmov	r2, s5
 8021296:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802129a:	fb92 f3f3 	sdiv	r3, r2, r3
 802129e:	ee13 2a10 	vmov	r2, s6
 80212a2:	9311      	str	r3, [sp, #68]	; 0x44
 80212a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80212aa:	9312      	str	r3, [sp, #72]	; 0x48
 80212ac:	9b00      	ldr	r3, [sp, #0]
 80212ae:	9a03      	ldr	r2, [sp, #12]
 80212b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80212b4:	3b01      	subs	r3, #1
 80212b6:	9300      	str	r3, [sp, #0]
 80212b8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80212bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80212be:	eeb0 3a67 	vmov.f32	s6, s15
 80212c2:	bf08      	it	eq
 80212c4:	4613      	moveq	r3, r2
 80212c6:	eef0 2a47 	vmov.f32	s5, s14
 80212ca:	e72f      	b.n	802112c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80212cc:	140f      	asrs	r7, r1, #16
 80212ce:	d451      	bmi.n	8021374 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80212d0:	f8de 5008 	ldr.w	r5, [lr, #8]
 80212d4:	42bd      	cmp	r5, r7
 80212d6:	dd4d      	ble.n	8021374 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80212d8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80212dc:	d44a      	bmi.n	8021374 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80212de:	f8de 000c 	ldr.w	r0, [lr, #12]
 80212e2:	4560      	cmp	r0, ip
 80212e4:	dd46      	ble.n	8021374 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80212e6:	b22d      	sxth	r5, r5
 80212e8:	fb0c 7505 	mla	r5, ip, r5, r7
 80212ec:	9802      	ldr	r0, [sp, #8]
 80212ee:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80212f2:	f06f 0501 	mvn.w	r5, #1
 80212f6:	fb05 fb08 	mul.w	fp, r5, r8
 80212fa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80212fe:	f834 500b 	ldrh.w	r5, [r4, fp]
 8021302:	122f      	asrs	r7, r5, #8
 8021304:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021308:	fb17 f706 	smulbb	r7, r7, r6
 802130c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8021310:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021314:	00ed      	lsls	r5, r5, #3
 8021316:	fb0c 7c0a 	mla	ip, ip, sl, r7
 802131a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802131e:	10c7      	asrs	r7, r0, #3
 8021320:	b2ed      	uxtb	r5, r5
 8021322:	00c0      	lsls	r0, r0, #3
 8021324:	fb19 f906 	smulbb	r9, r9, r6
 8021328:	fb15 f506 	smulbb	r5, r5, r6
 802132c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021330:	b2c0      	uxtb	r0, r0
 8021332:	fa1f fc8c 	uxth.w	ip, ip
 8021336:	fb07 970a 	mla	r7, r7, sl, r9
 802133a:	fb00 500a 	mla	r0, r0, sl, r5
 802133e:	b2bf      	uxth	r7, r7
 8021340:	b280      	uxth	r0, r0
 8021342:	f10c 0501 	add.w	r5, ip, #1
 8021346:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802134a:	f107 0901 	add.w	r9, r7, #1
 802134e:	1c45      	adds	r5, r0, #1
 8021350:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8021354:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8021358:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802135c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021360:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021364:	ea45 0c0c 	orr.w	ip, r5, ip
 8021368:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802136c:	ea4c 0c09 	orr.w	ip, ip, r9
 8021370:	f824 c00b 	strh.w	ip, [r4, fp]
 8021374:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021376:	4401      	add	r1, r0
 8021378:	9812      	ldr	r0, [sp, #72]	; 0x48
 802137a:	f108 38ff 	add.w	r8, r8, #4294967295
 802137e:	4402      	add	r2, r0
 8021380:	e75e      	b.n	8021240 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8021382:	b005      	add	sp, #20
 8021384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021388 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802138c:	b085      	sub	sp, #20
 802138e:	4693      	mov	fp, r2
 8021390:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021392:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021394:	6870      	ldr	r0, [r6, #4]
 8021396:	9101      	str	r1, [sp, #4]
 8021398:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802139c:	fb00 2404 	mla	r4, r0, r4, r2
 80213a0:	6832      	ldr	r2, [r6, #0]
 80213a2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80213a6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80213aa:	682a      	ldr	r2, [r5, #0]
 80213ac:	9202      	str	r2, [sp, #8]
 80213ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80213b2:	9a01      	ldr	r2, [sp, #4]
 80213b4:	2a00      	cmp	r2, #0
 80213b6:	dc03      	bgt.n	80213c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80213b8:	f1bb 0f00 	cmp.w	fp, #0
 80213bc:	f340 809a 	ble.w	80214f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80213c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80213c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80213c6:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80213ca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80213ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80213d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	dd0c      	ble.n	80213f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80213d8:	1406      	asrs	r6, r0, #16
 80213da:	d405      	bmi.n	80213e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80213dc:	454e      	cmp	r6, r9
 80213de:	da03      	bge.n	80213e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80213e0:	1416      	asrs	r6, r2, #16
 80213e2:	d401      	bmi.n	80213e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80213e4:	4546      	cmp	r6, r8
 80213e6:	db05      	blt.n	80213f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80213e8:	4470      	add	r0, lr
 80213ea:	4462      	add	r2, ip
 80213ec:	3b01      	subs	r3, #1
 80213ee:	3402      	adds	r4, #2
 80213f0:	e7f0      	b.n	80213d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80213f2:	d00f      	beq.n	8021414 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80213f4:	1e5e      	subs	r6, r3, #1
 80213f6:	fb0e 0706 	mla	r7, lr, r6, r0
 80213fa:	143f      	asrs	r7, r7, #16
 80213fc:	d541      	bpl.n	8021482 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 80213fe:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8021402:	4698      	mov	r8, r3
 8021404:	9603      	str	r6, [sp, #12]
 8021406:	f1b8 0f00 	cmp.w	r8, #0
 802140a:	dc56      	bgt.n	80214ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 802140c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021410:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021414:	9b01      	ldr	r3, [sp, #4]
 8021416:	2b00      	cmp	r3, #0
 8021418:	dd6c      	ble.n	80214f4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802141a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802141e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021422:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021428:	ee31 1a05 	vadd.f32	s2, s2, s10
 802142c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021430:	eeb0 6a62 	vmov.f32	s12, s5
 8021434:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021438:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802143c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021440:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021444:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021448:	eeb0 6a43 	vmov.f32	s12, s6
 802144c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021450:	ee12 2a90 	vmov	r2, s5
 8021454:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021458:	fb92 fef3 	sdiv	lr, r2, r3
 802145c:	ee13 2a10 	vmov	r2, s6
 8021460:	fb92 fcf3 	sdiv	ip, r2, r3
 8021464:	9b01      	ldr	r3, [sp, #4]
 8021466:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802146a:	3b01      	subs	r3, #1
 802146c:	9301      	str	r3, [sp, #4]
 802146e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021474:	eeb0 3a67 	vmov.f32	s6, s15
 8021478:	bf08      	it	eq
 802147a:	465b      	moveq	r3, fp
 802147c:	eef0 2a47 	vmov.f32	s5, s14
 8021480:	e797      	b.n	80213b2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021482:	454f      	cmp	r7, r9
 8021484:	dabb      	bge.n	80213fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021486:	fb0c 2606 	mla	r6, ip, r6, r2
 802148a:	1436      	asrs	r6, r6, #16
 802148c:	d4b7      	bmi.n	80213fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802148e:	4546      	cmp	r6, r8
 8021490:	dab5      	bge.n	80213fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021492:	461e      	mov	r6, r3
 8021494:	46a0      	mov	r8, r4
 8021496:	2e00      	cmp	r6, #0
 8021498:	ddb8      	ble.n	802140c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802149a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 802149e:	9902      	ldr	r1, [sp, #8]
 80214a0:	1417      	asrs	r7, r2, #16
 80214a2:	ea4f 4920 	mov.w	r9, r0, asr #16
 80214a6:	fb0a 9707 	mla	r7, sl, r7, r9
 80214aa:	4470      	add	r0, lr
 80214ac:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80214b0:	f828 7b02 	strh.w	r7, [r8], #2
 80214b4:	4462      	add	r2, ip
 80214b6:	3e01      	subs	r6, #1
 80214b8:	e7ed      	b.n	8021496 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80214ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 80214be:	d414      	bmi.n	80214ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80214c0:	68ae      	ldr	r6, [r5, #8]
 80214c2:	454e      	cmp	r6, r9
 80214c4:	dd11      	ble.n	80214ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80214c6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80214ca:	d40e      	bmi.n	80214ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80214cc:	68ef      	ldr	r7, [r5, #12]
 80214ce:	4557      	cmp	r7, sl
 80214d0:	dd0b      	ble.n	80214ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80214d2:	b236      	sxth	r6, r6
 80214d4:	fb0a 9606 	mla	r6, sl, r6, r9
 80214d8:	9f02      	ldr	r7, [sp, #8]
 80214da:	f06f 0101 	mvn.w	r1, #1
 80214de:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80214e2:	fb01 f608 	mul.w	r6, r1, r8
 80214e6:	9903      	ldr	r1, [sp, #12]
 80214e8:	538f      	strh	r7, [r1, r6]
 80214ea:	4470      	add	r0, lr
 80214ec:	4462      	add	r2, ip
 80214ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80214f2:	e788      	b.n	8021406 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80214f4:	b005      	add	sp, #20
 80214f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080214fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80214fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214fe:	b087      	sub	sp, #28
 8021500:	468b      	mov	fp, r1
 8021502:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021504:	9203      	str	r2, [sp, #12]
 8021506:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802150a:	9204      	str	r2, [sp, #16]
 802150c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8021510:	6841      	ldr	r1, [r0, #4]
 8021512:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021516:	fb01 2505 	mla	r5, r1, r5, r2
 802151a:	6802      	ldr	r2, [r0, #0]
 802151c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8021520:	f8d9 2000 	ldr.w	r2, [r9]
 8021524:	9201      	str	r2, [sp, #4]
 8021526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802152a:	f1bb 0f00 	cmp.w	fp, #0
 802152e:	dc03      	bgt.n	8021538 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021530:	9a03      	ldr	r2, [sp, #12]
 8021532:	2a00      	cmp	r2, #0
 8021534:	f340 8159 	ble.w	80217ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021538:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802153a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802153e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021542:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021546:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021548:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802154c:	2b00      	cmp	r3, #0
 802154e:	dd0e      	ble.n	802156e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021550:	1402      	asrs	r2, r0, #16
 8021552:	d405      	bmi.n	8021560 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021554:	42ba      	cmp	r2, r7
 8021556:	da03      	bge.n	8021560 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021558:	140a      	asrs	r2, r1, #16
 802155a:	d401      	bmi.n	8021560 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802155c:	42b2      	cmp	r2, r6
 802155e:	db07      	blt.n	8021570 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021562:	4410      	add	r0, r2
 8021564:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021566:	3b01      	subs	r3, #1
 8021568:	4411      	add	r1, r2
 802156a:	3502      	adds	r5, #2
 802156c:	e7ee      	b.n	802154c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802156e:	d017      	beq.n	80215a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021570:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021572:	1e5a      	subs	r2, r3, #1
 8021574:	fb04 0402 	mla	r4, r4, r2, r0
 8021578:	1424      	asrs	r4, r4, #16
 802157a:	d409      	bmi.n	8021590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802157c:	42bc      	cmp	r4, r7
 802157e:	da07      	bge.n	8021590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021580:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021582:	fb04 1202 	mla	r2, r4, r2, r1
 8021586:	1412      	asrs	r2, r2, #16
 8021588:	d402      	bmi.n	8021590 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802158a:	42b2      	cmp	r2, r6
 802158c:	f2c0 80bf 	blt.w	802170e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021590:	2700      	movs	r7, #0
 8021592:	19da      	adds	r2, r3, r7
 8021594:	2a00      	cmp	r2, #0
 8021596:	dc3e      	bgt.n	8021616 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021598:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802159c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80215a0:	f1bb 0f00 	cmp.w	fp, #0
 80215a4:	f340 8121 	ble.w	80217ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80215a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80215ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80215b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80215b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215b6:	f1bb 0b01 	subs.w	fp, fp, #1
 80215ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80215be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80215c2:	eeb0 6a62 	vmov.f32	s12, s5
 80215c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80215ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80215ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80215d2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80215d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215da:	eeb0 6a43 	vmov.f32	s12, s6
 80215de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80215e2:	ee12 2a90 	vmov	r2, s5
 80215e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80215ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80215ee:	ee13 2a10 	vmov	r2, s6
 80215f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80215f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80215f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80215fe:	9a03      	ldr	r2, [sp, #12]
 8021600:	9314      	str	r3, [sp, #80]	; 0x50
 8021602:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021608:	eeb0 3a67 	vmov.f32	s6, s15
 802160c:	bf08      	it	eq
 802160e:	4613      	moveq	r3, r2
 8021610:	eef0 2a47 	vmov.f32	s5, s14
 8021614:	e789      	b.n	802152a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021616:	1406      	asrs	r6, r0, #16
 8021618:	d42d      	bmi.n	8021676 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802161a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 802161e:	42b4      	cmp	r4, r6
 8021620:	dd29      	ble.n	8021676 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021622:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8021626:	d426      	bmi.n	8021676 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021628:	f8d9 200c 	ldr.w	r2, [r9, #12]
 802162c:	4562      	cmp	r2, ip
 802162e:	dd22      	ble.n	8021676 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021630:	b224      	sxth	r4, r4
 8021632:	9a01      	ldr	r2, [sp, #4]
 8021634:	fb0c 6404 	mla	r4, ip, r4, r6
 8021638:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 802163c:	0e22      	lsrs	r2, r4, #24
 802163e:	d01a      	beq.n	8021676 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021640:	9e04      	ldr	r6, [sp, #16]
 8021642:	4372      	muls	r2, r6
 8021644:	1c56      	adds	r6, r2, #1
 8021646:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802164a:	1212      	asrs	r2, r2, #8
 802164c:	0a26      	lsrs	r6, r4, #8
 802164e:	2aff      	cmp	r2, #255	; 0xff
 8021650:	9605      	str	r6, [sp, #20]
 8021652:	d116      	bne.n	8021682 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021654:	f06f 0201 	mvn.w	r2, #1
 8021658:	fb02 fc07 	mul.w	ip, r2, r7
 802165c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021660:	0962      	lsrs	r2, r4, #5
 8021662:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021666:	f026 0607 	bic.w	r6, r6, #7
 802166a:	4316      	orrs	r6, r2
 802166c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021670:	4326      	orrs	r6, r4
 8021672:	f825 600c 	strh.w	r6, [r5, ip]
 8021676:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021678:	4410      	add	r0, r2
 802167a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802167c:	3f01      	subs	r7, #1
 802167e:	4411      	add	r1, r2
 8021680:	e787      	b.n	8021592 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021682:	f06f 0601 	mvn.w	r6, #1
 8021686:	437e      	muls	r6, r7
 8021688:	fa1f fa82 	uxth.w	sl, r2
 802168c:	f835 8006 	ldrh.w	r8, [r5, r6]
 8021690:	9602      	str	r6, [sp, #8]
 8021692:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021696:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 802169a:	43d2      	mvns	r2, r2
 802169c:	b2d2      	uxtb	r2, r2
 802169e:	fb1c fc0a 	smulbb	ip, ip, sl
 80216a2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80216a6:	fb0e ce02 	mla	lr, lr, r2, ip
 80216aa:	b2e4      	uxtb	r4, r4
 80216ac:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80216b0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80216b4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80216b8:	fa5f f888 	uxtb.w	r8, r8
 80216bc:	fb14 f40a 	smulbb	r4, r4, sl
 80216c0:	fb08 4402 	mla	r4, r8, r2, r4
 80216c4:	fa1f fe8e 	uxth.w	lr, lr
 80216c8:	fb16 f60a 	smulbb	r6, r6, sl
 80216cc:	b2a4      	uxth	r4, r4
 80216ce:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80216d2:	fb0c 6c02 	mla	ip, ip, r2, r6
 80216d6:	f10e 0201 	add.w	r2, lr, #1
 80216da:	1c66      	adds	r6, r4, #1
 80216dc:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80216e0:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80216e4:	fa1f fc8c 	uxth.w	ip, ip
 80216e8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80216ec:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80216f0:	ea46 0e0e 	orr.w	lr, r6, lr
 80216f4:	f10c 0601 	add.w	r6, ip, #1
 80216f8:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80216fc:	0976      	lsrs	r6, r6, #5
 80216fe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021702:	9a02      	ldr	r2, [sp, #8]
 8021704:	ea4e 0e06 	orr.w	lr, lr, r6
 8021708:	f825 e002 	strh.w	lr, [r5, r2]
 802170c:	e7b3      	b.n	8021676 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802170e:	f04f 0800 	mov.w	r8, #0
 8021712:	eba3 0208 	sub.w	r2, r3, r8
 8021716:	2a00      	cmp	r2, #0
 8021718:	f77f af3e 	ble.w	8021598 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802171c:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8021720:	1404      	asrs	r4, r0, #16
 8021722:	140a      	asrs	r2, r1, #16
 8021724:	fb06 4202 	mla	r2, r6, r2, r4
 8021728:	9c01      	ldr	r4, [sp, #4]
 802172a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 802172e:	0e22      	lsrs	r2, r4, #24
 8021730:	d016      	beq.n	8021760 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021732:	9e04      	ldr	r6, [sp, #16]
 8021734:	4372      	muls	r2, r6
 8021736:	1c56      	adds	r6, r2, #1
 8021738:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802173c:	1212      	asrs	r2, r2, #8
 802173e:	2aff      	cmp	r2, #255	; 0xff
 8021740:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8021744:	d113      	bne.n	802176e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8021746:	0962      	lsrs	r2, r4, #5
 8021748:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802174c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021750:	f026 0607 	bic.w	r6, r6, #7
 8021754:	4316      	orrs	r6, r2
 8021756:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802175a:	4326      	orrs	r6, r4
 802175c:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8021760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021762:	4410      	add	r0, r2
 8021764:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021766:	f108 0801 	add.w	r8, r8, #1
 802176a:	4411      	add	r1, r2
 802176c:	e7d1      	b.n	8021712 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802176e:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8021772:	fa1f fa82 	uxth.w	sl, r2
 8021776:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802177a:	f3c4 4707 	ubfx	r7, r4, #16, #8
 802177e:	43d2      	mvns	r2, r2
 8021780:	b2d2      	uxtb	r2, r2
 8021782:	fb17 f70a 	smulbb	r7, r7, sl
 8021786:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802178a:	fb0c 7c02 	mla	ip, ip, r2, r7
 802178e:	b2e4      	uxtb	r4, r4
 8021790:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021794:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021798:	fa5f fe8e 	uxtb.w	lr, lr
 802179c:	fb14 f40a 	smulbb	r4, r4, sl
 80217a0:	fb0e 4402 	mla	r4, lr, r2, r4
 80217a4:	b2f6      	uxtb	r6, r6
 80217a6:	fa1f fc8c 	uxth.w	ip, ip
 80217aa:	fb16 f60a 	smulbb	r6, r6, sl
 80217ae:	b2a4      	uxth	r4, r4
 80217b0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80217b4:	fb07 6702 	mla	r7, r7, r2, r6
 80217b8:	f10c 0201 	add.w	r2, ip, #1
 80217bc:	1c66      	adds	r6, r4, #1
 80217be:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80217c2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80217c6:	b2bf      	uxth	r7, r7
 80217c8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80217cc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80217d0:	ea46 0c0c 	orr.w	ip, r6, ip
 80217d4:	1c7e      	adds	r6, r7, #1
 80217d6:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80217da:	0976      	lsrs	r6, r6, #5
 80217dc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80217e0:	ea4c 0c06 	orr.w	ip, ip, r6
 80217e4:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80217e8:	e7ba      	b.n	8021760 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80217ea:	b007      	add	sp, #28
 80217ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080217f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80217f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217f4:	b085      	sub	sp, #20
 80217f6:	468b      	mov	fp, r1
 80217f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80217fa:	9203      	str	r2, [sp, #12]
 80217fc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021800:	6841      	ldr	r1, [r0, #4]
 8021802:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8021806:	fb01 2404 	mla	r4, r1, r4, r2
 802180a:	6802      	ldr	r2, [r0, #0]
 802180c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021810:	f8d8 2000 	ldr.w	r2, [r8]
 8021814:	9201      	str	r2, [sp, #4]
 8021816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802181a:	f1bb 0f00 	cmp.w	fp, #0
 802181e:	dc03      	bgt.n	8021828 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021820:	9a03      	ldr	r2, [sp, #12]
 8021822:	2a00      	cmp	r2, #0
 8021824:	f340 814f 	ble.w	8021ac6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802182a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 802182e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8021832:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021836:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021838:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802183c:	2b00      	cmp	r3, #0
 802183e:	dd0e      	ble.n	802185e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021840:	1408      	asrs	r0, r1, #16
 8021842:	d405      	bmi.n	8021850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021844:	42b8      	cmp	r0, r7
 8021846:	da03      	bge.n	8021850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021848:	1410      	asrs	r0, r2, #16
 802184a:	d401      	bmi.n	8021850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802184c:	42b0      	cmp	r0, r6
 802184e:	db07      	blt.n	8021860 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021850:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021852:	4401      	add	r1, r0
 8021854:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021856:	3b01      	subs	r3, #1
 8021858:	4402      	add	r2, r0
 802185a:	3402      	adds	r4, #2
 802185c:	e7ee      	b.n	802183c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802185e:	d017      	beq.n	8021890 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021860:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021862:	1e58      	subs	r0, r3, #1
 8021864:	fb05 1500 	mla	r5, r5, r0, r1
 8021868:	142d      	asrs	r5, r5, #16
 802186a:	d409      	bmi.n	8021880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802186c:	42bd      	cmp	r5, r7
 802186e:	da07      	bge.n	8021880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021870:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021872:	fb05 2000 	mla	r0, r5, r0, r2
 8021876:	1400      	asrs	r0, r0, #16
 8021878:	d402      	bmi.n	8021880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802187a:	42b0      	cmp	r0, r6
 802187c:	f2c0 80ba 	blt.w	80219f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021880:	2600      	movs	r6, #0
 8021882:	1998      	adds	r0, r3, r6
 8021884:	2800      	cmp	r0, #0
 8021886:	dc3e      	bgt.n	8021906 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021888:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802188c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021890:	f1bb 0f00 	cmp.w	fp, #0
 8021894:	f340 8117 	ble.w	8021ac6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021898:	ee30 0a04 	vadd.f32	s0, s0, s8
 802189c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80218a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80218a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218a6:	f1bb 0b01 	subs.w	fp, fp, #1
 80218aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80218ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80218b2:	eeb0 6a62 	vmov.f32	s12, s5
 80218b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80218ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80218be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80218c2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80218c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80218ca:	eeb0 6a43 	vmov.f32	s12, s6
 80218ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80218d2:	ee12 2a90 	vmov	r2, s5
 80218d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80218da:	fb92 f3f3 	sdiv	r3, r2, r3
 80218de:	ee13 2a10 	vmov	r2, s6
 80218e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80218e6:	9311      	str	r3, [sp, #68]	; 0x44
 80218e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80218ee:	9a03      	ldr	r2, [sp, #12]
 80218f0:	9312      	str	r3, [sp, #72]	; 0x48
 80218f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80218f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218f8:	eeb0 3a67 	vmov.f32	s6, s15
 80218fc:	bf08      	it	eq
 80218fe:	4613      	moveq	r3, r2
 8021900:	eef0 2a47 	vmov.f32	s5, s14
 8021904:	e789      	b.n	802181a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021906:	140f      	asrs	r7, r1, #16
 8021908:	d424      	bmi.n	8021954 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802190a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802190e:	42bd      	cmp	r5, r7
 8021910:	dd20      	ble.n	8021954 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021912:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021916:	d41d      	bmi.n	8021954 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021918:	f8d8 000c 	ldr.w	r0, [r8, #12]
 802191c:	4560      	cmp	r0, ip
 802191e:	dd19      	ble.n	8021954 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021920:	b22d      	sxth	r5, r5
 8021922:	fb0c 7505 	mla	r5, ip, r5, r7
 8021926:	9801      	ldr	r0, [sp, #4]
 8021928:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 802192c:	0e07      	lsrs	r7, r0, #24
 802192e:	2fff      	cmp	r7, #255	; 0xff
 8021930:	d116      	bne.n	8021960 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021932:	f06f 0501 	mvn.w	r5, #1
 8021936:	fb05 f706 	mul.w	r7, r5, r6
 802193a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 802193e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8021942:	0945      	lsrs	r5, r0, #5
 8021944:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021948:	ea4c 0505 	orr.w	r5, ip, r5
 802194c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8021950:	4305      	orrs	r5, r0
 8021952:	53e5      	strh	r5, [r4, r7]
 8021954:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021956:	4401      	add	r1, r0
 8021958:	9812      	ldr	r0, [sp, #72]	; 0x48
 802195a:	3e01      	subs	r6, #1
 802195c:	4402      	add	r2, r0
 802195e:	e790      	b.n	8021882 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021960:	b2fd      	uxtb	r5, r7
 8021962:	2f00      	cmp	r7, #0
 8021964:	d0f6      	beq.n	8021954 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021966:	f06f 0701 	mvn.w	r7, #1
 802196a:	4377      	muls	r7, r6
 802196c:	fa1f f985 	uxth.w	r9, r5
 8021970:	f834 e007 	ldrh.w	lr, [r4, r7]
 8021974:	9702      	str	r7, [sp, #8]
 8021976:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802197a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 802197e:	43ed      	mvns	r5, r5
 8021980:	b2ed      	uxtb	r5, r5
 8021982:	fb17 f709 	smulbb	r7, r7, r9
 8021986:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802198a:	fb0c 7c05 	mla	ip, ip, r5, r7
 802198e:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021992:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021996:	b2c0      	uxtb	r0, r0
 8021998:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802199c:	fa5f fe8e 	uxtb.w	lr, lr
 80219a0:	fb10 f009 	smulbb	r0, r0, r9
 80219a4:	fb0e 0005 	mla	r0, lr, r5, r0
 80219a8:	b280      	uxth	r0, r0
 80219aa:	fa1f fc8c 	uxth.w	ip, ip
 80219ae:	fb1a fa09 	smulbb	sl, sl, r9
 80219b2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80219b6:	fb07 a705 	mla	r7, r7, r5, sl
 80219ba:	f100 0a01 	add.w	sl, r0, #1
 80219be:	f10c 0501 	add.w	r5, ip, #1
 80219c2:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80219c6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80219ca:	b2bf      	uxth	r7, r7
 80219cc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80219d0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80219d4:	ea4a 0c0c 	orr.w	ip, sl, ip
 80219d8:	f107 0a01 	add.w	sl, r7, #1
 80219dc:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80219e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80219e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80219e8:	9802      	ldr	r0, [sp, #8]
 80219ea:	ea4c 0c0a 	orr.w	ip, ip, sl
 80219ee:	f824 c000 	strh.w	ip, [r4, r0]
 80219f2:	e7af      	b.n	8021954 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80219f4:	f04f 0e00 	mov.w	lr, #0
 80219f8:	eba3 000e 	sub.w	r0, r3, lr
 80219fc:	2800      	cmp	r0, #0
 80219fe:	f77f af43 	ble.w	8021888 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021a02:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8021a06:	140d      	asrs	r5, r1, #16
 8021a08:	1410      	asrs	r0, r2, #16
 8021a0a:	fb06 5000 	mla	r0, r6, r0, r5
 8021a0e:	9d01      	ldr	r5, [sp, #4]
 8021a10:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8021a14:	0e2e      	lsrs	r6, r5, #24
 8021a16:	2eff      	cmp	r6, #255	; 0xff
 8021a18:	d112      	bne.n	8021a40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021a1a:	482c      	ldr	r0, [pc, #176]	; (8021acc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8021a1c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8021a20:	0968      	lsrs	r0, r5, #5
 8021a22:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021a26:	4330      	orrs	r0, r6
 8021a28:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021a2c:	4328      	orrs	r0, r5
 8021a2e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8021a32:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021a34:	4401      	add	r1, r0
 8021a36:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021a38:	f10e 0e01 	add.w	lr, lr, #1
 8021a3c:	4402      	add	r2, r0
 8021a3e:	e7db      	b.n	80219f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021a40:	b2f0      	uxtb	r0, r6
 8021a42:	2e00      	cmp	r6, #0
 8021a44:	d0f5      	beq.n	8021a32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021a46:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8021a4a:	fa1f f980 	uxth.w	r9, r0
 8021a4e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021a52:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021a56:	43c0      	mvns	r0, r0
 8021a58:	b2c0      	uxtb	r0, r0
 8021a5a:	fb16 f609 	smulbb	r6, r6, r9
 8021a5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021a62:	fb07 6700 	mla	r7, r7, r0, r6
 8021a66:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021a6a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021a6e:	b2ed      	uxtb	r5, r5
 8021a70:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021a74:	fa5f fc8c 	uxtb.w	ip, ip
 8021a78:	fb15 f509 	smulbb	r5, r5, r9
 8021a7c:	fb0c 5500 	mla	r5, ip, r0, r5
 8021a80:	b2bf      	uxth	r7, r7
 8021a82:	fb1a fa09 	smulbb	sl, sl, r9
 8021a86:	b2ad      	uxth	r5, r5
 8021a88:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021a8c:	fb06 a600 	mla	r6, r6, r0, sl
 8021a90:	1c78      	adds	r0, r7, #1
 8021a92:	f105 0a01 	add.w	sl, r5, #1
 8021a96:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021a9a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021a9e:	b2b6      	uxth	r6, r6
 8021aa0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021aa4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021aa8:	ea4a 0707 	orr.w	r7, sl, r7
 8021aac:	f106 0a01 	add.w	sl, r6, #1
 8021ab0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021ab4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021ab8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021abc:	ea47 070a 	orr.w	r7, r7, sl
 8021ac0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8021ac4:	e7b5      	b.n	8021a32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021ac6:	b005      	add	sp, #20
 8021ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021acc:	fffff800 	.word	0xfffff800

08021ad0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ad4:	b087      	sub	sp, #28
 8021ad6:	468b      	mov	fp, r1
 8021ad8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021ada:	9203      	str	r2, [sp, #12]
 8021adc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021ae0:	9204      	str	r2, [sp, #16]
 8021ae2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021ae6:	6841      	ldr	r1, [r0, #4]
 8021ae8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021aec:	fb01 2404 	mla	r4, r1, r4, r2
 8021af0:	6802      	ldr	r2, [r0, #0]
 8021af2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021af6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021afa:	3201      	adds	r2, #1
 8021afc:	f022 0201 	bic.w	r2, r2, #1
 8021b00:	9200      	str	r2, [sp, #0]
 8021b02:	f8d9 2000 	ldr.w	r2, [r9]
 8021b06:	9201      	str	r2, [sp, #4]
 8021b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021b0c:	f1bb 0f00 	cmp.w	fp, #0
 8021b10:	dc03      	bgt.n	8021b1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021b12:	9a03      	ldr	r2, [sp, #12]
 8021b14:	2a00      	cmp	r2, #0
 8021b16:	f340 8169 	ble.w	8021dec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021b1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021b1c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021b20:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021b24:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021b28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021b2a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021b2e:	2b00      	cmp	r3, #0
 8021b30:	dd0e      	ble.n	8021b50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021b32:	1402      	asrs	r2, r0, #16
 8021b34:	d405      	bmi.n	8021b42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021b36:	42ba      	cmp	r2, r7
 8021b38:	da03      	bge.n	8021b42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021b3a:	140a      	asrs	r2, r1, #16
 8021b3c:	d401      	bmi.n	8021b42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021b3e:	42b2      	cmp	r2, r6
 8021b40:	db07      	blt.n	8021b52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021b42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021b44:	4410      	add	r0, r2
 8021b46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021b48:	3b01      	subs	r3, #1
 8021b4a:	4411      	add	r1, r2
 8021b4c:	3402      	adds	r4, #2
 8021b4e:	e7ee      	b.n	8021b2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021b50:	d017      	beq.n	8021b82 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021b52:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021b54:	1e5a      	subs	r2, r3, #1
 8021b56:	fb05 0502 	mla	r5, r5, r2, r0
 8021b5a:	142d      	asrs	r5, r5, #16
 8021b5c:	d409      	bmi.n	8021b72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021b5e:	42bd      	cmp	r5, r7
 8021b60:	da07      	bge.n	8021b72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021b62:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021b64:	fb05 1202 	mla	r2, r5, r2, r1
 8021b68:	1412      	asrs	r2, r2, #16
 8021b6a:	d402      	bmi.n	8021b72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021b6c:	42b2      	cmp	r2, r6
 8021b6e:	f2c0 80c7 	blt.w	8021d00 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021b72:	2700      	movs	r7, #0
 8021b74:	19da      	adds	r2, r3, r7
 8021b76:	2a00      	cmp	r2, #0
 8021b78:	dc3e      	bgt.n	8021bf8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021b7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021b7e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021b82:	f1bb 0f00 	cmp.w	fp, #0
 8021b86:	f340 8131 	ble.w	8021dec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021b8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021b8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021b92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021b96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021b98:	f1bb 0b01 	subs.w	fp, fp, #1
 8021b9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ba0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ba4:	eeb0 6a62 	vmov.f32	s12, s5
 8021ba8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021bac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021bb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021bb4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021bb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021bbc:	eeb0 6a43 	vmov.f32	s12, s6
 8021bc0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021bc4:	ee12 2a90 	vmov	r2, s5
 8021bc8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021bcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bd0:	ee13 2a10 	vmov	r2, s6
 8021bd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021bd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8021bda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021bdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021be0:	9a03      	ldr	r2, [sp, #12]
 8021be2:	9314      	str	r3, [sp, #80]	; 0x50
 8021be4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021bea:	eeb0 3a67 	vmov.f32	s6, s15
 8021bee:	bf08      	it	eq
 8021bf0:	4613      	moveq	r3, r2
 8021bf2:	eef0 2a47 	vmov.f32	s5, s14
 8021bf6:	e789      	b.n	8021b0c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021bf8:	1405      	asrs	r5, r0, #16
 8021bfa:	d435      	bmi.n	8021c68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021bfc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021c00:	42aa      	cmp	r2, r5
 8021c02:	dd31      	ble.n	8021c68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021c04:	140e      	asrs	r6, r1, #16
 8021c06:	d42f      	bmi.n	8021c68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021c08:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021c0c:	42b2      	cmp	r2, r6
 8021c0e:	dd2b      	ble.n	8021c68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021c10:	9a00      	ldr	r2, [sp, #0]
 8021c12:	fb06 5502 	mla	r5, r6, r2, r5
 8021c16:	086a      	lsrs	r2, r5, #1
 8021c18:	9e01      	ldr	r6, [sp, #4]
 8021c1a:	5cb2      	ldrb	r2, [r6, r2]
 8021c1c:	07ee      	lsls	r6, r5, #31
 8021c1e:	bf54      	ite	pl
 8021c20:	f002 020f 	andpl.w	r2, r2, #15
 8021c24:	1112      	asrmi	r2, r2, #4
 8021c26:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021c2a:	b2d2      	uxtb	r2, r2
 8021c2c:	b1e2      	cbz	r2, 8021c68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021c2e:	9d04      	ldr	r5, [sp, #16]
 8021c30:	436a      	muls	r2, r5
 8021c32:	1c55      	adds	r5, r2, #1
 8021c34:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021c38:	4d6e      	ldr	r5, [pc, #440]	; (8021df4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8021c3a:	682d      	ldr	r5, [r5, #0]
 8021c3c:	1212      	asrs	r2, r2, #8
 8021c3e:	0a2e      	lsrs	r6, r5, #8
 8021c40:	2aff      	cmp	r2, #255	; 0xff
 8021c42:	9605      	str	r6, [sp, #20]
 8021c44:	d116      	bne.n	8021c74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8021c46:	f06f 0201 	mvn.w	r2, #1
 8021c4a:	fb02 fc07 	mul.w	ip, r2, r7
 8021c4e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021c52:	096a      	lsrs	r2, r5, #5
 8021c54:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021c58:	f026 0607 	bic.w	r6, r6, #7
 8021c5c:	4316      	orrs	r6, r2
 8021c5e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021c62:	432e      	orrs	r6, r5
 8021c64:	f824 600c 	strh.w	r6, [r4, ip]
 8021c68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021c6a:	4410      	add	r0, r2
 8021c6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021c6e:	3f01      	subs	r7, #1
 8021c70:	4411      	add	r1, r2
 8021c72:	e77f      	b.n	8021b74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8021c74:	f06f 0601 	mvn.w	r6, #1
 8021c78:	437e      	muls	r6, r7
 8021c7a:	fa1f fa82 	uxth.w	sl, r2
 8021c7e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8021c82:	9602      	str	r6, [sp, #8]
 8021c84:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021c88:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8021c8c:	43d2      	mvns	r2, r2
 8021c8e:	b2d2      	uxtb	r2, r2
 8021c90:	fb1c fc0a 	smulbb	ip, ip, sl
 8021c94:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021c98:	fb0e ce02 	mla	lr, lr, r2, ip
 8021c9c:	b2ed      	uxtb	r5, r5
 8021c9e:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021ca2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021ca6:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8021caa:	fa5f f888 	uxtb.w	r8, r8
 8021cae:	fb15 f50a 	smulbb	r5, r5, sl
 8021cb2:	fb08 5502 	mla	r5, r8, r2, r5
 8021cb6:	fa1f fe8e 	uxth.w	lr, lr
 8021cba:	fb16 f60a 	smulbb	r6, r6, sl
 8021cbe:	b2ad      	uxth	r5, r5
 8021cc0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021cc4:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021cc8:	f10e 0201 	add.w	r2, lr, #1
 8021ccc:	1c6e      	adds	r6, r5, #1
 8021cce:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021cd2:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8021cd6:	fa1f fc8c 	uxth.w	ip, ip
 8021cda:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021cde:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8021ce2:	ea46 0e0e 	orr.w	lr, r6, lr
 8021ce6:	f10c 0601 	add.w	r6, ip, #1
 8021cea:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8021cee:	0976      	lsrs	r6, r6, #5
 8021cf0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021cf4:	9a02      	ldr	r2, [sp, #8]
 8021cf6:	ea4e 0e06 	orr.w	lr, lr, r6
 8021cfa:	f824 e002 	strh.w	lr, [r4, r2]
 8021cfe:	e7b3      	b.n	8021c68 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021d00:	f04f 0800 	mov.w	r8, #0
 8021d04:	eba3 0208 	sub.w	r2, r3, r8
 8021d08:	2a00      	cmp	r2, #0
 8021d0a:	f77f af36 	ble.w	8021b7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021d0e:	9e00      	ldr	r6, [sp, #0]
 8021d10:	1402      	asrs	r2, r0, #16
 8021d12:	140d      	asrs	r5, r1, #16
 8021d14:	fb06 2505 	mla	r5, r6, r5, r2
 8021d18:	086a      	lsrs	r2, r5, #1
 8021d1a:	9e01      	ldr	r6, [sp, #4]
 8021d1c:	5cb2      	ldrb	r2, [r6, r2]
 8021d1e:	07ed      	lsls	r5, r5, #31
 8021d20:	bf54      	ite	pl
 8021d22:	f002 020f 	andpl.w	r2, r2, #15
 8021d26:	1112      	asrmi	r2, r2, #4
 8021d28:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021d2c:	b2d2      	uxtb	r2, r2
 8021d2e:	b1c2      	cbz	r2, 8021d62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8021d30:	9d04      	ldr	r5, [sp, #16]
 8021d32:	436a      	muls	r2, r5
 8021d34:	1c55      	adds	r5, r2, #1
 8021d36:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021d3a:	4d2e      	ldr	r5, [pc, #184]	; (8021df4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8021d3c:	1212      	asrs	r2, r2, #8
 8021d3e:	682e      	ldr	r6, [r5, #0]
 8021d40:	2aff      	cmp	r2, #255	; 0xff
 8021d42:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8021d46:	d113      	bne.n	8021d70 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8021d48:	0972      	lsrs	r2, r6, #5
 8021d4a:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8021d4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021d52:	f025 0507 	bic.w	r5, r5, #7
 8021d56:	4315      	orrs	r5, r2
 8021d58:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021d5c:	4335      	orrs	r5, r6
 8021d5e:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8021d62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021d64:	4410      	add	r0, r2
 8021d66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021d68:	f108 0801 	add.w	r8, r8, #1
 8021d6c:	4411      	add	r1, r2
 8021d6e:	e7c9      	b.n	8021d04 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8021d70:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8021d74:	fa1f fa82 	uxth.w	sl, r2
 8021d78:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021d7c:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8021d80:	43d2      	mvns	r2, r2
 8021d82:	b2d2      	uxtb	r2, r2
 8021d84:	fb17 f70a 	smulbb	r7, r7, sl
 8021d88:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021d8c:	fb0c 7c02 	mla	ip, ip, r2, r7
 8021d90:	b2f6      	uxtb	r6, r6
 8021d92:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021d96:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021d9a:	fa5f fe8e 	uxtb.w	lr, lr
 8021d9e:	fb16 f60a 	smulbb	r6, r6, sl
 8021da2:	fb0e 6602 	mla	r6, lr, r2, r6
 8021da6:	b2ed      	uxtb	r5, r5
 8021da8:	fa1f fc8c 	uxth.w	ip, ip
 8021dac:	fb15 f50a 	smulbb	r5, r5, sl
 8021db0:	b2b6      	uxth	r6, r6
 8021db2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021db6:	fb07 5702 	mla	r7, r7, r2, r5
 8021dba:	f10c 0201 	add.w	r2, ip, #1
 8021dbe:	1c75      	adds	r5, r6, #1
 8021dc0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021dc4:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8021dc8:	b2bf      	uxth	r7, r7
 8021dca:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021dce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021dd2:	ea45 0c0c 	orr.w	ip, r5, ip
 8021dd6:	1c7d      	adds	r5, r7, #1
 8021dd8:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8021ddc:	096d      	lsrs	r5, r5, #5
 8021dde:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021de2:	ea4c 0c05 	orr.w	ip, ip, r5
 8021de6:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8021dea:	e7ba      	b.n	8021d62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8021dec:	b007      	add	sp, #28
 8021dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021df2:	bf00      	nop
 8021df4:	200097b0 	.word	0x200097b0

08021df8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dfc:	b087      	sub	sp, #28
 8021dfe:	f8df 830c 	ldr.w	r8, [pc, #780]	; 802210c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8021e02:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021e04:	9205      	str	r2, [sp, #20]
 8021e06:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021e0a:	9101      	str	r1, [sp, #4]
 8021e0c:	6841      	ldr	r1, [r0, #4]
 8021e0e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8021e12:	fb01 2404 	mla	r4, r1, r4, r2
 8021e16:	6802      	ldr	r2, [r0, #0]
 8021e18:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021e1c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021e20:	3201      	adds	r2, #1
 8021e22:	f022 0201 	bic.w	r2, r2, #1
 8021e26:	9202      	str	r2, [sp, #8]
 8021e28:	f8db 2000 	ldr.w	r2, [fp]
 8021e2c:	9203      	str	r2, [sp, #12]
 8021e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021e32:	9a01      	ldr	r2, [sp, #4]
 8021e34:	2a00      	cmp	r2, #0
 8021e36:	dc03      	bgt.n	8021e40 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021e38:	9a05      	ldr	r2, [sp, #20]
 8021e3a:	2a00      	cmp	r2, #0
 8021e3c:	f340 8162 	ble.w	8022104 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021e40:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021e42:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8021e46:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8021e4a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021e4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021e50:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021e54:	2b00      	cmp	r3, #0
 8021e56:	dd0e      	ble.n	8021e76 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021e58:	1402      	asrs	r2, r0, #16
 8021e5a:	d405      	bmi.n	8021e68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021e5c:	42ba      	cmp	r2, r7
 8021e5e:	da03      	bge.n	8021e68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021e60:	140a      	asrs	r2, r1, #16
 8021e62:	d401      	bmi.n	8021e68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021e64:	42b2      	cmp	r2, r6
 8021e66:	db07      	blt.n	8021e78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021e68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021e6a:	4410      	add	r0, r2
 8021e6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e6e:	3b01      	subs	r3, #1
 8021e70:	4411      	add	r1, r2
 8021e72:	3402      	adds	r4, #2
 8021e74:	e7ee      	b.n	8021e54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021e76:	d017      	beq.n	8021ea8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021e78:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021e7a:	1e5a      	subs	r2, r3, #1
 8021e7c:	fb05 0502 	mla	r5, r5, r2, r0
 8021e80:	142d      	asrs	r5, r5, #16
 8021e82:	d409      	bmi.n	8021e98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021e84:	42bd      	cmp	r5, r7
 8021e86:	da07      	bge.n	8021e98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021e88:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021e8a:	fb05 1202 	mla	r2, r5, r2, r1
 8021e8e:	1412      	asrs	r2, r2, #16
 8021e90:	d402      	bmi.n	8021e98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021e92:	42b2      	cmp	r2, r6
 8021e94:	f2c0 80c3 	blt.w	802201e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8021e98:	2500      	movs	r5, #0
 8021e9a:	195a      	adds	r2, r3, r5
 8021e9c:	2a00      	cmp	r2, #0
 8021e9e:	dc3f      	bgt.n	8021f20 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021ea0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021ea4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021ea8:	9b01      	ldr	r3, [sp, #4]
 8021eaa:	2b00      	cmp	r3, #0
 8021eac:	f340 812a 	ble.w	8022104 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021eb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021eb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021eb8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021ebe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ec2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ec6:	eeb0 6a62 	vmov.f32	s12, s5
 8021eca:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021ece:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021ed2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021ed6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021eda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021ede:	eeb0 6a43 	vmov.f32	s12, s6
 8021ee2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021ee6:	ee12 2a90 	vmov	r2, s5
 8021eea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021eee:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ef2:	ee13 2a10 	vmov	r2, s6
 8021ef6:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021efa:	fb92 f3f3 	sdiv	r3, r2, r3
 8021efe:	9314      	str	r3, [sp, #80]	; 0x50
 8021f00:	9b01      	ldr	r3, [sp, #4]
 8021f02:	9a05      	ldr	r2, [sp, #20]
 8021f04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f08:	3b01      	subs	r3, #1
 8021f0a:	9301      	str	r3, [sp, #4]
 8021f0c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f12:	eeb0 3a67 	vmov.f32	s6, s15
 8021f16:	bf08      	it	eq
 8021f18:	4613      	moveq	r3, r2
 8021f1a:	eef0 2a47 	vmov.f32	s5, s14
 8021f1e:	e788      	b.n	8021e32 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021f20:	1406      	asrs	r6, r0, #16
 8021f22:	d42c      	bmi.n	8021f7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021f24:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021f28:	42b2      	cmp	r2, r6
 8021f2a:	dd28      	ble.n	8021f7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021f2c:	140f      	asrs	r7, r1, #16
 8021f2e:	d426      	bmi.n	8021f7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021f30:	f8db 200c 	ldr.w	r2, [fp, #12]
 8021f34:	42ba      	cmp	r2, r7
 8021f36:	dd22      	ble.n	8021f7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021f38:	9a02      	ldr	r2, [sp, #8]
 8021f3a:	fb07 6602 	mla	r6, r7, r2, r6
 8021f3e:	0872      	lsrs	r2, r6, #1
 8021f40:	9f03      	ldr	r7, [sp, #12]
 8021f42:	5cba      	ldrb	r2, [r7, r2]
 8021f44:	07f6      	lsls	r6, r6, #31
 8021f46:	bf54      	ite	pl
 8021f48:	f002 020f 	andpl.w	r2, r2, #15
 8021f4c:	1112      	asrmi	r2, r2, #4
 8021f4e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021f52:	b2d2      	uxtb	r2, r2
 8021f54:	2aff      	cmp	r2, #255	; 0xff
 8021f56:	d118      	bne.n	8021f8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8021f58:	f8d8 2000 	ldr.w	r2, [r8]
 8021f5c:	f06f 0601 	mvn.w	r6, #1
 8021f60:	fb06 f705 	mul.w	r7, r6, r5
 8021f64:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8021f68:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8021f6c:	0956      	lsrs	r6, r2, #5
 8021f6e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021f72:	ea4c 0606 	orr.w	r6, ip, r6
 8021f76:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021f7a:	4316      	orrs	r6, r2
 8021f7c:	53e6      	strh	r6, [r4, r7]
 8021f7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021f80:	4410      	add	r0, r2
 8021f82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021f84:	3d01      	subs	r5, #1
 8021f86:	4411      	add	r1, r2
 8021f88:	e787      	b.n	8021e9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021f8a:	2a00      	cmp	r2, #0
 8021f8c:	d0f7      	beq.n	8021f7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021f8e:	f06f 0601 	mvn.w	r6, #1
 8021f92:	436e      	muls	r6, r5
 8021f94:	f8d8 c000 	ldr.w	ip, [r8]
 8021f98:	f834 e006 	ldrh.w	lr, [r4, r6]
 8021f9c:	9604      	str	r6, [sp, #16]
 8021f9e:	fa1f f982 	uxth.w	r9, r2
 8021fa2:	ea4f 272e 	mov.w	r7, lr, asr #8
 8021fa6:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8021faa:	43d2      	mvns	r2, r2
 8021fac:	b2d2      	uxtb	r2, r2
 8021fae:	fb16 f609 	smulbb	r6, r6, r9
 8021fb2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021fb6:	fb07 6702 	mla	r7, r7, r2, r6
 8021fba:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8021fbe:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021fc2:	fa5f fc8c 	uxtb.w	ip, ip
 8021fc6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021fca:	fa5f fe8e 	uxtb.w	lr, lr
 8021fce:	fb1c fc09 	smulbb	ip, ip, r9
 8021fd2:	fb0e cc02 	mla	ip, lr, r2, ip
 8021fd6:	b2bf      	uxth	r7, r7
 8021fd8:	fb1a fa09 	smulbb	sl, sl, r9
 8021fdc:	fa1f fc8c 	uxth.w	ip, ip
 8021fe0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021fe4:	fb06 a602 	mla	r6, r6, r2, sl
 8021fe8:	1c7a      	adds	r2, r7, #1
 8021fea:	f10c 0a01 	add.w	sl, ip, #1
 8021fee:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021ff2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8021ff6:	b2b6      	uxth	r6, r6
 8021ff8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021ffc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022000:	ea4a 0707 	orr.w	r7, sl, r7
 8022004:	f106 0a01 	add.w	sl, r6, #1
 8022008:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802200c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022010:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022014:	9a04      	ldr	r2, [sp, #16]
 8022016:	ea47 070a 	orr.w	r7, r7, sl
 802201a:	52a7      	strh	r7, [r4, r2]
 802201c:	e7af      	b.n	8021f7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802201e:	f04f 0e00 	mov.w	lr, #0
 8022022:	eba3 020e 	sub.w	r2, r3, lr
 8022026:	2a00      	cmp	r2, #0
 8022028:	f77f af3a 	ble.w	8021ea0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802202c:	9e02      	ldr	r6, [sp, #8]
 802202e:	1402      	asrs	r2, r0, #16
 8022030:	140d      	asrs	r5, r1, #16
 8022032:	fb06 2505 	mla	r5, r6, r5, r2
 8022036:	086a      	lsrs	r2, r5, #1
 8022038:	9e03      	ldr	r6, [sp, #12]
 802203a:	5cb2      	ldrb	r2, [r6, r2]
 802203c:	07ed      	lsls	r5, r5, #31
 802203e:	bf54      	ite	pl
 8022040:	f002 020f 	andpl.w	r2, r2, #15
 8022044:	1112      	asrmi	r2, r2, #4
 8022046:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802204a:	b2d2      	uxtb	r2, r2
 802204c:	2aff      	cmp	r2, #255	; 0xff
 802204e:	d115      	bne.n	802207c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8022050:	f8d8 5000 	ldr.w	r5, [r8]
 8022054:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8022058:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 802205c:	096a      	lsrs	r2, r5, #5
 802205e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022062:	4332      	orrs	r2, r6
 8022064:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8022068:	432a      	orrs	r2, r5
 802206a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802206e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022070:	4410      	add	r0, r2
 8022072:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022074:	f10e 0e01 	add.w	lr, lr, #1
 8022078:	4411      	add	r1, r2
 802207a:	e7d2      	b.n	8022022 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802207c:	2a00      	cmp	r2, #0
 802207e:	d0f6      	beq.n	802206e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022080:	f8d8 7000 	ldr.w	r7, [r8]
 8022084:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8022088:	fa1f f982 	uxth.w	r9, r2
 802208c:	ea4f 262c 	mov.w	r6, ip, asr #8
 8022090:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8022094:	43d2      	mvns	r2, r2
 8022096:	b2d2      	uxtb	r2, r2
 8022098:	fb15 f509 	smulbb	r5, r5, r9
 802209c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80220a0:	fb06 5602 	mla	r6, r6, r2, r5
 80220a4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80220a8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80220ac:	b2ff      	uxtb	r7, r7
 80220ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80220b2:	fa5f fc8c 	uxtb.w	ip, ip
 80220b6:	fb17 f709 	smulbb	r7, r7, r9
 80220ba:	fb0c 7702 	mla	r7, ip, r2, r7
 80220be:	b2b6      	uxth	r6, r6
 80220c0:	fb1a fa09 	smulbb	sl, sl, r9
 80220c4:	b2bf      	uxth	r7, r7
 80220c6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80220ca:	fb05 a502 	mla	r5, r5, r2, sl
 80220ce:	1c72      	adds	r2, r6, #1
 80220d0:	f107 0a01 	add.w	sl, r7, #1
 80220d4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80220d8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80220dc:	b2ad      	uxth	r5, r5
 80220de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80220e2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80220e6:	ea4a 0606 	orr.w	r6, sl, r6
 80220ea:	f105 0a01 	add.w	sl, r5, #1
 80220ee:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80220f2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80220f6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80220fa:	ea46 060a 	orr.w	r6, r6, sl
 80220fe:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8022102:	e7b4      	b.n	802206e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022104:	b007      	add	sp, #28
 8022106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802210a:	bf00      	nop
 802210c:	200097b0 	.word	0x200097b0

08022110 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8022110:	4770      	bx	lr

08022112 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8022112:	4770      	bx	lr

08022114 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8022114:	4770      	bx	lr

08022116 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8022116:	4770      	bx	lr

08022118 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022118:	4770      	bx	lr

0802211a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802211a:	4770      	bx	lr

0802211c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802211c:	4770      	bx	lr

0802211e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802211e:	4770      	bx	lr

08022120 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022120:	4770      	bx	lr

08022122 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8022122:	4770      	bx	lr

08022124 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022124:	4770      	bx	lr

08022126 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8022126:	4770      	bx	lr

08022128 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022128:	4770      	bx	lr

0802212a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802212a:	4770      	bx	lr

0802212c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802212c:	4770      	bx	lr

0802212e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802212e:	4770      	bx	lr

08022130 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022130:	4770      	bx	lr

08022132 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8022132:	4770      	bx	lr

08022134 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8022134:	4770      	bx	lr

08022136 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8022136:	4770      	bx	lr

08022138 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022138:	4770      	bx	lr

0802213a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802213a:	4770      	bx	lr

0802213c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802213c:	4770      	bx	lr

0802213e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802213e:	4770      	bx	lr

08022140 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022140:	4770      	bx	lr

08022142 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8022142:	4770      	bx	lr

08022144 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022144:	4770      	bx	lr

08022146 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8022146:	4770      	bx	lr

08022148 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8022148:	b508      	push	{r3, lr}
 802214a:	4b06      	ldr	r3, [pc, #24]	; (8022164 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 802214c:	8818      	ldrh	r0, [r3, #0]
 802214e:	b928      	cbnz	r0, 802215c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8022150:	4b05      	ldr	r3, [pc, #20]	; (8022168 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8022152:	4a06      	ldr	r2, [pc, #24]	; (802216c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8022154:	4806      	ldr	r0, [pc, #24]	; (8022170 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8022156:	2150      	movs	r1, #80	; 0x50
 8022158:	f00b fe7a 	bl	802de50 <__assert_func>
 802215c:	0040      	lsls	r0, r0, #1
 802215e:	b280      	uxth	r0, r0
 8022160:	bd08      	pop	{r3, pc}
 8022162:	bf00      	nop
 8022164:	200097a2 	.word	0x200097a2
 8022168:	08032bb3 	.word	0x08032bb3
 802216c:	080331ac 	.word	0x080331ac
 8022170:	08032bf5 	.word	0x08032bf5

08022174 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8022174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022178:	b08b      	sub	sp, #44	; 0x2c
 802217a:	460f      	mov	r7, r1
 802217c:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8022180:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8022184:	4616      	mov	r6, r2
 8022186:	f1bb 0f00 	cmp.w	fp, #0
 802218a:	d049      	beq.n	8022220 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802218c:	6810      	ldr	r0, [r2, #0]
 802218e:	6851      	ldr	r1, [r2, #4]
 8022190:	ad06      	add	r5, sp, #24
 8022192:	c503      	stmia	r5!, {r0, r1}
 8022194:	6818      	ldr	r0, [r3, #0]
 8022196:	6859      	ldr	r1, [r3, #4]
 8022198:	ad08      	add	r5, sp, #32
 802219a:	c503      	stmia	r5!, {r0, r1}
 802219c:	a806      	add	r0, sp, #24
 802219e:	f7f9 fd7f 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80221a2:	4631      	mov	r1, r6
 80221a4:	a808      	add	r0, sp, #32
 80221a6:	f7f9 fdbf 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80221aa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80221ae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80221b2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80221b6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80221ba:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80221be:	fb16 2103 	smlabb	r1, r6, r3, r2
 80221c2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80221c6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80221ca:	4f5f      	ldr	r7, [pc, #380]	; (8022348 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80221cc:	440a      	add	r2, r1
 80221ce:	f8ad 2020 	strh.w	r2, [sp, #32]
 80221d2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80221d6:	6838      	ldr	r0, [r7, #0]
 80221d8:	4413      	add	r3, r2
 80221da:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80221de:	6803      	ldr	r3, [r0, #0]
 80221e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80221e2:	4798      	blx	r3
 80221e4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80221e8:	46b9      	mov	r9, r7
 80221ea:	d01c      	beq.n	8022226 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80221ec:	f010 0f04 	tst.w	r0, #4
 80221f0:	d01d      	beq.n	802222e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80221f2:	f8d9 0000 	ldr.w	r0, [r9]
 80221f6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80221fa:	6801      	ldr	r1, [r0, #0]
 80221fc:	f8cd b00c 	str.w	fp, [sp, #12]
 8022200:	2700      	movs	r7, #0
 8022202:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8022206:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 802220a:	9402      	str	r4, [sp, #8]
 802220c:	b2ad      	uxth	r5, r5
 802220e:	fa1f f488 	uxth.w	r4, r8
 8022212:	9501      	str	r5, [sp, #4]
 8022214:	9400      	str	r4, [sp, #0]
 8022216:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8022218:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802221c:	4631      	mov	r1, r6
 802221e:	47a0      	blx	r4
 8022220:	b00b      	add	sp, #44	; 0x2c
 8022222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022226:	b914      	cbnz	r4, 802222e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8022228:	f010 0f01 	tst.w	r0, #1
 802222c:	e7e0      	b.n	80221f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802222e:	f8d9 0000 	ldr.w	r0, [r9]
 8022232:	6803      	ldr	r3, [r0, #0]
 8022234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022236:	4798      	blx	r3
 8022238:	4b44      	ldr	r3, [pc, #272]	; (802234c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802223a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802223e:	881a      	ldrh	r2, [r3, #0]
 8022240:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022244:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022248:	fb02 1404 	mla	r4, r2, r4, r1
 802224c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8022250:	469a      	mov	sl, r3
 8022252:	fb05 f502 	mul.w	r5, r5, r2
 8022256:	ea4f 0748 	mov.w	r7, r8, lsl #1
 802225a:	d059      	beq.n	8022310 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 802225c:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8022260:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8022264:	fa1f f28b 	uxth.w	r2, fp
 8022268:	fa1f f989 	uxth.w	r9, r9
 802226c:	469e      	mov	lr, r3
 802226e:	42ac      	cmp	r4, r5
 8022270:	d264      	bcs.n	802233c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8022272:	eb04 0a07 	add.w	sl, r4, r7
 8022276:	4554      	cmp	r4, sl
 8022278:	d23d      	bcs.n	80222f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 802227a:	8821      	ldrh	r1, [r4, #0]
 802227c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8022280:	1208      	asrs	r0, r1, #8
 8022282:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022286:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802228a:	fb10 f009 	smulbb	r0, r0, r9
 802228e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8022292:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022296:	00c9      	lsls	r1, r1, #3
 8022298:	fb0c 0c02 	mla	ip, ip, r2, r0
 802229c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80222a0:	10d8      	asrs	r0, r3, #3
 80222a2:	b2c9      	uxtb	r1, r1
 80222a4:	00db      	lsls	r3, r3, #3
 80222a6:	fa1f fc8c 	uxth.w	ip, ip
 80222aa:	fb1b fb09 	smulbb	fp, fp, r9
 80222ae:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80222b2:	b2db      	uxtb	r3, r3
 80222b4:	fb11 f109 	smulbb	r1, r1, r9
 80222b8:	fb00 b002 	mla	r0, r0, r2, fp
 80222bc:	fb03 1302 	mla	r3, r3, r2, r1
 80222c0:	f10c 0b01 	add.w	fp, ip, #1
 80222c4:	b29b      	uxth	r3, r3
 80222c6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80222ca:	b280      	uxth	r0, r0
 80222cc:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80222d0:	f103 0c01 	add.w	ip, r3, #1
 80222d4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80222d8:	1c43      	adds	r3, r0, #1
 80222da:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80222de:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80222e2:	0940      	lsrs	r0, r0, #5
 80222e4:	ea4c 0c0b 	orr.w	ip, ip, fp
 80222e8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80222ec:	ea4c 0c00 	orr.w	ip, ip, r0
 80222f0:	f824 cb02 	strh.w	ip, [r4], #2
 80222f4:	e7bf      	b.n	8022276 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80222f6:	f8be 3000 	ldrh.w	r3, [lr]
 80222fa:	eba3 0308 	sub.w	r3, r3, r8
 80222fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022302:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8022306:	eba3 0308 	sub.w	r3, r3, r8
 802230a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802230e:	e7ae      	b.n	802226e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8022310:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8022314:	f8d9 0000 	ldr.w	r0, [r9]
 8022318:	42ac      	cmp	r4, r5
 802231a:	6803      	ldr	r3, [r0, #0]
 802231c:	d20e      	bcs.n	802233c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802231e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8022322:	4632      	mov	r2, r6
 8022324:	463b      	mov	r3, r7
 8022326:	4621      	mov	r1, r4
 8022328:	47c0      	blx	r8
 802232a:	f8ba 3000 	ldrh.w	r3, [sl]
 802232e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022332:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8022336:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802233a:	e7eb      	b.n	8022314 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802233c:	4b02      	ldr	r3, [pc, #8]	; (8022348 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802233e:	6818      	ldr	r0, [r3, #0]
 8022340:	6803      	ldr	r3, [r0, #0]
 8022342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022344:	4798      	blx	r3
 8022346:	e76b      	b.n	8022220 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8022348:	200097a8 	.word	0x200097a8
 802234c:	200097a2 	.word	0x200097a2

08022350 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022350:	b510      	push	{r4, lr}
 8022352:	2104      	movs	r1, #4
 8022354:	4604      	mov	r4, r0
 8022356:	f00a ff5c 	bl	802d212 <_ZdlPvj>
 802235a:	4620      	mov	r0, r4
 802235c:	bd10      	pop	{r4, pc}

0802235e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802235e:	b510      	push	{r4, lr}
 8022360:	2104      	movs	r1, #4
 8022362:	4604      	mov	r4, r0
 8022364:	f00a ff55 	bl	802d212 <_ZdlPvj>
 8022368:	4620      	mov	r0, r4
 802236a:	bd10      	pop	{r4, pc}

0802236c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802236c:	b510      	push	{r4, lr}
 802236e:	2104      	movs	r1, #4
 8022370:	4604      	mov	r4, r0
 8022372:	f00a ff4e 	bl	802d212 <_ZdlPvj>
 8022376:	4620      	mov	r0, r4
 8022378:	bd10      	pop	{r4, pc}

0802237a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802237a:	b510      	push	{r4, lr}
 802237c:	2104      	movs	r1, #4
 802237e:	4604      	mov	r4, r0
 8022380:	f00a ff47 	bl	802d212 <_ZdlPvj>
 8022384:	4620      	mov	r0, r4
 8022386:	bd10      	pop	{r4, pc}

08022388 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022388:	b510      	push	{r4, lr}
 802238a:	2104      	movs	r1, #4
 802238c:	4604      	mov	r4, r0
 802238e:	f00a ff40 	bl	802d212 <_ZdlPvj>
 8022392:	4620      	mov	r0, r4
 8022394:	bd10      	pop	{r4, pc}

08022396 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8022396:	b510      	push	{r4, lr}
 8022398:	2104      	movs	r1, #4
 802239a:	4604      	mov	r4, r0
 802239c:	f00a ff39 	bl	802d212 <_ZdlPvj>
 80223a0:	4620      	mov	r0, r4
 80223a2:	bd10      	pop	{r4, pc}

080223a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80223a4:	b510      	push	{r4, lr}
 80223a6:	2104      	movs	r1, #4
 80223a8:	4604      	mov	r4, r0
 80223aa:	f00a ff32 	bl	802d212 <_ZdlPvj>
 80223ae:	4620      	mov	r0, r4
 80223b0:	bd10      	pop	{r4, pc}

080223b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80223b2:	b510      	push	{r4, lr}
 80223b4:	2104      	movs	r1, #4
 80223b6:	4604      	mov	r4, r0
 80223b8:	f00a ff2b 	bl	802d212 <_ZdlPvj>
 80223bc:	4620      	mov	r0, r4
 80223be:	bd10      	pop	{r4, pc}

080223c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80223c0:	b510      	push	{r4, lr}
 80223c2:	2104      	movs	r1, #4
 80223c4:	4604      	mov	r4, r0
 80223c6:	f00a ff24 	bl	802d212 <_ZdlPvj>
 80223ca:	4620      	mov	r0, r4
 80223cc:	bd10      	pop	{r4, pc}

080223ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80223ce:	b510      	push	{r4, lr}
 80223d0:	2104      	movs	r1, #4
 80223d2:	4604      	mov	r4, r0
 80223d4:	f00a ff1d 	bl	802d212 <_ZdlPvj>
 80223d8:	4620      	mov	r0, r4
 80223da:	bd10      	pop	{r4, pc}

080223dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80223dc:	b510      	push	{r4, lr}
 80223de:	2104      	movs	r1, #4
 80223e0:	4604      	mov	r4, r0
 80223e2:	f00a ff16 	bl	802d212 <_ZdlPvj>
 80223e6:	4620      	mov	r0, r4
 80223e8:	bd10      	pop	{r4, pc}

080223ea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80223ea:	b510      	push	{r4, lr}
 80223ec:	2104      	movs	r1, #4
 80223ee:	4604      	mov	r4, r0
 80223f0:	f00a ff0f 	bl	802d212 <_ZdlPvj>
 80223f4:	4620      	mov	r0, r4
 80223f6:	bd10      	pop	{r4, pc}

080223f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80223f8:	b510      	push	{r4, lr}
 80223fa:	2104      	movs	r1, #4
 80223fc:	4604      	mov	r4, r0
 80223fe:	f00a ff08 	bl	802d212 <_ZdlPvj>
 8022402:	4620      	mov	r0, r4
 8022404:	bd10      	pop	{r4, pc}

08022406 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8022406:	b510      	push	{r4, lr}
 8022408:	2104      	movs	r1, #4
 802240a:	4604      	mov	r4, r0
 802240c:	f00a ff01 	bl	802d212 <_ZdlPvj>
 8022410:	4620      	mov	r0, r4
 8022412:	bd10      	pop	{r4, pc}

08022414 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022414:	b510      	push	{r4, lr}
 8022416:	2104      	movs	r1, #4
 8022418:	4604      	mov	r4, r0
 802241a:	f00a fefa 	bl	802d212 <_ZdlPvj>
 802241e:	4620      	mov	r0, r4
 8022420:	bd10      	pop	{r4, pc}

08022422 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022422:	b510      	push	{r4, lr}
 8022424:	2104      	movs	r1, #4
 8022426:	4604      	mov	r4, r0
 8022428:	f00a fef3 	bl	802d212 <_ZdlPvj>
 802242c:	4620      	mov	r0, r4
 802242e:	bd10      	pop	{r4, pc}

08022430 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022430:	b510      	push	{r4, lr}
 8022432:	2104      	movs	r1, #4
 8022434:	4604      	mov	r4, r0
 8022436:	f00a feec 	bl	802d212 <_ZdlPvj>
 802243a:	4620      	mov	r0, r4
 802243c:	bd10      	pop	{r4, pc}

0802243e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802243e:	b510      	push	{r4, lr}
 8022440:	2104      	movs	r1, #4
 8022442:	4604      	mov	r4, r0
 8022444:	f00a fee5 	bl	802d212 <_ZdlPvj>
 8022448:	4620      	mov	r0, r4
 802244a:	bd10      	pop	{r4, pc}

0802244c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802244c:	b510      	push	{r4, lr}
 802244e:	2104      	movs	r1, #4
 8022450:	4604      	mov	r4, r0
 8022452:	f00a fede 	bl	802d212 <_ZdlPvj>
 8022456:	4620      	mov	r0, r4
 8022458:	bd10      	pop	{r4, pc}

0802245a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802245a:	b510      	push	{r4, lr}
 802245c:	2104      	movs	r1, #4
 802245e:	4604      	mov	r4, r0
 8022460:	f00a fed7 	bl	802d212 <_ZdlPvj>
 8022464:	4620      	mov	r0, r4
 8022466:	bd10      	pop	{r4, pc}

08022468 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022468:	b510      	push	{r4, lr}
 802246a:	2104      	movs	r1, #4
 802246c:	4604      	mov	r4, r0
 802246e:	f00a fed0 	bl	802d212 <_ZdlPvj>
 8022472:	4620      	mov	r0, r4
 8022474:	bd10      	pop	{r4, pc}

08022476 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022476:	b510      	push	{r4, lr}
 8022478:	2104      	movs	r1, #4
 802247a:	4604      	mov	r4, r0
 802247c:	f00a fec9 	bl	802d212 <_ZdlPvj>
 8022480:	4620      	mov	r0, r4
 8022482:	bd10      	pop	{r4, pc}

08022484 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022484:	b510      	push	{r4, lr}
 8022486:	2104      	movs	r1, #4
 8022488:	4604      	mov	r4, r0
 802248a:	f00a fec2 	bl	802d212 <_ZdlPvj>
 802248e:	4620      	mov	r0, r4
 8022490:	bd10      	pop	{r4, pc}

08022492 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8022492:	b510      	push	{r4, lr}
 8022494:	2104      	movs	r1, #4
 8022496:	4604      	mov	r4, r0
 8022498:	f00a febb 	bl	802d212 <_ZdlPvj>
 802249c:	4620      	mov	r0, r4
 802249e:	bd10      	pop	{r4, pc}

080224a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80224a0:	b510      	push	{r4, lr}
 80224a2:	2104      	movs	r1, #4
 80224a4:	4604      	mov	r4, r0
 80224a6:	f00a feb4 	bl	802d212 <_ZdlPvj>
 80224aa:	4620      	mov	r0, r4
 80224ac:	bd10      	pop	{r4, pc}

080224ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80224ae:	b510      	push	{r4, lr}
 80224b0:	2104      	movs	r1, #4
 80224b2:	4604      	mov	r4, r0
 80224b4:	f00a fead 	bl	802d212 <_ZdlPvj>
 80224b8:	4620      	mov	r0, r4
 80224ba:	bd10      	pop	{r4, pc}

080224bc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80224bc:	b510      	push	{r4, lr}
 80224be:	2104      	movs	r1, #4
 80224c0:	4604      	mov	r4, r0
 80224c2:	f00a fea6 	bl	802d212 <_ZdlPvj>
 80224c6:	4620      	mov	r0, r4
 80224c8:	bd10      	pop	{r4, pc}

080224ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80224ca:	b510      	push	{r4, lr}
 80224cc:	2104      	movs	r1, #4
 80224ce:	4604      	mov	r4, r0
 80224d0:	f00a fe9f 	bl	802d212 <_ZdlPvj>
 80224d4:	4620      	mov	r0, r4
 80224d6:	bd10      	pop	{r4, pc}

080224d8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80224d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224da:	4606      	mov	r6, r0
 80224dc:	b087      	sub	sp, #28
 80224de:	460c      	mov	r4, r1
 80224e0:	4617      	mov	r7, r2
 80224e2:	461d      	mov	r5, r3
 80224e4:	b333      	cbz	r3, 8022534 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80224e6:	4608      	mov	r0, r1
 80224e8:	f7f5 f809 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80224ec:	bb10      	cbnz	r0, 8022534 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80224ee:	6820      	ldr	r0, [r4, #0]
 80224f0:	6861      	ldr	r1, [r4, #4]
 80224f2:	4c1c      	ldr	r4, [pc, #112]	; (8022564 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80224f4:	ab04      	add	r3, sp, #16
 80224f6:	c303      	stmia	r3!, {r0, r1}
 80224f8:	a804      	add	r0, sp, #16
 80224fa:	f7f9 fbd1 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80224fe:	6820      	ldr	r0, [r4, #0]
 8022500:	6803      	ldr	r3, [r0, #0]
 8022502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022504:	4798      	blx	r3
 8022506:	2dff      	cmp	r5, #255	; 0xff
 8022508:	d016      	beq.n	8022538 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 802250a:	f010 0f08 	tst.w	r0, #8
 802250e:	6820      	ldr	r0, [r4, #0]
 8022510:	d015      	beq.n	802253e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8022512:	2400      	movs	r4, #0
 8022514:	6801      	ldr	r1, [r0, #0]
 8022516:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802251a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802251e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8022522:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022526:	9401      	str	r4, [sp, #4]
 8022528:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802252c:	9400      	str	r4, [sp, #0]
 802252e:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8022530:	4639      	mov	r1, r7
 8022532:	47a0      	blx	r4
 8022534:	b007      	add	sp, #28
 8022536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022538:	f010 0f02 	tst.w	r0, #2
 802253c:	e7e7      	b.n	802250e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802253e:	6803      	ldr	r3, [r0, #0]
 8022540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022542:	4798      	blx	r3
 8022544:	4b08      	ldr	r3, [pc, #32]	; (8022568 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022546:	881a      	ldrh	r2, [r3, #0]
 8022548:	6833      	ldr	r3, [r6, #0]
 802254a:	e9cd 7500 	strd	r7, r5, [sp]
 802254e:	4601      	mov	r1, r0
 8022550:	69dd      	ldr	r5, [r3, #28]
 8022552:	4630      	mov	r0, r6
 8022554:	ab04      	add	r3, sp, #16
 8022556:	47a8      	blx	r5
 8022558:	6820      	ldr	r0, [r4, #0]
 802255a:	6803      	ldr	r3, [r0, #0]
 802255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802255e:	4798      	blx	r3
 8022560:	e7e8      	b.n	8022534 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022562:	bf00      	nop
 8022564:	200097a8 	.word	0x200097a8
 8022568:	200097a2 	.word	0x200097a2

0802256c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 802256c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022570:	4f97      	ldr	r7, [pc, #604]	; (80227d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8022572:	4616      	mov	r6, r2
 8022574:	683a      	ldr	r2, [r7, #0]
 8022576:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 802257a:	2a02      	cmp	r2, #2
 802257c:	b08f      	sub	sp, #60	; 0x3c
 802257e:	4604      	mov	r4, r0
 8022580:	4689      	mov	r9, r1
 8022582:	d106      	bne.n	8022592 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8022584:	4b93      	ldr	r3, [pc, #588]	; (80227d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8022586:	4a94      	ldr	r2, [pc, #592]	; (80227d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8022588:	f44f 7159 	mov.w	r1, #868	; 0x364
 802258c:	4893      	ldr	r0, [pc, #588]	; (80227dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 802258e:	f00b fc5f 	bl	802de50 <__assert_func>
 8022592:	ad0e      	add	r5, sp, #56	; 0x38
 8022594:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8022598:	4628      	mov	r0, r5
 802259a:	f7fd fad3 	bl	801fb44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802259e:	6823      	ldr	r3, [r4, #0]
 80225a0:	4680      	mov	r8, r0
 80225a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80225a4:	4620      	mov	r0, r4
 80225a6:	4798      	blx	r3
 80225a8:	4580      	cmp	r8, r0
 80225aa:	d004      	beq.n	80225b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80225ac:	4b8c      	ldr	r3, [pc, #560]	; (80227e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80225ae:	4a8a      	ldr	r2, [pc, #552]	; (80227d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80225b0:	f240 3166 	movw	r1, #870	; 0x366
 80225b4:	e7ea      	b.n	802258c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80225b6:	4628      	mov	r0, r5
 80225b8:	f7fd fa3a 	bl	801fa30 <_ZNK8touchgfx6Bitmap7getDataEv>
 80225bc:	4680      	mov	r8, r0
 80225be:	b920      	cbnz	r0, 80225ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80225c0:	4b88      	ldr	r3, [pc, #544]	; (80227e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 80225c2:	4a85      	ldr	r2, [pc, #532]	; (80227d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80225c4:	f44f 715a 	mov.w	r1, #872	; 0x368
 80225c8:	e7e0      	b.n	802258c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80225ca:	6830      	ldr	r0, [r6, #0]
 80225cc:	6871      	ldr	r1, [r6, #4]
 80225ce:	f9b6 a000 	ldrsh.w	sl, [r6]
 80225d2:	ab06      	add	r3, sp, #24
 80225d4:	c303      	stmia	r3!, {r0, r1}
 80225d6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80225da:	f8d9 0000 	ldr.w	r0, [r9]
 80225de:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80225e2:	ab08      	add	r3, sp, #32
 80225e4:	c303      	stmia	r3!, {r0, r1}
 80225e6:	4628      	mov	r0, r5
 80225e8:	f7fd f91a 	bl	801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80225ec:	4606      	mov	r6, r0
 80225ee:	4628      	mov	r0, r5
 80225f0:	f7fd f950 	bl	801f894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80225f4:	f10d 0b20 	add.w	fp, sp, #32
 80225f8:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80225fc:	a806      	add	r0, sp, #24
 80225fe:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8022602:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8022606:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 802260a:	f7f9 fb49 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802260e:	4658      	mov	r0, fp
 8022610:	f7f9 fb46 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022614:	a80a      	add	r0, sp, #40	; 0x28
 8022616:	f7f9 fb43 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802261a:	4d73      	ldr	r5, [pc, #460]	; (80227e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 802261c:	4b73      	ldr	r3, [pc, #460]	; (80227ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802261e:	f9b5 2000 	ldrsh.w	r2, [r5]
 8022622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022626:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 802262a:	2100      	movs	r1, #0
 802262c:	910c      	str	r1, [sp, #48]	; 0x30
 802262e:	4658      	mov	r0, fp
 8022630:	a90c      	add	r1, sp, #48	; 0x30
 8022632:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022636:	f7f4 ff1f 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 802263a:	4658      	mov	r0, fp
 802263c:	f7f4 ff5f 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8022640:	2800      	cmp	r0, #0
 8022642:	f040 8099 	bne.w	8022778 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022646:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802264a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 802264e:	4288      	cmp	r0, r1
 8022650:	db37      	blt.n	80226c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022652:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8022656:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802265a:	429a      	cmp	r2, r3
 802265c:	db31      	blt.n	80226c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 802265e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8022662:	4430      	add	r0, r6
 8022664:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022668:	4431      	add	r1, r6
 802266a:	b200      	sxth	r0, r0
 802266c:	b209      	sxth	r1, r1
 802266e:	4288      	cmp	r0, r1
 8022670:	dc27      	bgt.n	80226c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022672:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8022676:	440a      	add	r2, r1
 8022678:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802267c:	440b      	add	r3, r1
 802267e:	b212      	sxth	r2, r2
 8022680:	b21b      	sxth	r3, r3
 8022682:	429a      	cmp	r2, r3
 8022684:	dc1d      	bgt.n	80226c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x156>
 8022686:	6823      	ldr	r3, [r4, #0]
 8022688:	4620      	mov	r0, r4
 802268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802268c:	4798      	blx	r3
 802268e:	4682      	mov	sl, r0
 8022690:	6838      	ldr	r0, [r7, #0]
 8022692:	6803      	ldr	r3, [r0, #0]
 8022694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022696:	4798      	blx	r3
 8022698:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802269c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80226a0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80226a4:	1a5b      	subs	r3, r3, r1
 80226a6:	b29b      	uxth	r3, r3
 80226a8:	b21c      	sxth	r4, r3
 80226aa:	2c00      	cmp	r4, #0
 80226ac:	dc0e      	bgt.n	80226cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 80226ae:	bf1f      	itttt	ne
 80226b0:	f8ad 1020 	strhne.w	r1, [sp, #32]
 80226b4:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 80226b8:	185b      	addne	r3, r3, r1
 80226ba:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 80226be:	4644      	mov	r4, r8
 80226c0:	e009      	b.n	80226d6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16a>
 80226c2:	4b4b      	ldr	r3, [pc, #300]	; (80227f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80226c4:	4a44      	ldr	r2, [pc, #272]	; (80227d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 80226c6:	f240 3176 	movw	r1, #886	; 0x376
 80226ca:	e75f      	b.n	802258c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80226cc:	1ad3      	subs	r3, r2, r3
 80226ce:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80226d2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80226d6:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 80226da:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80226de:	1b9b      	subs	r3, r3, r6
 80226e0:	b29b      	uxth	r3, r3
 80226e2:	b219      	sxth	r1, r3
 80226e4:	2900      	cmp	r1, #0
 80226e6:	dd4b      	ble.n	8022780 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x214>
 80226e8:	4351      	muls	r1, r2
 80226ea:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80226ee:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80226f2:	1acb      	subs	r3, r1, r3
 80226f4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80226f8:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80226fc:	2e00      	cmp	r6, #0
 80226fe:	dd3b      	ble.n	8022778 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022700:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8022704:	2b00      	cmp	r3, #0
 8022706:	dd37      	ble.n	8022778 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 8022708:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 802270c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022710:	fb0a f90c 	mul.w	r9, sl, ip
 8022714:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8022718:	4481      	add	r9, r0
 802271a:	8828      	ldrh	r0, [r5, #0]
 802271c:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8022720:	42ae      	cmp	r6, r5
 8022722:	bfa8      	it	ge
 8022724:	462e      	movge	r6, r5
 8022726:	1a41      	subs	r1, r0, r1
 8022728:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802272c:	428e      	cmp	r6, r1
 802272e:	bfa8      	it	ge
 8022730:	460e      	movge	r6, r1
 8022732:	429d      	cmp	r5, r3
 8022734:	bfa8      	it	ge
 8022736:	461d      	movge	r5, r3
 8022738:	4b2c      	ldr	r3, [pc, #176]	; (80227ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802273a:	881b      	ldrh	r3, [r3, #0]
 802273c:	eba3 030c 	sub.w	r3, r3, ip
 8022740:	429d      	cmp	r5, r3
 8022742:	bfa8      	it	ge
 8022744:	461d      	movge	r5, r3
 8022746:	42b0      	cmp	r0, r6
 8022748:	d12c      	bne.n	80227a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 802274a:	4290      	cmp	r0, r2
 802274c:	d12a      	bne.n	80227a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x238>
 802274e:	6838      	ldr	r0, [r7, #0]
 8022750:	9203      	str	r2, [sp, #12]
 8022752:	6803      	ldr	r3, [r0, #0]
 8022754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022756:	4798      	blx	r3
 8022758:	07c3      	lsls	r3, r0, #31
 802275a:	d51a      	bpl.n	8022792 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x226>
 802275c:	9a03      	ldr	r2, [sp, #12]
 802275e:	6838      	ldr	r0, [r7, #0]
 8022760:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8022764:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8022768:	6803      	ldr	r3, [r0, #0]
 802276a:	9200      	str	r2, [sp, #0]
 802276c:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 802276e:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8022772:	4623      	mov	r3, r4
 8022774:	47a8      	blx	r5
 8022776:	4680      	mov	r8, r0
 8022778:	4640      	mov	r0, r8
 802277a:	b00f      	add	sp, #60	; 0x3c
 802277c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022780:	bf1f      	itttt	ne
 8022782:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8022786:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 802278a:	185b      	addne	r3, r3, r1
 802278c:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8022790:	e7b2      	b.n	80226f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18c>
 8022792:	6838      	ldr	r0, [r7, #0]
 8022794:	6803      	ldr	r3, [r0, #0]
 8022796:	464a      	mov	r2, r9
 8022798:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 802279a:	4621      	mov	r1, r4
 802279c:	fb05 f30a 	mul.w	r3, r5, sl
 80227a0:	47b0      	blx	r6
 80227a2:	e7e9      	b.n	8022778 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80227a4:	4355      	muls	r5, r2
 80227a6:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 80227aa:	9303      	str	r3, [sp, #12]
 80227ac:	0076      	lsls	r6, r6, #1
 80227ae:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 80227b2:	9b03      	ldr	r3, [sp, #12]
 80227b4:	429c      	cmp	r4, r3
 80227b6:	d2df      	bcs.n	8022778 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20c>
 80227b8:	6838      	ldr	r0, [r7, #0]
 80227ba:	6803      	ldr	r3, [r0, #0]
 80227bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80227be:	464a      	mov	r2, r9
 80227c0:	461d      	mov	r5, r3
 80227c2:	4621      	mov	r1, r4
 80227c4:	4633      	mov	r3, r6
 80227c6:	47a8      	blx	r5
 80227c8:	44d1      	add	r9, sl
 80227ca:	445c      	add	r4, fp
 80227cc:	e7f1      	b.n	80227b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x246>
 80227ce:	bf00      	nop
 80227d0:	200097a8 	.word	0x200097a8
 80227d4:	080329ab 	.word	0x080329ab
 80227d8:	0803325c 	.word	0x0803325c
 80227dc:	08032a5d 	.word	0x08032a5d
 80227e0:	08032a8f 	.word	0x08032a8f
 80227e4:	08032ae4 	.word	0x08032ae4
 80227e8:	200097a2 	.word	0x200097a2
 80227ec:	200097a4 	.word	0x200097a4
 80227f0:	08032b22 	.word	0x08032b22

080227f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80227f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80227f8:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 80227fc:	9e08      	ldr	r6, [sp, #32]
 80227fe:	4688      	mov	r8, r1
 8022800:	4614      	mov	r4, r2
 8022802:	461d      	mov	r5, r3
 8022804:	2f00      	cmp	r7, #0
 8022806:	f000 80b3 	beq.w	8022970 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 802280a:	4618      	mov	r0, r3
 802280c:	f7f4 fe77 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8022810:	2800      	cmp	r0, #0
 8022812:	f040 80ad 	bne.w	8022970 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022816:	f9b5 1000 	ldrsh.w	r1, [r5]
 802281a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 802281e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8022822:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8022826:	fb04 1303 	mla	r3, r4, r3, r1
 802282a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 802282e:	4365      	muls	r5, r4
 8022830:	2fff      	cmp	r7, #255	; 0xff
 8022832:	eba4 0200 	sub.w	r2, r4, r0
 8022836:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 802283a:	ea4f 2816 	mov.w	r8, r6, lsr #8
 802283e:	d04b      	beq.n	80228d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8022840:	b2bc      	uxth	r4, r7
 8022842:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8022846:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 802284a:	fa5f f788 	uxtb.w	r7, r8
 802284e:	b2f3      	uxtb	r3, r6
 8022850:	0040      	lsls	r0, r0, #1
 8022852:	fb0e fe04 	mul.w	lr, lr, r4
 8022856:	4367      	muls	r7, r4
 8022858:	4363      	muls	r3, r4
 802285a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802285e:	fa1f fc8c 	uxth.w	ip, ip
 8022862:	42a9      	cmp	r1, r5
 8022864:	f080 8084 	bcs.w	8022970 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 8022868:	eb01 0900 	add.w	r9, r1, r0
 802286c:	4549      	cmp	r1, r9
 802286e:	d231      	bcs.n	80228d4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8022870:	880a      	ldrh	r2, [r1, #0]
 8022872:	1214      	asrs	r4, r2, #8
 8022874:	10d6      	asrs	r6, r2, #3
 8022876:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802287a:	00d2      	lsls	r2, r2, #3
 802287c:	b2d2      	uxtb	r2, r2
 802287e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022882:	fb14 f40c 	smulbb	r4, r4, ip
 8022886:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802288a:	4474      	add	r4, lr
 802288c:	fb12 f20c 	smulbb	r2, r2, ip
 8022890:	b2a4      	uxth	r4, r4
 8022892:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022896:	441a      	add	r2, r3
 8022898:	b292      	uxth	r2, r2
 802289a:	f104 0a01 	add.w	sl, r4, #1
 802289e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80228a2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80228a6:	fb16 f60c 	smulbb	r6, r6, ip
 80228aa:	f102 0a01 	add.w	sl, r2, #1
 80228ae:	443e      	add	r6, r7
 80228b0:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80228b4:	b2b6      	uxth	r6, r6
 80228b6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80228ba:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80228be:	4322      	orrs	r2, r4
 80228c0:	1c74      	adds	r4, r6, #1
 80228c2:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80228c6:	0976      	lsrs	r6, r6, #5
 80228c8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80228cc:	4332      	orrs	r2, r6
 80228ce:	f821 2b02 	strh.w	r2, [r1], #2
 80228d2:	e7cb      	b.n	802286c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 80228d4:	4441      	add	r1, r8
 80228d6:	e7c4      	b.n	8022862 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 80228d8:	4f26      	ldr	r7, [pc, #152]	; (8022974 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x180>)
 80228da:	0973      	lsrs	r3, r6, #5
 80228dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80228e0:	ea08 0707 	and.w	r7, r8, r7
 80228e4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80228e8:	433b      	orrs	r3, r7
 80228ea:	4333      	orrs	r3, r6
 80228ec:	07e6      	lsls	r6, r4, #31
 80228ee:	b29b      	uxth	r3, r3
 80228f0:	d50b      	bpl.n	802290a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x116>
 80228f2:	0040      	lsls	r0, r0, #1
 80228f4:	0052      	lsls	r2, r2, #1
 80228f6:	42a9      	cmp	r1, r5
 80228f8:	d23a      	bcs.n	8022970 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 80228fa:	180c      	adds	r4, r1, r0
 80228fc:	42a1      	cmp	r1, r4
 80228fe:	d202      	bcs.n	8022906 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x112>
 8022900:	f821 3b02 	strh.w	r3, [r1], #2
 8022904:	e7fa      	b.n	80228fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x108>
 8022906:	4411      	add	r1, r2
 8022908:	e7f5      	b.n	80228f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x102>
 802290a:	078f      	lsls	r7, r1, #30
 802290c:	d008      	beq.n	8022920 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12c>
 802290e:	0066      	lsls	r6, r4, #1
 8022910:	460a      	mov	r2, r1
 8022912:	42aa      	cmp	r2, r5
 8022914:	d202      	bcs.n	802291c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x128>
 8022916:	8013      	strh	r3, [r2, #0]
 8022918:	4432      	add	r2, r6
 802291a:	e7fa      	b.n	8022912 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11e>
 802291c:	3102      	adds	r1, #2
 802291e:	3801      	subs	r0, #1
 8022920:	07c6      	lsls	r6, r0, #31
 8022922:	d50b      	bpl.n	802293c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8022924:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8022928:	3a01      	subs	r2, #1
 802292a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 802292e:	0066      	lsls	r6, r4, #1
 8022930:	42aa      	cmp	r2, r5
 8022932:	d202      	bcs.n	802293a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8022934:	8013      	strh	r3, [r2, #0]
 8022936:	4432      	add	r2, r6
 8022938:	e7fa      	b.n	8022930 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13c>
 802293a:	3801      	subs	r0, #1
 802293c:	b1c0      	cbz	r0, 8022970 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 802293e:	1040      	asrs	r0, r0, #1
 8022940:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8022944:	0080      	lsls	r0, r0, #2
 8022946:	0064      	lsls	r4, r4, #1
 8022948:	42a9      	cmp	r1, r5
 802294a:	d211      	bcs.n	8022970 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17c>
 802294c:	078a      	lsls	r2, r1, #30
 802294e:	d006      	beq.n	802295e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16a>
 8022950:	4b09      	ldr	r3, [pc, #36]	; (8022978 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8022952:	4a0a      	ldr	r2, [pc, #40]	; (802297c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8022954:	480a      	ldr	r0, [pc, #40]	; (8022980 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8022956:	f44f 6185 	mov.w	r1, #1064	; 0x428
 802295a:	f00b fa79 	bl	802de50 <__assert_func>
 802295e:	180e      	adds	r6, r1, r0
 8022960:	460a      	mov	r2, r1
 8022962:	42b2      	cmp	r2, r6
 8022964:	d202      	bcs.n	802296c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x178>
 8022966:	f842 3b04 	str.w	r3, [r2], #4
 802296a:	e7fa      	b.n	8022962 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16e>
 802296c:	4421      	add	r1, r4
 802296e:	e7eb      	b.n	8022948 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x154>
 8022970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022974:	00fff800 	.word	0x00fff800
 8022978:	0803285c 	.word	0x0803285c
 802297c:	08032ea8 	.word	0x08032ea8
 8022980:	08032a5d 	.word	0x08032a5d

08022984 <_ZN8touchgfx8LCD16bppC1Ev>:
 8022984:	2200      	movs	r2, #0
 8022986:	4910      	ldr	r1, [pc, #64]	; (80229c8 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8022988:	6042      	str	r2, [r0, #4]
 802298a:	6001      	str	r1, [r0, #0]
 802298c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022990:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022994:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022998:	e9c0 2208 	strd	r2, r2, [r0, #32]
 802299c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80229a0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80229a4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80229a8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80229ac:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80229b0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80229b4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80229b8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80229bc:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80229c0:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80229c4:	4770      	bx	lr
 80229c6:	bf00      	nop
 80229c8:	08032e60 	.word	0x08032e60

080229cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80229cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d0:	460d      	mov	r5, r1
 80229d2:	b08d      	sub	sp, #52	; 0x34
 80229d4:	4604      	mov	r4, r0
 80229d6:	6808      	ldr	r0, [r1, #0]
 80229d8:	6849      	ldr	r1, [r1, #4]
 80229da:	4699      	mov	r9, r3
 80229dc:	ab08      	add	r3, sp, #32
 80229de:	c303      	stmia	r3!, {r0, r1}
 80229e0:	6810      	ldr	r0, [r2, #0]
 80229e2:	6851      	ldr	r1, [r2, #4]
 80229e4:	ab0a      	add	r3, sp, #40	; 0x28
 80229e6:	c303      	stmia	r3!, {r0, r1}
 80229e8:	a808      	add	r0, sp, #32
 80229ea:	f7f9 f959 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80229ee:	4629      	mov	r1, r5
 80229f0:	a80a      	add	r0, sp, #40	; 0x28
 80229f2:	f7f9 f999 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80229f6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80229fa:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80229fe:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022a02:	4d63      	ldr	r5, [pc, #396]	; (8022b90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022a04:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8022a08:	6828      	ldr	r0, [r5, #0]
 8022a0a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022a0e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022a12:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022a16:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022a1a:	440a      	add	r2, r1
 8022a1c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022a20:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8022a24:	4413      	add	r3, r2
 8022a26:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022a2a:	6803      	ldr	r3, [r0, #0]
 8022a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a2e:	4798      	blx	r3
 8022a30:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022a34:	d119      	bne.n	8022a6a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8022a36:	f010 0f20 	tst.w	r0, #32
 8022a3a:	6828      	ldr	r0, [r5, #0]
 8022a3c:	d018      	beq.n	8022a70 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8022a3e:	2500      	movs	r5, #0
 8022a40:	6801      	ldr	r1, [r0, #0]
 8022a42:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022a46:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022a4a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022a4e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8022a52:	9502      	str	r5, [sp, #8]
 8022a54:	b2b6      	uxth	r6, r6
 8022a56:	fa1f f588 	uxth.w	r5, r8
 8022a5a:	9601      	str	r6, [sp, #4]
 8022a5c:	9500      	str	r5, [sp, #0]
 8022a5e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8022a60:	4621      	mov	r1, r4
 8022a62:	47a8      	blx	r5
 8022a64:	b00d      	add	sp, #52	; 0x34
 8022a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022a6e:	e7e4      	b.n	8022a3a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022a70:	6803      	ldr	r3, [r0, #0]
 8022a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a74:	4798      	blx	r3
 8022a76:	4947      	ldr	r1, [pc, #284]	; (8022b94 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022a78:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022a7c:	880b      	ldrh	r3, [r1, #0]
 8022a7e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8022a82:	fb03 5202 	mla	r2, r3, r2, r5
 8022a86:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022a8a:	4373      	muls	r3, r6
 8022a8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022a90:	9307      	str	r3, [sp, #28]
 8022a92:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022a96:	9306      	str	r3, [sp, #24]
 8022a98:	468a      	mov	sl, r1
 8022a9a:	9b07      	ldr	r3, [sp, #28]
 8022a9c:	4298      	cmp	r0, r3
 8022a9e:	d270      	bcs.n	8022b82 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022aa0:	9b06      	ldr	r3, [sp, #24]
 8022aa2:	4621      	mov	r1, r4
 8022aa4:	eb00 0b03 	add.w	fp, r0, r3
 8022aa8:	4558      	cmp	r0, fp
 8022aaa:	d25d      	bcs.n	8022b68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022aac:	f851 4b04 	ldr.w	r4, [r1], #4
 8022ab0:	0e23      	lsrs	r3, r4, #24
 8022ab2:	d014      	beq.n	8022ade <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022ab4:	2bff      	cmp	r3, #255	; 0xff
 8022ab6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8022aba:	d112      	bne.n	8022ae2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022abc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022ac0:	d10f      	bne.n	8022ae2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022ac2:	0963      	lsrs	r3, r4, #5
 8022ac4:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8022ac8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022acc:	f02c 0c07 	bic.w	ip, ip, #7
 8022ad0:	ea43 0c0c 	orr.w	ip, r3, ip
 8022ad4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022ad8:	ea4c 0404 	orr.w	r4, ip, r4
 8022adc:	8004      	strh	r4, [r0, #0]
 8022ade:	3002      	adds	r0, #2
 8022ae0:	e7e2      	b.n	8022aa8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8022ae2:	fb09 f303 	mul.w	r3, r9, r3
 8022ae6:	8807      	ldrh	r7, [r0, #0]
 8022ae8:	1c5a      	adds	r2, r3, #1
 8022aea:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022aee:	1212      	asrs	r2, r2, #8
 8022af0:	123e      	asrs	r6, r7, #8
 8022af2:	b293      	uxth	r3, r2
 8022af4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022af8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022afc:	43d2      	mvns	r2, r2
 8022afe:	b2d2      	uxtb	r2, r2
 8022b00:	10fd      	asrs	r5, r7, #3
 8022b02:	fb1e fe03 	smulbb	lr, lr, r3
 8022b06:	00ff      	lsls	r7, r7, #3
 8022b08:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022b0c:	fb06 e602 	mla	r6, r6, r2, lr
 8022b10:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022b14:	b2ff      	uxtb	r7, r7
 8022b16:	fa5f fc8c 	uxtb.w	ip, ip
 8022b1a:	b2e4      	uxtb	r4, r4
 8022b1c:	b2b6      	uxth	r6, r6
 8022b1e:	fb1c fc03 	smulbb	ip, ip, r3
 8022b22:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022b26:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8022b2a:	fb14 f403 	smulbb	r4, r4, r3
 8022b2e:	fb05 c502 	mla	r5, r5, r2, ip
 8022b32:	f106 0e01 	add.w	lr, r6, #1
 8022b36:	fb07 4702 	mla	r7, r7, r2, r4
 8022b3a:	b2ad      	uxth	r5, r5
 8022b3c:	b2bf      	uxth	r7, r7
 8022b3e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8022b42:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8022b46:	f105 0c01 	add.w	ip, r5, #1
 8022b4a:	1c7e      	adds	r6, r7, #1
 8022b4c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8022b50:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022b54:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022b58:	096d      	lsrs	r5, r5, #5
 8022b5a:	ea46 060e 	orr.w	r6, r6, lr
 8022b5e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022b62:	432e      	orrs	r6, r5
 8022b64:	8006      	strh	r6, [r0, #0]
 8022b66:	e7ba      	b.n	8022ade <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022b68:	f8ba 3000 	ldrh.w	r3, [sl]
 8022b6c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8022b70:	eba3 0308 	sub.w	r3, r3, r8
 8022b74:	eba4 0408 	sub.w	r4, r4, r8
 8022b78:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022b7c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022b80:	e78b      	b.n	8022a9a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8022b82:	4b03      	ldr	r3, [pc, #12]	; (8022b90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022b84:	6818      	ldr	r0, [r3, #0]
 8022b86:	6803      	ldr	r3, [r0, #0]
 8022b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b8a:	4798      	blx	r3
 8022b8c:	e76a      	b.n	8022a64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8022b8e:	bf00      	nop
 8022b90:	200097a8 	.word	0x200097a8
 8022b94:	200097a2 	.word	0x200097a2

08022b98 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8022b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022b9c:	460c      	mov	r4, r1
 8022b9e:	b085      	sub	sp, #20
 8022ba0:	6810      	ldr	r0, [r2, #0]
 8022ba2:	6851      	ldr	r1, [r2, #4]
 8022ba4:	466d      	mov	r5, sp
 8022ba6:	c503      	stmia	r5!, {r0, r1}
 8022ba8:	6818      	ldr	r0, [r3, #0]
 8022baa:	6859      	ldr	r1, [r3, #4]
 8022bac:	4616      	mov	r6, r2
 8022bae:	c503      	stmia	r5!, {r0, r1}
 8022bb0:	4668      	mov	r0, sp
 8022bb2:	f7f9 f875 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022bb6:	4631      	mov	r1, r6
 8022bb8:	a802      	add	r0, sp, #8
 8022bba:	f7f9 f8b5 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022bbe:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022bc2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022bc6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8022bca:	4d28      	ldr	r5, [pc, #160]	; (8022c6c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8022bcc:	4e28      	ldr	r6, [pc, #160]	; (8022c70 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8022bce:	6828      	ldr	r0, [r5, #0]
 8022bd0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022bd4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022bd8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022bdc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022be0:	f8bd 1000 	ldrh.w	r1, [sp]
 8022be4:	440a      	add	r2, r1
 8022be6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022bea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022bee:	4413      	add	r3, r2
 8022bf0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022bf4:	6803      	ldr	r3, [r0, #0]
 8022bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022bf8:	4798      	blx	r3
 8022bfa:	8833      	ldrh	r3, [r6, #0]
 8022bfc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022c00:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022c04:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8022c74 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022c08:	fb03 1202 	mla	r2, r3, r2, r1
 8022c0c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022c10:	fb08 f303 	mul.w	r3, r8, r3
 8022c14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022c18:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022c1c:	4298      	cmp	r0, r3
 8022c1e:	d21d      	bcs.n	8022c5c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022c20:	eb00 080c 	add.w	r8, r0, ip
 8022c24:	4540      	cmp	r0, r8
 8022c26:	d20f      	bcs.n	8022c48 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022c28:	f854 1b04 	ldr.w	r1, [r4], #4
 8022c2c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8022c30:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8022c34:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022c38:	ea42 0209 	orr.w	r2, r2, r9
 8022c3c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022c40:	430a      	orrs	r2, r1
 8022c42:	f820 2b02 	strh.w	r2, [r0], #2
 8022c46:	e7ed      	b.n	8022c24 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8022c48:	8832      	ldrh	r2, [r6, #0]
 8022c4a:	1bd2      	subs	r2, r2, r7
 8022c4c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022c50:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8022c54:	1bd2      	subs	r2, r2, r7
 8022c56:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8022c5a:	e7df      	b.n	8022c1c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8022c5c:	6828      	ldr	r0, [r5, #0]
 8022c5e:	6803      	ldr	r3, [r0, #0]
 8022c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022c62:	4798      	blx	r3
 8022c64:	b005      	add	sp, #20
 8022c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022c6a:	bf00      	nop
 8022c6c:	200097a8 	.word	0x200097a8
 8022c70:	200097a2 	.word	0x200097a2
 8022c74:	fffff800 	.word	0xfffff800

08022c78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8022c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c7c:	460e      	mov	r6, r1
 8022c7e:	b08e      	sub	sp, #56	; 0x38
 8022c80:	4604      	mov	r4, r0
 8022c82:	6808      	ldr	r0, [r1, #0]
 8022c84:	6849      	ldr	r1, [r1, #4]
 8022c86:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8022e60 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8022c8a:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8022e64 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8022c8e:	461d      	mov	r5, r3
 8022c90:	ab0a      	add	r3, sp, #40	; 0x28
 8022c92:	c303      	stmia	r3!, {r0, r1}
 8022c94:	6810      	ldr	r0, [r2, #0]
 8022c96:	6851      	ldr	r1, [r2, #4]
 8022c98:	ab0c      	add	r3, sp, #48	; 0x30
 8022c9a:	c303      	stmia	r3!, {r0, r1}
 8022c9c:	a80a      	add	r0, sp, #40	; 0x28
 8022c9e:	f7f8 ffff 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022ca2:	4631      	mov	r1, r6
 8022ca4:	a80c      	add	r0, sp, #48	; 0x30
 8022ca6:	f7f9 f83f 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022caa:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8022cae:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8022cb2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022cb6:	f8d8 0000 	ldr.w	r0, [r8]
 8022cba:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8022cbe:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8022cc2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022cc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022cca:	440c      	add	r4, r1
 8022ccc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8022cd0:	440a      	add	r2, r1
 8022cd2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8022cd6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8022cda:	4413      	add	r3, r2
 8022cdc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022ce0:	6803      	ldr	r3, [r0, #0]
 8022ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022ce4:	4798      	blx	r3
 8022ce6:	2dff      	cmp	r5, #255	; 0xff
 8022ce8:	d124      	bne.n	8022d34 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8022cea:	f010 0f01 	tst.w	r0, #1
 8022cee:	f8d8 0000 	ldr.w	r0, [r8]
 8022cf2:	d022      	beq.n	8022d3a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8022cf4:	2100      	movs	r1, #0
 8022cf6:	f8d0 c000 	ldr.w	ip, [r0]
 8022cfa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022cfe:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022d02:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8022d06:	f04f 0e01 	mov.w	lr, #1
 8022d0a:	f8cd e018 	str.w	lr, [sp, #24]
 8022d0e:	f8b9 e000 	ldrh.w	lr, [r9]
 8022d12:	9503      	str	r5, [sp, #12]
 8022d14:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022d18:	b2b6      	uxth	r6, r6
 8022d1a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8022d1e:	9102      	str	r1, [sp, #8]
 8022d20:	b2bf      	uxth	r7, r7
 8022d22:	9601      	str	r6, [sp, #4]
 8022d24:	9700      	str	r7, [sp, #0]
 8022d26:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8022d2a:	4621      	mov	r1, r4
 8022d2c:	47a8      	blx	r5
 8022d2e:	b00e      	add	sp, #56	; 0x38
 8022d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d34:	f010 0f04 	tst.w	r0, #4
 8022d38:	e7d9      	b.n	8022cee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8022d3a:	6803      	ldr	r3, [r0, #0]
 8022d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d3e:	4798      	blx	r3
 8022d40:	f8b9 3000 	ldrh.w	r3, [r9]
 8022d44:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8022d48:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8022d4c:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022d50:	fb03 1202 	mla	r2, r3, r2, r1
 8022d54:	ebac 0c07 	sub.w	ip, ip, r7
 8022d58:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022d5c:	435e      	muls	r6, r3
 8022d5e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8022d62:	2dff      	cmp	r5, #255	; 0xff
 8022d64:	eba3 0707 	sub.w	r7, r3, r7
 8022d68:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8022d6c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022d70:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8022d74:	d049      	beq.n	8022e0a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8022d76:	43eb      	mvns	r3, r5
 8022d78:	fa1f f985 	uxth.w	r9, r5
 8022d7c:	b2db      	uxtb	r3, r3
 8022d7e:	42b0      	cmp	r0, r6
 8022d80:	d266      	bcs.n	8022e50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022d82:	eb00 0a0e 	add.w	sl, r0, lr
 8022d86:	4550      	cmp	r0, sl
 8022d88:	4621      	mov	r1, r4
 8022d8a:	f104 0403 	add.w	r4, r4, #3
 8022d8e:	d25b      	bcs.n	8022e48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8022d90:	8802      	ldrh	r2, [r0, #0]
 8022d92:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022d96:	ea4f 2822 	mov.w	r8, r2, asr #8
 8022d9a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8022d9e:	fb11 f109 	smulbb	r1, r1, r9
 8022da2:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8022da6:	10d5      	asrs	r5, r2, #3
 8022da8:	fb08 1803 	mla	r8, r8, r3, r1
 8022dac:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8022db0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022db4:	fb11 f109 	smulbb	r1, r1, r9
 8022db8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022dbc:	fb05 1503 	mla	r5, r5, r3, r1
 8022dc0:	00d2      	lsls	r2, r2, #3
 8022dc2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022dc6:	b2d2      	uxtb	r2, r2
 8022dc8:	fb11 f109 	smulbb	r1, r1, r9
 8022dcc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022dd0:	fa1f f888 	uxth.w	r8, r8
 8022dd4:	fb02 1203 	mla	r2, r2, r3, r1
 8022dd8:	b292      	uxth	r2, r2
 8022dda:	f108 0101 	add.w	r1, r8, #1
 8022dde:	b2ad      	uxth	r5, r5
 8022de0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8022de4:	1c51      	adds	r1, r2, #1
 8022de6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022dea:	1c69      	adds	r1, r5, #1
 8022dec:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8022df0:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8022df4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022df8:	096d      	lsrs	r5, r5, #5
 8022dfa:	ea42 0208 	orr.w	r2, r2, r8
 8022dfe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022e02:	432a      	orrs	r2, r5
 8022e04:	f820 2b02 	strh.w	r2, [r0], #2
 8022e08:	e7bd      	b.n	8022d86 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022e0a:	4a14      	ldr	r2, [pc, #80]	; (8022e5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022e0c:	42b0      	cmp	r0, r6
 8022e0e:	d21f      	bcs.n	8022e50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022e10:	eb00 050e 	add.w	r5, r0, lr
 8022e14:	42a8      	cmp	r0, r5
 8022e16:	4621      	mov	r1, r4
 8022e18:	f104 0403 	add.w	r4, r4, #3
 8022e1c:	d210      	bcs.n	8022e40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8022e1e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8022e22:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8022e26:	00db      	lsls	r3, r3, #3
 8022e28:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022e2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e30:	430b      	orrs	r3, r1
 8022e32:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022e36:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8022e3a:	f820 3b02 	strh.w	r3, [r0], #2
 8022e3e:	e7e9      	b.n	8022e14 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8022e40:	4438      	add	r0, r7
 8022e42:	eb01 040c 	add.w	r4, r1, ip
 8022e46:	e7e1      	b.n	8022e0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8022e48:	4438      	add	r0, r7
 8022e4a:	eb01 040c 	add.w	r4, r1, ip
 8022e4e:	e796      	b.n	8022d7e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8022e50:	4b03      	ldr	r3, [pc, #12]	; (8022e60 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8022e52:	6818      	ldr	r0, [r3, #0]
 8022e54:	6803      	ldr	r3, [r0, #0]
 8022e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022e58:	4798      	blx	r3
 8022e5a:	e768      	b.n	8022d2e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8022e5c:	fffff800 	.word	0xfffff800
 8022e60:	200097a8 	.word	0x200097a8
 8022e64:	200097a2 	.word	0x200097a2

08022e68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022e68:	b570      	push	{r4, r5, r6, lr}
 8022e6a:	9c04      	ldr	r4, [sp, #16]
 8022e6c:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8022e70:	4605      	mov	r5, r0
 8022e72:	4608      	mov	r0, r1
 8022e74:	4619      	mov	r1, r3
 8022e76:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022e7a:	2a0d      	cmp	r2, #13
 8022e7c:	d825      	bhi.n	8022eca <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8022e7e:	e8df f002 	tbb	[pc, r2]
 8022e82:	1807      	.short	0x1807
 8022e84:	1d1d1d13 	.word	0x1d1d1d13
 8022e88:	1d1d1d1d 	.word	0x1d1d1d1d
 8022e8c:	1d1d1d1d 	.word	0x1d1d1d1d
 8022e90:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8022e94:	682a      	ldr	r2, [r5, #0]
 8022e96:	68d6      	ldr	r6, [r2, #12]
 8022e98:	4623      	mov	r3, r4
 8022e9a:	460a      	mov	r2, r1
 8022e9c:	46b4      	mov	ip, r6
 8022e9e:	4601      	mov	r1, r0
 8022ea0:	4628      	mov	r0, r5
 8022ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022ea6:	4760      	bx	ip
 8022ea8:	4622      	mov	r2, r4
 8022eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022eae:	f7ff bd8d 	b.w	80229cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022eb2:	4622      	mov	r2, r4
 8022eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022eb8:	f7ff bede 	b.w	8022c78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022ebc:	4b03      	ldr	r3, [pc, #12]	; (8022ecc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8022ebe:	4a04      	ldr	r2, [pc, #16]	; (8022ed0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8022ec0:	4804      	ldr	r0, [pc, #16]	; (8022ed4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8022ec2:	f240 315d 	movw	r1, #861	; 0x35d
 8022ec6:	f00a ffc3 	bl	802de50 <__assert_func>
 8022eca:	bd70      	pop	{r4, r5, r6, pc}
 8022ecc:	08032b82 	.word	0x08032b82
 8022ed0:	080332e2 	.word	0x080332e2
 8022ed4:	08032a5d 	.word	0x08032a5d

08022ed8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022edc:	b093      	sub	sp, #76	; 0x4c
 8022ede:	880e      	ldrh	r6, [r1, #0]
 8022ee0:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8022ee4:	4681      	mov	r9, r0
 8022ee6:	4688      	mov	r8, r1
 8022ee8:	4615      	mov	r5, r2
 8022eea:	b136      	cbz	r6, 8022efa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8022eec:	4b70      	ldr	r3, [pc, #448]	; (80230b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8022eee:	4a71      	ldr	r2, [pc, #452]	; (80230b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8022ef0:	4871      	ldr	r0, [pc, #452]	; (80230b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8022ef2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8022ef6:	f00a ffab 	bl	802de50 <__assert_func>
 8022efa:	6810      	ldr	r0, [r2, #0]
 8022efc:	6851      	ldr	r1, [r2, #4]
 8022efe:	4f6f      	ldr	r7, [pc, #444]	; (80230bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8022f00:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80230c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8022f04:	ac0e      	add	r4, sp, #56	; 0x38
 8022f06:	c403      	stmia	r4!, {r0, r1}
 8022f08:	6818      	ldr	r0, [r3, #0]
 8022f0a:	6859      	ldr	r1, [r3, #4]
 8022f0c:	ac10      	add	r4, sp, #64	; 0x40
 8022f0e:	c403      	stmia	r4!, {r0, r1}
 8022f10:	a80e      	add	r0, sp, #56	; 0x38
 8022f12:	f7f8 fec5 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f16:	4629      	mov	r1, r5
 8022f18:	a810      	add	r0, sp, #64	; 0x40
 8022f1a:	f7f8 ff05 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f1e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8022f22:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8022f26:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022f2a:	6838      	ldr	r0, [r7, #0]
 8022f2c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8022f30:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8022f34:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022f38:	4489      	add	r9, r1
 8022f3a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8022f3e:	440a      	add	r2, r1
 8022f40:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8022f44:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022f48:	4413      	add	r3, r2
 8022f4a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8022f4e:	6803      	ldr	r3, [r0, #0]
 8022f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f52:	4798      	blx	r3
 8022f54:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022f58:	6838      	ldr	r0, [r7, #0]
 8022f5a:	d01d      	beq.n	8022f98 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8022f5c:	6802      	ldr	r2, [r0, #0]
 8022f5e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8022f62:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8022f66:	210b      	movs	r1, #11
 8022f68:	9107      	str	r1, [sp, #28]
 8022f6a:	f8bb 1000 	ldrh.w	r1, [fp]
 8022f6e:	9106      	str	r1, [sp, #24]
 8022f70:	2101      	movs	r1, #1
 8022f72:	e9cd a104 	strd	sl, r1, [sp, #16]
 8022f76:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022f7a:	9103      	str	r1, [sp, #12]
 8022f7c:	b2a4      	uxth	r4, r4
 8022f7e:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8022f82:	9100      	str	r1, [sp, #0]
 8022f84:	b2ad      	uxth	r5, r5
 8022f86:	9502      	str	r5, [sp, #8]
 8022f88:	9401      	str	r4, [sp, #4]
 8022f8a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8022f8c:	4649      	mov	r1, r9
 8022f8e:	4642      	mov	r2, r8
 8022f90:	47a0      	blx	r4
 8022f92:	b013      	add	sp, #76	; 0x4c
 8022f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f98:	6803      	ldr	r3, [r0, #0]
 8022f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022f9c:	4798      	blx	r3
 8022f9e:	f8bb 3000 	ldrh.w	r3, [fp]
 8022fa2:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8022fa6:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8022faa:	fb03 1202 	mla	r2, r3, r2, r1
 8022fae:	435d      	muls	r5, r3
 8022fb0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022fb4:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8022fb8:	920c      	str	r2, [sp, #48]	; 0x30
 8022fba:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8022fbe:	1b12      	subs	r2, r2, r4
 8022fc0:	920d      	str	r2, [sp, #52]	; 0x34
 8022fc2:	0062      	lsls	r2, r4, #1
 8022fc4:	1b1c      	subs	r4, r3, r4
 8022fc6:	0063      	lsls	r3, r4, #1
 8022fc8:	920a      	str	r2, [sp, #40]	; 0x28
 8022fca:	930b      	str	r3, [sp, #44]	; 0x2c
 8022fcc:	f04f 0e04 	mov.w	lr, #4
 8022fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022fd2:	4298      	cmp	r0, r3
 8022fd4:	d266      	bcs.n	80230a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8022fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022fd8:	eb00 0b03 	add.w	fp, r0, r3
 8022fdc:	4558      	cmp	r0, fp
 8022fde:	d25c      	bcs.n	802309a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 8022fe0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8022fe4:	fb1e e303 	smlabb	r3, lr, r3, lr
 8022fe8:	f858 2003 	ldr.w	r2, [r8, r3]
 8022fec:	0e11      	lsrs	r1, r2, #24
 8022fee:	d012      	beq.n	8023016 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8022ff0:	29ff      	cmp	r1, #255	; 0xff
 8022ff2:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8022ff6:	d110      	bne.n	802301a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8022ff8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022ffc:	d10d      	bne.n	802301a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8022ffe:	0953      	lsrs	r3, r2, #5
 8023000:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8023004:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023008:	f027 0707 	bic.w	r7, r7, #7
 802300c:	431f      	orrs	r7, r3
 802300e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023012:	433a      	orrs	r2, r7
 8023014:	8002      	strh	r2, [r0, #0]
 8023016:	3002      	adds	r0, #2
 8023018:	e7e0      	b.n	8022fdc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 802301a:	fb0a f101 	mul.w	r1, sl, r1
 802301e:	8806      	ldrh	r6, [r0, #0]
 8023020:	1c4b      	adds	r3, r1, #1
 8023022:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8023026:	1235      	asrs	r5, r6, #8
 8023028:	10f4      	asrs	r4, r6, #3
 802302a:	121b      	asrs	r3, r3, #8
 802302c:	00f6      	lsls	r6, r6, #3
 802302e:	b299      	uxth	r1, r3
 8023030:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8023034:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023038:	b2f6      	uxtb	r6, r6
 802303a:	43db      	mvns	r3, r3
 802303c:	b2d2      	uxtb	r2, r2
 802303e:	b2db      	uxtb	r3, r3
 8023040:	fb1c fc01 	smulbb	ip, ip, r1
 8023044:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023048:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802304c:	fb12 f201 	smulbb	r2, r2, r1
 8023050:	fb05 c503 	mla	r5, r5, r3, ip
 8023054:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8023058:	b2ff      	uxtb	r7, r7
 802305a:	fb06 2203 	mla	r2, r6, r3, r2
 802305e:	b2ad      	uxth	r5, r5
 8023060:	fb17 f701 	smulbb	r7, r7, r1
 8023064:	b292      	uxth	r2, r2
 8023066:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802306a:	fb04 7403 	mla	r4, r4, r3, r7
 802306e:	f105 0c01 	add.w	ip, r5, #1
 8023072:	1c57      	adds	r7, r2, #1
 8023074:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023078:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802307c:	b2a4      	uxth	r4, r4
 802307e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023082:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023086:	433d      	orrs	r5, r7
 8023088:	1c67      	adds	r7, r4, #1
 802308a:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802308e:	0964      	lsrs	r4, r4, #5
 8023090:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8023094:	4325      	orrs	r5, r4
 8023096:	8005      	strh	r5, [r0, #0]
 8023098:	e7bd      	b.n	8023016 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802309a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802309c:	4418      	add	r0, r3
 802309e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80230a0:	4499      	add	r9, r3
 80230a2:	e795      	b.n	8022fd0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 80230a4:	4b05      	ldr	r3, [pc, #20]	; (80230bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80230a6:	6818      	ldr	r0, [r3, #0]
 80230a8:	6803      	ldr	r3, [r0, #0]
 80230aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80230ac:	4798      	blx	r3
 80230ae:	e770      	b.n	8022f92 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 80230b0:	0803295b 	.word	0x0803295b
 80230b4:	080330b3 	.word	0x080330b3
 80230b8:	08032a5d 	.word	0x08032a5d
 80230bc:	200097a8 	.word	0x200097a8
 80230c0:	200097a2 	.word	0x200097a2

080230c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80230c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230c8:	4614      	mov	r4, r2
 80230ca:	880a      	ldrh	r2, [r1, #0]
 80230cc:	b087      	sub	sp, #28
 80230ce:	2a02      	cmp	r2, #2
 80230d0:	4680      	mov	r8, r0
 80230d2:	460d      	mov	r5, r1
 80230d4:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80230d8:	d006      	beq.n	80230e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80230da:	4b63      	ldr	r3, [pc, #396]	; (8023268 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 80230dc:	4a63      	ldr	r2, [pc, #396]	; (802326c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80230de:	4864      	ldr	r0, [pc, #400]	; (8023270 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 80230e0:	f240 11e1 	movw	r1, #481	; 0x1e1
 80230e4:	f00a feb4 	bl	802de50 <__assert_func>
 80230e8:	2e00      	cmp	r6, #0
 80230ea:	f000 80b9 	beq.w	8023260 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 80230ee:	6820      	ldr	r0, [r4, #0]
 80230f0:	6861      	ldr	r1, [r4, #4]
 80230f2:	af02      	add	r7, sp, #8
 80230f4:	c703      	stmia	r7!, {r0, r1}
 80230f6:	6818      	ldr	r0, [r3, #0]
 80230f8:	6859      	ldr	r1, [r3, #4]
 80230fa:	af04      	add	r7, sp, #16
 80230fc:	c703      	stmia	r7!, {r0, r1}
 80230fe:	a802      	add	r0, sp, #8
 8023100:	f7f8 fdce 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023104:	4621      	mov	r1, r4
 8023106:	a804      	add	r0, sp, #16
 8023108:	f7f8 fe0e 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802310c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023110:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023114:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8023118:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 802311c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8023120:	eb08 0401 	add.w	r4, r8, r1
 8023124:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023128:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802312c:	440a      	add	r2, r1
 802312e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023132:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023136:	4413      	add	r3, r2
 8023138:	f8ad 3012 	strh.w	r3, [sp, #18]
 802313c:	4b4d      	ldr	r3, [pc, #308]	; (8023274 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802313e:	6818      	ldr	r0, [r3, #0]
 8023140:	6803      	ldr	r3, [r0, #0]
 8023142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023144:	4798      	blx	r3
 8023146:	4b4c      	ldr	r3, [pc, #304]	; (8023278 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8023148:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802314c:	881a      	ldrh	r2, [r3, #0]
 802314e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8023152:	2eff      	cmp	r6, #255	; 0xff
 8023154:	fb02 c101 	mla	r1, r2, r1, ip
 8023158:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802315c:	fb02 f207 	mul.w	r2, r2, r7
 8023160:	f105 0104 	add.w	r1, r5, #4
 8023164:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8023168:	461d      	mov	r5, r3
 802316a:	d05a      	beq.n	8023222 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 802316c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8023170:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023174:	b2b6      	uxth	r6, r6
 8023176:	fa1f fe8e 	uxth.w	lr, lr
 802317a:	9301      	str	r3, [sp, #4]
 802317c:	4282      	cmp	r2, r0
 802317e:	d96a      	bls.n	8023256 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8023180:	eb00 0b0a 	add.w	fp, r0, sl
 8023184:	4583      	cmp	fp, r0
 8023186:	d940      	bls.n	802320a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8023188:	f814 3b01 	ldrb.w	r3, [r4], #1
 802318c:	8805      	ldrh	r5, [r0, #0]
 802318e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023192:	122f      	asrs	r7, r5, #8
 8023194:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023198:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802319c:	fb17 f70e 	smulbb	r7, r7, lr
 80231a0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80231a4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80231a8:	00ed      	lsls	r5, r5, #3
 80231aa:	fb0c 7c06 	mla	ip, ip, r6, r7
 80231ae:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80231b2:	10df      	asrs	r7, r3, #3
 80231b4:	b2ed      	uxtb	r5, r5
 80231b6:	00db      	lsls	r3, r3, #3
 80231b8:	fa1f fc8c 	uxth.w	ip, ip
 80231bc:	fb19 f90e 	smulbb	r9, r9, lr
 80231c0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80231c4:	b2db      	uxtb	r3, r3
 80231c6:	fb15 f50e 	smulbb	r5, r5, lr
 80231ca:	fb07 9706 	mla	r7, r7, r6, r9
 80231ce:	fb03 5306 	mla	r3, r3, r6, r5
 80231d2:	f10c 0901 	add.w	r9, ip, #1
 80231d6:	b29b      	uxth	r3, r3
 80231d8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80231dc:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80231e0:	f103 0c01 	add.w	ip, r3, #1
 80231e4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80231e8:	b2bf      	uxth	r7, r7
 80231ea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80231ee:	ea4c 0c09 	orr.w	ip, ip, r9
 80231f2:	f107 0901 	add.w	r9, r7, #1
 80231f6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80231fa:	097f      	lsrs	r7, r7, #5
 80231fc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023200:	ea4c 0c07 	orr.w	ip, ip, r7
 8023204:	f820 cb02 	strh.w	ip, [r0], #2
 8023208:	e7bc      	b.n	8023184 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 802320a:	9b01      	ldr	r3, [sp, #4]
 802320c:	881b      	ldrh	r3, [r3, #0]
 802320e:	eba3 0308 	sub.w	r3, r3, r8
 8023212:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023216:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802321a:	eba3 0308 	sub.w	r3, r3, r8
 802321e:	441c      	add	r4, r3
 8023220:	e7ac      	b.n	802317c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8023222:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023226:	4282      	cmp	r2, r0
 8023228:	d915      	bls.n	8023256 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 802322a:	eb00 060a 	add.w	r6, r0, sl
 802322e:	4286      	cmp	r6, r0
 8023230:	d906      	bls.n	8023240 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8023232:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023236:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802323a:	f820 3b02 	strh.w	r3, [r0], #2
 802323e:	e7f6      	b.n	802322e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8023240:	882b      	ldrh	r3, [r5, #0]
 8023242:	eba3 0308 	sub.w	r3, r3, r8
 8023246:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802324a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802324e:	eba3 0308 	sub.w	r3, r3, r8
 8023252:	441c      	add	r4, r3
 8023254:	e7e7      	b.n	8023226 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 8023256:	4b07      	ldr	r3, [pc, #28]	; (8023274 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8023258:	6818      	ldr	r0, [r3, #0]
 802325a:	6803      	ldr	r3, [r0, #0]
 802325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802325e:	4798      	blx	r3
 8023260:	b007      	add	sp, #28
 8023262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023266:	bf00      	nop
 8023268:	0803288b 	.word	0x0803288b
 802326c:	08032f1d 	.word	0x08032f1d
 8023270:	08032a5d 	.word	0x08032a5d
 8023274:	200097a8 	.word	0x200097a8
 8023278:	200097a2 	.word	0x200097a2

0802327c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023280:	f8b1 9000 	ldrh.w	r9, [r1]
 8023284:	b091      	sub	sp, #68	; 0x44
 8023286:	f1b9 0f01 	cmp.w	r9, #1
 802328a:	4604      	mov	r4, r0
 802328c:	460f      	mov	r7, r1
 802328e:	4690      	mov	r8, r2
 8023290:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8023294:	d006      	beq.n	80232a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 8023296:	4b84      	ldr	r3, [pc, #528]	; (80234a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8023298:	4a84      	ldr	r2, [pc, #528]	; (80234ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 802329a:	4885      	ldr	r0, [pc, #532]	; (80234b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 802329c:	f240 212f 	movw	r1, #559	; 0x22f
 80232a0:	f00a fdd6 	bl	802de50 <__assert_func>
 80232a4:	2d00      	cmp	r5, #0
 80232a6:	d04f      	beq.n	8023348 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 80232a8:	6810      	ldr	r0, [r2, #0]
 80232aa:	6851      	ldr	r1, [r2, #4]
 80232ac:	f8df b208 	ldr.w	fp, [pc, #520]	; 80234b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 80232b0:	ae0c      	add	r6, sp, #48	; 0x30
 80232b2:	c603      	stmia	r6!, {r0, r1}
 80232b4:	6818      	ldr	r0, [r3, #0]
 80232b6:	6859      	ldr	r1, [r3, #4]
 80232b8:	ae0e      	add	r6, sp, #56	; 0x38
 80232ba:	c603      	stmia	r6!, {r0, r1}
 80232bc:	a80c      	add	r0, sp, #48	; 0x30
 80232be:	f7f8 fcef 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80232c2:	4641      	mov	r1, r8
 80232c4:	a80e      	add	r0, sp, #56	; 0x38
 80232c6:	f7f8 fd2f 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80232ca:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80232ce:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80232d2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80232d6:	f8db 0000 	ldr.w	r0, [fp]
 80232da:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80232de:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80232e2:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80234bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 80232e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80232ea:	440c      	add	r4, r1
 80232ec:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80232f0:	440a      	add	r2, r1
 80232f2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80232f6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80232fa:	4413      	add	r3, r2
 80232fc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023300:	6803      	ldr	r3, [r0, #0]
 8023302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023304:	4798      	blx	r3
 8023306:	f010 0f80 	tst.w	r0, #128	; 0x80
 802330a:	f8db 0000 	ldr.w	r0, [fp]
 802330e:	d01e      	beq.n	802334e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8023310:	2200      	movs	r2, #0
 8023312:	6801      	ldr	r1, [r0, #0]
 8023314:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023318:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802331c:	220b      	movs	r2, #11
 802331e:	9207      	str	r2, [sp, #28]
 8023320:	f8b8 2000 	ldrh.w	r2, [r8]
 8023324:	9504      	str	r5, [sp, #16]
 8023326:	e9cd 9205 	strd	r9, r2, [sp, #20]
 802332a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802332e:	9203      	str	r2, [sp, #12]
 8023330:	fa1f f28a 	uxth.w	r2, sl
 8023334:	9202      	str	r2, [sp, #8]
 8023336:	b2b6      	uxth	r6, r6
 8023338:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802333c:	9200      	str	r2, [sp, #0]
 802333e:	9601      	str	r6, [sp, #4]
 8023340:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8023342:	463a      	mov	r2, r7
 8023344:	4621      	mov	r1, r4
 8023346:	47a8      	blx	r5
 8023348:	b011      	add	sp, #68	; 0x44
 802334a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802334e:	6803      	ldr	r3, [r0, #0]
 8023350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023352:	4798      	blx	r3
 8023354:	f8b8 2000 	ldrh.w	r2, [r8]
 8023358:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802335c:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8023360:	2dff      	cmp	r5, #255	; 0xff
 8023362:	fb02 1303 	mla	r3, r2, r3, r1
 8023366:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802336a:	ea4f 0946 	mov.w	r9, r6, lsl #1
 802336e:	fb0a fa02 	mul.w	sl, sl, r2
 8023372:	d062      	beq.n	802343a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8023374:	ea6f 0c05 	mvn.w	ip, r5
 8023378:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802337c:	930a      	str	r3, [sp, #40]	; 0x28
 802337e:	b2ad      	uxth	r5, r5
 8023380:	fa5f fc8c 	uxtb.w	ip, ip
 8023384:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8023388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802338a:	4298      	cmp	r0, r3
 802338c:	f080 8085 	bcs.w	802349a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8023390:	eb00 0b09 	add.w	fp, r0, r9
 8023394:	4558      	cmp	r0, fp
 8023396:	d246      	bcs.n	8023426 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023398:	f814 eb01 	ldrb.w	lr, [r4], #1
 802339c:	2303      	movs	r3, #3
 802339e:	2204      	movs	r2, #4
 80233a0:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80233a4:	eb07 0a0e 	add.w	sl, r7, lr
 80233a8:	8803      	ldrh	r3, [r0, #0]
 80233aa:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80233ae:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80233b2:	1219      	asrs	r1, r3, #8
 80233b4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80233b8:	fb18 f805 	smulbb	r8, r8, r5
 80233bc:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80233c0:	10da      	asrs	r2, r3, #3
 80233c2:	fb01 810c 	mla	r1, r1, ip, r8
 80233c6:	00db      	lsls	r3, r3, #3
 80233c8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80233cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80233d0:	b2db      	uxtb	r3, r3
 80233d2:	fb18 f805 	smulbb	r8, r8, r5
 80233d6:	fb1e fe05 	smulbb	lr, lr, r5
 80233da:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80233de:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80233e2:	b289      	uxth	r1, r1
 80233e4:	fb02 820c 	mla	r2, r2, ip, r8
 80233e8:	fb03 e30c 	mla	r3, r3, ip, lr
 80233ec:	b292      	uxth	r2, r2
 80233ee:	b29b      	uxth	r3, r3
 80233f0:	f101 0801 	add.w	r8, r1, #1
 80233f4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80233f8:	f103 0e01 	add.w	lr, r3, #1
 80233fc:	f102 0801 	add.w	r8, r2, #1
 8023400:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023404:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8023408:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802340c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023410:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8023414:	ea4e 0101 	orr.w	r1, lr, r1
 8023418:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802341c:	ea41 0108 	orr.w	r1, r1, r8
 8023420:	f820 1b02 	strh.w	r1, [r0], #2
 8023424:	e7b6      	b.n	8023394 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8023426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023428:	881b      	ldrh	r3, [r3, #0]
 802342a:	1b9b      	subs	r3, r3, r6
 802342c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023430:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023434:	1b9b      	subs	r3, r3, r6
 8023436:	441c      	add	r4, r3
 8023438:	e7a6      	b.n	8023388 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 802343a:	491e      	ldr	r1, [pc, #120]	; (80234b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 802343c:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8023440:	2203      	movs	r2, #3
 8023442:	2504      	movs	r5, #4
 8023444:	4550      	cmp	r0, sl
 8023446:	d228      	bcs.n	802349a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8023448:	eb00 0c09 	add.w	ip, r0, r9
 802344c:	4560      	cmp	r0, ip
 802344e:	4623      	mov	r3, r4
 8023450:	d219      	bcs.n	8023486 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023452:	f893 e000 	ldrb.w	lr, [r3]
 8023456:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 802345a:	eb07 0b0e 	add.w	fp, r7, lr
 802345e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023462:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8023466:	f89b b001 	ldrb.w	fp, [fp, #1]
 802346a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802346e:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8023472:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023476:	ea43 030b 	orr.w	r3, r3, fp
 802347a:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 802347e:	3401      	adds	r4, #1
 8023480:	f820 3b02 	strh.w	r3, [r0], #2
 8023484:	e7e2      	b.n	802344c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8023486:	f8b8 3000 	ldrh.w	r3, [r8]
 802348a:	1b9b      	subs	r3, r3, r6
 802348c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023490:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023494:	1b9b      	subs	r3, r3, r6
 8023496:	441c      	add	r4, r3
 8023498:	e7d4      	b.n	8023444 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 802349a:	4b07      	ldr	r3, [pc, #28]	; (80234b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 802349c:	6818      	ldr	r0, [r3, #0]
 802349e:	6803      	ldr	r3, [r0, #0]
 80234a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234a2:	4798      	blx	r3
 80234a4:	e750      	b.n	8023348 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 80234a6:	bf00      	nop
 80234a8:	080328d9 	.word	0x080328d9
 80234ac:	08032fa6 	.word	0x08032fa6
 80234b0:	08032a5d 	.word	0x08032a5d
 80234b4:	fffff800 	.word	0xfffff800
 80234b8:	200097a8 	.word	0x200097a8
 80234bc:	200097a2 	.word	0x200097a2

080234c0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80234c0:	b430      	push	{r4, r5}
 80234c2:	780d      	ldrb	r5, [r1, #0]
 80234c4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80234c8:	2d01      	cmp	r5, #1
 80234ca:	d00a      	beq.n	80234e2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80234cc:	d305      	bcc.n	80234da <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80234ce:	2d02      	cmp	r5, #2
 80234d0:	d10b      	bne.n	80234ea <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80234d2:	9402      	str	r4, [sp, #8]
 80234d4:	bc30      	pop	{r4, r5}
 80234d6:	f7ff bdf5 	b.w	80230c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80234da:	9402      	str	r4, [sp, #8]
 80234dc:	bc30      	pop	{r4, r5}
 80234de:	f7ff bcfb 	b.w	8022ed8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80234e2:	9402      	str	r4, [sp, #8]
 80234e4:	bc30      	pop	{r4, r5}
 80234e6:	f7ff bec9 	b.w	802327c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80234ea:	bc30      	pop	{r4, r5}
 80234ec:	4770      	bx	lr
	...

080234f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80234f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234f4:	4604      	mov	r4, r0
 80234f6:	b087      	sub	sp, #28
 80234f8:	6810      	ldr	r0, [r2, #0]
 80234fa:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80234fe:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8023738 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8023502:	460e      	mov	r6, r1
 8023504:	6851      	ldr	r1, [r2, #4]
 8023506:	ad02      	add	r5, sp, #8
 8023508:	c503      	stmia	r5!, {r0, r1}
 802350a:	6818      	ldr	r0, [r3, #0]
 802350c:	6859      	ldr	r1, [r3, #4]
 802350e:	ad04      	add	r5, sp, #16
 8023510:	4617      	mov	r7, r2
 8023512:	c503      	stmia	r5!, {r0, r1}
 8023514:	a802      	add	r0, sp, #8
 8023516:	f7f8 fbc3 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802351a:	4639      	mov	r1, r7
 802351c:	a804      	add	r0, sp, #16
 802351e:	f7f8 fc03 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023522:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023526:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802352a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802352e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8023532:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8023536:	fb11 2103 	smlabb	r1, r1, r3, r2
 802353a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802353e:	440e      	add	r6, r1
 8023540:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023544:	440a      	add	r2, r1
 8023546:	f8ad 2010 	strh.w	r2, [sp, #16]
 802354a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802354e:	4413      	add	r3, r2
 8023550:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023554:	4b77      	ldr	r3, [pc, #476]	; (8023734 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023556:	6818      	ldr	r0, [r3, #0]
 8023558:	6803      	ldr	r3, [r0, #0]
 802355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802355c:	4798      	blx	r3
 802355e:	f8b9 b000 	ldrh.w	fp, [r9]
 8023562:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023566:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802356a:	fb0b 2303 	mla	r3, fp, r3, r2
 802356e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023572:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023576:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802357a:	fb05 f50b 	mul.w	r5, r5, fp
 802357e:	9300      	str	r3, [sp, #0]
 8023580:	d069      	beq.n	8023656 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8023582:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8023586:	4558      	cmp	r0, fp
 8023588:	f080 80cc 	bcs.w	8023724 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802358c:	9b00      	ldr	r3, [sp, #0]
 802358e:	18c3      	adds	r3, r0, r3
 8023590:	9301      	str	r3, [sp, #4]
 8023592:	4631      	mov	r1, r6
 8023594:	9b01      	ldr	r3, [sp, #4]
 8023596:	4298      	cmp	r0, r3
 8023598:	d24f      	bcs.n	802363a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802359a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802359e:	2a00      	cmp	r2, #0
 80235a0:	d048      	beq.n	8023634 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80235a2:	fb0a f202 	mul.w	r2, sl, r2
 80235a6:	1c53      	adds	r3, r2, #1
 80235a8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80235ac:	121b      	asrs	r3, r3, #8
 80235ae:	d041      	beq.n	8023634 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80235b0:	8802      	ldrh	r2, [r0, #0]
 80235b2:	f8b4 c000 	ldrh.w	ip, [r4]
 80235b6:	b29e      	uxth	r6, r3
 80235b8:	1215      	asrs	r5, r2, #8
 80235ba:	43db      	mvns	r3, r3
 80235bc:	b2db      	uxtb	r3, r3
 80235be:	ea4f 272c 	mov.w	r7, ip, asr #8
 80235c2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80235c6:	fb15 f503 	smulbb	r5, r5, r3
 80235ca:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80235ce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80235d2:	00d2      	lsls	r2, r2, #3
 80235d4:	fb07 5706 	mla	r7, r7, r6, r5
 80235d8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80235dc:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80235e0:	b2d2      	uxtb	r2, r2
 80235e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80235e6:	b2bf      	uxth	r7, r7
 80235e8:	fb1e fe03 	smulbb	lr, lr, r3
 80235ec:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80235f0:	fa5f fc8c 	uxtb.w	ip, ip
 80235f4:	fb12 f203 	smulbb	r2, r2, r3
 80235f8:	fb05 e506 	mla	r5, r5, r6, lr
 80235fc:	fb0c 2c06 	mla	ip, ip, r6, r2
 8023600:	f107 0e01 	add.w	lr, r7, #1
 8023604:	fa1f fc8c 	uxth.w	ip, ip
 8023608:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 802360c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8023610:	f10c 0701 	add.w	r7, ip, #1
 8023614:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023618:	b2ad      	uxth	r5, r5
 802361a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802361e:	ea47 070e 	orr.w	r7, r7, lr
 8023622:	f105 0e01 	add.w	lr, r5, #1
 8023626:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802362a:	096d      	lsrs	r5, r5, #5
 802362c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023630:	432f      	orrs	r7, r5
 8023632:	8007      	strh	r7, [r0, #0]
 8023634:	3002      	adds	r0, #2
 8023636:	3402      	adds	r4, #2
 8023638:	e7ac      	b.n	8023594 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 802363a:	f8b9 3000 	ldrh.w	r3, [r9]
 802363e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023642:	eba3 0308 	sub.w	r3, r3, r8
 8023646:	eba6 0608 	sub.w	r6, r6, r8
 802364a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802364e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023652:	440e      	add	r6, r1
 8023654:	e797      	b.n	8023586 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8023656:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802365a:	42a8      	cmp	r0, r5
 802365c:	d262      	bcs.n	8023724 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802365e:	9b00      	ldr	r3, [sp, #0]
 8023660:	4631      	mov	r1, r6
 8023662:	eb00 0b03 	add.w	fp, r0, r3
 8023666:	4558      	cmp	r0, fp
 8023668:	d24e      	bcs.n	8023708 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 802366a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802366e:	b12b      	cbz	r3, 802367c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023670:	2bff      	cmp	r3, #255	; 0xff
 8023672:	f8b4 e000 	ldrh.w	lr, [r4]
 8023676:	d104      	bne.n	8023682 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8023678:	f8a0 e000 	strh.w	lr, [r0]
 802367c:	3002      	adds	r0, #2
 802367e:	3402      	adds	r4, #2
 8023680:	e7f1      	b.n	8023666 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8023682:	8802      	ldrh	r2, [r0, #0]
 8023684:	b29f      	uxth	r7, r3
 8023686:	1216      	asrs	r6, r2, #8
 8023688:	43db      	mvns	r3, r3
 802368a:	b2db      	uxtb	r3, r3
 802368c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023690:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023694:	fb16 f603 	smulbb	r6, r6, r3
 8023698:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 802369c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80236a0:	00d2      	lsls	r2, r2, #3
 80236a2:	fb0c 6c07 	mla	ip, ip, r7, r6
 80236a6:	b2d2      	uxtb	r2, r2
 80236a8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80236ac:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80236b0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80236b4:	fb1a fa03 	smulbb	sl, sl, r3
 80236b8:	fa1f fc8c 	uxth.w	ip, ip
 80236bc:	fb12 f303 	smulbb	r3, r2, r3
 80236c0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80236c4:	fa5f fe8e 	uxtb.w	lr, lr
 80236c8:	fb06 a607 	mla	r6, r6, r7, sl
 80236cc:	f10c 0201 	add.w	r2, ip, #1
 80236d0:	fb0e 3307 	mla	r3, lr, r7, r3
 80236d4:	b2b6      	uxth	r6, r6
 80236d6:	b29b      	uxth	r3, r3
 80236d8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80236dc:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 80236e0:	f106 0a01 	add.w	sl, r6, #1
 80236e4:	f103 0c01 	add.w	ip, r3, #1
 80236e8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80236ec:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80236f0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80236f4:	0976      	lsrs	r6, r6, #5
 80236f6:	ea4c 0c02 	orr.w	ip, ip, r2
 80236fa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80236fe:	ea4c 0c06 	orr.w	ip, ip, r6
 8023702:	f8a0 c000 	strh.w	ip, [r0]
 8023706:	e7b9      	b.n	802367c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023708:	f8b9 3000 	ldrh.w	r3, [r9]
 802370c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023710:	eba3 0308 	sub.w	r3, r3, r8
 8023714:	eba6 0608 	sub.w	r6, r6, r8
 8023718:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 802371c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023720:	440e      	add	r6, r1
 8023722:	e79a      	b.n	802365a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8023724:	4b03      	ldr	r3, [pc, #12]	; (8023734 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023726:	6818      	ldr	r0, [r3, #0]
 8023728:	6803      	ldr	r3, [r0, #0]
 802372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802372c:	4798      	blx	r3
 802372e:	b007      	add	sp, #28
 8023730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023734:	200097a8 	.word	0x200097a8
 8023738:	200097a2 	.word	0x200097a2

0802373c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 802373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023740:	b089      	sub	sp, #36	; 0x24
 8023742:	4682      	mov	sl, r0
 8023744:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8023748:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802374a:	460f      	mov	r7, r1
 802374c:	4691      	mov	r9, r2
 802374e:	4698      	mov	r8, r3
 8023750:	2e00      	cmp	r6, #0
 8023752:	d03d      	beq.n	80237d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023754:	4608      	mov	r0, r1
 8023756:	f7fc f863 	bl	801f820 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802375a:	4605      	mov	r5, r0
 802375c:	4638      	mov	r0, r7
 802375e:	f7fc f899 	bl	801f894 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023762:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023766:	4638      	mov	r0, r7
 8023768:	f8ad 9008 	strh.w	r9, [sp, #8]
 802376c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023770:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023774:	f7fc f95c 	bl	801fa30 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023778:	4605      	mov	r5, r0
 802377a:	4638      	mov	r0, r7
 802377c:	f7fc f98a 	bl	801fa94 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023780:	4681      	mov	r9, r0
 8023782:	4638      	mov	r0, r7
 8023784:	f7fc f9de 	bl	801fb44 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023788:	280b      	cmp	r0, #11
 802378a:	f200 816f 	bhi.w	8023a6c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 802378e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8023792:	00c3      	.short	0x00c3
 8023794:	000c00b4 	.word	0x000c00b4
 8023798:	016d016d 	.word	0x016d016d
 802379c:	016d016d 	.word	0x016d016d
 80237a0:	016d016d 	.word	0x016d016d
 80237a4:	016d016d 	.word	0x016d016d
 80237a8:	00bb      	.short	0x00bb
 80237aa:	4bb3      	ldr	r3, [pc, #716]	; (8023a78 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 80237ac:	6818      	ldr	r0, [r3, #0]
 80237ae:	6803      	ldr	r3, [r0, #0]
 80237b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80237b2:	4798      	blx	r3
 80237b4:	2eff      	cmp	r6, #255	; 0xff
 80237b6:	d121      	bne.n	80237fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80237b8:	0683      	lsls	r3, r0, #26
 80237ba:	d41f      	bmi.n	80237fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80237bc:	4638      	mov	r0, r7
 80237be:	f7fc f8fd 	bl	801f9bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80237c2:	b940      	cbnz	r0, 80237d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 80237c4:	4623      	mov	r3, r4
 80237c6:	aa02      	add	r2, sp, #8
 80237c8:	4629      	mov	r1, r5
 80237ca:	4650      	mov	r0, sl
 80237cc:	f7ff f9e4 	bl	8022b98 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80237d0:	b009      	add	sp, #36	; 0x24
 80237d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237d6:	f10d 0818 	add.w	r8, sp, #24
 80237da:	4639      	mov	r1, r7
 80237dc:	4640      	mov	r0, r8
 80237de:	f7fc f893 	bl	801f908 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80237e2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80237e6:	af04      	add	r7, sp, #16
 80237e8:	e887 0003 	stmia.w	r7, {r0, r1}
 80237ec:	4638      	mov	r0, r7
 80237ee:	4621      	mov	r1, r4
 80237f0:	f7f3 fe42 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 80237f4:	4638      	mov	r0, r7
 80237f6:	f7f3 fe82 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80237fa:	b130      	cbz	r0, 802380a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 80237fc:	4633      	mov	r3, r6
 80237fe:	4622      	mov	r2, r4
 8023800:	a902      	add	r1, sp, #8
 8023802:	4628      	mov	r0, r5
 8023804:	f7ff f8e2 	bl	80229cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023808:	e7e2      	b.n	80237d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802380a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802380e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023812:	4293      	cmp	r3, r2
 8023814:	dd12      	ble.n	802383c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8023816:	1a9b      	subs	r3, r3, r2
 8023818:	f9b4 0000 	ldrsh.w	r0, [r4]
 802381c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023820:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023824:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023828:	f8ad 101c 	strh.w	r1, [sp, #28]
 802382c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023830:	4642      	mov	r2, r8
 8023832:	4633      	mov	r3, r6
 8023834:	a902      	add	r1, sp, #8
 8023836:	4628      	mov	r0, r5
 8023838:	f7ff f8c8 	bl	80229cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802383c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023840:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023844:	4293      	cmp	r3, r2
 8023846:	dd12      	ble.n	802386e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8023848:	1a9b      	subs	r3, r3, r2
 802384a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802384e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023852:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023856:	f8ad 001a 	strh.w	r0, [sp, #26]
 802385a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802385e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023862:	23ff      	movs	r3, #255	; 0xff
 8023864:	4642      	mov	r2, r8
 8023866:	a902      	add	r1, sp, #8
 8023868:	4628      	mov	r0, r5
 802386a:	f7ff f8af 	bl	80229cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802386e:	463b      	mov	r3, r7
 8023870:	aa02      	add	r2, sp, #8
 8023872:	4629      	mov	r1, r5
 8023874:	4650      	mov	r0, sl
 8023876:	f7ff f98f 	bl	8022b98 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802387a:	88a2      	ldrh	r2, [r4, #4]
 802387c:	8823      	ldrh	r3, [r4, #0]
 802387e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023882:	4413      	add	r3, r2
 8023884:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023888:	440a      	add	r2, r1
 802388a:	b29b      	uxth	r3, r3
 802388c:	b292      	uxth	r2, r2
 802388e:	b211      	sxth	r1, r2
 8023890:	b218      	sxth	r0, r3
 8023892:	4288      	cmp	r0, r1
 8023894:	dd12      	ble.n	80238bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8023896:	1a9b      	subs	r3, r3, r2
 8023898:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 802389c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 80238a0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80238a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80238a8:	f8ad 001e 	strh.w	r0, [sp, #30]
 80238ac:	23ff      	movs	r3, #255	; 0xff
 80238ae:	4642      	mov	r2, r8
 80238b0:	a902      	add	r1, sp, #8
 80238b2:	4628      	mov	r0, r5
 80238b4:	f8ad 601a 	strh.w	r6, [sp, #26]
 80238b8:	f7ff f888 	bl	80229cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80238bc:	88e2      	ldrh	r2, [r4, #6]
 80238be:	8863      	ldrh	r3, [r4, #2]
 80238c0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80238c4:	4413      	add	r3, r2
 80238c6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80238ca:	440a      	add	r2, r1
 80238cc:	b29b      	uxth	r3, r3
 80238ce:	b292      	uxth	r2, r2
 80238d0:	b211      	sxth	r1, r2
 80238d2:	b218      	sxth	r0, r3
 80238d4:	4288      	cmp	r0, r1
 80238d6:	f77f af7b 	ble.w	80237d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80238da:	1a9b      	subs	r3, r3, r2
 80238dc:	f9b4 6000 	ldrsh.w	r6, [r4]
 80238e0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80238e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80238e8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80238ec:	f8ad 101a 	strh.w	r1, [sp, #26]
 80238f0:	f8ad 001c 	strh.w	r0, [sp, #28]
 80238f4:	23ff      	movs	r3, #255	; 0xff
 80238f6:	4642      	mov	r2, r8
 80238f8:	e782      	b.n	8023800 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 80238fa:	4633      	mov	r3, r6
 80238fc:	4622      	mov	r2, r4
 80238fe:	a902      	add	r1, sp, #8
 8023900:	4628      	mov	r0, r5
 8023902:	f7ff f9b9 	bl	8022c78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8023906:	e763      	b.n	80237d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023908:	9600      	str	r6, [sp, #0]
 802390a:	4623      	mov	r3, r4
 802390c:	aa02      	add	r2, sp, #8
 802390e:	4649      	mov	r1, r9
 8023910:	4628      	mov	r0, r5
 8023912:	f7ff fdd5 	bl	80234c0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023916:	e75b      	b.n	80237d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023918:	4638      	mov	r0, r7
 802391a:	f7fc f84f 	bl	801f9bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802391e:	b950      	cbnz	r0, 8023936 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8023920:	e9cd 6000 	strd	r6, r0, [sp]
 8023924:	f8da 3000 	ldr.w	r3, [sl]
 8023928:	aa02      	add	r2, sp, #8
 802392a:	68de      	ldr	r6, [r3, #12]
 802392c:	4629      	mov	r1, r5
 802392e:	4623      	mov	r3, r4
 8023930:	4650      	mov	r0, sl
 8023932:	47b0      	blx	r6
 8023934:	e74c      	b.n	80237d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023936:	f10d 0818 	add.w	r8, sp, #24
 802393a:	4639      	mov	r1, r7
 802393c:	4640      	mov	r0, r8
 802393e:	f7fb ffe3 	bl	801f908 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023942:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023946:	af04      	add	r7, sp, #16
 8023948:	e887 0003 	stmia.w	r7, {r0, r1}
 802394c:	4638      	mov	r0, r7
 802394e:	4621      	mov	r1, r4
 8023950:	f7f3 fd92 	bl	8017478 <_ZN8touchgfx4RectaNERKS0_>
 8023954:	4638      	mov	r0, r7
 8023956:	f7f3 fdd2 	bl	80174fe <_ZNK8touchgfx4Rect7isEmptyEv>
 802395a:	b138      	cbz	r0, 802396c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 802395c:	9600      	str	r6, [sp, #0]
 802395e:	4623      	mov	r3, r4
 8023960:	aa02      	add	r2, sp, #8
 8023962:	4649      	mov	r1, r9
 8023964:	4628      	mov	r0, r5
 8023966:	f7ff fdc3 	bl	80234f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802396a:	e731      	b.n	80237d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802396c:	e9cd 6000 	strd	r6, r0, [sp]
 8023970:	f8da 3000 	ldr.w	r3, [sl]
 8023974:	aa02      	add	r2, sp, #8
 8023976:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 802397a:	4629      	mov	r1, r5
 802397c:	463b      	mov	r3, r7
 802397e:	4650      	mov	r0, sl
 8023980:	47d8      	blx	fp
 8023982:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023986:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802398a:	4293      	cmp	r3, r2
 802398c:	dd13      	ble.n	80239b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 802398e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023992:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023996:	f8ad 0018 	strh.w	r0, [sp, #24]
 802399a:	1a9b      	subs	r3, r3, r2
 802399c:	f8ad 201a 	strh.w	r2, [sp, #26]
 80239a0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80239a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80239a8:	9600      	str	r6, [sp, #0]
 80239aa:	4643      	mov	r3, r8
 80239ac:	aa02      	add	r2, sp, #8
 80239ae:	4649      	mov	r1, r9
 80239b0:	4628      	mov	r0, r5
 80239b2:	f7ff fd9d 	bl	80234f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80239b6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80239ba:	f9b4 2000 	ldrsh.w	r2, [r4]
 80239be:	4293      	cmp	r3, r2
 80239c0:	dd13      	ble.n	80239ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 80239c2:	1a9b      	subs	r3, r3, r2
 80239c4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80239c8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80239cc:	f8ad 2018 	strh.w	r2, [sp, #24]
 80239d0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80239d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80239d8:	f8ad 101e 	strh.w	r1, [sp, #30]
 80239dc:	9600      	str	r6, [sp, #0]
 80239de:	4643      	mov	r3, r8
 80239e0:	aa02      	add	r2, sp, #8
 80239e2:	4649      	mov	r1, r9
 80239e4:	4628      	mov	r0, r5
 80239e6:	f7ff fd83 	bl	80234f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80239ea:	88a2      	ldrh	r2, [r4, #4]
 80239ec:	8823      	ldrh	r3, [r4, #0]
 80239ee:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80239f2:	4413      	add	r3, r2
 80239f4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80239f8:	440a      	add	r2, r1
 80239fa:	b29b      	uxth	r3, r3
 80239fc:	b292      	uxth	r2, r2
 80239fe:	b211      	sxth	r1, r2
 8023a00:	b218      	sxth	r0, r3
 8023a02:	4288      	cmp	r0, r1
 8023a04:	dd13      	ble.n	8023a2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8023a06:	1a9b      	subs	r3, r3, r2
 8023a08:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023a0c:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023a10:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023a14:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023a18:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023a1c:	9600      	str	r6, [sp, #0]
 8023a1e:	4643      	mov	r3, r8
 8023a20:	aa02      	add	r2, sp, #8
 8023a22:	4649      	mov	r1, r9
 8023a24:	4628      	mov	r0, r5
 8023a26:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023a2a:	f7ff fd61 	bl	80234f0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023a2e:	88e2      	ldrh	r2, [r4, #6]
 8023a30:	8863      	ldrh	r3, [r4, #2]
 8023a32:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023a36:	4413      	add	r3, r2
 8023a38:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023a3c:	440a      	add	r2, r1
 8023a3e:	b29b      	uxth	r3, r3
 8023a40:	b292      	uxth	r2, r2
 8023a42:	b211      	sxth	r1, r2
 8023a44:	b218      	sxth	r0, r3
 8023a46:	4288      	cmp	r0, r1
 8023a48:	f77f aec2 	ble.w	80237d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023a4c:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023a50:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023a54:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023a58:	1a9b      	subs	r3, r3, r2
 8023a5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023a5e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023a62:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023a66:	9600      	str	r6, [sp, #0]
 8023a68:	4643      	mov	r3, r8
 8023a6a:	e779      	b.n	8023960 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8023a6c:	4b03      	ldr	r3, [pc, #12]	; (8023a7c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8023a6e:	4a04      	ldr	r2, [pc, #16]	; (8023a80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8023a70:	4804      	ldr	r0, [pc, #16]	; (8023a84 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8023a72:	21b4      	movs	r1, #180	; 0xb4
 8023a74:	f00a f9ec 	bl	802de50 <__assert_func>
 8023a78:	200097a8 	.word	0x200097a8
 8023a7c:	08032927 	.word	0x08032927
 8023a80:	0803302f 	.word	0x0803302f
 8023a84:	08032a5d 	.word	0x08032a5d

08023a88 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023a88:	b508      	push	{r3, lr}
 8023a8a:	b180      	cbz	r0, 8023aae <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8023a8c:	2902      	cmp	r1, #2
 8023a8e:	d014      	beq.n	8023aba <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8023a90:	2903      	cmp	r1, #3
 8023a92:	d01d      	beq.n	8023ad0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023a94:	2901      	cmp	r1, #1
 8023a96:	d101      	bne.n	8023a9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023a98:	2001      	movs	r0, #1
 8023a9a:	bd08      	pop	{r3, pc}
 8023a9c:	4b0e      	ldr	r3, [pc, #56]	; (8023ad8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023a9e:	8818      	ldrh	r0, [r3, #0]
 8023aa0:	b990      	cbnz	r0, 8023ac8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023aa2:	4b0e      	ldr	r3, [pc, #56]	; (8023adc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8023aa4:	4a0e      	ldr	r2, [pc, #56]	; (8023ae0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8023aa6:	480f      	ldr	r0, [pc, #60]	; (8023ae4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8023aa8:	2150      	movs	r1, #80	; 0x50
 8023aaa:	f00a f9d1 	bl	802de50 <__assert_func>
 8023aae:	2902      	cmp	r1, #2
 8023ab0:	d00e      	beq.n	8023ad0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8023ab2:	2903      	cmp	r1, #3
 8023ab4:	d0f2      	beq.n	8023a9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023ab6:	2901      	cmp	r1, #1
 8023ab8:	d1ee      	bne.n	8023a98 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8023aba:	4b07      	ldr	r3, [pc, #28]	; (8023ad8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023abc:	8818      	ldrh	r0, [r3, #0]
 8023abe:	2800      	cmp	r0, #0
 8023ac0:	d0ef      	beq.n	8023aa2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8023ac2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023ac6:	e7e8      	b.n	8023a9a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023ac8:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023acc:	4240      	negs	r0, r0
 8023ace:	e7e4      	b.n	8023a9a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8023ad4:	e7e1      	b.n	8023a9a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023ad6:	bf00      	nop
 8023ad8:	200097a2 	.word	0x200097a2
 8023adc:	08032bb3 	.word	0x08032bb3
 8023ae0:	080331ac 	.word	0x080331ac
 8023ae4:	08032bf5 	.word	0x08032bf5

08023ae8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023ae8:	b508      	push	{r3, lr}
 8023aea:	b180      	cbz	r0, 8023b0e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8023aec:	2902      	cmp	r1, #2
 8023aee:	d014      	beq.n	8023b1a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8023af0:	2903      	cmp	r1, #3
 8023af2:	d018      	beq.n	8023b26 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023af4:	2901      	cmp	r1, #1
 8023af6:	d001      	beq.n	8023afc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023af8:	2001      	movs	r0, #1
 8023afa:	e013      	b.n	8023b24 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023afc:	4b0e      	ldr	r3, [pc, #56]	; (8023b38 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023afe:	8818      	ldrh	r0, [r3, #0]
 8023b00:	b970      	cbnz	r0, 8023b20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8023b02:	4b0e      	ldr	r3, [pc, #56]	; (8023b3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8023b04:	4a0e      	ldr	r2, [pc, #56]	; (8023b40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8023b06:	480f      	ldr	r0, [pc, #60]	; (8023b44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8023b08:	2150      	movs	r1, #80	; 0x50
 8023b0a:	f00a f9a1 	bl	802de50 <__assert_func>
 8023b0e:	2902      	cmp	r1, #2
 8023b10:	d009      	beq.n	8023b26 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8023b12:	2903      	cmp	r1, #3
 8023b14:	d0f0      	beq.n	8023af8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8023b16:	2901      	cmp	r1, #1
 8023b18:	d1f0      	bne.n	8023afc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8023b1e:	e001      	b.n	8023b24 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023b20:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023b24:	bd08      	pop	{r3, pc}
 8023b26:	4b04      	ldr	r3, [pc, #16]	; (8023b38 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023b28:	8818      	ldrh	r0, [r3, #0]
 8023b2a:	2800      	cmp	r0, #0
 8023b2c:	d0e9      	beq.n	8023b02 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8023b2e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023b32:	4240      	negs	r0, r0
 8023b34:	e7f6      	b.n	8023b24 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023b36:	bf00      	nop
 8023b38:	200097a2 	.word	0x200097a2
 8023b3c:	08032bb3 	.word	0x08032bb3
 8023b40:	080331ac 	.word	0x080331ac
 8023b44:	08032bf5 	.word	0x08032bf5

08023b48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b4c:	b099      	sub	sp, #100	; 0x64
 8023b4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8023b50:	a914      	add	r1, sp, #80	; 0x50
 8023b52:	e881 000c 	stmia.w	r1, {r2, r3}
 8023b56:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8023b5a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8023b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8023b60:	f891 900d 	ldrb.w	r9, [r1, #13]
 8023b64:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8023b68:	9311      	str	r3, [sp, #68]	; 0x44
 8023b6a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8023b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8023b70:	7988      	ldrb	r0, [r1, #6]
 8023b72:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8023b76:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8023b7a:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8023b7e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8023b82:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8023b86:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8023b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023b8e:	4303      	orrs	r3, r0
 8023b90:	9309      	str	r3, [sp, #36]	; 0x24
 8023b92:	f000 81a1 	beq.w	8023ed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023b96:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8023b9a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8023b9e:	f891 9007 	ldrb.w	r9, [r1, #7]
 8023ba2:	ea59 0903 	orrs.w	r9, r9, r3
 8023ba6:	f000 8197 	beq.w	8023ed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023baa:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023bae:	b29b      	uxth	r3, r3
 8023bb0:	2e00      	cmp	r6, #0
 8023bb2:	f000 813a 	beq.w	8023e2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8023bb6:	1af6      	subs	r6, r6, r3
 8023bb8:	b2b6      	uxth	r6, r6
 8023bba:	0433      	lsls	r3, r6, #16
 8023bbc:	d502      	bpl.n	8023bc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023bbe:	1bad      	subs	r5, r5, r6
 8023bc0:	b22d      	sxth	r5, r5
 8023bc2:	2600      	movs	r6, #0
 8023bc4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023bc8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8023bcc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8023bd0:	428d      	cmp	r5, r1
 8023bd2:	b28b      	uxth	r3, r1
 8023bd4:	bfbf      	itttt	lt
 8023bd6:	18f6      	addlt	r6, r6, r3
 8023bd8:	1b75      	sublt	r5, r6, r5
 8023bda:	b2ae      	uxthlt	r6, r5
 8023bdc:	460d      	movlt	r5, r1
 8023bde:	8891      	ldrh	r1, [r2, #4]
 8023be0:	440b      	add	r3, r1
 8023be2:	b21b      	sxth	r3, r3
 8023be4:	9310      	str	r3, [sp, #64]	; 0x40
 8023be6:	88d3      	ldrh	r3, [r2, #6]
 8023be8:	8852      	ldrh	r2, [r2, #2]
 8023bea:	4413      	add	r3, r2
 8023bec:	b21b      	sxth	r3, r3
 8023bee:	930f      	str	r3, [sp, #60]	; 0x3c
 8023bf0:	4bbc      	ldr	r3, [pc, #752]	; (8023ee4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8023bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023bf4:	f893 b000 	ldrb.w	fp, [r3]
 8023bf8:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023bfc:	f1dc 0300 	rsbs	r3, ip, #0
 8023c00:	eb43 030c 	adc.w	r3, r3, ip
 8023c04:	930e      	str	r3, [sp, #56]	; 0x38
 8023c06:	4629      	mov	r1, r5
 8023c08:	4653      	mov	r3, sl
 8023c0a:	a814      	add	r0, sp, #80	; 0x50
 8023c0c:	f7f7 fecd 	bl	801b9aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023c10:	4629      	mov	r1, r5
 8023c12:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8023c16:	4653      	mov	r3, sl
 8023c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c1a:	a814      	add	r0, sp, #80	; 0x50
 8023c1c:	f7f7 fedd 	bl	801b9da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023c20:	a918      	add	r1, sp, #96	; 0x60
 8023c22:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023c26:	a817      	add	r0, sp, #92	; 0x5c
 8023c28:	f7f7 fff8 	bl	801bc1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023c2c:	f1ba 0f00 	cmp.w	sl, #0
 8023c30:	f040 80fe 	bne.w	8023e30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8023c34:	f1bb 0f01 	cmp.w	fp, #1
 8023c38:	f040 8102 	bne.w	8023e40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8023c3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023c3e:	b153      	cbz	r3, 8023c56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8023c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023c42:	2408      	movs	r4, #8
 8023c44:	fb94 f3f8 	sdiv	r3, r4, r8
 8023c48:	1e5c      	subs	r4, r3, #1
 8023c4a:	4414      	add	r4, r2
 8023c4c:	fb94 f4f3 	sdiv	r4, r4, r3
 8023c50:	fb14 f403 	smulbb	r4, r4, r3
 8023c54:	b2a4      	uxth	r4, r4
 8023c56:	b906      	cbnz	r6, 8023c5a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8023c58:	b16f      	cbz	r7, 8023c76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 8023c5a:	fb07 6304 	mla	r3, r7, r4, r6
 8023c5e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023c60:	fb08 f303 	mul.w	r3, r8, r3
 8023c64:	463a      	mov	r2, r7
 8023c66:	f003 0707 	and.w	r7, r3, #7
 8023c6a:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8023c6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8023c70:	eba9 0302 	sub.w	r3, r9, r2
 8023c74:	930d      	str	r3, [sp, #52]	; 0x34
 8023c76:	4651      	mov	r1, sl
 8023c78:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023c7a:	f7ff ff05 	bl	8023a88 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8023c7e:	4651      	mov	r1, sl
 8023c80:	4681      	mov	r9, r0
 8023c82:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023c84:	f7ff ff30 	bl	8023ae8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8023c88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023c8c:	eba3 0a02 	sub.w	sl, r3, r2
 8023c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023c92:	459a      	cmp	sl, r3
 8023c94:	bfa8      	it	ge
 8023c96:	469a      	movge	sl, r3
 8023c98:	f1ba 0f00 	cmp.w	sl, #0
 8023c9c:	4683      	mov	fp, r0
 8023c9e:	f340 811b 	ble.w	8023ed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023ca2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023ca4:	1bad      	subs	r5, r5, r6
 8023ca6:	1b5d      	subs	r5, r3, r5
 8023ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023caa:	429d      	cmp	r5, r3
 8023cac:	bfd4      	ite	le
 8023cae:	ebc6 0605 	rsble	r6, r6, r5
 8023cb2:	ebc6 0603 	rsbgt	r6, r6, r3
 8023cb6:	2e00      	cmp	r6, #0
 8023cb8:	f340 810e 	ble.w	8023ed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023cbc:	1ba4      	subs	r4, r4, r6
 8023cbe:	fb08 f304 	mul.w	r3, r8, r4
 8023cc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8023cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023cc6:	2b00      	cmp	r3, #0
 8023cc8:	f040 8114 	bne.w	8023ef4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8023ccc:	4b86      	ldr	r3, [pc, #536]	; (8023ee8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8023cce:	6818      	ldr	r0, [r3, #0]
 8023cd0:	6803      	ldr	r3, [r0, #0]
 8023cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023cd4:	4798      	blx	r3
 8023cd6:	2301      	movs	r3, #1
 8023cd8:	fa03 f308 	lsl.w	r3, r3, r8
 8023cdc:	4a83      	ldr	r2, [pc, #524]	; (8023eec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8023cde:	3b01      	subs	r3, #1
 8023ce0:	b2db      	uxtb	r3, r3
 8023ce2:	8811      	ldrh	r1, [r2, #0]
 8023ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8023ce6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8023cea:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8023cee:	fb01 2303 	mla	r3, r1, r3, r2
 8023cf2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8023cf8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023cfa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023cfe:	9313      	str	r3, [sp, #76]	; 0x4c
 8023d00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d02:	0a19      	lsrs	r1, r3, #8
 8023d04:	b2cb      	uxtb	r3, r1
 8023d06:	9312      	str	r3, [sp, #72]	; 0x48
 8023d08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d0a:	b2db      	uxtb	r3, r3
 8023d0c:	9311      	str	r3, [sp, #68]	; 0x44
 8023d0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023d10:	095a      	lsrs	r2, r3, #5
 8023d12:	4b77      	ldr	r3, [pc, #476]	; (8023ef0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023d14:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023d18:	400b      	ands	r3, r1
 8023d1a:	4313      	orrs	r3, r2
 8023d1c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023d1e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023d22:	4313      	orrs	r3, r2
 8023d24:	b29b      	uxth	r3, r3
 8023d26:	9310      	str	r3, [sp, #64]	; 0x40
 8023d28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d2a:	781a      	ldrb	r2, [r3, #0]
 8023d2c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8023d30:	413a      	asrs	r2, r7
 8023d32:	fb06 b919 	mls	r9, r6, r9, fp
 8023d36:	fb03 fb06 	mul.w	fp, r3, r6
 8023d3a:	b2d2      	uxtb	r2, r2
 8023d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8023d3e:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8023d42:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8023d46:	f0c0 80ea 	bcc.w	8023f1e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 8023d4a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8023d4e:	46b6      	mov	lr, r6
 8023d50:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8023d54:	f0c0 80d2 	bcc.w	8023efc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8023d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023d5a:	4013      	ands	r3, r2
 8023d5c:	d055      	beq.n	8023e0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8023d5e:	20ff      	movs	r0, #255	; 0xff
 8023d60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023d62:	fb90 f1f1 	sdiv	r1, r0, r1
 8023d66:	434b      	muls	r3, r1
 8023d68:	2bfe      	cmp	r3, #254	; 0xfe
 8023d6a:	dd03      	ble.n	8023d74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8023d6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023d6e:	4281      	cmp	r1, r0
 8023d70:	f000 80c2 	beq.w	8023ef8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8023d74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023d76:	f8bc 4000 	ldrh.w	r4, [ip]
 8023d7a:	fb11 f303 	smulbb	r3, r1, r3
 8023d7e:	b29b      	uxth	r3, r3
 8023d80:	1c59      	adds	r1, r3, #1
 8023d82:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023d86:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023d8a:	b29d      	uxth	r5, r3
 8023d8c:	43db      	mvns	r3, r3
 8023d8e:	b2db      	uxtb	r3, r3
 8023d90:	9309      	str	r3, [sp, #36]	; 0x24
 8023d92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023d94:	1220      	asrs	r0, r4, #8
 8023d96:	fb13 f905 	smulbb	r9, r3, r5
 8023d9a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023da0:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8023da4:	fb00 9003 	mla	r0, r0, r3, r9
 8023da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023daa:	10e1      	asrs	r1, r4, #3
 8023dac:	fb13 f905 	smulbb	r9, r3, r5
 8023db0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023db6:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8023dba:	fb01 9103 	mla	r1, r1, r3, r9
 8023dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023dc0:	00e4      	lsls	r4, r4, #3
 8023dc2:	fb13 f505 	smulbb	r5, r3, r5
 8023dc6:	b2e4      	uxtb	r4, r4
 8023dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023dca:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8023dce:	fb04 5403 	mla	r4, r4, r3, r5
 8023dd2:	b280      	uxth	r0, r0
 8023dd4:	b2a4      	uxth	r4, r4
 8023dd6:	1c43      	adds	r3, r0, #1
 8023dd8:	f104 0901 	add.w	r9, r4, #1
 8023ddc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023de0:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023de4:	b289      	uxth	r1, r1
 8023de6:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023dea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023dee:	ea49 0000 	orr.w	r0, r9, r0
 8023df2:	f101 0901 	add.w	r9, r1, #1
 8023df6:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023dfa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023dfe:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023e02:	ea40 0009 	orr.w	r0, r0, r9
 8023e06:	f8ac 0000 	strh.w	r0, [ip]
 8023e0a:	4447      	add	r7, r8
 8023e0c:	b2bf      	uxth	r7, r7
 8023e0e:	2f07      	cmp	r7, #7
 8023e10:	bf81      	itttt	hi
 8023e12:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8023e14:	785a      	ldrbhi	r2, [r3, #1]
 8023e16:	3301      	addhi	r3, #1
 8023e18:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8023e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023e1c:	bf9a      	itte	ls
 8023e1e:	fa42 f208 	asrls.w	r2, r2, r8
 8023e22:	b2d2      	uxtbls	r2, r2
 8023e24:	2700      	movhi	r7, #0
 8023e26:	449c      	add	ip, r3
 8023e28:	e792      	b.n	8023d50 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8023e2a:	441d      	add	r5, r3
 8023e2c:	b22d      	sxth	r5, r5
 8023e2e:	e6c9      	b.n	8023bc4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023e30:	f1ba 0f01 	cmp.w	sl, #1
 8023e34:	f47f af02 	bne.w	8023c3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023e38:	f1bb 0f01 	cmp.w	fp, #1
 8023e3c:	f47f aefe 	bne.w	8023c3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023e40:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8023ee8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8023e44:	f8db 0000 	ldr.w	r0, [fp]
 8023e48:	6803      	ldr	r3, [r0, #0]
 8023e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e4c:	4798      	blx	r3
 8023e4e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8023e52:	465a      	mov	r2, fp
 8023e54:	d006      	beq.n	8023e64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8023e56:	f1b8 0f04 	cmp.w	r8, #4
 8023e5a:	d140      	bne.n	8023ede <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8023e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023e5e:	3300      	adds	r3, #0
 8023e60:	bf18      	it	ne
 8023e62:	2301      	movne	r3, #1
 8023e64:	0580      	lsls	r0, r0, #22
 8023e66:	d563      	bpl.n	8023f30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8023e68:	f1b8 0f08 	cmp.w	r8, #8
 8023e6c:	d160      	bne.n	8023f30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8023e6e:	2b00      	cmp	r3, #0
 8023e70:	bf0c      	ite	eq
 8023e72:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8023e76:	f44f 7180 	movne.w	r1, #256	; 0x100
 8023e7a:	2e00      	cmp	r6, #0
 8023e7c:	f47f aede 	bne.w	8023c3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023e80:	2f00      	cmp	r7, #0
 8023e82:	f47f aedb 	bne.w	8023c3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e88:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023e8a:	18eb      	adds	r3, r5, r3
 8023e8c:	4283      	cmp	r3, r0
 8023e8e:	f73f aed5 	bgt.w	8023c3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023e96:	444b      	add	r3, r9
 8023e98:	4283      	cmp	r3, r0
 8023e9a:	f73f aecf 	bgt.w	8023c3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023e9e:	6810      	ldr	r0, [r2, #0]
 8023ea0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8023ea4:	6805      	ldr	r5, [r0, #0]
 8023ea6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8023eaa:	f1b8 0f08 	cmp.w	r8, #8
 8023eae:	f04f 0600 	mov.w	r6, #0
 8023eb2:	bf18      	it	ne
 8023eb4:	3401      	addne	r4, #1
 8023eb6:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8023eba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023ebc:	9104      	str	r1, [sp, #16]
 8023ebe:	bf18      	it	ne
 8023ec0:	f024 0401 	bicne.w	r4, r4, #1
 8023ec4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023ec6:	bf18      	it	ne
 8023ec8:	b2a4      	uxthne	r4, r4
 8023eca:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8023ece:	e9cd 4900 	strd	r4, r9, [sp]
 8023ed2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023ed4:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8023ed6:	47a0      	blx	r4
 8023ed8:	b019      	add	sp, #100	; 0x64
 8023eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ede:	2300      	movs	r3, #0
 8023ee0:	e7c0      	b.n	8023e64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8023ee2:	bf00      	nop
 8023ee4:	200097a0 	.word	0x200097a0
 8023ee8:	200097a8 	.word	0x200097a8
 8023eec:	200097a2 	.word	0x200097a2
 8023ef0:	00fff800 	.word	0x00fff800
 8023ef4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023ef6:	e6ee      	b.n	8023cd6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8023ef8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023efa:	e784      	b.n	8023e06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8023efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023efe:	b153      	cbz	r3, 8023f16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8023f00:	441f      	add	r7, r3
 8023f02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f04:	b2bf      	uxth	r7, r7
 8023f06:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8023f0a:	f007 0707 	and.w	r7, r7, #7
 8023f0e:	781a      	ldrb	r2, [r3, #0]
 8023f10:	9328      	str	r3, [sp, #160]	; 0xa0
 8023f12:	413a      	asrs	r2, r7
 8023f14:	b2d2      	uxtb	r2, r2
 8023f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f18:	445b      	add	r3, fp
 8023f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8023f1c:	e711      	b.n	8023d42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8023f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023f20:	2b00      	cmp	r3, #0
 8023f22:	d1d9      	bne.n	8023ed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023f24:	4b05      	ldr	r3, [pc, #20]	; (8023f3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 8023f26:	6818      	ldr	r0, [r3, #0]
 8023f28:	6803      	ldr	r3, [r0, #0]
 8023f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023f2c:	4798      	blx	r3
 8023f2e:	e7d3      	b.n	8023ed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023f30:	2b00      	cmp	r3, #0
 8023f32:	f43f ae83 	beq.w	8023c3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023f3a:	e79e      	b.n	8023e7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8023f3c:	200097a8 	.word	0x200097a8

08023f40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8023f40:	b538      	push	{r3, r4, r5, lr}
 8023f42:	4c15      	ldr	r4, [pc, #84]	; (8023f98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8023f44:	7823      	ldrb	r3, [r4, #0]
 8023f46:	f3bf 8f5b 	dmb	ish
 8023f4a:	07da      	lsls	r2, r3, #31
 8023f4c:	4605      	mov	r5, r0
 8023f4e:	d40b      	bmi.n	8023f68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023f50:	4620      	mov	r0, r4
 8023f52:	f009 f960 	bl	802d216 <__cxa_guard_acquire>
 8023f56:	b138      	cbz	r0, 8023f68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023f58:	4620      	mov	r0, r4
 8023f5a:	f009 f968 	bl	802d22e <__cxa_guard_release>
 8023f5e:	4a0f      	ldr	r2, [pc, #60]	; (8023f9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023f60:	490f      	ldr	r1, [pc, #60]	; (8023fa0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8023f62:	4810      	ldr	r0, [pc, #64]	; (8023fa4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023f64:	f009 f950 	bl	802d208 <__aeabi_atexit>
 8023f68:	4c0f      	ldr	r4, [pc, #60]	; (8023fa8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8023f6a:	7823      	ldrb	r3, [r4, #0]
 8023f6c:	f3bf 8f5b 	dmb	ish
 8023f70:	07db      	lsls	r3, r3, #31
 8023f72:	d40b      	bmi.n	8023f8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8023f74:	4620      	mov	r0, r4
 8023f76:	f009 f94e 	bl	802d216 <__cxa_guard_acquire>
 8023f7a:	b138      	cbz	r0, 8023f8c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8023f7c:	4620      	mov	r0, r4
 8023f7e:	f009 f956 	bl	802d22e <__cxa_guard_release>
 8023f82:	4a06      	ldr	r2, [pc, #24]	; (8023f9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023f84:	4909      	ldr	r1, [pc, #36]	; (8023fac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8023f86:	480a      	ldr	r0, [pc, #40]	; (8023fb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8023f88:	f009 f93e 	bl	802d208 <__aeabi_atexit>
 8023f8c:	4b05      	ldr	r3, [pc, #20]	; (8023fa4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023f8e:	612b      	str	r3, [r5, #16]
 8023f90:	4b07      	ldr	r3, [pc, #28]	; (8023fb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8023f92:	616b      	str	r3, [r5, #20]
 8023f94:	bd38      	pop	{r3, r4, r5, pc}
 8023f96:	bf00      	nop
 8023f98:	20009874 	.word	0x20009874
 8023f9c:	20000000 	.word	0x20000000
 8023fa0:	08022143 	.word	0x08022143
 8023fa4:	20000064 	.word	0x20000064
 8023fa8:	20009878 	.word	0x20009878
 8023fac:	08022141 	.word	0x08022141
 8023fb0:	20000068 	.word	0x20000068

08023fb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8023fb4:	b538      	push	{r3, r4, r5, lr}
 8023fb6:	4c15      	ldr	r4, [pc, #84]	; (802400c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8023fb8:	7823      	ldrb	r3, [r4, #0]
 8023fba:	f3bf 8f5b 	dmb	ish
 8023fbe:	07da      	lsls	r2, r3, #31
 8023fc0:	4605      	mov	r5, r0
 8023fc2:	d40b      	bmi.n	8023fdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023fc4:	4620      	mov	r0, r4
 8023fc6:	f009 f926 	bl	802d216 <__cxa_guard_acquire>
 8023fca:	b138      	cbz	r0, 8023fdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023fcc:	4620      	mov	r0, r4
 8023fce:	f009 f92e 	bl	802d22e <__cxa_guard_release>
 8023fd2:	4a0f      	ldr	r2, [pc, #60]	; (8024010 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023fd4:	490f      	ldr	r1, [pc, #60]	; (8024014 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8023fd6:	4810      	ldr	r0, [pc, #64]	; (8024018 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023fd8:	f009 f916 	bl	802d208 <__aeabi_atexit>
 8023fdc:	4c0f      	ldr	r4, [pc, #60]	; (802401c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8023fde:	7823      	ldrb	r3, [r4, #0]
 8023fe0:	f3bf 8f5b 	dmb	ish
 8023fe4:	07db      	lsls	r3, r3, #31
 8023fe6:	d40b      	bmi.n	8024000 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023fe8:	4620      	mov	r0, r4
 8023fea:	f009 f914 	bl	802d216 <__cxa_guard_acquire>
 8023fee:	b138      	cbz	r0, 8024000 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023ff0:	4620      	mov	r0, r4
 8023ff2:	f009 f91c 	bl	802d22e <__cxa_guard_release>
 8023ff6:	4a06      	ldr	r2, [pc, #24]	; (8024010 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023ff8:	4909      	ldr	r1, [pc, #36]	; (8024020 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8023ffa:	480a      	ldr	r0, [pc, #40]	; (8024024 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023ffc:	f009 f904 	bl	802d208 <__aeabi_atexit>
 8024000:	4b05      	ldr	r3, [pc, #20]	; (8024018 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024002:	60ab      	str	r3, [r5, #8]
 8024004:	4b07      	ldr	r3, [pc, #28]	; (8024024 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8024006:	60eb      	str	r3, [r5, #12]
 8024008:	bd38      	pop	{r3, r4, r5, pc}
 802400a:	bf00      	nop
 802400c:	2000984c 	.word	0x2000984c
 8024010:	20000000 	.word	0x20000000
 8024014:	08022147 	.word	0x08022147
 8024018:	2000003c 	.word	0x2000003c
 802401c:	20009850 	.word	0x20009850
 8024020:	08022145 	.word	0x08022145
 8024024:	20000040 	.word	0x20000040

08024028 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8024028:	b510      	push	{r4, lr}
 802402a:	4604      	mov	r4, r0
 802402c:	f7ff ff88 	bl	8023f40 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8024030:	4620      	mov	r0, r4
 8024032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024036:	f7ff bfbd 	b.w	8023fb4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802403c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802403c:	b538      	push	{r3, r4, r5, lr}
 802403e:	4c15      	ldr	r4, [pc, #84]	; (8024094 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024040:	7823      	ldrb	r3, [r4, #0]
 8024042:	f3bf 8f5b 	dmb	ish
 8024046:	07da      	lsls	r2, r3, #31
 8024048:	4605      	mov	r5, r0
 802404a:	d40b      	bmi.n	8024064 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802404c:	4620      	mov	r0, r4
 802404e:	f009 f8e2 	bl	802d216 <__cxa_guard_acquire>
 8024052:	b138      	cbz	r0, 8024064 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024054:	4620      	mov	r0, r4
 8024056:	f009 f8ea 	bl	802d22e <__cxa_guard_release>
 802405a:	4a0f      	ldr	r2, [pc, #60]	; (8024098 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802405c:	490f      	ldr	r1, [pc, #60]	; (802409c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802405e:	4810      	ldr	r0, [pc, #64]	; (80240a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024060:	f009 f8d2 	bl	802d208 <__aeabi_atexit>
 8024064:	4c0f      	ldr	r4, [pc, #60]	; (80240a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8024066:	7823      	ldrb	r3, [r4, #0]
 8024068:	f3bf 8f5b 	dmb	ish
 802406c:	07db      	lsls	r3, r3, #31
 802406e:	d40b      	bmi.n	8024088 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024070:	4620      	mov	r0, r4
 8024072:	f009 f8d0 	bl	802d216 <__cxa_guard_acquire>
 8024076:	b138      	cbz	r0, 8024088 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024078:	4620      	mov	r0, r4
 802407a:	f009 f8d8 	bl	802d22e <__cxa_guard_release>
 802407e:	4a06      	ldr	r2, [pc, #24]	; (8024098 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024080:	4909      	ldr	r1, [pc, #36]	; (80240a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024082:	480a      	ldr	r0, [pc, #40]	; (80240ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024084:	f009 f8c0 	bl	802d208 <__aeabi_atexit>
 8024088:	4b05      	ldr	r3, [pc, #20]	; (80240a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802408a:	622b      	str	r3, [r5, #32]
 802408c:	4b07      	ldr	r3, [pc, #28]	; (80240ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802408e:	626b      	str	r3, [r5, #36]	; 0x24
 8024090:	bd38      	pop	{r3, r4, r5, pc}
 8024092:	bf00      	nop
 8024094:	2000987c 	.word	0x2000987c
 8024098:	20000000 	.word	0x20000000
 802409c:	0802213b 	.word	0x0802213b
 80240a0:	2000006c 	.word	0x2000006c
 80240a4:	20009880 	.word	0x20009880
 80240a8:	08022139 	.word	0x08022139
 80240ac:	20000070 	.word	0x20000070

080240b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80240b0:	b538      	push	{r3, r4, r5, lr}
 80240b2:	4c15      	ldr	r4, [pc, #84]	; (8024108 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80240b4:	7823      	ldrb	r3, [r4, #0]
 80240b6:	f3bf 8f5b 	dmb	ish
 80240ba:	07da      	lsls	r2, r3, #31
 80240bc:	4605      	mov	r5, r0
 80240be:	d40b      	bmi.n	80240d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80240c0:	4620      	mov	r0, r4
 80240c2:	f009 f8a8 	bl	802d216 <__cxa_guard_acquire>
 80240c6:	b138      	cbz	r0, 80240d8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80240c8:	4620      	mov	r0, r4
 80240ca:	f009 f8b0 	bl	802d22e <__cxa_guard_release>
 80240ce:	4a0f      	ldr	r2, [pc, #60]	; (802410c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80240d0:	490f      	ldr	r1, [pc, #60]	; (8024110 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80240d2:	4810      	ldr	r0, [pc, #64]	; (8024114 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80240d4:	f009 f898 	bl	802d208 <__aeabi_atexit>
 80240d8:	4c0f      	ldr	r4, [pc, #60]	; (8024118 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80240da:	7823      	ldrb	r3, [r4, #0]
 80240dc:	f3bf 8f5b 	dmb	ish
 80240e0:	07db      	lsls	r3, r3, #31
 80240e2:	d40b      	bmi.n	80240fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80240e4:	4620      	mov	r0, r4
 80240e6:	f009 f896 	bl	802d216 <__cxa_guard_acquire>
 80240ea:	b138      	cbz	r0, 80240fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80240ec:	4620      	mov	r0, r4
 80240ee:	f009 f89e 	bl	802d22e <__cxa_guard_release>
 80240f2:	4a06      	ldr	r2, [pc, #24]	; (802410c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80240f4:	4909      	ldr	r1, [pc, #36]	; (802411c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80240f6:	480a      	ldr	r0, [pc, #40]	; (8024120 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80240f8:	f009 f886 	bl	802d208 <__aeabi_atexit>
 80240fc:	4b05      	ldr	r3, [pc, #20]	; (8024114 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80240fe:	61ab      	str	r3, [r5, #24]
 8024100:	4b07      	ldr	r3, [pc, #28]	; (8024120 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024102:	61eb      	str	r3, [r5, #28]
 8024104:	bd38      	pop	{r3, r4, r5, pc}
 8024106:	bf00      	nop
 8024108:	20009854 	.word	0x20009854
 802410c:	20000000 	.word	0x20000000
 8024110:	0802213f 	.word	0x0802213f
 8024114:	20000044 	.word	0x20000044
 8024118:	20009858 	.word	0x20009858
 802411c:	0802213d 	.word	0x0802213d
 8024120:	20000048 	.word	0x20000048

08024124 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8024124:	b510      	push	{r4, lr}
 8024126:	4604      	mov	r4, r0
 8024128:	f7ff ff88 	bl	802403c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802412c:	4620      	mov	r0, r4
 802412e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024132:	f7ff bfbd 	b.w	80240b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08024138 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8024138:	b538      	push	{r3, r4, r5, lr}
 802413a:	4c15      	ldr	r4, [pc, #84]	; (8024190 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802413c:	7823      	ldrb	r3, [r4, #0]
 802413e:	f3bf 8f5b 	dmb	ish
 8024142:	07da      	lsls	r2, r3, #31
 8024144:	4605      	mov	r5, r0
 8024146:	d40b      	bmi.n	8024160 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024148:	4620      	mov	r0, r4
 802414a:	f009 f864 	bl	802d216 <__cxa_guard_acquire>
 802414e:	b138      	cbz	r0, 8024160 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024150:	4620      	mov	r0, r4
 8024152:	f009 f86c 	bl	802d22e <__cxa_guard_release>
 8024156:	4a0f      	ldr	r2, [pc, #60]	; (8024194 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024158:	490f      	ldr	r1, [pc, #60]	; (8024198 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802415a:	4810      	ldr	r0, [pc, #64]	; (802419c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802415c:	f009 f854 	bl	802d208 <__aeabi_atexit>
 8024160:	4c0f      	ldr	r4, [pc, #60]	; (80241a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8024162:	7823      	ldrb	r3, [r4, #0]
 8024164:	f3bf 8f5b 	dmb	ish
 8024168:	07db      	lsls	r3, r3, #31
 802416a:	d40b      	bmi.n	8024184 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802416c:	4620      	mov	r0, r4
 802416e:	f009 f852 	bl	802d216 <__cxa_guard_acquire>
 8024172:	b138      	cbz	r0, 8024184 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024174:	4620      	mov	r0, r4
 8024176:	f009 f85a 	bl	802d22e <__cxa_guard_release>
 802417a:	4a06      	ldr	r2, [pc, #24]	; (8024194 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802417c:	4909      	ldr	r1, [pc, #36]	; (80241a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802417e:	480a      	ldr	r0, [pc, #40]	; (80241a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024180:	f009 f842 	bl	802d208 <__aeabi_atexit>
 8024184:	4b05      	ldr	r3, [pc, #20]	; (802419c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024186:	632b      	str	r3, [r5, #48]	; 0x30
 8024188:	4b07      	ldr	r3, [pc, #28]	; (80241a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802418a:	636b      	str	r3, [r5, #52]	; 0x34
 802418c:	bd38      	pop	{r3, r4, r5, pc}
 802418e:	bf00      	nop
 8024190:	2000988c 	.word	0x2000988c
 8024194:	20000000 	.word	0x20000000
 8024198:	08022133 	.word	0x08022133
 802419c:	2000007c 	.word	0x2000007c
 80241a0:	20009890 	.word	0x20009890
 80241a4:	08022131 	.word	0x08022131
 80241a8:	20000080 	.word	0x20000080

080241ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80241ac:	b538      	push	{r3, r4, r5, lr}
 80241ae:	4c15      	ldr	r4, [pc, #84]	; (8024204 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80241b0:	7823      	ldrb	r3, [r4, #0]
 80241b2:	f3bf 8f5b 	dmb	ish
 80241b6:	07da      	lsls	r2, r3, #31
 80241b8:	4605      	mov	r5, r0
 80241ba:	d40b      	bmi.n	80241d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80241bc:	4620      	mov	r0, r4
 80241be:	f009 f82a 	bl	802d216 <__cxa_guard_acquire>
 80241c2:	b138      	cbz	r0, 80241d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80241c4:	4620      	mov	r0, r4
 80241c6:	f009 f832 	bl	802d22e <__cxa_guard_release>
 80241ca:	4a0f      	ldr	r2, [pc, #60]	; (8024208 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80241cc:	490f      	ldr	r1, [pc, #60]	; (802420c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80241ce:	4810      	ldr	r0, [pc, #64]	; (8024210 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80241d0:	f009 f81a 	bl	802d208 <__aeabi_atexit>
 80241d4:	4c0f      	ldr	r4, [pc, #60]	; (8024214 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80241d6:	7823      	ldrb	r3, [r4, #0]
 80241d8:	f3bf 8f5b 	dmb	ish
 80241dc:	07db      	lsls	r3, r3, #31
 80241de:	d40b      	bmi.n	80241f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80241e0:	4620      	mov	r0, r4
 80241e2:	f009 f818 	bl	802d216 <__cxa_guard_acquire>
 80241e6:	b138      	cbz	r0, 80241f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80241e8:	4620      	mov	r0, r4
 80241ea:	f009 f820 	bl	802d22e <__cxa_guard_release>
 80241ee:	4a06      	ldr	r2, [pc, #24]	; (8024208 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80241f0:	4909      	ldr	r1, [pc, #36]	; (8024218 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80241f2:	480a      	ldr	r0, [pc, #40]	; (802421c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80241f4:	f009 f808 	bl	802d208 <__aeabi_atexit>
 80241f8:	4b05      	ldr	r3, [pc, #20]	; (8024210 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80241fa:	62ab      	str	r3, [r5, #40]	; 0x28
 80241fc:	4b07      	ldr	r3, [pc, #28]	; (802421c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80241fe:	62eb      	str	r3, [r5, #44]	; 0x2c
 8024200:	bd38      	pop	{r3, r4, r5, pc}
 8024202:	bf00      	nop
 8024204:	2000985c 	.word	0x2000985c
 8024208:	20000000 	.word	0x20000000
 802420c:	08022137 	.word	0x08022137
 8024210:	2000004c 	.word	0x2000004c
 8024214:	20009860 	.word	0x20009860
 8024218:	08022135 	.word	0x08022135
 802421c:	20000050 	.word	0x20000050

08024220 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8024220:	b510      	push	{r4, lr}
 8024222:	4604      	mov	r4, r0
 8024224:	f7ff ff88 	bl	8024138 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8024228:	4620      	mov	r0, r4
 802422a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802422e:	f7ff bfbd 	b.w	80241ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08024234 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8024234:	b538      	push	{r3, r4, r5, lr}
 8024236:	4c15      	ldr	r4, [pc, #84]	; (802428c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8024238:	7823      	ldrb	r3, [r4, #0]
 802423a:	f3bf 8f5b 	dmb	ish
 802423e:	07da      	lsls	r2, r3, #31
 8024240:	4605      	mov	r5, r0
 8024242:	d40b      	bmi.n	802425c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024244:	4620      	mov	r0, r4
 8024246:	f008 ffe6 	bl	802d216 <__cxa_guard_acquire>
 802424a:	b138      	cbz	r0, 802425c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802424c:	4620      	mov	r0, r4
 802424e:	f008 ffee 	bl	802d22e <__cxa_guard_release>
 8024252:	4a0f      	ldr	r2, [pc, #60]	; (8024290 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024254:	490f      	ldr	r1, [pc, #60]	; (8024294 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8024256:	4810      	ldr	r0, [pc, #64]	; (8024298 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024258:	f008 ffd6 	bl	802d208 <__aeabi_atexit>
 802425c:	4c0f      	ldr	r4, [pc, #60]	; (802429c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802425e:	7823      	ldrb	r3, [r4, #0]
 8024260:	f3bf 8f5b 	dmb	ish
 8024264:	07db      	lsls	r3, r3, #31
 8024266:	d40b      	bmi.n	8024280 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024268:	4620      	mov	r0, r4
 802426a:	f008 ffd4 	bl	802d216 <__cxa_guard_acquire>
 802426e:	b138      	cbz	r0, 8024280 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024270:	4620      	mov	r0, r4
 8024272:	f008 ffdc 	bl	802d22e <__cxa_guard_release>
 8024276:	4a06      	ldr	r2, [pc, #24]	; (8024290 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024278:	4909      	ldr	r1, [pc, #36]	; (80242a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802427a:	480a      	ldr	r0, [pc, #40]	; (80242a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802427c:	f008 ffc4 	bl	802d208 <__aeabi_atexit>
 8024280:	4b05      	ldr	r3, [pc, #20]	; (8024298 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024282:	652b      	str	r3, [r5, #80]	; 0x50
 8024284:	4b07      	ldr	r3, [pc, #28]	; (80242a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024286:	656b      	str	r3, [r5, #84]	; 0x54
 8024288:	bd38      	pop	{r3, r4, r5, pc}
 802428a:	bf00      	nop
 802428c:	20009894 	.word	0x20009894
 8024290:	20000000 	.word	0x20000000
 8024294:	08022123 	.word	0x08022123
 8024298:	20000084 	.word	0x20000084
 802429c:	20009898 	.word	0x20009898
 80242a0:	08022121 	.word	0x08022121
 80242a4:	20000088 	.word	0x20000088

080242a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80242a8:	b538      	push	{r3, r4, r5, lr}
 80242aa:	4c15      	ldr	r4, [pc, #84]	; (8024300 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80242ac:	7823      	ldrb	r3, [r4, #0]
 80242ae:	f3bf 8f5b 	dmb	ish
 80242b2:	07da      	lsls	r2, r3, #31
 80242b4:	4605      	mov	r5, r0
 80242b6:	d40b      	bmi.n	80242d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80242b8:	4620      	mov	r0, r4
 80242ba:	f008 ffac 	bl	802d216 <__cxa_guard_acquire>
 80242be:	b138      	cbz	r0, 80242d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80242c0:	4620      	mov	r0, r4
 80242c2:	f008 ffb4 	bl	802d22e <__cxa_guard_release>
 80242c6:	4a0f      	ldr	r2, [pc, #60]	; (8024304 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80242c8:	490f      	ldr	r1, [pc, #60]	; (8024308 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80242ca:	4810      	ldr	r0, [pc, #64]	; (802430c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80242cc:	f008 ff9c 	bl	802d208 <__aeabi_atexit>
 80242d0:	4c0f      	ldr	r4, [pc, #60]	; (8024310 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80242d2:	7823      	ldrb	r3, [r4, #0]
 80242d4:	f3bf 8f5b 	dmb	ish
 80242d8:	07db      	lsls	r3, r3, #31
 80242da:	d40b      	bmi.n	80242f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80242dc:	4620      	mov	r0, r4
 80242de:	f008 ff9a 	bl	802d216 <__cxa_guard_acquire>
 80242e2:	b138      	cbz	r0, 80242f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80242e4:	4620      	mov	r0, r4
 80242e6:	f008 ffa2 	bl	802d22e <__cxa_guard_release>
 80242ea:	4a06      	ldr	r2, [pc, #24]	; (8024304 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80242ec:	4909      	ldr	r1, [pc, #36]	; (8024314 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80242ee:	480a      	ldr	r0, [pc, #40]	; (8024318 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80242f0:	f008 ff8a 	bl	802d208 <__aeabi_atexit>
 80242f4:	4b05      	ldr	r3, [pc, #20]	; (802430c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80242f6:	64ab      	str	r3, [r5, #72]	; 0x48
 80242f8:	4b07      	ldr	r3, [pc, #28]	; (8024318 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80242fa:	64eb      	str	r3, [r5, #76]	; 0x4c
 80242fc:	bd38      	pop	{r3, r4, r5, pc}
 80242fe:	bf00      	nop
 8024300:	2000989c 	.word	0x2000989c
 8024304:	20000000 	.word	0x20000000
 8024308:	08022127 	.word	0x08022127
 802430c:	2000008c 	.word	0x2000008c
 8024310:	200098a0 	.word	0x200098a0
 8024314:	08022125 	.word	0x08022125
 8024318:	20000090 	.word	0x20000090

0802431c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 802431c:	b538      	push	{r3, r4, r5, lr}
 802431e:	4c15      	ldr	r4, [pc, #84]	; (8024374 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8024320:	7823      	ldrb	r3, [r4, #0]
 8024322:	f3bf 8f5b 	dmb	ish
 8024326:	07da      	lsls	r2, r3, #31
 8024328:	4605      	mov	r5, r0
 802432a:	d40b      	bmi.n	8024344 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802432c:	4620      	mov	r0, r4
 802432e:	f008 ff72 	bl	802d216 <__cxa_guard_acquire>
 8024332:	b138      	cbz	r0, 8024344 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8024334:	4620      	mov	r0, r4
 8024336:	f008 ff7a 	bl	802d22e <__cxa_guard_release>
 802433a:	4a0f      	ldr	r2, [pc, #60]	; (8024378 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802433c:	490f      	ldr	r1, [pc, #60]	; (802437c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802433e:	4810      	ldr	r0, [pc, #64]	; (8024380 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8024340:	f008 ff62 	bl	802d208 <__aeabi_atexit>
 8024344:	4c0f      	ldr	r4, [pc, #60]	; (8024384 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8024346:	7823      	ldrb	r3, [r4, #0]
 8024348:	f3bf 8f5b 	dmb	ish
 802434c:	07db      	lsls	r3, r3, #31
 802434e:	d40b      	bmi.n	8024368 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024350:	4620      	mov	r0, r4
 8024352:	f008 ff60 	bl	802d216 <__cxa_guard_acquire>
 8024356:	b138      	cbz	r0, 8024368 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024358:	4620      	mov	r0, r4
 802435a:	f008 ff68 	bl	802d22e <__cxa_guard_release>
 802435e:	4a06      	ldr	r2, [pc, #24]	; (8024378 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8024360:	4909      	ldr	r1, [pc, #36]	; (8024388 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8024362:	480a      	ldr	r0, [pc, #40]	; (802438c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8024364:	f008 ff50 	bl	802d208 <__aeabi_atexit>
 8024368:	4b05      	ldr	r3, [pc, #20]	; (8024380 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802436a:	642b      	str	r3, [r5, #64]	; 0x40
 802436c:	4b07      	ldr	r3, [pc, #28]	; (802438c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802436e:	646b      	str	r3, [r5, #68]	; 0x44
 8024370:	bd38      	pop	{r3, r4, r5, pc}
 8024372:	bf00      	nop
 8024374:	20009864 	.word	0x20009864
 8024378:	20000000 	.word	0x20000000
 802437c:	0802212b 	.word	0x0802212b
 8024380:	20000054 	.word	0x20000054
 8024384:	20009868 	.word	0x20009868
 8024388:	08022129 	.word	0x08022129
 802438c:	20000058 	.word	0x20000058

08024390 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8024390:	b538      	push	{r3, r4, r5, lr}
 8024392:	4c15      	ldr	r4, [pc, #84]	; (80243e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8024394:	7823      	ldrb	r3, [r4, #0]
 8024396:	f3bf 8f5b 	dmb	ish
 802439a:	07da      	lsls	r2, r3, #31
 802439c:	4605      	mov	r5, r0
 802439e:	d40b      	bmi.n	80243b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80243a0:	4620      	mov	r0, r4
 80243a2:	f008 ff38 	bl	802d216 <__cxa_guard_acquire>
 80243a6:	b138      	cbz	r0, 80243b8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80243a8:	4620      	mov	r0, r4
 80243aa:	f008 ff40 	bl	802d22e <__cxa_guard_release>
 80243ae:	4a0f      	ldr	r2, [pc, #60]	; (80243ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80243b0:	490f      	ldr	r1, [pc, #60]	; (80243f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80243b2:	4810      	ldr	r0, [pc, #64]	; (80243f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80243b4:	f008 ff28 	bl	802d208 <__aeabi_atexit>
 80243b8:	4c0f      	ldr	r4, [pc, #60]	; (80243f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80243ba:	7823      	ldrb	r3, [r4, #0]
 80243bc:	f3bf 8f5b 	dmb	ish
 80243c0:	07db      	lsls	r3, r3, #31
 80243c2:	d40b      	bmi.n	80243dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80243c4:	4620      	mov	r0, r4
 80243c6:	f008 ff26 	bl	802d216 <__cxa_guard_acquire>
 80243ca:	b138      	cbz	r0, 80243dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80243cc:	4620      	mov	r0, r4
 80243ce:	f008 ff2e 	bl	802d22e <__cxa_guard_release>
 80243d2:	4a06      	ldr	r2, [pc, #24]	; (80243ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80243d4:	4909      	ldr	r1, [pc, #36]	; (80243fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80243d6:	480a      	ldr	r0, [pc, #40]	; (8024400 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80243d8:	f008 ff16 	bl	802d208 <__aeabi_atexit>
 80243dc:	4b05      	ldr	r3, [pc, #20]	; (80243f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80243de:	63ab      	str	r3, [r5, #56]	; 0x38
 80243e0:	4b07      	ldr	r3, [pc, #28]	; (8024400 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80243e2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80243e4:	bd38      	pop	{r3, r4, r5, pc}
 80243e6:	bf00      	nop
 80243e8:	20009884 	.word	0x20009884
 80243ec:	20000000 	.word	0x20000000
 80243f0:	0802212f 	.word	0x0802212f
 80243f4:	20000074 	.word	0x20000074
 80243f8:	20009888 	.word	0x20009888
 80243fc:	0802212d 	.word	0x0802212d
 8024400:	20000078 	.word	0x20000078

08024404 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8024404:	b510      	push	{r4, lr}
 8024406:	4604      	mov	r4, r0
 8024408:	f7ff ff14 	bl	8024234 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 802440c:	4620      	mov	r0, r4
 802440e:	f7ff ff85 	bl	802431c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8024412:	4620      	mov	r0, r4
 8024414:	f7ff ff48 	bl	80242a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8024418:	4620      	mov	r0, r4
 802441a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802441e:	f7ff bfb7 	b.w	8024390 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08024424 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8024424:	b538      	push	{r3, r4, r5, lr}
 8024426:	4c15      	ldr	r4, [pc, #84]	; (802447c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8024428:	7823      	ldrb	r3, [r4, #0]
 802442a:	f3bf 8f5b 	dmb	ish
 802442e:	07da      	lsls	r2, r3, #31
 8024430:	4605      	mov	r5, r0
 8024432:	d40b      	bmi.n	802444c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024434:	4620      	mov	r0, r4
 8024436:	f008 feee 	bl	802d216 <__cxa_guard_acquire>
 802443a:	b138      	cbz	r0, 802444c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802443c:	4620      	mov	r0, r4
 802443e:	f008 fef6 	bl	802d22e <__cxa_guard_release>
 8024442:	4a0f      	ldr	r2, [pc, #60]	; (8024480 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024444:	490f      	ldr	r1, [pc, #60]	; (8024484 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8024446:	4810      	ldr	r0, [pc, #64]	; (8024488 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024448:	f008 fede 	bl	802d208 <__aeabi_atexit>
 802444c:	4c0f      	ldr	r4, [pc, #60]	; (802448c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802444e:	7823      	ldrb	r3, [r4, #0]
 8024450:	f3bf 8f5b 	dmb	ish
 8024454:	07db      	lsls	r3, r3, #31
 8024456:	d40b      	bmi.n	8024470 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024458:	4620      	mov	r0, r4
 802445a:	f008 fedc 	bl	802d216 <__cxa_guard_acquire>
 802445e:	b138      	cbz	r0, 8024470 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024460:	4620      	mov	r0, r4
 8024462:	f008 fee4 	bl	802d22e <__cxa_guard_release>
 8024466:	4a06      	ldr	r2, [pc, #24]	; (8024480 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024468:	4909      	ldr	r1, [pc, #36]	; (8024490 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802446a:	480a      	ldr	r0, [pc, #40]	; (8024494 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802446c:	f008 fecc 	bl	802d208 <__aeabi_atexit>
 8024470:	4b05      	ldr	r3, [pc, #20]	; (8024488 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024472:	662b      	str	r3, [r5, #96]	; 0x60
 8024474:	4b07      	ldr	r3, [pc, #28]	; (8024494 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024476:	666b      	str	r3, [r5, #100]	; 0x64
 8024478:	bd38      	pop	{r3, r4, r5, pc}
 802447a:	bf00      	nop
 802447c:	2000986c 	.word	0x2000986c
 8024480:	20000000 	.word	0x20000000
 8024484:	0802211b 	.word	0x0802211b
 8024488:	2000005c 	.word	0x2000005c
 802448c:	20009870 	.word	0x20009870
 8024490:	08022119 	.word	0x08022119
 8024494:	20000060 	.word	0x20000060

08024498 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024498:	b538      	push	{r3, r4, r5, lr}
 802449a:	4c15      	ldr	r4, [pc, #84]	; (80244f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802449c:	7823      	ldrb	r3, [r4, #0]
 802449e:	f3bf 8f5b 	dmb	ish
 80244a2:	07da      	lsls	r2, r3, #31
 80244a4:	4605      	mov	r5, r0
 80244a6:	d40b      	bmi.n	80244c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80244a8:	4620      	mov	r0, r4
 80244aa:	f008 feb4 	bl	802d216 <__cxa_guard_acquire>
 80244ae:	b138      	cbz	r0, 80244c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80244b0:	4620      	mov	r0, r4
 80244b2:	f008 febc 	bl	802d22e <__cxa_guard_release>
 80244b6:	4a0f      	ldr	r2, [pc, #60]	; (80244f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80244b8:	490f      	ldr	r1, [pc, #60]	; (80244f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80244ba:	4810      	ldr	r0, [pc, #64]	; (80244fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80244bc:	f008 fea4 	bl	802d208 <__aeabi_atexit>
 80244c0:	4c0f      	ldr	r4, [pc, #60]	; (8024500 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80244c2:	7823      	ldrb	r3, [r4, #0]
 80244c4:	f3bf 8f5b 	dmb	ish
 80244c8:	07db      	lsls	r3, r3, #31
 80244ca:	d40b      	bmi.n	80244e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80244cc:	4620      	mov	r0, r4
 80244ce:	f008 fea2 	bl	802d216 <__cxa_guard_acquire>
 80244d2:	b138      	cbz	r0, 80244e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80244d4:	4620      	mov	r0, r4
 80244d6:	f008 feaa 	bl	802d22e <__cxa_guard_release>
 80244da:	4a06      	ldr	r2, [pc, #24]	; (80244f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80244dc:	4909      	ldr	r1, [pc, #36]	; (8024504 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80244de:	480a      	ldr	r0, [pc, #40]	; (8024508 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80244e0:	f008 fe92 	bl	802d208 <__aeabi_atexit>
 80244e4:	4b05      	ldr	r3, [pc, #20]	; (80244fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80244e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80244e8:	4b07      	ldr	r3, [pc, #28]	; (8024508 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80244ea:	65eb      	str	r3, [r5, #92]	; 0x5c
 80244ec:	bd38      	pop	{r3, r4, r5, pc}
 80244ee:	bf00      	nop
 80244f0:	20009844 	.word	0x20009844
 80244f4:	20000000 	.word	0x20000000
 80244f8:	0802211f 	.word	0x0802211f
 80244fc:	20000034 	.word	0x20000034
 8024500:	20009848 	.word	0x20009848
 8024504:	0802211d 	.word	0x0802211d
 8024508:	20000038 	.word	0x20000038

0802450c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 802450c:	b510      	push	{r4, lr}
 802450e:	4604      	mov	r4, r0
 8024510:	f7ff ff88 	bl	8024424 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024514:	4620      	mov	r0, r4
 8024516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802451a:	f7ff bfbd 	b.w	8024498 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024520 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024520:	b538      	push	{r3, r4, r5, lr}
 8024522:	4c15      	ldr	r4, [pc, #84]	; (8024578 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024524:	7823      	ldrb	r3, [r4, #0]
 8024526:	f3bf 8f5b 	dmb	ish
 802452a:	07da      	lsls	r2, r3, #31
 802452c:	4605      	mov	r5, r0
 802452e:	d40b      	bmi.n	8024548 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024530:	4620      	mov	r0, r4
 8024532:	f008 fe70 	bl	802d216 <__cxa_guard_acquire>
 8024536:	b138      	cbz	r0, 8024548 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024538:	4620      	mov	r0, r4
 802453a:	f008 fe78 	bl	802d22e <__cxa_guard_release>
 802453e:	4a0f      	ldr	r2, [pc, #60]	; (802457c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024540:	490f      	ldr	r1, [pc, #60]	; (8024580 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024542:	4810      	ldr	r0, [pc, #64]	; (8024584 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024544:	f008 fe60 	bl	802d208 <__aeabi_atexit>
 8024548:	4c0f      	ldr	r4, [pc, #60]	; (8024588 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802454a:	7823      	ldrb	r3, [r4, #0]
 802454c:	f3bf 8f5b 	dmb	ish
 8024550:	07db      	lsls	r3, r3, #31
 8024552:	d40b      	bmi.n	802456c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024554:	4620      	mov	r0, r4
 8024556:	f008 fe5e 	bl	802d216 <__cxa_guard_acquire>
 802455a:	b138      	cbz	r0, 802456c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802455c:	4620      	mov	r0, r4
 802455e:	f008 fe66 	bl	802d22e <__cxa_guard_release>
 8024562:	4a06      	ldr	r2, [pc, #24]	; (802457c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024564:	4909      	ldr	r1, [pc, #36]	; (802458c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024566:	480a      	ldr	r0, [pc, #40]	; (8024590 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024568:	f008 fe4e 	bl	802d208 <__aeabi_atexit>
 802456c:	4b05      	ldr	r3, [pc, #20]	; (8024584 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802456e:	672b      	str	r3, [r5, #112]	; 0x70
 8024570:	4b07      	ldr	r3, [pc, #28]	; (8024590 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024572:	676b      	str	r3, [r5, #116]	; 0x74
 8024574:	bd38      	pop	{r3, r4, r5, pc}
 8024576:	bf00      	nop
 8024578:	2000983c 	.word	0x2000983c
 802457c:	20000000 	.word	0x20000000
 8024580:	08022113 	.word	0x08022113
 8024584:	2000002c 	.word	0x2000002c
 8024588:	20009840 	.word	0x20009840
 802458c:	08022111 	.word	0x08022111
 8024590:	20000030 	.word	0x20000030

08024594 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024594:	b538      	push	{r3, r4, r5, lr}
 8024596:	4c15      	ldr	r4, [pc, #84]	; (80245ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024598:	7823      	ldrb	r3, [r4, #0]
 802459a:	f3bf 8f5b 	dmb	ish
 802459e:	07da      	lsls	r2, r3, #31
 80245a0:	4605      	mov	r5, r0
 80245a2:	d40b      	bmi.n	80245bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80245a4:	4620      	mov	r0, r4
 80245a6:	f008 fe36 	bl	802d216 <__cxa_guard_acquire>
 80245aa:	b138      	cbz	r0, 80245bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80245ac:	4620      	mov	r0, r4
 80245ae:	f008 fe3e 	bl	802d22e <__cxa_guard_release>
 80245b2:	4a0f      	ldr	r2, [pc, #60]	; (80245f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80245b4:	490f      	ldr	r1, [pc, #60]	; (80245f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80245b6:	4810      	ldr	r0, [pc, #64]	; (80245f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80245b8:	f008 fe26 	bl	802d208 <__aeabi_atexit>
 80245bc:	4c0f      	ldr	r4, [pc, #60]	; (80245fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80245be:	7823      	ldrb	r3, [r4, #0]
 80245c0:	f3bf 8f5b 	dmb	ish
 80245c4:	07db      	lsls	r3, r3, #31
 80245c6:	d40b      	bmi.n	80245e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80245c8:	4620      	mov	r0, r4
 80245ca:	f008 fe24 	bl	802d216 <__cxa_guard_acquire>
 80245ce:	b138      	cbz	r0, 80245e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80245d0:	4620      	mov	r0, r4
 80245d2:	f008 fe2c 	bl	802d22e <__cxa_guard_release>
 80245d6:	4a06      	ldr	r2, [pc, #24]	; (80245f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80245d8:	4909      	ldr	r1, [pc, #36]	; (8024600 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80245da:	480a      	ldr	r0, [pc, #40]	; (8024604 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80245dc:	f008 fe14 	bl	802d208 <__aeabi_atexit>
 80245e0:	4b05      	ldr	r3, [pc, #20]	; (80245f8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80245e2:	66ab      	str	r3, [r5, #104]	; 0x68
 80245e4:	4b07      	ldr	r3, [pc, #28]	; (8024604 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80245e6:	66eb      	str	r3, [r5, #108]	; 0x6c
 80245e8:	bd38      	pop	{r3, r4, r5, pc}
 80245ea:	bf00      	nop
 80245ec:	20009834 	.word	0x20009834
 80245f0:	20000000 	.word	0x20000000
 80245f4:	08022117 	.word	0x08022117
 80245f8:	20000024 	.word	0x20000024
 80245fc:	20009838 	.word	0x20009838
 8024600:	08022115 	.word	0x08022115
 8024604:	20000028 	.word	0x20000028

08024608 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8024608:	b510      	push	{r4, lr}
 802460a:	4604      	mov	r4, r0
 802460c:	f7ff ff88 	bl	8024520 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024610:	4620      	mov	r0, r4
 8024612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024616:	f7ff bfbd 	b.w	8024594 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802461a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802461a:	b510      	push	{r4, lr}
 802461c:	4604      	mov	r4, r0
 802461e:	f7ff fff3 	bl	8024608 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8024622:	4620      	mov	r0, r4
 8024624:	f7ff ff72 	bl	802450c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8024628:	4620      	mov	r0, r4
 802462a:	f7ff fdf9 	bl	8024220 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 802462e:	4620      	mov	r0, r4
 8024630:	f7ff fcfa 	bl	8024028 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8024634:	4620      	mov	r0, r4
 8024636:	f7ff fd75 	bl	8024124 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802463a:	4620      	mov	r0, r4
 802463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024640:	f7ff bee0 	b.w	8024404 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08024644 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8024644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024648:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 802464c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024650:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8024654:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8024658:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 802465c:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8024660:	8808      	ldrh	r0, [r1, #0]
 8024662:	fb0e 4708 	mla	r7, lr, r8, r4
 8024666:	f1be 0f00 	cmp.w	lr, #0
 802466a:	eb02 0a07 	add.w	sl, r2, r7
 802466e:	db37      	blt.n	80246e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8024670:	45f3      	cmp	fp, lr
 8024672:	dd35      	ble.n	80246e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8024674:	2c00      	cmp	r4, #0
 8024676:	db31      	blt.n	80246dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8024678:	45a0      	cmp	r8, r4
 802467a:	dd2f      	ble.n	80246dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 802467c:	5dd2      	ldrb	r2, [r2, r7]
 802467e:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8024682:	1c62      	adds	r2, r4, #1
 8024684:	d42f      	bmi.n	80246e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8024686:	4590      	cmp	r8, r2
 8024688:	dd2d      	ble.n	80246e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802468a:	b366      	cbz	r6, 80246e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802468c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024690:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024694:	f11e 0e01 	adds.w	lr, lr, #1
 8024698:	d429      	bmi.n	80246ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802469a:	45f3      	cmp	fp, lr
 802469c:	dd27      	ble.n	80246ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802469e:	f1bc 0f00 	cmp.w	ip, #0
 80246a2:	f000 80a1 	beq.w	80247e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 80246a6:	2c00      	cmp	r4, #0
 80246a8:	db1f      	blt.n	80246ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80246aa:	45a0      	cmp	r8, r4
 80246ac:	dd1d      	ble.n	80246ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80246ae:	f81a 2008 	ldrb.w	r2, [sl, r8]
 80246b2:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 80246b6:	3401      	adds	r4, #1
 80246b8:	d41c      	bmi.n	80246f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80246ba:	45a0      	cmp	r8, r4
 80246bc:	dd1a      	ble.n	80246f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80246be:	b1de      	cbz	r6, 80246f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 80246c0:	44d0      	add	r8, sl
 80246c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80246c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80246ca:	2e0f      	cmp	r6, #15
 80246cc:	d915      	bls.n	80246fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 80246ce:	4b49      	ldr	r3, [pc, #292]	; (80247f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 80246d0:	4a49      	ldr	r2, [pc, #292]	; (80247f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 80246d2:	484a      	ldr	r0, [pc, #296]	; (80247fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 80246d4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80246d8:	f009 fbba 	bl	802de50 <__assert_func>
 80246dc:	4681      	mov	r9, r0
 80246de:	e7d0      	b.n	8024682 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 80246e0:	4607      	mov	r7, r0
 80246e2:	4681      	mov	r9, r0
 80246e4:	e7d6      	b.n	8024694 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80246e6:	4607      	mov	r7, r0
 80246e8:	e7d4      	b.n	8024694 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80246ea:	4686      	mov	lr, r0
 80246ec:	e7e3      	b.n	80246b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 80246ee:	4603      	mov	r3, r0
 80246f0:	4686      	mov	lr, r0
 80246f2:	e7ea      	b.n	80246ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80246f4:	4603      	mov	r3, r0
 80246f6:	e7e8      	b.n	80246ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80246f8:	4603      	mov	r3, r0
 80246fa:	f1bc 0f0f 	cmp.w	ip, #15
 80246fe:	d8e6      	bhi.n	80246ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8024700:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8024704:	fb16 f80c 	smulbb	r8, r6, ip
 8024708:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802470c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024710:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024714:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8024718:	ea44 0909 	orr.w	r9, r4, r9
 802471c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024720:	f1cc 0410 	rsb	r4, ip, #16
 8024724:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024728:	1ba4      	subs	r4, r4, r6
 802472a:	041a      	lsls	r2, r3, #16
 802472c:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8024730:	ea4a 0707 	orr.w	r7, sl, r7
 8024734:	4377      	muls	r7, r6
 8024736:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802473a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802473e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024742:	fb04 7409 	mla	r4, r4, r9, r7
 8024746:	4313      	orrs	r3, r2
 8024748:	ea4f 420e 	mov.w	r2, lr, lsl #16
 802474c:	fb08 4303 	mla	r3, r8, r3, r4
 8024750:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024754:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8024758:	4322      	orrs	r2, r4
 802475a:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 802475e:	fb0c 3202 	mla	r2, ip, r2, r3
 8024762:	0d53      	lsrs	r3, r2, #21
 8024764:	0952      	lsrs	r2, r2, #5
 8024766:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802476a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802476e:	431a      	orrs	r2, r3
 8024770:	b293      	uxth	r3, r2
 8024772:	b2af      	uxth	r7, r5
 8024774:	1202      	asrs	r2, r0, #8
 8024776:	43ed      	mvns	r5, r5
 8024778:	b2ed      	uxtb	r5, r5
 802477a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802477e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024782:	fb12 f205 	smulbb	r2, r2, r5
 8024786:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802478a:	fb0c 2c07 	mla	ip, ip, r7, r2
 802478e:	00dc      	lsls	r4, r3, #3
 8024790:	10da      	asrs	r2, r3, #3
 8024792:	10c6      	asrs	r6, r0, #3
 8024794:	00c3      	lsls	r3, r0, #3
 8024796:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802479a:	b2db      	uxtb	r3, r3
 802479c:	fb16 f605 	smulbb	r6, r6, r5
 80247a0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80247a4:	b2e4      	uxtb	r4, r4
 80247a6:	fb13 f305 	smulbb	r3, r3, r5
 80247aa:	fa1f fc8c 	uxth.w	ip, ip
 80247ae:	fb02 6207 	mla	r2, r2, r7, r6
 80247b2:	fb04 3307 	mla	r3, r4, r7, r3
 80247b6:	b296      	uxth	r6, r2
 80247b8:	b29a      	uxth	r2, r3
 80247ba:	f10c 0301 	add.w	r3, ip, #1
 80247be:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80247c2:	1c53      	adds	r3, r2, #1
 80247c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80247c8:	1c72      	adds	r2, r6, #1
 80247ca:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80247ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80247d2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80247d6:	0952      	lsrs	r2, r2, #5
 80247d8:	ea43 030c 	orr.w	r3, r3, ip
 80247dc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80247e0:	4313      	orrs	r3, r2
 80247e2:	800b      	strh	r3, [r1, #0]
 80247e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247e8:	2e0f      	cmp	r6, #15
 80247ea:	f63f af70 	bhi.w	80246ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80247ee:	4603      	mov	r3, r0
 80247f0:	4686      	mov	lr, r0
 80247f2:	e785      	b.n	8024700 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 80247f4:	08032b71 	.word	0x08032b71
 80247f8:	080331e7 	.word	0x080331e7
 80247fc:	08032bf5 	.word	0x08032bf5

08024800 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024804:	ed2d 8b08 	vpush	{d8-d11}
 8024808:	b099      	sub	sp, #100	; 0x64
 802480a:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 802480e:	9215      	str	r2, [sp, #84]	; 0x54
 8024810:	9309      	str	r3, [sp, #36]	; 0x24
 8024812:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8024814:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8024818:	930d      	str	r3, [sp, #52]	; 0x34
 802481a:	910c      	str	r1, [sp, #48]	; 0x30
 802481c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8024820:	9016      	str	r0, [sp, #88]	; 0x58
 8024822:	6850      	ldr	r0, [r2, #4]
 8024824:	6812      	ldr	r2, [r2, #0]
 8024826:	fb00 1303 	mla	r3, r0, r3, r1
 802482a:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 802482e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024830:	681b      	ldr	r3, [r3, #0]
 8024832:	930b      	str	r3, [sp, #44]	; 0x2c
 8024834:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024836:	685e      	ldr	r6, [r3, #4]
 8024838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802483a:	43db      	mvns	r3, r3
 802483c:	b2db      	uxtb	r3, r3
 802483e:	eeb0 aa40 	vmov.f32	s20, s0
 8024842:	eef0 9a60 	vmov.f32	s19, s1
 8024846:	eeb0 9a41 	vmov.f32	s18, s2
 802484a:	eeb0 8a62 	vmov.f32	s16, s5
 802484e:	eef0 8a43 	vmov.f32	s17, s6
 8024852:	eef0 ba44 	vmov.f32	s23, s8
 8024856:	eeb0 ba64 	vmov.f32	s22, s9
 802485a:	eef0 aa45 	vmov.f32	s21, s10
 802485e:	3604      	adds	r6, #4
 8024860:	930a      	str	r3, [sp, #40]	; 0x28
 8024862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024864:	2b00      	cmp	r3, #0
 8024866:	dc03      	bgt.n	8024870 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024868:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802486a:	2b00      	cmp	r3, #0
 802486c:	f340 8225 	ble.w	8024cba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024870:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024872:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024876:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802487a:	1e48      	subs	r0, r1, #1
 802487c:	1e57      	subs	r7, r2, #1
 802487e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024880:	2b00      	cmp	r3, #0
 8024882:	f340 80e3 	ble.w	8024a4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8024886:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802488a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802488e:	d406      	bmi.n	802489e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024890:	4584      	cmp	ip, r0
 8024892:	da04      	bge.n	802489e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024894:	2b00      	cmp	r3, #0
 8024896:	db02      	blt.n	802489e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024898:	42bb      	cmp	r3, r7
 802489a:	f2c0 80d8 	blt.w	8024a4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802489e:	f11c 0c01 	adds.w	ip, ip, #1
 80248a2:	f100 80c9 	bmi.w	8024a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80248a6:	4561      	cmp	r1, ip
 80248a8:	f2c0 80c6 	blt.w	8024a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80248ac:	3301      	adds	r3, #1
 80248ae:	f100 80c3 	bmi.w	8024a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80248b2:	429a      	cmp	r2, r3
 80248b4:	f2c0 80c0 	blt.w	8024a38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80248b8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80248bc:	4647      	mov	r7, r8
 80248be:	f1bb 0f00 	cmp.w	fp, #0
 80248c2:	f340 80e3 	ble.w	8024a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80248c6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80248c8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80248ca:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80248ce:	689b      	ldr	r3, [r3, #8]
 80248d0:	ea5f 422a 	movs.w	r2, sl, asr #16
 80248d4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80248d8:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80248dc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80248e0:	f100 8121 	bmi.w	8024b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80248e4:	f103 39ff 	add.w	r9, r3, #4294967295
 80248e8:	454a      	cmp	r2, r9
 80248ea:	f280 811c 	bge.w	8024b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80248ee:	f1bc 0f00 	cmp.w	ip, #0
 80248f2:	f2c0 8118 	blt.w	8024b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80248f6:	f10e 39ff 	add.w	r9, lr, #4294967295
 80248fa:	45cc      	cmp	ip, r9
 80248fc:	f280 8113 	bge.w	8024b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8024900:	b21b      	sxth	r3, r3
 8024902:	fb0c 2203 	mla	r2, ip, r3, r2
 8024906:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024908:	eb04 0902 	add.w	r9, r4, r2
 802490c:	5ca2      	ldrb	r2, [r4, r2]
 802490e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8024912:	2800      	cmp	r0, #0
 8024914:	f000 80fe 	beq.w	8024b14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8024918:	f899 2001 	ldrb.w	r2, [r9, #1]
 802491c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024920:	9211      	str	r2, [sp, #68]	; 0x44
 8024922:	b151      	cbz	r1, 802493a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024924:	eb09 0203 	add.w	r2, r9, r3
 8024928:	f819 3003 	ldrb.w	r3, [r9, r3]
 802492c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024930:	930f      	str	r3, [sp, #60]	; 0x3c
 8024932:	7853      	ldrb	r3, [r2, #1]
 8024934:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024938:	9312      	str	r3, [sp, #72]	; 0x48
 802493a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802493c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802493e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024942:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024946:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802494a:	ea4c 0c03 	orr.w	ip, ip, r3
 802494e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024950:	041b      	lsls	r3, r3, #16
 8024952:	fb10 f201 	smulbb	r2, r0, r1
 8024956:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802495a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802495e:	10d2      	asrs	r2, r2, #3
 8024960:	4323      	orrs	r3, r4
 8024962:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8024966:	4353      	muls	r3, r2
 8024968:	fb09 330c 	mla	r3, r9, ip, r3
 802496c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024970:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024974:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024978:	ea4c 0e0e 	orr.w	lr, ip, lr
 802497c:	f1c1 0c10 	rsb	ip, r1, #16
 8024980:	ebac 0c00 	sub.w	ip, ip, r0
 8024984:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024988:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802498c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802498e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024990:	0418      	lsls	r0, r3, #16
 8024992:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024996:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802499a:	4318      	orrs	r0, r3
 802499c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80249a0:	fb02 c200 	mla	r2, r2, r0, ip
 80249a4:	0d53      	lsrs	r3, r2, #21
 80249a6:	0952      	lsrs	r2, r2, #5
 80249a8:	8838      	ldrh	r0, [r7, #0]
 80249aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80249ae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80249b2:	431a      	orrs	r2, r3
 80249b4:	b292      	uxth	r2, r2
 80249b6:	1201      	asrs	r1, r0, #8
 80249b8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80249bc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80249c0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80249c4:	fb11 f104 	smulbb	r1, r1, r4
 80249c8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80249cc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80249d0:	00c0      	lsls	r0, r0, #3
 80249d2:	fb0c 1c03 	mla	ip, ip, r3, r1
 80249d6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80249da:	10d1      	asrs	r1, r2, #3
 80249dc:	b2c0      	uxtb	r0, r0
 80249de:	00d2      	lsls	r2, r2, #3
 80249e0:	b2d2      	uxtb	r2, r2
 80249e2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80249e6:	fb1e fe04 	smulbb	lr, lr, r4
 80249ea:	fb10 f004 	smulbb	r0, r0, r4
 80249ee:	fa1f fc8c 	uxth.w	ip, ip
 80249f2:	fb01 e103 	mla	r1, r1, r3, lr
 80249f6:	fb02 0303 	mla	r3, r2, r3, r0
 80249fa:	b29a      	uxth	r2, r3
 80249fc:	f10c 0301 	add.w	r3, ip, #1
 8024a00:	b289      	uxth	r1, r1
 8024a02:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024a06:	1c53      	adds	r3, r2, #1
 8024a08:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024a0c:	1c4a      	adds	r2, r1, #1
 8024a0e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024a12:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024a16:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024a1a:	0949      	lsrs	r1, r1, #5
 8024a1c:	ea43 030c 	orr.w	r3, r3, ip
 8024a20:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024a24:	430b      	orrs	r3, r1
 8024a26:	803b      	strh	r3, [r7, #0]
 8024a28:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024a2a:	449a      	add	sl, r3
 8024a2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024a2e:	3702      	adds	r7, #2
 8024a30:	441d      	add	r5, r3
 8024a32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024a36:	e742      	b.n	80248be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024a38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024a3a:	449a      	add	sl, r3
 8024a3c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024a3e:	441d      	add	r5, r3
 8024a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a42:	3b01      	subs	r3, #1
 8024a44:	9309      	str	r3, [sp, #36]	; 0x24
 8024a46:	f108 0802 	add.w	r8, r8, #2
 8024a4a:	e718      	b.n	802487e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8024a4c:	d023      	beq.n	8024a96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a50:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8024a52:	3b01      	subs	r3, #1
 8024a54:	fb00 a003 	mla	r0, r0, r3, sl
 8024a58:	1400      	asrs	r0, r0, #16
 8024a5a:	f53f af2d 	bmi.w	80248b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024a5e:	3901      	subs	r1, #1
 8024a60:	4288      	cmp	r0, r1
 8024a62:	f6bf af29 	bge.w	80248b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024a66:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024a68:	fb01 5303 	mla	r3, r1, r3, r5
 8024a6c:	141b      	asrs	r3, r3, #16
 8024a6e:	f53f af23 	bmi.w	80248b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024a72:	3a01      	subs	r2, #1
 8024a74:	4293      	cmp	r3, r2
 8024a76:	f6bf af1f 	bge.w	80248b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024a7a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024a7e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8024a82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8024a86:	f1be 0f00 	cmp.w	lr, #0
 8024a8a:	dc6c      	bgt.n	8024b66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8024a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a8e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024a92:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8024a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a98:	2b00      	cmp	r3, #0
 8024a9a:	f340 810e 	ble.w	8024cba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024a9e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024aa6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024aaa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024aac:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024ab0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024ab4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024ab8:	eef0 6a48 	vmov.f32	s13, s16
 8024abc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024ac0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ac4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024ac8:	ee16 aa90 	vmov	sl, s13
 8024acc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024ad0:	eef0 6a68 	vmov.f32	s13, s17
 8024ad4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024ad8:	ee18 2a10 	vmov	r2, s16
 8024adc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ae4:	ee18 2a90 	vmov	r2, s17
 8024ae8:	932d      	str	r3, [sp, #180]	; 0xb4
 8024aea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024aec:	fb92 f3f3 	sdiv	r3, r2, r3
 8024af0:	932e      	str	r3, [sp, #184]	; 0xb8
 8024af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024af4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024af6:	3b01      	subs	r3, #1
 8024af8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024afc:	930c      	str	r3, [sp, #48]	; 0x30
 8024afe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024b00:	bf08      	it	eq
 8024b02:	4613      	moveq	r3, r2
 8024b04:	ee16 5a90 	vmov	r5, s13
 8024b08:	9309      	str	r3, [sp, #36]	; 0x24
 8024b0a:	eef0 8a67 	vmov.f32	s17, s15
 8024b0e:	eeb0 8a47 	vmov.f32	s16, s14
 8024b12:	e6a6      	b.n	8024862 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8024b14:	2900      	cmp	r1, #0
 8024b16:	f43f af10 	beq.w	802493a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024b1a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024b1e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8024b24:	e709      	b.n	802493a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024b26:	f112 0901 	adds.w	r9, r2, #1
 8024b2a:	f53f af7d 	bmi.w	8024a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024b2e:	454b      	cmp	r3, r9
 8024b30:	f6ff af7a 	blt.w	8024a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024b34:	f11c 0901 	adds.w	r9, ip, #1
 8024b38:	f53f af76 	bmi.w	8024a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024b3c:	45ce      	cmp	lr, r9
 8024b3e:	f6ff af73 	blt.w	8024a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024b42:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024b44:	9202      	str	r2, [sp, #8]
 8024b46:	b21b      	sxth	r3, r3
 8024b48:	fa0f f28e 	sxth.w	r2, lr
 8024b4c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024b50:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024b54:	9201      	str	r2, [sp, #4]
 8024b56:	9300      	str	r3, [sp, #0]
 8024b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024b5a:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024b5c:	4633      	mov	r3, r6
 8024b5e:	4639      	mov	r1, r7
 8024b60:	f7ff fd70 	bl	8024644 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024b64:	e760      	b.n	8024a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024b66:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024b68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024b6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024b6e:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024b72:	1429      	asrs	r1, r5, #16
 8024b74:	fb03 2101 	mla	r1, r3, r1, r2
 8024b78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024b7a:	440a      	add	r2, r1
 8024b7c:	5c61      	ldrb	r1, [r4, r1]
 8024b7e:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8024b82:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024b86:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024b8a:	f1bc 0f00 	cmp.w	ip, #0
 8024b8e:	f000 808c 	beq.w	8024caa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8024b92:	7857      	ldrb	r7, [r2, #1]
 8024b94:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024b98:	9413      	str	r4, [sp, #76]	; 0x4c
 8024b9a:	b140      	cbz	r0, 8024bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024b9c:	18d7      	adds	r7, r2, r3
 8024b9e:	5cd3      	ldrb	r3, [r2, r3]
 8024ba0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024ba4:	9310      	str	r3, [sp, #64]	; 0x40
 8024ba6:	787b      	ldrb	r3, [r7, #1]
 8024ba8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024bac:	9314      	str	r3, [sp, #80]	; 0x50
 8024bae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024bb0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024bb2:	fb1c f200 	smulbb	r2, ip, r0
 8024bb6:	041f      	lsls	r7, r3, #16
 8024bb8:	10d2      	asrs	r2, r2, #3
 8024bba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024bbe:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8024bc2:	431f      	orrs	r7, r3
 8024bc4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8024bc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8024bca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8024bcc:	041b      	lsls	r3, r3, #16
 8024bce:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8024bd2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024bd6:	ea43 030b 	orr.w	r3, r3, fp
 8024bda:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024bdc:	4353      	muls	r3, r2
 8024bde:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024be2:	fb04 3707 	mla	r7, r4, r7, r3
 8024be6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024bea:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8024bee:	ea43 0b01 	orr.w	fp, r3, r1
 8024bf2:	f1c0 0110 	rsb	r1, r0, #16
 8024bf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024bf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024bfa:	eba1 0c0c 	sub.w	ip, r1, ip
 8024bfe:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024c02:	fb0c 770b 	mla	r7, ip, fp, r7
 8024c06:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024c0a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8024c0e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024c12:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024c16:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024c1a:	fb02 770c 	mla	r7, r2, ip, r7
 8024c1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024c20:	0d79      	lsrs	r1, r7, #21
 8024c22:	097f      	lsrs	r7, r7, #5
 8024c24:	8812      	ldrh	r2, [r2, #0]
 8024c26:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024c2a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024c2e:	430f      	orrs	r7, r1
 8024c30:	b2bb      	uxth	r3, r7
 8024c32:	1211      	asrs	r1, r2, #8
 8024c34:	1218      	asrs	r0, r3, #8
 8024c36:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024c3a:	fb11 f104 	smulbb	r1, r1, r4
 8024c3e:	10d7      	asrs	r7, r2, #3
 8024c40:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024c44:	00d2      	lsls	r2, r2, #3
 8024c46:	fb00 1009 	mla	r0, r0, r9, r1
 8024c4a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024c4e:	10d9      	asrs	r1, r3, #3
 8024c50:	b2d2      	uxtb	r2, r2
 8024c52:	00db      	lsls	r3, r3, #3
 8024c54:	fb17 f704 	smulbb	r7, r7, r4
 8024c58:	fb12 f204 	smulbb	r2, r2, r4
 8024c5c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024c60:	b2db      	uxtb	r3, r3
 8024c62:	b280      	uxth	r0, r0
 8024c64:	fb01 7109 	mla	r1, r1, r9, r7
 8024c68:	fb03 2309 	mla	r3, r3, r9, r2
 8024c6c:	b29b      	uxth	r3, r3
 8024c6e:	b289      	uxth	r1, r1
 8024c70:	1c42      	adds	r2, r0, #1
 8024c72:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024c76:	1c4f      	adds	r7, r1, #1
 8024c78:	1c5a      	adds	r2, r3, #1
 8024c7a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024c7e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024c82:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024c86:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024c8a:	0949      	lsrs	r1, r1, #5
 8024c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024c8e:	4310      	orrs	r0, r2
 8024c90:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024c94:	4308      	orrs	r0, r1
 8024c96:	f823 0b02 	strh.w	r0, [r3], #2
 8024c9a:	930e      	str	r3, [sp, #56]	; 0x38
 8024c9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024c9e:	449a      	add	sl, r3
 8024ca0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024ca2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024ca6:	441d      	add	r5, r3
 8024ca8:	e6ed      	b.n	8024a86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8024caa:	2800      	cmp	r0, #0
 8024cac:	f43f af7f 	beq.w	8024bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024cb0:	5cd3      	ldrb	r3, [r2, r3]
 8024cb2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024cb6:	9310      	str	r3, [sp, #64]	; 0x40
 8024cb8:	e779      	b.n	8024bae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024cba:	b019      	add	sp, #100	; 0x64
 8024cbc:	ecbd 8b08 	vpop	{d8-d11}
 8024cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024cc8:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8024ccc:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8024cd0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8024cd4:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8024cd8:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8024cdc:	8808      	ldrh	r0, [r1, #0]
 8024cde:	fb06 570e 	mla	r7, r6, lr, r5
 8024ce2:	2e00      	cmp	r6, #0
 8024ce4:	eb02 0807 	add.w	r8, r2, r7
 8024ce8:	db38      	blt.n	8024d5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8024cea:	45b1      	cmp	r9, r6
 8024cec:	dd36      	ble.n	8024d5c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8024cee:	2d00      	cmp	r5, #0
 8024cf0:	db32      	blt.n	8024d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8024cf2:	45ae      	cmp	lr, r5
 8024cf4:	dd30      	ble.n	8024d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8024cf6:	5dd2      	ldrb	r2, [r2, r7]
 8024cf8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024cfc:	1c6a      	adds	r2, r5, #1
 8024cfe:	d430      	bmi.n	8024d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024d00:	4596      	cmp	lr, r2
 8024d02:	dd2e      	ble.n	8024d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024d04:	b36c      	cbz	r4, 8024d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024d06:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024d0a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024d0e:	3601      	adds	r6, #1
 8024d10:	d42b      	bmi.n	8024d6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8024d12:	45b1      	cmp	r9, r6
 8024d14:	dd29      	ble.n	8024d6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8024d16:	f1bc 0f00 	cmp.w	ip, #0
 8024d1a:	d028      	beq.n	8024d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8024d1c:	2d00      	cmp	r5, #0
 8024d1e:	db22      	blt.n	8024d66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024d20:	45ae      	cmp	lr, r5
 8024d22:	dd20      	ble.n	8024d66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024d24:	f818 600e 	ldrb.w	r6, [r8, lr]
 8024d28:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8024d2c:	3501      	adds	r5, #1
 8024d2e:	d407      	bmi.n	8024d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024d30:	45ae      	cmp	lr, r5
 8024d32:	dd05      	ble.n	8024d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024d34:	b134      	cbz	r4, 8024d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8024d36:	44c6      	add	lr, r8
 8024d38:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024d3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024d40:	2c0f      	cmp	r4, #15
 8024d42:	d802      	bhi.n	8024d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8024d44:	f1bc 0f0f 	cmp.w	ip, #15
 8024d48:	d914      	bls.n	8024d74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8024d4a:	4b26      	ldr	r3, [pc, #152]	; (8024de4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8024d4c:	4a26      	ldr	r2, [pc, #152]	; (8024de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8024d4e:	4827      	ldr	r0, [pc, #156]	; (8024dec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8024d50:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024d54:	f009 f87c 	bl	802de50 <__assert_func>
 8024d58:	4607      	mov	r7, r0
 8024d5a:	e7cf      	b.n	8024cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8024d5c:	4602      	mov	r2, r0
 8024d5e:	4607      	mov	r7, r0
 8024d60:	e7d5      	b.n	8024d0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8024d62:	4602      	mov	r2, r0
 8024d64:	e7d3      	b.n	8024d0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8024d66:	4606      	mov	r6, r0
 8024d68:	e7e0      	b.n	8024d2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8024d6a:	4606      	mov	r6, r0
 8024d6c:	e7e8      	b.n	8024d40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024d6e:	2c0f      	cmp	r4, #15
 8024d70:	d8eb      	bhi.n	8024d4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8024d72:	4606      	mov	r6, r0
 8024d74:	043d      	lsls	r5, r7, #16
 8024d76:	fb14 f30c 	smulbb	r3, r4, ip
 8024d7a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024d7e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8024d82:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024d86:	10db      	asrs	r3, r3, #3
 8024d88:	432f      	orrs	r7, r5
 8024d8a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024d8e:	f1cc 0510 	rsb	r5, ip, #16
 8024d92:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024d96:	1b2d      	subs	r5, r5, r4
 8024d98:	ea4e 0202 	orr.w	r2, lr, r2
 8024d9c:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8024da0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8024da4:	4354      	muls	r4, r2
 8024da6:	fb05 4507 	mla	r5, r5, r7, r4
 8024daa:	0404      	lsls	r4, r0, #16
 8024dac:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024db0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024db4:	4320      	orrs	r0, r4
 8024db6:	fb03 5400 	mla	r4, r3, r0, r5
 8024dba:	0430      	lsls	r0, r6, #16
 8024dbc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024dc0:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024dc4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8024dc8:	4330      	orrs	r0, r6
 8024dca:	fb03 4000 	mla	r0, r3, r0, r4
 8024dce:	0d43      	lsrs	r3, r0, #21
 8024dd0:	0940      	lsrs	r0, r0, #5
 8024dd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024dd6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024dda:	4318      	orrs	r0, r3
 8024ddc:	8008      	strh	r0, [r1, #0]
 8024dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024de2:	bf00      	nop
 8024de4:	08032b71 	.word	0x08032b71
 8024de8:	080331e7 	.word	0x080331e7
 8024dec:	08032bf5 	.word	0x08032bf5

08024df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024df4:	ed2d 8b0a 	vpush	{d8-d12}
 8024df8:	b093      	sub	sp, #76	; 0x4c
 8024dfa:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8024dfe:	920f      	str	r2, [sp, #60]	; 0x3c
 8024e00:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024e02:	9108      	str	r1, [sp, #32]
 8024e04:	9306      	str	r3, [sp, #24]
 8024e06:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024e0a:	9010      	str	r0, [sp, #64]	; 0x40
 8024e0c:	6850      	ldr	r0, [r2, #4]
 8024e0e:	6812      	ldr	r2, [r2, #0]
 8024e10:	fb00 1303 	mla	r3, r0, r3, r1
 8024e14:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024e18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024e1a:	681b      	ldr	r3, [r3, #0]
 8024e1c:	9307      	str	r3, [sp, #28]
 8024e1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024e20:	685f      	ldr	r7, [r3, #4]
 8024e22:	eeb0 aa40 	vmov.f32	s20, s0
 8024e26:	eef0 9a60 	vmov.f32	s19, s1
 8024e2a:	eeb0 9a41 	vmov.f32	s18, s2
 8024e2e:	eeb0 8a62 	vmov.f32	s16, s5
 8024e32:	eef0 8a43 	vmov.f32	s17, s6
 8024e36:	eeb0 ca44 	vmov.f32	s24, s8
 8024e3a:	eef0 ba64 	vmov.f32	s23, s9
 8024e3e:	eeb0 ba45 	vmov.f32	s22, s10
 8024e42:	3704      	adds	r7, #4
 8024e44:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024e48:	9b08      	ldr	r3, [sp, #32]
 8024e4a:	2b00      	cmp	r3, #0
 8024e4c:	dc03      	bgt.n	8024e56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024e50:	2b00      	cmp	r3, #0
 8024e52:	f340 81b2 	ble.w	80251ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024e56:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024e58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024e5c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024e60:	1e48      	subs	r0, r1, #1
 8024e62:	f102 3cff 	add.w	ip, r2, #4294967295
 8024e66:	9b06      	ldr	r3, [sp, #24]
 8024e68:	2b00      	cmp	r3, #0
 8024e6a:	f340 80a9 	ble.w	8024fc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024e6e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024e72:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024e76:	d406      	bmi.n	8024e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024e78:	4586      	cmp	lr, r0
 8024e7a:	da04      	bge.n	8024e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024e7c:	2b00      	cmp	r3, #0
 8024e7e:	db02      	blt.n	8024e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024e80:	4563      	cmp	r3, ip
 8024e82:	f2c0 809e 	blt.w	8024fc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8024e86:	f11e 0e01 	adds.w	lr, lr, #1
 8024e8a:	f100 808f 	bmi.w	8024fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024e8e:	4571      	cmp	r1, lr
 8024e90:	f2c0 808c 	blt.w	8024fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024e94:	3301      	adds	r3, #1
 8024e96:	f100 8089 	bmi.w	8024fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024e9a:	429a      	cmp	r2, r3
 8024e9c:	f2c0 8086 	blt.w	8024fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024ea0:	f8dd b018 	ldr.w	fp, [sp, #24]
 8024ea4:	46c8      	mov	r8, r9
 8024ea6:	f1bb 0f00 	cmp.w	fp, #0
 8024eaa:	f340 80a6 	ble.w	8024ffa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024eae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024eb0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024eb2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024eb6:	689b      	ldr	r3, [r3, #8]
 8024eb8:	1422      	asrs	r2, r4, #16
 8024eba:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024ebe:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024ec2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024ec6:	f100 80e3 	bmi.w	8025090 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024eca:	f103 3aff 	add.w	sl, r3, #4294967295
 8024ece:	4552      	cmp	r2, sl
 8024ed0:	f280 80de 	bge.w	8025090 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024ed4:	f1bc 0f00 	cmp.w	ip, #0
 8024ed8:	f2c0 80da 	blt.w	8025090 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024edc:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024ee0:	45d4      	cmp	ip, sl
 8024ee2:	f280 80d5 	bge.w	8025090 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024ee6:	b21b      	sxth	r3, r3
 8024ee8:	fb0c 2203 	mla	r2, ip, r3, r2
 8024eec:	9d07      	ldr	r5, [sp, #28]
 8024eee:	eb05 0a02 	add.w	sl, r5, r2
 8024ef2:	5caa      	ldrb	r2, [r5, r2]
 8024ef4:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8024ef8:	2800      	cmp	r0, #0
 8024efa:	f000 80c0 	beq.w	802507e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8024efe:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024f02:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8024f06:	920b      	str	r2, [sp, #44]	; 0x2c
 8024f08:	b151      	cbz	r1, 8024f20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8024f0a:	eb0a 0203 	add.w	r2, sl, r3
 8024f0e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024f12:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024f16:	9309      	str	r3, [sp, #36]	; 0x24
 8024f18:	7853      	ldrb	r3, [r2, #1]
 8024f1a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8024f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024f24:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024f28:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024f2c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024f30:	ea4c 0c03 	orr.w	ip, ip, r3
 8024f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024f36:	041b      	lsls	r3, r3, #16
 8024f38:	fb10 f201 	smulbb	r2, r0, r1
 8024f3c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024f40:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024f44:	10d2      	asrs	r2, r2, #3
 8024f46:	432b      	orrs	r3, r5
 8024f48:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8024f4c:	4353      	muls	r3, r2
 8024f4e:	fb0a 330c 	mla	r3, sl, ip, r3
 8024f52:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024f56:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024f5a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024f5e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024f62:	f1c1 0c10 	rsb	ip, r1, #16
 8024f66:	ebac 0c00 	sub.w	ip, ip, r0
 8024f6a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024f6e:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f74:	0418      	lsls	r0, r3, #16
 8024f76:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024f7a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024f7e:	4318      	orrs	r0, r3
 8024f80:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024f84:	fb02 c200 	mla	r2, r2, r0, ip
 8024f88:	0d53      	lsrs	r3, r2, #21
 8024f8a:	0952      	lsrs	r2, r2, #5
 8024f8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024f90:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024f94:	431a      	orrs	r2, r3
 8024f96:	f8a8 2000 	strh.w	r2, [r8]
 8024f9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024f9c:	441c      	add	r4, r3
 8024f9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fa0:	f108 0802 	add.w	r8, r8, #2
 8024fa4:	441e      	add	r6, r3
 8024fa6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024faa:	e77c      	b.n	8024ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024fac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024fae:	441c      	add	r4, r3
 8024fb0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fb2:	441e      	add	r6, r3
 8024fb4:	9b06      	ldr	r3, [sp, #24]
 8024fb6:	3b01      	subs	r3, #1
 8024fb8:	9306      	str	r3, [sp, #24]
 8024fba:	f109 0902 	add.w	r9, r9, #2
 8024fbe:	e752      	b.n	8024e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8024fc0:	d020      	beq.n	8025004 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024fc2:	9b06      	ldr	r3, [sp, #24]
 8024fc4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8024fc6:	3b01      	subs	r3, #1
 8024fc8:	fb00 4003 	mla	r0, r0, r3, r4
 8024fcc:	1400      	asrs	r0, r0, #16
 8024fce:	f53f af67 	bmi.w	8024ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024fd2:	3901      	subs	r1, #1
 8024fd4:	4288      	cmp	r0, r1
 8024fd6:	f6bf af63 	bge.w	8024ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024fda:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024fdc:	fb01 6303 	mla	r3, r1, r3, r6
 8024fe0:	141b      	asrs	r3, r3, #16
 8024fe2:	f53f af5d 	bmi.w	8024ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024fe6:	3a01      	subs	r2, #1
 8024fe8:	4293      	cmp	r3, r2
 8024fea:	f6bf af59 	bge.w	8024ea0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024fee:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8024ff2:	46ca      	mov	sl, r9
 8024ff4:	f1b8 0f00 	cmp.w	r8, #0
 8024ff8:	dc67      	bgt.n	80250ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8024ffa:	9b06      	ldr	r3, [sp, #24]
 8024ffc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025000:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8025004:	9b08      	ldr	r3, [sp, #32]
 8025006:	2b00      	cmp	r3, #0
 8025008:	f340 80d7 	ble.w	80251ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802500c:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8025010:	ee79 9aab 	vadd.f32	s19, s19, s23
 8025014:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8025018:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802501a:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802501e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025022:	eef0 6a48 	vmov.f32	s13, s16
 8025026:	ee69 7a27 	vmul.f32	s15, s18, s15
 802502a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802502e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025032:	ee16 4a90 	vmov	r4, s13
 8025036:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802503a:	eef0 6a68 	vmov.f32	s13, s17
 802503e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025042:	ee18 2a10 	vmov	r2, s16
 8025046:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802504a:	fb92 f3f3 	sdiv	r3, r2, r3
 802504e:	ee18 2a90 	vmov	r2, s17
 8025052:	9329      	str	r3, [sp, #164]	; 0xa4
 8025054:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025056:	fb92 f3f3 	sdiv	r3, r2, r3
 802505a:	932a      	str	r3, [sp, #168]	; 0xa8
 802505c:	9b08      	ldr	r3, [sp, #32]
 802505e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025060:	3b01      	subs	r3, #1
 8025062:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025066:	9308      	str	r3, [sp, #32]
 8025068:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802506a:	bf08      	it	eq
 802506c:	4613      	moveq	r3, r2
 802506e:	ee16 6a90 	vmov	r6, s13
 8025072:	9306      	str	r3, [sp, #24]
 8025074:	eef0 8a67 	vmov.f32	s17, s15
 8025078:	eeb0 8a47 	vmov.f32	s16, s14
 802507c:	e6e4      	b.n	8024e48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802507e:	2900      	cmp	r1, #0
 8025080:	f43f af4e 	beq.w	8024f20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8025084:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025088:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802508c:	9309      	str	r3, [sp, #36]	; 0x24
 802508e:	e747      	b.n	8024f20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8025090:	f112 0a01 	adds.w	sl, r2, #1
 8025094:	d481      	bmi.n	8024f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025096:	4553      	cmp	r3, sl
 8025098:	f6ff af7f 	blt.w	8024f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802509c:	f11c 0a01 	adds.w	sl, ip, #1
 80250a0:	f53f af7b 	bmi.w	8024f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80250a4:	45d6      	cmp	lr, sl
 80250a6:	f6ff af78 	blt.w	8024f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80250aa:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80250ae:	b21b      	sxth	r3, r3
 80250b0:	fa0f f28e 	sxth.w	r2, lr
 80250b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80250b8:	9201      	str	r2, [sp, #4]
 80250ba:	9300      	str	r3, [sp, #0]
 80250bc:	9a07      	ldr	r2, [sp, #28]
 80250be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80250c0:	463b      	mov	r3, r7
 80250c2:	4641      	mov	r1, r8
 80250c4:	f7ff fdfe 	bl	8024cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80250c8:	e767      	b.n	8024f9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80250ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80250cc:	9d07      	ldr	r5, [sp, #28]
 80250ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80250d2:	1422      	asrs	r2, r4, #16
 80250d4:	1431      	asrs	r1, r6, #16
 80250d6:	fb03 2101 	mla	r1, r3, r1, r2
 80250da:	9a07      	ldr	r2, [sp, #28]
 80250dc:	440a      	add	r2, r1
 80250de:	5c69      	ldrb	r1, [r5, r1]
 80250e0:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80250e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80250e8:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80250ec:	f1be 0f00 	cmp.w	lr, #0
 80250f0:	d05c      	beq.n	80251ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80250f2:	f892 c001 	ldrb.w	ip, [r2, #1]
 80250f6:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80250fa:	950d      	str	r5, [sp, #52]	; 0x34
 80250fc:	b150      	cbz	r0, 8025114 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80250fe:	eb02 0c03 	add.w	ip, r2, r3
 8025102:	5cd3      	ldrb	r3, [r2, r3]
 8025104:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025108:	930a      	str	r3, [sp, #40]	; 0x28
 802510a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802510e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025112:	930e      	str	r3, [sp, #56]	; 0x38
 8025114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025116:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025118:	fb1e f200 	smulbb	r2, lr, r0
 802511c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025120:	10d2      	asrs	r2, r2, #3
 8025122:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025126:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802512a:	ea4c 0c03 	orr.w	ip, ip, r3
 802512e:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8025132:	9311      	str	r3, [sp, #68]	; 0x44
 8025134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025136:	041b      	lsls	r3, r3, #16
 8025138:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802513c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025140:	ea43 030b 	orr.w	r3, r3, fp
 8025144:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025146:	4353      	muls	r3, r2
 8025148:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802514c:	fb05 3c0c 	mla	ip, r5, ip, r3
 8025150:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025154:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8025158:	ea43 0b01 	orr.w	fp, r3, r1
 802515c:	f1c0 0110 	rsb	r1, r0, #16
 8025160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025162:	eba1 0e0e 	sub.w	lr, r1, lr
 8025166:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 802516a:	fb0e cc0b 	mla	ip, lr, fp, ip
 802516e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8025172:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8025176:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802517a:	ea4b 0e0e 	orr.w	lr, fp, lr
 802517e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8025182:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025186:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802518a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802518e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025192:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025196:	ea43 0c0c 	orr.w	ip, r3, ip
 802519a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802519c:	f82a cb02 	strh.w	ip, [sl], #2
 80251a0:	441c      	add	r4, r3
 80251a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80251a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80251a8:	441e      	add	r6, r3
 80251aa:	e723      	b.n	8024ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80251ac:	2800      	cmp	r0, #0
 80251ae:	d0b1      	beq.n	8025114 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80251b0:	5cd3      	ldrb	r3, [r2, r3]
 80251b2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80251b6:	930a      	str	r3, [sp, #40]	; 0x28
 80251b8:	e7ac      	b.n	8025114 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80251ba:	b013      	add	sp, #76	; 0x4c
 80251bc:	ecbd 8b0a 	vpop	{d8-d12}
 80251c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080251c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80251c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251c8:	468b      	mov	fp, r1
 80251ca:	8809      	ldrh	r1, [r1, #0]
 80251cc:	b089      	sub	sp, #36	; 0x24
 80251ce:	10cd      	asrs	r5, r1, #3
 80251d0:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 80251d4:	ea4f 2921 	mov.w	r9, r1, asr #8
 80251d8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80251dc:	00c9      	lsls	r1, r1, #3
 80251de:	9500      	str	r5, [sp, #0]
 80251e0:	b2c9      	uxtb	r1, r1
 80251e2:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80251e6:	9101      	str	r1, [sp, #4]
 80251e8:	9900      	ldr	r1, [sp, #0]
 80251ea:	9202      	str	r2, [sp, #8]
 80251ec:	fb04 650e 	mla	r5, r4, lr, r6
 80251f0:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80251f4:	eb02 0805 	add.w	r8, r2, r5
 80251f8:	0209      	lsls	r1, r1, #8
 80251fa:	9a01      	ldr	r2, [sp, #4]
 80251fc:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8025200:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8025204:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8025208:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 802520c:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8025210:	4311      	orrs	r1, r2
 8025212:	2c00      	cmp	r4, #0
 8025214:	9107      	str	r1, [sp, #28]
 8025216:	db43      	blt.n	80252a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8025218:	45a2      	cmp	sl, r4
 802521a:	dd41      	ble.n	80252a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 802521c:	2e00      	cmp	r6, #0
 802521e:	db3d      	blt.n	802529c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8025220:	45b6      	cmp	lr, r6
 8025222:	dd3b      	ble.n	802529c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8025224:	9a02      	ldr	r2, [sp, #8]
 8025226:	5d55      	ldrb	r5, [r2, r5]
 8025228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802522c:	441d      	add	r5, r3
 802522e:	1c72      	adds	r2, r6, #1
 8025230:	d439      	bmi.n	80252a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8025232:	4596      	cmp	lr, r2
 8025234:	dd37      	ble.n	80252a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8025236:	2f00      	cmp	r7, #0
 8025238:	d035      	beq.n	80252a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 802523a:	f898 1001 	ldrb.w	r1, [r8, #1]
 802523e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8025242:	4419      	add	r1, r3
 8025244:	3401      	adds	r4, #1
 8025246:	d432      	bmi.n	80252ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8025248:	45a2      	cmp	sl, r4
 802524a:	dd30      	ble.n	80252ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 802524c:	b378      	cbz	r0, 80252ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 802524e:	2e00      	cmp	r6, #0
 8025250:	db2b      	blt.n	80252aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8025252:	45b6      	cmp	lr, r6
 8025254:	dd29      	ble.n	80252aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8025256:	f818 400e 	ldrb.w	r4, [r8, lr]
 802525a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802525e:	441c      	add	r4, r3
 8025260:	3601      	adds	r6, #1
 8025262:	d427      	bmi.n	80252b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8025264:	45b6      	cmp	lr, r6
 8025266:	dd25      	ble.n	80252b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8025268:	b327      	cbz	r7, 80252b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 802526a:	44c6      	add	lr, r8
 802526c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025270:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025274:	4413      	add	r3, r2
 8025276:	782a      	ldrb	r2, [r5, #0]
 8025278:	9202      	str	r2, [sp, #8]
 802527a:	780a      	ldrb	r2, [r1, #0]
 802527c:	9203      	str	r2, [sp, #12]
 802527e:	7822      	ldrb	r2, [r4, #0]
 8025280:	9204      	str	r2, [sp, #16]
 8025282:	2f0f      	cmp	r7, #15
 8025284:	781a      	ldrb	r2, [r3, #0]
 8025286:	9205      	str	r2, [sp, #20]
 8025288:	d801      	bhi.n	802528e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 802528a:	280f      	cmp	r0, #15
 802528c:	d914      	bls.n	80252b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 802528e:	4b3f      	ldr	r3, [pc, #252]	; (802538c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8025290:	4a3f      	ldr	r2, [pc, #252]	; (8025390 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8025292:	4840      	ldr	r0, [pc, #256]	; (8025394 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8025294:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025298:	f008 fdda 	bl	802de50 <__assert_func>
 802529c:	ad07      	add	r5, sp, #28
 802529e:	e7c6      	b.n	802522e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 80252a0:	a907      	add	r1, sp, #28
 80252a2:	460d      	mov	r5, r1
 80252a4:	e7ce      	b.n	8025244 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80252a6:	a907      	add	r1, sp, #28
 80252a8:	e7cc      	b.n	8025244 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80252aa:	ac07      	add	r4, sp, #28
 80252ac:	e7d8      	b.n	8025260 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 80252ae:	ab07      	add	r3, sp, #28
 80252b0:	461c      	mov	r4, r3
 80252b2:	e7e0      	b.n	8025276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 80252b4:	ab07      	add	r3, sp, #28
 80252b6:	e7de      	b.n	8025276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 80252b8:	b2ba      	uxth	r2, r7
 80252ba:	b280      	uxth	r0, r0
 80252bc:	fb02 fa00 	mul.w	sl, r2, r0
 80252c0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80252c4:	0112      	lsls	r2, r2, #4
 80252c6:	b280      	uxth	r0, r0
 80252c8:	f891 8002 	ldrb.w	r8, [r1, #2]
 80252cc:	7849      	ldrb	r1, [r1, #1]
 80252ce:	78ae      	ldrb	r6, [r5, #2]
 80252d0:	786d      	ldrb	r5, [r5, #1]
 80252d2:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80252d6:	eba2 020a 	sub.w	r2, r2, sl
 80252da:	b292      	uxth	r2, r2
 80252dc:	ebae 0e00 	sub.w	lr, lr, r0
 80252e0:	fa1f fe8e 	uxth.w	lr, lr
 80252e4:	4351      	muls	r1, r2
 80252e6:	fb02 f808 	mul.w	r8, r2, r8
 80252ea:	fb0e 8806 	mla	r8, lr, r6, r8
 80252ee:	fb0e 1505 	mla	r5, lr, r5, r1
 80252f2:	78a6      	ldrb	r6, [r4, #2]
 80252f4:	7861      	ldrb	r1, [r4, #1]
 80252f6:	fa1f f78c 	uxth.w	r7, ip
 80252fa:	fb00 8806 	mla	r8, r0, r6, r8
 80252fe:	fb00 5501 	mla	r5, r0, r1, r5
 8025302:	789e      	ldrb	r6, [r3, #2]
 8025304:	7859      	ldrb	r1, [r3, #1]
 8025306:	9b00      	ldr	r3, [sp, #0]
 8025308:	ea6f 0c0c 	mvn.w	ip, ip
 802530c:	fa5f fc8c 	uxtb.w	ip, ip
 8025310:	fb0a 5101 	mla	r1, sl, r1, r5
 8025314:	fb13 f50c 	smulbb	r5, r3, ip
 8025318:	9b03      	ldr	r3, [sp, #12]
 802531a:	435a      	muls	r2, r3
 802531c:	9b02      	ldr	r3, [sp, #8]
 802531e:	fb0e 2203 	mla	r2, lr, r3, r2
 8025322:	9b04      	ldr	r3, [sp, #16]
 8025324:	fb00 2003 	mla	r0, r0, r3, r2
 8025328:	9b05      	ldr	r3, [sp, #20]
 802532a:	fb0a 8606 	mla	r6, sl, r6, r8
 802532e:	fb19 f90c 	smulbb	r9, r9, ip
 8025332:	fb0a 0a03 	mla	sl, sl, r3, r0
 8025336:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802533a:	9b01      	ldr	r3, [sp, #4]
 802533c:	fb06 9607 	mla	r6, r6, r7, r9
 8025340:	b2b6      	uxth	r6, r6
 8025342:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8025346:	fb13 fc0c 	smulbb	ip, r3, ip
 802534a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802534e:	fb01 5107 	mla	r1, r1, r7, r5
 8025352:	f106 0901 	add.w	r9, r6, #1
 8025356:	fb0a c707 	mla	r7, sl, r7, ip
 802535a:	b2bf      	uxth	r7, r7
 802535c:	b289      	uxth	r1, r1
 802535e:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8025362:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8025366:	1c4d      	adds	r5, r1, #1
 8025368:	1c7e      	adds	r6, r7, #1
 802536a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802536e:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8025372:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8025376:	0949      	lsrs	r1, r1, #5
 8025378:	ea46 0609 	orr.w	r6, r6, r9
 802537c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025380:	430e      	orrs	r6, r1
 8025382:	f8ab 6000 	strh.w	r6, [fp]
 8025386:	b009      	add	sp, #36	; 0x24
 8025388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802538c:	08032b71 	.word	0x08032b71
 8025390:	0803313e 	.word	0x0803313e
 8025394:	08032bf5 	.word	0x08032bf5

08025398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802539c:	ed2d 8b08 	vpush	{d8-d11}
 80253a0:	b095      	sub	sp, #84	; 0x54
 80253a2:	eeb0 aa40 	vmov.f32	s20, s0
 80253a6:	9212      	str	r2, [sp, #72]	; 0x48
 80253a8:	9309      	str	r3, [sp, #36]	; 0x24
 80253aa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80253ac:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80253b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80253b2:	910e      	str	r1, [sp, #56]	; 0x38
 80253b4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80253b8:	9013      	str	r0, [sp, #76]	; 0x4c
 80253ba:	6850      	ldr	r0, [r2, #4]
 80253bc:	6812      	ldr	r2, [r2, #0]
 80253be:	fb00 1303 	mla	r3, r0, r3, r1
 80253c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80253c6:	930a      	str	r3, [sp, #40]	; 0x28
 80253c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80253ca:	681b      	ldr	r3, [r3, #0]
 80253cc:	930d      	str	r3, [sp, #52]	; 0x34
 80253ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80253d0:	685c      	ldr	r4, [r3, #4]
 80253d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80253d4:	43db      	mvns	r3, r3
 80253d6:	b2db      	uxtb	r3, r3
 80253d8:	eef0 9a60 	vmov.f32	s19, s1
 80253dc:	eeb0 9a41 	vmov.f32	s18, s2
 80253e0:	eeb0 8a62 	vmov.f32	s16, s5
 80253e4:	eef0 8a43 	vmov.f32	s17, s6
 80253e8:	eef0 ba44 	vmov.f32	s23, s8
 80253ec:	eeb0 ba64 	vmov.f32	s22, s9
 80253f0:	eef0 aa45 	vmov.f32	s21, s10
 80253f4:	3404      	adds	r4, #4
 80253f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80253f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80253fa:	2b00      	cmp	r3, #0
 80253fc:	dc03      	bgt.n	8025406 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80253fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025400:	2b00      	cmp	r3, #0
 8025402:	f340 8255 	ble.w	80258b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8025406:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025408:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802540c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025410:	1e48      	subs	r0, r1, #1
 8025412:	1e55      	subs	r5, r2, #1
 8025414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025416:	2b00      	cmp	r3, #0
 8025418:	f340 80f9 	ble.w	802560e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802541c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802541e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025420:	1436      	asrs	r6, r6, #16
 8025422:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025426:	d406      	bmi.n	8025436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025428:	4286      	cmp	r6, r0
 802542a:	da04      	bge.n	8025436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802542c:	2b00      	cmp	r3, #0
 802542e:	db02      	blt.n	8025436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025430:	42ab      	cmp	r3, r5
 8025432:	f2c0 80ed 	blt.w	8025610 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8025436:	3601      	adds	r6, #1
 8025438:	f100 80da 	bmi.w	80255f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802543c:	42b1      	cmp	r1, r6
 802543e:	f2c0 80d7 	blt.w	80255f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025442:	3301      	adds	r3, #1
 8025444:	f100 80d4 	bmi.w	80255f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8025448:	429a      	cmp	r2, r3
 802544a:	f2c0 80d1 	blt.w	80255f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025450:	9311      	str	r3, [sp, #68]	; 0x44
 8025452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025454:	930c      	str	r3, [sp, #48]	; 0x30
 8025456:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025458:	2b00      	cmp	r3, #0
 802545a:	f340 80fa 	ble.w	8025652 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802545e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8025460:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025462:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025464:	68c6      	ldr	r6, [r0, #12]
 8025466:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025468:	141d      	asrs	r5, r3, #16
 802546a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802546e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025470:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025472:	1400      	asrs	r0, r0, #16
 8025474:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025478:	6892      	ldr	r2, [r2, #8]
 802547a:	f100 813e 	bmi.w	80256fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802547e:	1e57      	subs	r7, r2, #1
 8025480:	42b8      	cmp	r0, r7
 8025482:	f280 813a 	bge.w	80256fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025486:	2d00      	cmp	r5, #0
 8025488:	f2c0 8137 	blt.w	80256fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802548c:	1e77      	subs	r7, r6, #1
 802548e:	42bd      	cmp	r5, r7
 8025490:	f280 8133 	bge.w	80256fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8025494:	b212      	sxth	r2, r2
 8025496:	fb05 0002 	mla	r0, r5, r2, r0
 802549a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802549c:	f815 a000 	ldrb.w	sl, [r5, r0]
 80254a0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80254a4:	182e      	adds	r6, r5, r0
 80254a6:	eb04 050a 	add.w	r5, r4, sl
 80254aa:	2b00      	cmp	r3, #0
 80254ac:	f000 8117 	beq.w	80256de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80254b0:	f896 c001 	ldrb.w	ip, [r6, #1]
 80254b4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80254b8:	44a4      	add	ip, r4
 80254ba:	2900      	cmp	r1, #0
 80254bc:	f000 8117 	beq.w	80256ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80254c0:	18b0      	adds	r0, r6, r2
 80254c2:	5cb2      	ldrb	r2, [r6, r2]
 80254c4:	7840      	ldrb	r0, [r0, #1]
 80254c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80254ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80254ce:	4422      	add	r2, r4
 80254d0:	4420      	add	r0, r4
 80254d2:	b29b      	uxth	r3, r3
 80254d4:	b289      	uxth	r1, r1
 80254d6:	fb03 f901 	mul.w	r9, r3, r1
 80254da:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80254de:	011b      	lsls	r3, r3, #4
 80254e0:	b289      	uxth	r1, r1
 80254e2:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80254e6:	f895 b002 	ldrb.w	fp, [r5, #2]
 80254ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80254ec:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80254f0:	f8b6 e000 	ldrh.w	lr, [r6]
 80254f4:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80254f8:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80254fc:	eba3 0309 	sub.w	r3, r3, r9
 8025500:	b29b      	uxth	r3, r3
 8025502:	eba8 0801 	sub.w	r8, r8, r1
 8025506:	fa1f f888 	uxth.w	r8, r8
 802550a:	435f      	muls	r7, r3
 802550c:	fb08 770b 	mla	r7, r8, fp, r7
 8025510:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025514:	9310      	str	r3, [sp, #64]	; 0x40
 8025516:	fb01 770b 	mla	r7, r1, fp, r7
 802551a:	f890 b002 	ldrb.w	fp, [r0, #2]
 802551e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025520:	fb09 770b 	mla	r7, r9, fp, r7
 8025524:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8025528:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802552c:	fb1b fb03 	smulbb	fp, fp, r3
 8025530:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025534:	fb07 b706 	mla	r7, r7, r6, fp
 8025538:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802553a:	f895 b001 	ldrb.w	fp, [r5, #1]
 802553e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025542:	f89c c000 	ldrb.w	ip, [ip]
 8025546:	435d      	muls	r5, r3
 8025548:	fb08 550b 	mla	r5, r8, fp, r5
 802554c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025552:	fb01 550b 	mla	r5, r1, fp, r5
 8025556:	f890 b001 	ldrb.w	fp, [r0, #1]
 802555a:	fb09 550b 	mla	r5, r9, fp, r5
 802555e:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8025562:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025566:	fb1b fb03 	smulbb	fp, fp, r3
 802556a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802556c:	fb03 f30c 	mul.w	r3, r3, ip
 8025570:	f892 c000 	ldrb.w	ip, [r2]
 8025574:	fb08 330a 	mla	r3, r8, sl, r3
 8025578:	fb01 330c 	mla	r3, r1, ip, r3
 802557c:	f890 c000 	ldrb.w	ip, [r0]
 8025580:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025584:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802558a:	fa5f fe8e 	uxtb.w	lr, lr
 802558e:	b2bf      	uxth	r7, r7
 8025590:	fb1e fe03 	smulbb	lr, lr, r3
 8025594:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025598:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802559c:	fb05 b506 	mla	r5, r5, r6, fp
 80255a0:	1c7b      	adds	r3, r7, #1
 80255a2:	fb0c e606 	mla	r6, ip, r6, lr
 80255a6:	b2ad      	uxth	r5, r5
 80255a8:	b2b6      	uxth	r6, r6
 80255aa:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80255ae:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 80255b2:	f105 0b01 	add.w	fp, r5, #1
 80255b6:	1c77      	adds	r7, r6, #1
 80255b8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80255bc:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80255c0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80255c4:	096d      	lsrs	r5, r5, #5
 80255c6:	431f      	orrs	r7, r3
 80255c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80255cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80255ce:	433d      	orrs	r5, r7
 80255d0:	801d      	strh	r5, [r3, #0]
 80255d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80255d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80255d6:	3302      	adds	r3, #2
 80255d8:	930c      	str	r3, [sp, #48]	; 0x30
 80255da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80255dc:	4413      	add	r3, r2
 80255de:	9327      	str	r3, [sp, #156]	; 0x9c
 80255e0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80255e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80255e4:	4413      	add	r3, r2
 80255e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80255e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80255ea:	3b01      	subs	r3, #1
 80255ec:	9311      	str	r3, [sp, #68]	; 0x44
 80255ee:	e732      	b.n	8025456 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80255f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80255f2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80255f4:	4433      	add	r3, r6
 80255f6:	9327      	str	r3, [sp, #156]	; 0x9c
 80255f8:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80255fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80255fc:	4433      	add	r3, r6
 80255fe:	9328      	str	r3, [sp, #160]	; 0xa0
 8025600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025602:	3b01      	subs	r3, #1
 8025604:	9309      	str	r3, [sp, #36]	; 0x24
 8025606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025608:	3302      	adds	r3, #2
 802560a:	930a      	str	r3, [sp, #40]	; 0x28
 802560c:	e702      	b.n	8025414 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802560e:	d027      	beq.n	8025660 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8025610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025612:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025614:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8025616:	3b01      	subs	r3, #1
 8025618:	fb00 5003 	mla	r0, r0, r3, r5
 802561c:	1400      	asrs	r0, r0, #16
 802561e:	f53f af16 	bmi.w	802544e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025622:	3901      	subs	r1, #1
 8025624:	4288      	cmp	r0, r1
 8025626:	f6bf af12 	bge.w	802544e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802562a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802562c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802562e:	fb01 0303 	mla	r3, r1, r3, r0
 8025632:	141b      	asrs	r3, r3, #16
 8025634:	f53f af0b 	bmi.w	802544e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025638:	3a01      	subs	r2, #1
 802563a:	4293      	cmp	r3, r2
 802563c:	f6bf af07 	bge.w	802544e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025642:	9311      	str	r3, [sp, #68]	; 0x44
 8025644:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8025648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802564a:	930c      	str	r3, [sp, #48]	; 0x30
 802564c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802564e:	2b00      	cmp	r3, #0
 8025650:	dc70      	bgt.n	8025734 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025656:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802565a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802565e:	930a      	str	r3, [sp, #40]	; 0x28
 8025660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025662:	2b00      	cmp	r3, #0
 8025664:	f340 8124 	ble.w	80258b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8025668:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802566c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025670:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025674:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025676:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802567a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802567e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025682:	eef0 6a48 	vmov.f32	s13, s16
 8025686:	ee69 7a27 	vmul.f32	s15, s18, s15
 802568a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802568e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025692:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8025696:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802569a:	eef0 6a68 	vmov.f32	s13, s17
 802569e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80256a2:	ee18 2a10 	vmov	r2, s16
 80256a6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80256aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80256ae:	ee18 2a90 	vmov	r2, s17
 80256b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80256b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80256b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80256ba:	932a      	str	r3, [sp, #168]	; 0xa8
 80256bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80256be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80256c0:	3b01      	subs	r3, #1
 80256c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80256c6:	930e      	str	r3, [sp, #56]	; 0x38
 80256c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80256ca:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 80256ce:	bf08      	it	eq
 80256d0:	4613      	moveq	r3, r2
 80256d2:	9309      	str	r3, [sp, #36]	; 0x24
 80256d4:	eef0 8a67 	vmov.f32	s17, s15
 80256d8:	eeb0 8a47 	vmov.f32	s16, s14
 80256dc:	e68c      	b.n	80253f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80256de:	b149      	cbz	r1, 80256f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80256e0:	5cb2      	ldrb	r2, [r6, r2]
 80256e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80256e6:	4422      	add	r2, r4
 80256e8:	4628      	mov	r0, r5
 80256ea:	46ac      	mov	ip, r5
 80256ec:	e6f1      	b.n	80254d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80256ee:	4628      	mov	r0, r5
 80256f0:	462a      	mov	r2, r5
 80256f2:	e6ee      	b.n	80254d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80256f4:	4628      	mov	r0, r5
 80256f6:	462a      	mov	r2, r5
 80256f8:	e7f7      	b.n	80256ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80256fa:	1c47      	adds	r7, r0, #1
 80256fc:	f53f af69 	bmi.w	80255d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025700:	42ba      	cmp	r2, r7
 8025702:	f6ff af66 	blt.w	80255d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025706:	1c6f      	adds	r7, r5, #1
 8025708:	f53f af63 	bmi.w	80255d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802570c:	42be      	cmp	r6, r7
 802570e:	f6ff af60 	blt.w	80255d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025712:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025714:	9002      	str	r0, [sp, #8]
 8025716:	b236      	sxth	r6, r6
 8025718:	b212      	sxth	r2, r2
 802571a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802571e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8025722:	9200      	str	r2, [sp, #0]
 8025724:	9601      	str	r6, [sp, #4]
 8025726:	4623      	mov	r3, r4
 8025728:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 802572c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802572e:	f7ff fd49 	bl	80251c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8025732:	e74e      	b.n	80255d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025734:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025736:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025738:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802573a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802573c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025740:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025742:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025746:	142d      	asrs	r5, r5, #16
 8025748:	1400      	asrs	r0, r0, #16
 802574a:	fb02 5000 	mla	r0, r2, r0, r5
 802574e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025750:	f815 9000 	ldrb.w	r9, [r5, r0]
 8025754:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025758:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 802575c:	182e      	adds	r6, r5, r0
 802575e:	eb04 0509 	add.w	r5, r4, r9
 8025762:	2b00      	cmp	r3, #0
 8025764:	f000 8096 	beq.w	8025894 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8025768:	7877      	ldrb	r7, [r6, #1]
 802576a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802576e:	4427      	add	r7, r4
 8025770:	2900      	cmp	r1, #0
 8025772:	f000 8097 	beq.w	80258a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8025776:	18b0      	adds	r0, r6, r2
 8025778:	5cb2      	ldrb	r2, [r6, r2]
 802577a:	7840      	ldrb	r0, [r0, #1]
 802577c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025780:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025784:	4422      	add	r2, r4
 8025786:	4420      	add	r0, r4
 8025788:	b29b      	uxth	r3, r3
 802578a:	b289      	uxth	r1, r1
 802578c:	fb03 f801 	mul.w	r8, r3, r1
 8025790:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025792:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025796:	f8b6 c000 	ldrh.w	ip, [r6]
 802579a:	78be      	ldrb	r6, [r7, #2]
 802579c:	f814 9009 	ldrb.w	r9, [r4, r9]
 80257a0:	011b      	lsls	r3, r3, #4
 80257a2:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80257a6:	b289      	uxth	r1, r1
 80257a8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80257ac:	eba3 0308 	sub.w	r3, r3, r8
 80257b0:	b29b      	uxth	r3, r3
 80257b2:	ebae 0e01 	sub.w	lr, lr, r1
 80257b6:	fa1f fe8e 	uxth.w	lr, lr
 80257ba:	435e      	muls	r6, r3
 80257bc:	fb0e 660b 	mla	r6, lr, fp, r6
 80257c0:	f892 b002 	ldrb.w	fp, [r2, #2]
 80257c4:	9310      	str	r3, [sp, #64]	; 0x40
 80257c6:	fb01 660b 	mla	r6, r1, fp, r6
 80257ca:	f890 b002 	ldrb.w	fp, [r0, #2]
 80257ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80257d0:	fb08 660b 	mla	r6, r8, fp, r6
 80257d4:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80257d8:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80257dc:	fb1b fb03 	smulbb	fp, fp, r3
 80257e0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80257e4:	fb06 b60a 	mla	r6, r6, sl, fp
 80257e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80257ea:	f895 b001 	ldrb.w	fp, [r5, #1]
 80257ee:	787d      	ldrb	r5, [r7, #1]
 80257f0:	783f      	ldrb	r7, [r7, #0]
 80257f2:	435d      	muls	r5, r3
 80257f4:	fb0e 550b 	mla	r5, lr, fp, r5
 80257f8:	f892 b001 	ldrb.w	fp, [r2, #1]
 80257fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80257fe:	fb01 550b 	mla	r5, r1, fp, r5
 8025802:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025806:	fb08 550b 	mla	r5, r8, fp, r5
 802580a:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802580e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025812:	fb1b fb03 	smulbb	fp, fp, r3
 8025816:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025818:	437b      	muls	r3, r7
 802581a:	7817      	ldrb	r7, [r2, #0]
 802581c:	fb0e 3309 	mla	r3, lr, r9, r3
 8025820:	fb01 3307 	mla	r3, r1, r7, r3
 8025824:	7807      	ldrb	r7, [r0, #0]
 8025826:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802582a:	fb08 3707 	mla	r7, r8, r7, r3
 802582e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025830:	fa5f fc8c 	uxtb.w	ip, ip
 8025834:	fb1c fc03 	smulbb	ip, ip, r3
 8025838:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802583c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025840:	fb05 b50a 	mla	r5, r5, sl, fp
 8025844:	fb07 c70a 	mla	r7, r7, sl, ip
 8025848:	b2b6      	uxth	r6, r6
 802584a:	b2ad      	uxth	r5, r5
 802584c:	b2bf      	uxth	r7, r7
 802584e:	1c73      	adds	r3, r6, #1
 8025850:	1c7a      	adds	r2, r7, #1
 8025852:	f105 0b01 	add.w	fp, r5, #1
 8025856:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 802585a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802585e:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025862:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025866:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802586a:	096d      	lsrs	r5, r5, #5
 802586c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802586e:	4316      	orrs	r6, r2
 8025870:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025874:	432e      	orrs	r6, r5
 8025876:	f823 6b02 	strh.w	r6, [r3], #2
 802587a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802587c:	930c      	str	r3, [sp, #48]	; 0x30
 802587e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025880:	4413      	add	r3, r2
 8025882:	9327      	str	r3, [sp, #156]	; 0x9c
 8025884:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025886:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025888:	4413      	add	r3, r2
 802588a:	9328      	str	r3, [sp, #160]	; 0xa0
 802588c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802588e:	3b01      	subs	r3, #1
 8025890:	9311      	str	r3, [sp, #68]	; 0x44
 8025892:	e6db      	b.n	802564c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8025894:	b149      	cbz	r1, 80258aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8025896:	5cb2      	ldrb	r2, [r6, r2]
 8025898:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802589c:	4422      	add	r2, r4
 802589e:	4628      	mov	r0, r5
 80258a0:	462f      	mov	r7, r5
 80258a2:	e771      	b.n	8025788 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80258a4:	4628      	mov	r0, r5
 80258a6:	462a      	mov	r2, r5
 80258a8:	e76e      	b.n	8025788 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80258aa:	4628      	mov	r0, r5
 80258ac:	462a      	mov	r2, r5
 80258ae:	e7f7      	b.n	80258a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 80258b0:	b015      	add	sp, #84	; 0x54
 80258b2:	ecbd 8b08 	vpop	{d8-d11}
 80258b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080258bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80258bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258c0:	880e      	ldrh	r6, [r1, #0]
 80258c2:	b085      	sub	sp, #20
 80258c4:	0230      	lsls	r0, r6, #8
 80258c6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80258ca:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 80258ce:	0170      	lsls	r0, r6, #5
 80258d0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80258d4:	9101      	str	r1, [sp, #4]
 80258d6:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80258da:	00f6      	lsls	r6, r6, #3
 80258dc:	ea4b 0000 	orr.w	r0, fp, r0
 80258e0:	b2f6      	uxtb	r6, r6
 80258e2:	4691      	mov	r9, r2
 80258e4:	fb05 7a0c 	mla	sl, r5, ip, r7
 80258e8:	4306      	orrs	r6, r0
 80258ea:	2d00      	cmp	r5, #0
 80258ec:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80258f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80258f4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80258f8:	9603      	str	r6, [sp, #12]
 80258fa:	eb09 0e0a 	add.w	lr, r9, sl
 80258fe:	db42      	blt.n	8025986 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8025900:	45a8      	cmp	r8, r5
 8025902:	dd40      	ble.n	8025986 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8025904:	2f00      	cmp	r7, #0
 8025906:	db3c      	blt.n	8025982 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8025908:	45bc      	cmp	ip, r7
 802590a:	dd3a      	ble.n	8025982 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 802590c:	f819 600a 	ldrb.w	r6, [r9, sl]
 8025910:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025914:	441e      	add	r6, r3
 8025916:	1c78      	adds	r0, r7, #1
 8025918:	d438      	bmi.n	802598c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802591a:	4584      	cmp	ip, r0
 802591c:	dd36      	ble.n	802598c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 802591e:	b3aa      	cbz	r2, 802598c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8025920:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025924:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025928:	4418      	add	r0, r3
 802592a:	3501      	adds	r5, #1
 802592c:	d432      	bmi.n	8025994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802592e:	45a8      	cmp	r8, r5
 8025930:	dd30      	ble.n	8025994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025932:	b37c      	cbz	r4, 8025994 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8025934:	2f00      	cmp	r7, #0
 8025936:	db2b      	blt.n	8025990 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8025938:	45bc      	cmp	ip, r7
 802593a:	dd29      	ble.n	8025990 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 802593c:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8025940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025944:	441d      	add	r5, r3
 8025946:	3701      	adds	r7, #1
 8025948:	d427      	bmi.n	802599a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 802594a:	45bc      	cmp	ip, r7
 802594c:	dd25      	ble.n	802599a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 802594e:	b322      	cbz	r2, 802599a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8025950:	44f4      	add	ip, lr
 8025952:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8025956:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802595a:	443b      	add	r3, r7
 802595c:	781f      	ldrb	r7, [r3, #0]
 802595e:	f896 9000 	ldrb.w	r9, [r6]
 8025962:	f890 a000 	ldrb.w	sl, [r0]
 8025966:	f895 8000 	ldrb.w	r8, [r5]
 802596a:	2a0f      	cmp	r2, #15
 802596c:	4639      	mov	r1, r7
 802596e:	d801      	bhi.n	8025974 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8025970:	2c0f      	cmp	r4, #15
 8025972:	d914      	bls.n	802599e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8025974:	4b2c      	ldr	r3, [pc, #176]	; (8025a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8025976:	4a2d      	ldr	r2, [pc, #180]	; (8025a2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8025978:	482d      	ldr	r0, [pc, #180]	; (8025a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 802597a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802597e:	f008 fa67 	bl	802de50 <__assert_func>
 8025982:	ae03      	add	r6, sp, #12
 8025984:	e7c7      	b.n	8025916 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8025986:	a803      	add	r0, sp, #12
 8025988:	4606      	mov	r6, r0
 802598a:	e7ce      	b.n	802592a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802598c:	a803      	add	r0, sp, #12
 802598e:	e7cc      	b.n	802592a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025990:	ad03      	add	r5, sp, #12
 8025992:	e7d8      	b.n	8025946 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8025994:	ab03      	add	r3, sp, #12
 8025996:	461d      	mov	r5, r3
 8025998:	e7e0      	b.n	802595c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 802599a:	ab03      	add	r3, sp, #12
 802599c:	e7de      	b.n	802595c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 802599e:	b292      	uxth	r2, r2
 80259a0:	b2a4      	uxth	r4, r4
 80259a2:	fb02 fe04 	mul.w	lr, r2, r4
 80259a6:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80259aa:	0112      	lsls	r2, r2, #4
 80259ac:	b2a4      	uxth	r4, r4
 80259ae:	f890 c002 	ldrb.w	ip, [r0, #2]
 80259b2:	f896 b002 	ldrb.w	fp, [r6, #2]
 80259b6:	7840      	ldrb	r0, [r0, #1]
 80259b8:	7876      	ldrb	r6, [r6, #1]
 80259ba:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80259be:	eba2 020e 	sub.w	r2, r2, lr
 80259c2:	b292      	uxth	r2, r2
 80259c4:	1b3f      	subs	r7, r7, r4
 80259c6:	b2bf      	uxth	r7, r7
 80259c8:	fb02 fc0c 	mul.w	ip, r2, ip
 80259cc:	fb07 cc0b 	mla	ip, r7, fp, ip
 80259d0:	f895 b002 	ldrb.w	fp, [r5, #2]
 80259d4:	fb04 cc0b 	mla	ip, r4, fp, ip
 80259d8:	f893 b002 	ldrb.w	fp, [r3, #2]
 80259dc:	785b      	ldrb	r3, [r3, #1]
 80259de:	fb0e cc0b 	mla	ip, lr, fp, ip
 80259e2:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80259e6:	fb02 fc0a 	mul.w	ip, r2, sl
 80259ea:	4342      	muls	r2, r0
 80259ec:	7868      	ldrb	r0, [r5, #1]
 80259ee:	fb07 cc09 	mla	ip, r7, r9, ip
 80259f2:	fb07 2206 	mla	r2, r7, r6, r2
 80259f6:	fb04 cc08 	mla	ip, r4, r8, ip
 80259fa:	fb04 2400 	mla	r4, r4, r0, r2
 80259fe:	fb0e cc01 	mla	ip, lr, r1, ip
 8025a02:	fb0e 4e03 	mla	lr, lr, r3, r4
 8025a06:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025a0a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025a0e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8025a12:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025a16:	9b01      	ldr	r3, [sp, #4]
 8025a18:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025a1c:	f8a3 c000 	strh.w	ip, [r3]
 8025a20:	b005      	add	sp, #20
 8025a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a26:	bf00      	nop
 8025a28:	08032b71 	.word	0x08032b71
 8025a2c:	0803313e 	.word	0x0803313e
 8025a30:	08032bf5 	.word	0x08032bf5

08025a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a38:	ed2d 8b08 	vpush	{d8-d11}
 8025a3c:	b08f      	sub	sp, #60	; 0x3c
 8025a3e:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8025a42:	920c      	str	r2, [sp, #48]	; 0x30
 8025a44:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025a46:	910a      	str	r1, [sp, #40]	; 0x28
 8025a48:	9306      	str	r3, [sp, #24]
 8025a4a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025a4e:	900d      	str	r0, [sp, #52]	; 0x34
 8025a50:	6850      	ldr	r0, [r2, #4]
 8025a52:	6812      	ldr	r2, [r2, #0]
 8025a54:	fb00 1303 	mla	r3, r0, r3, r1
 8025a58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025a5c:	9307      	str	r3, [sp, #28]
 8025a5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025a60:	681b      	ldr	r3, [r3, #0]
 8025a62:	9308      	str	r3, [sp, #32]
 8025a64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025a66:	685c      	ldr	r4, [r3, #4]
 8025a68:	eeb0 aa40 	vmov.f32	s20, s0
 8025a6c:	eef0 9a60 	vmov.f32	s19, s1
 8025a70:	eeb0 9a41 	vmov.f32	s18, s2
 8025a74:	eeb0 8a62 	vmov.f32	s16, s5
 8025a78:	eef0 8a43 	vmov.f32	s17, s6
 8025a7c:	eef0 ba44 	vmov.f32	s23, s8
 8025a80:	eeb0 ba64 	vmov.f32	s22, s9
 8025a84:	eef0 aa45 	vmov.f32	s21, s10
 8025a88:	3404      	adds	r4, #4
 8025a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a8c:	2b00      	cmp	r3, #0
 8025a8e:	dc03      	bgt.n	8025a98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8025a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025a92:	2b00      	cmp	r3, #0
 8025a94:	f340 81d6 	ble.w	8025e44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025a98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025a9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025a9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025aa2:	1e48      	subs	r0, r1, #1
 8025aa4:	1e56      	subs	r6, r2, #1
 8025aa6:	9b06      	ldr	r3, [sp, #24]
 8025aa8:	2b00      	cmp	r3, #0
 8025aaa:	f340 80b7 	ble.w	8025c1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025aae:	ea5f 472b 	movs.w	r7, fp, asr #16
 8025ab2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025ab6:	d406      	bmi.n	8025ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025ab8:	4287      	cmp	r7, r0
 8025aba:	da04      	bge.n	8025ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025abc:	2b00      	cmp	r3, #0
 8025abe:	db02      	blt.n	8025ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025ac0:	42b3      	cmp	r3, r6
 8025ac2:	f2c0 80ac 	blt.w	8025c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8025ac6:	3701      	adds	r7, #1
 8025ac8:	f100 809d 	bmi.w	8025c06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025acc:	42b9      	cmp	r1, r7
 8025ace:	f2c0 809a 	blt.w	8025c06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025ad2:	3301      	adds	r3, #1
 8025ad4:	f100 8097 	bmi.w	8025c06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025ad8:	429a      	cmp	r2, r3
 8025ada:	f2c0 8094 	blt.w	8025c06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025ade:	9b06      	ldr	r3, [sp, #24]
 8025ae0:	930b      	str	r3, [sp, #44]	; 0x2c
 8025ae2:	9b07      	ldr	r3, [sp, #28]
 8025ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8025ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	f340 80b5 	ble.w	8025c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8025aee:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025af0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025af2:	68c7      	ldr	r7, [r0, #12]
 8025af4:	6892      	ldr	r2, [r2, #8]
 8025af6:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025afa:	ea4f 4625 	mov.w	r6, r5, asr #16
 8025afe:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025b02:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025b06:	f100 80fb 	bmi.w	8025d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025b0a:	f102 3cff 	add.w	ip, r2, #4294967295
 8025b0e:	4560      	cmp	r0, ip
 8025b10:	f280 80f6 	bge.w	8025d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025b14:	2e00      	cmp	r6, #0
 8025b16:	f2c0 80f3 	blt.w	8025d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025b1a:	f107 3cff 	add.w	ip, r7, #4294967295
 8025b1e:	4566      	cmp	r6, ip
 8025b20:	f280 80ee 	bge.w	8025d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8025b24:	b212      	sxth	r2, r2
 8025b26:	fb06 0002 	mla	r0, r6, r2, r0
 8025b2a:	9e08      	ldr	r6, [sp, #32]
 8025b2c:	1837      	adds	r7, r6, r0
 8025b2e:	5c30      	ldrb	r0, [r6, r0]
 8025b30:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8025b34:	eb04 0c08 	add.w	ip, r4, r8
 8025b38:	2b00      	cmp	r3, #0
 8025b3a:	f000 80d3 	beq.w	8025ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8025b3e:	787e      	ldrb	r6, [r7, #1]
 8025b40:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025b44:	4426      	add	r6, r4
 8025b46:	2900      	cmp	r1, #0
 8025b48:	f000 80d4 	beq.w	8025cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>
 8025b4c:	18b8      	adds	r0, r7, r2
 8025b4e:	5cba      	ldrb	r2, [r7, r2]
 8025b50:	7840      	ldrb	r0, [r0, #1]
 8025b52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025b56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025b5a:	4422      	add	r2, r4
 8025b5c:	4420      	add	r0, r4
 8025b5e:	b29b      	uxth	r3, r3
 8025b60:	b289      	uxth	r1, r1
 8025b62:	fb03 f901 	mul.w	r9, r3, r1
 8025b66:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025b6a:	011b      	lsls	r3, r3, #4
 8025b6c:	b289      	uxth	r1, r1
 8025b6e:	78b7      	ldrb	r7, [r6, #2]
 8025b70:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025b74:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025b78:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025b7c:	eba3 0309 	sub.w	r3, r3, r9
 8025b80:	b29b      	uxth	r3, r3
 8025b82:	ebae 0e01 	sub.w	lr, lr, r1
 8025b86:	fa1f fe8e 	uxth.w	lr, lr
 8025b8a:	435f      	muls	r7, r3
 8025b8c:	fb0e 770a 	mla	r7, lr, sl, r7
 8025b90:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025b94:	fb01 770a 	mla	r7, r1, sl, r7
 8025b98:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025b9c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025ba0:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025ba4:	f896 8000 	ldrb.w	r8, [r6]
 8025ba8:	7876      	ldrb	r6, [r6, #1]
 8025baa:	fb03 f808 	mul.w	r8, r3, r8
 8025bae:	fb0e 8807 	mla	r8, lr, r7, r8
 8025bb2:	7817      	ldrb	r7, [r2, #0]
 8025bb4:	fb01 8807 	mla	r8, r1, r7, r8
 8025bb8:	7807      	ldrb	r7, [r0, #0]
 8025bba:	fb09 8707 	mla	r7, r9, r7, r8
 8025bbe:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025bc2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025bc6:	ea47 070a 	orr.w	r7, r7, sl
 8025bca:	4373      	muls	r3, r6
 8025bcc:	f892 a001 	ldrb.w	sl, [r2, #1]
 8025bd0:	fb0e 330c 	mla	r3, lr, ip, r3
 8025bd4:	fb01 310a 	mla	r1, r1, sl, r3
 8025bd8:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bde:	fb09 1a0a 	mla	sl, r9, sl, r1
 8025be2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025be6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025bea:	ea47 070a 	orr.w	r7, r7, sl
 8025bee:	801f      	strh	r7, [r3, #0]
 8025bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bf2:	3302      	adds	r3, #2
 8025bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8025bf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025bf8:	449b      	add	fp, r3
 8025bfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025bfc:	441d      	add	r5, r3
 8025bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025c00:	3b01      	subs	r3, #1
 8025c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8025c04:	e76f      	b.n	8025ae6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025c06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025c08:	449b      	add	fp, r3
 8025c0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c0c:	441d      	add	r5, r3
 8025c0e:	9b06      	ldr	r3, [sp, #24]
 8025c10:	3b01      	subs	r3, #1
 8025c12:	9306      	str	r3, [sp, #24]
 8025c14:	9b07      	ldr	r3, [sp, #28]
 8025c16:	3302      	adds	r3, #2
 8025c18:	9307      	str	r3, [sp, #28]
 8025c1a:	e744      	b.n	8025aa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025c1c:	d023      	beq.n	8025c66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025c1e:	9b06      	ldr	r3, [sp, #24]
 8025c20:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025c22:	3b01      	subs	r3, #1
 8025c24:	fb00 b003 	mla	r0, r0, r3, fp
 8025c28:	1400      	asrs	r0, r0, #16
 8025c2a:	f53f af58 	bmi.w	8025ade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025c2e:	3901      	subs	r1, #1
 8025c30:	4288      	cmp	r0, r1
 8025c32:	f6bf af54 	bge.w	8025ade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025c36:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025c38:	fb01 5303 	mla	r3, r1, r3, r5
 8025c3c:	141b      	asrs	r3, r3, #16
 8025c3e:	f53f af4e 	bmi.w	8025ade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025c42:	3a01      	subs	r2, #1
 8025c44:	4293      	cmp	r3, r2
 8025c46:	f6bf af4a 	bge.w	8025ade <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025c4a:	9b06      	ldr	r3, [sp, #24]
 8025c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8025c4e:	9b07      	ldr	r3, [sp, #28]
 8025c50:	930b      	str	r3, [sp, #44]	; 0x2c
 8025c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c54:	2b00      	cmp	r3, #0
 8025c56:	dc70      	bgt.n	8025d3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8025c58:	9b06      	ldr	r3, [sp, #24]
 8025c5a:	9a07      	ldr	r2, [sp, #28]
 8025c5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025c60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025c64:	9307      	str	r3, [sp, #28]
 8025c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c68:	2b00      	cmp	r3, #0
 8025c6a:	f340 80eb 	ble.w	8025e44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8025c6e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025c76:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025c7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c7c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025c80:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025c84:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025c88:	eef0 6a48 	vmov.f32	s13, s16
 8025c8c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025c90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c94:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025c98:	ee16 ba90 	vmov	fp, s13
 8025c9c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025ca0:	eef0 6a68 	vmov.f32	s13, s17
 8025ca4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025ca8:	ee18 2a10 	vmov	r2, s16
 8025cac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025cb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cb4:	ee18 2a90 	vmov	r2, s17
 8025cb8:	9323      	str	r3, [sp, #140]	; 0x8c
 8025cba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025cbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cc0:	9324      	str	r3, [sp, #144]	; 0x90
 8025cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025cc6:	3b01      	subs	r3, #1
 8025cc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ccc:	930a      	str	r3, [sp, #40]	; 0x28
 8025cce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025cd0:	bf08      	it	eq
 8025cd2:	4613      	moveq	r3, r2
 8025cd4:	ee16 5a90 	vmov	r5, s13
 8025cd8:	9306      	str	r3, [sp, #24]
 8025cda:	eef0 8a67 	vmov.f32	s17, s15
 8025cde:	eeb0 8a47 	vmov.f32	s16, s14
 8025ce2:	e6d2      	b.n	8025a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025ce4:	b149      	cbz	r1, 8025cfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8025ce6:	5cba      	ldrb	r2, [r7, r2]
 8025ce8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025cec:	4422      	add	r2, r4
 8025cee:	4660      	mov	r0, ip
 8025cf0:	4666      	mov	r6, ip
 8025cf2:	e734      	b.n	8025b5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8025cf4:	4660      	mov	r0, ip
 8025cf6:	4662      	mov	r2, ip
 8025cf8:	e731      	b.n	8025b5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8025cfa:	4660      	mov	r0, ip
 8025cfc:	4662      	mov	r2, ip
 8025cfe:	e7f7      	b.n	8025cf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8025d00:	f110 0c01 	adds.w	ip, r0, #1
 8025d04:	f53f af74 	bmi.w	8025bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025d08:	4562      	cmp	r2, ip
 8025d0a:	f6ff af71 	blt.w	8025bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025d0e:	f116 0c01 	adds.w	ip, r6, #1
 8025d12:	f53f af6d 	bmi.w	8025bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025d16:	4567      	cmp	r7, ip
 8025d18:	f6ff af6a 	blt.w	8025bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025d1c:	b23f      	sxth	r7, r7
 8025d1e:	b212      	sxth	r2, r2
 8025d20:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025d24:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025d28:	9200      	str	r2, [sp, #0]
 8025d2a:	9701      	str	r7, [sp, #4]
 8025d2c:	4623      	mov	r3, r4
 8025d2e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8025d32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025d34:	f7ff fdc2 	bl	80258bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8025d38:	e75a      	b.n	8025bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8025d3a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025d3c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025d40:	ea4f 462b 	mov.w	r6, fp, asr #16
 8025d44:	1428      	asrs	r0, r5, #16
 8025d46:	fb02 6000 	mla	r0, r2, r0, r6
 8025d4a:	9e08      	ldr	r6, [sp, #32]
 8025d4c:	f816 8000 	ldrb.w	r8, [r6, r0]
 8025d50:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025d54:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025d58:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025d5c:	1837      	adds	r7, r6, r0
 8025d5e:	eb04 0c08 	add.w	ip, r4, r8
 8025d62:	2b00      	cmp	r3, #0
 8025d64:	d060      	beq.n	8025e28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8025d66:	787e      	ldrb	r6, [r7, #1]
 8025d68:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025d6c:	4426      	add	r6, r4
 8025d6e:	2900      	cmp	r1, #0
 8025d70:	d062      	beq.n	8025e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8025d72:	18b8      	adds	r0, r7, r2
 8025d74:	5cba      	ldrb	r2, [r7, r2]
 8025d76:	7840      	ldrb	r0, [r0, #1]
 8025d78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025d7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025d80:	4422      	add	r2, r4
 8025d82:	4420      	add	r0, r4
 8025d84:	b29b      	uxth	r3, r3
 8025d86:	b289      	uxth	r1, r1
 8025d88:	fb03 f901 	mul.w	r9, r3, r1
 8025d8c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025d90:	011b      	lsls	r3, r3, #4
 8025d92:	b289      	uxth	r1, r1
 8025d94:	78b7      	ldrb	r7, [r6, #2]
 8025d96:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025d9a:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025d9e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025da2:	eba3 0309 	sub.w	r3, r3, r9
 8025da6:	b29b      	uxth	r3, r3
 8025da8:	ebae 0e01 	sub.w	lr, lr, r1
 8025dac:	fa1f fe8e 	uxth.w	lr, lr
 8025db0:	435f      	muls	r7, r3
 8025db2:	fb0e 770a 	mla	r7, lr, sl, r7
 8025db6:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025dba:	fb01 770a 	mla	r7, r1, sl, r7
 8025dbe:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025dc2:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025dc6:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025dca:	f896 8000 	ldrb.w	r8, [r6]
 8025dce:	7876      	ldrb	r6, [r6, #1]
 8025dd0:	fb03 f808 	mul.w	r8, r3, r8
 8025dd4:	fb0e 8807 	mla	r8, lr, r7, r8
 8025dd8:	7817      	ldrb	r7, [r2, #0]
 8025dda:	fb01 8807 	mla	r8, r1, r7, r8
 8025dde:	7807      	ldrb	r7, [r0, #0]
 8025de0:	fb09 8707 	mla	r7, r9, r7, r8
 8025de4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025de8:	4373      	muls	r3, r6
 8025dea:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025dee:	7856      	ldrb	r6, [r2, #1]
 8025df0:	ea47 070a 	orr.w	r7, r7, sl
 8025df4:	fb0e 330c 	mla	r3, lr, ip, r3
 8025df8:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025dfc:	fb01 3306 	mla	r3, r1, r6, r3
 8025e00:	fb09 3a0a 	mla	sl, r9, sl, r3
 8025e04:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025e0a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025e0e:	ea47 070a 	orr.w	r7, r7, sl
 8025e12:	f823 7b02 	strh.w	r7, [r3], #2
 8025e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8025e18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025e1a:	449b      	add	fp, r3
 8025e1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025e1e:	441d      	add	r5, r3
 8025e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025e22:	3b01      	subs	r3, #1
 8025e24:	9309      	str	r3, [sp, #36]	; 0x24
 8025e26:	e714      	b.n	8025c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8025e28:	b149      	cbz	r1, 8025e3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8025e2a:	5cba      	ldrb	r2, [r7, r2]
 8025e2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025e30:	4422      	add	r2, r4
 8025e32:	4660      	mov	r0, ip
 8025e34:	4666      	mov	r6, ip
 8025e36:	e7a5      	b.n	8025d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025e38:	4660      	mov	r0, ip
 8025e3a:	4662      	mov	r2, ip
 8025e3c:	e7a2      	b.n	8025d84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025e3e:	4660      	mov	r0, ip
 8025e40:	4662      	mov	r2, ip
 8025e42:	e7f7      	b.n	8025e34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8025e44:	b00f      	add	sp, #60	; 0x3c
 8025e46:	ecbd 8b08 	vpop	{d8-d11}
 8025e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025e50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8025e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e54:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8025e58:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8025e5c:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8025e60:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8025e64:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8025e68:	fb04 560c 	mla	r6, r4, ip, r5
 8025e6c:	2c00      	cmp	r4, #0
 8025e6e:	eb02 0e06 	add.w	lr, r2, r6
 8025e72:	db3d      	blt.n	8025ef0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8025e74:	45a0      	cmp	r8, r4
 8025e76:	dd3b      	ble.n	8025ef0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8025e78:	2d00      	cmp	r5, #0
 8025e7a:	db37      	blt.n	8025eec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8025e7c:	45ac      	cmp	ip, r5
 8025e7e:	dd35      	ble.n	8025eec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8025e80:	5d92      	ldrb	r2, [r2, r6]
 8025e82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025e86:	1c6e      	adds	r6, r5, #1
 8025e88:	d435      	bmi.n	8025ef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8025e8a:	45b4      	cmp	ip, r6
 8025e8c:	dd33      	ble.n	8025ef6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8025e8e:	b3a0      	cbz	r0, 8025efa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8025e90:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8025e94:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8025e98:	3401      	adds	r4, #1
 8025e9a:	d432      	bmi.n	8025f02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8025e9c:	45a0      	cmp	r8, r4
 8025e9e:	dd30      	ble.n	8025f02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8025ea0:	b397      	cbz	r7, 8025f08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8025ea2:	2d00      	cmp	r5, #0
 8025ea4:	db2b      	blt.n	8025efe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8025ea6:	45ac      	cmp	ip, r5
 8025ea8:	dd29      	ble.n	8025efe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8025eaa:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8025eae:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8025eb2:	3501      	adds	r5, #1
 8025eb4:	d42b      	bmi.n	8025f0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8025eb6:	45ac      	cmp	ip, r5
 8025eb8:	dd29      	ble.n	8025f0e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8025eba:	b350      	cbz	r0, 8025f12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8025ebc:	44f4      	add	ip, lr
 8025ebe:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025ec2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025ec6:	280f      	cmp	r0, #15
 8025ec8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025ecc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025ed0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025ed4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025ed8:	d801      	bhi.n	8025ede <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8025eda:	2f0f      	cmp	r7, #15
 8025edc:	d91b      	bls.n	8025f16 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8025ede:	4b8d      	ldr	r3, [pc, #564]	; (8026114 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8025ee0:	4a8d      	ldr	r2, [pc, #564]	; (8026118 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8025ee2:	488e      	ldr	r0, [pc, #568]	; (802611c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8025ee4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025ee8:	f007 ffb2 	bl	802de50 <__assert_func>
 8025eec:	2200      	movs	r2, #0
 8025eee:	e7ca      	b.n	8025e86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8025ef0:	2600      	movs	r6, #0
 8025ef2:	4632      	mov	r2, r6
 8025ef4:	e7d0      	b.n	8025e98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025ef6:	2600      	movs	r6, #0
 8025ef8:	e7ce      	b.n	8025e98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025efa:	4606      	mov	r6, r0
 8025efc:	e7cc      	b.n	8025e98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025efe:	2400      	movs	r4, #0
 8025f00:	e7d7      	b.n	8025eb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8025f02:	2300      	movs	r3, #0
 8025f04:	461c      	mov	r4, r3
 8025f06:	e7de      	b.n	8025ec6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025f08:	463b      	mov	r3, r7
 8025f0a:	463c      	mov	r4, r7
 8025f0c:	e7db      	b.n	8025ec6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025f0e:	2300      	movs	r3, #0
 8025f10:	e7d9      	b.n	8025ec6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025f12:	4603      	mov	r3, r0
 8025f14:	e7d7      	b.n	8025ec6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025f16:	b280      	uxth	r0, r0
 8025f18:	b2bf      	uxth	r7, r7
 8025f1a:	fb07 fe00 	mul.w	lr, r7, r0
 8025f1e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025f22:	0100      	lsls	r0, r0, #4
 8025f24:	eba0 0c0e 	sub.w	ip, r0, lr
 8025f28:	b2bf      	uxth	r7, r7
 8025f2a:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8025f2e:	fa1f fc8c 	uxth.w	ip, ip
 8025f32:	1bed      	subs	r5, r5, r7
 8025f34:	b2ad      	uxth	r5, r5
 8025f36:	fb0a f00c 	mul.w	r0, sl, ip
 8025f3a:	fb0b 0005 	mla	r0, fp, r5, r0
 8025f3e:	fb07 0009 	mla	r0, r7, r9, r0
 8025f42:	fb0e 0008 	mla	r0, lr, r8, r0
 8025f46:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025f4a:	9001      	str	r0, [sp, #4]
 8025f4c:	2800      	cmp	r0, #0
 8025f4e:	f000 80de 	beq.w	802610e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8025f52:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025f56:	d018      	beq.n	8025f8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8025f58:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025f5c:	fb0b f000 	mul.w	r0, fp, r0
 8025f60:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025f64:	fb0b fb02 	mul.w	fp, fp, r2
 8025f68:	0a02      	lsrs	r2, r0, #8
 8025f6a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025f6e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025f72:	4402      	add	r2, r0
 8025f74:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8025f78:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025f7c:	0a12      	lsrs	r2, r2, #8
 8025f7e:	0a00      	lsrs	r0, r0, #8
 8025f80:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025f84:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025f88:	4302      	orrs	r2, r0
 8025f8a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025f8e:	d01a      	beq.n	8025fc6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8025f90:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8025f94:	fb0a f000 	mul.w	r0, sl, r0
 8025f98:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025f9c:	fb0a fa06 	mul.w	sl, sl, r6
 8025fa0:	0a06      	lsrs	r6, r0, #8
 8025fa2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025fa6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025faa:	4406      	add	r6, r0
 8025fac:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8025fb0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8025fb4:	0a36      	lsrs	r6, r6, #8
 8025fb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025fba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025fbe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025fc2:	ea46 060a 	orr.w	r6, r6, sl
 8025fc6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025fca:	d01b      	beq.n	8026004 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8025fcc:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8025fd0:	fb09 fa0a 	mul.w	sl, r9, sl
 8025fd4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025fd8:	fb09 f004 	mul.w	r0, r9, r4
 8025fdc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025fe0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025fe4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025fe8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8025fec:	4454      	add	r4, sl
 8025fee:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8025ff2:	0a24      	lsrs	r4, r4, #8
 8025ff4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ff8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025ffc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026000:	ea44 0409 	orr.w	r4, r4, r9
 8026004:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026008:	d01b      	beq.n	8026042 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 802600a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802600e:	fb08 f909 	mul.w	r9, r8, r9
 8026012:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026016:	fb08 f003 	mul.w	r0, r8, r3
 802601a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802601e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026022:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026026:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802602a:	444b      	add	r3, r9
 802602c:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8026030:	0a1b      	lsrs	r3, r3, #8
 8026032:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026036:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802603a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802603e:	ea43 0308 	orr.w	r3, r3, r8
 8026042:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026046:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802604a:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 802604e:	fb0c f808 	mul.w	r8, ip, r8
 8026052:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026056:	fb0c f606 	mul.w	r6, ip, r6
 802605a:	fb05 8909 	mla	r9, r5, r9, r8
 802605e:	fb05 6502 	mla	r5, r5, r2, r6
 8026062:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8026066:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 802606a:	9a01      	ldr	r2, [sp, #4]
 802606c:	8808      	ldrh	r0, [r1, #0]
 802606e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026072:	fb07 9908 	mla	r9, r7, r8, r9
 8026076:	fb07 5704 	mla	r7, r7, r4, r5
 802607a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 802607e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026082:	b2b6      	uxth	r6, r6
 8026084:	fb0e 9808 	mla	r8, lr, r8, r9
 8026088:	fb0e 7e03 	mla	lr, lr, r3, r7
 802608c:	4372      	muls	r2, r6
 802608e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026092:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026096:	1c53      	adds	r3, r2, #1
 8026098:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802609c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80260a0:	ea48 0e0e 	orr.w	lr, r8, lr
 80260a4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80260a8:	1205      	asrs	r5, r0, #8
 80260aa:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80260ae:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80260b2:	b2db      	uxtb	r3, r3
 80260b4:	fb12 f206 	smulbb	r2, r2, r6
 80260b8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80260bc:	fb05 2503 	mla	r5, r5, r3, r2
 80260c0:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80260c4:	10c2      	asrs	r2, r0, #3
 80260c6:	fa5f fe8e 	uxtb.w	lr, lr
 80260ca:	00c0      	lsls	r0, r0, #3
 80260cc:	fb14 f406 	smulbb	r4, r4, r6
 80260d0:	b2c0      	uxtb	r0, r0
 80260d2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80260d6:	fb1e fe06 	smulbb	lr, lr, r6
 80260da:	fb02 4203 	mla	r2, r2, r3, r4
 80260de:	b2ad      	uxth	r5, r5
 80260e0:	fb00 e303 	mla	r3, r0, r3, lr
 80260e4:	b298      	uxth	r0, r3
 80260e6:	b294      	uxth	r4, r2
 80260e8:	1c6b      	adds	r3, r5, #1
 80260ea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80260ee:	1c62      	adds	r2, r4, #1
 80260f0:	1c43      	adds	r3, r0, #1
 80260f2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80260f6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80260fa:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80260fe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026102:	0952      	lsrs	r2, r2, #5
 8026104:	432b      	orrs	r3, r5
 8026106:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802610a:	4313      	orrs	r3, r2
 802610c:	800b      	strh	r3, [r1, #0]
 802610e:	b003      	add	sp, #12
 8026110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026114:	08032b71 	.word	0x08032b71
 8026118:	0803313e 	.word	0x0803313e
 802611c:	08032bf5 	.word	0x08032bf5

08026120 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026124:	ed2d 8b08 	vpush	{d8-d11}
 8026128:	b09f      	sub	sp, #124	; 0x7c
 802612a:	eeb0 aa40 	vmov.f32	s20, s0
 802612e:	921b      	str	r2, [sp, #108]	; 0x6c
 8026130:	9309      	str	r3, [sp, #36]	; 0x24
 8026132:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8026134:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8026138:	931c      	str	r3, [sp, #112]	; 0x70
 802613a:	9119      	str	r1, [sp, #100]	; 0x64
 802613c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8026140:	901d      	str	r0, [sp, #116]	; 0x74
 8026142:	6850      	ldr	r0, [r2, #4]
 8026144:	6812      	ldr	r2, [r2, #0]
 8026146:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8026148:	fb00 1303 	mla	r3, r0, r3, r1
 802614c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026150:	930c      	str	r3, [sp, #48]	; 0x30
 8026152:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026154:	681b      	ldr	r3, [r3, #0]
 8026156:	9312      	str	r3, [sp, #72]	; 0x48
 8026158:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802615a:	685e      	ldr	r6, [r3, #4]
 802615c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8026160:	930d      	str	r3, [sp, #52]	; 0x34
 8026162:	eef0 9a60 	vmov.f32	s19, s1
 8026166:	eeb0 9a41 	vmov.f32	s18, s2
 802616a:	eeb0 8a62 	vmov.f32	s16, s5
 802616e:	eef0 8a43 	vmov.f32	s17, s6
 8026172:	eef0 ba44 	vmov.f32	s23, s8
 8026176:	eeb0 ba64 	vmov.f32	s22, s9
 802617a:	eef0 aa45 	vmov.f32	s21, s10
 802617e:	3604      	adds	r6, #4
 8026180:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026182:	2b00      	cmp	r3, #0
 8026184:	dc03      	bgt.n	802618e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026188:	2b00      	cmp	r3, #0
 802618a:	f340 8388 	ble.w	802689e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 802618e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026190:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026194:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026198:	1e48      	subs	r0, r1, #1
 802619a:	1e57      	subs	r7, r2, #1
 802619c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802619e:	2b00      	cmp	r3, #0
 80261a0:	f340 8195 	ble.w	80264ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80261a4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80261a6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80261aa:	ea4f 4325 	mov.w	r3, r5, asr #16
 80261ae:	d406      	bmi.n	80261be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80261b0:	4584      	cmp	ip, r0
 80261b2:	da04      	bge.n	80261be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80261b4:	2b00      	cmp	r3, #0
 80261b6:	db02      	blt.n	80261be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80261b8:	42bb      	cmp	r3, r7
 80261ba:	f2c0 8189 	blt.w	80264d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 80261be:	f11c 0c01 	adds.w	ip, ip, #1
 80261c2:	f100 8177 	bmi.w	80264b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261c6:	4561      	cmp	r1, ip
 80261c8:	f2c0 8174 	blt.w	80264b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261cc:	3301      	adds	r3, #1
 80261ce:	f100 8171 	bmi.w	80264b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261d2:	429a      	cmp	r2, r3
 80261d4:	f2c0 816e 	blt.w	80264b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80261da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80261dc:	931a      	str	r3, [sp, #104]	; 0x68
 80261de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80261e0:	2b00      	cmp	r3, #0
 80261e2:	f340 8193 	ble.w	802650c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80261e6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80261e8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80261ec:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80261ee:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80261f2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80261f4:	141b      	asrs	r3, r3, #16
 80261f6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80261fa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80261fe:	f100 81d6 	bmi.w	80265ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8026202:	f100 38ff 	add.w	r8, r0, #4294967295
 8026206:	4543      	cmp	r3, r8
 8026208:	f280 81d1 	bge.w	80265ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802620c:	f1bc 0f00 	cmp.w	ip, #0
 8026210:	f2c0 81cd 	blt.w	80265ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8026214:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026218:	45c4      	cmp	ip, r8
 802621a:	f280 81c8 	bge.w	80265ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802621e:	b200      	sxth	r0, r0
 8026220:	fb0c 3300 	mla	r3, ip, r0, r3
 8026224:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026226:	eb04 0803 	add.w	r8, r4, r3
 802622a:	5ce3      	ldrb	r3, [r4, r3]
 802622c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026230:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026234:	2a00      	cmp	r2, #0
 8026236:	f000 81af 	beq.w	8026598 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 802623a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802623e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026242:	940e      	str	r4, [sp, #56]	; 0x38
 8026244:	0e24      	lsrs	r4, r4, #24
 8026246:	9415      	str	r4, [sp, #84]	; 0x54
 8026248:	b179      	cbz	r1, 802626a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802624a:	eb08 0c00 	add.w	ip, r8, r0
 802624e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026252:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026256:	900a      	str	r0, [sp, #40]	; 0x28
 8026258:	0e00      	lsrs	r0, r0, #24
 802625a:	9013      	str	r0, [sp, #76]	; 0x4c
 802625c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026260:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026264:	900f      	str	r0, [sp, #60]	; 0x3c
 8026266:	0e00      	lsrs	r0, r0, #24
 8026268:	9016      	str	r0, [sp, #88]	; 0x58
 802626a:	b292      	uxth	r2, r2
 802626c:	b289      	uxth	r1, r1
 802626e:	fb02 f901 	mul.w	r9, r2, r1
 8026272:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026276:	0112      	lsls	r2, r2, #4
 8026278:	eba2 0809 	sub.w	r8, r2, r9
 802627c:	b289      	uxth	r1, r1
 802627e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026282:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026284:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026286:	fa1f f888 	uxth.w	r8, r8
 802628a:	1a52      	subs	r2, r2, r1
 802628c:	b292      	uxth	r2, r2
 802628e:	fb08 f000 	mul.w	r0, r8, r0
 8026292:	fb02 000e 	mla	r0, r2, lr, r0
 8026296:	fb01 0004 	mla	r0, r1, r4, r0
 802629a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802629c:	fb09 0004 	mla	r0, r9, r4, r0
 80262a0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80262a4:	2800      	cmp	r0, #0
 80262a6:	f000 80fa 	beq.w	802649e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80262aa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80262ae:	d01b      	beq.n	80262e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80262b0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80262b4:	fb0e fa0a 	mul.w	sl, lr, sl
 80262b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80262bc:	fb0e fe03 	mul.w	lr, lr, r3
 80262c0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80262c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80262c8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80262cc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80262d0:	4453      	add	r3, sl
 80262d2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80262d6:	0a1b      	lsrs	r3, r3, #8
 80262d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262dc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80262e0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80262e4:	ea43 030c 	orr.w	r3, r3, ip
 80262e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80262ea:	2cff      	cmp	r4, #255	; 0xff
 80262ec:	d021      	beq.n	8026332 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80262ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80262f0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80262f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80262f6:	fb04 fb0b 	mul.w	fp, r4, fp
 80262fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80262fc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026300:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026302:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026306:	fb04 fa0a 	mul.w	sl, r4, sl
 802630a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802630e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026312:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026316:	44de      	add	lr, fp
 8026318:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802631c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026320:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026324:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026328:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802632c:	ea4e 040a 	orr.w	r4, lr, sl
 8026330:	940e      	str	r4, [sp, #56]	; 0x38
 8026332:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026334:	2cff      	cmp	r4, #255	; 0xff
 8026336:	d021      	beq.n	802637c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8026338:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802633a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802633e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026340:	fb04 fb0b 	mul.w	fp, r4, fp
 8026344:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026346:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802634a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802634c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026350:	fb04 fa0a 	mul.w	sl, r4, sl
 8026354:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026358:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802635c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026360:	44de      	add	lr, fp
 8026362:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026366:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802636a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802636e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026372:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026376:	ea4e 040a 	orr.w	r4, lr, sl
 802637a:	940a      	str	r4, [sp, #40]	; 0x28
 802637c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802637e:	2cff      	cmp	r4, #255	; 0xff
 8026380:	d021      	beq.n	80263c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8026382:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026384:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026388:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802638a:	fb04 fb0b 	mul.w	fp, r4, fp
 802638e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026390:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026394:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026396:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802639a:	fb04 fa0a 	mul.w	sl, r4, sl
 802639e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80263a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80263aa:	44de      	add	lr, fp
 80263ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80263b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80263c0:	ea4e 040a 	orr.w	r4, lr, sl
 80263c4:	940f      	str	r4, [sp, #60]	; 0x3c
 80263c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80263c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80263cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80263ce:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80263d2:	fb08 fc0c 	mul.w	ip, r8, ip
 80263d6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80263da:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80263de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80263e0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80263e4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80263e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80263ea:	fb09 cc0e 	mla	ip, r9, lr, ip
 80263ee:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80263f2:	fb08 f80e 	mul.w	r8, r8, lr
 80263f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80263fa:	fb02 8303 	mla	r3, r2, r3, r8
 80263fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026400:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026402:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026408:	fb01 330a 	mla	r3, r1, sl, r3
 802640c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8026410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026412:	fb09 3901 	mla	r9, r9, r1, r3
 8026416:	4342      	muls	r2, r0
 8026418:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802641c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026420:	883b      	ldrh	r3, [r7, #0]
 8026422:	1c50      	adds	r0, r2, #1
 8026424:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026428:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802642c:	ea4c 0c09 	orr.w	ip, ip, r9
 8026430:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026434:	1219      	asrs	r1, r3, #8
 8026436:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802643a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802643e:	b2c0      	uxtb	r0, r0
 8026440:	fb12 f204 	smulbb	r2, r2, r4
 8026444:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026448:	fb01 2100 	mla	r1, r1, r0, r2
 802644c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026450:	10da      	asrs	r2, r3, #3
 8026452:	fa5f fc8c 	uxtb.w	ip, ip
 8026456:	00db      	lsls	r3, r3, #3
 8026458:	fb1c fc04 	smulbb	ip, ip, r4
 802645c:	b2db      	uxtb	r3, r3
 802645e:	b289      	uxth	r1, r1
 8026460:	fb03 c300 	mla	r3, r3, r0, ip
 8026464:	fa1f fc83 	uxth.w	ip, r3
 8026468:	1c4b      	adds	r3, r1, #1
 802646a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802646e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026472:	fb1e fe04 	smulbb	lr, lr, r4
 8026476:	f10c 0301 	add.w	r3, ip, #1
 802647a:	fb02 e200 	mla	r2, r2, r0, lr
 802647e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026482:	b292      	uxth	r2, r2
 8026484:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8026488:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802648c:	430b      	orrs	r3, r1
 802648e:	1c51      	adds	r1, r2, #1
 8026490:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026494:	0952      	lsrs	r2, r2, #5
 8026496:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802649a:	4313      	orrs	r3, r2
 802649c:	803b      	strh	r3, [r7, #0]
 802649e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80264a0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80264a2:	441a      	add	r2, r3
 80264a4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80264a6:	9231      	str	r2, [sp, #196]	; 0xc4
 80264a8:	441d      	add	r5, r3
 80264aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80264ac:	3b01      	subs	r3, #1
 80264ae:	3702      	adds	r7, #2
 80264b0:	931a      	str	r3, [sp, #104]	; 0x68
 80264b2:	e694      	b.n	80261de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80264b4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80264b6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80264b8:	441c      	add	r4, r3
 80264ba:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80264bc:	9431      	str	r4, [sp, #196]	; 0xc4
 80264be:	441d      	add	r5, r3
 80264c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264c2:	3b01      	subs	r3, #1
 80264c4:	9309      	str	r3, [sp, #36]	; 0x24
 80264c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80264c8:	3302      	adds	r3, #2
 80264ca:	930c      	str	r3, [sp, #48]	; 0x30
 80264cc:	e666      	b.n	802619c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80264ce:	d024      	beq.n	802651a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fa>
 80264d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264d2:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80264d4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80264d6:	3b01      	subs	r3, #1
 80264d8:	fb00 4003 	mla	r0, r0, r3, r4
 80264dc:	1400      	asrs	r0, r0, #16
 80264de:	f53f ae7b 	bmi.w	80261d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80264e2:	3901      	subs	r1, #1
 80264e4:	4288      	cmp	r0, r1
 80264e6:	f6bf ae77 	bge.w	80261d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80264ea:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80264ec:	fb01 5303 	mla	r3, r1, r3, r5
 80264f0:	141b      	asrs	r3, r3, #16
 80264f2:	f53f ae71 	bmi.w	80261d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80264f6:	3a01      	subs	r2, #1
 80264f8:	4293      	cmp	r3, r2
 80264fa:	f6bf ae6d 	bge.w	80261d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80264fe:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8026502:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8026506:	f1bb 0f00 	cmp.w	fp, #0
 802650a:	dc70      	bgt.n	80265ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802650e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026514:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026518:	930c      	str	r3, [sp, #48]	; 0x30
 802651a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802651c:	2b00      	cmp	r3, #0
 802651e:	f340 81be 	ble.w	802689e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77e>
 8026522:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802652a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802652e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026530:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026534:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026538:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802653c:	eef0 6a48 	vmov.f32	s13, s16
 8026540:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026544:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026548:	ee37 8a48 	vsub.f32	s16, s14, s16
 802654c:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8026550:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026554:	eef0 6a68 	vmov.f32	s13, s17
 8026558:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802655c:	ee18 2a10 	vmov	r2, s16
 8026560:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026564:	fb92 f3f3 	sdiv	r3, r2, r3
 8026568:	ee18 2a90 	vmov	r2, s17
 802656c:	9333      	str	r3, [sp, #204]	; 0xcc
 802656e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026570:	fb92 f3f3 	sdiv	r3, r2, r3
 8026574:	9334      	str	r3, [sp, #208]	; 0xd0
 8026576:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026578:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802657a:	3b01      	subs	r3, #1
 802657c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026580:	9319      	str	r3, [sp, #100]	; 0x64
 8026582:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026584:	bf08      	it	eq
 8026586:	4613      	moveq	r3, r2
 8026588:	ee16 5a90 	vmov	r5, s13
 802658c:	9309      	str	r3, [sp, #36]	; 0x24
 802658e:	eef0 8a67 	vmov.f32	s17, s15
 8026592:	eeb0 8a47 	vmov.f32	s16, s14
 8026596:	e5f3      	b.n	8026180 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8026598:	2900      	cmp	r1, #0
 802659a:	f43f ae66 	beq.w	802626a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802659e:	f818 0000 	ldrb.w	r0, [r8, r0]
 80265a2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80265a6:	900a      	str	r0, [sp, #40]	; 0x28
 80265a8:	0e00      	lsrs	r0, r0, #24
 80265aa:	9013      	str	r0, [sp, #76]	; 0x4c
 80265ac:	e65d      	b.n	802626a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80265ae:	f113 0801 	adds.w	r8, r3, #1
 80265b2:	f53f af74 	bmi.w	802649e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80265b6:	4540      	cmp	r0, r8
 80265b8:	f6ff af71 	blt.w	802649e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80265bc:	f11c 0801 	adds.w	r8, ip, #1
 80265c0:	f53f af6d 	bmi.w	802649e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80265c4:	45c6      	cmp	lr, r8
 80265c6:	f6ff af6a 	blt.w	802649e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80265ca:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80265cc:	9302      	str	r3, [sp, #8]
 80265ce:	b200      	sxth	r0, r0
 80265d0:	fa0f f38e 	sxth.w	r3, lr
 80265d4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80265d8:	e9cd c203 	strd	ip, r2, [sp, #12]
 80265dc:	9301      	str	r3, [sp, #4]
 80265de:	9000      	str	r0, [sp, #0]
 80265e0:	4633      	mov	r3, r6
 80265e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80265e4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80265e6:	4639      	mov	r1, r7
 80265e8:	f7ff fc32 	bl	8025e50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80265ec:	e757      	b.n	802649e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80265ee:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80265f0:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80265f2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80265f6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80265f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80265fc:	1427      	asrs	r7, r4, #16
 80265fe:	142b      	asrs	r3, r5, #16
 8026600:	fb01 7303 	mla	r3, r1, r3, r7
 8026604:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026606:	18e7      	adds	r7, r4, r3
 8026608:	5ce3      	ldrb	r3, [r4, r3]
 802660a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802660e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026612:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026616:	2a00      	cmp	r2, #0
 8026618:	f000 8137 	beq.w	802688a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802661c:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026620:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026624:	9410      	str	r4, [sp, #64]	; 0x40
 8026626:	0e24      	lsrs	r4, r4, #24
 8026628:	9417      	str	r4, [sp, #92]	; 0x5c
 802662a:	b170      	cbz	r0, 802664a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 802662c:	eb07 0e01 	add.w	lr, r7, r1
 8026630:	5c79      	ldrb	r1, [r7, r1]
 8026632:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026636:	910b      	str	r1, [sp, #44]	; 0x2c
 8026638:	0e09      	lsrs	r1, r1, #24
 802663a:	9114      	str	r1, [sp, #80]	; 0x50
 802663c:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026640:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026644:	9111      	str	r1, [sp, #68]	; 0x44
 8026646:	0e09      	lsrs	r1, r1, #24
 8026648:	9118      	str	r1, [sp, #96]	; 0x60
 802664a:	b292      	uxth	r2, r2
 802664c:	b280      	uxth	r0, r0
 802664e:	fb02 f800 	mul.w	r8, r2, r0
 8026652:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026656:	0112      	lsls	r2, r2, #4
 8026658:	eba2 0e08 	sub.w	lr, r2, r8
 802665c:	b280      	uxth	r0, r0
 802665e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026662:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8026664:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026666:	fa1f fe8e 	uxth.w	lr, lr
 802666a:	1a12      	subs	r2, r2, r0
 802666c:	b292      	uxth	r2, r2
 802666e:	fb0e f101 	mul.w	r1, lr, r1
 8026672:	fb02 110c 	mla	r1, r2, ip, r1
 8026676:	fb00 1104 	mla	r1, r0, r4, r1
 802667a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802667c:	fb08 1104 	mla	r1, r8, r4, r1
 8026680:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026684:	2900      	cmp	r1, #0
 8026686:	f000 80f5 	beq.w	8026874 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802668a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802668e:	d019      	beq.n	80266c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8026690:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026694:	fb0c fa0a 	mul.w	sl, ip, sl
 8026698:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802669c:	fb0c fc03 	mul.w	ip, ip, r3
 80266a0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80266a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80266a8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80266ac:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80266b0:	4453      	add	r3, sl
 80266b2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80266b6:	0a1b      	lsrs	r3, r3, #8
 80266b8:	0a3f      	lsrs	r7, r7, #8
 80266ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80266be:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80266c2:	433b      	orrs	r3, r7
 80266c4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80266c6:	2cff      	cmp	r4, #255	; 0xff
 80266c8:	d020      	beq.n	802670c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 80266ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80266cc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80266d0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80266d2:	4367      	muls	r7, r4
 80266d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80266d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80266da:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80266dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80266e0:	fb04 fa0a 	mul.w	sl, r4, sl
 80266e4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80266e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80266ec:	44bc      	add	ip, r7
 80266ee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80266f2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80266f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80266fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026702:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026706:	ea4c 040a 	orr.w	r4, ip, sl
 802670a:	9410      	str	r4, [sp, #64]	; 0x40
 802670c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802670e:	2cff      	cmp	r4, #255	; 0xff
 8026710:	d020      	beq.n	8026754 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8026712:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026714:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026718:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802671a:	4367      	muls	r7, r4
 802671c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802671e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026722:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026724:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026728:	fb04 fa0a 	mul.w	sl, r4, sl
 802672c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026730:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026734:	44bc      	add	ip, r7
 8026736:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802673a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802673e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026742:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026746:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802674a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802674e:	ea4c 040a 	orr.w	r4, ip, sl
 8026752:	940b      	str	r4, [sp, #44]	; 0x2c
 8026754:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026756:	2cff      	cmp	r4, #255	; 0xff
 8026758:	d020      	beq.n	802679c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67c>
 802675a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802675c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026760:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026762:	4367      	muls	r7, r4
 8026764:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026766:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802676a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802676c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026770:	fb04 fa0a 	mul.w	sl, r4, sl
 8026774:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026778:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802677c:	44bc      	add	ip, r7
 802677e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026782:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026786:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802678a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802678e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026792:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026796:	ea4c 040a 	orr.w	r4, ip, sl
 802679a:	9411      	str	r4, [sp, #68]	; 0x44
 802679c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802679e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80267a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80267a4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80267a8:	fb0e f707 	mul.w	r7, lr, r7
 80267ac:	fb02 770c 	mla	r7, r2, ip, r7
 80267b0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80267b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80267b6:	fb00 770c 	mla	r7, r0, ip, r7
 80267ba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80267be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80267c0:	fb08 770c 	mla	r7, r8, ip, r7
 80267c4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80267c8:	fb0e fe0c 	mul.w	lr, lr, ip
 80267cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80267d0:	fb02 e303 	mla	r3, r2, r3, lr
 80267d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80267d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80267d8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80267dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80267de:	fb00 330a 	mla	r3, r0, sl, r3
 80267e2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80267e6:	fb08 3c0c 	mla	ip, r8, ip, r3
 80267ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80267ec:	f8b9 0000 	ldrh.w	r0, [r9]
 80267f0:	434b      	muls	r3, r1
 80267f2:	0a3f      	lsrs	r7, r7, #8
 80267f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80267fc:	1c59      	adds	r1, r3, #1
 80267fe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026802:	ea47 070c 	orr.w	r7, r7, ip
 8026806:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802680a:	1202      	asrs	r2, r0, #8
 802680c:	0c3b      	lsrs	r3, r7, #16
 802680e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026812:	b2c9      	uxtb	r1, r1
 8026814:	fb13 f304 	smulbb	r3, r3, r4
 8026818:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802681c:	fb02 3201 	mla	r2, r2, r1, r3
 8026820:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026824:	10c3      	asrs	r3, r0, #3
 8026826:	b2ff      	uxtb	r7, r7
 8026828:	00c0      	lsls	r0, r0, #3
 802682a:	b292      	uxth	r2, r2
 802682c:	fb1c fc04 	smulbb	ip, ip, r4
 8026830:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026834:	b2c0      	uxtb	r0, r0
 8026836:	fb17 f704 	smulbb	r7, r7, r4
 802683a:	fb03 c301 	mla	r3, r3, r1, ip
 802683e:	fb00 7001 	mla	r0, r0, r1, r7
 8026842:	f102 0c01 	add.w	ip, r2, #1
 8026846:	b280      	uxth	r0, r0
 8026848:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802684c:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8026850:	1c42      	adds	r2, r0, #1
 8026852:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026856:	b29b      	uxth	r3, r3
 8026858:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802685c:	ea42 020c 	orr.w	r2, r2, ip
 8026860:	f103 0c01 	add.w	ip, r3, #1
 8026864:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026868:	095b      	lsrs	r3, r3, #5
 802686a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802686e:	431a      	orrs	r2, r3
 8026870:	f8a9 2000 	strh.w	r2, [r9]
 8026874:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026876:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026878:	441a      	add	r2, r3
 802687a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802687c:	9231      	str	r2, [sp, #196]	; 0xc4
 802687e:	f109 0902 	add.w	r9, r9, #2
 8026882:	441d      	add	r5, r3
 8026884:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026888:	e63d      	b.n	8026506 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802688a:	2800      	cmp	r0, #0
 802688c:	f43f aedd 	beq.w	802664a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 8026890:	5c79      	ldrb	r1, [r7, r1]
 8026892:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026896:	910b      	str	r1, [sp, #44]	; 0x2c
 8026898:	0e09      	lsrs	r1, r1, #24
 802689a:	9114      	str	r1, [sp, #80]	; 0x50
 802689c:	e6d5      	b.n	802664a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52a>
 802689e:	b01f      	add	sp, #124	; 0x7c
 80268a0:	ecbd 8b08 	vpop	{d8-d11}
 80268a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080268a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 80268a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268ac:	880e      	ldrh	r6, [r1, #0]
 80268ae:	b085      	sub	sp, #20
 80268b0:	ea4f 2826 	mov.w	r8, r6, asr #8
 80268b4:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80268b8:	4691      	mov	r9, r2
 80268ba:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80268be:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 80268c2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80268c6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80268ca:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 80268ce:	ea4f 08e6 	mov.w	r8, r6, asr #3
 80268d2:	9200      	str	r2, [sp, #0]
 80268d4:	00f6      	lsls	r6, r6, #3
 80268d6:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 80268da:	9201      	str	r2, [sp, #4]
 80268dc:	2c00      	cmp	r4, #0
 80268de:	b2f2      	uxtb	r2, r6
 80268e0:	fb04 560c 	mla	r6, r4, ip, r5
 80268e4:	9202      	str	r2, [sp, #8]
 80268e6:	eb09 0806 	add.w	r8, r9, r6
 80268ea:	db3f      	blt.n	802696c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80268ec:	45a6      	cmp	lr, r4
 80268ee:	dd3d      	ble.n	802696c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80268f0:	2d00      	cmp	r5, #0
 80268f2:	db39      	blt.n	8026968 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 80268f4:	45ac      	cmp	ip, r5
 80268f6:	dd37      	ble.n	8026968 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 80268f8:	f819 2006 	ldrb.w	r2, [r9, r6]
 80268fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026900:	1c6e      	adds	r6, r5, #1
 8026902:	d436      	bmi.n	8026972 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8026904:	45b4      	cmp	ip, r6
 8026906:	dd34      	ble.n	8026972 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8026908:	b3a8      	cbz	r0, 8026976 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 802690a:	f898 6001 	ldrb.w	r6, [r8, #1]
 802690e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8026912:	3401      	adds	r4, #1
 8026914:	d433      	bmi.n	802697e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8026916:	45a6      	cmp	lr, r4
 8026918:	dd31      	ble.n	802697e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 802691a:	b39f      	cbz	r7, 8026984 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 802691c:	2d00      	cmp	r5, #0
 802691e:	eb08 0e0c 	add.w	lr, r8, ip
 8026922:	db2a      	blt.n	802697a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8026924:	45ac      	cmp	ip, r5
 8026926:	dd28      	ble.n	802697a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8026928:	f818 400c 	ldrb.w	r4, [r8, ip]
 802692c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8026930:	3501      	adds	r5, #1
 8026932:	d42a      	bmi.n	802698a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8026934:	45ac      	cmp	ip, r5
 8026936:	dd28      	ble.n	802698a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8026938:	b348      	cbz	r0, 802698e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 802693a:	f89e 5001 	ldrb.w	r5, [lr, #1]
 802693e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8026942:	280f      	cmp	r0, #15
 8026944:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026948:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802694c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026950:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026954:	d801      	bhi.n	802695a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8026956:	2f0f      	cmp	r7, #15
 8026958:	d91b      	bls.n	8026992 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 802695a:	4b7d      	ldr	r3, [pc, #500]	; (8026b50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 802695c:	4a7d      	ldr	r2, [pc, #500]	; (8026b54 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 802695e:	487e      	ldr	r0, [pc, #504]	; (8026b58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8026960:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8026964:	f007 fa74 	bl	802de50 <__assert_func>
 8026968:	2200      	movs	r2, #0
 802696a:	e7c9      	b.n	8026900 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 802696c:	2600      	movs	r6, #0
 802696e:	4632      	mov	r2, r6
 8026970:	e7cf      	b.n	8026912 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026972:	2600      	movs	r6, #0
 8026974:	e7cd      	b.n	8026912 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8026976:	4606      	mov	r6, r0
 8026978:	e7cb      	b.n	8026912 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802697a:	2400      	movs	r4, #0
 802697c:	e7d8      	b.n	8026930 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 802697e:	2300      	movs	r3, #0
 8026980:	461c      	mov	r4, r3
 8026982:	e7de      	b.n	8026942 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026984:	463b      	mov	r3, r7
 8026986:	463c      	mov	r4, r7
 8026988:	e7db      	b.n	8026942 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802698a:	2300      	movs	r3, #0
 802698c:	e7d9      	b.n	8026942 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802698e:	4603      	mov	r3, r0
 8026990:	e7d7      	b.n	8026942 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8026992:	b280      	uxth	r0, r0
 8026994:	b2bf      	uxth	r7, r7
 8026996:	fb00 fe07 	mul.w	lr, r0, r7
 802699a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802699e:	0100      	lsls	r0, r0, #4
 80269a0:	eba0 0c0e 	sub.w	ip, r0, lr
 80269a4:	b2bf      	uxth	r7, r7
 80269a6:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80269aa:	fa1f fc8c 	uxth.w	ip, ip
 80269ae:	1bed      	subs	r5, r5, r7
 80269b0:	b2ad      	uxth	r5, r5
 80269b2:	fb0c f00a 	mul.w	r0, ip, sl
 80269b6:	fb05 000b 	mla	r0, r5, fp, r0
 80269ba:	fb07 0009 	mla	r0, r7, r9, r0
 80269be:	fb0e 0008 	mla	r0, lr, r8, r0
 80269c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80269c6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80269ca:	9003      	str	r0, [sp, #12]
 80269cc:	d018      	beq.n	8026a00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x158>
 80269ce:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80269d2:	fb0b f000 	mul.w	r0, fp, r0
 80269d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80269da:	fb0b fb02 	mul.w	fp, fp, r2
 80269de:	0a02      	lsrs	r2, r0, #8
 80269e0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80269e4:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80269e8:	4402      	add	r2, r0
 80269ea:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80269ee:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80269f2:	0a12      	lsrs	r2, r2, #8
 80269f4:	0a00      	lsrs	r0, r0, #8
 80269f6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80269fa:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80269fe:	4302      	orrs	r2, r0
 8026a00:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026a04:	d019      	beq.n	8026a3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x192>
 8026a06:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026a0a:	fb0a fb0b 	mul.w	fp, sl, fp
 8026a0e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026a12:	fb0a fa06 	mul.w	sl, sl, r6
 8026a16:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026a1a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026a1e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026a22:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026a26:	445e      	add	r6, fp
 8026a28:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026a2c:	0a36      	lsrs	r6, r6, #8
 8026a2e:	0a00      	lsrs	r0, r0, #8
 8026a30:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026a34:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026a38:	4306      	orrs	r6, r0
 8026a3a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026a3e:	d019      	beq.n	8026a74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1cc>
 8026a40:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026a44:	fb09 fa0a 	mul.w	sl, r9, sl
 8026a48:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026a4c:	fb09 f904 	mul.w	r9, r9, r4
 8026a50:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026a54:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026a58:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026a5c:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026a60:	4454      	add	r4, sl
 8026a62:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026a66:	0a24      	lsrs	r4, r4, #8
 8026a68:	0a00      	lsrs	r0, r0, #8
 8026a6a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026a6e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026a72:	4304      	orrs	r4, r0
 8026a74:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026a78:	d019      	beq.n	8026aae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x206>
 8026a7a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8026a7e:	fb08 f909 	mul.w	r9, r8, r9
 8026a82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026a86:	fb08 f803 	mul.w	r8, r8, r3
 8026a8a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8026a8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026a92:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026a96:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026a9a:	444b      	add	r3, r9
 8026a9c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8026aa0:	0a1b      	lsrs	r3, r3, #8
 8026aa2:	0a00      	lsrs	r0, r0, #8
 8026aa4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026aa8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026aac:	4303      	orrs	r3, r0
 8026aae:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026ab2:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8026ab6:	fb0c f808 	mul.w	r8, ip, r8
 8026aba:	fb05 8800 	mla	r8, r5, r0, r8
 8026abe:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8026ac2:	fb07 8800 	mla	r8, r7, r0, r8
 8026ac6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026aca:	fb0e 8000 	mla	r0, lr, r0, r8
 8026ace:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026ad2:	fb0c f606 	mul.w	r6, ip, r6
 8026ad6:	0a00      	lsrs	r0, r0, #8
 8026ad8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026adc:	fb05 6202 	mla	r2, r5, r2, r6
 8026ae0:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8026ae4:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8026ae8:	fb07 2700 	mla	r7, r7, r0, r2
 8026aec:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026af0:	9b03      	ldr	r3, [sp, #12]
 8026af2:	9d00      	ldr	r5, [sp, #0]
 8026af4:	9a02      	ldr	r2, [sp, #8]
 8026af6:	fb0e 7000 	mla	r0, lr, r0, r7
 8026afa:	43dc      	mvns	r4, r3
 8026afc:	9b01      	ldr	r3, [sp, #4]
 8026afe:	b2e4      	uxtb	r4, r4
 8026b00:	0a00      	lsrs	r0, r0, #8
 8026b02:	4363      	muls	r3, r4
 8026b04:	4365      	muls	r5, r4
 8026b06:	4362      	muls	r2, r4
 8026b08:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026b0c:	ea48 0000 	orr.w	r0, r8, r0
 8026b10:	4614      	mov	r4, r2
 8026b12:	1c5e      	adds	r6, r3, #1
 8026b14:	1c6a      	adds	r2, r5, #1
 8026b16:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8026b1a:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8026b1e:	0a03      	lsrs	r3, r0, #8
 8026b20:	0c02      	lsrs	r2, r0, #16
 8026b22:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8026b26:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8026b2a:	00db      	lsls	r3, r3, #3
 8026b2c:	0212      	lsls	r2, r2, #8
 8026b2e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026b32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026b36:	4313      	orrs	r3, r2
 8026b38:	1c62      	adds	r2, r4, #1
 8026b3a:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8026b3e:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8026b42:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8026b46:	4318      	orrs	r0, r3
 8026b48:	8008      	strh	r0, [r1, #0]
 8026b4a:	b005      	add	sp, #20
 8026b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b50:	08032b71 	.word	0x08032b71
 8026b54:	0803313e 	.word	0x0803313e
 8026b58:	08032bf5 	.word	0x08032bf5

08026b5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b60:	ed2d 8b08 	vpush	{d8-d11}
 8026b64:	b09b      	sub	sp, #108	; 0x6c
 8026b66:	eeb0 aa40 	vmov.f32	s20, s0
 8026b6a:	9218      	str	r2, [sp, #96]	; 0x60
 8026b6c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026b6e:	9116      	str	r1, [sp, #88]	; 0x58
 8026b70:	9307      	str	r3, [sp, #28]
 8026b72:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8026b76:	9019      	str	r0, [sp, #100]	; 0x64
 8026b78:	6850      	ldr	r0, [r2, #4]
 8026b7a:	6812      	ldr	r2, [r2, #0]
 8026b7c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8026b7e:	fb00 1303 	mla	r3, r0, r3, r1
 8026b82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026b86:	930a      	str	r3, [sp, #40]	; 0x28
 8026b88:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026b8a:	681b      	ldr	r3, [r3, #0]
 8026b8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8026b8e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026b90:	685e      	ldr	r6, [r3, #4]
 8026b92:	eef0 9a60 	vmov.f32	s19, s1
 8026b96:	eeb0 9a41 	vmov.f32	s18, s2
 8026b9a:	eeb0 8a62 	vmov.f32	s16, s5
 8026b9e:	eef0 8a43 	vmov.f32	s17, s6
 8026ba2:	eef0 ba44 	vmov.f32	s23, s8
 8026ba6:	eeb0 ba64 	vmov.f32	s22, s9
 8026baa:	eef0 aa45 	vmov.f32	s21, s10
 8026bae:	3604      	adds	r6, #4
 8026bb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026bb2:	2b00      	cmp	r3, #0
 8026bb4:	dc03      	bgt.n	8026bbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8026bb6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026bb8:	2b00      	cmp	r3, #0
 8026bba:	f340 8373 	ble.w	80272a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026bbe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026bc0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026bc4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026bc8:	1e48      	subs	r0, r1, #1
 8026bca:	1e57      	subs	r7, r2, #1
 8026bcc:	9b07      	ldr	r3, [sp, #28]
 8026bce:	2b00      	cmp	r3, #0
 8026bd0:	f340 8190 	ble.w	8026ef4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8026bd4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026bd6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026bda:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026bde:	d406      	bmi.n	8026bee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026be0:	4584      	cmp	ip, r0
 8026be2:	da04      	bge.n	8026bee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026be4:	2b00      	cmp	r3, #0
 8026be6:	db02      	blt.n	8026bee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026be8:	42bb      	cmp	r3, r7
 8026bea:	f2c0 8184 	blt.w	8026ef6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8026bee:	f11c 0c01 	adds.w	ip, ip, #1
 8026bf2:	f100 8172 	bmi.w	8026eda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026bf6:	4561      	cmp	r1, ip
 8026bf8:	f2c0 816f 	blt.w	8026eda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026bfc:	3301      	adds	r3, #1
 8026bfe:	f100 816c 	bmi.w	8026eda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026c02:	429a      	cmp	r2, r3
 8026c04:	f2c0 8169 	blt.w	8026eda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026c08:	9b07      	ldr	r3, [sp, #28]
 8026c0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026c0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8026c0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026c10:	2b00      	cmp	r3, #0
 8026c12:	f340 818e 	ble.w	8026f32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8026c16:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026c18:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026c1c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026c1e:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8026c22:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026c24:	141b      	asrs	r3, r3, #16
 8026c26:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026c2a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026c2e:	f100 81d1 	bmi.w	8026fd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026c32:	f101 38ff 	add.w	r8, r1, #4294967295
 8026c36:	4543      	cmp	r3, r8
 8026c38:	f280 81cc 	bge.w	8026fd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026c3c:	f1bc 0f00 	cmp.w	ip, #0
 8026c40:	f2c0 81c8 	blt.w	8026fd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026c44:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026c48:	45c4      	cmp	ip, r8
 8026c4a:	f280 81c3 	bge.w	8026fd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026c4e:	b209      	sxth	r1, r1
 8026c50:	fb0c 3301 	mla	r3, ip, r1, r3
 8026c54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026c56:	eb04 0803 	add.w	r8, r4, r3
 8026c5a:	5ce3      	ldrb	r3, [r4, r3]
 8026c5c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026c60:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026c64:	2a00      	cmp	r2, #0
 8026c66:	f000 81aa 	beq.w	8026fbe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8026c6a:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026c6e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026c72:	940b      	str	r4, [sp, #44]	; 0x2c
 8026c74:	0e24      	lsrs	r4, r4, #24
 8026c76:	9412      	str	r4, [sp, #72]	; 0x48
 8026c78:	b178      	cbz	r0, 8026c9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8026c7a:	eb08 0c01 	add.w	ip, r8, r1
 8026c7e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026c82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026c86:	9108      	str	r1, [sp, #32]
 8026c88:	0e09      	lsrs	r1, r1, #24
 8026c8a:	9110      	str	r1, [sp, #64]	; 0x40
 8026c8c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026c90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026c94:	910c      	str	r1, [sp, #48]	; 0x30
 8026c96:	0e09      	lsrs	r1, r1, #24
 8026c98:	9113      	str	r1, [sp, #76]	; 0x4c
 8026c9a:	b292      	uxth	r2, r2
 8026c9c:	b280      	uxth	r0, r0
 8026c9e:	fb02 f900 	mul.w	r9, r2, r0
 8026ca2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026ca6:	0112      	lsls	r2, r2, #4
 8026ca8:	eba2 0809 	sub.w	r8, r2, r9
 8026cac:	b280      	uxth	r0, r0
 8026cae:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026cb2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026cb4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026cb6:	fa1f f888 	uxth.w	r8, r8
 8026cba:	1a12      	subs	r2, r2, r0
 8026cbc:	b292      	uxth	r2, r2
 8026cbe:	fb08 f101 	mul.w	r1, r8, r1
 8026cc2:	fb02 110e 	mla	r1, r2, lr, r1
 8026cc6:	fb00 1104 	mla	r1, r0, r4, r1
 8026cca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026ccc:	fb09 1104 	mla	r1, r9, r4, r1
 8026cd0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026cd4:	2900      	cmp	r1, #0
 8026cd6:	f000 80f5 	beq.w	8026ec4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026cda:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026cde:	d01b      	beq.n	8026d18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8026ce0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026ce4:	fb0e fa0a 	mul.w	sl, lr, sl
 8026ce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026cec:	fb0e fe03 	mul.w	lr, lr, r3
 8026cf0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026cf4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026cf8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026cfc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026d00:	4453      	add	r3, sl
 8026d02:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026d06:	0a1b      	lsrs	r3, r3, #8
 8026d08:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026d10:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026d14:	ea43 030c 	orr.w	r3, r3, ip
 8026d18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026d1a:	2cff      	cmp	r4, #255	; 0xff
 8026d1c:	d021      	beq.n	8026d62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8026d1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026d20:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026d24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026d26:	fb04 fb0b 	mul.w	fp, r4, fp
 8026d2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026d2c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026d30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026d32:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026d36:	fb04 fa0a 	mul.w	sl, r4, sl
 8026d3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026d3e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026d42:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026d46:	44de      	add	lr, fp
 8026d48:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026d4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026d50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026d54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026d58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026d5c:	ea4e 040a 	orr.w	r4, lr, sl
 8026d60:	940b      	str	r4, [sp, #44]	; 0x2c
 8026d62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026d64:	2cff      	cmp	r4, #255	; 0xff
 8026d66:	d021      	beq.n	8026dac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8026d68:	9c08      	ldr	r4, [sp, #32]
 8026d6a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026d6e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026d70:	fb04 fb0b 	mul.w	fp, r4, fp
 8026d74:	9c08      	ldr	r4, [sp, #32]
 8026d76:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026d7a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026d7c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026d80:	fb04 fa0a 	mul.w	sl, r4, sl
 8026d84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026d88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026d8c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026d90:	44de      	add	lr, fp
 8026d92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026d96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026d9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026d9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026da2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026da6:	ea4e 040a 	orr.w	r4, lr, sl
 8026daa:	9408      	str	r4, [sp, #32]
 8026dac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026dae:	2cff      	cmp	r4, #255	; 0xff
 8026db0:	d021      	beq.n	8026df6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8026db2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026db4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026db8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026dba:	fb04 fb0b 	mul.w	fp, r4, fp
 8026dbe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026dc0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026dc4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026dc6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026dca:	fb04 fa0a 	mul.w	sl, r4, sl
 8026dce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026dd2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026dd6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026dda:	44de      	add	lr, fp
 8026ddc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026de0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026de8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026dec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026df0:	ea4e 040a 	orr.w	r4, lr, sl
 8026df4:	940c      	str	r4, [sp, #48]	; 0x30
 8026df6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026df8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026dfc:	9c08      	ldr	r4, [sp, #32]
 8026dfe:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026e02:	fb08 fc0c 	mul.w	ip, r8, ip
 8026e06:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026e0a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026e0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026e10:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026e14:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026e18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026e1a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026e1e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026e22:	fb08 f80e 	mul.w	r8, r8, lr
 8026e26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026e2a:	fb02 8303 	mla	r3, r2, r3, r8
 8026e2e:	9a08      	ldr	r2, [sp, #32]
 8026e30:	f8b7 8000 	ldrh.w	r8, [r7]
 8026e34:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026e3a:	fb00 330a 	mla	r3, r0, sl, r3
 8026e3e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8026e42:	fb09 3900 	mla	r9, r9, r0, r3
 8026e46:	43c9      	mvns	r1, r1
 8026e48:	ea4f 2228 	mov.w	r2, r8, asr #8
 8026e4c:	fa5f fe81 	uxtb.w	lr, r1
 8026e50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026e58:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026e5c:	fb02 f20e 	mul.w	r2, r2, lr
 8026e60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026e64:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026e68:	ea4c 0c09 	orr.w	ip, ip, r9
 8026e6c:	1c53      	adds	r3, r2, #1
 8026e6e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026e72:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8026e76:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8026e7a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026e7e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026e82:	4a63      	ldr	r2, [pc, #396]	; (8027010 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8026e84:	fb00 f00e 	mul.w	r0, r0, lr
 8026e88:	b2db      	uxtb	r3, r3
 8026e8a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8026e8e:	1c43      	adds	r3, r0, #1
 8026e90:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026e94:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8026e98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8026e9c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026ea0:	b2c9      	uxtb	r1, r1
 8026ea2:	00db      	lsls	r3, r3, #3
 8026ea4:	fb01 f10e 	mul.w	r1, r1, lr
 8026ea8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026eac:	4313      	orrs	r3, r2
 8026eae:	1c4a      	adds	r2, r1, #1
 8026eb0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026eb4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026eb8:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8026ebc:	ea4c 0c03 	orr.w	ip, ip, r3
 8026ec0:	f8a7 c000 	strh.w	ip, [r7]
 8026ec4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026ec6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026ec8:	441a      	add	r2, r3
 8026eca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026ecc:	922d      	str	r2, [sp, #180]	; 0xb4
 8026ece:	441d      	add	r5, r3
 8026ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026ed2:	3b01      	subs	r3, #1
 8026ed4:	3702      	adds	r7, #2
 8026ed6:	9317      	str	r3, [sp, #92]	; 0x5c
 8026ed8:	e699      	b.n	8026c0e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026eda:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026edc:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026ede:	441c      	add	r4, r3
 8026ee0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026ee2:	942d      	str	r4, [sp, #180]	; 0xb4
 8026ee4:	441d      	add	r5, r3
 8026ee6:	9b07      	ldr	r3, [sp, #28]
 8026ee8:	3b01      	subs	r3, #1
 8026eea:	9307      	str	r3, [sp, #28]
 8026eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026eee:	3302      	adds	r3, #2
 8026ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8026ef2:	e66b      	b.n	8026bcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8026ef4:	d024      	beq.n	8026f40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026ef6:	9b07      	ldr	r3, [sp, #28]
 8026ef8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8026efa:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026efc:	3b01      	subs	r3, #1
 8026efe:	fb00 4003 	mla	r0, r0, r3, r4
 8026f02:	1400      	asrs	r0, r0, #16
 8026f04:	f53f ae80 	bmi.w	8026c08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026f08:	3901      	subs	r1, #1
 8026f0a:	4288      	cmp	r0, r1
 8026f0c:	f6bf ae7c 	bge.w	8026c08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026f10:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8026f12:	fb01 5303 	mla	r3, r1, r3, r5
 8026f16:	141b      	asrs	r3, r3, #16
 8026f18:	f53f ae76 	bmi.w	8026c08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026f1c:	3a01      	subs	r2, #1
 8026f1e:	4293      	cmp	r3, r2
 8026f20:	f6bf ae72 	bge.w	8026c08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8026f24:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026f28:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8026f2c:	f1bb 0f00 	cmp.w	fp, #0
 8026f30:	dc70      	bgt.n	8027014 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026f32:	9b07      	ldr	r3, [sp, #28]
 8026f34:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f3a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8026f40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026f42:	2b00      	cmp	r3, #0
 8026f44:	f340 81ae 	ble.w	80272a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026f48:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026f50:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026f54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026f56:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026f5a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026f5e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026f62:	eef0 6a48 	vmov.f32	s13, s16
 8026f66:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026f6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f6e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026f72:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8026f76:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026f7a:	eef0 6a68 	vmov.f32	s13, s17
 8026f7e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026f82:	ee18 2a10 	vmov	r2, s16
 8026f86:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026f8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8026f8e:	ee18 2a90 	vmov	r2, s17
 8026f92:	932f      	str	r3, [sp, #188]	; 0xbc
 8026f94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026f96:	fb92 f3f3 	sdiv	r3, r2, r3
 8026f9a:	9330      	str	r3, [sp, #192]	; 0xc0
 8026f9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026f9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026fa0:	3b01      	subs	r3, #1
 8026fa2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026fa6:	9316      	str	r3, [sp, #88]	; 0x58
 8026fa8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026faa:	bf08      	it	eq
 8026fac:	4613      	moveq	r3, r2
 8026fae:	ee16 5a90 	vmov	r5, s13
 8026fb2:	9307      	str	r3, [sp, #28]
 8026fb4:	eef0 8a67 	vmov.f32	s17, s15
 8026fb8:	eeb0 8a47 	vmov.f32	s16, s14
 8026fbc:	e5f8      	b.n	8026bb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8026fbe:	2800      	cmp	r0, #0
 8026fc0:	f43f ae6b 	beq.w	8026c9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8026fc4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026fc8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026fcc:	9108      	str	r1, [sp, #32]
 8026fce:	0e09      	lsrs	r1, r1, #24
 8026fd0:	9110      	str	r1, [sp, #64]	; 0x40
 8026fd2:	e662      	b.n	8026c9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8026fd4:	f113 0801 	adds.w	r8, r3, #1
 8026fd8:	f53f af74 	bmi.w	8026ec4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026fdc:	4541      	cmp	r1, r8
 8026fde:	f6ff af71 	blt.w	8026ec4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026fe2:	f11c 0801 	adds.w	r8, ip, #1
 8026fe6:	f53f af6d 	bmi.w	8026ec4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026fea:	45c6      	cmp	lr, r8
 8026fec:	f6ff af6a 	blt.w	8026ec4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026ff0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026ff4:	b209      	sxth	r1, r1
 8026ff6:	fa0f f38e 	sxth.w	r3, lr
 8026ffa:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8026ffe:	9301      	str	r3, [sp, #4]
 8027000:	9100      	str	r1, [sp, #0]
 8027002:	4633      	mov	r3, r6
 8027004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027006:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027008:	4639      	mov	r1, r7
 802700a:	f7ff fc4d 	bl	80268a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 802700e:	e759      	b.n	8026ec4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027010:	fffff800 	.word	0xfffff800
 8027014:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8027016:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8027018:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802701c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802701e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027022:	1427      	asrs	r7, r4, #16
 8027024:	142b      	asrs	r3, r5, #16
 8027026:	fb01 7303 	mla	r3, r1, r3, r7
 802702a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802702c:	18e7      	adds	r7, r4, r3
 802702e:	5ce3      	ldrb	r3, [r4, r3]
 8027030:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027034:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027038:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802703c:	2a00      	cmp	r2, #0
 802703e:	f000 8127 	beq.w	8027290 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8027042:	f897 e001 	ldrb.w	lr, [r7, #1]
 8027046:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802704a:	940d      	str	r4, [sp, #52]	; 0x34
 802704c:	0e24      	lsrs	r4, r4, #24
 802704e:	9414      	str	r4, [sp, #80]	; 0x50
 8027050:	b170      	cbz	r0, 8027070 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027052:	eb07 0e01 	add.w	lr, r7, r1
 8027056:	5c79      	ldrb	r1, [r7, r1]
 8027058:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802705c:	9109      	str	r1, [sp, #36]	; 0x24
 802705e:	0e09      	lsrs	r1, r1, #24
 8027060:	9111      	str	r1, [sp, #68]	; 0x44
 8027062:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8027066:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802706a:	910e      	str	r1, [sp, #56]	; 0x38
 802706c:	0e09      	lsrs	r1, r1, #24
 802706e:	9115      	str	r1, [sp, #84]	; 0x54
 8027070:	b292      	uxth	r2, r2
 8027072:	b280      	uxth	r0, r0
 8027074:	fb02 f800 	mul.w	r8, r2, r0
 8027078:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802707c:	0112      	lsls	r2, r2, #4
 802707e:	eba2 0e08 	sub.w	lr, r2, r8
 8027082:	b280      	uxth	r0, r0
 8027084:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027088:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802708a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802708c:	fa1f fe8e 	uxth.w	lr, lr
 8027090:	1a09      	subs	r1, r1, r0
 8027092:	b289      	uxth	r1, r1
 8027094:	fb0e f202 	mul.w	r2, lr, r2
 8027098:	fb01 220c 	mla	r2, r1, ip, r2
 802709c:	fb00 2204 	mla	r2, r0, r4, r2
 80270a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80270a2:	fb08 2204 	mla	r2, r8, r4, r2
 80270a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80270aa:	2a00      	cmp	r2, #0
 80270ac:	f000 80e5 	beq.w	802727a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80270b0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80270b4:	d019      	beq.n	80270ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 80270b6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80270ba:	fb0c fa0a 	mul.w	sl, ip, sl
 80270be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80270c2:	fb0c fc03 	mul.w	ip, ip, r3
 80270c6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80270ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80270ce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80270d2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80270d6:	4453      	add	r3, sl
 80270d8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80270dc:	0a1b      	lsrs	r3, r3, #8
 80270de:	0a3f      	lsrs	r7, r7, #8
 80270e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80270e4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80270e8:	433b      	orrs	r3, r7
 80270ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80270ec:	2cff      	cmp	r4, #255	; 0xff
 80270ee:	d020      	beq.n	8027132 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 80270f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80270f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80270f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80270f8:	4367      	muls	r7, r4
 80270fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80270fc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027100:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027102:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027106:	fb04 fa0a 	mul.w	sl, r4, sl
 802710a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802710e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027112:	44bc      	add	ip, r7
 8027114:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027118:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802711c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027120:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027124:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027128:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802712c:	ea4c 040a 	orr.w	r4, ip, sl
 8027130:	940d      	str	r4, [sp, #52]	; 0x34
 8027132:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027134:	2cff      	cmp	r4, #255	; 0xff
 8027136:	d020      	beq.n	802717a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8027138:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802713a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802713e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027140:	4367      	muls	r7, r4
 8027142:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027144:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027148:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802714a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802714e:	fb04 fa0a 	mul.w	sl, r4, sl
 8027152:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027156:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802715a:	44bc      	add	ip, r7
 802715c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027160:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027164:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027168:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802716c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027170:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027174:	ea4c 040a 	orr.w	r4, ip, sl
 8027178:	9409      	str	r4, [sp, #36]	; 0x24
 802717a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802717c:	2cff      	cmp	r4, #255	; 0xff
 802717e:	d020      	beq.n	80271c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8027180:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027182:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027186:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027188:	4367      	muls	r7, r4
 802718a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802718c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027190:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027192:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027196:	fb04 fa0a 	mul.w	sl, r4, sl
 802719a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802719e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80271a2:	44bc      	add	ip, r7
 80271a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80271a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80271ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80271b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80271b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80271bc:	ea4c 040a 	orr.w	r4, ip, sl
 80271c0:	940e      	str	r4, [sp, #56]	; 0x38
 80271c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80271c4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80271c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80271ca:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80271ce:	fb0e f707 	mul.w	r7, lr, r7
 80271d2:	fb01 770c 	mla	r7, r1, ip, r7
 80271d6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80271da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80271dc:	fb00 770c 	mla	r7, r0, ip, r7
 80271e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80271e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80271e6:	fb08 770c 	mla	r7, r8, ip, r7
 80271ea:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80271ee:	fb0e fe0c 	mul.w	lr, lr, ip
 80271f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80271f6:	fb01 e303 	mla	r3, r1, r3, lr
 80271fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80271fc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027200:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027202:	fb00 330a 	mla	r3, r0, sl, r3
 8027206:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802720a:	fb08 3c0c 	mla	ip, r8, ip, r3
 802720e:	f8b9 3000 	ldrh.w	r3, [r9]
 8027212:	43d2      	mvns	r2, r2
 8027214:	1218      	asrs	r0, r3, #8
 8027216:	b2d2      	uxtb	r2, r2
 8027218:	10d9      	asrs	r1, r3, #3
 802721a:	0a3f      	lsrs	r7, r7, #8
 802721c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027220:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027224:	00db      	lsls	r3, r3, #3
 8027226:	4350      	muls	r0, r2
 8027228:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802722c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027230:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027234:	b2db      	uxtb	r3, r3
 8027236:	ea47 070c 	orr.w	r7, r7, ip
 802723a:	4351      	muls	r1, r2
 802723c:	4353      	muls	r3, r2
 802723e:	1c42      	adds	r2, r0, #1
 8027240:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027244:	0c3a      	lsrs	r2, r7, #16
 8027246:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802724a:	4a19      	ldr	r2, [pc, #100]	; (80272b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 802724c:	b2c0      	uxtb	r0, r0
 802724e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8027252:	1c4a      	adds	r2, r1, #1
 8027254:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027258:	0a3a      	lsrs	r2, r7, #8
 802725a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802725e:	00c9      	lsls	r1, r1, #3
 8027260:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027264:	4301      	orrs	r1, r0
 8027266:	1c58      	adds	r0, r3, #1
 8027268:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802726c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027270:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8027274:	4308      	orrs	r0, r1
 8027276:	f8a9 0000 	strh.w	r0, [r9]
 802727a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802727c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802727e:	441a      	add	r2, r3
 8027280:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027282:	922d      	str	r2, [sp, #180]	; 0xb4
 8027284:	f109 0902 	add.w	r9, r9, #2
 8027288:	441d      	add	r5, r3
 802728a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802728e:	e64d      	b.n	8026f2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8027290:	2800      	cmp	r0, #0
 8027292:	f43f aeed 	beq.w	8027070 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8027296:	5c79      	ldrb	r1, [r7, r1]
 8027298:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802729c:	9109      	str	r1, [sp, #36]	; 0x24
 802729e:	0e09      	lsrs	r1, r1, #24
 80272a0:	9111      	str	r1, [sp, #68]	; 0x44
 80272a2:	e6e5      	b.n	8027070 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80272a4:	b01b      	add	sp, #108	; 0x6c
 80272a6:	ecbd 8b08 	vpop	{d8-d11}
 80272aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80272ae:	bf00      	nop
 80272b0:	fffff800 	.word	0xfffff800

080272b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80272b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272b8:	b085      	sub	sp, #20
 80272ba:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80272be:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80272c2:	9103      	str	r1, [sp, #12]
 80272c4:	fb05 7106 	mla	r1, r5, r6, r7
 80272c8:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80272cc:	2d00      	cmp	r5, #0
 80272ce:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80272d2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80272d6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80272da:	9401      	str	r4, [sp, #4]
 80272dc:	eb03 0901 	add.w	r9, r3, r1
 80272e0:	f2c0 80c0 	blt.w	8027464 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80272e4:	45a8      	cmp	r8, r5
 80272e6:	f340 80bd 	ble.w	8027464 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80272ea:	2f00      	cmp	r7, #0
 80272ec:	f2c0 80b6 	blt.w	802745c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80272f0:	42be      	cmp	r6, r7
 80272f2:	f340 80b3 	ble.w	802745c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80272f6:	f813 c001 	ldrb.w	ip, [r3, r1]
 80272fa:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80272fe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027302:	d019      	beq.n	8027338 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8027304:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8027308:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802730c:	435a      	muls	r2, r3
 802730e:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8027312:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8027316:	fb0c f403 	mul.w	r4, ip, r3
 802731a:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802731e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027322:	441a      	add	r2, r3
 8027324:	f104 0320 	add.w	r3, r4, #32
 8027328:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 802732c:	0a1b      	lsrs	r3, r3, #8
 802732e:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8027332:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027336:	4319      	orrs	r1, r3
 8027338:	b289      	uxth	r1, r1
 802733a:	1c7b      	adds	r3, r7, #1
 802733c:	f100 8097 	bmi.w	802746e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8027340:	429e      	cmp	r6, r3
 8027342:	f340 8094 	ble.w	802746e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8027346:	2800      	cmp	r0, #0
 8027348:	f000 8094 	beq.w	8027474 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 802734c:	f899 4001 	ldrb.w	r4, [r9, #1]
 8027350:	9b01      	ldr	r3, [sp, #4]
 8027352:	2cff      	cmp	r4, #255	; 0xff
 8027354:	885b      	ldrh	r3, [r3, #2]
 8027356:	d01b      	beq.n	8027390 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8027358:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 802735c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8027360:	fb0a f202 	mul.w	r2, sl, r2
 8027364:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027368:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802736c:	fb04 fa03 	mul.w	sl, r4, r3
 8027370:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8027374:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027378:	441a      	add	r2, r3
 802737a:	f10a 0320 	add.w	r3, sl, #32
 802737e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027382:	0a1b      	lsrs	r3, r3, #8
 8027384:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8027388:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802738c:	ea4b 0303 	orr.w	r3, fp, r3
 8027390:	b29b      	uxth	r3, r3
 8027392:	3501      	adds	r5, #1
 8027394:	d474      	bmi.n	8027480 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8027396:	45a8      	cmp	r8, r5
 8027398:	dd72      	ble.n	8027480 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802739a:	f1be 0f00 	cmp.w	lr, #0
 802739e:	f000 8120 	beq.w	80275e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 80273a2:	2f00      	cmp	r7, #0
 80273a4:	db69      	blt.n	802747a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80273a6:	42be      	cmp	r6, r7
 80273a8:	dd67      	ble.n	802747a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80273aa:	f819 5006 	ldrb.w	r5, [r9, r6]
 80273ae:	9a01      	ldr	r2, [sp, #4]
 80273b0:	2dff      	cmp	r5, #255	; 0xff
 80273b2:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80273b6:	d01c      	beq.n	80273f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 80273b8:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80273bc:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80273c0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80273c4:	fb05 fa0b 	mul.w	sl, r5, fp
 80273c8:	fb08 f802 	mul.w	r8, r8, r2
 80273cc:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80273d0:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80273d4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80273d8:	4490      	add	r8, r2
 80273da:	f10a 0220 	add.w	r2, sl, #32
 80273de:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80273e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80273e6:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80273ea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80273ee:	ea4b 0b0a 	orr.w	fp, fp, sl
 80273f2:	fa1f fb8b 	uxth.w	fp, fp
 80273f6:	3701      	adds	r7, #1
 80273f8:	d447      	bmi.n	802748a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80273fa:	42be      	cmp	r6, r7
 80273fc:	dd45      	ble.n	802748a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80273fe:	2800      	cmp	r0, #0
 8027400:	d046      	beq.n	8027490 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8027402:	3601      	adds	r6, #1
 8027404:	9a01      	ldr	r2, [sp, #4]
 8027406:	f819 7006 	ldrb.w	r7, [r9, r6]
 802740a:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 802740e:	2fff      	cmp	r7, #255	; 0xff
 8027410:	d01a      	beq.n	8027448 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8027412:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8027416:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802741a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802741e:	fb07 f902 	mul.w	r9, r7, r2
 8027422:	fb08 f806 	mul.w	r8, r8, r6
 8027426:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802742a:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 802742e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027432:	44b0      	add	r8, r6
 8027434:	f109 0620 	add.w	r6, r9, #32
 8027438:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 802743c:	0a36      	lsrs	r6, r6, #8
 802743e:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8027442:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8027446:	4332      	orrs	r2, r6
 8027448:	b292      	uxth	r2, r2
 802744a:	280f      	cmp	r0, #15
 802744c:	d922      	bls.n	8027494 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 802744e:	4b69      	ldr	r3, [pc, #420]	; (80275f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8027450:	4a69      	ldr	r2, [pc, #420]	; (80275f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8027452:	486a      	ldr	r0, [pc, #424]	; (80275fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8027454:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8027458:	f006 fcfa 	bl	802de50 <__assert_func>
 802745c:	f04f 0c00 	mov.w	ip, #0
 8027460:	4661      	mov	r1, ip
 8027462:	e76a      	b.n	802733a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8027464:	2400      	movs	r4, #0
 8027466:	46a4      	mov	ip, r4
 8027468:	4623      	mov	r3, r4
 802746a:	4621      	mov	r1, r4
 802746c:	e791      	b.n	8027392 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802746e:	2400      	movs	r4, #0
 8027470:	4623      	mov	r3, r4
 8027472:	e78e      	b.n	8027392 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8027474:	4604      	mov	r4, r0
 8027476:	4603      	mov	r3, r0
 8027478:	e78b      	b.n	8027392 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802747a:	2500      	movs	r5, #0
 802747c:	46ab      	mov	fp, r5
 802747e:	e7ba      	b.n	80273f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8027480:	2700      	movs	r7, #0
 8027482:	463d      	mov	r5, r7
 8027484:	463a      	mov	r2, r7
 8027486:	46bb      	mov	fp, r7
 8027488:	e7df      	b.n	802744a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 802748a:	2700      	movs	r7, #0
 802748c:	463a      	mov	r2, r7
 802748e:	e7dc      	b.n	802744a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8027490:	4607      	mov	r7, r0
 8027492:	4602      	mov	r2, r0
 8027494:	f1be 0f0f 	cmp.w	lr, #15
 8027498:	d8d9      	bhi.n	802744e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 802749a:	b286      	uxth	r6, r0
 802749c:	fa1f f98e 	uxth.w	r9, lr
 80274a0:	fb06 f809 	mul.w	r8, r6, r9
 80274a4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80274a8:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80274ac:	0136      	lsls	r6, r6, #4
 80274ae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80274b2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80274b6:	9601      	str	r6, [sp, #4]
 80274b8:	ea4a 0101 	orr.w	r1, sl, r1
 80274bc:	fa1f f689 	uxth.w	r6, r9
 80274c0:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80274c4:	fb10 f90e 	smulbb	r9, r0, lr
 80274c8:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80274cc:	9602      	str	r6, [sp, #8]
 80274ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80274d2:	460e      	mov	r6, r1
 80274d4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80274d8:	f1ce 0110 	rsb	r1, lr, #16
 80274dc:	1a09      	subs	r1, r1, r0
 80274de:	ea4a 0303 	orr.w	r3, sl, r3
 80274e2:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80274e6:	4343      	muls	r3, r0
 80274e8:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80274ec:	9801      	ldr	r0, [sp, #4]
 80274ee:	fb01 3106 	mla	r1, r1, r6, r3
 80274f2:	9e02      	ldr	r6, [sp, #8]
 80274f4:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80274f8:	1b80      	subs	r0, r0, r6
 80274fa:	9e01      	ldr	r6, [sp, #4]
 80274fc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027500:	eba6 0608 	sub.w	r6, r6, r8
 8027504:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027508:	b2b6      	uxth	r6, r6
 802750a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802750e:	ea4a 0202 	orr.w	r2, sl, r2
 8027512:	b280      	uxth	r0, r0
 8027514:	4374      	muls	r4, r6
 8027516:	fb09 1302 	mla	r3, r9, r2, r1
 802751a:	fb0c 4400 	mla	r4, ip, r0, r4
 802751e:	9a03      	ldr	r2, [sp, #12]
 8027520:	9802      	ldr	r0, [sp, #8]
 8027522:	8811      	ldrh	r1, [r2, #0]
 8027524:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8027528:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802752c:	fb00 4505 	mla	r5, r0, r5, r4
 8027530:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027534:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027538:	fb08 5707 	mla	r7, r8, r7, r5
 802753c:	ea4a 0b0b 	orr.w	fp, sl, fp
 8027540:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027544:	b292      	uxth	r2, r2
 8027546:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802754a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802754e:	4357      	muls	r7, r2
 8027550:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8027554:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027558:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802755c:	f107 0801 	add.w	r8, r7, #1
 8027560:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027564:	ea43 0e0e 	orr.w	lr, r3, lr
 8027568:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 802756c:	fa1f f38e 	uxth.w	r3, lr
 8027570:	1208      	asrs	r0, r1, #8
 8027572:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8027576:	b2ff      	uxtb	r7, r7
 8027578:	121c      	asrs	r4, r3, #8
 802757a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802757e:	fb10 f007 	smulbb	r0, r0, r7
 8027582:	10cd      	asrs	r5, r1, #3
 8027584:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8027588:	fb04 0402 	mla	r4, r4, r2, r0
 802758c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027590:	10d8      	asrs	r0, r3, #3
 8027592:	fb15 f507 	smulbb	r5, r5, r7
 8027596:	00db      	lsls	r3, r3, #3
 8027598:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802759c:	fb00 5002 	mla	r0, r0, r2, r5
 80275a0:	b2dd      	uxtb	r5, r3
 80275a2:	00cb      	lsls	r3, r1, #3
 80275a4:	b2db      	uxtb	r3, r3
 80275a6:	fb13 f307 	smulbb	r3, r3, r7
 80275aa:	fb05 3202 	mla	r2, r5, r2, r3
 80275ae:	b2a4      	uxth	r4, r4
 80275b0:	b292      	uxth	r2, r2
 80275b2:	1c63      	adds	r3, r4, #1
 80275b4:	b280      	uxth	r0, r0
 80275b6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80275ba:	1c53      	adds	r3, r2, #1
 80275bc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80275c0:	1c42      	adds	r2, r0, #1
 80275c2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80275c6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80275ca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80275ce:	0940      	lsrs	r0, r0, #5
 80275d0:	4323      	orrs	r3, r4
 80275d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80275d6:	9a03      	ldr	r2, [sp, #12]
 80275d8:	4303      	orrs	r3, r0
 80275da:	8013      	strh	r3, [r2, #0]
 80275dc:	b005      	add	sp, #20
 80275de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275e2:	280f      	cmp	r0, #15
 80275e4:	f63f af33 	bhi.w	802744e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80275e8:	4677      	mov	r7, lr
 80275ea:	4675      	mov	r5, lr
 80275ec:	4672      	mov	r2, lr
 80275ee:	46f3      	mov	fp, lr
 80275f0:	e753      	b.n	802749a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 80275f2:	bf00      	nop
 80275f4:	08032b71 	.word	0x08032b71
 80275f8:	0803313e 	.word	0x0803313e
 80275fc:	08032bf5 	.word	0x08032bf5

08027600 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027604:	ed2d 8b08 	vpush	{d8-d11}
 8027608:	b097      	sub	sp, #92	; 0x5c
 802760a:	eeb0 aa40 	vmov.f32	s20, s0
 802760e:	9214      	str	r2, [sp, #80]	; 0x50
 8027610:	9308      	str	r3, [sp, #32]
 8027612:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027614:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8027618:	9312      	str	r3, [sp, #72]	; 0x48
 802761a:	9111      	str	r1, [sp, #68]	; 0x44
 802761c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8027620:	9015      	str	r0, [sp, #84]	; 0x54
 8027622:	6850      	ldr	r0, [r2, #4]
 8027624:	6812      	ldr	r2, [r2, #0]
 8027626:	fb00 1303 	mla	r3, r0, r3, r1
 802762a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802762e:	9309      	str	r3, [sp, #36]	; 0x24
 8027630:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027632:	681b      	ldr	r3, [r3, #0]
 8027634:	930b      	str	r3, [sp, #44]	; 0x2c
 8027636:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027638:	685b      	ldr	r3, [r3, #4]
 802763a:	930c      	str	r3, [sp, #48]	; 0x30
 802763c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8027640:	930a      	str	r3, [sp, #40]	; 0x28
 8027642:	eef0 9a60 	vmov.f32	s19, s1
 8027646:	eeb0 9a41 	vmov.f32	s18, s2
 802764a:	eeb0 8a62 	vmov.f32	s16, s5
 802764e:	eef0 8a43 	vmov.f32	s17, s6
 8027652:	eef0 ba44 	vmov.f32	s23, s8
 8027656:	eeb0 ba64 	vmov.f32	s22, s9
 802765a:	eef0 aa45 	vmov.f32	s21, s10
 802765e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027660:	2b00      	cmp	r3, #0
 8027662:	dc03      	bgt.n	802766c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027664:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027666:	2b00      	cmp	r3, #0
 8027668:	f340 83cb 	ble.w	8027e02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 802766c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802766e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027672:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027676:	1e48      	subs	r0, r1, #1
 8027678:	1e55      	subs	r5, r2, #1
 802767a:	9b08      	ldr	r3, [sp, #32]
 802767c:	2b00      	cmp	r3, #0
 802767e:	f340 81a3 	ble.w	80279c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8027682:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8027684:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027686:	1436      	asrs	r6, r6, #16
 8027688:	ea4f 4323 	mov.w	r3, r3, asr #16
 802768c:	d406      	bmi.n	802769c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802768e:	4286      	cmp	r6, r0
 8027690:	da04      	bge.n	802769c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027692:	2b00      	cmp	r3, #0
 8027694:	db02      	blt.n	802769c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027696:	42ab      	cmp	r3, r5
 8027698:	f2c0 8197 	blt.w	80279ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802769c:	3601      	adds	r6, #1
 802769e:	f100 8184 	bmi.w	80279aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80276a2:	42b1      	cmp	r1, r6
 80276a4:	f2c0 8181 	blt.w	80279aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80276a8:	3301      	adds	r3, #1
 80276aa:	f100 817e 	bmi.w	80279aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80276ae:	429a      	cmp	r2, r3
 80276b0:	f2c0 817b 	blt.w	80279aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80276b4:	9b08      	ldr	r3, [sp, #32]
 80276b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80276b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80276ba:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80276be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80276c0:	2b00      	cmp	r3, #0
 80276c2:	f340 81a4 	ble.w	8027a0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 80276c6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80276c8:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80276ca:	1418      	asrs	r0, r3, #16
 80276cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80276ce:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80276d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80276d4:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80276d8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80276da:	142d      	asrs	r5, r5, #16
 80276dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80276e0:	f100 81f8 	bmi.w	8027ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80276e4:	f102 3eff 	add.w	lr, r2, #4294967295
 80276e8:	4575      	cmp	r5, lr
 80276ea:	f280 81f3 	bge.w	8027ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80276ee:	2800      	cmp	r0, #0
 80276f0:	f2c0 81f0 	blt.w	8027ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80276f4:	f103 3eff 	add.w	lr, r3, #4294967295
 80276f8:	4570      	cmp	r0, lr
 80276fa:	f280 81eb 	bge.w	8027ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80276fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027700:	b212      	sxth	r2, r2
 8027702:	fb00 5002 	mla	r0, r0, r2, r5
 8027706:	fa1f fe81 	uxth.w	lr, r1
 802770a:	eb03 0a00 	add.w	sl, r3, r0
 802770e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027712:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027716:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802771a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802771e:	b29b      	uxth	r3, r3
 8027720:	f1bc 0f00 	cmp.w	ip, #0
 8027724:	f000 81b9 	beq.w	8027a9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8027728:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802772c:	940d      	str	r4, [sp, #52]	; 0x34
 802772e:	eb0a 0b02 	add.w	fp, sl, r2
 8027732:	fa1f fa8c 	uxth.w	sl, ip
 8027736:	fb0a fe0e 	mul.w	lr, sl, lr
 802773a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802773e:	fa1f fa8a 	uxth.w	sl, sl
 8027742:	eba5 050e 	sub.w	r5, r5, lr
 8027746:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802774a:	940e      	str	r4, [sp, #56]	; 0x38
 802774c:	eba3 030a 	sub.w	r3, r3, sl
 8027750:	b2ad      	uxth	r5, r5
 8027752:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027754:	b29b      	uxth	r3, r3
 8027756:	fb08 f505 	mul.w	r5, r8, r5
 802775a:	fb09 5303 	mla	r3, r9, r3, r5
 802775e:	fb0a 3304 	mla	r3, sl, r4, r3
 8027762:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027764:	fb0e 3304 	mla	r3, lr, r4, r3
 8027768:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802776c:	2b00      	cmp	r3, #0
 802776e:	f000 810f 	beq.w	8027990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027772:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027774:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027778:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 802777c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027780:	f000 8190 	beq.w	8027aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8027784:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027788:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802778c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027790:	fb09 f000 	mul.w	r0, r9, r0
 8027794:	fb0a fe0e 	mul.w	lr, sl, lr
 8027798:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 802779c:	f100 0b20 	add.w	fp, r0, #32
 80277a0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80277a4:	44ce      	add	lr, r9
 80277a6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80277aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80277ae:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80277b2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80277b6:	ea4e 0909 	orr.w	r9, lr, r9
 80277ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80277be:	8868      	ldrh	r0, [r5, #2]
 80277c0:	d019      	beq.n	80277f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80277c2:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80277c6:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80277ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80277ce:	fb08 f800 	mul.w	r8, r8, r0
 80277d2:	fb0a fe0e 	mul.w	lr, sl, lr
 80277d6:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80277da:	f108 0b20 	add.w	fp, r8, #32
 80277de:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80277e2:	4486      	add	lr, r0
 80277e4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80277e8:	0a00      	lsrs	r0, r0, #8
 80277ea:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80277ee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80277f2:	ea4e 0000 	orr.w	r0, lr, r0
 80277f6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80277fa:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80277fe:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027802:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027806:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802780a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802780e:	ea4e 0909 	orr.w	r9, lr, r9
 8027812:	ea4a 0000 	orr.w	r0, sl, r0
 8027816:	f1bc 0f00 	cmp.w	ip, #0
 802781a:	f000 8145 	beq.w	8027aa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802781e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8027822:	3a01      	subs	r2, #1
 8027824:	0052      	lsls	r2, r2, #1
 8027826:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027828:	3202      	adds	r2, #2
 802782a:	2cff      	cmp	r4, #255	; 0xff
 802782c:	eb05 0e02 	add.w	lr, r5, r2
 8027830:	5aaa      	ldrh	r2, [r5, r2]
 8027832:	d018      	beq.n	8027866 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027834:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027838:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802783c:	fb04 fa02 	mul.w	sl, r4, r2
 8027840:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027844:	fb08 f805 	mul.w	r8, r8, r5
 8027848:	f10a 0520 	add.w	r5, sl, #32
 802784c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027850:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027854:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027858:	4442      	add	r2, r8
 802785a:	0a2d      	lsrs	r5, r5, #8
 802785c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027860:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027864:	432a      	orrs	r2, r5
 8027866:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027868:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802786c:	2cff      	cmp	r4, #255	; 0xff
 802786e:	d01a      	beq.n	80278a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8027870:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027874:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027878:	fb04 fa05 	mul.w	sl, r4, r5
 802787c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027880:	fb08 f80e 	mul.w	r8, r8, lr
 8027884:	f10a 0e20 	add.w	lr, sl, #32
 8027888:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802788c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027890:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027894:	4445      	add	r5, r8
 8027896:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802789a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802789e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80278a2:	ea45 050e 	orr.w	r5, r5, lr
 80278a6:	fb1c fe01 	smulbb	lr, ip, r1
 80278aa:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80278ae:	f1cc 0810 	rsb	r8, ip, #16
 80278b2:	eba8 0801 	sub.w	r8, r8, r1
 80278b6:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80278ba:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80278be:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80278c2:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80278c6:	4341      	muls	r1, r0
 80278c8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80278cc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80278d0:	ea4a 0202 	orr.w	r2, sl, r2
 80278d4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80278d8:	fb09 1108 	mla	r1, r9, r8, r1
 80278dc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80278e0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80278e4:	fb0c 1102 	mla	r1, ip, r2, r1
 80278e8:	ea4b 0505 	orr.w	r5, fp, r5
 80278ec:	fb0e 1e05 	mla	lr, lr, r5, r1
 80278f0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80278f4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80278f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80278fc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027900:	ea42 0e0e 	orr.w	lr, r2, lr
 8027904:	fa1f f28e 	uxth.w	r2, lr
 8027908:	2bff      	cmp	r3, #255	; 0xff
 802790a:	d103      	bne.n	8027914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 802790c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802790e:	29ff      	cmp	r1, #255	; 0xff
 8027910:	f000 80de 	beq.w	8027ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8027914:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027916:	8838      	ldrh	r0, [r7, #0]
 8027918:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802791a:	434b      	muls	r3, r1
 802791c:	f103 0c01 	add.w	ip, r3, #1
 8027920:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8027924:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027928:	fa5f fc83 	uxtb.w	ip, r3
 802792c:	1203      	asrs	r3, r0, #8
 802792e:	1215      	asrs	r5, r2, #8
 8027930:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027934:	fb13 f30c 	smulbb	r3, r3, ip
 8027938:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802793c:	fb05 3501 	mla	r5, r5, r1, r3
 8027940:	10c3      	asrs	r3, r0, #3
 8027942:	10d1      	asrs	r1, r2, #3
 8027944:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027948:	fb13 f30c 	smulbb	r3, r3, ip
 802794c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027950:	fb01 3104 	mla	r1, r1, r4, r3
 8027954:	00c3      	lsls	r3, r0, #3
 8027956:	00d2      	lsls	r2, r2, #3
 8027958:	b2db      	uxtb	r3, r3
 802795a:	b2d2      	uxtb	r2, r2
 802795c:	fb13 f30c 	smulbb	r3, r3, ip
 8027960:	b2ad      	uxth	r5, r5
 8027962:	fb02 3304 	mla	r3, r2, r4, r3
 8027966:	b29a      	uxth	r2, r3
 8027968:	1c6b      	adds	r3, r5, #1
 802796a:	b289      	uxth	r1, r1
 802796c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027970:	1c53      	adds	r3, r2, #1
 8027972:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027976:	1c4a      	adds	r2, r1, #1
 8027978:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802797c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027980:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027984:	0949      	lsrs	r1, r1, #5
 8027986:	432b      	orrs	r3, r5
 8027988:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802798c:	430b      	orrs	r3, r1
 802798e:	803b      	strh	r3, [r7, #0]
 8027990:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027992:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027994:	4413      	add	r3, r2
 8027996:	9329      	str	r3, [sp, #164]	; 0xa4
 8027998:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802799a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802799c:	441a      	add	r2, r3
 802799e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80279a0:	922a      	str	r2, [sp, #168]	; 0xa8
 80279a2:	3b01      	subs	r3, #1
 80279a4:	3702      	adds	r7, #2
 80279a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80279a8:	e689      	b.n	80276be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80279aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80279ac:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 80279ae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80279b0:	4433      	add	r3, r6
 80279b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80279b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80279b6:	441c      	add	r4, r3
 80279b8:	9b08      	ldr	r3, [sp, #32]
 80279ba:	942a      	str	r4, [sp, #168]	; 0xa8
 80279bc:	3b01      	subs	r3, #1
 80279be:	9308      	str	r3, [sp, #32]
 80279c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80279c2:	3302      	adds	r3, #2
 80279c4:	9309      	str	r3, [sp, #36]	; 0x24
 80279c6:	e658      	b.n	802767a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80279c8:	d028      	beq.n	8027a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80279ca:	9b08      	ldr	r3, [sp, #32]
 80279cc:	982b      	ldr	r0, [sp, #172]	; 0xac
 80279ce:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80279d0:	3b01      	subs	r3, #1
 80279d2:	fb00 5003 	mla	r0, r0, r3, r5
 80279d6:	1400      	asrs	r0, r0, #16
 80279d8:	f53f ae6c 	bmi.w	80276b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80279dc:	3901      	subs	r1, #1
 80279de:	4288      	cmp	r0, r1
 80279e0:	f6bf ae68 	bge.w	80276b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80279e4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80279e6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80279e8:	fb01 0303 	mla	r3, r1, r3, r0
 80279ec:	141b      	asrs	r3, r3, #16
 80279ee:	f53f ae61 	bmi.w	80276b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80279f2:	3a01      	subs	r2, #1
 80279f4:	4293      	cmp	r3, r2
 80279f6:	f6bf ae5d 	bge.w	80276b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80279fa:	9b08      	ldr	r3, [sp, #32]
 80279fc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027a00:	9313      	str	r3, [sp, #76]	; 0x4c
 8027a02:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027a06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027a08:	2b00      	cmp	r3, #0
 8027a0a:	f300 8082 	bgt.w	8027b12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8027a0e:	9b08      	ldr	r3, [sp, #32]
 8027a10:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a16:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8027a1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027a1e:	2b00      	cmp	r3, #0
 8027a20:	f340 81ef 	ble.w	8027e02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x802>
 8027a24:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027a2c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027a30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a32:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027a36:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027a3a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027a3e:	eef0 6a48 	vmov.f32	s13, s16
 8027a42:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027a46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027a4a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027a4e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8027a52:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027a56:	eef0 6a68 	vmov.f32	s13, s17
 8027a5a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027a5e:	ee18 2a10 	vmov	r2, s16
 8027a62:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027a66:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a6a:	ee18 2a90 	vmov	r2, s17
 8027a6e:	932b      	str	r3, [sp, #172]	; 0xac
 8027a70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a76:	932c      	str	r3, [sp, #176]	; 0xb0
 8027a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027a7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027a7c:	3b01      	subs	r3, #1
 8027a7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027a82:	9311      	str	r3, [sp, #68]	; 0x44
 8027a84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a86:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8027a8a:	bf08      	it	eq
 8027a8c:	4613      	moveq	r3, r2
 8027a8e:	9308      	str	r3, [sp, #32]
 8027a90:	eef0 8a67 	vmov.f32	s17, s15
 8027a94:	eeb0 8a47 	vmov.f32	s16, s14
 8027a98:	e5e1      	b.n	802765e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027a9a:	fb08 f505 	mul.w	r5, r8, r5
 8027a9e:	fb09 5303 	mla	r3, r9, r3, r5
 8027aa2:	e661      	b.n	8027768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8027aa4:	4681      	mov	r9, r0
 8027aa6:	e688      	b.n	80277ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027aa8:	f1c1 0210 	rsb	r2, r1, #16
 8027aac:	4341      	muls	r1, r0
 8027aae:	fb09 1902 	mla	r9, r9, r2, r1
 8027ab2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027ab6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027aba:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027abe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027ac2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027ac6:	ea42 0909 	orr.w	r9, r2, r9
 8027aca:	fa1f f289 	uxth.w	r2, r9
 8027ace:	e71b      	b.n	8027908 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027ad0:	803a      	strh	r2, [r7, #0]
 8027ad2:	e75d      	b.n	8027990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027ad4:	f115 0e01 	adds.w	lr, r5, #1
 8027ad8:	f53f af5a 	bmi.w	8027990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027adc:	4572      	cmp	r2, lr
 8027ade:	f6ff af57 	blt.w	8027990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027ae2:	f110 0e01 	adds.w	lr, r0, #1
 8027ae6:	f53f af53 	bmi.w	8027990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027aea:	4573      	cmp	r3, lr
 8027aec:	f6ff af50 	blt.w	8027990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027af0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027af2:	9502      	str	r5, [sp, #8]
 8027af4:	b21b      	sxth	r3, r3
 8027af6:	b212      	sxth	r2, r2
 8027af8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027afc:	9301      	str	r3, [sp, #4]
 8027afe:	9200      	str	r2, [sp, #0]
 8027b00:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027b04:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8027b08:	4639      	mov	r1, r7
 8027b0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027b0c:	f7ff fbd2 	bl	80272b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027b10:	e73e      	b.n	8027990 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027b12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027b14:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027b18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027b1a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027b1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027b20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027b26:	141f      	asrs	r7, r3, #16
 8027b28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027b2a:	141b      	asrs	r3, r3, #16
 8027b2c:	fb01 3707 	mla	r7, r1, r7, r3
 8027b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027b32:	fa1f fc82 	uxth.w	ip, r2
 8027b36:	eb03 0a07 	add.w	sl, r3, r7
 8027b3a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027b3e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027b42:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027b46:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027b4a:	b29b      	uxth	r3, r3
 8027b4c:	2d00      	cmp	r5, #0
 8027b4e:	f000 813d 	beq.w	8027dcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027b52:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027b56:	940f      	str	r4, [sp, #60]	; 0x3c
 8027b58:	eb0a 0b01 	add.w	fp, sl, r1
 8027b5c:	fa1f fa85 	uxth.w	sl, r5
 8027b60:	fb0a fc0c 	mul.w	ip, sl, ip
 8027b64:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027b68:	fa1f fa8a 	uxth.w	sl, sl
 8027b6c:	eba0 000c 	sub.w	r0, r0, ip
 8027b70:	eba3 030a 	sub.w	r3, r3, sl
 8027b74:	b280      	uxth	r0, r0
 8027b76:	fb08 f000 	mul.w	r0, r8, r0
 8027b7a:	b29b      	uxth	r3, r3
 8027b7c:	fb09 0303 	mla	r3, r9, r3, r0
 8027b80:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027b82:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027b86:	9410      	str	r4, [sp, #64]	; 0x40
 8027b88:	fb0a 3300 	mla	r3, sl, r0, r3
 8027b8c:	fb0c 3304 	mla	r3, ip, r4, r3
 8027b90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	f000 810b 	beq.w	8027db0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8027b9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027b9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027b9e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027ba2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027ba6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027baa:	f000 8114 	beq.w	8027dd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8027bae:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027bb2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027bb6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027bba:	fb09 f707 	mul.w	r7, r9, r7
 8027bbe:	fb0a fc0c 	mul.w	ip, sl, ip
 8027bc2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027bc6:	f107 0b20 	add.w	fp, r7, #32
 8027bca:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027bce:	44cc      	add	ip, r9
 8027bd0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027bd4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027bd8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027bdc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027be0:	ea4c 0909 	orr.w	r9, ip, r9
 8027be4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027be8:	8847      	ldrh	r7, [r0, #2]
 8027bea:	d019      	beq.n	8027c20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x620>
 8027bec:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027bf0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027bf4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027bf8:	fb08 f807 	mul.w	r8, r8, r7
 8027bfc:	fb0a fc0c 	mul.w	ip, sl, ip
 8027c00:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027c04:	f108 0b20 	add.w	fp, r8, #32
 8027c08:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027c0c:	44bc      	add	ip, r7
 8027c0e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027c12:	0a3f      	lsrs	r7, r7, #8
 8027c14:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027c18:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027c1c:	ea4c 0707 	orr.w	r7, ip, r7
 8027c20:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027c24:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027c28:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027c2c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027c30:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027c34:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027c38:	ea4c 0909 	orr.w	r9, ip, r9
 8027c3c:	ea4a 0707 	orr.w	r7, sl, r7
 8027c40:	2d00      	cmp	r5, #0
 8027c42:	f000 80ca 	beq.w	8027dda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8027c46:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027c4a:	3901      	subs	r1, #1
 8027c4c:	0049      	lsls	r1, r1, #1
 8027c4e:	3102      	adds	r1, #2
 8027c50:	eb00 0c01 	add.w	ip, r0, r1
 8027c54:	5a41      	ldrh	r1, [r0, r1]
 8027c56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027c58:	28ff      	cmp	r0, #255	; 0xff
 8027c5a:	d019      	beq.n	8027c90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x690>
 8027c5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027c5e:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027c62:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027c66:	fb04 fa01 	mul.w	sl, r4, r1
 8027c6a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027c6e:	fb08 f800 	mul.w	r8, r8, r0
 8027c72:	f10a 0020 	add.w	r0, sl, #32
 8027c76:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027c7a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027c7e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027c82:	4441      	add	r1, r8
 8027c84:	0a00      	lsrs	r0, r0, #8
 8027c86:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027c8a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027c8e:	4301      	orrs	r1, r0
 8027c90:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027c92:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027c96:	2cff      	cmp	r4, #255	; 0xff
 8027c98:	d01a      	beq.n	8027cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8027c9a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027c9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027ca2:	fb04 fa00 	mul.w	sl, r4, r0
 8027ca6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027caa:	fb08 f80c 	mul.w	r8, r8, ip
 8027cae:	f10a 0c20 	add.w	ip, sl, #32
 8027cb2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027cb6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027cba:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027cbe:	4440      	add	r0, r8
 8027cc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027cc4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027cc8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027ccc:	ea40 000c 	orr.w	r0, r0, ip
 8027cd0:	fb15 fc02 	smulbb	ip, r5, r2
 8027cd4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027cd8:	f1c5 0810 	rsb	r8, r5, #16
 8027cdc:	eba8 0802 	sub.w	r8, r8, r2
 8027ce0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027ce4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027ce8:	437a      	muls	r2, r7
 8027cea:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027cee:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027cf2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027cf6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027cfa:	fb09 2208 	mla	r2, r9, r8, r2
 8027cfe:	ea4a 0101 	orr.w	r1, sl, r1
 8027d02:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027d06:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027d0a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027d0e:	fb05 2201 	mla	r2, r5, r1, r2
 8027d12:	ea4b 0000 	orr.w	r0, fp, r0
 8027d16:	fb0c 2200 	mla	r2, ip, r0, r2
 8027d1a:	0d57      	lsrs	r7, r2, #21
 8027d1c:	0952      	lsrs	r2, r2, #5
 8027d1e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027d22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027d26:	433a      	orrs	r2, r7
 8027d28:	2bff      	cmp	r3, #255	; 0xff
 8027d2a:	b292      	uxth	r2, r2
 8027d2c:	d102      	bne.n	8027d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 8027d2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027d30:	29ff      	cmp	r1, #255	; 0xff
 8027d32:	d063      	beq.n	8027dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fc>
 8027d34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027d36:	f8be 1000 	ldrh.w	r1, [lr]
 8027d3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027d3c:	4343      	muls	r3, r0
 8027d3e:	1c58      	adds	r0, r3, #1
 8027d40:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027d44:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027d48:	1208      	asrs	r0, r1, #8
 8027d4a:	b2db      	uxtb	r3, r3
 8027d4c:	1215      	asrs	r5, r2, #8
 8027d4e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027d52:	fb10 f003 	smulbb	r0, r0, r3
 8027d56:	10cf      	asrs	r7, r1, #3
 8027d58:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027d5c:	00c9      	lsls	r1, r1, #3
 8027d5e:	fb05 0504 	mla	r5, r5, r4, r0
 8027d62:	b2c9      	uxtb	r1, r1
 8027d64:	10d0      	asrs	r0, r2, #3
 8027d66:	00d2      	lsls	r2, r2, #3
 8027d68:	fb11 f103 	smulbb	r1, r1, r3
 8027d6c:	b2d2      	uxtb	r2, r2
 8027d6e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027d72:	fb02 1204 	mla	r2, r2, r4, r1
 8027d76:	fb17 f703 	smulbb	r7, r7, r3
 8027d7a:	b2ad      	uxth	r5, r5
 8027d7c:	b292      	uxth	r2, r2
 8027d7e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027d82:	fb00 7004 	mla	r0, r0, r4, r7
 8027d86:	1c6b      	adds	r3, r5, #1
 8027d88:	1c57      	adds	r7, r2, #1
 8027d8a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027d8e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027d92:	b280      	uxth	r0, r0
 8027d94:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027d98:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027d9c:	433d      	orrs	r5, r7
 8027d9e:	1c47      	adds	r7, r0, #1
 8027da0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027da4:	097f      	lsrs	r7, r7, #5
 8027da6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027daa:	433d      	orrs	r5, r7
 8027dac:	f8ae 5000 	strh.w	r5, [lr]
 8027db0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027db2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027db4:	4413      	add	r3, r2
 8027db6:	9329      	str	r3, [sp, #164]	; 0xa4
 8027db8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8027dba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027dbc:	441a      	add	r2, r3
 8027dbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027dc0:	922a      	str	r2, [sp, #168]	; 0xa8
 8027dc2:	3b01      	subs	r3, #1
 8027dc4:	f10e 0e02 	add.w	lr, lr, #2
 8027dc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8027dca:	e61c      	b.n	8027a06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x406>
 8027dcc:	fb08 f000 	mul.w	r0, r8, r0
 8027dd0:	fb09 0303 	mla	r3, r9, r3, r0
 8027dd4:	e6dc      	b.n	8027b90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x590>
 8027dd6:	46b9      	mov	r9, r7
 8027dd8:	e704      	b.n	8027be4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e4>
 8027dda:	f1c2 0110 	rsb	r1, r2, #16
 8027dde:	437a      	muls	r2, r7
 8027de0:	fb09 2901 	mla	r9, r9, r1, r2
 8027de4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027de8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027dec:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027df0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027df4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027df8:	4302      	orrs	r2, r0
 8027dfa:	e795      	b.n	8027d28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8027dfc:	f8ae 2000 	strh.w	r2, [lr]
 8027e00:	e7d6      	b.n	8027db0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>
 8027e02:	b017      	add	sp, #92	; 0x5c
 8027e04:	ecbd 8b08 	vpop	{d8-d11}
 8027e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8027e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e10:	b085      	sub	sp, #20
 8027e12:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8027e16:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027e1a:	9103      	str	r1, [sp, #12]
 8027e1c:	fb05 7106 	mla	r1, r5, r6, r7
 8027e20:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8027e24:	2d00      	cmp	r5, #0
 8027e26:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027e2a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027e2e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8027e32:	9401      	str	r4, [sp, #4]
 8027e34:	eb02 0901 	add.w	r9, r2, r1
 8027e38:	f2c0 80c0 	blt.w	8027fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8027e3c:	45a8      	cmp	r8, r5
 8027e3e:	f340 80bd 	ble.w	8027fbc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8027e42:	2f00      	cmp	r7, #0
 8027e44:	f2c0 80b6 	blt.w	8027fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8027e48:	42be      	cmp	r6, r7
 8027e4a:	f340 80b3 	ble.w	8027fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8027e4e:	f812 c001 	ldrb.w	ip, [r2, r1]
 8027e52:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8027e56:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027e5a:	d019      	beq.n	8027e90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8027e5c:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8027e60:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027e64:	435a      	muls	r2, r3
 8027e66:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8027e6a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8027e6e:	fb0c f403 	mul.w	r4, ip, r3
 8027e72:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8027e76:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027e7a:	441a      	add	r2, r3
 8027e7c:	f104 0320 	add.w	r3, r4, #32
 8027e80:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8027e84:	0a1b      	lsrs	r3, r3, #8
 8027e86:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8027e8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027e8e:	4319      	orrs	r1, r3
 8027e90:	b289      	uxth	r1, r1
 8027e92:	1c7b      	adds	r3, r7, #1
 8027e94:	f100 8097 	bmi.w	8027fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8027e98:	429e      	cmp	r6, r3
 8027e9a:	f340 8094 	ble.w	8027fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8027e9e:	2800      	cmp	r0, #0
 8027ea0:	f000 8094 	beq.w	8027fcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8027ea4:	f899 4001 	ldrb.w	r4, [r9, #1]
 8027ea8:	9b01      	ldr	r3, [sp, #4]
 8027eaa:	2cff      	cmp	r4, #255	; 0xff
 8027eac:	885b      	ldrh	r3, [r3, #2]
 8027eae:	d01b      	beq.n	8027ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8027eb0:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8027eb4:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8027eb8:	fb0a f202 	mul.w	r2, sl, r2
 8027ebc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027ec0:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027ec4:	fb04 fa03 	mul.w	sl, r4, r3
 8027ec8:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8027ecc:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027ed0:	441a      	add	r2, r3
 8027ed2:	f10a 0320 	add.w	r3, sl, #32
 8027ed6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8027eda:	0a1b      	lsrs	r3, r3, #8
 8027edc:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8027ee0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027ee4:	ea4b 0303 	orr.w	r3, fp, r3
 8027ee8:	b29b      	uxth	r3, r3
 8027eea:	3501      	adds	r5, #1
 8027eec:	d474      	bmi.n	8027fd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8027eee:	45a8      	cmp	r8, r5
 8027ef0:	dd72      	ble.n	8027fd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8027ef2:	f1be 0f00 	cmp.w	lr, #0
 8027ef6:	f000 8110 	beq.w	802811a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8027efa:	2f00      	cmp	r7, #0
 8027efc:	db69      	blt.n	8027fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8027efe:	42be      	cmp	r6, r7
 8027f00:	dd67      	ble.n	8027fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8027f02:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027f06:	9a01      	ldr	r2, [sp, #4]
 8027f08:	2dff      	cmp	r5, #255	; 0xff
 8027f0a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8027f0e:	d01c      	beq.n	8027f4a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8027f10:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8027f14:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8027f18:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027f1c:	fb05 fa0b 	mul.w	sl, r5, fp
 8027f20:	fb08 f802 	mul.w	r8, r8, r2
 8027f24:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027f28:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8027f2c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027f30:	4490      	add	r8, r2
 8027f32:	f10a 0220 	add.w	r2, sl, #32
 8027f36:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8027f3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027f3e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8027f42:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8027f46:	ea4b 0b0a 	orr.w	fp, fp, sl
 8027f4a:	fa1f fb8b 	uxth.w	fp, fp
 8027f4e:	3701      	adds	r7, #1
 8027f50:	d447      	bmi.n	8027fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8027f52:	42be      	cmp	r6, r7
 8027f54:	dd45      	ble.n	8027fe2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8027f56:	2800      	cmp	r0, #0
 8027f58:	d046      	beq.n	8027fe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8027f5a:	3601      	adds	r6, #1
 8027f5c:	9a01      	ldr	r2, [sp, #4]
 8027f5e:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027f62:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8027f66:	2fff      	cmp	r7, #255	; 0xff
 8027f68:	d01a      	beq.n	8027fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8027f6a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8027f6e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8027f72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027f76:	fb07 f902 	mul.w	r9, r7, r2
 8027f7a:	fb08 f806 	mul.w	r8, r8, r6
 8027f7e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8027f82:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8027f86:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027f8a:	44b0      	add	r8, r6
 8027f8c:	f109 0620 	add.w	r6, r9, #32
 8027f90:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8027f94:	0a36      	lsrs	r6, r6, #8
 8027f96:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8027f9a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8027f9e:	4332      	orrs	r2, r6
 8027fa0:	b292      	uxth	r2, r2
 8027fa2:	280f      	cmp	r0, #15
 8027fa4:	d922      	bls.n	8027fec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8027fa6:	4b61      	ldr	r3, [pc, #388]	; (802812c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8027fa8:	4a61      	ldr	r2, [pc, #388]	; (8028130 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8027faa:	4862      	ldr	r0, [pc, #392]	; (8028134 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8027fac:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8027fb0:	f005 ff4e 	bl	802de50 <__assert_func>
 8027fb4:	f04f 0c00 	mov.w	ip, #0
 8027fb8:	4661      	mov	r1, ip
 8027fba:	e76a      	b.n	8027e92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8027fbc:	2400      	movs	r4, #0
 8027fbe:	46a4      	mov	ip, r4
 8027fc0:	4623      	mov	r3, r4
 8027fc2:	4621      	mov	r1, r4
 8027fc4:	e791      	b.n	8027eea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8027fc6:	2400      	movs	r4, #0
 8027fc8:	4623      	mov	r3, r4
 8027fca:	e78e      	b.n	8027eea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8027fcc:	4604      	mov	r4, r0
 8027fce:	4603      	mov	r3, r0
 8027fd0:	e78b      	b.n	8027eea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8027fd2:	2500      	movs	r5, #0
 8027fd4:	46ab      	mov	fp, r5
 8027fd6:	e7ba      	b.n	8027f4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8027fd8:	2700      	movs	r7, #0
 8027fda:	463d      	mov	r5, r7
 8027fdc:	463a      	mov	r2, r7
 8027fde:	46bb      	mov	fp, r7
 8027fe0:	e7df      	b.n	8027fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8027fe2:	2700      	movs	r7, #0
 8027fe4:	463a      	mov	r2, r7
 8027fe6:	e7dc      	b.n	8027fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8027fe8:	4607      	mov	r7, r0
 8027fea:	4602      	mov	r2, r0
 8027fec:	f1be 0f0f 	cmp.w	lr, #15
 8027ff0:	d8d9      	bhi.n	8027fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8027ff2:	b286      	uxth	r6, r0
 8027ff4:	fa1f f98e 	uxth.w	r9, lr
 8027ff8:	fb06 f809 	mul.w	r8, r6, r9
 8027ffc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028000:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8028004:	0136      	lsls	r6, r6, #4
 8028006:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802800a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802800e:	9601      	str	r6, [sp, #4]
 8028010:	ea4a 0101 	orr.w	r1, sl, r1
 8028014:	fa1f f689 	uxth.w	r6, r9
 8028018:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 802801c:	fb10 f90e 	smulbb	r9, r0, lr
 8028020:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8028024:	9602      	str	r6, [sp, #8]
 8028026:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802802a:	460e      	mov	r6, r1
 802802c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028030:	f1ce 0110 	rsb	r1, lr, #16
 8028034:	1a09      	subs	r1, r1, r0
 8028036:	ea4a 0303 	orr.w	r3, sl, r3
 802803a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802803e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028042:	4343      	muls	r3, r0
 8028044:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8028048:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802804c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028050:	fb01 3106 	mla	r1, r1, r6, r3
 8028054:	ea4a 0202 	orr.w	r2, sl, r2
 8028058:	fb09 1302 	mla	r3, r9, r2, r1
 802805c:	9a03      	ldr	r2, [sp, #12]
 802805e:	9802      	ldr	r0, [sp, #8]
 8028060:	8811      	ldrh	r1, [r2, #0]
 8028062:	9a01      	ldr	r2, [sp, #4]
 8028064:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028068:	1a12      	subs	r2, r2, r0
 802806a:	9801      	ldr	r0, [sp, #4]
 802806c:	eba0 0608 	sub.w	r6, r0, r8
 8028070:	b2b6      	uxth	r6, r6
 8028072:	b292      	uxth	r2, r2
 8028074:	4374      	muls	r4, r6
 8028076:	fb0c 4402 	mla	r4, ip, r2, r4
 802807a:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802807e:	9a02      	ldr	r2, [sp, #8]
 8028080:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028084:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8028088:	fb02 4505 	mla	r5, r2, r5, r4
 802808c:	ea4a 0b0b 	orr.w	fp, sl, fp
 8028090:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8028094:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8028098:	fb08 5707 	mla	r7, r8, r7, r5
 802809c:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80280a0:	120a      	asrs	r2, r1, #8
 80280a2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80280a6:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80280aa:	b2ff      	uxtb	r7, r7
 80280ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80280b0:	10c8      	asrs	r0, r1, #3
 80280b2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80280b6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80280ba:	00c9      	lsls	r1, r1, #3
 80280bc:	437a      	muls	r2, r7
 80280be:	ea43 0e0e 	orr.w	lr, r3, lr
 80280c2:	b2c9      	uxtb	r1, r1
 80280c4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80280c8:	fa1f f38e 	uxth.w	r3, lr
 80280cc:	4378      	muls	r0, r7
 80280ce:	434f      	muls	r7, r1
 80280d0:	1c51      	adds	r1, r2, #1
 80280d2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80280d6:	121a      	asrs	r2, r3, #8
 80280d8:	f022 0207 	bic.w	r2, r2, #7
 80280dc:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80280e0:	1c41      	adds	r1, r0, #1
 80280e2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80280e6:	10d9      	asrs	r1, r3, #3
 80280e8:	f021 0103 	bic.w	r1, r1, #3
 80280ec:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80280f0:	0212      	lsls	r2, r2, #8
 80280f2:	00c9      	lsls	r1, r1, #3
 80280f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80280f8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80280fc:	430a      	orrs	r2, r1
 80280fe:	1c79      	adds	r1, r7, #1
 8028100:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8028104:	00db      	lsls	r3, r3, #3
 8028106:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802810a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802810e:	4313      	orrs	r3, r2
 8028110:	9a03      	ldr	r2, [sp, #12]
 8028112:	8013      	strh	r3, [r2, #0]
 8028114:	b005      	add	sp, #20
 8028116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802811a:	280f      	cmp	r0, #15
 802811c:	f63f af43 	bhi.w	8027fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8028120:	4677      	mov	r7, lr
 8028122:	4675      	mov	r5, lr
 8028124:	4672      	mov	r2, lr
 8028126:	46f3      	mov	fp, lr
 8028128:	e763      	b.n	8027ff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 802812a:	bf00      	nop
 802812c:	08032b71 	.word	0x08032b71
 8028130:	0803313e 	.word	0x0803313e
 8028134:	08032bf5 	.word	0x08032bf5

08028138 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802813c:	ed2d 8b08 	vpush	{d8-d11}
 8028140:	b093      	sub	sp, #76	; 0x4c
 8028142:	eeb0 aa40 	vmov.f32	s20, s0
 8028146:	9210      	str	r2, [sp, #64]	; 0x40
 8028148:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802814a:	910e      	str	r1, [sp, #56]	; 0x38
 802814c:	9306      	str	r3, [sp, #24]
 802814e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8028152:	9011      	str	r0, [sp, #68]	; 0x44
 8028154:	6850      	ldr	r0, [r2, #4]
 8028156:	6812      	ldr	r2, [r2, #0]
 8028158:	fb00 1303 	mla	r3, r0, r3, r1
 802815c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028160:	9307      	str	r3, [sp, #28]
 8028162:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028164:	681b      	ldr	r3, [r3, #0]
 8028166:	9308      	str	r3, [sp, #32]
 8028168:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802816a:	685b      	ldr	r3, [r3, #4]
 802816c:	9309      	str	r3, [sp, #36]	; 0x24
 802816e:	eef0 9a60 	vmov.f32	s19, s1
 8028172:	eeb0 9a41 	vmov.f32	s18, s2
 8028176:	eeb0 8a62 	vmov.f32	s16, s5
 802817a:	eef0 8a43 	vmov.f32	s17, s6
 802817e:	eef0 ba44 	vmov.f32	s23, s8
 8028182:	eeb0 ba64 	vmov.f32	s22, s9
 8028186:	eef0 aa45 	vmov.f32	s21, s10
 802818a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802818c:	2b00      	cmp	r3, #0
 802818e:	dc03      	bgt.n	8028198 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8028190:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028192:	2b00      	cmp	r3, #0
 8028194:	f340 83b4 	ble.w	8028900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 8028198:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802819a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802819e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80281a2:	1e48      	subs	r0, r1, #1
 80281a4:	1e55      	subs	r5, r2, #1
 80281a6:	9b06      	ldr	r3, [sp, #24]
 80281a8:	2b00      	cmp	r3, #0
 80281aa:	f340 8163 	ble.w	8028474 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80281ae:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80281b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80281b2:	1436      	asrs	r6, r6, #16
 80281b4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80281b8:	d406      	bmi.n	80281c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281ba:	4286      	cmp	r6, r0
 80281bc:	da04      	bge.n	80281c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281be:	2b00      	cmp	r3, #0
 80281c0:	db02      	blt.n	80281c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281c2:	42ab      	cmp	r3, r5
 80281c4:	f2c0 8157 	blt.w	8028476 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80281c8:	3601      	adds	r6, #1
 80281ca:	f100 8144 	bmi.w	8028456 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80281ce:	42b1      	cmp	r1, r6
 80281d0:	f2c0 8141 	blt.w	8028456 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80281d4:	3301      	adds	r3, #1
 80281d6:	f100 813e 	bmi.w	8028456 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80281da:	429a      	cmp	r2, r3
 80281dc:	f2c0 813b 	blt.w	8028456 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80281e0:	9b06      	ldr	r3, [sp, #24]
 80281e2:	9f07      	ldr	r7, [sp, #28]
 80281e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80281e6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80281ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80281ec:	2b00      	cmp	r3, #0
 80281ee:	f340 8164 	ble.w	80284ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80281f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80281f4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80281f6:	1418      	asrs	r0, r3, #16
 80281f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80281fa:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80281fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028200:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8028204:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028206:	142d      	asrs	r5, r5, #16
 8028208:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802820c:	f100 81ee 	bmi.w	80285ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028210:	f102 3eff 	add.w	lr, r2, #4294967295
 8028214:	4575      	cmp	r5, lr
 8028216:	f280 81e9 	bge.w	80285ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802821a:	2800      	cmp	r0, #0
 802821c:	f2c0 81e6 	blt.w	80285ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028220:	f103 3eff 	add.w	lr, r3, #4294967295
 8028224:	4570      	cmp	r0, lr
 8028226:	f280 81e1 	bge.w	80285ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802822a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802822c:	b212      	sxth	r2, r2
 802822e:	fb00 5002 	mla	r0, r0, r2, r5
 8028232:	fa1f fe81 	uxth.w	lr, r1
 8028236:	eb03 0a00 	add.w	sl, r3, r0
 802823a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802823e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8028242:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028246:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802824a:	b29b      	uxth	r3, r3
 802824c:	f1bc 0f00 	cmp.w	ip, #0
 8028250:	f000 8179 	beq.w	8028546 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8028254:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028258:	940a      	str	r4, [sp, #40]	; 0x28
 802825a:	eb0a 0b02 	add.w	fp, sl, r2
 802825e:	fa1f fa8c 	uxth.w	sl, ip
 8028262:	fb0a fe0e 	mul.w	lr, sl, lr
 8028266:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802826a:	fa1f fa8a 	uxth.w	sl, sl
 802826e:	eba5 050e 	sub.w	r5, r5, lr
 8028272:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028276:	940b      	str	r4, [sp, #44]	; 0x2c
 8028278:	eba3 030a 	sub.w	r3, r3, sl
 802827c:	b2ad      	uxth	r5, r5
 802827e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028280:	b29b      	uxth	r3, r3
 8028282:	fb08 f505 	mul.w	r5, r8, r5
 8028286:	fb09 5303 	mla	r3, r9, r3, r5
 802828a:	fb0a 3304 	mla	r3, sl, r4, r3
 802828e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028290:	fb0e 3304 	mla	r3, lr, r4, r3
 8028294:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028298:	2b00      	cmp	r3, #0
 802829a:	f000 80cf 	beq.w	802843c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 802829e:	9c08      	ldr	r4, [sp, #32]
 80282a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80282a4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80282a8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80282ac:	f000 8150 	beq.w	8028550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80282b0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80282b4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80282b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80282bc:	fb09 f000 	mul.w	r0, r9, r0
 80282c0:	fb0a fe0e 	mul.w	lr, sl, lr
 80282c4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80282c8:	f100 0b20 	add.w	fp, r0, #32
 80282cc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80282d0:	44ce      	add	lr, r9
 80282d2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80282d6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80282da:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80282de:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80282e2:	ea4e 0909 	orr.w	r9, lr, r9
 80282e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80282ea:	8868      	ldrh	r0, [r5, #2]
 80282ec:	d019      	beq.n	8028322 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80282ee:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80282f2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80282f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80282fa:	fb08 f800 	mul.w	r8, r8, r0
 80282fe:	fb0a fe0e 	mul.w	lr, sl, lr
 8028302:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8028306:	f108 0b20 	add.w	fp, r8, #32
 802830a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802830e:	4486      	add	lr, r0
 8028310:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8028314:	0a00      	lsrs	r0, r0, #8
 8028316:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802831a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802831e:	ea4e 0000 	orr.w	r0, lr, r0
 8028322:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8028326:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802832a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802832e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028332:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028336:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802833a:	ea4e 0909 	orr.w	r9, lr, r9
 802833e:	ea4a 0000 	orr.w	r0, sl, r0
 8028342:	f1bc 0f00 	cmp.w	ip, #0
 8028346:	f000 8105 	beq.w	8028554 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802834a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802834e:	3a01      	subs	r2, #1
 8028350:	0052      	lsls	r2, r2, #1
 8028352:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028354:	3202      	adds	r2, #2
 8028356:	2cff      	cmp	r4, #255	; 0xff
 8028358:	eb05 0e02 	add.w	lr, r5, r2
 802835c:	5aaa      	ldrh	r2, [r5, r2]
 802835e:	d018      	beq.n	8028392 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028360:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8028364:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028368:	fb04 fa02 	mul.w	sl, r4, r2
 802836c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028370:	fb08 f805 	mul.w	r8, r8, r5
 8028374:	f10a 0520 	add.w	r5, sl, #32
 8028378:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802837c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8028380:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028384:	4442      	add	r2, r8
 8028386:	0a2d      	lsrs	r5, r5, #8
 8028388:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802838c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028390:	432a      	orrs	r2, r5
 8028392:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028394:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028398:	2cff      	cmp	r4, #255	; 0xff
 802839a:	d01a      	beq.n	80283d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 802839c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80283a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80283a4:	fb04 fa05 	mul.w	sl, r4, r5
 80283a8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80283ac:	fb08 f80e 	mul.w	r8, r8, lr
 80283b0:	f10a 0e20 	add.w	lr, sl, #32
 80283b4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80283b8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80283bc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80283c0:	4445      	add	r5, r8
 80283c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80283c6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80283ca:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80283ce:	ea45 050e 	orr.w	r5, r5, lr
 80283d2:	fb1c fe01 	smulbb	lr, ip, r1
 80283d6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80283da:	f1cc 0810 	rsb	r8, ip, #16
 80283de:	eba8 0801 	sub.w	r8, r8, r1
 80283e2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80283e6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80283ea:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80283ee:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80283f2:	4341      	muls	r1, r0
 80283f4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80283f8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80283fc:	ea4a 0202 	orr.w	r2, sl, r2
 8028400:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8028404:	fb09 1108 	mla	r1, r9, r8, r1
 8028408:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802840c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8028410:	fb0c 1102 	mla	r1, ip, r2, r1
 8028414:	ea4b 0505 	orr.w	r5, fp, r5
 8028418:	fb0e 1e05 	mla	lr, lr, r5, r1
 802841c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8028420:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028424:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028428:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802842c:	ea42 0e0e 	orr.w	lr, r2, lr
 8028430:	fa1f f28e 	uxth.w	r2, lr
 8028434:	2bff      	cmp	r3, #255	; 0xff
 8028436:	f040 80a1 	bne.w	802857c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x444>
 802843a:	803a      	strh	r2, [r7, #0]
 802843c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802843e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8028440:	4413      	add	r3, r2
 8028442:	9325      	str	r3, [sp, #148]	; 0x94
 8028444:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8028446:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028448:	441a      	add	r2, r3
 802844a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802844c:	9226      	str	r2, [sp, #152]	; 0x98
 802844e:	3b01      	subs	r3, #1
 8028450:	3702      	adds	r7, #2
 8028452:	930f      	str	r3, [sp, #60]	; 0x3c
 8028454:	e6c9      	b.n	80281ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028456:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028458:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802845a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 802845c:	4433      	add	r3, r6
 802845e:	9325      	str	r3, [sp, #148]	; 0x94
 8028460:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028462:	441c      	add	r4, r3
 8028464:	9b06      	ldr	r3, [sp, #24]
 8028466:	9426      	str	r4, [sp, #152]	; 0x98
 8028468:	3b01      	subs	r3, #1
 802846a:	9306      	str	r3, [sp, #24]
 802846c:	9b07      	ldr	r3, [sp, #28]
 802846e:	3302      	adds	r3, #2
 8028470:	9307      	str	r3, [sp, #28]
 8028472:	e698      	b.n	80281a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028474:	d028      	beq.n	80284c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8028476:	9b06      	ldr	r3, [sp, #24]
 8028478:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802847a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802847c:	3b01      	subs	r3, #1
 802847e:	fb00 5003 	mla	r0, r0, r3, r5
 8028482:	1400      	asrs	r0, r0, #16
 8028484:	f53f aeac 	bmi.w	80281e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028488:	3901      	subs	r1, #1
 802848a:	4288      	cmp	r0, r1
 802848c:	f6bf aea8 	bge.w	80281e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028490:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028492:	9826      	ldr	r0, [sp, #152]	; 0x98
 8028494:	fb01 0303 	mla	r3, r1, r3, r0
 8028498:	141b      	asrs	r3, r3, #16
 802849a:	f53f aea1 	bmi.w	80281e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802849e:	3a01      	subs	r2, #1
 80284a0:	4293      	cmp	r3, r2
 80284a2:	f6bf ae9d 	bge.w	80281e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80284a6:	9b06      	ldr	r3, [sp, #24]
 80284a8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80284ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80284ae:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80284b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80284b4:	2b00      	cmp	r3, #0
 80284b6:	f300 80b6 	bgt.w	8028626 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 80284ba:	9b06      	ldr	r3, [sp, #24]
 80284bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80284c0:	9b07      	ldr	r3, [sp, #28]
 80284c2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80284c6:	9307      	str	r3, [sp, #28]
 80284c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80284ca:	2b00      	cmp	r3, #0
 80284cc:	f340 8218 	ble.w	8028900 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c8>
 80284d0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80284d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80284d8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80284dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80284de:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80284e2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80284e6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80284ea:	eef0 6a48 	vmov.f32	s13, s16
 80284ee:	ee69 7a27 	vmul.f32	s15, s18, s15
 80284f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80284f6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80284fa:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80284fe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028502:	eef0 6a68 	vmov.f32	s13, s17
 8028506:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802850a:	ee18 2a10 	vmov	r2, s16
 802850e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028512:	fb92 f3f3 	sdiv	r3, r2, r3
 8028516:	ee18 2a90 	vmov	r2, s17
 802851a:	9327      	str	r3, [sp, #156]	; 0x9c
 802851c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802851e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028522:	9328      	str	r3, [sp, #160]	; 0xa0
 8028524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028526:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028528:	3b01      	subs	r3, #1
 802852a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802852e:	930e      	str	r3, [sp, #56]	; 0x38
 8028530:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028532:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8028536:	bf08      	it	eq
 8028538:	4613      	moveq	r3, r2
 802853a:	9306      	str	r3, [sp, #24]
 802853c:	eef0 8a67 	vmov.f32	s17, s15
 8028540:	eeb0 8a47 	vmov.f32	s16, s14
 8028544:	e621      	b.n	802818a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8028546:	fb08 f505 	mul.w	r5, r8, r5
 802854a:	fb09 5303 	mla	r3, r9, r3, r5
 802854e:	e6a1      	b.n	8028294 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8028550:	4681      	mov	r9, r0
 8028552:	e6c8      	b.n	80282e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8028554:	f1c1 0210 	rsb	r2, r1, #16
 8028558:	4341      	muls	r1, r0
 802855a:	fb09 1902 	mla	r9, r9, r2, r1
 802855e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028562:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8028566:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802856a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802856e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028572:	ea42 0909 	orr.w	r9, r2, r9
 8028576:	fa1f f289 	uxth.w	r2, r9
 802857a:	e75b      	b.n	8028434 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802857c:	f8b7 c000 	ldrh.w	ip, [r7]
 8028580:	43db      	mvns	r3, r3
 8028582:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028586:	fa5f fe83 	uxtb.w	lr, r3
 802858a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802858e:	fb00 f00e 	mul.w	r0, r0, lr
 8028592:	1c41      	adds	r1, r0, #1
 8028594:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028598:	1211      	asrs	r1, r2, #8
 802859a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802859e:	f021 0107 	bic.w	r1, r1, #7
 80285a2:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80285a6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80285aa:	48d8      	ldr	r0, [pc, #864]	; (802890c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d4>)
 80285ac:	fb05 f50e 	mul.w	r5, r5, lr
 80285b0:	b2c9      	uxtb	r1, r1
 80285b2:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80285b6:	1c69      	adds	r1, r5, #1
 80285b8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80285bc:	10d1      	asrs	r1, r2, #3
 80285be:	f021 0103 	bic.w	r1, r1, #3
 80285c2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80285c6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80285ca:	b2db      	uxtb	r3, r3
 80285cc:	00c9      	lsls	r1, r1, #3
 80285ce:	fb03 f30e 	mul.w	r3, r3, lr
 80285d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80285d6:	4301      	orrs	r1, r0
 80285d8:	1c58      	adds	r0, r3, #1
 80285da:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80285de:	00d2      	lsls	r2, r2, #3
 80285e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80285e4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80285e8:	430a      	orrs	r2, r1
 80285ea:	e726      	b.n	802843a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80285ec:	f115 0e01 	adds.w	lr, r5, #1
 80285f0:	f53f af24 	bmi.w	802843c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80285f4:	4572      	cmp	r2, lr
 80285f6:	f6ff af21 	blt.w	802843c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80285fa:	f110 0e01 	adds.w	lr, r0, #1
 80285fe:	f53f af1d 	bmi.w	802843c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8028602:	4573      	cmp	r3, lr
 8028604:	f6ff af1a 	blt.w	802843c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8028608:	b21b      	sxth	r3, r3
 802860a:	b212      	sxth	r2, r2
 802860c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8028610:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8028614:	9301      	str	r3, [sp, #4]
 8028616:	9200      	str	r2, [sp, #0]
 8028618:	4639      	mov	r1, r7
 802861a:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802861e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028620:	f7ff fbf4 	bl	8027e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8028624:	e70a      	b.n	802843c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8028626:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028628:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802862c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802862e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8028632:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028634:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028638:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802863a:	141f      	asrs	r7, r3, #16
 802863c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802863e:	141b      	asrs	r3, r3, #16
 8028640:	fb01 3707 	mla	r7, r1, r7, r3
 8028644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028646:	fa1f fc82 	uxth.w	ip, r2
 802864a:	eb03 0a07 	add.w	sl, r3, r7
 802864e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8028652:	f813 9007 	ldrb.w	r9, [r3, r7]
 8028656:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802865a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802865e:	b29b      	uxth	r3, r3
 8028660:	2d00      	cmp	r5, #0
 8028662:	f000 80fe 	beq.w	8028862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 8028666:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802866a:	940c      	str	r4, [sp, #48]	; 0x30
 802866c:	eb0a 0b01 	add.w	fp, sl, r1
 8028670:	fa1f fa85 	uxth.w	sl, r5
 8028674:	fb0a fc0c 	mul.w	ip, sl, ip
 8028678:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802867c:	fa1f fa8a 	uxth.w	sl, sl
 8028680:	eba0 000c 	sub.w	r0, r0, ip
 8028684:	eba3 030a 	sub.w	r3, r3, sl
 8028688:	b280      	uxth	r0, r0
 802868a:	fb08 f000 	mul.w	r0, r8, r0
 802868e:	b29b      	uxth	r3, r3
 8028690:	fb09 0303 	mla	r3, r9, r3, r0
 8028694:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028696:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802869a:	940d      	str	r4, [sp, #52]	; 0x34
 802869c:	fb0a 3300 	mla	r3, sl, r0, r3
 80286a0:	fb0c 3304 	mla	r3, ip, r4, r3
 80286a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80286a8:	2b00      	cmp	r3, #0
 80286aa:	f000 80cc 	beq.w	8028846 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 80286ae:	9808      	ldr	r0, [sp, #32]
 80286b0:	9c08      	ldr	r4, [sp, #32]
 80286b2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80286b6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80286ba:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80286be:	f000 80d5 	beq.w	802886c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80286c2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80286c6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80286ca:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80286ce:	fb09 f707 	mul.w	r7, r9, r7
 80286d2:	fb0a fc0c 	mul.w	ip, sl, ip
 80286d6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80286da:	f107 0b20 	add.w	fp, r7, #32
 80286de:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80286e2:	44cc      	add	ip, r9
 80286e4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80286e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80286ec:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80286f0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80286f4:	ea4c 0909 	orr.w	r9, ip, r9
 80286f8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80286fc:	8847      	ldrh	r7, [r0, #2]
 80286fe:	d019      	beq.n	8028734 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8028700:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028704:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028708:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802870c:	fb08 f807 	mul.w	r8, r8, r7
 8028710:	fb0a fc0c 	mul.w	ip, sl, ip
 8028714:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8028718:	f108 0b20 	add.w	fp, r8, #32
 802871c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028720:	44bc      	add	ip, r7
 8028722:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8028726:	0a3f      	lsrs	r7, r7, #8
 8028728:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802872c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028730:	ea4c 0707 	orr.w	r7, ip, r7
 8028734:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028738:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802873c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8028740:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028744:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028748:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802874c:	ea4c 0909 	orr.w	r9, ip, r9
 8028750:	ea4a 0707 	orr.w	r7, sl, r7
 8028754:	2d00      	cmp	r5, #0
 8028756:	f000 808b 	beq.w	8028870 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802875a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802875e:	3901      	subs	r1, #1
 8028760:	0049      	lsls	r1, r1, #1
 8028762:	3102      	adds	r1, #2
 8028764:	eb00 0c01 	add.w	ip, r0, r1
 8028768:	5a41      	ldrh	r1, [r0, r1]
 802876a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802876c:	28ff      	cmp	r0, #255	; 0xff
 802876e:	d019      	beq.n	80287a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8028770:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028772:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028776:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802877a:	fb04 fa01 	mul.w	sl, r4, r1
 802877e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028782:	fb08 f800 	mul.w	r8, r8, r0
 8028786:	f10a 0020 	add.w	r0, sl, #32
 802878a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802878e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028792:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028796:	4441      	add	r1, r8
 8028798:	0a00      	lsrs	r0, r0, #8
 802879a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802879e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80287a2:	4301      	orrs	r1, r0
 80287a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80287a6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80287aa:	2cff      	cmp	r4, #255	; 0xff
 80287ac:	d01a      	beq.n	80287e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 80287ae:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80287b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80287b6:	fb04 fa00 	mul.w	sl, r4, r0
 80287ba:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80287be:	fb08 f80c 	mul.w	r8, r8, ip
 80287c2:	f10a 0c20 	add.w	ip, sl, #32
 80287c6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80287ca:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80287ce:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80287d2:	4440      	add	r0, r8
 80287d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80287d8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80287dc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80287e0:	ea40 000c 	orr.w	r0, r0, ip
 80287e4:	fb15 fc02 	smulbb	ip, r5, r2
 80287e8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80287ec:	f1c5 0810 	rsb	r8, r5, #16
 80287f0:	eba8 0802 	sub.w	r8, r8, r2
 80287f4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80287f8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80287fc:	437a      	muls	r2, r7
 80287fe:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028802:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8028806:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802880a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802880e:	fb09 2208 	mla	r2, r9, r8, r2
 8028812:	ea4a 0101 	orr.w	r1, sl, r1
 8028816:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802881a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802881e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028822:	fb05 2201 	mla	r2, r5, r1, r2
 8028826:	ea4b 0000 	orr.w	r0, fp, r0
 802882a:	fb0c 2200 	mla	r2, ip, r0, r2
 802882e:	0d57      	lsrs	r7, r2, #21
 8028830:	0952      	lsrs	r2, r2, #5
 8028832:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028836:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802883a:	433a      	orrs	r2, r7
 802883c:	2bff      	cmp	r3, #255	; 0xff
 802883e:	b292      	uxth	r2, r2
 8028840:	d127      	bne.n	8028892 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8028842:	f8ae 2000 	strh.w	r2, [lr]
 8028846:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028848:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802884a:	4413      	add	r3, r2
 802884c:	9325      	str	r3, [sp, #148]	; 0x94
 802884e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8028850:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028852:	441a      	add	r2, r3
 8028854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028856:	9226      	str	r2, [sp, #152]	; 0x98
 8028858:	3b01      	subs	r3, #1
 802885a:	f10e 0e02 	add.w	lr, lr, #2
 802885e:	930f      	str	r3, [sp, #60]	; 0x3c
 8028860:	e627      	b.n	80284b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8028862:	fb08 f000 	mul.w	r0, r8, r0
 8028866:	fb09 0303 	mla	r3, r9, r3, r0
 802886a:	e71b      	b.n	80286a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 802886c:	46b9      	mov	r9, r7
 802886e:	e743      	b.n	80286f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8028870:	f1c2 0110 	rsb	r1, r2, #16
 8028874:	437a      	muls	r2, r7
 8028876:	fb09 2901 	mla	r9, r9, r1, r2
 802887a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802887e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028882:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028886:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802888a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802888e:	4302      	orrs	r2, r0
 8028890:	e7d4      	b.n	802883c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8028892:	f8be 7000 	ldrh.w	r7, [lr]
 8028896:	4c1d      	ldr	r4, [pc, #116]	; (802890c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d4>)
 8028898:	43db      	mvns	r3, r3
 802889a:	1238      	asrs	r0, r7, #8
 802889c:	fa5f fc83 	uxtb.w	ip, r3
 80288a0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80288a4:	10fd      	asrs	r5, r7, #3
 80288a6:	fb00 f00c 	mul.w	r0, r0, ip
 80288aa:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80288ae:	fb05 f10c 	mul.w	r1, r5, ip
 80288b2:	1c45      	adds	r5, r0, #1
 80288b4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80288b8:	1215      	asrs	r5, r2, #8
 80288ba:	f025 0507 	bic.w	r5, r5, #7
 80288be:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80288c2:	1c4d      	adds	r5, r1, #1
 80288c4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80288c8:	10d1      	asrs	r1, r2, #3
 80288ca:	f021 0103 	bic.w	r1, r1, #3
 80288ce:	00fb      	lsls	r3, r7, #3
 80288d0:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80288d4:	b2db      	uxtb	r3, r3
 80288d6:	b2c0      	uxtb	r0, r0
 80288d8:	00c9      	lsls	r1, r1, #3
 80288da:	fb03 f30c 	mul.w	r3, r3, ip
 80288de:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80288e2:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80288e6:	4308      	orrs	r0, r1
 80288e8:	1c59      	adds	r1, r3, #1
 80288ea:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80288ee:	00d2      	lsls	r2, r2, #3
 80288f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80288f4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80288f8:	4318      	orrs	r0, r3
 80288fa:	f8ae 0000 	strh.w	r0, [lr]
 80288fe:	e7a2      	b.n	8028846 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70e>
 8028900:	b013      	add	sp, #76	; 0x4c
 8028902:	ecbd 8b08 	vpop	{d8-d11}
 8028906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802890a:	bf00      	nop
 802890c:	fffff800 	.word	0xfffff800

08028910 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8028910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028914:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8028918:	fb0c 4e03 	mla	lr, ip, r3, r4
 802891c:	f1bc 0f00 	cmp.w	ip, #0
 8028920:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8028924:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8028928:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802892c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8028930:	8808      	ldrh	r0, [r1, #0]
 8028932:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8028936:	db2f      	blt.n	8028998 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8028938:	45e2      	cmp	sl, ip
 802893a:	dd2d      	ble.n	8028998 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802893c:	2c00      	cmp	r4, #0
 802893e:	db29      	blt.n	8028994 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8028940:	42a3      	cmp	r3, r4
 8028942:	dd27      	ble.n	8028994 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8028944:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8028948:	1c62      	adds	r2, r4, #1
 802894a:	d428      	bmi.n	802899e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802894c:	4293      	cmp	r3, r2
 802894e:	dd26      	ble.n	802899e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028950:	b32f      	cbz	r7, 802899e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8028952:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8028956:	f11c 0c01 	adds.w	ip, ip, #1
 802895a:	d424      	bmi.n	80289a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802895c:	45e2      	cmp	sl, ip
 802895e:	dd22      	ble.n	80289a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8028960:	2e00      	cmp	r6, #0
 8028962:	f000 809d 	beq.w	8028aa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8028966:	2c00      	cmp	r4, #0
 8028968:	db1b      	blt.n	80289a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802896a:	42a3      	cmp	r3, r4
 802896c:	dd19      	ble.n	80289a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802896e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8028972:	3401      	adds	r4, #1
 8028974:	d41a      	bmi.n	80289ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8028976:	42a3      	cmp	r3, r4
 8028978:	dd18      	ble.n	80289ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802897a:	b1cf      	cbz	r7, 80289b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 802897c:	3301      	adds	r3, #1
 802897e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8028982:	2f0f      	cmp	r7, #15
 8028984:	d915      	bls.n	80289b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8028986:	4b49      	ldr	r3, [pc, #292]	; (8028aac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8028988:	4a49      	ldr	r2, [pc, #292]	; (8028ab0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 802898a:	484a      	ldr	r0, [pc, #296]	; (8028ab4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 802898c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8028990:	f005 fa5e 	bl	802de50 <__assert_func>
 8028994:	4681      	mov	r9, r0
 8028996:	e7d7      	b.n	8028948 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8028998:	4686      	mov	lr, r0
 802899a:	4681      	mov	r9, r0
 802899c:	e7db      	b.n	8028956 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802899e:	4686      	mov	lr, r0
 80289a0:	e7d9      	b.n	8028956 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 80289a2:	4684      	mov	ip, r0
 80289a4:	e7e5      	b.n	8028972 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 80289a6:	4603      	mov	r3, r0
 80289a8:	4684      	mov	ip, r0
 80289aa:	e7ea      	b.n	8028982 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80289ac:	4603      	mov	r3, r0
 80289ae:	e7e8      	b.n	8028982 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80289b0:	4603      	mov	r3, r0
 80289b2:	2e0f      	cmp	r6, #15
 80289b4:	d8e7      	bhi.n	8028986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80289b6:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80289ba:	fb17 f806 	smulbb	r8, r7, r6
 80289be:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80289c2:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 80289c6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80289ca:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80289ce:	ea44 0909 	orr.w	r9, r4, r9
 80289d2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80289d6:	f1c6 0410 	rsb	r4, r6, #16
 80289da:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80289de:	1be4      	subs	r4, r4, r7
 80289e0:	041a      	lsls	r2, r3, #16
 80289e2:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 80289e6:	ea4a 0e0e 	orr.w	lr, sl, lr
 80289ea:	fb07 fe0e 	mul.w	lr, r7, lr
 80289ee:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80289f2:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80289f6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80289fa:	fb04 e409 	mla	r4, r4, r9, lr
 80289fe:	4313      	orrs	r3, r2
 8028a00:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8028a04:	fb08 4303 	mla	r3, r8, r3, r4
 8028a08:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028a0c:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8028a10:	4322      	orrs	r2, r4
 8028a12:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8028a16:	fb06 3202 	mla	r2, r6, r2, r3
 8028a1a:	0d53      	lsrs	r3, r2, #21
 8028a1c:	0952      	lsrs	r2, r2, #5
 8028a1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028a22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028a26:	431a      	orrs	r2, r3
 8028a28:	b293      	uxth	r3, r2
 8028a2a:	b2af      	uxth	r7, r5
 8028a2c:	1202      	asrs	r2, r0, #8
 8028a2e:	43ed      	mvns	r5, r5
 8028a30:	b2ed      	uxtb	r5, r5
 8028a32:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028a36:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028a3a:	fb12 f205 	smulbb	r2, r2, r5
 8028a3e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028a42:	fb0c 2c07 	mla	ip, ip, r7, r2
 8028a46:	00dc      	lsls	r4, r3, #3
 8028a48:	10da      	asrs	r2, r3, #3
 8028a4a:	10c6      	asrs	r6, r0, #3
 8028a4c:	00c3      	lsls	r3, r0, #3
 8028a4e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8028a52:	b2db      	uxtb	r3, r3
 8028a54:	fb16 f605 	smulbb	r6, r6, r5
 8028a58:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028a5c:	b2e4      	uxtb	r4, r4
 8028a5e:	fb13 f305 	smulbb	r3, r3, r5
 8028a62:	fa1f fc8c 	uxth.w	ip, ip
 8028a66:	fb02 6207 	mla	r2, r2, r7, r6
 8028a6a:	fb04 3307 	mla	r3, r4, r7, r3
 8028a6e:	b296      	uxth	r6, r2
 8028a70:	b29a      	uxth	r2, r3
 8028a72:	f10c 0301 	add.w	r3, ip, #1
 8028a76:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028a7a:	1c53      	adds	r3, r2, #1
 8028a7c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028a80:	1c72      	adds	r2, r6, #1
 8028a82:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8028a86:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028a8a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028a8e:	0952      	lsrs	r2, r2, #5
 8028a90:	ea43 030c 	orr.w	r3, r3, ip
 8028a94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028a98:	4313      	orrs	r3, r2
 8028a9a:	800b      	strh	r3, [r1, #0]
 8028a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028aa0:	2f0f      	cmp	r7, #15
 8028aa2:	f63f af70 	bhi.w	8028986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8028aa6:	4603      	mov	r3, r0
 8028aa8:	4684      	mov	ip, r0
 8028aaa:	e784      	b.n	80289b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8028aac:	08032b71 	.word	0x08032b71
 8028ab0:	080331e7 	.word	0x080331e7
 8028ab4:	08032bf5 	.word	0x08032bf5

08028ab8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028abc:	ed2d 8b08 	vpush	{d8-d11}
 8028ac0:	b093      	sub	sp, #76	; 0x4c
 8028ac2:	461d      	mov	r5, r3
 8028ac4:	9210      	str	r2, [sp, #64]	; 0x40
 8028ac6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028ac8:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8028acc:	920b      	str	r2, [sp, #44]	; 0x2c
 8028ace:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8028ad2:	910a      	str	r1, [sp, #40]	; 0x28
 8028ad4:	6859      	ldr	r1, [r3, #4]
 8028ad6:	681b      	ldr	r3, [r3, #0]
 8028ad8:	9011      	str	r0, [sp, #68]	; 0x44
 8028ada:	fb01 2707 	mla	r7, r1, r7, r2
 8028ade:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028ae2:	9307      	str	r3, [sp, #28]
 8028ae4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028ae6:	681b      	ldr	r3, [r3, #0]
 8028ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8028aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028aec:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028af0:	43db      	mvns	r3, r3
 8028af2:	b2db      	uxtb	r3, r3
 8028af4:	eeb0 aa40 	vmov.f32	s20, s0
 8028af8:	eef0 9a60 	vmov.f32	s19, s1
 8028afc:	eeb0 9a41 	vmov.f32	s18, s2
 8028b00:	eeb0 8a62 	vmov.f32	s16, s5
 8028b04:	eef0 8a43 	vmov.f32	s17, s6
 8028b08:	eef0 ba44 	vmov.f32	s23, s8
 8028b0c:	eeb0 ba64 	vmov.f32	s22, s9
 8028b10:	eef0 aa45 	vmov.f32	s21, s10
 8028b14:	9308      	str	r3, [sp, #32]
 8028b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028b18:	2b00      	cmp	r3, #0
 8028b1a:	dc03      	bgt.n	8028b24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028b1e:	2b00      	cmp	r3, #0
 8028b20:	f340 8203 	ble.w	8028f2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8028b24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028b26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028b2e:	1e48      	subs	r0, r1, #1
 8028b30:	f102 3cff 	add.w	ip, r2, #4294967295
 8028b34:	2d00      	cmp	r5, #0
 8028b36:	f340 80da 	ble.w	8028cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028b3a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028b3e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028b42:	d406      	bmi.n	8028b52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028b44:	4586      	cmp	lr, r0
 8028b46:	da04      	bge.n	8028b52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028b48:	2b00      	cmp	r3, #0
 8028b4a:	db02      	blt.n	8028b52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028b4c:	4563      	cmp	r3, ip
 8028b4e:	f2c0 80cf 	blt.w	8028cf0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8028b52:	f11e 0e01 	adds.w	lr, lr, #1
 8028b56:	f100 80c1 	bmi.w	8028cdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028b5a:	4571      	cmp	r1, lr
 8028b5c:	f2c0 80be 	blt.w	8028cdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028b60:	3301      	adds	r3, #1
 8028b62:	f100 80bb 	bmi.w	8028cdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028b66:	429a      	cmp	r2, r3
 8028b68:	f2c0 80b8 	blt.w	8028cdc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028b6c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028b70:	46a9      	mov	r9, r5
 8028b72:	f1b9 0f00 	cmp.w	r9, #0
 8028b76:	f340 80d8 	ble.w	8028d2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8028b7a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028b7c:	1421      	asrs	r1, r4, #16
 8028b7e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028b82:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028b86:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028b8a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028b8e:	f100 8111 	bmi.w	8028db4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028b92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028b96:	4551      	cmp	r1, sl
 8028b98:	f280 810c 	bge.w	8028db4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028b9c:	2800      	cmp	r0, #0
 8028b9e:	f2c0 8109 	blt.w	8028db4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028ba2:	f103 3aff 	add.w	sl, r3, #4294967295
 8028ba6:	4550      	cmp	r0, sl
 8028ba8:	f280 8104 	bge.w	8028db4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028bac:	fa0f f38e 	sxth.w	r3, lr
 8028bb0:	fb00 1103 	mla	r1, r0, r3, r1
 8028bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028bb6:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028bba:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8028bbe:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028bc2:	f1bc 0f00 	cmp.w	ip, #0
 8028bc6:	d007      	beq.n	8028bd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8028bc8:	005b      	lsls	r3, r3, #1
 8028bca:	eb0a 0003 	add.w	r0, sl, r3
 8028bce:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8028bd4:	8843      	ldrh	r3, [r0, #2]
 8028bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8028bd8:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8028bdc:	fb12 f30c 	smulbb	r3, r2, ip
 8028be0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028be4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028be8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028bec:	10db      	asrs	r3, r3, #3
 8028bee:	ea40 000e 	orr.w	r0, r0, lr
 8028bf2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028bf6:	f1cc 0e10 	rsb	lr, ip, #16
 8028bfa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028bfe:	ebae 0e02 	sub.w	lr, lr, r2
 8028c02:	ea4a 0101 	orr.w	r1, sl, r1
 8028c06:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028c0a:	4351      	muls	r1, r2
 8028c0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028c0e:	9f08      	ldr	r7, [sp, #32]
 8028c10:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028c14:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028c18:	0410      	lsls	r0, r2, #16
 8028c1a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028c1e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028c22:	4310      	orrs	r0, r2
 8028c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028c26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028c28:	0412      	lsls	r2, r2, #16
 8028c2a:	fb03 e000 	mla	r0, r3, r0, lr
 8028c2e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028c32:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028c36:	ea42 020e 	orr.w	r2, r2, lr
 8028c3a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028c3e:	fb03 0302 	mla	r3, r3, r2, r0
 8028c42:	0d5a      	lsrs	r2, r3, #21
 8028c44:	095b      	lsrs	r3, r3, #5
 8028c46:	f8b8 0000 	ldrh.w	r0, [r8]
 8028c4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028c4e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028c52:	4313      	orrs	r3, r2
 8028c54:	b29b      	uxth	r3, r3
 8028c56:	1201      	asrs	r1, r0, #8
 8028c58:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8028c5c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028c60:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028c64:	fb11 f107 	smulbb	r1, r1, r7
 8028c68:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8028c6c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028c70:	00c0      	lsls	r0, r0, #3
 8028c72:	fb0c 1c02 	mla	ip, ip, r2, r1
 8028c76:	b2c0      	uxtb	r0, r0
 8028c78:	10d9      	asrs	r1, r3, #3
 8028c7a:	00db      	lsls	r3, r3, #3
 8028c7c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8028c80:	b2db      	uxtb	r3, r3
 8028c82:	fb10 f007 	smulbb	r0, r0, r7
 8028c86:	fa1f fc8c 	uxth.w	ip, ip
 8028c8a:	fb03 0302 	mla	r3, r3, r2, r0
 8028c8e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028c92:	fb1e fe07 	smulbb	lr, lr, r7
 8028c96:	fb01 e102 	mla	r1, r1, r2, lr
 8028c9a:	b29a      	uxth	r2, r3
 8028c9c:	f10c 0301 	add.w	r3, ip, #1
 8028ca0:	b289      	uxth	r1, r1
 8028ca2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028ca6:	1c53      	adds	r3, r2, #1
 8028ca8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028cac:	1c4a      	adds	r2, r1, #1
 8028cae:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028cb2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028cb6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028cba:	0949      	lsrs	r1, r1, #5
 8028cbc:	ea43 030c 	orr.w	r3, r3, ip
 8028cc0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028cc4:	430b      	orrs	r3, r1
 8028cc6:	f8a8 3000 	strh.w	r3, [r8]
 8028cca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028ccc:	441c      	add	r4, r3
 8028cce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028cd0:	f108 0802 	add.w	r8, r8, #2
 8028cd4:	441e      	add	r6, r3
 8028cd6:	f109 39ff 	add.w	r9, r9, #4294967295
 8028cda:	e74a      	b.n	8028b72 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028cdc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028cde:	441c      	add	r4, r3
 8028ce0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028ce2:	441e      	add	r6, r3
 8028ce4:	9b07      	ldr	r3, [sp, #28]
 8028ce6:	3302      	adds	r3, #2
 8028ce8:	3d01      	subs	r5, #1
 8028cea:	9307      	str	r3, [sp, #28]
 8028cec:	e722      	b.n	8028b34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028cee:	d022      	beq.n	8028d36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8028cf0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028cf2:	1e6b      	subs	r3, r5, #1
 8028cf4:	fb00 4003 	mla	r0, r0, r3, r4
 8028cf8:	1400      	asrs	r0, r0, #16
 8028cfa:	f53f af37 	bmi.w	8028b6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028cfe:	3901      	subs	r1, #1
 8028d00:	4288      	cmp	r0, r1
 8028d02:	f6bf af33 	bge.w	8028b6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028d06:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028d08:	fb01 6303 	mla	r3, r1, r3, r6
 8028d0c:	141b      	asrs	r3, r3, #16
 8028d0e:	f53f af2d 	bmi.w	8028b6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028d12:	3a01      	subs	r2, #1
 8028d14:	4293      	cmp	r3, r2
 8028d16:	f6bf af29 	bge.w	8028b6c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028d1a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8028d1e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8028d22:	46a8      	mov	r8, r5
 8028d24:	f1b8 0f00 	cmp.w	r8, #0
 8028d28:	dc5e      	bgt.n	8028de8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8028d2a:	9b07      	ldr	r3, [sp, #28]
 8028d2c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028d30:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028d34:	9307      	str	r3, [sp, #28]
 8028d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028d38:	2b00      	cmp	r3, #0
 8028d3a:	f340 80f6 	ble.w	8028f2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 8028d3e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028d46:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028d4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028d4c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028d50:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028d54:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028d58:	eef0 6a48 	vmov.f32	s13, s16
 8028d5c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028d60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d64:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028d68:	ee16 4a90 	vmov	r4, s13
 8028d6c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028d70:	eef0 6a68 	vmov.f32	s13, s17
 8028d74:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028d78:	ee18 2a10 	vmov	r2, s16
 8028d7c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028d80:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d84:	ee18 2a90 	vmov	r2, s17
 8028d88:	9327      	str	r3, [sp, #156]	; 0x9c
 8028d8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d90:	9328      	str	r3, [sp, #160]	; 0xa0
 8028d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028d94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028d96:	3b01      	subs	r3, #1
 8028d98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8028d9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028da0:	ee16 6a90 	vmov	r6, s13
 8028da4:	bf14      	ite	ne
 8028da6:	461d      	movne	r5, r3
 8028da8:	4615      	moveq	r5, r2
 8028daa:	eef0 8a67 	vmov.f32	s17, s15
 8028dae:	eeb0 8a47 	vmov.f32	s16, s14
 8028db2:	e6b0      	b.n	8028b16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8028db4:	f111 0a01 	adds.w	sl, r1, #1
 8028db8:	d487      	bmi.n	8028cca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028dba:	45d6      	cmp	lr, sl
 8028dbc:	db85      	blt.n	8028cca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028dbe:	f110 0a01 	adds.w	sl, r0, #1
 8028dc2:	d482      	bmi.n	8028cca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028dc4:	4553      	cmp	r3, sl
 8028dc6:	db80      	blt.n	8028cca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028dc8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8028dca:	9101      	str	r1, [sp, #4]
 8028dcc:	b21b      	sxth	r3, r3
 8028dce:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8028dd2:	9300      	str	r3, [sp, #0]
 8028dd4:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028dd8:	fa0f f38e 	sxth.w	r3, lr
 8028ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028dde:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028de0:	4641      	mov	r1, r8
 8028de2:	f7ff fd95 	bl	8028910 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8028de6:	e770      	b.n	8028cca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028de8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028dea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028dec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028df0:	1430      	asrs	r0, r6, #16
 8028df2:	1423      	asrs	r3, r4, #16
 8028df4:	fb01 3000 	mla	r0, r1, r0, r3
 8028df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028dfa:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8028dfe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028e02:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028e06:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028e0a:	8858      	ldrh	r0, [r3, #2]
 8028e0c:	f1be 0f00 	cmp.w	lr, #0
 8028e10:	d00b      	beq.n	8028e2a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8028e12:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028e16:	3901      	subs	r1, #1
 8028e18:	0049      	lsls	r1, r1, #1
 8028e1a:	3102      	adds	r1, #2
 8028e1c:	eb03 0b01 	add.w	fp, r3, r1
 8028e20:	5a5b      	ldrh	r3, [r3, r1]
 8028e22:	930e      	str	r3, [sp, #56]	; 0x38
 8028e24:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028e28:	930f      	str	r3, [sp, #60]	; 0x3c
 8028e2a:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028e2e:	fb12 f30e 	smulbb	r3, r2, lr
 8028e32:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028e36:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028e3a:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8028e3e:	10db      	asrs	r3, r3, #3
 8028e40:	ea41 010c 	orr.w	r1, r1, ip
 8028e44:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028e48:	f1ce 0c10 	rsb	ip, lr, #16
 8028e4c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028e50:	ebac 0c02 	sub.w	ip, ip, r2
 8028e54:	ea4b 0000 	orr.w	r0, fp, r0
 8028e58:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028e5c:	4350      	muls	r0, r2
 8028e5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028e60:	9f08      	ldr	r7, [sp, #32]
 8028e62:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028e66:	fb0c 0c01 	mla	ip, ip, r1, r0
 8028e6a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028e6e:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8028e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028e74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028e76:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028e7a:	0412      	lsls	r2, r2, #16
 8028e7c:	ea4b 0101 	orr.w	r1, fp, r1
 8028e80:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028e84:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028e88:	fb03 c101 	mla	r1, r3, r1, ip
 8028e8c:	4302      	orrs	r2, r0
 8028e8e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028e92:	fb03 1202 	mla	r2, r3, r2, r1
 8028e96:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8028e9a:	0952      	lsrs	r2, r2, #5
 8028e9c:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8028ea0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8028ea4:	f8b9 2000 	ldrh.w	r2, [r9]
 8028ea8:	ea4b 0303 	orr.w	r3, fp, r3
 8028eac:	b29b      	uxth	r3, r3
 8028eae:	1211      	asrs	r1, r2, #8
 8028eb0:	1218      	asrs	r0, r3, #8
 8028eb2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028eb6:	fb11 f107 	smulbb	r1, r1, r7
 8028eba:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8028ebe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028ec2:	00d2      	lsls	r2, r2, #3
 8028ec4:	fb00 100a 	mla	r0, r0, sl, r1
 8028ec8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8028ecc:	10d9      	asrs	r1, r3, #3
 8028ece:	b2d2      	uxtb	r2, r2
 8028ed0:	00db      	lsls	r3, r3, #3
 8028ed2:	fb1c fc07 	smulbb	ip, ip, r7
 8028ed6:	fb12 f207 	smulbb	r2, r2, r7
 8028eda:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028ede:	b2db      	uxtb	r3, r3
 8028ee0:	b280      	uxth	r0, r0
 8028ee2:	fb01 c10a 	mla	r1, r1, sl, ip
 8028ee6:	fb03 230a 	mla	r3, r3, sl, r2
 8028eea:	b29b      	uxth	r3, r3
 8028eec:	b289      	uxth	r1, r1
 8028eee:	1c42      	adds	r2, r0, #1
 8028ef0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028ef4:	f101 0c01 	add.w	ip, r1, #1
 8028ef8:	1c5a      	adds	r2, r3, #1
 8028efa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028efe:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028f02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028f04:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028f08:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028f0c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028f10:	4310      	orrs	r0, r2
 8028f12:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028f16:	441c      	add	r4, r3
 8028f18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028f1a:	ea40 000c 	orr.w	r0, r0, ip
 8028f1e:	f829 0b02 	strh.w	r0, [r9], #2
 8028f22:	441e      	add	r6, r3
 8028f24:	f108 38ff 	add.w	r8, r8, #4294967295
 8028f28:	e6fc      	b.n	8028d24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8028f2a:	b013      	add	sp, #76	; 0x4c
 8028f2c:	ecbd 8b08 	vpop	{d8-d11}
 8028f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028f34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8028f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f38:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8028f3c:	fb06 5c03 	mla	ip, r6, r3, r5
 8028f40:	2e00      	cmp	r6, #0
 8028f42:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8028f46:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8028f4a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8028f4e:	8808      	ldrh	r0, [r1, #0]
 8028f50:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8028f54:	db2e      	blt.n	8028fb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8028f56:	45b0      	cmp	r8, r6
 8028f58:	dd2c      	ble.n	8028fb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8028f5a:	2d00      	cmp	r5, #0
 8028f5c:	db28      	blt.n	8028fb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8028f5e:	42ab      	cmp	r3, r5
 8028f60:	dd26      	ble.n	8028fb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8028f62:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8028f66:	1c6a      	adds	r2, r5, #1
 8028f68:	d427      	bmi.n	8028fba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8028f6a:	4293      	cmp	r3, r2
 8028f6c:	dd25      	ble.n	8028fba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8028f6e:	b324      	cbz	r4, 8028fba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8028f70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8028f74:	3601      	adds	r6, #1
 8028f76:	d424      	bmi.n	8028fc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8028f78:	45b0      	cmp	r8, r6
 8028f7a:	dd22      	ble.n	8028fc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8028f7c:	b31f      	cbz	r7, 8028fc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8028f7e:	2d00      	cmp	r5, #0
 8028f80:	db1d      	blt.n	8028fbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8028f82:	42ab      	cmp	r3, r5
 8028f84:	dd1b      	ble.n	8028fbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8028f86:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8028f8a:	3501      	adds	r5, #1
 8028f8c:	d405      	bmi.n	8028f9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8028f8e:	42ab      	cmp	r3, r5
 8028f90:	dd03      	ble.n	8028f9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8028f92:	b124      	cbz	r4, 8028f9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8028f94:	3301      	adds	r3, #1
 8028f96:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8028f9a:	2c0f      	cmp	r4, #15
 8028f9c:	d801      	bhi.n	8028fa2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028f9e:	2f0f      	cmp	r7, #15
 8028fa0:	d914      	bls.n	8028fcc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8028fa2:	4b27      	ldr	r3, [pc, #156]	; (8029040 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8028fa4:	4a27      	ldr	r2, [pc, #156]	; (8029044 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8028fa6:	4828      	ldr	r0, [pc, #160]	; (8029048 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8028fa8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8028fac:	f004 ff50 	bl	802de50 <__assert_func>
 8028fb0:	4684      	mov	ip, r0
 8028fb2:	e7d8      	b.n	8028f66 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8028fb4:	4602      	mov	r2, r0
 8028fb6:	4684      	mov	ip, r0
 8028fb8:	e7dc      	b.n	8028f74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8028fba:	4602      	mov	r2, r0
 8028fbc:	e7da      	b.n	8028f74 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8028fbe:	4606      	mov	r6, r0
 8028fc0:	e7e3      	b.n	8028f8a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8028fc2:	4606      	mov	r6, r0
 8028fc4:	e7e9      	b.n	8028f9a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8028fc6:	2c0f      	cmp	r4, #15
 8028fc8:	d8eb      	bhi.n	8028fa2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028fca:	4606      	mov	r6, r0
 8028fcc:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8028fd0:	fb14 f307 	smulbb	r3, r4, r7
 8028fd4:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8028fd8:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8028fdc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028fe0:	10db      	asrs	r3, r3, #3
 8028fe2:	ea45 0c0c 	orr.w	ip, r5, ip
 8028fe6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8028fea:	f1c7 0510 	rsb	r5, r7, #16
 8028fee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028ff2:	1b2d      	subs	r5, r5, r4
 8028ff4:	ea4e 0202 	orr.w	r2, lr, r2
 8028ff8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8028ffc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8029000:	4354      	muls	r4, r2
 8029002:	fb05 450c 	mla	r5, r5, ip, r4
 8029006:	0404      	lsls	r4, r0, #16
 8029008:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802900c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029010:	4320      	orrs	r0, r4
 8029012:	fb03 5400 	mla	r4, r3, r0, r5
 8029016:	0430      	lsls	r0, r6, #16
 8029018:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802901c:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8029020:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8029024:	4330      	orrs	r0, r6
 8029026:	fb07 4000 	mla	r0, r7, r0, r4
 802902a:	0d43      	lsrs	r3, r0, #21
 802902c:	0940      	lsrs	r0, r0, #5
 802902e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029032:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029036:	4318      	orrs	r0, r3
 8029038:	8008      	strh	r0, [r1, #0]
 802903a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802903e:	bf00      	nop
 8029040:	08032b71 	.word	0x08032b71
 8029044:	080331e7 	.word	0x080331e7
 8029048:	08032bf5 	.word	0x08032bf5

0802904c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029050:	ed2d 8b08 	vpush	{d8-d11}
 8029054:	b08f      	sub	sp, #60	; 0x3c
 8029056:	461d      	mov	r5, r3
 8029058:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802905a:	920c      	str	r2, [sp, #48]	; 0x30
 802905c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 8029060:	9107      	str	r1, [sp, #28]
 8029062:	6859      	ldr	r1, [r3, #4]
 8029064:	681b      	ldr	r3, [r3, #0]
 8029066:	900d      	str	r0, [sp, #52]	; 0x34
 8029068:	fb01 2707 	mla	r7, r1, r7, r2
 802906c:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8029070:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029072:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8029076:	f8d3 8000 	ldr.w	r8, [r3]
 802907a:	eeb0 aa40 	vmov.f32	s20, s0
 802907e:	eef0 9a60 	vmov.f32	s19, s1
 8029082:	eeb0 9a41 	vmov.f32	s18, s2
 8029086:	eeb0 8a62 	vmov.f32	s16, s5
 802908a:	eef0 8a43 	vmov.f32	s17, s6
 802908e:	eef0 ba44 	vmov.f32	s23, s8
 8029092:	eeb0 ba64 	vmov.f32	s22, s9
 8029096:	eef0 aa45 	vmov.f32	s21, s10
 802909a:	9b07      	ldr	r3, [sp, #28]
 802909c:	2b00      	cmp	r3, #0
 802909e:	dc03      	bgt.n	80290a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80290a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80290a2:	2b00      	cmp	r3, #0
 80290a4:	f340 8181 	ble.w	80293aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80290a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80290aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80290ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80290b2:	1e48      	subs	r0, r1, #1
 80290b4:	f102 3cff 	add.w	ip, r2, #4294967295
 80290b8:	2d00      	cmp	r5, #0
 80290ba:	f340 809b 	ble.w	80291f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80290be:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80290c2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80290c6:	d406      	bmi.n	80290d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80290c8:	4586      	cmp	lr, r0
 80290ca:	da04      	bge.n	80290d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80290cc:	2b00      	cmp	r3, #0
 80290ce:	db02      	blt.n	80290d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80290d0:	4563      	cmp	r3, ip
 80290d2:	f2c0 8090 	blt.w	80291f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80290d6:	f11e 0e01 	adds.w	lr, lr, #1
 80290da:	f100 8084 	bmi.w	80291e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80290de:	4571      	cmp	r1, lr
 80290e0:	f2c0 8081 	blt.w	80291e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80290e4:	3301      	adds	r3, #1
 80290e6:	d47e      	bmi.n	80291e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80290e8:	429a      	cmp	r2, r3
 80290ea:	db7c      	blt.n	80291e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80290ec:	46aa      	mov	sl, r5
 80290ee:	46b9      	mov	r9, r7
 80290f0:	f1ba 0f00 	cmp.w	sl, #0
 80290f4:	f340 8099 	ble.w	802922a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80290f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80290fa:	1421      	asrs	r1, r4, #16
 80290fc:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029100:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029104:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029108:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802910c:	f100 80d0 	bmi.w	80292b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8029110:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029114:	4559      	cmp	r1, fp
 8029116:	f280 80cb 	bge.w	80292b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 802911a:	2800      	cmp	r0, #0
 802911c:	f2c0 80c8 	blt.w	80292b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8029120:	f103 3bff 	add.w	fp, r3, #4294967295
 8029124:	4558      	cmp	r0, fp
 8029126:	f280 80c3 	bge.w	80292b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 802912a:	fa0f fe8e 	sxth.w	lr, lr
 802912e:	fb00 110e 	mla	r1, r0, lr, r1
 8029132:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029136:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802913a:	8841      	ldrh	r1, [r0, #2]
 802913c:	f1bc 0f00 	cmp.w	ip, #0
 8029140:	d00b      	beq.n	802915a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8029142:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8029146:	3b01      	subs	r3, #1
 8029148:	005b      	lsls	r3, r3, #1
 802914a:	3302      	adds	r3, #2
 802914c:	eb00 0e03 	add.w	lr, r0, r3
 8029150:	5ac3      	ldrh	r3, [r0, r3]
 8029152:	9308      	str	r3, [sp, #32]
 8029154:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8029158:	9309      	str	r3, [sp, #36]	; 0x24
 802915a:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802915e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029162:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8029166:	ea40 000b 	orr.w	r0, r0, fp
 802916a:	fb12 f30c 	smulbb	r3, r2, ip
 802916e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029172:	10db      	asrs	r3, r3, #3
 8029174:	f1cc 0e10 	rsb	lr, ip, #16
 8029178:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802917c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029180:	ebae 0e02 	sub.w	lr, lr, r2
 8029184:	ea4b 0101 	orr.w	r1, fp, r1
 8029188:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802918c:	4351      	muls	r1, r2
 802918e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029190:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029194:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029198:	0410      	lsls	r0, r2, #16
 802919a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802919e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80291a2:	4310      	orrs	r0, r2
 80291a4:	9a08      	ldr	r2, [sp, #32]
 80291a6:	9908      	ldr	r1, [sp, #32]
 80291a8:	0412      	lsls	r2, r2, #16
 80291aa:	fb03 e000 	mla	r0, r3, r0, lr
 80291ae:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80291b2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80291b6:	ea42 020e 	orr.w	r2, r2, lr
 80291ba:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80291be:	fb03 0302 	mla	r3, r3, r2, r0
 80291c2:	0d5a      	lsrs	r2, r3, #21
 80291c4:	095b      	lsrs	r3, r3, #5
 80291c6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80291ca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80291ce:	4313      	orrs	r3, r2
 80291d0:	f8a9 3000 	strh.w	r3, [r9]
 80291d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80291d6:	441c      	add	r4, r3
 80291d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80291da:	f109 0902 	add.w	r9, r9, #2
 80291de:	441e      	add	r6, r3
 80291e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80291e4:	e784      	b.n	80290f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80291e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80291e8:	441c      	add	r4, r3
 80291ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80291ec:	3d01      	subs	r5, #1
 80291ee:	441e      	add	r6, r3
 80291f0:	3702      	adds	r7, #2
 80291f2:	e761      	b.n	80290b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80291f4:	d01d      	beq.n	8029232 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80291f6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80291f8:	1e6b      	subs	r3, r5, #1
 80291fa:	fb00 4003 	mla	r0, r0, r3, r4
 80291fe:	1400      	asrs	r0, r0, #16
 8029200:	f53f af74 	bmi.w	80290ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029204:	3901      	subs	r1, #1
 8029206:	4288      	cmp	r0, r1
 8029208:	f6bf af70 	bge.w	80290ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802920c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802920e:	fb01 6303 	mla	r3, r1, r3, r6
 8029212:	141b      	asrs	r3, r3, #16
 8029214:	f53f af6a 	bmi.w	80290ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029218:	3a01      	subs	r2, #1
 802921a:	4293      	cmp	r3, r2
 802921c:	f6bf af66 	bge.w	80290ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8029220:	46a9      	mov	r9, r5
 8029222:	46ba      	mov	sl, r7
 8029224:	f1b9 0f00 	cmp.w	r9, #0
 8029228:	dc5a      	bgt.n	80292e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802922a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802922e:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8029232:	9b07      	ldr	r3, [sp, #28]
 8029234:	2b00      	cmp	r3, #0
 8029236:	f340 80b8 	ble.w	80293aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802923a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802923e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029242:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029246:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029248:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802924c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029250:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029254:	eef0 6a48 	vmov.f32	s13, s16
 8029258:	ee69 7a27 	vmul.f32	s15, s18, s15
 802925c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029260:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029264:	ee16 4a90 	vmov	r4, s13
 8029268:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802926c:	eef0 6a68 	vmov.f32	s13, s17
 8029270:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029274:	ee18 2a10 	vmov	r2, s16
 8029278:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802927c:	fb92 f3f3 	sdiv	r3, r2, r3
 8029280:	ee18 2a90 	vmov	r2, s17
 8029284:	9323      	str	r3, [sp, #140]	; 0x8c
 8029286:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029288:	fb92 f3f3 	sdiv	r3, r2, r3
 802928c:	9324      	str	r3, [sp, #144]	; 0x90
 802928e:	9b07      	ldr	r3, [sp, #28]
 8029290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029292:	3b01      	subs	r3, #1
 8029294:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029298:	9307      	str	r3, [sp, #28]
 802929a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802929c:	ee16 6a90 	vmov	r6, s13
 80292a0:	bf14      	ite	ne
 80292a2:	461d      	movne	r5, r3
 80292a4:	4615      	moveq	r5, r2
 80292a6:	eef0 8a67 	vmov.f32	s17, s15
 80292aa:	eeb0 8a47 	vmov.f32	s16, s14
 80292ae:	e6f4      	b.n	802909a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80292b0:	f111 0b01 	adds.w	fp, r1, #1
 80292b4:	d48e      	bmi.n	80291d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80292b6:	45de      	cmp	lr, fp
 80292b8:	db8c      	blt.n	80291d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80292ba:	f110 0b01 	adds.w	fp, r0, #1
 80292be:	d489      	bmi.n	80291d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80292c0:	455b      	cmp	r3, fp
 80292c2:	db87      	blt.n	80291d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80292c4:	b21b      	sxth	r3, r3
 80292c6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80292ca:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80292ce:	9300      	str	r3, [sp, #0]
 80292d0:	4642      	mov	r2, r8
 80292d2:	fa0f f38e 	sxth.w	r3, lr
 80292d6:	4649      	mov	r1, r9
 80292d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80292da:	f7ff fe2b 	bl	8028f34 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80292de:	e779      	b.n	80291d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80292e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80292e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80292e6:	1420      	asrs	r0, r4, #16
 80292e8:	1431      	asrs	r1, r6, #16
 80292ea:	fb03 0101 	mla	r1, r3, r1, r0
 80292ee:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80292f2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80292f6:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80292fa:	8841      	ldrh	r1, [r0, #2]
 80292fc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029300:	f1be 0f00 	cmp.w	lr, #0
 8029304:	d00b      	beq.n	802931e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8029306:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802930a:	3b01      	subs	r3, #1
 802930c:	005b      	lsls	r3, r3, #1
 802930e:	3302      	adds	r3, #2
 8029310:	eb00 0b03 	add.w	fp, r0, r3
 8029314:	5ac3      	ldrh	r3, [r0, r3]
 8029316:	930a      	str	r3, [sp, #40]	; 0x28
 8029318:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802931c:	930b      	str	r3, [sp, #44]	; 0x2c
 802931e:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8029322:	fb12 f30e 	smulbb	r3, r2, lr
 8029326:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802932a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802932e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029332:	10db      	asrs	r3, r3, #3
 8029334:	ea40 000c 	orr.w	r0, r0, ip
 8029338:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802933c:	f1ce 0c10 	rsb	ip, lr, #16
 8029340:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029344:	ebac 0c02 	sub.w	ip, ip, r2
 8029348:	ea4b 0101 	orr.w	r1, fp, r1
 802934c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029350:	4351      	muls	r1, r2
 8029352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029354:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029358:	fb0c 1c00 	mla	ip, ip, r0, r1
 802935c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029360:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8029364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029366:	990a      	ldr	r1, [sp, #40]	; 0x28
 8029368:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802936c:	0412      	lsls	r2, r2, #16
 802936e:	ea4b 0000 	orr.w	r0, fp, r0
 8029372:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029376:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802937a:	fb03 c000 	mla	r0, r3, r0, ip
 802937e:	ea42 0b0b 	orr.w	fp, r2, fp
 8029382:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029386:	fb03 000b 	mla	r0, r3, fp, r0
 802938a:	0d43      	lsrs	r3, r0, #21
 802938c:	0940      	lsrs	r0, r0, #5
 802938e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029392:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029396:	4318      	orrs	r0, r3
 8029398:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802939a:	f82a 0b02 	strh.w	r0, [sl], #2
 802939e:	441c      	add	r4, r3
 80293a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80293a2:	f109 39ff 	add.w	r9, r9, #4294967295
 80293a6:	441e      	add	r6, r3
 80293a8:	e73c      	b.n	8029224 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80293aa:	b00f      	add	sp, #60	; 0x3c
 80293ac:	ecbd 8b08 	vpop	{d8-d11}
 80293b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080293b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80293b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293b8:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80293bc:	fb04 5603 	mla	r6, r4, r3, r5
 80293c0:	2c00      	cmp	r4, #0
 80293c2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80293c6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80293ca:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80293ce:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80293d2:	db36      	blt.n	8029442 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80293d4:	45a6      	cmp	lr, r4
 80293d6:	dd34      	ble.n	8029442 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80293d8:	2d00      	cmp	r5, #0
 80293da:	db30      	blt.n	802943e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80293dc:	42ab      	cmp	r3, r5
 80293de:	dd2e      	ble.n	802943e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80293e0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80293e4:	1c6e      	adds	r6, r5, #1
 80293e6:	d42f      	bmi.n	8029448 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80293e8:	42b3      	cmp	r3, r6
 80293ea:	dd2d      	ble.n	8029448 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80293ec:	b370      	cbz	r0, 802944c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80293ee:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80293f2:	3401      	adds	r4, #1
 80293f4:	d42e      	bmi.n	8029454 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80293f6:	45a6      	cmp	lr, r4
 80293f8:	dd2c      	ble.n	8029454 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80293fa:	b377      	cbz	r7, 802945a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 80293fc:	2d00      	cmp	r5, #0
 80293fe:	db27      	blt.n	8029450 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8029400:	42ab      	cmp	r3, r5
 8029402:	dd25      	ble.n	8029450 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8029404:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029408:	3501      	adds	r5, #1
 802940a:	d429      	bmi.n	8029460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 802940c:	42ab      	cmp	r3, r5
 802940e:	dd27      	ble.n	8029460 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8029410:	b340      	cbz	r0, 8029464 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8029412:	3301      	adds	r3, #1
 8029414:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8029418:	280f      	cmp	r0, #15
 802941a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802941e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8029422:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029426:	ea4f 6813 	mov.w	r8, r3, lsr #24
 802942a:	d801      	bhi.n	8029430 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 802942c:	2f0f      	cmp	r7, #15
 802942e:	d91b      	bls.n	8029468 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8029430:	4b8d      	ldr	r3, [pc, #564]	; (8029668 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8029432:	4a8e      	ldr	r2, [pc, #568]	; (802966c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8029434:	488e      	ldr	r0, [pc, #568]	; (8029670 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8029436:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802943a:	f004 fd09 	bl	802de50 <__assert_func>
 802943e:	2200      	movs	r2, #0
 8029440:	e7d0      	b.n	80293e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8029442:	2600      	movs	r6, #0
 8029444:	4632      	mov	r2, r6
 8029446:	e7d4      	b.n	80293f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8029448:	2600      	movs	r6, #0
 802944a:	e7d2      	b.n	80293f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 802944c:	4606      	mov	r6, r0
 802944e:	e7d0      	b.n	80293f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8029450:	2400      	movs	r4, #0
 8029452:	e7d9      	b.n	8029408 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8029454:	2300      	movs	r3, #0
 8029456:	461c      	mov	r4, r3
 8029458:	e7de      	b.n	8029418 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802945a:	463b      	mov	r3, r7
 802945c:	463c      	mov	r4, r7
 802945e:	e7db      	b.n	8029418 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029460:	2300      	movs	r3, #0
 8029462:	e7d9      	b.n	8029418 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029464:	4603      	mov	r3, r0
 8029466:	e7d7      	b.n	8029418 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8029468:	b280      	uxth	r0, r0
 802946a:	b2bf      	uxth	r7, r7
 802946c:	fb07 fe00 	mul.w	lr, r7, r0
 8029470:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8029474:	0100      	lsls	r0, r0, #4
 8029476:	eba0 0c0e 	sub.w	ip, r0, lr
 802947a:	b2bf      	uxth	r7, r7
 802947c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8029480:	fa1f fc8c 	uxth.w	ip, ip
 8029484:	1bed      	subs	r5, r5, r7
 8029486:	b2ad      	uxth	r5, r5
 8029488:	fb0a f00c 	mul.w	r0, sl, ip
 802948c:	fb0b 0005 	mla	r0, fp, r5, r0
 8029490:	fb07 0009 	mla	r0, r7, r9, r0
 8029494:	fb0e 0008 	mla	r0, lr, r8, r0
 8029498:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802949c:	9001      	str	r0, [sp, #4]
 802949e:	2800      	cmp	r0, #0
 80294a0:	f000 80de 	beq.w	8029660 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 80294a4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80294a8:	d018      	beq.n	80294dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 80294aa:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80294ae:	fb0b f000 	mul.w	r0, fp, r0
 80294b2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80294b6:	fb0b fb02 	mul.w	fp, fp, r2
 80294ba:	0a02      	lsrs	r2, r0, #8
 80294bc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80294c0:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80294c4:	4402      	add	r2, r0
 80294c6:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80294ca:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80294ce:	0a12      	lsrs	r2, r2, #8
 80294d0:	0a00      	lsrs	r0, r0, #8
 80294d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80294d6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80294da:	4302      	orrs	r2, r0
 80294dc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80294e0:	d01a      	beq.n	8029518 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 80294e2:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80294e6:	fb0a f000 	mul.w	r0, sl, r0
 80294ea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80294ee:	fb0a fa06 	mul.w	sl, sl, r6
 80294f2:	0a06      	lsrs	r6, r0, #8
 80294f4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80294f8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80294fc:	4406      	add	r6, r0
 80294fe:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8029502:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8029506:	0a36      	lsrs	r6, r6, #8
 8029508:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802950c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8029510:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029514:	ea46 060a 	orr.w	r6, r6, sl
 8029518:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802951c:	d01b      	beq.n	8029556 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 802951e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8029522:	fb09 fa0a 	mul.w	sl, r9, sl
 8029526:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802952a:	fb09 f004 	mul.w	r0, r9, r4
 802952e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8029532:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029536:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802953a:	f500 7980 	add.w	r9, r0, #256	; 0x100
 802953e:	4454      	add	r4, sl
 8029540:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8029544:	0a24      	lsrs	r4, r4, #8
 8029546:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802954a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802954e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029552:	ea44 0409 	orr.w	r4, r4, r9
 8029556:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802955a:	d01b      	beq.n	8029594 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 802955c:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8029560:	fb08 f909 	mul.w	r9, r8, r9
 8029564:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029568:	fb08 f003 	mul.w	r0, r8, r3
 802956c:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8029570:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029574:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8029578:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802957c:	444b      	add	r3, r9
 802957e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8029582:	0a1b      	lsrs	r3, r3, #8
 8029584:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029588:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802958c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8029590:	ea43 0308 	orr.w	r3, r3, r8
 8029594:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8029598:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802959c:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80295a0:	fb0c f808 	mul.w	r8, ip, r8
 80295a4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80295a8:	fb0c f606 	mul.w	r6, ip, r6
 80295ac:	fb05 8909 	mla	r9, r5, r9, r8
 80295b0:	fb05 6502 	mla	r5, r5, r2, r6
 80295b4:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80295b8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80295bc:	9a01      	ldr	r2, [sp, #4]
 80295be:	8808      	ldrh	r0, [r1, #0]
 80295c0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80295c4:	fb07 9908 	mla	r9, r7, r8, r9
 80295c8:	fb07 5704 	mla	r7, r7, r4, r5
 80295cc:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80295d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80295d4:	b2b6      	uxth	r6, r6
 80295d6:	fb0e 9808 	mla	r8, lr, r8, r9
 80295da:	fb0e 7e03 	mla	lr, lr, r3, r7
 80295de:	4372      	muls	r2, r6
 80295e0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80295e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80295e8:	1c53      	adds	r3, r2, #1
 80295ea:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80295ee:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80295f2:	ea48 0e0e 	orr.w	lr, r8, lr
 80295f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80295fa:	1205      	asrs	r5, r0, #8
 80295fc:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8029600:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8029604:	b2db      	uxtb	r3, r3
 8029606:	fb12 f206 	smulbb	r2, r2, r6
 802960a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802960e:	fb05 2503 	mla	r5, r5, r3, r2
 8029612:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8029616:	10c2      	asrs	r2, r0, #3
 8029618:	fa5f fe8e 	uxtb.w	lr, lr
 802961c:	00c0      	lsls	r0, r0, #3
 802961e:	fb14 f406 	smulbb	r4, r4, r6
 8029622:	b2c0      	uxtb	r0, r0
 8029624:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029628:	fb1e fe06 	smulbb	lr, lr, r6
 802962c:	fb02 4203 	mla	r2, r2, r3, r4
 8029630:	b2ad      	uxth	r5, r5
 8029632:	fb00 e303 	mla	r3, r0, r3, lr
 8029636:	b298      	uxth	r0, r3
 8029638:	b294      	uxth	r4, r2
 802963a:	1c6b      	adds	r3, r5, #1
 802963c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029640:	1c62      	adds	r2, r4, #1
 8029642:	1c43      	adds	r3, r0, #1
 8029644:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8029648:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802964c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029650:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029654:	0952      	lsrs	r2, r2, #5
 8029656:	432b      	orrs	r3, r5
 8029658:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802965c:	4313      	orrs	r3, r2
 802965e:	800b      	strh	r3, [r1, #0]
 8029660:	b003      	add	sp, #12
 8029662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029666:	bf00      	nop
 8029668:	08032b71 	.word	0x08032b71
 802966c:	0803313e 	.word	0x0803313e
 8029670:	08032bf5 	.word	0x08032bf5

08029674 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029678:	ed2d 8b08 	vpush	{d8-d11}
 802967c:	b09d      	sub	sp, #116	; 0x74
 802967e:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8029682:	9219      	str	r2, [sp, #100]	; 0x64
 8029684:	9307      	str	r3, [sp, #28]
 8029686:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8029688:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 802968c:	931a      	str	r3, [sp, #104]	; 0x68
 802968e:	9117      	str	r1, [sp, #92]	; 0x5c
 8029690:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8029694:	901b      	str	r0, [sp, #108]	; 0x6c
 8029696:	6850      	ldr	r0, [r2, #4]
 8029698:	6812      	ldr	r2, [r2, #0]
 802969a:	fb00 1303 	mla	r3, r0, r3, r1
 802969e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80296a2:	930a      	str	r3, [sp, #40]	; 0x28
 80296a4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80296a6:	681b      	ldr	r3, [r3, #0]
 80296a8:	9310      	str	r3, [sp, #64]	; 0x40
 80296aa:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80296ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80296b0:	eeb0 aa40 	vmov.f32	s20, s0
 80296b4:	eef0 9a60 	vmov.f32	s19, s1
 80296b8:	eeb0 9a41 	vmov.f32	s18, s2
 80296bc:	eeb0 8a62 	vmov.f32	s16, s5
 80296c0:	eef0 8a43 	vmov.f32	s17, s6
 80296c4:	eef0 ba44 	vmov.f32	s23, s8
 80296c8:	eeb0 ba64 	vmov.f32	s22, s9
 80296cc:	eef0 aa45 	vmov.f32	s21, s10
 80296d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80296d2:	2b00      	cmp	r3, #0
 80296d4:	dc03      	bgt.n	80296de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80296d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80296d8:	2b00      	cmp	r3, #0
 80296da:	f340 8375 	ble.w	8029dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 80296de:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80296e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80296e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80296e8:	1e48      	subs	r0, r1, #1
 80296ea:	1e57      	subs	r7, r2, #1
 80296ec:	9b07      	ldr	r3, [sp, #28]
 80296ee:	2b00      	cmp	r3, #0
 80296f0:	f340 818e 	ble.w	8029a10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80296f4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80296f8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80296fc:	d406      	bmi.n	802970c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80296fe:	4584      	cmp	ip, r0
 8029700:	da04      	bge.n	802970c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029702:	2b00      	cmp	r3, #0
 8029704:	db02      	blt.n	802970c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029706:	42bb      	cmp	r3, r7
 8029708:	f2c0 8183 	blt.w	8029a12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 802970c:	f11c 0c01 	adds.w	ip, ip, #1
 8029710:	f100 8173 	bmi.w	80299fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029714:	4561      	cmp	r1, ip
 8029716:	f2c0 8170 	blt.w	80299fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802971a:	3301      	adds	r3, #1
 802971c:	f100 816d 	bmi.w	80299fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029720:	429a      	cmp	r2, r3
 8029722:	f2c0 816a 	blt.w	80299fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8029726:	9b07      	ldr	r3, [sp, #28]
 8029728:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802972a:	9318      	str	r3, [sp, #96]	; 0x60
 802972c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802972e:	2b00      	cmp	r3, #0
 8029730:	f340 818c 	ble.w	8029a4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8029734:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8029736:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029738:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802973c:	689b      	ldr	r3, [r3, #8]
 802973e:	1422      	asrs	r2, r4, #16
 8029740:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029744:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029748:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802974c:	f100 81cd 	bmi.w	8029aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029750:	f103 38ff 	add.w	r8, r3, #4294967295
 8029754:	4542      	cmp	r2, r8
 8029756:	f280 81c8 	bge.w	8029aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802975a:	f1bc 0f00 	cmp.w	ip, #0
 802975e:	f2c0 81c4 	blt.w	8029aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8029762:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029766:	45c4      	cmp	ip, r8
 8029768:	f280 81bf 	bge.w	8029aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802976c:	b21b      	sxth	r3, r3
 802976e:	fb0c 2203 	mla	r2, ip, r3, r2
 8029772:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029774:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029778:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802977c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029780:	2800      	cmp	r0, #0
 8029782:	f000 81a9 	beq.w	8029ad8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8029786:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802978a:	950c      	str	r5, [sp, #48]	; 0x30
 802978c:	0e2d      	lsrs	r5, r5, #24
 802978e:	9513      	str	r5, [sp, #76]	; 0x4c
 8029790:	b181      	cbz	r1, 80297b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029792:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029796:	3b01      	subs	r3, #1
 8029798:	009b      	lsls	r3, r3, #2
 802979a:	3304      	adds	r3, #4
 802979c:	eb08 0c03 	add.w	ip, r8, r3
 80297a0:	f858 3003 	ldr.w	r3, [r8, r3]
 80297a4:	9308      	str	r3, [sp, #32]
 80297a6:	0e1b      	lsrs	r3, r3, #24
 80297a8:	9311      	str	r3, [sp, #68]	; 0x44
 80297aa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80297ae:	930d      	str	r3, [sp, #52]	; 0x34
 80297b0:	0e1b      	lsrs	r3, r3, #24
 80297b2:	9314      	str	r3, [sp, #80]	; 0x50
 80297b4:	b280      	uxth	r0, r0
 80297b6:	b289      	uxth	r1, r1
 80297b8:	fb00 f901 	mul.w	r9, r0, r1
 80297bc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80297c0:	0100      	lsls	r0, r0, #4
 80297c2:	eba0 0809 	sub.w	r8, r0, r9
 80297c6:	b289      	uxth	r1, r1
 80297c8:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80297cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80297ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80297d0:	fa1f f888 	uxth.w	r8, r8
 80297d4:	1a5b      	subs	r3, r3, r1
 80297d6:	b29b      	uxth	r3, r3
 80297d8:	fb08 f000 	mul.w	r0, r8, r0
 80297dc:	fb03 000e 	mla	r0, r3, lr, r0
 80297e0:	fb01 0005 	mla	r0, r1, r5, r0
 80297e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80297e6:	fb09 0005 	mla	r0, r9, r5, r0
 80297ea:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80297ee:	2800      	cmp	r0, #0
 80297f0:	f000 80fa 	beq.w	80299e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80297f4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80297f8:	d01b      	beq.n	8029832 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80297fa:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80297fe:	fb0e fa0a 	mul.w	sl, lr, sl
 8029802:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029806:	fb0e fe02 	mul.w	lr, lr, r2
 802980a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802980e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029812:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029816:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802981a:	4452      	add	r2, sl
 802981c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029820:	0a12      	lsrs	r2, r2, #8
 8029822:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029826:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802982a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802982e:	ea42 020c 	orr.w	r2, r2, ip
 8029832:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029834:	2dff      	cmp	r5, #255	; 0xff
 8029836:	d021      	beq.n	802987c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8029838:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802983a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802983e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029840:	fb05 fb0b 	mul.w	fp, r5, fp
 8029844:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029846:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802984a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802984c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029850:	fb05 fa0a 	mul.w	sl, r5, sl
 8029854:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029858:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802985c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029860:	44de      	add	lr, fp
 8029862:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029866:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802986a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802986e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029872:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029876:	ea4e 050a 	orr.w	r5, lr, sl
 802987a:	950c      	str	r5, [sp, #48]	; 0x30
 802987c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802987e:	2dff      	cmp	r5, #255	; 0xff
 8029880:	d021      	beq.n	80298c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8029882:	9d08      	ldr	r5, [sp, #32]
 8029884:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029888:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802988a:	fb05 fb0b 	mul.w	fp, r5, fp
 802988e:	9d08      	ldr	r5, [sp, #32]
 8029890:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029894:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029896:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802989a:	fb05 fa0a 	mul.w	sl, r5, sl
 802989e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80298a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80298a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80298aa:	44de      	add	lr, fp
 80298ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80298b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80298b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80298b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80298bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80298c0:	ea4e 050a 	orr.w	r5, lr, sl
 80298c4:	9508      	str	r5, [sp, #32]
 80298c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80298c8:	2dff      	cmp	r5, #255	; 0xff
 80298ca:	d021      	beq.n	8029910 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80298cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80298ce:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80298d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80298d4:	fb05 fb0b 	mul.w	fp, r5, fp
 80298d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80298da:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80298de:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80298e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80298e4:	fb05 fa0a 	mul.w	sl, r5, sl
 80298e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80298ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80298f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80298f4:	44de      	add	lr, fp
 80298f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80298fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80298fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029902:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029906:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802990a:	ea4e 050a 	orr.w	r5, lr, sl
 802990e:	950d      	str	r5, [sp, #52]	; 0x34
 8029910:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029912:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029916:	9d08      	ldr	r5, [sp, #32]
 8029918:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802991c:	fb08 fc0c 	mul.w	ip, r8, ip
 8029920:	fb03 cc0e 	mla	ip, r3, lr, ip
 8029924:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029928:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802992a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802992e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029934:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029938:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802993c:	fb08 f80e 	mul.w	r8, r8, lr
 8029940:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029944:	fb03 8202 	mla	r2, r3, r2, r8
 8029948:	9b08      	ldr	r3, [sp, #32]
 802994a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802994c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8029950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029952:	fb01 220a 	mla	r2, r1, sl, r2
 8029956:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802995a:	fb09 2901 	mla	r9, r9, r1, r2
 802995e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029960:	883b      	ldrh	r3, [r7, #0]
 8029962:	4342      	muls	r2, r0
 8029964:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029968:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802996c:	1c50      	adds	r0, r2, #1
 802996e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029972:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029976:	ea4c 0c09 	orr.w	ip, ip, r9
 802997a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802997e:	1219      	asrs	r1, r3, #8
 8029980:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029984:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029988:	b2c0      	uxtb	r0, r0
 802998a:	fb12 f205 	smulbb	r2, r2, r5
 802998e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029992:	fb01 2100 	mla	r1, r1, r0, r2
 8029996:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802999a:	10da      	asrs	r2, r3, #3
 802999c:	fa5f fc8c 	uxtb.w	ip, ip
 80299a0:	00db      	lsls	r3, r3, #3
 80299a2:	fb1c fc05 	smulbb	ip, ip, r5
 80299a6:	b2db      	uxtb	r3, r3
 80299a8:	b289      	uxth	r1, r1
 80299aa:	fb03 c300 	mla	r3, r3, r0, ip
 80299ae:	fa1f fc83 	uxth.w	ip, r3
 80299b2:	1c4b      	adds	r3, r1, #1
 80299b4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80299b8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80299bc:	fb1e fe05 	smulbb	lr, lr, r5
 80299c0:	f10c 0301 	add.w	r3, ip, #1
 80299c4:	fb02 e200 	mla	r2, r2, r0, lr
 80299c8:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80299cc:	b292      	uxth	r2, r2
 80299ce:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80299d2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80299d6:	430b      	orrs	r3, r1
 80299d8:	1c51      	adds	r1, r2, #1
 80299da:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80299de:	0952      	lsrs	r2, r2, #5
 80299e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80299e4:	4313      	orrs	r3, r2
 80299e6:	803b      	strh	r3, [r7, #0]
 80299e8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80299ea:	441c      	add	r4, r3
 80299ec:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80299ee:	441e      	add	r6, r3
 80299f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80299f2:	3b01      	subs	r3, #1
 80299f4:	3702      	adds	r7, #2
 80299f6:	9318      	str	r3, [sp, #96]	; 0x60
 80299f8:	e698      	b.n	802972c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80299fa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80299fc:	441c      	add	r4, r3
 80299fe:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029a00:	441e      	add	r6, r3
 8029a02:	9b07      	ldr	r3, [sp, #28]
 8029a04:	3b01      	subs	r3, #1
 8029a06:	9307      	str	r3, [sp, #28]
 8029a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029a0a:	3302      	adds	r3, #2
 8029a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8029a0e:	e66d      	b.n	80296ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8029a10:	d023      	beq.n	8029a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8029a12:	9b07      	ldr	r3, [sp, #28]
 8029a14:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8029a16:	3b01      	subs	r3, #1
 8029a18:	fb00 4003 	mla	r0, r0, r3, r4
 8029a1c:	1400      	asrs	r0, r0, #16
 8029a1e:	f53f ae82 	bmi.w	8029726 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029a22:	3901      	subs	r1, #1
 8029a24:	4288      	cmp	r0, r1
 8029a26:	f6bf ae7e 	bge.w	8029726 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029a2a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8029a2c:	fb01 6303 	mla	r3, r1, r3, r6
 8029a30:	141b      	asrs	r3, r3, #16
 8029a32:	f53f ae78 	bmi.w	8029726 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029a36:	3a01      	subs	r2, #1
 8029a38:	4293      	cmp	r3, r2
 8029a3a:	f6bf ae74 	bge.w	8029726 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029a3e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029a42:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8029a46:	f1bb 0f00 	cmp.w	fp, #0
 8029a4a:	dc6c      	bgt.n	8029b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029a4c:	9b07      	ldr	r3, [sp, #28]
 8029a4e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029a54:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029a58:	930a      	str	r3, [sp, #40]	; 0x28
 8029a5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029a5c:	2b00      	cmp	r3, #0
 8029a5e:	f340 81b3 	ble.w	8029dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8029a62:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029a66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029a6a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029a6e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029a70:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029a74:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029a78:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029a7c:	eef0 6a48 	vmov.f32	s13, s16
 8029a80:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029a84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029a88:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029a8c:	ee16 4a90 	vmov	r4, s13
 8029a90:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029a94:	eef0 6a68 	vmov.f32	s13, s17
 8029a98:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029a9c:	ee18 2a10 	vmov	r2, s16
 8029aa0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029aa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8029aa8:	ee18 2a90 	vmov	r2, s17
 8029aac:	9331      	str	r3, [sp, #196]	; 0xc4
 8029aae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029ab0:	fb92 f3f3 	sdiv	r3, r2, r3
 8029ab4:	9332      	str	r3, [sp, #200]	; 0xc8
 8029ab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029ab8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8029aba:	3b01      	subs	r3, #1
 8029abc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029ac0:	9317      	str	r3, [sp, #92]	; 0x5c
 8029ac2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029ac4:	bf08      	it	eq
 8029ac6:	4613      	moveq	r3, r2
 8029ac8:	ee16 6a90 	vmov	r6, s13
 8029acc:	9307      	str	r3, [sp, #28]
 8029ace:	eef0 8a67 	vmov.f32	s17, s15
 8029ad2:	eeb0 8a47 	vmov.f32	s16, s14
 8029ad6:	e5fb      	b.n	80296d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029ad8:	2900      	cmp	r1, #0
 8029ada:	f43f ae6b 	beq.w	80297b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029ade:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029ae2:	9308      	str	r3, [sp, #32]
 8029ae4:	0e1b      	lsrs	r3, r3, #24
 8029ae6:	9311      	str	r3, [sp, #68]	; 0x44
 8029ae8:	e664      	b.n	80297b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029aea:	f112 0801 	adds.w	r8, r2, #1
 8029aee:	f53f af7b 	bmi.w	80299e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029af2:	4543      	cmp	r3, r8
 8029af4:	f6ff af78 	blt.w	80299e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029af8:	f11c 0801 	adds.w	r8, ip, #1
 8029afc:	f53f af74 	bmi.w	80299e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029b00:	45c6      	cmp	lr, r8
 8029b02:	f6ff af71 	blt.w	80299e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029b06:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8029b08:	9201      	str	r2, [sp, #4]
 8029b0a:	fa0f f28e 	sxth.w	r2, lr
 8029b0e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8029b12:	e9cd c002 	strd	ip, r0, [sp, #8]
 8029b16:	9200      	str	r2, [sp, #0]
 8029b18:	b21b      	sxth	r3, r3
 8029b1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029b1c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029b1e:	4639      	mov	r1, r7
 8029b20:	f7ff fc48 	bl	80293b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8029b24:	e760      	b.n	80299e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029b26:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029b28:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029b2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029b2e:	1427      	asrs	r7, r4, #16
 8029b30:	1433      	asrs	r3, r6, #16
 8029b32:	fb01 7303 	mla	r3, r1, r3, r7
 8029b36:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029b3a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029b3e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029b42:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029b46:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029b4a:	2a00      	cmp	r2, #0
 8029b4c:	f000 8133 	beq.w	8029db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8029b50:	687d      	ldr	r5, [r7, #4]
 8029b52:	950e      	str	r5, [sp, #56]	; 0x38
 8029b54:	0e2d      	lsrs	r5, r5, #24
 8029b56:	9515      	str	r5, [sp, #84]	; 0x54
 8029b58:	b178      	cbz	r0, 8029b7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029b5a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8029b5e:	3901      	subs	r1, #1
 8029b60:	0089      	lsls	r1, r1, #2
 8029b62:	3104      	adds	r1, #4
 8029b64:	eb07 0e01 	add.w	lr, r7, r1
 8029b68:	5879      	ldr	r1, [r7, r1]
 8029b6a:	9109      	str	r1, [sp, #36]	; 0x24
 8029b6c:	0e09      	lsrs	r1, r1, #24
 8029b6e:	9112      	str	r1, [sp, #72]	; 0x48
 8029b70:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029b74:	910f      	str	r1, [sp, #60]	; 0x3c
 8029b76:	0e09      	lsrs	r1, r1, #24
 8029b78:	9116      	str	r1, [sp, #88]	; 0x58
 8029b7a:	b292      	uxth	r2, r2
 8029b7c:	b280      	uxth	r0, r0
 8029b7e:	fb02 f800 	mul.w	r8, r2, r0
 8029b82:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029b86:	0112      	lsls	r2, r2, #4
 8029b88:	eba2 0e08 	sub.w	lr, r2, r8
 8029b8c:	b280      	uxth	r0, r0
 8029b8e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8029b92:	9915      	ldr	r1, [sp, #84]	; 0x54
 8029b94:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029b96:	fa1f fe8e 	uxth.w	lr, lr
 8029b9a:	1a12      	subs	r2, r2, r0
 8029b9c:	b292      	uxth	r2, r2
 8029b9e:	fb0e f101 	mul.w	r1, lr, r1
 8029ba2:	fb02 110c 	mla	r1, r2, ip, r1
 8029ba6:	fb00 1105 	mla	r1, r0, r5, r1
 8029baa:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029bac:	fb08 1105 	mla	r1, r8, r5, r1
 8029bb0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029bb4:	2900      	cmp	r1, #0
 8029bb6:	f000 80f5 	beq.w	8029da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029bba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029bbe:	d019      	beq.n	8029bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8029bc0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029bc4:	fb0c fa0a 	mul.w	sl, ip, sl
 8029bc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029bcc:	fb0c fc03 	mul.w	ip, ip, r3
 8029bd0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029bd4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029bd8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029bdc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029be0:	4453      	add	r3, sl
 8029be2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029be6:	0a1b      	lsrs	r3, r3, #8
 8029be8:	0a3f      	lsrs	r7, r7, #8
 8029bea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029bee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029bf2:	433b      	orrs	r3, r7
 8029bf4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029bf6:	2dff      	cmp	r5, #255	; 0xff
 8029bf8:	d020      	beq.n	8029c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8029bfa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029bfc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029c00:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029c02:	436f      	muls	r7, r5
 8029c04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029c06:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029c0a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029c0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029c10:	fb05 fa0a 	mul.w	sl, r5, sl
 8029c14:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029c18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c1c:	44bc      	add	ip, r7
 8029c1e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029c22:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029c26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029c2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029c36:	ea4c 050a 	orr.w	r5, ip, sl
 8029c3a:	950e      	str	r5, [sp, #56]	; 0x38
 8029c3c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029c3e:	2dff      	cmp	r5, #255	; 0xff
 8029c40:	d020      	beq.n	8029c84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8029c42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029c44:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029c48:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029c4a:	436f      	muls	r7, r5
 8029c4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029c4e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029c52:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029c54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029c58:	fb05 fa0a 	mul.w	sl, r5, sl
 8029c5c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029c60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c64:	44bc      	add	ip, r7
 8029c66:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029c6a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029c6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029c72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c76:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029c7e:	ea4c 050a 	orr.w	r5, ip, sl
 8029c82:	9509      	str	r5, [sp, #36]	; 0x24
 8029c84:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029c86:	2dff      	cmp	r5, #255	; 0xff
 8029c88:	d020      	beq.n	8029ccc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8029c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029c8c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029c90:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029c92:	436f      	muls	r7, r5
 8029c94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029c96:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029c9a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029c9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029ca0:	fb05 fa0a 	mul.w	sl, r5, sl
 8029ca4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029ca8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029cac:	44bc      	add	ip, r7
 8029cae:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029cb2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029cb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029cba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029cbe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029cc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029cc6:	ea4c 050a 	orr.w	r5, ip, sl
 8029cca:	950f      	str	r5, [sp, #60]	; 0x3c
 8029ccc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029cce:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029cd2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029cd4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029cd8:	fb0e f707 	mul.w	r7, lr, r7
 8029cdc:	fb02 770c 	mla	r7, r2, ip, r7
 8029ce0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029ce4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029ce6:	fb00 770c 	mla	r7, r0, ip, r7
 8029cea:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029cee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029cf0:	fb08 770c 	mla	r7, r8, ip, r7
 8029cf4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029cf8:	fb0e fe0c 	mul.w	lr, lr, ip
 8029cfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029d00:	fb02 e303 	mla	r3, r2, r3, lr
 8029d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029d06:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029d08:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8029d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029d0e:	fb00 330a 	mla	r3, r0, sl, r3
 8029d12:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8029d16:	fb08 3c0c 	mla	ip, r8, ip, r3
 8029d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029d1c:	f8b9 0000 	ldrh.w	r0, [r9]
 8029d20:	4359      	muls	r1, r3
 8029d22:	0a3f      	lsrs	r7, r7, #8
 8029d24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d28:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029d2c:	1c4b      	adds	r3, r1, #1
 8029d2e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029d32:	ea47 070c 	orr.w	r7, r7, ip
 8029d36:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029d3a:	1202      	asrs	r2, r0, #8
 8029d3c:	0c3b      	lsrs	r3, r7, #16
 8029d3e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029d42:	b2c9      	uxtb	r1, r1
 8029d44:	fb13 f305 	smulbb	r3, r3, r5
 8029d48:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8029d4c:	fb02 3201 	mla	r2, r2, r1, r3
 8029d50:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029d54:	10c3      	asrs	r3, r0, #3
 8029d56:	b2ff      	uxtb	r7, r7
 8029d58:	00c0      	lsls	r0, r0, #3
 8029d5a:	b2c0      	uxtb	r0, r0
 8029d5c:	fb17 f705 	smulbb	r7, r7, r5
 8029d60:	fb00 7001 	mla	r0, r0, r1, r7
 8029d64:	b292      	uxth	r2, r2
 8029d66:	fb1c fc05 	smulbb	ip, ip, r5
 8029d6a:	b280      	uxth	r0, r0
 8029d6c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8029d70:	fb03 c301 	mla	r3, r3, r1, ip
 8029d74:	1c51      	adds	r1, r2, #1
 8029d76:	f100 0c01 	add.w	ip, r0, #1
 8029d7a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029d7e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8029d82:	b29b      	uxth	r3, r3
 8029d84:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029d88:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8029d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8029d90:	f103 0c01 	add.w	ip, r3, #1
 8029d94:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029d98:	095b      	lsrs	r3, r3, #5
 8029d9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029d9e:	431a      	orrs	r2, r3
 8029da0:	f8a9 2000 	strh.w	r2, [r9]
 8029da4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029da6:	441c      	add	r4, r3
 8029da8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8029daa:	f109 0902 	add.w	r9, r9, #2
 8029dae:	441e      	add	r6, r3
 8029db0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029db4:	e647      	b.n	8029a46 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8029db6:	2800      	cmp	r0, #0
 8029db8:	f43f aedf 	beq.w	8029b7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029dbc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8029dc0:	9109      	str	r1, [sp, #36]	; 0x24
 8029dc2:	0e09      	lsrs	r1, r1, #24
 8029dc4:	9112      	str	r1, [sp, #72]	; 0x48
 8029dc6:	e6d8      	b.n	8029b7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029dc8:	b01d      	add	sp, #116	; 0x74
 8029dca:	ecbd 8b08 	vpop	{d8-d11}
 8029dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08029dd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8029dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029dd8:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8029ddc:	fb04 5603 	mla	r6, r4, r3, r5
 8029de0:	2c00      	cmp	r4, #0
 8029de2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8029de6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8029dea:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8029dee:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8029df2:	db37      	blt.n	8029e64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029df4:	45a6      	cmp	lr, r4
 8029df6:	dd35      	ble.n	8029e64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029df8:	2d00      	cmp	r5, #0
 8029dfa:	db31      	blt.n	8029e60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029dfc:	42ab      	cmp	r3, r5
 8029dfe:	dd2f      	ble.n	8029e60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029e00:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8029e04:	1c6e      	adds	r6, r5, #1
 8029e06:	d430      	bmi.n	8029e6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029e08:	42b3      	cmp	r3, r6
 8029e0a:	dd2e      	ble.n	8029e6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029e0c:	b378      	cbz	r0, 8029e6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8029e0e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8029e12:	3401      	adds	r4, #1
 8029e14:	d42f      	bmi.n	8029e76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029e16:	45a6      	cmp	lr, r4
 8029e18:	dd2d      	ble.n	8029e76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029e1a:	b37f      	cbz	r7, 8029e7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8029e1c:	2d00      	cmp	r5, #0
 8029e1e:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 8029e22:	db26      	blt.n	8029e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8029e24:	42ab      	cmp	r3, r5
 8029e26:	dd24      	ble.n	8029e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8029e28:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029e2c:	3501      	adds	r5, #1
 8029e2e:	d428      	bmi.n	8029e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8029e30:	42ab      	cmp	r3, r5
 8029e32:	dd26      	ble.n	8029e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8029e34:	b338      	cbz	r0, 8029e86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 8029e36:	f8de 3004 	ldr.w	r3, [lr, #4]
 8029e3a:	280f      	cmp	r0, #15
 8029e3c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8029e40:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8029e44:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029e48:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8029e4c:	d801      	bhi.n	8029e52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8029e4e:	2f0f      	cmp	r7, #15
 8029e50:	d91b      	bls.n	8029e8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8029e52:	4b87      	ldr	r3, [pc, #540]	; (802a070 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8029e54:	4a87      	ldr	r2, [pc, #540]	; (802a074 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8029e56:	4888      	ldr	r0, [pc, #544]	; (802a078 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8029e58:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8029e5c:	f003 fff8 	bl	802de50 <__assert_func>
 8029e60:	2200      	movs	r2, #0
 8029e62:	e7cf      	b.n	8029e04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8029e64:	2600      	movs	r6, #0
 8029e66:	4632      	mov	r2, r6
 8029e68:	e7d3      	b.n	8029e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029e6a:	2600      	movs	r6, #0
 8029e6c:	e7d1      	b.n	8029e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029e6e:	4606      	mov	r6, r0
 8029e70:	e7cf      	b.n	8029e12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029e72:	2400      	movs	r4, #0
 8029e74:	e7da      	b.n	8029e2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8029e76:	2300      	movs	r3, #0
 8029e78:	461c      	mov	r4, r3
 8029e7a:	e7de      	b.n	8029e3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029e7c:	463b      	mov	r3, r7
 8029e7e:	463c      	mov	r4, r7
 8029e80:	e7db      	b.n	8029e3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029e82:	2300      	movs	r3, #0
 8029e84:	e7d9      	b.n	8029e3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029e86:	4603      	mov	r3, r0
 8029e88:	e7d7      	b.n	8029e3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029e8a:	b280      	uxth	r0, r0
 8029e8c:	b2bf      	uxth	r7, r7
 8029e8e:	fb07 fe00 	mul.w	lr, r7, r0
 8029e92:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8029e96:	0100      	lsls	r0, r0, #4
 8029e98:	eba0 0c0e 	sub.w	ip, r0, lr
 8029e9c:	b2bf      	uxth	r7, r7
 8029e9e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8029ea2:	fa1f fc8c 	uxth.w	ip, ip
 8029ea6:	1bed      	subs	r5, r5, r7
 8029ea8:	b2ad      	uxth	r5, r5
 8029eaa:	fb0c f00a 	mul.w	r0, ip, sl
 8029eae:	fb0b 0005 	mla	r0, fp, r5, r0
 8029eb2:	fb07 0009 	mla	r0, r7, r9, r0
 8029eb6:	fb0e 0008 	mla	r0, lr, r8, r0
 8029eba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029ebe:	9001      	str	r0, [sp, #4]
 8029ec0:	2800      	cmp	r0, #0
 8029ec2:	f000 80d1 	beq.w	802a068 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8029ec6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8029eca:	d018      	beq.n	8029efe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8029ecc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8029ed0:	fb0b f000 	mul.w	r0, fp, r0
 8029ed4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029ed8:	fb0b fb02 	mul.w	fp, fp, r2
 8029edc:	0a02      	lsrs	r2, r0, #8
 8029ede:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029ee2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029ee6:	4402      	add	r2, r0
 8029ee8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8029eec:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029ef0:	0a12      	lsrs	r2, r2, #8
 8029ef2:	0a00      	lsrs	r0, r0, #8
 8029ef4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029ef8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8029efc:	4302      	orrs	r2, r0
 8029efe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8029f02:	d01a      	beq.n	8029f3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8029f04:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8029f08:	fb0a f000 	mul.w	r0, sl, r0
 8029f0c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8029f10:	fb0a fa06 	mul.w	sl, sl, r6
 8029f14:	0a06      	lsrs	r6, r0, #8
 8029f16:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8029f1a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029f1e:	4406      	add	r6, r0
 8029f20:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8029f24:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8029f28:	0a36      	lsrs	r6, r6, #8
 8029f2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029f2e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8029f32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029f36:	ea46 060a 	orr.w	r6, r6, sl
 8029f3a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8029f3e:	d01b      	beq.n	8029f78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8029f40:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8029f44:	fb09 fa0a 	mul.w	sl, r9, sl
 8029f48:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029f4c:	fb09 f004 	mul.w	r0, r9, r4
 8029f50:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8029f54:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029f58:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029f5c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8029f60:	4454      	add	r4, sl
 8029f62:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8029f66:	0a24      	lsrs	r4, r4, #8
 8029f68:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029f6c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029f70:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029f74:	ea44 0409 	orr.w	r4, r4, r9
 8029f78:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029f7c:	d01b      	beq.n	8029fb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8029f7e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8029f82:	fb08 f909 	mul.w	r9, r8, r9
 8029f86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029f8a:	fb08 f003 	mul.w	r0, r8, r3
 8029f8e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8029f92:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029f96:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8029f9a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8029f9e:	444b      	add	r3, r9
 8029fa0:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8029fa4:	0a1b      	lsrs	r3, r3, #8
 8029fa6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029faa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029fae:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8029fb2:	ea43 0308 	orr.w	r3, r3, r8
 8029fb6:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8029fba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8029fbe:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8029fc2:	fb0c f808 	mul.w	r8, ip, r8
 8029fc6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029fca:	fb0c f606 	mul.w	r6, ip, r6
 8029fce:	fb05 8909 	mla	r9, r5, r9, r8
 8029fd2:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8029fd6:	fb05 6502 	mla	r5, r5, r2, r6
 8029fda:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029fde:	fb07 9908 	mla	r9, r7, r8, r9
 8029fe2:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8029fe6:	fb07 5704 	mla	r7, r7, r4, r5
 8029fea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029fee:	8808      	ldrh	r0, [r1, #0]
 8029ff0:	fb0e 9808 	mla	r8, lr, r8, r9
 8029ff4:	fb0e 7e03 	mla	lr, lr, r3, r7
 8029ff8:	9b01      	ldr	r3, [sp, #4]
 8029ffa:	43da      	mvns	r2, r3
 8029ffc:	1203      	asrs	r3, r0, #8
 8029ffe:	b2d2      	uxtb	r2, r2
 802a000:	10c4      	asrs	r4, r0, #3
 802a002:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a006:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a00a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802a00e:	00c0      	lsls	r0, r0, #3
 802a010:	4353      	muls	r3, r2
 802a012:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802a016:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802a01a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802a01e:	b2c0      	uxtb	r0, r0
 802a020:	ea48 0e0e 	orr.w	lr, r8, lr
 802a024:	4354      	muls	r4, r2
 802a026:	4350      	muls	r0, r2
 802a028:	1c5a      	adds	r2, r3, #1
 802a02a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a02e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802a032:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a036:	1c62      	adds	r2, r4, #1
 802a038:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802a03c:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802a040:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802a044:	021b      	lsls	r3, r3, #8
 802a046:	00d2      	lsls	r2, r2, #3
 802a048:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a04c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a050:	4313      	orrs	r3, r2
 802a052:	1c42      	adds	r2, r0, #1
 802a054:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a058:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 802a05c:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 802a060:	ea4e 0e03 	orr.w	lr, lr, r3
 802a064:	f8a1 e000 	strh.w	lr, [r1]
 802a068:	b003      	add	sp, #12
 802a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a06e:	bf00      	nop
 802a070:	08032b71 	.word	0x08032b71
 802a074:	0803313e 	.word	0x0803313e
 802a078:	08032bf5 	.word	0x08032bf5

0802a07c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a080:	ed2d 8b08 	vpush	{d8-d11}
 802a084:	b09b      	sub	sp, #108	; 0x6c
 802a086:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 802a08a:	9218      	str	r2, [sp, #96]	; 0x60
 802a08c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802a08e:	9116      	str	r1, [sp, #88]	; 0x58
 802a090:	9307      	str	r3, [sp, #28]
 802a092:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802a096:	9019      	str	r0, [sp, #100]	; 0x64
 802a098:	6850      	ldr	r0, [r2, #4]
 802a09a:	6812      	ldr	r2, [r2, #0]
 802a09c:	fb00 1303 	mla	r3, r0, r3, r1
 802a0a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a0a4:	930a      	str	r3, [sp, #40]	; 0x28
 802a0a6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a0a8:	681b      	ldr	r3, [r3, #0]
 802a0aa:	930f      	str	r3, [sp, #60]	; 0x3c
 802a0ac:	eeb0 aa40 	vmov.f32	s20, s0
 802a0b0:	eef0 9a60 	vmov.f32	s19, s1
 802a0b4:	eeb0 9a41 	vmov.f32	s18, s2
 802a0b8:	eeb0 8a62 	vmov.f32	s16, s5
 802a0bc:	eef0 8a43 	vmov.f32	s17, s6
 802a0c0:	eef0 ba44 	vmov.f32	s23, s8
 802a0c4:	eeb0 ba64 	vmov.f32	s22, s9
 802a0c8:	eef0 aa45 	vmov.f32	s21, s10
 802a0cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a0ce:	2b00      	cmp	r3, #0
 802a0d0:	dc03      	bgt.n	802a0da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802a0d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a0d4:	2b00      	cmp	r3, #0
 802a0d6:	f340 8386 	ble.w	802a7e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802a0da:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a0dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a0e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a0e4:	1e48      	subs	r0, r1, #1
 802a0e6:	1e57      	subs	r7, r2, #1
 802a0e8:	9b07      	ldr	r3, [sp, #28]
 802a0ea:	2b00      	cmp	r3, #0
 802a0ec:	f340 8166 	ble.w	802a3bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802a0f0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a0f4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a0f8:	d406      	bmi.n	802a108 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a0fa:	4584      	cmp	ip, r0
 802a0fc:	da04      	bge.n	802a108 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a0fe:	2b00      	cmp	r3, #0
 802a100:	db02      	blt.n	802a108 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802a102:	42bb      	cmp	r3, r7
 802a104:	f2c0 815b 	blt.w	802a3be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802a108:	f11c 0c01 	adds.w	ip, ip, #1
 802a10c:	f100 814b 	bmi.w	802a3a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a110:	4561      	cmp	r1, ip
 802a112:	f2c0 8148 	blt.w	802a3a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a116:	3301      	adds	r3, #1
 802a118:	f100 8145 	bmi.w	802a3a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a11c:	429a      	cmp	r2, r3
 802a11e:	f2c0 8142 	blt.w	802a3a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802a122:	9b07      	ldr	r3, [sp, #28]
 802a124:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802a126:	9317      	str	r3, [sp, #92]	; 0x5c
 802a128:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a12a:	2b00      	cmp	r3, #0
 802a12c:	f340 8165 	ble.w	802a3fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802a130:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802a132:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a134:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a138:	689b      	ldr	r3, [r3, #8]
 802a13a:	1422      	asrs	r2, r4, #16
 802a13c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a140:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a144:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a148:	f100 81d5 	bmi.w	802a4f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a14c:	f103 38ff 	add.w	r8, r3, #4294967295
 802a150:	4542      	cmp	r2, r8
 802a152:	f280 81d0 	bge.w	802a4f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a156:	f1bc 0f00 	cmp.w	ip, #0
 802a15a:	f2c0 81cc 	blt.w	802a4f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a15e:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a162:	45c4      	cmp	ip, r8
 802a164:	f280 81c7 	bge.w	802a4f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802a168:	b21b      	sxth	r3, r3
 802a16a:	fb0c 2203 	mla	r2, ip, r3, r2
 802a16e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a170:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802a174:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802a178:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802a17c:	2900      	cmp	r1, #0
 802a17e:	f000 8182 	beq.w	802a486 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802a182:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802a186:	950b      	str	r5, [sp, #44]	; 0x2c
 802a188:	0e2d      	lsrs	r5, r5, #24
 802a18a:	9512      	str	r5, [sp, #72]	; 0x48
 802a18c:	b180      	cbz	r0, 802a1b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a18e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802a192:	3b01      	subs	r3, #1
 802a194:	009b      	lsls	r3, r3, #2
 802a196:	3304      	adds	r3, #4
 802a198:	eb08 0c03 	add.w	ip, r8, r3
 802a19c:	f858 3003 	ldr.w	r3, [r8, r3]
 802a1a0:	9308      	str	r3, [sp, #32]
 802a1a2:	0e1b      	lsrs	r3, r3, #24
 802a1a4:	9310      	str	r3, [sp, #64]	; 0x40
 802a1a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802a1aa:	930c      	str	r3, [sp, #48]	; 0x30
 802a1ac:	0e1b      	lsrs	r3, r3, #24
 802a1ae:	9313      	str	r3, [sp, #76]	; 0x4c
 802a1b0:	b289      	uxth	r1, r1
 802a1b2:	b280      	uxth	r0, r0
 802a1b4:	fb01 f900 	mul.w	r9, r1, r0
 802a1b8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a1bc:	0109      	lsls	r1, r1, #4
 802a1be:	eba1 0809 	sub.w	r8, r1, r9
 802a1c2:	b280      	uxth	r0, r0
 802a1c4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802a1c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a1ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a1cc:	fa1f f888 	uxth.w	r8, r8
 802a1d0:	1a09      	subs	r1, r1, r0
 802a1d2:	b289      	uxth	r1, r1
 802a1d4:	fb08 f303 	mul.w	r3, r8, r3
 802a1d8:	fb01 330e 	mla	r3, r1, lr, r3
 802a1dc:	fb00 3305 	mla	r3, r0, r5, r3
 802a1e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a1e2:	fb09 3305 	mla	r3, r9, r5, r3
 802a1e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a1ea:	2b00      	cmp	r3, #0
 802a1ec:	f000 80d2 	beq.w	802a394 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a1f0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802a1f4:	d01b      	beq.n	802a22e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802a1f6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802a1fa:	fb0e fa0a 	mul.w	sl, lr, sl
 802a1fe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a202:	fb0e fe02 	mul.w	lr, lr, r2
 802a206:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802a20a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a20e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a212:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802a216:	4452      	add	r2, sl
 802a218:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a21c:	0a12      	lsrs	r2, r2, #8
 802a21e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a222:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a226:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a22a:	ea42 020c 	orr.w	r2, r2, ip
 802a22e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a230:	2dff      	cmp	r5, #255	; 0xff
 802a232:	d021      	beq.n	802a278 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802a234:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a236:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a23a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a23c:	fb05 fb0b 	mul.w	fp, r5, fp
 802a240:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a242:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a246:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a248:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a24c:	fb05 fa0a 	mul.w	sl, r5, sl
 802a250:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a254:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a258:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a25c:	44de      	add	lr, fp
 802a25e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a262:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a266:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a26a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a26e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a272:	ea4e 050a 	orr.w	r5, lr, sl
 802a276:	950b      	str	r5, [sp, #44]	; 0x2c
 802a278:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a27a:	2dff      	cmp	r5, #255	; 0xff
 802a27c:	d021      	beq.n	802a2c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802a27e:	9d08      	ldr	r5, [sp, #32]
 802a280:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a284:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a286:	fb05 fb0b 	mul.w	fp, r5, fp
 802a28a:	9d08      	ldr	r5, [sp, #32]
 802a28c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a290:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a292:	fb05 fa0e 	mul.w	sl, r5, lr
 802a296:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a29a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a29e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a2a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a2a6:	44de      	add	lr, fp
 802a2a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a2ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a2b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a2b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a2b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a2bc:	ea4e 050a 	orr.w	r5, lr, sl
 802a2c0:	9508      	str	r5, [sp, #32]
 802a2c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a2c4:	2dff      	cmp	r5, #255	; 0xff
 802a2c6:	d021      	beq.n	802a30c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802a2c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a2ca:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a2ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a2d0:	fb05 fb0b 	mul.w	fp, r5, fp
 802a2d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a2d6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a2da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a2dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a2e0:	fb05 fa0a 	mul.w	sl, r5, sl
 802a2e4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a2e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a2ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a2f0:	44de      	add	lr, fp
 802a2f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a2f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a2fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a2fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a302:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a306:	ea4e 050a 	orr.w	r5, lr, sl
 802a30a:	950c      	str	r5, [sp, #48]	; 0x30
 802a30c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a30e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a312:	9d08      	ldr	r5, [sp, #32]
 802a314:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802a318:	fb08 fc0c 	mul.w	ip, r8, ip
 802a31c:	fb01 cc0e 	mla	ip, r1, lr, ip
 802a320:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a324:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a326:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a32a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a32e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a330:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a334:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a338:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a33c:	fb08 f80e 	mul.w	r8, r8, lr
 802a340:	fb01 8202 	mla	r2, r1, r2, r8
 802a344:	9908      	ldr	r1, [sp, #32]
 802a346:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a34a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a34c:	fb00 220a 	mla	r2, r0, sl, r2
 802a350:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802a354:	fb09 2900 	mla	r9, r9, r0, r2
 802a358:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a35c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a360:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a364:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a368:	ea4c 0c09 	orr.w	ip, ip, r9
 802a36c:	2bff      	cmp	r3, #255	; 0xff
 802a36e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802a372:	f040 8091 	bne.w	802a498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a376:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802a37a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802a37e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a382:	f022 0207 	bic.w	r2, r2, #7
 802a386:	431a      	orrs	r2, r3
 802a388:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a38c:	ea4c 0c02 	orr.w	ip, ip, r2
 802a390:	f8a7 c000 	strh.w	ip, [r7]
 802a394:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a396:	441c      	add	r4, r3
 802a398:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a39a:	441e      	add	r6, r3
 802a39c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a39e:	3b01      	subs	r3, #1
 802a3a0:	3702      	adds	r7, #2
 802a3a2:	9317      	str	r3, [sp, #92]	; 0x5c
 802a3a4:	e6c0      	b.n	802a128 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802a3a6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a3a8:	441c      	add	r4, r3
 802a3aa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a3ac:	441e      	add	r6, r3
 802a3ae:	9b07      	ldr	r3, [sp, #28]
 802a3b0:	3b01      	subs	r3, #1
 802a3b2:	9307      	str	r3, [sp, #28]
 802a3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a3b6:	3302      	adds	r3, #2
 802a3b8:	930a      	str	r3, [sp, #40]	; 0x28
 802a3ba:	e695      	b.n	802a0e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a3bc:	d024      	beq.n	802a408 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802a3be:	9b07      	ldr	r3, [sp, #28]
 802a3c0:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802a3c2:	3b01      	subs	r3, #1
 802a3c4:	fb00 4003 	mla	r0, r0, r3, r4
 802a3c8:	1400      	asrs	r0, r0, #16
 802a3ca:	f53f aeaa 	bmi.w	802a122 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a3ce:	3901      	subs	r1, #1
 802a3d0:	4288      	cmp	r0, r1
 802a3d2:	f6bf aea6 	bge.w	802a122 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a3d6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802a3d8:	fb01 6303 	mla	r3, r1, r3, r6
 802a3dc:	141b      	asrs	r3, r3, #16
 802a3de:	f53f aea0 	bmi.w	802a122 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a3e2:	3a01      	subs	r2, #1
 802a3e4:	4293      	cmp	r3, r2
 802a3e6:	f6bf ae9c 	bge.w	802a122 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802a3ea:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a3ee:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802a3f2:	f1bb 0f00 	cmp.w	fp, #0
 802a3f6:	f300 809a 	bgt.w	802a52e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 802a3fa:	9b07      	ldr	r3, [sp, #28]
 802a3fc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a402:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a406:	930a      	str	r3, [sp, #40]	; 0x28
 802a408:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a40a:	2b00      	cmp	r3, #0
 802a40c:	f340 81eb 	ble.w	802a7e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76a>
 802a410:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a418:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a41c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a41e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a422:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a426:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a42a:	eef0 6a48 	vmov.f32	s13, s16
 802a42e:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a432:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a436:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a43a:	ee16 4a90 	vmov	r4, s13
 802a43e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a442:	eef0 6a68 	vmov.f32	s13, s17
 802a446:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a44a:	ee18 2a10 	vmov	r2, s16
 802a44e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a452:	fb92 f3f3 	sdiv	r3, r2, r3
 802a456:	ee18 2a90 	vmov	r2, s17
 802a45a:	932f      	str	r3, [sp, #188]	; 0xbc
 802a45c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a45e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a462:	9330      	str	r3, [sp, #192]	; 0xc0
 802a464:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a466:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802a468:	3b01      	subs	r3, #1
 802a46a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a46e:	9316      	str	r3, [sp, #88]	; 0x58
 802a470:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a472:	bf08      	it	eq
 802a474:	4613      	moveq	r3, r2
 802a476:	ee16 6a90 	vmov	r6, s13
 802a47a:	9307      	str	r3, [sp, #28]
 802a47c:	eef0 8a67 	vmov.f32	s17, s15
 802a480:	eeb0 8a47 	vmov.f32	s16, s14
 802a484:	e622      	b.n	802a0cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802a486:	2800      	cmp	r0, #0
 802a488:	f43f ae92 	beq.w	802a1b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a48c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802a490:	9308      	str	r3, [sp, #32]
 802a492:	0e1b      	lsrs	r3, r3, #24
 802a494:	9310      	str	r3, [sp, #64]	; 0x40
 802a496:	e68b      	b.n	802a1b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802a498:	8839      	ldrh	r1, [r7, #0]
 802a49a:	4dd5      	ldr	r5, [pc, #852]	; (802a7f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>)
 802a49c:	43db      	mvns	r3, r3
 802a49e:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802a4a2:	fa5f f883 	uxtb.w	r8, r3
 802a4a6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802a4aa:	fb0e fe08 	mul.w	lr, lr, r8
 802a4ae:	10c8      	asrs	r0, r1, #3
 802a4b0:	00cb      	lsls	r3, r1, #3
 802a4b2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a4b6:	f10e 0101 	add.w	r1, lr, #1
 802a4ba:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802a4be:	fb00 f008 	mul.w	r0, r0, r8
 802a4c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802a4c6:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802a4ca:	f100 0e01 	add.w	lr, r0, #1
 802a4ce:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802a4d2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a4d6:	b2db      	uxtb	r3, r3
 802a4d8:	b2c9      	uxtb	r1, r1
 802a4da:	00d2      	lsls	r2, r2, #3
 802a4dc:	fb03 f308 	mul.w	r3, r3, r8
 802a4e0:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802a4e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a4e8:	430a      	orrs	r2, r1
 802a4ea:	1c59      	adds	r1, r3, #1
 802a4ec:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a4f0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802a4f4:	e748      	b.n	802a388 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802a4f6:	f112 0801 	adds.w	r8, r2, #1
 802a4fa:	f53f af4b 	bmi.w	802a394 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a4fe:	4543      	cmp	r3, r8
 802a500:	f6ff af48 	blt.w	802a394 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a504:	f11c 0801 	adds.w	r8, ip, #1
 802a508:	f53f af44 	bmi.w	802a394 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a50c:	45c6      	cmp	lr, r8
 802a50e:	f6ff af41 	blt.w	802a394 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a512:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802a516:	fa0f f28e 	sxth.w	r2, lr
 802a51a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802a51e:	9200      	str	r2, [sp, #0]
 802a520:	b21b      	sxth	r3, r3
 802a522:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a524:	9819      	ldr	r0, [sp, #100]	; 0x64
 802a526:	4639      	mov	r1, r7
 802a528:	f7ff fc54 	bl	8029dd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802a52c:	e732      	b.n	802a394 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802a52e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802a530:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a532:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802a536:	1421      	asrs	r1, r4, #16
 802a538:	1433      	asrs	r3, r6, #16
 802a53a:	fb07 1303 	mla	r3, r7, r3, r1
 802a53e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a540:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802a544:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a548:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a54c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a550:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a554:	2a00      	cmp	r2, #0
 802a556:	f000 8107 	beq.w	802a768 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ec>
 802a55a:	684d      	ldr	r5, [r1, #4]
 802a55c:	950d      	str	r5, [sp, #52]	; 0x34
 802a55e:	0e2d      	lsrs	r5, r5, #24
 802a560:	9514      	str	r5, [sp, #80]	; 0x50
 802a562:	b178      	cbz	r0, 802a584 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a564:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802a568:	3f01      	subs	r7, #1
 802a56a:	00bf      	lsls	r7, r7, #2
 802a56c:	3704      	adds	r7, #4
 802a56e:	eb01 0e07 	add.w	lr, r1, r7
 802a572:	59c9      	ldr	r1, [r1, r7]
 802a574:	9109      	str	r1, [sp, #36]	; 0x24
 802a576:	0e09      	lsrs	r1, r1, #24
 802a578:	9111      	str	r1, [sp, #68]	; 0x44
 802a57a:	f8de 1004 	ldr.w	r1, [lr, #4]
 802a57e:	910e      	str	r1, [sp, #56]	; 0x38
 802a580:	0e09      	lsrs	r1, r1, #24
 802a582:	9115      	str	r1, [sp, #84]	; 0x54
 802a584:	b292      	uxth	r2, r2
 802a586:	b280      	uxth	r0, r0
 802a588:	fb02 f900 	mul.w	r9, r2, r0
 802a58c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a590:	0112      	lsls	r2, r2, #4
 802a592:	eba2 0e09 	sub.w	lr, r2, r9
 802a596:	b280      	uxth	r0, r0
 802a598:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802a59c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a59e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a5a0:	fa1f fe8e 	uxth.w	lr, lr
 802a5a4:	1a09      	subs	r1, r1, r0
 802a5a6:	b289      	uxth	r1, r1
 802a5a8:	fb0e f202 	mul.w	r2, lr, r2
 802a5ac:	fb01 220c 	mla	r2, r1, ip, r2
 802a5b0:	fb00 2205 	mla	r2, r0, r5, r2
 802a5b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a5b6:	fb09 2205 	mla	r2, r9, r5, r2
 802a5ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802a5be:	2a00      	cmp	r2, #0
 802a5c0:	f000 80c9 	beq.w	802a756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802a5c4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802a5c8:	d019      	beq.n	802a5fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 802a5ca:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802a5ce:	fb0c fa0a 	mul.w	sl, ip, sl
 802a5d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a5d6:	fb0c fc03 	mul.w	ip, ip, r3
 802a5da:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a5de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a5e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a5e6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802a5ea:	4453      	add	r3, sl
 802a5ec:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a5f0:	0a1b      	lsrs	r3, r3, #8
 802a5f2:	0a3f      	lsrs	r7, r7, #8
 802a5f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a5f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802a5fc:	433b      	orrs	r3, r7
 802a5fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a600:	2dff      	cmp	r5, #255	; 0xff
 802a602:	d020      	beq.n	802a646 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 802a604:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a606:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a60a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a60c:	436f      	muls	r7, r5
 802a60e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a610:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a614:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a616:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a61a:	fb05 fa0a 	mul.w	sl, r5, sl
 802a61e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a622:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a626:	44bc      	add	ip, r7
 802a628:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a62c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a630:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a634:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a638:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a63c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a640:	ea4c 050a 	orr.w	r5, ip, sl
 802a644:	950d      	str	r5, [sp, #52]	; 0x34
 802a646:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a648:	2dff      	cmp	r5, #255	; 0xff
 802a64a:	d020      	beq.n	802a68e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 802a64c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a64e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a652:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a654:	436f      	muls	r7, r5
 802a656:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a658:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a65c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a65e:	fb05 fa0c 	mul.w	sl, r5, ip
 802a662:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a666:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a66a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a66e:	44bc      	add	ip, r7
 802a670:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a674:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a678:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a67c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a680:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a684:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a688:	ea4c 050a 	orr.w	r5, ip, sl
 802a68c:	9509      	str	r5, [sp, #36]	; 0x24
 802a68e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a690:	2dff      	cmp	r5, #255	; 0xff
 802a692:	d020      	beq.n	802a6d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 802a694:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a696:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a69a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a69c:	436f      	muls	r7, r5
 802a69e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a6a0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a6a4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a6a6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a6aa:	fb05 fa0a 	mul.w	sl, r5, sl
 802a6ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a6b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a6b6:	44bc      	add	ip, r7
 802a6b8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a6bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a6c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a6c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a6c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a6cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a6d0:	ea4c 050a 	orr.w	r5, ip, sl
 802a6d4:	950e      	str	r5, [sp, #56]	; 0x38
 802a6d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a6d8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a6dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a6de:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802a6e2:	fb0e f707 	mul.w	r7, lr, r7
 802a6e6:	fb01 770c 	mla	r7, r1, ip, r7
 802a6ea:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a6ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a6f0:	fb00 770c 	mla	r7, r0, ip, r7
 802a6f4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a6f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a6fa:	fb09 770c 	mla	r7, r9, ip, r7
 802a6fe:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a702:	fb0e fe0c 	mul.w	lr, lr, ip
 802a706:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a70a:	fb01 e303 	mla	r3, r1, r3, lr
 802a70e:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a710:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a714:	990e      	ldr	r1, [sp, #56]	; 0x38
 802a716:	fb00 330a 	mla	r3, r0, sl, r3
 802a71a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802a71e:	fb09 3c0c 	mla	ip, r9, ip, r3
 802a722:	0a3f      	lsrs	r7, r7, #8
 802a724:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a728:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802a72c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a730:	ea47 070c 	orr.w	r7, r7, ip
 802a734:	2aff      	cmp	r2, #255	; 0xff
 802a736:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802a73a:	d11e      	bne.n	802a77a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fe>
 802a73c:	097a      	lsrs	r2, r7, #5
 802a73e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802a742:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a746:	f023 0307 	bic.w	r3, r3, #7
 802a74a:	4313      	orrs	r3, r2
 802a74c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a750:	431f      	orrs	r7, r3
 802a752:	f8a8 7000 	strh.w	r7, [r8]
 802a756:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802a758:	441c      	add	r4, r3
 802a75a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a75c:	f108 0802 	add.w	r8, r8, #2
 802a760:	441e      	add	r6, r3
 802a762:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a766:	e644      	b.n	802a3f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802a768:	2800      	cmp	r0, #0
 802a76a:	f43f af0b 	beq.w	802a584 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a76e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802a772:	9109      	str	r1, [sp, #36]	; 0x24
 802a774:	0e09      	lsrs	r1, r1, #24
 802a776:	9111      	str	r1, [sp, #68]	; 0x44
 802a778:	e704      	b.n	802a584 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802a77a:	f8b8 1000 	ldrh.w	r1, [r8]
 802a77e:	43d2      	mvns	r2, r2
 802a780:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802a784:	fa5f fe82 	uxtb.w	lr, r2
 802a788:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802a78c:	fb0c fc0e 	mul.w	ip, ip, lr
 802a790:	10c8      	asrs	r0, r1, #3
 802a792:	00ca      	lsls	r2, r1, #3
 802a794:	f10c 0101 	add.w	r1, ip, #1
 802a798:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a79c:	0c39      	lsrs	r1, r7, #16
 802a79e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a7a2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a7a6:	4912      	ldr	r1, [pc, #72]	; (802a7f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x774>)
 802a7a8:	fb00 f00e 	mul.w	r0, r0, lr
 802a7ac:	fa5f fc8c 	uxtb.w	ip, ip
 802a7b0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802a7b4:	b2d2      	uxtb	r2, r2
 802a7b6:	1c41      	adds	r1, r0, #1
 802a7b8:	fb02 f20e 	mul.w	r2, r2, lr
 802a7bc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802a7c0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a7c4:	1c51      	adds	r1, r2, #1
 802a7c6:	00c0      	lsls	r0, r0, #3
 802a7c8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a7cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a7d0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802a7d4:	ea4c 0c00 	orr.w	ip, ip, r0
 802a7d8:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a7dc:	ea47 0c0c 	orr.w	ip, r7, ip
 802a7e0:	f8a8 c000 	strh.w	ip, [r8]
 802a7e4:	e7b7      	b.n	802a756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802a7e6:	b01b      	add	sp, #108	; 0x6c
 802a7e8:	ecbd 8b08 	vpop	{d8-d11}
 802a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a7f0:	fffff800 	.word	0xfffff800

0802a7f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a7f8:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802a7fc:	2c00      	cmp	r4, #0
 802a7fe:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a802:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a806:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802a80a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802a80e:	fb04 ce03 	mla	lr, r4, r3, ip
 802a812:	db60      	blt.n	802a8d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802a814:	45a1      	cmp	r9, r4
 802a816:	dd5e      	ble.n	802a8d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 802a818:	f1bc 0f00 	cmp.w	ip, #0
 802a81c:	db59      	blt.n	802a8d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802a81e:	45e0      	cmp	r8, ip
 802a820:	dd57      	ble.n	802a8d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802a822:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802a826:	f01e 0f01 	tst.w	lr, #1
 802a82a:	5c16      	ldrb	r6, [r2, r0]
 802a82c:	bf0c      	ite	eq
 802a82e:	f006 060f 	andeq.w	r6, r6, #15
 802a832:	1136      	asrne	r6, r6, #4
 802a834:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a838:	b2f6      	uxtb	r6, r6
 802a83a:	f11c 0001 	adds.w	r0, ip, #1
 802a83e:	d44d      	bmi.n	802a8dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802a840:	4580      	cmp	r8, r0
 802a842:	dd4b      	ble.n	802a8dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802a844:	2d00      	cmp	r5, #0
 802a846:	d04b      	beq.n	802a8e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 802a848:	f10e 0a01 	add.w	sl, lr, #1
 802a84c:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802a850:	f01a 0f01 	tst.w	sl, #1
 802a854:	5c10      	ldrb	r0, [r2, r0]
 802a856:	bf0c      	ite	eq
 802a858:	f000 000f 	andeq.w	r0, r0, #15
 802a85c:	1100      	asrne	r0, r0, #4
 802a85e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a862:	b2c0      	uxtb	r0, r0
 802a864:	3401      	adds	r4, #1
 802a866:	d43f      	bmi.n	802a8e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802a868:	45a1      	cmp	r9, r4
 802a86a:	dd3d      	ble.n	802a8e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 802a86c:	2f00      	cmp	r7, #0
 802a86e:	f000 80a8 	beq.w	802a9c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 802a872:	f1bc 0f00 	cmp.w	ip, #0
 802a876:	db35      	blt.n	802a8e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802a878:	45e0      	cmp	r8, ip
 802a87a:	dd33      	ble.n	802a8e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 802a87c:	eb03 090e 	add.w	r9, r3, lr
 802a880:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802a884:	f019 0f01 	tst.w	r9, #1
 802a888:	5d14      	ldrb	r4, [r2, r4]
 802a88a:	bf0c      	ite	eq
 802a88c:	f004 040f 	andeq.w	r4, r4, #15
 802a890:	1124      	asrne	r4, r4, #4
 802a892:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a896:	b2e4      	uxtb	r4, r4
 802a898:	f11c 0c01 	adds.w	ip, ip, #1
 802a89c:	d427      	bmi.n	802a8ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802a89e:	45e0      	cmp	r8, ip
 802a8a0:	dd25      	ble.n	802a8ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802a8a2:	b335      	cbz	r5, 802a8f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 802a8a4:	3301      	adds	r3, #1
 802a8a6:	449e      	add	lr, r3
 802a8a8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a8ac:	f01e 0f01 	tst.w	lr, #1
 802a8b0:	5cd2      	ldrb	r2, [r2, r3]
 802a8b2:	bf0c      	ite	eq
 802a8b4:	f002 020f 	andeq.w	r2, r2, #15
 802a8b8:	1112      	asrne	r2, r2, #4
 802a8ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a8be:	b2d3      	uxtb	r3, r2
 802a8c0:	2d0f      	cmp	r5, #15
 802a8c2:	d917      	bls.n	802a8f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 802a8c4:	4b42      	ldr	r3, [pc, #264]	; (802a9d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 802a8c6:	4a43      	ldr	r2, [pc, #268]	; (802a9d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 802a8c8:	4843      	ldr	r0, [pc, #268]	; (802a9d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 802a8ca:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802a8ce:	f003 fabf 	bl	802de50 <__assert_func>
 802a8d2:	2600      	movs	r6, #0
 802a8d4:	e7b1      	b.n	802a83a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 802a8d6:	2000      	movs	r0, #0
 802a8d8:	4606      	mov	r6, r0
 802a8da:	e7c3      	b.n	802a864 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802a8dc:	2000      	movs	r0, #0
 802a8de:	e7c1      	b.n	802a864 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802a8e0:	4628      	mov	r0, r5
 802a8e2:	e7bf      	b.n	802a864 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 802a8e4:	2400      	movs	r4, #0
 802a8e6:	e7d7      	b.n	802a898 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 802a8e8:	2300      	movs	r3, #0
 802a8ea:	461c      	mov	r4, r3
 802a8ec:	e7e8      	b.n	802a8c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802a8ee:	2300      	movs	r3, #0
 802a8f0:	e7e6      	b.n	802a8c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 802a8f2:	462b      	mov	r3, r5
 802a8f4:	2f0f      	cmp	r7, #15
 802a8f6:	d8e5      	bhi.n	802a8c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802a8f8:	b2ad      	uxth	r5, r5
 802a8fa:	b2bf      	uxth	r7, r7
 802a8fc:	fb05 fc07 	mul.w	ip, r5, r7
 802a900:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a904:	012d      	lsls	r5, r5, #4
 802a906:	b2bf      	uxth	r7, r7
 802a908:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802a90c:	eba5 050c 	sub.w	r5, r5, ip
 802a910:	1bd2      	subs	r2, r2, r7
 802a912:	b2ad      	uxth	r5, r5
 802a914:	b292      	uxth	r2, r2
 802a916:	4368      	muls	r0, r5
 802a918:	fb06 0002 	mla	r0, r6, r2, r0
 802a91c:	fb07 0404 	mla	r4, r7, r4, r0
 802a920:	fb0c 4303 	mla	r3, ip, r3, r4
 802a924:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a928:	b1b3      	cbz	r3, 802a958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802a92a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802a92e:	435a      	muls	r2, r3
 802a930:	1c53      	adds	r3, r2, #1
 802a932:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a936:	4a29      	ldr	r2, [pc, #164]	; (802a9dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 802a938:	121b      	asrs	r3, r3, #8
 802a93a:	6812      	ldr	r2, [r2, #0]
 802a93c:	2bff      	cmp	r3, #255	; 0xff
 802a93e:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802a942:	d10b      	bne.n	802a95c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 802a944:	4b26      	ldr	r3, [pc, #152]	; (802a9e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 802a946:	0950      	lsrs	r0, r2, #5
 802a948:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a94c:	4033      	ands	r3, r6
 802a94e:	4318      	orrs	r0, r3
 802a950:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a954:	4302      	orrs	r2, r0
 802a956:	800a      	strh	r2, [r1, #0]
 802a958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a95c:	880d      	ldrh	r5, [r1, #0]
 802a95e:	b29f      	uxth	r7, r3
 802a960:	122c      	asrs	r4, r5, #8
 802a962:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802a966:	43db      	mvns	r3, r3
 802a968:	b2db      	uxtb	r3, r3
 802a96a:	fb10 f007 	smulbb	r0, r0, r7
 802a96e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802a972:	fb04 0403 	mla	r4, r4, r3, r0
 802a976:	b2f6      	uxtb	r6, r6
 802a978:	10e8      	asrs	r0, r5, #3
 802a97a:	b2d2      	uxtb	r2, r2
 802a97c:	00ed      	lsls	r5, r5, #3
 802a97e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a982:	fb12 f207 	smulbb	r2, r2, r7
 802a986:	fb16 f607 	smulbb	r6, r6, r7
 802a98a:	b2ed      	uxtb	r5, r5
 802a98c:	b2a4      	uxth	r4, r4
 802a98e:	fb00 6603 	mla	r6, r0, r3, r6
 802a992:	fb05 2303 	mla	r3, r5, r3, r2
 802a996:	b29a      	uxth	r2, r3
 802a998:	1c63      	adds	r3, r4, #1
 802a99a:	b2b0      	uxth	r0, r6
 802a99c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a9a0:	1c53      	adds	r3, r2, #1
 802a9a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a9a6:	1c42      	adds	r2, r0, #1
 802a9a8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a9ac:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802a9b0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a9b4:	0940      	lsrs	r0, r0, #5
 802a9b6:	4323      	orrs	r3, r4
 802a9b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a9bc:	4303      	orrs	r3, r0
 802a9be:	800b      	strh	r3, [r1, #0]
 802a9c0:	e7ca      	b.n	802a958 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802a9c2:	2d0f      	cmp	r5, #15
 802a9c4:	f63f af7e 	bhi.w	802a8c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802a9c8:	463b      	mov	r3, r7
 802a9ca:	463c      	mov	r4, r7
 802a9cc:	e794      	b.n	802a8f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 802a9ce:	bf00      	nop
 802a9d0:	08032b71 	.word	0x08032b71
 802a9d4:	0803313e 	.word	0x0803313e
 802a9d8:	08032bf5 	.word	0x08032bf5
 802a9dc:	200097b0 	.word	0x200097b0
 802a9e0:	00fff800 	.word	0x00fff800

0802a9e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9e8:	ed2d 8b08 	vpush	{d8-d11}
 802a9ec:	b097      	sub	sp, #92	; 0x5c
 802a9ee:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802a9f2:	9214      	str	r2, [sp, #80]	; 0x50
 802a9f4:	9309      	str	r3, [sp, #36]	; 0x24
 802a9f6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802a9f8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802a9fc:	910d      	str	r1, [sp, #52]	; 0x34
 802a9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 802aa00:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802aa04:	9015      	str	r0, [sp, #84]	; 0x54
 802aa06:	6850      	ldr	r0, [r2, #4]
 802aa08:	6812      	ldr	r2, [r2, #0]
 802aa0a:	fb00 1303 	mla	r3, r0, r3, r1
 802aa0e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802aa12:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802aa14:	689b      	ldr	r3, [r3, #8]
 802aa16:	3301      	adds	r3, #1
 802aa18:	f023 0301 	bic.w	r3, r3, #1
 802aa1c:	930a      	str	r3, [sp, #40]	; 0x28
 802aa1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802aa20:	681f      	ldr	r7, [r3, #0]
 802aa22:	eeb0 aa40 	vmov.f32	s20, s0
 802aa26:	eef0 9a60 	vmov.f32	s19, s1
 802aa2a:	eeb0 9a41 	vmov.f32	s18, s2
 802aa2e:	eeb0 8a62 	vmov.f32	s16, s5
 802aa32:	eef0 8a43 	vmov.f32	s17, s6
 802aa36:	eef0 ba44 	vmov.f32	s23, s8
 802aa3a:	eeb0 ba64 	vmov.f32	s22, s9
 802aa3e:	eef0 aa45 	vmov.f32	s21, s10
 802aa42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802aa44:	2b00      	cmp	r3, #0
 802aa46:	dc03      	bgt.n	802aa50 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802aa48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802aa4a:	2b00      	cmp	r3, #0
 802aa4c:	f340 8287 	ble.w	802af5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802aa50:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802aa52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802aa56:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802aa5a:	1e48      	subs	r0, r1, #1
 802aa5c:	f102 3cff 	add.w	ip, r2, #4294967295
 802aa60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aa62:	2b00      	cmp	r3, #0
 802aa64:	f340 80c4 	ble.w	802abf0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802aa68:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802aa6c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802aa70:	d406      	bmi.n	802aa80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802aa72:	4586      	cmp	lr, r0
 802aa74:	da04      	bge.n	802aa80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802aa76:	2b00      	cmp	r3, #0
 802aa78:	db02      	blt.n	802aa80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802aa7a:	4563      	cmp	r3, ip
 802aa7c:	f2c0 80b9 	blt.w	802abf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802aa80:	f11e 0e01 	adds.w	lr, lr, #1
 802aa84:	f100 80aa 	bmi.w	802abdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802aa88:	4571      	cmp	r1, lr
 802aa8a:	f2c0 80a7 	blt.w	802abdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802aa8e:	3301      	adds	r3, #1
 802aa90:	f100 80a4 	bmi.w	802abdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802aa94:	429a      	cmp	r2, r3
 802aa96:	f2c0 80a1 	blt.w	802abdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802aa9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aa9c:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802aaa0:	930e      	str	r3, [sp, #56]	; 0x38
 802aaa2:	46c8      	mov	r8, r9
 802aaa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802aaa6:	2b00      	cmp	r3, #0
 802aaa8:	f340 80c3 	ble.w	802ac32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802aaac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802aaae:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802aab2:	1423      	asrs	r3, r4, #16
 802aab4:	ea4f 4026 	mov.w	r0, r6, asr #16
 802aab8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802aabc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802aac0:	f100 814d 	bmi.w	802ad5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802aac4:	f10c 3bff 	add.w	fp, ip, #4294967295
 802aac8:	455b      	cmp	r3, fp
 802aaca:	f280 8148 	bge.w	802ad5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802aace:	2800      	cmp	r0, #0
 802aad0:	f2c0 8145 	blt.w	802ad5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802aad4:	f10e 3bff 	add.w	fp, lr, #4294967295
 802aad8:	4558      	cmp	r0, fp
 802aada:	f280 8140 	bge.w	802ad5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802aade:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802aae0:	fb00 3305 	mla	r3, r0, r5, r3
 802aae4:	0858      	lsrs	r0, r3, #1
 802aae6:	07dd      	lsls	r5, r3, #31
 802aae8:	f817 c000 	ldrb.w	ip, [r7, r0]
 802aaec:	bf54      	ite	pl
 802aaee:	f00c 0c0f 	andpl.w	ip, ip, #15
 802aaf2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802aaf6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802aafa:	fa5f fc8c 	uxtb.w	ip, ip
 802aafe:	2a00      	cmp	r2, #0
 802ab00:	f000 80db 	beq.w	802acba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802ab04:	1c58      	adds	r0, r3, #1
 802ab06:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802ab0a:	07c0      	lsls	r0, r0, #31
 802ab0c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802ab10:	bf54      	ite	pl
 802ab12:	f00e 0e0f 	andpl.w	lr, lr, #15
 802ab16:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802ab1a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802ab1e:	fa5f f08e 	uxtb.w	r0, lr
 802ab22:	9010      	str	r0, [sp, #64]	; 0x40
 802ab24:	b1c9      	cbz	r1, 802ab5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802ab26:	4453      	add	r3, sl
 802ab28:	0858      	lsrs	r0, r3, #1
 802ab2a:	07dd      	lsls	r5, r3, #31
 802ab2c:	5c38      	ldrb	r0, [r7, r0]
 802ab2e:	bf54      	ite	pl
 802ab30:	f000 000f 	andpl.w	r0, r0, #15
 802ab34:	1100      	asrmi	r0, r0, #4
 802ab36:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802ab3a:	3301      	adds	r3, #1
 802ab3c:	b2c0      	uxtb	r0, r0
 802ab3e:	900b      	str	r0, [sp, #44]	; 0x2c
 802ab40:	0858      	lsrs	r0, r3, #1
 802ab42:	07dd      	lsls	r5, r3, #31
 802ab44:	f817 e000 	ldrb.w	lr, [r7, r0]
 802ab48:	bf54      	ite	pl
 802ab4a:	f00e 030f 	andpl.w	r3, lr, #15
 802ab4e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802ab52:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802ab56:	b2db      	uxtb	r3, r3
 802ab58:	9311      	str	r3, [sp, #68]	; 0x44
 802ab5a:	b292      	uxth	r2, r2
 802ab5c:	b289      	uxth	r1, r1
 802ab5e:	fb02 f301 	mul.w	r3, r2, r1
 802ab62:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802ab66:	0112      	lsls	r2, r2, #4
 802ab68:	b289      	uxth	r1, r1
 802ab6a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802ab6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802ab70:	1ad2      	subs	r2, r2, r3
 802ab72:	1a40      	subs	r0, r0, r1
 802ab74:	b292      	uxth	r2, r2
 802ab76:	436a      	muls	r2, r5
 802ab78:	b280      	uxth	r0, r0
 802ab7a:	fb0c 2c00 	mla	ip, ip, r0, r2
 802ab7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802ab80:	fb01 c102 	mla	r1, r1, r2, ip
 802ab84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802ab86:	fb03 1302 	mla	r3, r3, r2, r1
 802ab8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ab8e:	b1db      	cbz	r3, 802abc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ab90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ab92:	4353      	muls	r3, r2
 802ab94:	1c5a      	adds	r2, r3, #1
 802ab96:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802ab9a:	4ac6      	ldr	r2, [pc, #792]	; (802aeb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>)
 802ab9c:	121b      	asrs	r3, r3, #8
 802ab9e:	6812      	ldr	r2, [r2, #0]
 802aba0:	2bff      	cmp	r3, #255	; 0xff
 802aba2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802aba6:	f040 8099 	bne.w	802acdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802abaa:	0953      	lsrs	r3, r2, #5
 802abac:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802abb0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802abb4:	f02c 0c07 	bic.w	ip, ip, #7
 802abb8:	ea43 0c0c 	orr.w	ip, r3, ip
 802abbc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802abc0:	ea4c 0202 	orr.w	r2, ip, r2
 802abc4:	f8a8 2000 	strh.w	r2, [r8]
 802abc8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802abca:	441c      	add	r4, r3
 802abcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802abce:	441e      	add	r6, r3
 802abd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802abd2:	3b01      	subs	r3, #1
 802abd4:	f108 0802 	add.w	r8, r8, #2
 802abd8:	930e      	str	r3, [sp, #56]	; 0x38
 802abda:	e763      	b.n	802aaa4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802abdc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802abde:	441c      	add	r4, r3
 802abe0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802abe2:	441e      	add	r6, r3
 802abe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802abe6:	3b01      	subs	r3, #1
 802abe8:	9309      	str	r3, [sp, #36]	; 0x24
 802abea:	f109 0902 	add.w	r9, r9, #2
 802abee:	e737      	b.n	802aa60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802abf0:	d024      	beq.n	802ac3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802abf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802abf4:	982b      	ldr	r0, [sp, #172]	; 0xac
 802abf6:	3b01      	subs	r3, #1
 802abf8:	fb00 4003 	mla	r0, r0, r3, r4
 802abfc:	1400      	asrs	r0, r0, #16
 802abfe:	f53f af4c 	bmi.w	802aa9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802ac02:	3901      	subs	r1, #1
 802ac04:	4288      	cmp	r0, r1
 802ac06:	f6bf af48 	bge.w	802aa9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802ac0a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802ac0c:	fb01 6303 	mla	r3, r1, r3, r6
 802ac10:	141b      	asrs	r3, r3, #16
 802ac12:	f53f af42 	bmi.w	802aa9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802ac16:	3a01      	subs	r2, #1
 802ac18:	4293      	cmp	r3, r2
 802ac1a:	f6bf af3e 	bge.w	802aa9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802ac1e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802ac22:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802ac26:	930e      	str	r3, [sp, #56]	; 0x38
 802ac28:	46c8      	mov	r8, r9
 802ac2a:	f1bb 0f00 	cmp.w	fp, #0
 802ac2e:	f300 80b7 	bgt.w	802ada0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 802ac32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac34:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802ac38:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802ac3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ac3e:	2b00      	cmp	r3, #0
 802ac40:	f340 818d 	ble.w	802af5e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 802ac44:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802ac48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802ac4c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802ac50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802ac52:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802ac56:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802ac5a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802ac5e:	eef0 6a48 	vmov.f32	s13, s16
 802ac62:	ee69 7a27 	vmul.f32	s15, s18, s15
 802ac66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ac6a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802ac6e:	ee16 4a90 	vmov	r4, s13
 802ac72:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802ac76:	eef0 6a68 	vmov.f32	s13, s17
 802ac7a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802ac7e:	ee18 2a10 	vmov	r2, s16
 802ac82:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802ac86:	fb92 f3f3 	sdiv	r3, r2, r3
 802ac8a:	ee18 2a90 	vmov	r2, s17
 802ac8e:	932b      	str	r3, [sp, #172]	; 0xac
 802ac90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802ac92:	fb92 f3f3 	sdiv	r3, r2, r3
 802ac96:	932c      	str	r3, [sp, #176]	; 0xb0
 802ac98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ac9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802ac9c:	3b01      	subs	r3, #1
 802ac9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802aca2:	930d      	str	r3, [sp, #52]	; 0x34
 802aca4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802aca6:	bf08      	it	eq
 802aca8:	4613      	moveq	r3, r2
 802acaa:	ee16 6a90 	vmov	r6, s13
 802acae:	9309      	str	r3, [sp, #36]	; 0x24
 802acb0:	eef0 8a67 	vmov.f32	s17, s15
 802acb4:	eeb0 8a47 	vmov.f32	s16, s14
 802acb8:	e6c3      	b.n	802aa42 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802acba:	2900      	cmp	r1, #0
 802acbc:	f43f af4d 	beq.w	802ab5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802acc0:	eb0a 0003 	add.w	r0, sl, r3
 802acc4:	0843      	lsrs	r3, r0, #1
 802acc6:	07c0      	lsls	r0, r0, #31
 802acc8:	5cfb      	ldrb	r3, [r7, r3]
 802acca:	bf54      	ite	pl
 802accc:	f003 030f 	andpl.w	r3, r3, #15
 802acd0:	111b      	asrmi	r3, r3, #4
 802acd2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802acd6:	b2db      	uxtb	r3, r3
 802acd8:	930b      	str	r3, [sp, #44]	; 0x2c
 802acda:	e73e      	b.n	802ab5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802acdc:	f8b8 e000 	ldrh.w	lr, [r8]
 802ace0:	fa1f fb83 	uxth.w	fp, r3
 802ace4:	ea4f 202e 	mov.w	r0, lr, asr #8
 802ace8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802acec:	43db      	mvns	r3, r3
 802acee:	b2db      	uxtb	r3, r3
 802acf0:	fb11 f10b 	smulbb	r1, r1, fp
 802acf4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802acf8:	fb00 1003 	mla	r0, r0, r3, r1
 802acfc:	fa5f fc8c 	uxtb.w	ip, ip
 802ad00:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802ad04:	b2d2      	uxtb	r2, r2
 802ad06:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802ad0a:	b280      	uxth	r0, r0
 802ad0c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802ad10:	fb1c fc0b 	smulbb	ip, ip, fp
 802ad14:	fa5f fe8e 	uxtb.w	lr, lr
 802ad18:	fb12 fb0b 	smulbb	fp, r2, fp
 802ad1c:	fb01 cc03 	mla	ip, r1, r3, ip
 802ad20:	fb0e bb03 	mla	fp, lr, r3, fp
 802ad24:	1c43      	adds	r3, r0, #1
 802ad26:	fa1f fc8c 	uxth.w	ip, ip
 802ad2a:	fa1f fb8b 	uxth.w	fp, fp
 802ad2e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802ad32:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802ad36:	f10c 0101 	add.w	r1, ip, #1
 802ad3a:	f10b 0001 	add.w	r0, fp, #1
 802ad3e:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802ad42:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802ad46:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ad4a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802ad4e:	4318      	orrs	r0, r3
 802ad50:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802ad54:	ea40 000c 	orr.w	r0, r0, ip
 802ad58:	f8a8 0000 	strh.w	r0, [r8]
 802ad5c:	e734      	b.n	802abc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ad5e:	f113 0b01 	adds.w	fp, r3, #1
 802ad62:	f53f af31 	bmi.w	802abc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ad66:	45dc      	cmp	ip, fp
 802ad68:	f6ff af2e 	blt.w	802abc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ad6c:	f110 0b01 	adds.w	fp, r0, #1
 802ad70:	f53f af2a 	bmi.w	802abc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ad74:	45de      	cmp	lr, fp
 802ad76:	f6ff af27 	blt.w	802abc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ad7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802ad7c:	9302      	str	r3, [sp, #8]
 802ad7e:	fa0f f38e 	sxth.w	r3, lr
 802ad82:	9301      	str	r3, [sp, #4]
 802ad84:	fa0f f38c 	sxth.w	r3, ip
 802ad88:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802ad8c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802ad90:	9300      	str	r3, [sp, #0]
 802ad92:	463a      	mov	r2, r7
 802ad94:	4653      	mov	r3, sl
 802ad96:	4641      	mov	r1, r8
 802ad98:	9815      	ldr	r0, [sp, #84]	; 0x54
 802ad9a:	f7ff fd2b 	bl	802a7f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802ad9e:	e713      	b.n	802abc8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802ada0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802ada2:	1422      	asrs	r2, r4, #16
 802ada4:	1433      	asrs	r3, r6, #16
 802ada6:	fb05 2303 	mla	r3, r5, r3, r2
 802adaa:	085a      	lsrs	r2, r3, #1
 802adac:	07dd      	lsls	r5, r3, #31
 802adae:	5cba      	ldrb	r2, [r7, r2]
 802adb0:	bf54      	ite	pl
 802adb2:	f002 020f 	andpl.w	r2, r2, #15
 802adb6:	1112      	asrmi	r2, r2, #4
 802adb8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802adbc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802adc0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802adc4:	b2d2      	uxtb	r2, r2
 802adc6:	2900      	cmp	r1, #0
 802adc8:	d076      	beq.n	802aeb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 802adca:	f103 0e01 	add.w	lr, r3, #1
 802adce:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802add2:	f01e 0f01 	tst.w	lr, #1
 802add6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802adda:	bf0c      	ite	eq
 802addc:	f00c 0c0f 	andeq.w	ip, ip, #15
 802ade0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802ade4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ade8:	fa5f f58c 	uxtb.w	r5, ip
 802adec:	9512      	str	r5, [sp, #72]	; 0x48
 802adee:	b300      	cbz	r0, 802ae32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802adf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802adf2:	442b      	add	r3, r5
 802adf4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802adf8:	07dd      	lsls	r5, r3, #31
 802adfa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802adfe:	bf54      	ite	pl
 802ae00:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ae04:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ae08:	3301      	adds	r3, #1
 802ae0a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae0e:	fa5f f58c 	uxtb.w	r5, ip
 802ae12:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802ae16:	950c      	str	r5, [sp, #48]	; 0x30
 802ae18:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae1c:	07dd      	lsls	r5, r3, #31
 802ae1e:	bf54      	ite	pl
 802ae20:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ae24:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ae28:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae2c:	fa5f f38c 	uxtb.w	r3, ip
 802ae30:	9313      	str	r3, [sp, #76]	; 0x4c
 802ae32:	b289      	uxth	r1, r1
 802ae34:	b280      	uxth	r0, r0
 802ae36:	fb01 f300 	mul.w	r3, r1, r0
 802ae3a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802ae3e:	0109      	lsls	r1, r1, #4
 802ae40:	b280      	uxth	r0, r0
 802ae42:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802ae46:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802ae48:	1ac9      	subs	r1, r1, r3
 802ae4a:	ebac 0c00 	sub.w	ip, ip, r0
 802ae4e:	b289      	uxth	r1, r1
 802ae50:	4369      	muls	r1, r5
 802ae52:	fa1f fc8c 	uxth.w	ip, ip
 802ae56:	fb02 120c 	mla	r2, r2, ip, r1
 802ae5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802ae5c:	fb00 2001 	mla	r0, r0, r1, r2
 802ae60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802ae62:	fb03 0302 	mla	r3, r3, r2, r0
 802ae66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ae6a:	b1d3      	cbz	r3, 802aea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 802ae6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ae6e:	4353      	muls	r3, r2
 802ae70:	1c5a      	adds	r2, r3, #1
 802ae72:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802ae76:	4a0f      	ldr	r2, [pc, #60]	; (802aeb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>)
 802ae78:	121b      	asrs	r3, r3, #8
 802ae7a:	6812      	ldr	r2, [r2, #0]
 802ae7c:	2bff      	cmp	r3, #255	; 0xff
 802ae7e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802ae82:	d12d      	bne.n	802aee0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 802ae84:	0953      	lsrs	r3, r2, #5
 802ae86:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802ae8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802ae8e:	f02c 0c07 	bic.w	ip, ip, #7
 802ae92:	ea43 0c0c 	orr.w	ip, r3, ip
 802ae96:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ae9a:	ea4c 0202 	orr.w	r2, ip, r2
 802ae9e:	f8a8 2000 	strh.w	r2, [r8]
 802aea2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802aea4:	441c      	add	r4, r3
 802aea6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802aea8:	f108 0802 	add.w	r8, r8, #2
 802aeac:	441e      	add	r6, r3
 802aeae:	f10b 3bff 	add.w	fp, fp, #4294967295
 802aeb2:	e6ba      	b.n	802ac2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802aeb4:	200097b0 	.word	0x200097b0
 802aeb8:	2800      	cmp	r0, #0
 802aeba:	d0ba      	beq.n	802ae32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802aebc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802aebe:	442b      	add	r3, r5
 802aec0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802aec4:	07db      	lsls	r3, r3, #31
 802aec6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802aeca:	bf54      	ite	pl
 802aecc:	f00c 0c0f 	andpl.w	ip, ip, #15
 802aed0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802aed4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802aed8:	fa5f f38c 	uxtb.w	r3, ip
 802aedc:	930c      	str	r3, [sp, #48]	; 0x30
 802aede:	e7a8      	b.n	802ae32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802aee0:	f8b8 e000 	ldrh.w	lr, [r8]
 802aee4:	fa1f fa83 	uxth.w	sl, r3
 802aee8:	ea4f 202e 	mov.w	r0, lr, asr #8
 802aeec:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802aef0:	43db      	mvns	r3, r3
 802aef2:	b2db      	uxtb	r3, r3
 802aef4:	fb11 f10a 	smulbb	r1, r1, sl
 802aef8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802aefc:	fb00 1003 	mla	r0, r0, r3, r1
 802af00:	b2d2      	uxtb	r2, r2
 802af02:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802af06:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802af0a:	fa5f fe8e 	uxtb.w	lr, lr
 802af0e:	fb12 f20a 	smulbb	r2, r2, sl
 802af12:	fb0e 2203 	mla	r2, lr, r3, r2
 802af16:	fa5f fc8c 	uxtb.w	ip, ip
 802af1a:	b280      	uxth	r0, r0
 802af1c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802af20:	b292      	uxth	r2, r2
 802af22:	fb1c fc0a 	smulbb	ip, ip, sl
 802af26:	fb01 cc03 	mla	ip, r1, r3, ip
 802af2a:	1c43      	adds	r3, r0, #1
 802af2c:	1c51      	adds	r1, r2, #1
 802af2e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802af32:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802af36:	fa1f fc8c 	uxth.w	ip, ip
 802af3a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802af3e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802af42:	4308      	orrs	r0, r1
 802af44:	f10c 0101 	add.w	r1, ip, #1
 802af48:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802af4c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802af50:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802af54:	ea40 000c 	orr.w	r0, r0, ip
 802af58:	f8a8 0000 	strh.w	r0, [r8]
 802af5c:	e7a1      	b.n	802aea2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4be>
 802af5e:	b017      	add	sp, #92	; 0x5c
 802af60:	ecbd 8b08 	vpop	{d8-d11}
 802af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802af68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802af6c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802af70:	2c00      	cmp	r4, #0
 802af72:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802af76:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802af7a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802af7e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802af82:	fb04 ce03 	mla	lr, r4, r3, ip
 802af86:	db60      	blt.n	802b04a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802af88:	45a1      	cmp	r9, r4
 802af8a:	dd5e      	ble.n	802b04a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802af8c:	f1bc 0f00 	cmp.w	ip, #0
 802af90:	db59      	blt.n	802b046 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802af92:	45e0      	cmp	r8, ip
 802af94:	dd57      	ble.n	802b046 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802af96:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802af9a:	f01e 0f01 	tst.w	lr, #1
 802af9e:	5c16      	ldrb	r6, [r2, r0]
 802afa0:	bf0c      	ite	eq
 802afa2:	f006 060f 	andeq.w	r6, r6, #15
 802afa6:	1136      	asrne	r6, r6, #4
 802afa8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802afac:	b2f6      	uxtb	r6, r6
 802afae:	f11c 0001 	adds.w	r0, ip, #1
 802afb2:	d44d      	bmi.n	802b050 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802afb4:	4580      	cmp	r8, r0
 802afb6:	dd4b      	ble.n	802b050 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802afb8:	2d00      	cmp	r5, #0
 802afba:	d04b      	beq.n	802b054 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802afbc:	f10e 0a01 	add.w	sl, lr, #1
 802afc0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802afc4:	f01a 0f01 	tst.w	sl, #1
 802afc8:	5c10      	ldrb	r0, [r2, r0]
 802afca:	bf0c      	ite	eq
 802afcc:	f000 000f 	andeq.w	r0, r0, #15
 802afd0:	1100      	asrne	r0, r0, #4
 802afd2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802afd6:	b2c0      	uxtb	r0, r0
 802afd8:	3401      	adds	r4, #1
 802afda:	d43f      	bmi.n	802b05c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802afdc:	45a1      	cmp	r9, r4
 802afde:	dd3d      	ble.n	802b05c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802afe0:	2f00      	cmp	r7, #0
 802afe2:	f000 8093 	beq.w	802b10c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802afe6:	f1bc 0f00 	cmp.w	ip, #0
 802afea:	db35      	blt.n	802b058 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802afec:	45e0      	cmp	r8, ip
 802afee:	dd33      	ble.n	802b058 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802aff0:	eb03 090e 	add.w	r9, r3, lr
 802aff4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802aff8:	f019 0f01 	tst.w	r9, #1
 802affc:	5d14      	ldrb	r4, [r2, r4]
 802affe:	bf0c      	ite	eq
 802b000:	f004 040f 	andeq.w	r4, r4, #15
 802b004:	1124      	asrne	r4, r4, #4
 802b006:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b00a:	b2e4      	uxtb	r4, r4
 802b00c:	f11c 0c01 	adds.w	ip, ip, #1
 802b010:	d427      	bmi.n	802b062 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b012:	45e0      	cmp	r8, ip
 802b014:	dd25      	ble.n	802b062 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802b016:	b335      	cbz	r5, 802b066 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802b018:	3301      	adds	r3, #1
 802b01a:	449e      	add	lr, r3
 802b01c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b020:	f01e 0f01 	tst.w	lr, #1
 802b024:	5cd2      	ldrb	r2, [r2, r3]
 802b026:	bf0c      	ite	eq
 802b028:	f002 020f 	andeq.w	r2, r2, #15
 802b02c:	1112      	asrne	r2, r2, #4
 802b02e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b032:	b2d3      	uxtb	r3, r2
 802b034:	2d0f      	cmp	r5, #15
 802b036:	d917      	bls.n	802b068 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802b038:	4b37      	ldr	r3, [pc, #220]	; (802b118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802b03a:	4a38      	ldr	r2, [pc, #224]	; (802b11c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802b03c:	4838      	ldr	r0, [pc, #224]	; (802b120 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802b03e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802b042:	f002 ff05 	bl	802de50 <__assert_func>
 802b046:	2600      	movs	r6, #0
 802b048:	e7b1      	b.n	802afae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802b04a:	2000      	movs	r0, #0
 802b04c:	4606      	mov	r6, r0
 802b04e:	e7c3      	b.n	802afd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b050:	2000      	movs	r0, #0
 802b052:	e7c1      	b.n	802afd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b054:	4628      	mov	r0, r5
 802b056:	e7bf      	b.n	802afd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802b058:	2400      	movs	r4, #0
 802b05a:	e7d7      	b.n	802b00c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802b05c:	2300      	movs	r3, #0
 802b05e:	461c      	mov	r4, r3
 802b060:	e7e8      	b.n	802b034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b062:	2300      	movs	r3, #0
 802b064:	e7e6      	b.n	802b034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802b066:	462b      	mov	r3, r5
 802b068:	2f0f      	cmp	r7, #15
 802b06a:	d8e5      	bhi.n	802b038 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b06c:	b2ad      	uxth	r5, r5
 802b06e:	b2bf      	uxth	r7, r7
 802b070:	fb05 fc07 	mul.w	ip, r5, r7
 802b074:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802b078:	012d      	lsls	r5, r5, #4
 802b07a:	b2bf      	uxth	r7, r7
 802b07c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802b080:	eba5 050c 	sub.w	r5, r5, ip
 802b084:	1bd2      	subs	r2, r2, r7
 802b086:	b2ad      	uxth	r5, r5
 802b088:	b292      	uxth	r2, r2
 802b08a:	4368      	muls	r0, r5
 802b08c:	fb06 0002 	mla	r0, r6, r2, r0
 802b090:	fb07 0404 	mla	r4, r7, r4, r0
 802b094:	fb0c 4303 	mla	r3, ip, r3, r4
 802b098:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b09c:	b3a3      	cbz	r3, 802b108 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b09e:	4a21      	ldr	r2, [pc, #132]	; (802b124 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802b0a0:	880e      	ldrh	r6, [r1, #0]
 802b0a2:	6815      	ldr	r5, [r2, #0]
 802b0a4:	1234      	asrs	r4, r6, #8
 802b0a6:	b29a      	uxth	r2, r3
 802b0a8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802b0ac:	43db      	mvns	r3, r3
 802b0ae:	b2db      	uxtb	r3, r3
 802b0b0:	fb10 f002 	smulbb	r0, r0, r2
 802b0b4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b0b8:	fb04 0403 	mla	r4, r4, r3, r0
 802b0bc:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802b0c0:	10f0      	asrs	r0, r6, #3
 802b0c2:	b2ed      	uxtb	r5, r5
 802b0c4:	00f6      	lsls	r6, r6, #3
 802b0c6:	fb17 f702 	smulbb	r7, r7, r2
 802b0ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802b0ce:	fb15 f202 	smulbb	r2, r5, r2
 802b0d2:	b2f6      	uxtb	r6, r6
 802b0d4:	b2a4      	uxth	r4, r4
 802b0d6:	fb00 7003 	mla	r0, r0, r3, r7
 802b0da:	fb06 2303 	mla	r3, r6, r3, r2
 802b0de:	b29a      	uxth	r2, r3
 802b0e0:	1c63      	adds	r3, r4, #1
 802b0e2:	b280      	uxth	r0, r0
 802b0e4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802b0e8:	1c53      	adds	r3, r2, #1
 802b0ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b0ee:	1c42      	adds	r2, r0, #1
 802b0f0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b0f4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802b0f8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b0fc:	0940      	lsrs	r0, r0, #5
 802b0fe:	4323      	orrs	r3, r4
 802b100:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802b104:	4303      	orrs	r3, r0
 802b106:	800b      	strh	r3, [r1, #0]
 802b108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b10c:	2d0f      	cmp	r5, #15
 802b10e:	d893      	bhi.n	802b038 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802b110:	463b      	mov	r3, r7
 802b112:	463c      	mov	r4, r7
 802b114:	e7aa      	b.n	802b06c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802b116:	bf00      	nop
 802b118:	08032b71 	.word	0x08032b71
 802b11c:	0803313e 	.word	0x0803313e
 802b120:	08032bf5 	.word	0x08032bf5
 802b124:	200097b0 	.word	0x200097b0

0802b128 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b12c:	ed2d 8b08 	vpush	{d8-d11}
 802b130:	b093      	sub	sp, #76	; 0x4c
 802b132:	461d      	mov	r5, r3
 802b134:	920c      	str	r2, [sp, #48]	; 0x30
 802b136:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802b138:	9107      	str	r1, [sp, #28]
 802b13a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802b13e:	9011      	str	r0, [sp, #68]	; 0x44
 802b140:	6850      	ldr	r0, [r2, #4]
 802b142:	6812      	ldr	r2, [r2, #0]
 802b144:	fb00 1303 	mla	r3, r0, r3, r1
 802b148:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b14c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b14e:	689b      	ldr	r3, [r3, #8]
 802b150:	3301      	adds	r3, #1
 802b152:	f023 0301 	bic.w	r3, r3, #1
 802b156:	9306      	str	r3, [sp, #24]
 802b158:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b15a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802b15e:	681f      	ldr	r7, [r3, #0]
 802b160:	eeb0 aa40 	vmov.f32	s20, s0
 802b164:	eef0 9a60 	vmov.f32	s19, s1
 802b168:	eeb0 9a41 	vmov.f32	s18, s2
 802b16c:	eeb0 8a62 	vmov.f32	s16, s5
 802b170:	eef0 8a43 	vmov.f32	s17, s6
 802b174:	eef0 ba44 	vmov.f32	s23, s8
 802b178:	eeb0 ba64 	vmov.f32	s22, s9
 802b17c:	eef0 aa45 	vmov.f32	s21, s10
 802b180:	9b07      	ldr	r3, [sp, #28]
 802b182:	2b00      	cmp	r3, #0
 802b184:	dc03      	bgt.n	802b18e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802b186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b188:	2b00      	cmp	r3, #0
 802b18a:	f340 8267 	ble.w	802b65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b18e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b190:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b194:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b198:	1e48      	subs	r0, r1, #1
 802b19a:	f102 3cff 	add.w	ip, r2, #4294967295
 802b19e:	2d00      	cmp	r5, #0
 802b1a0:	f340 80b8 	ble.w	802b314 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802b1a4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b1a8:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b1ac:	d406      	bmi.n	802b1bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b1ae:	4586      	cmp	lr, r0
 802b1b0:	da04      	bge.n	802b1bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b1b2:	2b00      	cmp	r3, #0
 802b1b4:	db02      	blt.n	802b1bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b1b6:	4563      	cmp	r3, ip
 802b1b8:	f2c0 80ad 	blt.w	802b316 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802b1bc:	f11e 0e01 	adds.w	lr, lr, #1
 802b1c0:	f100 80a0 	bmi.w	802b304 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b1c4:	4571      	cmp	r1, lr
 802b1c6:	f2c0 809d 	blt.w	802b304 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b1ca:	3301      	adds	r3, #1
 802b1cc:	f100 809a 	bmi.w	802b304 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b1d0:	429a      	cmp	r2, r3
 802b1d2:	f2c0 8097 	blt.w	802b304 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 802b1d6:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802b1da:	9509      	str	r5, [sp, #36]	; 0x24
 802b1dc:	46c8      	mov	r8, r9
 802b1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b1e0:	2b00      	cmp	r3, #0
 802b1e2:	f340 80b6 	ble.w	802b352 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802b1e6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802b1ea:	9308      	str	r3, [sp, #32]
 802b1ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b1ee:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b1f2:	1423      	asrs	r3, r4, #16
 802b1f4:	ea4f 4026 	mov.w	r0, r6, asr #16
 802b1f8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b1fc:	f100 813e 	bmi.w	802b47c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b200:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b204:	455b      	cmp	r3, fp
 802b206:	f280 8139 	bge.w	802b47c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b20a:	2800      	cmp	r0, #0
 802b20c:	f2c0 8136 	blt.w	802b47c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b210:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b214:	4558      	cmp	r0, fp
 802b216:	f280 8131 	bge.w	802b47c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802b21a:	9a06      	ldr	r2, [sp, #24]
 802b21c:	fb00 3302 	mla	r3, r0, r2, r3
 802b220:	0858      	lsrs	r0, r3, #1
 802b222:	07da      	lsls	r2, r3, #31
 802b224:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b228:	9a08      	ldr	r2, [sp, #32]
 802b22a:	bf54      	ite	pl
 802b22c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b230:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b234:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b238:	fa5f fc8c 	uxtb.w	ip, ip
 802b23c:	2a00      	cmp	r2, #0
 802b23e:	f000 80cb 	beq.w	802b3d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802b242:	1c58      	adds	r0, r3, #1
 802b244:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b248:	07c0      	lsls	r0, r0, #31
 802b24a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b24e:	bf54      	ite	pl
 802b250:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b254:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b258:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b25c:	fa5f fe8e 	uxtb.w	lr, lr
 802b260:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802b264:	b1b9      	cbz	r1, 802b296 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b266:	4453      	add	r3, sl
 802b268:	0858      	lsrs	r0, r3, #1
 802b26a:	07da      	lsls	r2, r3, #31
 802b26c:	5c38      	ldrb	r0, [r7, r0]
 802b26e:	bf54      	ite	pl
 802b270:	f000 000f 	andpl.w	r0, r0, #15
 802b274:	1100      	asrmi	r0, r0, #4
 802b276:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b27a:	b2c0      	uxtb	r0, r0
 802b27c:	900a      	str	r0, [sp, #40]	; 0x28
 802b27e:	1c58      	adds	r0, r3, #1
 802b280:	0843      	lsrs	r3, r0, #1
 802b282:	07c2      	lsls	r2, r0, #31
 802b284:	5cfb      	ldrb	r3, [r7, r3]
 802b286:	bf54      	ite	pl
 802b288:	f003 030f 	andpl.w	r3, r3, #15
 802b28c:	111b      	asrmi	r3, r3, #4
 802b28e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b292:	b2db      	uxtb	r3, r3
 802b294:	930e      	str	r3, [sp, #56]	; 0x38
 802b296:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802b29a:	b289      	uxth	r1, r1
 802b29c:	fb02 f301 	mul.w	r3, r2, r1
 802b2a0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b2a4:	0112      	lsls	r2, r2, #4
 802b2a6:	b289      	uxth	r1, r1
 802b2a8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b2ac:	1a40      	subs	r0, r0, r1
 802b2ae:	fa1f fe80 	uxth.w	lr, r0
 802b2b2:	1ad2      	subs	r2, r2, r3
 802b2b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 802b2b6:	b292      	uxth	r2, r2
 802b2b8:	4342      	muls	r2, r0
 802b2ba:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802b2be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b2c0:	fb01 c102 	mla	r1, r1, r2, ip
 802b2c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b2c6:	fb03 1302 	mla	r3, r3, r2, r1
 802b2ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b2ce:	2bff      	cmp	r3, #255	; 0xff
 802b2d0:	f040 8093 	bne.w	802b3fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802b2d4:	4bbe      	ldr	r3, [pc, #760]	; (802b5d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b2d6:	681a      	ldr	r2, [r3, #0]
 802b2d8:	4bbe      	ldr	r3, [pc, #760]	; (802b5d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b2da:	0951      	lsrs	r1, r2, #5
 802b2dc:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b2e0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b2e4:	430b      	orrs	r3, r1
 802b2e6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b2ea:	4313      	orrs	r3, r2
 802b2ec:	f8a8 3000 	strh.w	r3, [r8]
 802b2f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b2f2:	441c      	add	r4, r3
 802b2f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b2f6:	441e      	add	r6, r3
 802b2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b2fa:	3b01      	subs	r3, #1
 802b2fc:	f108 0802 	add.w	r8, r8, #2
 802b300:	9309      	str	r3, [sp, #36]	; 0x24
 802b302:	e76c      	b.n	802b1de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802b304:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b306:	441c      	add	r4, r3
 802b308:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b30a:	3d01      	subs	r5, #1
 802b30c:	441e      	add	r6, r3
 802b30e:	f109 0902 	add.w	r9, r9, #2
 802b312:	e744      	b.n	802b19e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802b314:	d021      	beq.n	802b35a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802b316:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802b318:	1e6b      	subs	r3, r5, #1
 802b31a:	fb00 4003 	mla	r0, r0, r3, r4
 802b31e:	1400      	asrs	r0, r0, #16
 802b320:	f53f af59 	bmi.w	802b1d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b324:	3901      	subs	r1, #1
 802b326:	4288      	cmp	r0, r1
 802b328:	f6bf af55 	bge.w	802b1d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b32c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802b32e:	fb01 6303 	mla	r3, r1, r3, r6
 802b332:	141b      	asrs	r3, r3, #16
 802b334:	f53f af4f 	bmi.w	802b1d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b338:	3a01      	subs	r2, #1
 802b33a:	4293      	cmp	r3, r2
 802b33c:	f6bf af4b 	bge.w	802b1d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802b340:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802b344:	9308      	str	r3, [sp, #32]
 802b346:	46a8      	mov	r8, r5
 802b348:	46ce      	mov	lr, r9
 802b34a:	f1b8 0f00 	cmp.w	r8, #0
 802b34e:	f300 80b5 	bgt.w	802b4bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802b352:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802b356:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b35a:	9b07      	ldr	r3, [sp, #28]
 802b35c:	2b00      	cmp	r3, #0
 802b35e:	f340 817d 	ble.w	802b65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802b362:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802b366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b36a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802b36e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b370:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802b374:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802b378:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802b37c:	eef0 6a48 	vmov.f32	s13, s16
 802b380:	ee69 7a27 	vmul.f32	s15, s18, s15
 802b384:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b388:	ee37 8a48 	vsub.f32	s16, s14, s16
 802b38c:	ee16 4a90 	vmov	r4, s13
 802b390:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802b394:	eef0 6a68 	vmov.f32	s13, s17
 802b398:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802b39c:	ee18 2a10 	vmov	r2, s16
 802b3a0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802b3a4:	fb92 f3f3 	sdiv	r3, r2, r3
 802b3a8:	ee18 2a90 	vmov	r2, s17
 802b3ac:	9327      	str	r3, [sp, #156]	; 0x9c
 802b3ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b3b0:	fb92 f3f3 	sdiv	r3, r2, r3
 802b3b4:	9328      	str	r3, [sp, #160]	; 0xa0
 802b3b6:	9b07      	ldr	r3, [sp, #28]
 802b3b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b3ba:	3b01      	subs	r3, #1
 802b3bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b3c0:	9307      	str	r3, [sp, #28]
 802b3c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b3c4:	ee16 6a90 	vmov	r6, s13
 802b3c8:	bf14      	ite	ne
 802b3ca:	461d      	movne	r5, r3
 802b3cc:	4615      	moveq	r5, r2
 802b3ce:	eef0 8a67 	vmov.f32	s17, s15
 802b3d2:	eeb0 8a47 	vmov.f32	s16, s14
 802b3d6:	e6d3      	b.n	802b180 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802b3d8:	2900      	cmp	r1, #0
 802b3da:	f43f af5c 	beq.w	802b296 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b3de:	eb0a 0003 	add.w	r0, sl, r3
 802b3e2:	0843      	lsrs	r3, r0, #1
 802b3e4:	07c0      	lsls	r0, r0, #31
 802b3e6:	5cfb      	ldrb	r3, [r7, r3]
 802b3e8:	bf54      	ite	pl
 802b3ea:	f003 030f 	andpl.w	r3, r3, #15
 802b3ee:	111b      	asrmi	r3, r3, #4
 802b3f0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b3f4:	b2db      	uxtb	r3, r3
 802b3f6:	930a      	str	r3, [sp, #40]	; 0x28
 802b3f8:	e74d      	b.n	802b296 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 802b3fa:	2b00      	cmp	r3, #0
 802b3fc:	f43f af78 	beq.w	802b2f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b400:	4a73      	ldr	r2, [pc, #460]	; (802b5d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b402:	f8b8 c000 	ldrh.w	ip, [r8]
 802b406:	6810      	ldr	r0, [r2, #0]
 802b408:	fa1f fe83 	uxth.w	lr, r3
 802b40c:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b410:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b414:	43db      	mvns	r3, r3
 802b416:	b2db      	uxtb	r3, r3
 802b418:	fb12 f20e 	smulbb	r2, r2, lr
 802b41c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b420:	fb01 2103 	mla	r1, r1, r3, r2
 802b424:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b428:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b42c:	b2c0      	uxtb	r0, r0
 802b42e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b432:	fb1b fb0e 	smulbb	fp, fp, lr
 802b436:	b289      	uxth	r1, r1
 802b438:	fb10 fe0e 	smulbb	lr, r0, lr
 802b43c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b440:	fa5f fc8c 	uxtb.w	ip, ip
 802b444:	fb02 b203 	mla	r2, r2, r3, fp
 802b448:	1c48      	adds	r0, r1, #1
 802b44a:	fb0c e303 	mla	r3, ip, r3, lr
 802b44e:	b292      	uxth	r2, r2
 802b450:	b29b      	uxth	r3, r3
 802b452:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802b456:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802b45a:	f102 0b01 	add.w	fp, r2, #1
 802b45e:	1c59      	adds	r1, r3, #1
 802b460:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802b464:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b468:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b46c:	0952      	lsrs	r2, r2, #5
 802b46e:	4301      	orrs	r1, r0
 802b470:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b474:	4311      	orrs	r1, r2
 802b476:	f8a8 1000 	strh.w	r1, [r8]
 802b47a:	e739      	b.n	802b2f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b47c:	f113 0b01 	adds.w	fp, r3, #1
 802b480:	f53f af36 	bmi.w	802b2f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b484:	45dc      	cmp	ip, fp
 802b486:	f6ff af33 	blt.w	802b2f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b48a:	f110 0b01 	adds.w	fp, r0, #1
 802b48e:	f53f af2f 	bmi.w	802b2f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b492:	45de      	cmp	lr, fp
 802b494:	f6ff af2c 	blt.w	802b2f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b498:	9a08      	ldr	r2, [sp, #32]
 802b49a:	9302      	str	r3, [sp, #8]
 802b49c:	fa0f f38e 	sxth.w	r3, lr
 802b4a0:	9301      	str	r3, [sp, #4]
 802b4a2:	fa0f f38c 	sxth.w	r3, ip
 802b4a6:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b4aa:	9105      	str	r1, [sp, #20]
 802b4ac:	9300      	str	r3, [sp, #0]
 802b4ae:	463a      	mov	r2, r7
 802b4b0:	4653      	mov	r3, sl
 802b4b2:	4641      	mov	r1, r8
 802b4b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 802b4b6:	f7ff fd57 	bl	802af68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802b4ba:	e719      	b.n	802b2f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b4bc:	9906      	ldr	r1, [sp, #24]
 802b4be:	1422      	asrs	r2, r4, #16
 802b4c0:	1433      	asrs	r3, r6, #16
 802b4c2:	fb01 2303 	mla	r3, r1, r3, r2
 802b4c6:	085a      	lsrs	r2, r3, #1
 802b4c8:	07d9      	lsls	r1, r3, #31
 802b4ca:	5cba      	ldrb	r2, [r7, r2]
 802b4cc:	bf54      	ite	pl
 802b4ce:	f002 020f 	andpl.w	r2, r2, #15
 802b4d2:	1112      	asrmi	r2, r2, #4
 802b4d4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b4d8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b4dc:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802b4e0:	b2d2      	uxtb	r2, r2
 802b4e2:	2800      	cmp	r0, #0
 802b4e4:	d062      	beq.n	802b5ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802b4e6:	f103 0a01 	add.w	sl, r3, #1
 802b4ea:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802b4ee:	f01a 0f01 	tst.w	sl, #1
 802b4f2:	5c79      	ldrb	r1, [r7, r1]
 802b4f4:	bf0c      	ite	eq
 802b4f6:	f001 010f 	andeq.w	r1, r1, #15
 802b4fa:	1109      	asrne	r1, r1, #4
 802b4fc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b500:	b2c9      	uxtb	r1, r1
 802b502:	910f      	str	r1, [sp, #60]	; 0x3c
 802b504:	f1bc 0f00 	cmp.w	ip, #0
 802b508:	d019      	beq.n	802b53e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b50a:	9908      	ldr	r1, [sp, #32]
 802b50c:	440b      	add	r3, r1
 802b50e:	0859      	lsrs	r1, r3, #1
 802b510:	f013 0f01 	tst.w	r3, #1
 802b514:	5c79      	ldrb	r1, [r7, r1]
 802b516:	bf0c      	ite	eq
 802b518:	f001 010f 	andeq.w	r1, r1, #15
 802b51c:	1109      	asrne	r1, r1, #4
 802b51e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b522:	b2c9      	uxtb	r1, r1
 802b524:	3301      	adds	r3, #1
 802b526:	910b      	str	r1, [sp, #44]	; 0x2c
 802b528:	0859      	lsrs	r1, r3, #1
 802b52a:	07db      	lsls	r3, r3, #31
 802b52c:	5c79      	ldrb	r1, [r7, r1]
 802b52e:	bf54      	ite	pl
 802b530:	f001 010f 	andpl.w	r1, r1, #15
 802b534:	1109      	asrmi	r1, r1, #4
 802b536:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b53a:	b2c9      	uxtb	r1, r1
 802b53c:	9110      	str	r1, [sp, #64]	; 0x40
 802b53e:	b280      	uxth	r0, r0
 802b540:	fa1f fc8c 	uxth.w	ip, ip
 802b544:	fb00 f30c 	mul.w	r3, r0, ip
 802b548:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802b54c:	0100      	lsls	r0, r0, #4
 802b54e:	fa1f fc8c 	uxth.w	ip, ip
 802b552:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802b556:	eba1 010c 	sub.w	r1, r1, ip
 802b55a:	fa1f fa81 	uxth.w	sl, r1
 802b55e:	1ac0      	subs	r0, r0, r3
 802b560:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b562:	b280      	uxth	r0, r0
 802b564:	4348      	muls	r0, r1
 802b566:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802b568:	fb02 020a 	mla	r2, r2, sl, r0
 802b56c:	fb0c 2c01 	mla	ip, ip, r1, r2
 802b570:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b572:	fb03 c302 	mla	r3, r3, r2, ip
 802b576:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b57a:	2bff      	cmp	r3, #255	; 0xff
 802b57c:	d12c      	bne.n	802b5d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802b57e:	4b14      	ldr	r3, [pc, #80]	; (802b5d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802b580:	681a      	ldr	r2, [r3, #0]
 802b582:	4b14      	ldr	r3, [pc, #80]	; (802b5d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802b584:	0951      	lsrs	r1, r2, #5
 802b586:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b58a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b58e:	430b      	orrs	r3, r1
 802b590:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b594:	4313      	orrs	r3, r2
 802b596:	f8ae 3000 	strh.w	r3, [lr]
 802b59a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b59c:	441c      	add	r4, r3
 802b59e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b5a0:	f10e 0e02 	add.w	lr, lr, #2
 802b5a4:	441e      	add	r6, r3
 802b5a6:	f108 38ff 	add.w	r8, r8, #4294967295
 802b5aa:	e6ce      	b.n	802b34a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802b5ac:	f1bc 0f00 	cmp.w	ip, #0
 802b5b0:	d0c5      	beq.n	802b53e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b5b2:	9908      	ldr	r1, [sp, #32]
 802b5b4:	440b      	add	r3, r1
 802b5b6:	0859      	lsrs	r1, r3, #1
 802b5b8:	07db      	lsls	r3, r3, #31
 802b5ba:	5c79      	ldrb	r1, [r7, r1]
 802b5bc:	bf54      	ite	pl
 802b5be:	f001 010f 	andpl.w	r1, r1, #15
 802b5c2:	1109      	asrmi	r1, r1, #4
 802b5c4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b5c8:	b2c9      	uxtb	r1, r1
 802b5ca:	910b      	str	r1, [sp, #44]	; 0x2c
 802b5cc:	e7b7      	b.n	802b53e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 802b5ce:	bf00      	nop
 802b5d0:	200097b0 	.word	0x200097b0
 802b5d4:	fffff800 	.word	0xfffff800
 802b5d8:	2b00      	cmp	r3, #0
 802b5da:	d0de      	beq.n	802b59a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802b5dc:	4a22      	ldr	r2, [pc, #136]	; (802b668 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802b5de:	f8be c000 	ldrh.w	ip, [lr]
 802b5e2:	6810      	ldr	r0, [r2, #0]
 802b5e4:	fa1f fa83 	uxth.w	sl, r3
 802b5e8:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b5ec:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b5f0:	43db      	mvns	r3, r3
 802b5f2:	b2db      	uxtb	r3, r3
 802b5f4:	fb12 f20a 	smulbb	r2, r2, sl
 802b5f8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b5fc:	fb01 2103 	mla	r1, r1, r3, r2
 802b600:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b604:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b608:	b2c0      	uxtb	r0, r0
 802b60a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b60e:	fa5f fc8c 	uxtb.w	ip, ip
 802b612:	fb10 f00a 	smulbb	r0, r0, sl
 802b616:	fb0c 0003 	mla	r0, ip, r3, r0
 802b61a:	b289      	uxth	r1, r1
 802b61c:	fb1b fb0a 	smulbb	fp, fp, sl
 802b620:	b280      	uxth	r0, r0
 802b622:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b626:	fb02 b203 	mla	r2, r2, r3, fp
 802b62a:	1c4b      	adds	r3, r1, #1
 802b62c:	f100 0b01 	add.w	fp, r0, #1
 802b630:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b634:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802b638:	b292      	uxth	r2, r2
 802b63a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802b63e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802b642:	ea4b 0101 	orr.w	r1, fp, r1
 802b646:	f102 0b01 	add.w	fp, r2, #1
 802b64a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b64e:	0952      	lsrs	r2, r2, #5
 802b650:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b654:	4311      	orrs	r1, r2
 802b656:	f8ae 1000 	strh.w	r1, [lr]
 802b65a:	e79e      	b.n	802b59a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x472>
 802b65c:	b013      	add	sp, #76	; 0x4c
 802b65e:	ecbd 8b08 	vpop	{d8-d11}
 802b662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b666:	bf00      	nop
 802b668:	200097b0 	.word	0x200097b0

0802b66c <CRC_Lock>:
 802b66c:	b530      	push	{r4, r5, lr}
 802b66e:	4a20      	ldr	r2, [pc, #128]	; (802b6f0 <CRC_Lock+0x84>)
 802b670:	6813      	ldr	r3, [r2, #0]
 802b672:	f023 0301 	bic.w	r3, r3, #1
 802b676:	6013      	str	r3, [r2, #0]
 802b678:	4b1e      	ldr	r3, [pc, #120]	; (802b6f4 <CRC_Lock+0x88>)
 802b67a:	681a      	ldr	r2, [r3, #0]
 802b67c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802b680:	4022      	ands	r2, r4
 802b682:	f24c 2540 	movw	r5, #49728	; 0xc240
 802b686:	42aa      	cmp	r2, r5
 802b688:	d005      	beq.n	802b696 <CRC_Lock+0x2a>
 802b68a:	681b      	ldr	r3, [r3, #0]
 802b68c:	f24c 2270 	movw	r2, #49776	; 0xc270
 802b690:	4023      	ands	r3, r4
 802b692:	4293      	cmp	r3, r2
 802b694:	d124      	bne.n	802b6e0 <CRC_Lock+0x74>
 802b696:	4b18      	ldr	r3, [pc, #96]	; (802b6f8 <CRC_Lock+0x8c>)
 802b698:	681b      	ldr	r3, [r3, #0]
 802b69a:	bb0b      	cbnz	r3, 802b6e0 <CRC_Lock+0x74>
 802b69c:	4b17      	ldr	r3, [pc, #92]	; (802b6fc <CRC_Lock+0x90>)
 802b69e:	681a      	ldr	r2, [r3, #0]
 802b6a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b6a4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802b6a8:	d00d      	beq.n	802b6c6 <CRC_Lock+0x5a>
 802b6aa:	681a      	ldr	r2, [r3, #0]
 802b6ac:	f240 4483 	movw	r4, #1155	; 0x483
 802b6b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b6b4:	42a2      	cmp	r2, r4
 802b6b6:	d006      	beq.n	802b6c6 <CRC_Lock+0x5a>
 802b6b8:	681b      	ldr	r3, [r3, #0]
 802b6ba:	f240 4285 	movw	r2, #1157	; 0x485
 802b6be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b6c2:	4293      	cmp	r3, r2
 802b6c4:	d10c      	bne.n	802b6e0 <CRC_Lock+0x74>
 802b6c6:	4b0e      	ldr	r3, [pc, #56]	; (802b700 <CRC_Lock+0x94>)
 802b6c8:	2201      	movs	r2, #1
 802b6ca:	601a      	str	r2, [r3, #0]
 802b6cc:	681a      	ldr	r2, [r3, #0]
 802b6ce:	2a00      	cmp	r2, #0
 802b6d0:	d1fc      	bne.n	802b6cc <CRC_Lock+0x60>
 802b6d2:	4b0c      	ldr	r3, [pc, #48]	; (802b704 <CRC_Lock+0x98>)
 802b6d4:	6018      	str	r0, [r3, #0]
 802b6d6:	6818      	ldr	r0, [r3, #0]
 802b6d8:	1a43      	subs	r3, r0, r1
 802b6da:	4258      	negs	r0, r3
 802b6dc:	4158      	adcs	r0, r3
 802b6de:	bd30      	pop	{r4, r5, pc}
 802b6e0:	4b09      	ldr	r3, [pc, #36]	; (802b708 <CRC_Lock+0x9c>)
 802b6e2:	2201      	movs	r2, #1
 802b6e4:	601a      	str	r2, [r3, #0]
 802b6e6:	681a      	ldr	r2, [r3, #0]
 802b6e8:	2a00      	cmp	r2, #0
 802b6ea:	d1fc      	bne.n	802b6e6 <CRC_Lock+0x7a>
 802b6ec:	4b07      	ldr	r3, [pc, #28]	; (802b70c <CRC_Lock+0xa0>)
 802b6ee:	e7f1      	b.n	802b6d4 <CRC_Lock+0x68>
 802b6f0:	e0002000 	.word	0xe0002000
 802b6f4:	e000ed00 	.word	0xe000ed00
 802b6f8:	e0042000 	.word	0xe0042000
 802b6fc:	5c001000 	.word	0x5c001000
 802b700:	58024c08 	.word	0x58024c08
 802b704:	58024c00 	.word	0x58024c00
 802b708:	40023008 	.word	0x40023008
 802b70c:	40023000 	.word	0x40023000

0802b710 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802b710:	6101      	str	r1, [r0, #16]
 802b712:	4770      	bx	lr

0802b714 <_ZN8touchgfx8Gestures4tickEv>:
 802b714:	7b83      	ldrb	r3, [r0, #14]
 802b716:	b14b      	cbz	r3, 802b72c <_ZN8touchgfx8Gestures4tickEv+0x18>
 802b718:	8903      	ldrh	r3, [r0, #8]
 802b71a:	3301      	adds	r3, #1
 802b71c:	b29b      	uxth	r3, r3
 802b71e:	2b07      	cmp	r3, #7
 802b720:	8103      	strh	r3, [r0, #8]
 802b722:	bf81      	itttt	hi
 802b724:	2300      	movhi	r3, #0
 802b726:	8143      	strhhi	r3, [r0, #10]
 802b728:	8183      	strhhi	r3, [r0, #12]
 802b72a:	7383      	strbhi	r3, [r0, #14]
 802b72c:	4770      	bx	lr
	...

0802b730 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802b730:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802b734:	4604      	mov	r4, r0
 802b736:	8880      	ldrh	r0, [r0, #4]
 802b738:	f8ad 0006 	strh.w	r0, [sp, #6]
 802b73c:	4698      	mov	r8, r3
 802b73e:	eba8 0000 	sub.w	r0, r8, r0
 802b742:	4b1c      	ldr	r3, [pc, #112]	; (802b7b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802b744:	9300      	str	r3, [sp, #0]
 802b746:	b280      	uxth	r0, r0
 802b748:	2300      	movs	r3, #0
 802b74a:	f88d 3004 	strb.w	r3, [sp, #4]
 802b74e:	b203      	sxth	r3, r0
 802b750:	2b00      	cmp	r3, #0
 802b752:	bfb8      	it	lt
 802b754:	4240      	neglt	r0, r0
 802b756:	4617      	mov	r7, r2
 802b758:	8aa2      	ldrh	r2, [r4, #20]
 802b75a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802b75e:	f8ad 800a 	strh.w	r8, [sp, #10]
 802b762:	bfb8      	it	lt
 802b764:	b203      	sxthlt	r3, r0
 802b766:	460e      	mov	r6, r1
 802b768:	4293      	cmp	r3, r2
 802b76a:	88e1      	ldrh	r1, [r4, #6]
 802b76c:	f8ad 1008 	strh.w	r1, [sp, #8]
 802b770:	f8ad 500c 	strh.w	r5, [sp, #12]
 802b774:	dc08      	bgt.n	802b788 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802b776:	1a69      	subs	r1, r5, r1
 802b778:	b289      	uxth	r1, r1
 802b77a:	b20b      	sxth	r3, r1
 802b77c:	2b00      	cmp	r3, #0
 802b77e:	bfbc      	itt	lt
 802b780:	4249      	neglt	r1, r1
 802b782:	b20b      	sxthlt	r3, r1
 802b784:	429a      	cmp	r2, r3
 802b786:	da13      	bge.n	802b7b0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802b788:	6920      	ldr	r0, [r4, #16]
 802b78a:	6803      	ldr	r3, [r0, #0]
 802b78c:	4669      	mov	r1, sp
 802b78e:	685b      	ldr	r3, [r3, #4]
 802b790:	4798      	blx	r3
 802b792:	eba8 0606 	sub.w	r6, r8, r6
 802b796:	2300      	movs	r3, #0
 802b798:	1bef      	subs	r7, r5, r7
 802b79a:	2001      	movs	r0, #1
 802b79c:	8123      	strh	r3, [r4, #8]
 802b79e:	8166      	strh	r6, [r4, #10]
 802b7a0:	81a7      	strh	r7, [r4, #12]
 802b7a2:	f8a4 8004 	strh.w	r8, [r4, #4]
 802b7a6:	80e5      	strh	r5, [r4, #6]
 802b7a8:	73a0      	strb	r0, [r4, #14]
 802b7aa:	b004      	add	sp, #16
 802b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b7b0:	2000      	movs	r0, #0
 802b7b2:	e7fa      	b.n	802b7aa <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802b7b4:	08031fc4 	.word	0x08031fc4

0802b7b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b7ba:	461e      	mov	r6, r3
 802b7bc:	1e4b      	subs	r3, r1, #1
 802b7be:	2b01      	cmp	r3, #1
 802b7c0:	b085      	sub	sp, #20
 802b7c2:	4604      	mov	r4, r0
 802b7c4:	460d      	mov	r5, r1
 802b7c6:	4617      	mov	r7, r2
 802b7c8:	d84b      	bhi.n	802b862 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b7ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b7ce:	1cd3      	adds	r3, r2, #3
 802b7d0:	b29b      	uxth	r3, r3
 802b7d2:	2b06      	cmp	r3, #6
 802b7d4:	d916      	bls.n	802b804 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b7d6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802b878 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b7da:	f8cd c004 	str.w	ip, [sp, #4]
 802b7de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b7e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b7e6:	6900      	ldr	r0, [r0, #16]
 802b7e8:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b7ec:	f04f 0c00 	mov.w	ip, #0
 802b7f0:	f88d c008 	strb.w	ip, [sp, #8]
 802b7f4:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b7f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b7fc:	6803      	ldr	r3, [r0, #0]
 802b7fe:	a901      	add	r1, sp, #4
 802b800:	689b      	ldr	r3, [r3, #8]
 802b802:	4798      	blx	r3
 802b804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b808:	1cd3      	adds	r3, r2, #3
 802b80a:	b29b      	uxth	r3, r3
 802b80c:	2b06      	cmp	r3, #6
 802b80e:	d916      	bls.n	802b83e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b810:	f8df c064 	ldr.w	ip, [pc, #100]	; 802b878 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b814:	f8cd c004 	str.w	ip, [sp, #4]
 802b818:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b81c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b820:	6920      	ldr	r0, [r4, #16]
 802b822:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b826:	f04f 0c01 	mov.w	ip, #1
 802b82a:	f88d c008 	strb.w	ip, [sp, #8]
 802b82e:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b832:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b836:	6803      	ldr	r3, [r0, #0]
 802b838:	a901      	add	r1, sp, #4
 802b83a:	689b      	ldr	r3, [r3, #8]
 802b83c:	4798      	blx	r3
 802b83e:	4b0d      	ldr	r3, [pc, #52]	; (802b874 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b840:	9301      	str	r3, [sp, #4]
 802b842:	6920      	ldr	r0, [r4, #16]
 802b844:	f88d 5008 	strb.w	r5, [sp, #8]
 802b848:	2300      	movs	r3, #0
 802b84a:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b84e:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b852:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b856:	6803      	ldr	r3, [r0, #0]
 802b858:	a901      	add	r1, sp, #4
 802b85a:	681b      	ldr	r3, [r3, #0]
 802b85c:	4798      	blx	r3
 802b85e:	b005      	add	sp, #20
 802b860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b862:	2900      	cmp	r1, #0
 802b864:	d1eb      	bne.n	802b83e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b866:	80a2      	strh	r2, [r4, #4]
 802b868:	80c6      	strh	r6, [r0, #6]
 802b86a:	60a1      	str	r1, [r4, #8]
 802b86c:	81a1      	strh	r1, [r4, #12]
 802b86e:	73a1      	strb	r1, [r4, #14]
 802b870:	e7e5      	b.n	802b83e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b872:	bf00      	nop
 802b874:	08031fb0 	.word	0x08031fb0
 802b878:	08031fd8 	.word	0x08031fd8

0802b87c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 802b87c:	10c9      	asrs	r1, r1, #3
 802b87e:	2900      	cmp	r1, #0
 802b880:	bfb8      	it	lt
 802b882:	4249      	neglt	r1, r1
 802b884:	2801      	cmp	r0, #1
 802b886:	d108      	bne.n	802b89a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802b888:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802b88c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802b890:	4601      	mov	r1, r0
 802b892:	dd02      	ble.n	802b89a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 802b894:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802b898:	4770      	bx	lr
 802b89a:	29ff      	cmp	r1, #255	; 0xff
 802b89c:	bfa8      	it	ge
 802b89e:	21ff      	movge	r1, #255	; 0xff
 802b8a0:	4608      	mov	r0, r1
 802b8a2:	4770      	bx	lr

0802b8a4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 802b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b8a8:	688c      	ldr	r4, [r1, #8]
 802b8aa:	2c00      	cmp	r4, #0
 802b8ac:	b087      	sub	sp, #28
 802b8ae:	4607      	mov	r7, r0
 802b8b0:	db2b      	blt.n	802b90a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802b8b2:	6803      	ldr	r3, [r0, #0]
 802b8b4:	691a      	ldr	r2, [r3, #16]
 802b8b6:	42a2      	cmp	r2, r4
 802b8b8:	dd27      	ble.n	802b90a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802b8ba:	685a      	ldr	r2, [r3, #4]
 802b8bc:	695e      	ldr	r6, [r3, #20]
 802b8be:	68cd      	ldr	r5, [r1, #12]
 802b8c0:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802b8c4:	f893 a008 	ldrb.w	sl, [r3, #8]
 802b8c8:	f8d1 8020 	ldr.w	r8, [r1, #32]
 802b8cc:	fb06 2604 	mla	r6, r6, r4, r2
 802b8d0:	698a      	ldr	r2, [r1, #24]
 802b8d2:	9205      	str	r2, [sp, #20]
 802b8d4:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802b8d8:	9b05      	ldr	r3, [sp, #20]
 802b8da:	6839      	ldr	r1, [r7, #0]
 802b8dc:	eb03 0c02 	add.w	ip, r3, r2
 802b8e0:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 802b8e4:	68c9      	ldr	r1, [r1, #12]
 802b8e6:	1898      	adds	r0, r3, r2
 802b8e8:	4288      	cmp	r0, r1
 802b8ea:	db02      	blt.n	802b8f2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 802b8ec:	1a8b      	subs	r3, r1, r2
 802b8ee:	2b00      	cmp	r3, #0
 802b8f0:	dd09      	ble.n	802b906 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 802b8f2:	6878      	ldr	r0, [r7, #4]
 802b8f4:	6801      	ldr	r1, [r0, #0]
 802b8f6:	9400      	str	r4, [sp, #0]
 802b8f8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 802b8fc:	4653      	mov	r3, sl
 802b8fe:	f8d1 b008 	ldr.w	fp, [r1, #8]
 802b902:	4631      	mov	r1, r6
 802b904:	47d8      	blx	fp
 802b906:	3d01      	subs	r5, #1
 802b908:	d1e4      	bne.n	802b8d4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802b90a:	b007      	add	sp, #28
 802b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b910 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802b910:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 802b914:	b90b      	cbnz	r3, 802b91a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802b916:	f001 b999 	b.w	802cc4c <_ZN8touchgfx7Outline6lineToEii>
 802b91a:	4770      	bx	lr

0802b91c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802b91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b920:	4b90      	ldr	r3, [pc, #576]	; (802bb64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802b922:	4604      	mov	r4, r0
 802b924:	2600      	movs	r6, #0
 802b926:	f100 0518 	add.w	r5, r0, #24
 802b92a:	e9c0 3100 	strd	r3, r1, [r0]
 802b92e:	b086      	sub	sp, #24
 802b930:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802b934:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802b938:	f104 0730 	add.w	r7, r4, #48	; 0x30
 802b93c:	4628      	mov	r0, r5
 802b93e:	4690      	mov	r8, r2
 802b940:	f001 fc4e 	bl	802d1e0 <_ZN8touchgfx15RenderingBufferC1Ev>
 802b944:	4638      	mov	r0, r7
 802b946:	f000 fb45 	bl	802bfd4 <_ZN8touchgfx7OutlineC1Ev>
 802b94a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 802b94e:	f001 fbef 	bl	802d130 <_ZN8touchgfx8ScanlineC1Ev>
 802b952:	2301      	movs	r3, #1
 802b954:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 802b958:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 802b95c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 802b960:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802b964:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 802b968:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 802b96c:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 802b970:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 802b974:	f001 fb8c 	bl	802d090 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 802b978:	b928      	cbnz	r0, 802b986 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 802b97a:	4b7b      	ldr	r3, [pc, #492]	; (802bb68 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802b97c:	4a7b      	ldr	r2, [pc, #492]	; (802bb6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802b97e:	212d      	movs	r1, #45	; 0x2d
 802b980:	487b      	ldr	r0, [pc, #492]	; (802bb70 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802b982:	f002 fa65 	bl	802de50 <__assert_func>
 802b986:	f9b8 2000 	ldrsh.w	r2, [r8]
 802b98a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802b98e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802b992:	9602      	str	r6, [sp, #8]
 802b994:	4410      	add	r0, r2
 802b996:	b280      	uxth	r0, r0
 802b998:	fa0f fa80 	sxth.w	sl, r0
 802b99c:	f1ba 0f00 	cmp.w	sl, #0
 802b9a0:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802b9a4:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802b9a8:	dd70      	ble.n	802ba8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802b9aa:	4591      	cmp	r9, r2
 802b9ac:	dd6e      	ble.n	802ba8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802b9ae:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802b9b2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802b9b6:	440b      	add	r3, r1
 802b9b8:	b29b      	uxth	r3, r3
 802b9ba:	b21e      	sxth	r6, r3
 802b9bc:	2e00      	cmp	r6, #0
 802b9be:	dd65      	ble.n	802ba8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802b9c0:	458e      	cmp	lr, r1
 802b9c2:	dd63      	ble.n	802ba8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802b9c4:	45d1      	cmp	r9, sl
 802b9c6:	bfb8      	it	lt
 802b9c8:	fa1f f089 	uxthlt.w	r0, r9
 802b9cc:	45b6      	cmp	lr, r6
 802b9ce:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802b9d2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802b9d6:	bfb8      	it	lt
 802b9d8:	fa1f f38e 	uxthlt.w	r3, lr
 802b9dc:	1a80      	subs	r0, r0, r2
 802b9de:	1a5b      	subs	r3, r3, r1
 802b9e0:	f8ad 000c 	strh.w	r0, [sp, #12]
 802b9e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b9e8:	f8ad 2008 	strh.w	r2, [sp, #8]
 802b9ec:	f8ad 100a 	strh.w	r1, [sp, #10]
 802b9f0:	f10d 0808 	add.w	r8, sp, #8
 802b9f4:	e898 0003 	ldmia.w	r8, {r0, r1}
 802b9f8:	ae04      	add	r6, sp, #16
 802b9fa:	e886 0003 	stmia.w	r6, {r0, r1}
 802b9fe:	f8dc 3000 	ldr.w	r3, [ip]
 802ba02:	4660      	mov	r0, ip
 802ba04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ba06:	4631      	mov	r1, r6
 802ba08:	4798      	blx	r3
 802ba0a:	6861      	ldr	r1, [r4, #4]
 802ba0c:	4640      	mov	r0, r8
 802ba0e:	3104      	adds	r1, #4
 802ba10:	f7f0 f98a 	bl	801bd28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802ba14:	4630      	mov	r0, r6
 802ba16:	f7f0 f943 	bl	801bca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802ba1a:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802ba1e:	f001 fac7 	bl	802cfb0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802ba22:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802ba26:	4638      	mov	r0, r7
 802ba28:	f000 fab0 	bl	802bf8c <_ZN8touchgfx7Outline5resetEv>
 802ba2c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802ba30:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 802ba34:	015b      	lsls	r3, r3, #5
 802ba36:	60e3      	str	r3, [r4, #12]
 802ba38:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802ba3c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802ba40:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 802ba44:	015b      	lsls	r3, r3, #5
 802ba46:	6123      	str	r3, [r4, #16]
 802ba48:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802ba4c:	015b      	lsls	r3, r3, #5
 802ba4e:	6163      	str	r3, [r4, #20]
 802ba50:	4b48      	ldr	r3, [pc, #288]	; (802bb74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 802ba52:	0152      	lsls	r2, r2, #5
 802ba54:	6818      	ldr	r0, [r3, #0]
 802ba56:	60a2      	str	r2, [r4, #8]
 802ba58:	6803      	ldr	r3, [r0, #0]
 802ba5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ba5c:	4798      	blx	r3
 802ba5e:	4606      	mov	r6, r0
 802ba60:	f7e4 fa58 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 802ba64:	6803      	ldr	r3, [r0, #0]
 802ba66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ba68:	4798      	blx	r3
 802ba6a:	4607      	mov	r7, r0
 802ba6c:	f7e4 fa52 	bl	800ff14 <_ZN8touchgfx3HAL3lcdEv>
 802ba70:	6803      	ldr	r3, [r0, #0]
 802ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ba74:	4798      	blx	r3
 802ba76:	280d      	cmp	r0, #13
 802ba78:	d855      	bhi.n	802bb26 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x20a>
 802ba7a:	e8df f000 	tbb	[pc, r0]
 802ba7e:	564c      	.short	0x564c
 802ba80:	2b6f0a67 	.word	0x2b6f0a67
 802ba84:	6060603b 	.word	0x6060603b
 802ba88:	6f6f6060 	.word	0x6f6f6060
 802ba8c:	2300      	movs	r3, #0
 802ba8e:	9303      	str	r3, [sp, #12]
 802ba90:	e7ae      	b.n	802b9f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 802ba92:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802ba96:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802ba9a:	2108      	movs	r1, #8
 802ba9c:	fb92 f1f1 	sdiv	r1, r2, r1
 802baa0:	fb07 1303 	mla	r3, r7, r3, r1
 802baa4:	441e      	add	r6, r3
 802baa6:	4253      	negs	r3, r2
 802baa8:	f003 0307 	and.w	r3, r3, #7
 802baac:	f002 0207 	and.w	r2, r2, #7
 802bab0:	bf58      	it	pl
 802bab2:	425a      	negpl	r2, r3
 802bab4:	b2d2      	uxtb	r2, r2
 802bab6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802baba:	6721      	str	r1, [r4, #112]	; 0x70
 802babc:	e9cd 1700 	strd	r1, r7, [sp]
 802bac0:	4628      	mov	r0, r5
 802bac2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802bac6:	4631      	mov	r1, r6
 802bac8:	f001 fb96 	bl	802d1f8 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802bacc:	4620      	mov	r0, r4
 802bace:	b006      	add	sp, #24
 802bad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bad4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bad8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802badc:	2104      	movs	r1, #4
 802bade:	fb92 f1f1 	sdiv	r1, r2, r1
 802bae2:	fb07 1303 	mla	r3, r7, r3, r1
 802bae6:	441e      	add	r6, r3
 802bae8:	4253      	negs	r3, r2
 802baea:	f003 0303 	and.w	r3, r3, #3
 802baee:	f002 0203 	and.w	r2, r2, #3
 802baf2:	e7dd      	b.n	802bab0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 802baf4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802baf8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bafc:	2a00      	cmp	r2, #0
 802bafe:	f04f 0102 	mov.w	r1, #2
 802bb02:	fb92 f1f1 	sdiv	r1, r2, r1
 802bb06:	f002 0201 	and.w	r2, r2, #1
 802bb0a:	fb07 1303 	mla	r3, r7, r3, r1
 802bb0e:	441e      	add	r6, r3
 802bb10:	bfb8      	it	lt
 802bb12:	4252      	neglt	r2, r2
 802bb14:	e7ce      	b.n	802bab4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 802bb16:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb1a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bb1e:	437b      	muls	r3, r7
 802bb20:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802bb24:	441e      	add	r6, r3
 802bb26:	2200      	movs	r2, #0
 802bb28:	e7c5      	b.n	802bab6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 802bb2a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb2e:	fb07 f203 	mul.w	r2, r7, r3
 802bb32:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802bb36:	2103      	movs	r1, #3
 802bb38:	fb13 2301 	smlabb	r3, r3, r1, r2
 802bb3c:	e7f2      	b.n	802bb24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bb3e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb42:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bb46:	fb07 2303 	mla	r3, r7, r3, r2
 802bb4a:	e7eb      	b.n	802bb24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bb4c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802bb50:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802bb54:	437b      	muls	r3, r7
 802bb56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802bb5a:	e7e3      	b.n	802bb24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 802bb5c:	4b06      	ldr	r3, [pc, #24]	; (802bb78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 802bb5e:	4a03      	ldr	r2, [pc, #12]	; (802bb6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802bb60:	216c      	movs	r1, #108	; 0x6c
 802bb62:	e70d      	b.n	802b980 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 802bb64:	08033430 	.word	0x08033430
 802bb68:	08033379 	.word	0x08033379
 802bb6c:	08033438 	.word	0x08033438
 802bb70:	080333d5 	.word	0x080333d5
 802bb74:	200097a8 	.word	0x200097a8
 802bb78:	08033409 	.word	0x08033409

0802bb7c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802bb7c:	6812      	ldr	r2, [r2, #0]
 802bb7e:	2a00      	cmp	r2, #0
 802bb80:	db0b      	blt.n	802bb9a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802bb82:	9800      	ldr	r0, [sp, #0]
 802bb84:	6800      	ldr	r0, [r0, #0]
 802bb86:	4290      	cmp	r0, r2
 802bb88:	bfd4      	ite	le
 802bb8a:	2002      	movle	r0, #2
 802bb8c:	2000      	movgt	r0, #0
 802bb8e:	680a      	ldr	r2, [r1, #0]
 802bb90:	2a00      	cmp	r2, #0
 802bb92:	da04      	bge.n	802bb9e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 802bb94:	f040 0004 	orr.w	r0, r0, #4
 802bb98:	4770      	bx	lr
 802bb9a:	2001      	movs	r0, #1
 802bb9c:	e7f7      	b.n	802bb8e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802bb9e:	681b      	ldr	r3, [r3, #0]
 802bba0:	4293      	cmp	r3, r2
 802bba2:	bfd8      	it	le
 802bba4:	f040 0008 	orrle.w	r0, r0, #8
 802bba8:	4770      	bx	lr
	...

0802bbac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802bbac:	b510      	push	{r4, lr}
 802bbae:	4b07      	ldr	r3, [pc, #28]	; (802bbcc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802bbb0:	781b      	ldrb	r3, [r3, #0]
 802bbb2:	2b01      	cmp	r3, #1
 802bbb4:	d108      	bne.n	802bbc8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802bbb6:	6843      	ldr	r3, [r0, #4]
 802bbb8:	6814      	ldr	r4, [r2, #0]
 802bbba:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802bbbe:	680b      	ldr	r3, [r1, #0]
 802bbc0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802bbc4:	6013      	str	r3, [r2, #0]
 802bbc6:	600c      	str	r4, [r1, #0]
 802bbc8:	bd10      	pop	{r4, pc}
 802bbca:	bf00      	nop
 802bbcc:	200097a0 	.word	0x200097a0

0802bbd0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802bbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bbd2:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bbd6:	b085      	sub	sp, #20
 802bbd8:	4604      	mov	r4, r0
 802bbda:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802bbde:	b33b      	cbz	r3, 802bc30 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 802bbe0:	aa02      	add	r2, sp, #8
 802bbe2:	a903      	add	r1, sp, #12
 802bbe4:	f7ff ffe2 	bl	802bbac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802bbe8:	68a3      	ldr	r3, [r4, #8]
 802bbea:	9e03      	ldr	r6, [sp, #12]
 802bbec:	9f02      	ldr	r7, [sp, #8]
 802bbee:	1af6      	subs	r6, r6, r3
 802bbf0:	68e3      	ldr	r3, [r4, #12]
 802bbf2:	9603      	str	r6, [sp, #12]
 802bbf4:	1aff      	subs	r7, r7, r3
 802bbf6:	f104 0314 	add.w	r3, r4, #20
 802bbfa:	9300      	str	r3, [sp, #0]
 802bbfc:	aa02      	add	r2, sp, #8
 802bbfe:	f104 0310 	add.w	r3, r4, #16
 802bc02:	a903      	add	r1, sp, #12
 802bc04:	4620      	mov	r0, r4
 802bc06:	9702      	str	r7, [sp, #8]
 802bc08:	f7ff ffb8 	bl	802bb7c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802bc0c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802bc10:	4605      	mov	r5, r0
 802bc12:	b97b      	cbnz	r3, 802bc34 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802bc14:	463a      	mov	r2, r7
 802bc16:	4631      	mov	r1, r6
 802bc18:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bc1c:	f7ff fe78 	bl	802b910 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bc20:	9b03      	ldr	r3, [sp, #12]
 802bc22:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802bc26:	9b02      	ldr	r3, [sp, #8]
 802bc28:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 802bc2c:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802bc30:	b005      	add	sp, #20
 802bc32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bc34:	b110      	cbz	r0, 802bc3c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802bc36:	ea13 0200 	ands.w	r2, r3, r0
 802bc3a:	d11c      	bne.n	802bc76 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802bc3c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 802bc40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 802bc44:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802bc48:	b188      	cbz	r0, 802bc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802bc4a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802bc4e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802bc52:	b913      	cbnz	r3, 802bc5a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802bc54:	4630      	mov	r0, r6
 802bc56:	f001 f829 	bl	802ccac <_ZN8touchgfx7Outline6moveToEii>
 802bc5a:	2300      	movs	r3, #0
 802bc5c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bc60:	2301      	movs	r3, #1
 802bc62:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802bc66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802bc6a:	4630      	mov	r0, r6
 802bc6c:	e7d6      	b.n	802bc1c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802bc6e:	4630      	mov	r0, r6
 802bc70:	f7ff fe4e 	bl	802b910 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bc74:	e7f7      	b.n	802bc66 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802bc76:	4615      	mov	r5, r2
 802bc78:	e7d2      	b.n	802bc20 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802bc7a <_ZN8touchgfx6Canvas5closeEv>:
 802bc7a:	b538      	push	{r3, r4, r5, lr}
 802bc7c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802bc80:	4604      	mov	r4, r0
 802bc82:	b993      	cbnz	r3, 802bcaa <_ZN8touchgfx6Canvas5closeEv+0x30>
 802bc84:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802bc88:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802bc8c:	4213      	tst	r3, r2
 802bc8e:	d10c      	bne.n	802bcaa <_ZN8touchgfx6Canvas5closeEv+0x30>
 802bc90:	f100 0530 	add.w	r5, r0, #48	; 0x30
 802bc94:	b123      	cbz	r3, 802bca0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802bc96:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802bc9a:	4628      	mov	r0, r5
 802bc9c:	f7ff fe38 	bl	802b910 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bca0:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802bca4:	4628      	mov	r0, r5
 802bca6:	f7ff fe33 	bl	802b910 <_ZN8touchgfx10Rasterizer6lineToEii>
 802bcaa:	2300      	movs	r3, #0
 802bcac:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bcb0:	bd38      	pop	{r3, r4, r5, pc}

0802bcb2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802bcb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bcb4:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bcb8:	b085      	sub	sp, #20
 802bcba:	4604      	mov	r4, r0
 802bcbc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802bcc0:	b353      	cbz	r3, 802bd18 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802bcc2:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802bcc6:	b90b      	cbnz	r3, 802bccc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802bcc8:	f7ff ffd7 	bl	802bc7a <_ZN8touchgfx6Canvas5closeEv>
 802bccc:	aa02      	add	r2, sp, #8
 802bcce:	a903      	add	r1, sp, #12
 802bcd0:	4620      	mov	r0, r4
 802bcd2:	f7ff ff6b 	bl	802bbac <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802bcd6:	68a3      	ldr	r3, [r4, #8]
 802bcd8:	9d03      	ldr	r5, [sp, #12]
 802bcda:	9e02      	ldr	r6, [sp, #8]
 802bcdc:	1aed      	subs	r5, r5, r3
 802bcde:	68e3      	ldr	r3, [r4, #12]
 802bce0:	9503      	str	r5, [sp, #12]
 802bce2:	1af6      	subs	r6, r6, r3
 802bce4:	f104 0314 	add.w	r3, r4, #20
 802bce8:	9300      	str	r3, [sp, #0]
 802bcea:	aa02      	add	r2, sp, #8
 802bcec:	f104 0310 	add.w	r3, r4, #16
 802bcf0:	a903      	add	r1, sp, #12
 802bcf2:	4620      	mov	r0, r4
 802bcf4:	9602      	str	r6, [sp, #8]
 802bcf6:	f7ff ff41 	bl	802bb7c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802bcfa:	4607      	mov	r7, r0
 802bcfc:	b170      	cbz	r0, 802bd1c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802bcfe:	2301      	movs	r3, #1
 802bd00:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bd04:	9a03      	ldr	r2, [sp, #12]
 802bd06:	9b02      	ldr	r3, [sp, #8]
 802bd08:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802bd0c:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802bd10:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 802bd14:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 802bd18:	b005      	add	sp, #20
 802bd1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bd1c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802bd20:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 802bd24:	b92b      	cbnz	r3, 802bd32 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802bd26:	4632      	mov	r2, r6
 802bd28:	4629      	mov	r1, r5
 802bd2a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bd2e:	f000 ffbd 	bl	802ccac <_ZN8touchgfx7Outline6moveToEii>
 802bd32:	2300      	movs	r3, #0
 802bd34:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802bd38:	2301      	movs	r3, #1
 802bd3a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802bd3e:	e7e1      	b.n	802bd04 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802bd40 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bd44:	b087      	sub	sp, #28
 802bd46:	4604      	mov	r4, r0
 802bd48:	9105      	str	r1, [sp, #20]
 802bd4a:	f001 f8f6 	bl	802cf3a <_ZN8touchgfx7Outline8getCellsEv>
 802bd4e:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802bd52:	4605      	mov	r5, r0
 802bd54:	f1b9 0f00 	cmp.w	r9, #0
 802bd58:	d103      	bne.n	802bd62 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802bd5a:	2001      	movs	r0, #1
 802bd5c:	b007      	add	sp, #28
 802bd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bd62:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802bd66:	2e00      	cmp	r6, #0
 802bd68:	d139      	bne.n	802bdde <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802bd6a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802bd6e:	4640      	mov	r0, r8
 802bd70:	f001 f9c8 	bl	802d104 <_ZN8touchgfx8Scanline5resetEv>
 802bd74:	f109 33ff 	add.w	r3, r9, #4294967295
 802bd78:	f105 0708 	add.w	r7, r5, #8
 802bd7c:	9303      	str	r3, [sp, #12]
 802bd7e:	f9b5 b000 	ldrsh.w	fp, [r5]
 802bd82:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802bd86:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802bd8a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802bd8e:	46da      	mov	sl, fp
 802bd90:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802bd94:	9b03      	ldr	r3, [sp, #12]
 802bd96:	9504      	str	r5, [sp, #16]
 802bd98:	3b01      	subs	r3, #1
 802bd9a:	9303      	str	r3, [sp, #12]
 802bd9c:	3301      	adds	r3, #1
 802bd9e:	4416      	add	r6, r2
 802bda0:	463d      	mov	r5, r7
 802bda2:	d01e      	beq.n	802bde2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802bda4:	3708      	adds	r7, #8
 802bda6:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802bdaa:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802bdae:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802bdb2:	4290      	cmp	r0, r2
 802bdb4:	d11e      	bne.n	802bdf4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802bdb6:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802bdba:	4411      	add	r1, r2
 802bdbc:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802bdc0:	e7e8      	b.n	802bd94 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802bdc2:	1c91      	adds	r1, r2, #2
 802bdc4:	f04f 0301 	mov.w	r3, #1
 802bdc8:	65e1      	str	r1, [r4, #92]	; 0x5c
 802bdca:	8053      	strh	r3, [r2, #2]
 802bdcc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802bdce:	1c91      	adds	r1, r2, #2
 802bdd0:	65a1      	str	r1, [r4, #88]	; 0x58
 802bdd2:	f8a2 b002 	strh.w	fp, [r2, #2]
 802bdd6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802bdd8:	3201      	adds	r2, #1
 802bdda:	6562      	str	r2, [r4, #84]	; 0x54
 802bddc:	e03a      	b.n	802be54 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802bdde:	2000      	movs	r0, #0
 802bde0:	e7bc      	b.n	802bd5c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802bde2:	b951      	cbnz	r1, 802bdfa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802bde4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802bde6:	2b00      	cmp	r3, #0
 802bde8:	d0b7      	beq.n	802bd5a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802bdea:	4641      	mov	r1, r8
 802bdec:	9805      	ldr	r0, [sp, #20]
 802bdee:	f7ff fd59 	bl	802b8a4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802bdf2:	e7b2      	b.n	802bd5a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802bdf4:	2900      	cmp	r1, #0
 802bdf6:	d035      	beq.n	802be64 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802bdf8:	9504      	str	r5, [sp, #16]
 802bdfa:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802bdfe:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802be02:	f7ff fd3b 	bl	802b87c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802be06:	4605      	mov	r5, r0
 802be08:	b330      	cbz	r0, 802be58 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802be0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802be0c:	b182      	cbz	r2, 802be30 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802be0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802be10:	4591      	cmp	r9, r2
 802be12:	d00d      	beq.n	802be30 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802be14:	4641      	mov	r1, r8
 802be16:	9805      	ldr	r0, [sp, #20]
 802be18:	f7ff fd44 	bl	802b8a4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802be1c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802be20:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802be22:	65e2      	str	r2, [r4, #92]	; 0x5c
 802be24:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802be28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802be2a:	65a2      	str	r2, [r4, #88]	; 0x58
 802be2c:	2300      	movs	r3, #0
 802be2e:	6563      	str	r3, [r4, #84]	; 0x54
 802be30:	f1bb 0f00 	cmp.w	fp, #0
 802be34:	db10      	blt.n	802be58 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802be36:	f001 f939 	bl	802d0ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802be3a:	4583      	cmp	fp, r0
 802be3c:	da0c      	bge.n	802be58 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802be3e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802be40:	f802 500b 	strb.w	r5, [r2, fp]
 802be44:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802be46:	3201      	adds	r2, #1
 802be48:	4593      	cmp	fp, r2
 802be4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802be4c:	d1b9      	bne.n	802bdc2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802be4e:	8811      	ldrh	r1, [r2, #0]
 802be50:	3101      	adds	r1, #1
 802be52:	8011      	strh	r1, [r2, #0]
 802be54:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802be58:	9b03      	ldr	r3, [sp, #12]
 802be5a:	3301      	adds	r3, #1
 802be5c:	d0c2      	beq.n	802bde4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802be5e:	9d04      	ldr	r5, [sp, #16]
 802be60:	f10b 0a01 	add.w	sl, fp, #1
 802be64:	f9b5 3000 	ldrsh.w	r3, [r5]
 802be68:	4553      	cmp	r3, sl
 802be6a:	dd88      	ble.n	802bd7e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802be6c:	01b1      	lsls	r1, r6, #6
 802be6e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802be72:	f7ff fd03 	bl	802b87c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802be76:	4683      	mov	fp, r0
 802be78:	2800      	cmp	r0, #0
 802be7a:	d080      	beq.n	802bd7e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802be7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802be7e:	b183      	cbz	r3, 802bea2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802be80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802be82:	4599      	cmp	r9, r3
 802be84:	d00d      	beq.n	802bea2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802be86:	4641      	mov	r1, r8
 802be88:	9805      	ldr	r0, [sp, #20]
 802be8a:	f7ff fd0b 	bl	802b8a4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802be8e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802be92:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802be96:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802be98:	65e3      	str	r3, [r4, #92]	; 0x5c
 802be9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802be9c:	65a3      	str	r3, [r4, #88]	; 0x58
 802be9e:	2300      	movs	r3, #0
 802bea0:	6563      	str	r3, [r4, #84]	; 0x54
 802bea2:	f9b5 3000 	ldrsh.w	r3, [r5]
 802bea6:	f8cd b000 	str.w	fp, [sp]
 802beaa:	eba3 030a 	sub.w	r3, r3, sl
 802beae:	464a      	mov	r2, r9
 802beb0:	4651      	mov	r1, sl
 802beb2:	4640      	mov	r0, r8
 802beb4:	f001 f952 	bl	802d15c <_ZN8touchgfx8Scanline7addSpanEiijj>
 802beb8:	e761      	b.n	802bd7e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802beba <_ZN8touchgfx6Canvas6renderEh>:
 802beba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bebc:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802bec0:	4604      	mov	r4, r0
 802bec2:	460d      	mov	r5, r1
 802bec4:	b913      	cbnz	r3, 802becc <_ZN8touchgfx6Canvas6renderEh+0x12>
 802bec6:	2001      	movs	r0, #1
 802bec8:	b003      	add	sp, #12
 802beca:	bd30      	pop	{r4, r5, pc}
 802becc:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802bed0:	2b00      	cmp	r3, #0
 802bed2:	d12f      	bne.n	802bf34 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 802bed4:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802bed8:	2b00      	cmp	r3, #0
 802beda:	d0f4      	beq.n	802bec6 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802bedc:	6840      	ldr	r0, [r0, #4]
 802bede:	6803      	ldr	r3, [r0, #0]
 802bee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802bee2:	4798      	blx	r3
 802bee4:	fb10 f105 	smulbb	r1, r0, r5
 802bee8:	b288      	uxth	r0, r1
 802beea:	1c41      	adds	r1, r0, #1
 802beec:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802bef0:	120d      	asrs	r5, r1, #8
 802bef2:	d0e8      	beq.n	802bec6 <_ZN8touchgfx6Canvas6renderEh+0xc>
 802bef4:	4620      	mov	r0, r4
 802bef6:	f7ff fec0 	bl	802bc7a <_ZN8touchgfx6Canvas5closeEv>
 802befa:	6860      	ldr	r0, [r4, #4]
 802befc:	6803      	ldr	r3, [r0, #0]
 802befe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bf00:	4798      	blx	r3
 802bf02:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802bf06:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802bf0a:	80c3      	strh	r3, [r0, #6]
 802bf0c:	8082      	strh	r2, [r0, #4]
 802bf0e:	6860      	ldr	r0, [r4, #4]
 802bf10:	6803      	ldr	r3, [r0, #0]
 802bf12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bf14:	4798      	blx	r3
 802bf16:	7205      	strb	r5, [r0, #8]
 802bf18:	6860      	ldr	r0, [r4, #4]
 802bf1a:	6803      	ldr	r3, [r0, #0]
 802bf1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bf1e:	4798      	blx	r3
 802bf20:	f104 0318 	add.w	r3, r4, #24
 802bf24:	e9cd 3000 	strd	r3, r0, [sp]
 802bf28:	4669      	mov	r1, sp
 802bf2a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802bf2e:	f7ff ff07 	bl	802bd40 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802bf32:	e7c9      	b.n	802bec8 <_ZN8touchgfx6Canvas6renderEh+0xe>
 802bf34:	2000      	movs	r0, #0
 802bf36:	e7c7      	b.n	802bec8 <_ZN8touchgfx6Canvas6renderEh+0xe>

0802bf38 <_ZN8touchgfx6CanvasD1Ev>:
 802bf38:	b538      	push	{r3, r4, r5, lr}
 802bf3a:	4605      	mov	r5, r0
 802bf3c:	4b08      	ldr	r3, [pc, #32]	; (802bf60 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802bf3e:	f845 3b30 	str.w	r3, [r5], #48
 802bf42:	4b08      	ldr	r3, [pc, #32]	; (802bf64 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802bf44:	4604      	mov	r4, r0
 802bf46:	6818      	ldr	r0, [r3, #0]
 802bf48:	6803      	ldr	r3, [r0, #0]
 802bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bf4c:	4798      	blx	r3
 802bf4e:	4628      	mov	r0, r5
 802bf50:	f000 f814 	bl	802bf7c <_ZN8touchgfx7OutlineD1Ev>
 802bf54:	f104 0018 	add.w	r0, r4, #24
 802bf58:	f001 f939 	bl	802d1ce <_ZN8touchgfx15RenderingBufferD1Ev>
 802bf5c:	4620      	mov	r0, r4
 802bf5e:	bd38      	pop	{r3, r4, r5, pc}
 802bf60:	08033430 	.word	0x08033430
 802bf64:	200097a8 	.word	0x200097a8

0802bf68 <_ZN8touchgfx6CanvasD0Ev>:
 802bf68:	b510      	push	{r4, lr}
 802bf6a:	4604      	mov	r4, r0
 802bf6c:	f7ff ffe4 	bl	802bf38 <_ZN8touchgfx6CanvasD1Ev>
 802bf70:	4620      	mov	r0, r4
 802bf72:	21bc      	movs	r1, #188	; 0xbc
 802bf74:	f001 f94d 	bl	802d212 <_ZdlPvj>
 802bf78:	4620      	mov	r0, r4
 802bf7a:	bd10      	pop	{r4, pc}

0802bf7c <_ZN8touchgfx7OutlineD1Ev>:
 802bf7c:	4770      	bx	lr

0802bf7e <_ZN8touchgfx7OutlineD0Ev>:
 802bf7e:	b510      	push	{r4, lr}
 802bf80:	2148      	movs	r1, #72	; 0x48
 802bf82:	4604      	mov	r4, r0
 802bf84:	f001 f945 	bl	802d212 <_ZdlPvj>
 802bf88:	4620      	mov	r0, r4
 802bf8a:	bd10      	pop	{r4, pc}

0802bf8c <_ZN8touchgfx7Outline5resetEv>:
 802bf8c:	b510      	push	{r4, lr}
 802bf8e:	4604      	mov	r4, r0
 802bf90:	f001 f8a4 	bl	802d0dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802bf94:	60e0      	str	r0, [r4, #12]
 802bf96:	f001 f8a7 	bl	802d0e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802bf9a:	68e3      	ldr	r3, [r4, #12]
 802bf9c:	6123      	str	r3, [r4, #16]
 802bf9e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802bfa2:	82a3      	strh	r3, [r4, #20]
 802bfa4:	82e3      	strh	r3, [r4, #22]
 802bfa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802bfa8:	f023 0301 	bic.w	r3, r3, #1
 802bfac:	f043 0302 	orr.w	r3, r3, #2
 802bfb0:	63e3      	str	r3, [r4, #60]	; 0x3c
 802bfb2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802bfb6:	2200      	movs	r2, #0
 802bfb8:	08c0      	lsrs	r0, r0, #3
 802bfba:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802bfbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802bfc2:	6060      	str	r0, [r4, #4]
 802bfc4:	60a2      	str	r2, [r4, #8]
 802bfc6:	8322      	strh	r2, [r4, #24]
 802bfc8:	8362      	strh	r2, [r4, #26]
 802bfca:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802bfce:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802bfd2:	bd10      	pop	{r4, pc}

0802bfd4 <_ZN8touchgfx7OutlineC1Ev>:
 802bfd4:	b510      	push	{r4, lr}
 802bfd6:	4b0f      	ldr	r3, [pc, #60]	; (802c014 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802bfd8:	6003      	str	r3, [r0, #0]
 802bfda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802bfde:	2300      	movs	r3, #0
 802bfe0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802bfe4:	4604      	mov	r4, r0
 802bfe6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802bfea:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802bfee:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802bff2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802bff6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802bffa:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802bffe:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802c002:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802c006:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802c00a:	f7ff ffbf 	bl	802bf8c <_ZN8touchgfx7Outline5resetEv>
 802c00e:	4620      	mov	r0, r4
 802c010:	bd10      	pop	{r4, pc}
 802c012:	bf00      	nop
 802c014:	08033500 	.word	0x08033500

0802c018 <_ZN8touchgfx7Outline10renderLineEiiii>:
 802c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c01c:	b095      	sub	sp, #84	; 0x54
 802c01e:	4604      	mov	r4, r0
 802c020:	981e      	ldr	r0, [sp, #120]	; 0x78
 802c022:	9304      	str	r3, [sp, #16]
 802c024:	1153      	asrs	r3, r2, #5
 802c026:	9300      	str	r3, [sp, #0]
 802c028:	1143      	asrs	r3, r0, #5
 802c02a:	930c      	str	r3, [sp, #48]	; 0x30
 802c02c:	f000 031f 	and.w	r3, r0, #31
 802c030:	9303      	str	r3, [sp, #12]
 802c032:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802c034:	1155      	asrs	r5, r2, #5
 802c036:	42ab      	cmp	r3, r5
 802c038:	bfc4      	itt	gt
 802c03a:	462b      	movgt	r3, r5
 802c03c:	6323      	strgt	r3, [r4, #48]	; 0x30
 802c03e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c040:	1155      	asrs	r5, r2, #5
 802c042:	42ab      	cmp	r3, r5
 802c044:	bfde      	ittt	le
 802c046:	462b      	movle	r3, r5
 802c048:	3301      	addle	r3, #1
 802c04a:	63a3      	strle	r3, [r4, #56]	; 0x38
 802c04c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802c04e:	1145      	asrs	r5, r0, #5
 802c050:	42ab      	cmp	r3, r5
 802c052:	bfc4      	itt	gt
 802c054:	462b      	movgt	r3, r5
 802c056:	6323      	strgt	r3, [r4, #48]	; 0x30
 802c058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c05a:	1145      	asrs	r5, r0, #5
 802c05c:	42ab      	cmp	r3, r5
 802c05e:	bfde      	ittt	le
 802c060:	462b      	movle	r3, r5
 802c062:	3301      	addle	r3, #1
 802c064:	63a3      	strle	r3, [r4, #56]	; 0x38
 802c066:	9b04      	ldr	r3, [sp, #16]
 802c068:	1157      	asrs	r7, r2, #5
 802c06a:	eba3 0a01 	sub.w	sl, r3, r1
 802c06e:	1143      	asrs	r3, r0, #5
 802c070:	429f      	cmp	r7, r3
 802c072:	f002 061f 	and.w	r6, r2, #31
 802c076:	ea4f 1561 	mov.w	r5, r1, asr #5
 802c07a:	f040 8122 	bne.w	802c2c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2aa>
 802c07e:	9b04      	ldr	r3, [sp, #16]
 802c080:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802c084:	9b03      	ldr	r3, [sp, #12]
 802c086:	429e      	cmp	r6, r3
 802c088:	d131      	bne.n	802c0ee <_ZN8touchgfx7Outline10renderLineEiiii+0xd6>
 802c08a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802c08e:	f9bd 2000 	ldrsh.w	r2, [sp]
 802c092:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c096:	fa0f fb8b 	sxth.w	fp, fp
 802c09a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c09e:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802c0a2:	4281      	cmp	r1, r0
 802c0a4:	f000 80eb 	beq.w	802c27e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c0a8:	8b60      	ldrh	r0, [r4, #26]
 802c0aa:	8b21      	ldrh	r1, [r4, #24]
 802c0ac:	4301      	orrs	r1, r0
 802c0ae:	d00b      	beq.n	802c0c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c0b0:	2b00      	cmp	r3, #0
 802c0b2:	db09      	blt.n	802c0c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c0b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c0b6:	428b      	cmp	r3, r1
 802c0b8:	da06      	bge.n	802c0c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c0ba:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c0be:	4299      	cmp	r1, r3
 802c0c0:	d308      	bcc.n	802c0d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc>
 802c0c2:	2301      	movs	r3, #1
 802c0c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c0c8:	f8a4 b014 	strh.w	fp, [r4, #20]
 802c0cc:	2300      	movs	r3, #0
 802c0ce:	82e2      	strh	r2, [r4, #22]
 802c0d0:	8323      	strh	r3, [r4, #24]
 802c0d2:	e01f      	b.n	802c114 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802c0d4:	f104 0314 	add.w	r3, r4, #20
 802c0d8:	cb03      	ldmia	r3!, {r0, r1}
 802c0da:	6925      	ldr	r5, [r4, #16]
 802c0dc:	6028      	str	r0, [r5, #0]
 802c0de:	6069      	str	r1, [r5, #4]
 802c0e0:	6923      	ldr	r3, [r4, #16]
 802c0e2:	3308      	adds	r3, #8
 802c0e4:	6123      	str	r3, [r4, #16]
 802c0e6:	68a3      	ldr	r3, [r4, #8]
 802c0e8:	3301      	adds	r3, #1
 802c0ea:	60a3      	str	r3, [r4, #8]
 802c0ec:	e7ec      	b.n	802c0c8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 802c0ee:	9b04      	ldr	r3, [sp, #16]
 802c0f0:	8b20      	ldrh	r0, [r4, #24]
 802c0f2:	8b62      	ldrh	r2, [r4, #26]
 802c0f4:	f003 031f 	and.w	r3, r3, #31
 802c0f8:	9305      	str	r3, [sp, #20]
 802c0fa:	9b03      	ldr	r3, [sp, #12]
 802c0fc:	45ab      	cmp	fp, r5
 802c0fe:	f001 011f 	and.w	r1, r1, #31
 802c102:	eba3 0306 	sub.w	r3, r3, r6
 802c106:	d107      	bne.n	802c118 <_ZN8touchgfx7Outline10renderLineEiiii+0x100>
 802c108:	4418      	add	r0, r3
 802c10a:	8320      	strh	r0, [r4, #24]
 802c10c:	9805      	ldr	r0, [sp, #20]
 802c10e:	4401      	add	r1, r0
 802c110:	fb03 2301 	mla	r3, r3, r1, r2
 802c114:	8363      	strh	r3, [r4, #26]
 802c116:	e0b2      	b.n	802c27e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c118:	f1ba 0f00 	cmp.w	sl, #0
 802c11c:	db35      	blt.n	802c18a <_ZN8touchgfx7Outline10renderLineEiiii+0x172>
 802c11e:	2701      	movs	r7, #1
 802c120:	f1c1 0c20 	rsb	ip, r1, #32
 802c124:	9702      	str	r7, [sp, #8]
 802c126:	fb03 f30c 	mul.w	r3, r3, ip
 802c12a:	2720      	movs	r7, #32
 802c12c:	9701      	str	r7, [sp, #4]
 802c12e:	fb93 fcfa 	sdiv	ip, r3, sl
 802c132:	9f01      	ldr	r7, [sp, #4]
 802c134:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802c138:	fb0a 331c 	mls	r3, sl, ip, r3
 802c13c:	2b00      	cmp	r3, #0
 802c13e:	bfb8      	it	lt
 802c140:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802c144:	4439      	add	r1, r7
 802c146:	fb0c 2101 	mla	r1, ip, r1, r2
 802c14a:	9a02      	ldr	r2, [sp, #8]
 802c14c:	4415      	add	r5, r2
 802c14e:	f9bd 2000 	ldrsh.w	r2, [sp]
 802c152:	9200      	str	r2, [sp, #0]
 802c154:	ea4f 4702 	mov.w	r7, r2, lsl #16
 802c158:	9704      	str	r7, [sp, #16]
 802c15a:	9a04      	ldr	r2, [sp, #16]
 802c15c:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 802c160:	fa0f fe85 	sxth.w	lr, r5
 802c164:	4460      	add	r0, ip
 802c166:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802c16a:	eb0e 0902 	add.w	r9, lr, r2
 802c16e:	bfb8      	it	lt
 802c170:	4453      	addlt	r3, sl
 802c172:	b200      	sxth	r0, r0
 802c174:	b209      	sxth	r1, r1
 802c176:	454f      	cmp	r7, r9
 802c178:	8320      	strh	r0, [r4, #24]
 802c17a:	8361      	strh	r1, [r4, #26]
 802c17c:	d10d      	bne.n	802c19a <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 802c17e:	4ba1      	ldr	r3, [pc, #644]	; (802c404 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ec>)
 802c180:	4aa1      	ldr	r2, [pc, #644]	; (802c408 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f0>)
 802c182:	48a2      	ldr	r0, [pc, #648]	; (802c40c <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802c184:	2177      	movs	r1, #119	; 0x77
 802c186:	f001 fe63 	bl	802de50 <__assert_func>
 802c18a:	f04f 37ff 	mov.w	r7, #4294967295
 802c18e:	9702      	str	r7, [sp, #8]
 802c190:	434b      	muls	r3, r1
 802c192:	f1ca 0a00 	rsb	sl, sl, #0
 802c196:	2700      	movs	r7, #0
 802c198:	e7c8      	b.n	802c12c <_ZN8touchgfx7Outline10renderLineEiiii+0x114>
 802c19a:	ea50 0201 	orrs.w	r2, r0, r1
 802c19e:	d00c      	beq.n	802c1ba <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c1a0:	f1b8 0f00 	cmp.w	r8, #0
 802c1a4:	db09      	blt.n	802c1ba <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c1a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c1a8:	4588      	cmp	r8, r1
 802c1aa:	da06      	bge.n	802c1ba <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c1ac:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c1b0:	4288      	cmp	r0, r1
 802c1b2:	d367      	bcc.n	802c284 <_ZN8touchgfx7Outline10renderLineEiiii+0x26c>
 802c1b4:	2101      	movs	r1, #1
 802c1b6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c1ba:	2100      	movs	r1, #0
 802c1bc:	9a00      	ldr	r2, [sp, #0]
 802c1be:	f8a4 e014 	strh.w	lr, [r4, #20]
 802c1c2:	45ab      	cmp	fp, r5
 802c1c4:	82e2      	strh	r2, [r4, #22]
 802c1c6:	8321      	strh	r1, [r4, #24]
 802c1c8:	8361      	strh	r1, [r4, #26]
 802c1ca:	4466      	add	r6, ip
 802c1cc:	d04e      	beq.n	802c26c <_ZN8touchgfx7Outline10renderLineEiiii+0x254>
 802c1ce:	9a03      	ldr	r2, [sp, #12]
 802c1d0:	1b91      	subs	r1, r2, r6
 802c1d2:	448c      	add	ip, r1
 802c1d4:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802c1d8:	fb9c f7fa 	sdiv	r7, ip, sl
 802c1dc:	fb0a cc17 	mls	ip, sl, r7, ip
 802c1e0:	f1bc 0f00 	cmp.w	ip, #0
 802c1e4:	bfb8      	it	lt
 802c1e6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802c1ea:	f107 0201 	add.w	r2, r7, #1
 802c1ee:	bfb8      	it	lt
 802c1f0:	44d4      	addlt	ip, sl
 802c1f2:	eba3 030a 	sub.w	r3, r3, sl
 802c1f6:	9207      	str	r2, [sp, #28]
 802c1f8:	f04f 0800 	mov.w	r8, #0
 802c1fc:	eb13 030c 	adds.w	r3, r3, ip
 802c200:	bf58      	it	pl
 802c202:	9807      	ldrpl	r0, [sp, #28]
 802c204:	9a02      	ldr	r2, [sp, #8]
 802c206:	bf48      	it	mi
 802c208:	4638      	movmi	r0, r7
 802c20a:	fa0f fe80 	sxth.w	lr, r0
 802c20e:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802c212:	4415      	add	r5, r2
 802c214:	4406      	add	r6, r0
 802c216:	9a04      	ldr	r2, [sp, #16]
 802c218:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c21c:	f8a4 e018 	strh.w	lr, [r4, #24]
 802c220:	fa0f f985 	sxth.w	r9, r5
 802c224:	4410      	add	r0, r2
 802c226:	444a      	add	r2, r9
 802c228:	bf58      	it	pl
 802c22a:	eba3 030a 	subpl.w	r3, r3, sl
 802c22e:	b209      	sxth	r1, r1
 802c230:	4290      	cmp	r0, r2
 802c232:	8361      	strh	r1, [r4, #26]
 802c234:	d0a3      	beq.n	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c236:	ea5e 0201 	orrs.w	r2, lr, r1
 802c23a:	d00d      	beq.n	802c258 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c23c:	9a00      	ldr	r2, [sp, #0]
 802c23e:	2a00      	cmp	r2, #0
 802c240:	db0a      	blt.n	802c258 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c242:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c244:	428a      	cmp	r2, r1
 802c246:	da07      	bge.n	802c258 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c248:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c24c:	4288      	cmp	r0, r1
 802c24e:	d329      	bcc.n	802c2a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 802c250:	f04f 0201 	mov.w	r2, #1
 802c254:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c258:	9a00      	ldr	r2, [sp, #0]
 802c25a:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c25e:	45ab      	cmp	fp, r5
 802c260:	82e2      	strh	r2, [r4, #22]
 802c262:	f8a4 8018 	strh.w	r8, [r4, #24]
 802c266:	f8a4 801a 	strh.w	r8, [r4, #26]
 802c26a:	d1c7      	bne.n	802c1fc <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 802c26c:	9b03      	ldr	r3, [sp, #12]
 802c26e:	9a01      	ldr	r2, [sp, #4]
 802c270:	1b9e      	subs	r6, r3, r6
 802c272:	9b05      	ldr	r3, [sp, #20]
 802c274:	8326      	strh	r6, [r4, #24]
 802c276:	3320      	adds	r3, #32
 802c278:	1a9b      	subs	r3, r3, r2
 802c27a:	435e      	muls	r6, r3
 802c27c:	8366      	strh	r6, [r4, #26]
 802c27e:	b015      	add	sp, #84	; 0x54
 802c280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c284:	f104 0714 	add.w	r7, r4, #20
 802c288:	cf03      	ldmia	r7!, {r0, r1}
 802c28a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802c28e:	f8c8 0000 	str.w	r0, [r8]
 802c292:	f8c8 1004 	str.w	r1, [r8, #4]
 802c296:	6921      	ldr	r1, [r4, #16]
 802c298:	3108      	adds	r1, #8
 802c29a:	6121      	str	r1, [r4, #16]
 802c29c:	68a1      	ldr	r1, [r4, #8]
 802c29e:	3101      	adds	r1, #1
 802c2a0:	60a1      	str	r1, [r4, #8]
 802c2a2:	e78a      	b.n	802c1ba <_ZN8touchgfx7Outline10renderLineEiiii+0x1a2>
 802c2a4:	f104 0e14 	add.w	lr, r4, #20
 802c2a8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c2ac:	6922      	ldr	r2, [r4, #16]
 802c2ae:	9206      	str	r2, [sp, #24]
 802c2b0:	6010      	str	r0, [r2, #0]
 802c2b2:	6051      	str	r1, [r2, #4]
 802c2b4:	6921      	ldr	r1, [r4, #16]
 802c2b6:	3108      	adds	r1, #8
 802c2b8:	6121      	str	r1, [r4, #16]
 802c2ba:	68a1      	ldr	r1, [r4, #8]
 802c2bc:	3101      	adds	r1, #1
 802c2be:	60a1      	str	r1, [r4, #8]
 802c2c0:	e7ca      	b.n	802c258 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 802c2c2:	eba0 0b02 	sub.w	fp, r0, r2
 802c2c6:	f1ba 0f00 	cmp.w	sl, #0
 802c2ca:	f040 80a1 	bne.w	802c410 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>
 802c2ce:	f1bb 0f00 	cmp.w	fp, #0
 802c2d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802c2d6:	8b62      	ldrh	r2, [r4, #26]
 802c2d8:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802c2dc:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802c2e0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802c2e4:	bfa8      	it	ge
 802c2e6:	f04f 0a20 	movge.w	sl, #32
 802c2ea:	8b21      	ldrh	r1, [r4, #24]
 802c2ec:	ebaa 0606 	sub.w	r6, sl, r6
 802c2f0:	4431      	add	r1, r6
 802c2f2:	fb06 2603 	mla	r6, r6, r3, r2
 802c2f6:	9a00      	ldr	r2, [sp, #0]
 802c2f8:	bfb4      	ite	lt
 802c2fa:	f04f 39ff 	movlt.w	r9, #4294967295
 802c2fe:	f04f 0901 	movge.w	r9, #1
 802c302:	444a      	add	r2, r9
 802c304:	b22d      	sxth	r5, r5
 802c306:	b217      	sxth	r7, r2
 802c308:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 802c30c:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 802c310:	b209      	sxth	r1, r1
 802c312:	b236      	sxth	r6, r6
 802c314:	45f4      	cmp	ip, lr
 802c316:	8321      	strh	r1, [r4, #24]
 802c318:	8366      	strh	r6, [r4, #26]
 802c31a:	f43f af30 	beq.w	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c31e:	4331      	orrs	r1, r6
 802c320:	d00b      	beq.n	802c33a <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c322:	2800      	cmp	r0, #0
 802c324:	db09      	blt.n	802c33a <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c326:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c328:	4288      	cmp	r0, r1
 802c32a:	da06      	bge.n	802c33a <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c32c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c330:	4288      	cmp	r0, r1
 802c332:	d33b      	bcc.n	802c3ac <_ZN8touchgfx7Outline10renderLineEiiii+0x394>
 802c334:	2101      	movs	r1, #1
 802c336:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c33a:	f1aa 0610 	sub.w	r6, sl, #16
 802c33e:	0076      	lsls	r6, r6, #1
 802c340:	fb06 fc03 	mul.w	ip, r6, r3
 802c344:	fa0f fc8c 	sxth.w	ip, ip
 802c348:	b236      	sxth	r6, r6
 802c34a:	82e7      	strh	r7, [r4, #22]
 802c34c:	ea46 010c 	orr.w	r1, r6, ip
 802c350:	2700      	movs	r7, #0
 802c352:	82a5      	strh	r5, [r4, #20]
 802c354:	8327      	strh	r7, [r4, #24]
 802c356:	8367      	strh	r7, [r4, #26]
 802c358:	9100      	str	r1, [sp, #0]
 802c35a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802c35c:	428a      	cmp	r2, r1
 802c35e:	d046      	beq.n	802c3ee <_ZN8touchgfx7Outline10renderLineEiiii+0x3d6>
 802c360:	444a      	add	r2, r9
 802c362:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802c366:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c36a:	8326      	strh	r6, [r4, #24]
 802c36c:	fa0f f882 	sxth.w	r8, r2
 802c370:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802c374:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 802c378:	4570      	cmp	r0, lr
 802c37a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802c37e:	f43f aefe 	beq.w	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c382:	9800      	ldr	r0, [sp, #0]
 802c384:	b160      	cbz	r0, 802c3a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c386:	2900      	cmp	r1, #0
 802c388:	db0a      	blt.n	802c3a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c38a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802c38c:	4281      	cmp	r1, r0
 802c38e:	da07      	bge.n	802c3a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c390:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c394:	4288      	cmp	r0, r1
 802c396:	d319      	bcc.n	802c3cc <_ZN8touchgfx7Outline10renderLineEiiii+0x3b4>
 802c398:	f04f 0101 	mov.w	r1, #1
 802c39c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c3a0:	82a5      	strh	r5, [r4, #20]
 802c3a2:	f8a4 8016 	strh.w	r8, [r4, #22]
 802c3a6:	8327      	strh	r7, [r4, #24]
 802c3a8:	8367      	strh	r7, [r4, #26]
 802c3aa:	e7d6      	b.n	802c35a <_ZN8touchgfx7Outline10renderLineEiiii+0x342>
 802c3ac:	f104 0614 	add.w	r6, r4, #20
 802c3b0:	ce03      	ldmia	r6!, {r0, r1}
 802c3b2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802c3b6:	f8cc 0000 	str.w	r0, [ip]
 802c3ba:	f8cc 1004 	str.w	r1, [ip, #4]
 802c3be:	6921      	ldr	r1, [r4, #16]
 802c3c0:	3108      	adds	r1, #8
 802c3c2:	6121      	str	r1, [r4, #16]
 802c3c4:	68a1      	ldr	r1, [r4, #8]
 802c3c6:	3101      	adds	r1, #1
 802c3c8:	60a1      	str	r1, [r4, #8]
 802c3ca:	e7b6      	b.n	802c33a <_ZN8touchgfx7Outline10renderLineEiiii+0x322>
 802c3cc:	f104 0e14 	add.w	lr, r4, #20
 802c3d0:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c3d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802c3d8:	f8cb 0000 	str.w	r0, [fp]
 802c3dc:	f8cb 1004 	str.w	r1, [fp, #4]
 802c3e0:	6921      	ldr	r1, [r4, #16]
 802c3e2:	3108      	adds	r1, #8
 802c3e4:	6121      	str	r1, [r4, #16]
 802c3e6:	68a1      	ldr	r1, [r4, #8]
 802c3e8:	3101      	adds	r1, #1
 802c3ea:	60a1      	str	r1, [r4, #8]
 802c3ec:	e7d8      	b.n	802c3a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x388>
 802c3ee:	9a03      	ldr	r2, [sp, #12]
 802c3f0:	8b61      	ldrh	r1, [r4, #26]
 802c3f2:	f1a2 0e20 	sub.w	lr, r2, #32
 802c3f6:	8b22      	ldrh	r2, [r4, #24]
 802c3f8:	44d6      	add	lr, sl
 802c3fa:	4472      	add	r2, lr
 802c3fc:	8322      	strh	r2, [r4, #24]
 802c3fe:	fb0e 1303 	mla	r3, lr, r3, r1
 802c402:	e687      	b.n	802c114 <_ZN8touchgfx7Outline10renderLineEiiii+0xfc>
 802c404:	08033487 	.word	0x08033487
 802c408:	08033508 	.word	0x08033508
 802c40c:	080334b8 	.word	0x080334b8
 802c410:	f1bb 0f00 	cmp.w	fp, #0
 802c414:	f2c0 8124 	blt.w	802c660 <_ZN8touchgfx7Outline10renderLineEiiii+0x648>
 802c418:	2201      	movs	r2, #1
 802c41a:	f1c6 0320 	rsb	r3, r6, #32
 802c41e:	920b      	str	r2, [sp, #44]	; 0x2c
 802c420:	fb0a f303 	mul.w	r3, sl, r3
 802c424:	2220      	movs	r2, #32
 802c426:	fb93 fcfb 	sdiv	ip, r3, fp
 802c42a:	fb0b 331c 	mls	r3, fp, ip, r3
 802c42e:	2b00      	cmp	r3, #0
 802c430:	9308      	str	r3, [sp, #32]
 802c432:	bfbe      	ittt	lt
 802c434:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802c438:	445b      	addlt	r3, fp
 802c43a:	9308      	strlt	r3, [sp, #32]
 802c43c:	eb0c 0301 	add.w	r3, ip, r1
 802c440:	9301      	str	r3, [sp, #4]
 802c442:	115b      	asrs	r3, r3, #5
 802c444:	9305      	str	r3, [sp, #20]
 802c446:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802c44a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 802c44e:	9202      	str	r2, [sp, #8]
 802c450:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802c454:	461f      	mov	r7, r3
 802c456:	9b02      	ldr	r3, [sp, #8]
 802c458:	42b3      	cmp	r3, r6
 802c45a:	f040 8117 	bne.w	802c68c <_ZN8touchgfx7Outline10renderLineEiiii+0x674>
 802c45e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802c462:	f9bd 3000 	ldrsh.w	r3, [sp]
 802c466:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802c46a:	42b9      	cmp	r1, r7
 802c46c:	d016      	beq.n	802c49c <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c46e:	8b60      	ldrh	r0, [r4, #26]
 802c470:	8b21      	ldrh	r1, [r4, #24]
 802c472:	4301      	orrs	r1, r0
 802c474:	d00d      	beq.n	802c492 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c476:	f1b8 0f00 	cmp.w	r8, #0
 802c47a:	db0a      	blt.n	802c492 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c47c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c47e:	4541      	cmp	r1, r8
 802c480:	dd07      	ble.n	802c492 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c482:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c486:	4288      	cmp	r0, r1
 802c488:	f0c0 80f3 	bcc.w	802c672 <_ZN8touchgfx7Outline10renderLineEiiii+0x65a>
 802c48c:	2101      	movs	r1, #1
 802c48e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c492:	82e3      	strh	r3, [r4, #22]
 802c494:	2300      	movs	r3, #0
 802c496:	82a2      	strh	r2, [r4, #20]
 802c498:	8323      	strh	r3, [r4, #24]
 802c49a:	8363      	strh	r3, [r4, #26]
 802c49c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c49e:	9a00      	ldr	r2, [sp, #0]
 802c4a0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c4a4:	441a      	add	r2, r3
 802c4a6:	4691      	mov	r9, r2
 802c4a8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802c4ac:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802c4b0:	fa0f f589 	sxth.w	r5, r9
 802c4b4:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802c4b8:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802c4bc:	4281      	cmp	r1, r0
 802c4be:	d015      	beq.n	802c4ec <_ZN8touchgfx7Outline10renderLineEiiii+0x4d4>
 802c4c0:	8b60      	ldrh	r0, [r4, #26]
 802c4c2:	8b21      	ldrh	r1, [r4, #24]
 802c4c4:	4301      	orrs	r1, r0
 802c4c6:	d00c      	beq.n	802c4e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c4c8:	2a00      	cmp	r2, #0
 802c4ca:	db0a      	blt.n	802c4e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c4cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c4ce:	428a      	cmp	r2, r1
 802c4d0:	da07      	bge.n	802c4e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c4d2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802c4d6:	4291      	cmp	r1, r2
 802c4d8:	f0c0 81b4 	bcc.w	802c844 <_ZN8touchgfx7Outline10renderLineEiiii+0x82c>
 802c4dc:	2201      	movs	r2, #1
 802c4de:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c4e2:	82a3      	strh	r3, [r4, #20]
 802c4e4:	2300      	movs	r3, #0
 802c4e6:	82e5      	strh	r5, [r4, #22]
 802c4e8:	8323      	strh	r3, [r4, #24]
 802c4ea:	8363      	strh	r3, [r4, #26]
 802c4ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c4ee:	454b      	cmp	r3, r9
 802c4f0:	f000 808a 	beq.w	802c608 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 802c4f4:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802c4f8:	fb93 f2fb 	sdiv	r2, r3, fp
 802c4fc:	fb0b 3312 	mls	r3, fp, r2, r3
 802c500:	2b00      	cmp	r3, #0
 802c502:	9205      	str	r2, [sp, #20]
 802c504:	9307      	str	r3, [sp, #28]
 802c506:	da04      	bge.n	802c512 <_ZN8touchgfx7Outline10renderLineEiiii+0x4fa>
 802c508:	1e53      	subs	r3, r2, #1
 802c50a:	9305      	str	r3, [sp, #20]
 802c50c:	9b07      	ldr	r3, [sp, #28]
 802c50e:	445b      	add	r3, fp
 802c510:	9307      	str	r3, [sp, #28]
 802c512:	9b08      	ldr	r3, [sp, #32]
 802c514:	eba3 030b 	sub.w	r3, r3, fp
 802c518:	9308      	str	r3, [sp, #32]
 802c51a:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802c51e:	f1c3 0320 	rsb	r3, r3, #32
 802c522:	930a      	str	r3, [sp, #40]	; 0x28
 802c524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c526:	9b02      	ldr	r3, [sp, #8]
 802c528:	1a9b      	subs	r3, r3, r2
 802c52a:	9309      	str	r3, [sp, #36]	; 0x24
 802c52c:	f04f 0a00 	mov.w	sl, #0
 802c530:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802c534:	189b      	adds	r3, r3, r2
 802c536:	9308      	str	r3, [sp, #32]
 802c538:	bf5d      	ittte	pl
 802c53a:	eba3 030b 	subpl.w	r3, r3, fp
 802c53e:	9308      	strpl	r3, [sp, #32]
 802c540:	9b05      	ldrpl	r3, [sp, #20]
 802c542:	9b05      	ldrmi	r3, [sp, #20]
 802c544:	9902      	ldr	r1, [sp, #8]
 802c546:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802c54a:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802c54e:	bf58      	it	pl
 802c550:	3301      	addpl	r3, #1
 802c552:	9300      	str	r3, [sp, #0]
 802c554:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c558:	4413      	add	r3, r2
 802c55a:	9301      	str	r3, [sp, #4]
 802c55c:	115b      	asrs	r3, r3, #5
 802c55e:	9306      	str	r3, [sp, #24]
 802c560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c562:	428b      	cmp	r3, r1
 802c564:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802c568:	f040 8186 	bne.w	802c878 <_ZN8touchgfx7Outline10renderLineEiiii+0x860>
 802c56c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802c570:	fa0f f389 	sxth.w	r3, r9
 802c574:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802c578:	4541      	cmp	r1, r8
 802c57a:	d017      	beq.n	802c5ac <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802c57c:	8b60      	ldrh	r0, [r4, #26]
 802c57e:	8b21      	ldrh	r1, [r4, #24]
 802c580:	4301      	orrs	r1, r0
 802c582:	d00d      	beq.n	802c5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c584:	2e00      	cmp	r6, #0
 802c586:	db0b      	blt.n	802c5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c588:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c58a:	42b1      	cmp	r1, r6
 802c58c:	dd08      	ble.n	802c5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c58e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c592:	4288      	cmp	r0, r1
 802c594:	f0c0 8163 	bcc.w	802c85e <_ZN8touchgfx7Outline10renderLineEiiii+0x846>
 802c598:	f04f 0101 	mov.w	r1, #1
 802c59c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c5a0:	82a2      	strh	r2, [r4, #20]
 802c5a2:	82e3      	strh	r3, [r4, #22]
 802c5a4:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c5a8:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c5ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c5ae:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802c5b2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c5b6:	4499      	add	r9, r3
 802c5b8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802c5bc:	fa0f f589 	sxth.w	r5, r9
 802c5c0:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802c5c4:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802c5c8:	4281      	cmp	r1, r0
 802c5ca:	f43f add8 	beq.w	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c5ce:	8b60      	ldrh	r0, [r4, #26]
 802c5d0:	8b21      	ldrh	r1, [r4, #24]
 802c5d2:	4301      	orrs	r1, r0
 802c5d4:	d00d      	beq.n	802c5f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c5d6:	2a00      	cmp	r2, #0
 802c5d8:	db0b      	blt.n	802c5f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c5da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c5dc:	428a      	cmp	r2, r1
 802c5de:	da08      	bge.n	802c5f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802c5e0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802c5e4:	4291      	cmp	r1, r2
 802c5e6:	f0c0 8230 	bcc.w	802ca4a <_ZN8touchgfx7Outline10renderLineEiiii+0xa32>
 802c5ea:	f04f 0201 	mov.w	r2, #1
 802c5ee:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c5f2:	82a3      	strh	r3, [r4, #20]
 802c5f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c5f6:	82e5      	strh	r5, [r4, #22]
 802c5f8:	454b      	cmp	r3, r9
 802c5fa:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c5fe:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c602:	f8dd c004 	ldr.w	ip, [sp, #4]
 802c606:	d193      	bne.n	802c530 <_ZN8touchgfx7Outline10renderLineEiiii+0x518>
 802c608:	9b02      	ldr	r3, [sp, #8]
 802c60a:	f1c3 0e20 	rsb	lr, r3, #32
 802c60e:	9b04      	ldr	r3, [sp, #16]
 802c610:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802c614:	9b03      	ldr	r3, [sp, #12]
 802c616:	459e      	cmp	lr, r3
 802c618:	f040 8231 	bne.w	802ca7e <_ZN8touchgfx7Outline10renderLineEiiii+0xa66>
 802c61c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802c620:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802c624:	fa0f f58b 	sxth.w	r5, fp
 802c628:	fa0f f289 	sxth.w	r2, r9
 802c62c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c630:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 802c634:	4281      	cmp	r1, r0
 802c636:	f43f ae22 	beq.w	802c27e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802c63a:	8b60      	ldrh	r0, [r4, #26]
 802c63c:	8b21      	ldrh	r1, [r4, #24]
 802c63e:	4301      	orrs	r1, r0
 802c640:	d00c      	beq.n	802c65c <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802c642:	2b00      	cmp	r3, #0
 802c644:	db0a      	blt.n	802c65c <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802c646:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c648:	428b      	cmp	r3, r1
 802c64a:	da07      	bge.n	802c65c <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802c64c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c650:	4299      	cmp	r1, r3
 802c652:	f0c0 8207 	bcc.w	802ca64 <_ZN8touchgfx7Outline10renderLineEiiii+0xa4c>
 802c656:	2301      	movs	r3, #1
 802c658:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c65c:	82a5      	strh	r5, [r4, #20]
 802c65e:	e535      	b.n	802c0cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb4>
 802c660:	f04f 32ff 	mov.w	r2, #4294967295
 802c664:	920b      	str	r2, [sp, #44]	; 0x2c
 802c666:	fb0a f306 	mul.w	r3, sl, r6
 802c66a:	f1cb 0b00 	rsb	fp, fp, #0
 802c66e:	2200      	movs	r2, #0
 802c670:	e6d9      	b.n	802c426 <_ZN8touchgfx7Outline10renderLineEiiii+0x40e>
 802c672:	f104 0514 	add.w	r5, r4, #20
 802c676:	cd03      	ldmia	r5!, {r0, r1}
 802c678:	6926      	ldr	r6, [r4, #16]
 802c67a:	6030      	str	r0, [r6, #0]
 802c67c:	6071      	str	r1, [r6, #4]
 802c67e:	6921      	ldr	r1, [r4, #16]
 802c680:	3108      	adds	r1, #8
 802c682:	6121      	str	r1, [r4, #16]
 802c684:	68a1      	ldr	r1, [r4, #8]
 802c686:	3101      	adds	r1, #1
 802c688:	60a1      	str	r1, [r4, #8]
 802c68a:	e702      	b.n	802c492 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802c68c:	9b01      	ldr	r3, [sp, #4]
 802c68e:	8b20      	ldrh	r0, [r4, #24]
 802c690:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802c694:	f003 031f 	and.w	r3, r3, #31
 802c698:	930d      	str	r3, [sp, #52]	; 0x34
 802c69a:	9b02      	ldr	r3, [sp, #8]
 802c69c:	1b9a      	subs	r2, r3, r6
 802c69e:	9b05      	ldr	r3, [sp, #20]
 802c6a0:	42ab      	cmp	r3, r5
 802c6a2:	f001 011f 	and.w	r1, r1, #31
 802c6a6:	d107      	bne.n	802c6b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a0>
 802c6a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c6aa:	4419      	add	r1, r3
 802c6ac:	4410      	add	r0, r2
 802c6ae:	fb02 9201 	mla	r2, r2, r1, r9
 802c6b2:	8320      	strh	r0, [r4, #24]
 802c6b4:	8362      	strh	r2, [r4, #26]
 802c6b6:	e6f1      	b.n	802c49c <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c6b8:	f1bc 0f00 	cmp.w	ip, #0
 802c6bc:	f2c0 8099 	blt.w	802c7f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7da>
 802c6c0:	f1c1 0320 	rsb	r3, r1, #32
 802c6c4:	435a      	muls	r2, r3
 802c6c6:	2301      	movs	r3, #1
 802c6c8:	9309      	str	r3, [sp, #36]	; 0x24
 802c6ca:	2320      	movs	r3, #32
 802c6cc:	9307      	str	r3, [sp, #28]
 802c6ce:	fb92 fefc 	sdiv	lr, r2, ip
 802c6d2:	9b07      	ldr	r3, [sp, #28]
 802c6d4:	fb0c 221e 	mls	r2, ip, lr, r2
 802c6d8:	2a00      	cmp	r2, #0
 802c6da:	bfb8      	it	lt
 802c6dc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802c6e0:	4419      	add	r1, r3
 802c6e2:	fb0e 9101 	mla	r1, lr, r1, r9
 802c6e6:	b20b      	sxth	r3, r1
 802c6e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c6ea:	8363      	strh	r3, [r4, #26]
 802c6ec:	440d      	add	r5, r1
 802c6ee:	f9bd 1000 	ldrsh.w	r1, [sp]
 802c6f2:	9106      	str	r1, [sp, #24]
 802c6f4:	fa0f f985 	sxth.w	r9, r5
 802c6f8:	ea4f 4101 	mov.w	r1, r1, lsl #16
 802c6fc:	4470      	add	r0, lr
 802c6fe:	910a      	str	r1, [sp, #40]	; 0x28
 802c700:	4449      	add	r1, r9
 802c702:	bfb8      	it	lt
 802c704:	4462      	addlt	r2, ip
 802c706:	b200      	sxth	r0, r0
 802c708:	42b9      	cmp	r1, r7
 802c70a:	8320      	strh	r0, [r4, #24]
 802c70c:	f43f ad37 	beq.w	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c710:	4303      	orrs	r3, r0
 802c712:	d00c      	beq.n	802c72e <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c714:	f1b8 0f00 	cmp.w	r8, #0
 802c718:	db09      	blt.n	802c72e <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c71a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c71c:	4543      	cmp	r3, r8
 802c71e:	dd06      	ble.n	802c72e <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c720:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802c724:	4299      	cmp	r1, r3
 802c726:	d36c      	bcc.n	802c802 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ea>
 802c728:	2301      	movs	r3, #1
 802c72a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802c72e:	9b06      	ldr	r3, [sp, #24]
 802c730:	82e3      	strh	r3, [r4, #22]
 802c732:	2300      	movs	r3, #0
 802c734:	8323      	strh	r3, [r4, #24]
 802c736:	8363      	strh	r3, [r4, #26]
 802c738:	9b05      	ldr	r3, [sp, #20]
 802c73a:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c73e:	42ab      	cmp	r3, r5
 802c740:	4476      	add	r6, lr
 802c742:	d04c      	beq.n	802c7de <_ZN8touchgfx7Outline10renderLineEiiii+0x7c6>
 802c744:	9b02      	ldr	r3, [sp, #8]
 802c746:	1b9b      	subs	r3, r3, r6
 802c748:	4473      	add	r3, lr
 802c74a:	015b      	lsls	r3, r3, #5
 802c74c:	fb93 f8fc 	sdiv	r8, r3, ip
 802c750:	fb0c 3318 	mls	r3, ip, r8, r3
 802c754:	2b00      	cmp	r3, #0
 802c756:	bfb8      	it	lt
 802c758:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802c75c:	f108 0101 	add.w	r1, r8, #1
 802c760:	bfb8      	it	lt
 802c762:	4463      	addlt	r3, ip
 802c764:	eba2 020c 	sub.w	r2, r2, ip
 802c768:	910f      	str	r1, [sp, #60]	; 0x3c
 802c76a:	18d2      	adds	r2, r2, r3
 802c76c:	bf58      	it	pl
 802c76e:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 802c770:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802c772:	bf48      	it	mi
 802c774:	4640      	movmi	r0, r8
 802c776:	fa0f fe80 	sxth.w	lr, r0
 802c77a:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802c77e:	4406      	add	r6, r0
 802c780:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c782:	f8a4 e018 	strh.w	lr, [r4, #24]
 802c786:	4405      	add	r5, r0
 802c788:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c78c:	fa0f f985 	sxth.w	r9, r5
 802c790:	4438      	add	r0, r7
 802c792:	444f      	add	r7, r9
 802c794:	bf58      	it	pl
 802c796:	eba2 020c 	subpl.w	r2, r2, ip
 802c79a:	b209      	sxth	r1, r1
 802c79c:	42b8      	cmp	r0, r7
 802c79e:	8361      	strh	r1, [r4, #26]
 802c7a0:	f43f aced 	beq.w	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c7a4:	ea5e 0101 	orrs.w	r1, lr, r1
 802c7a8:	d00e      	beq.n	802c7c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c7aa:	9906      	ldr	r1, [sp, #24]
 802c7ac:	2900      	cmp	r1, #0
 802c7ae:	db0b      	blt.n	802c7c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c7b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c7b2:	9806      	ldr	r0, [sp, #24]
 802c7b4:	4288      	cmp	r0, r1
 802c7b6:	da07      	bge.n	802c7c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c7b8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c7bc:	4288      	cmp	r0, r1
 802c7be:	d330      	bcc.n	802c822 <_ZN8touchgfx7Outline10renderLineEiiii+0x80a>
 802c7c0:	f04f 0101 	mov.w	r1, #1
 802c7c4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802c7c8:	9906      	ldr	r1, [sp, #24]
 802c7ca:	82e1      	strh	r1, [r4, #22]
 802c7cc:	f04f 0100 	mov.w	r1, #0
 802c7d0:	8321      	strh	r1, [r4, #24]
 802c7d2:	8361      	strh	r1, [r4, #26]
 802c7d4:	9905      	ldr	r1, [sp, #20]
 802c7d6:	f8a4 9014 	strh.w	r9, [r4, #20]
 802c7da:	42a9      	cmp	r1, r5
 802c7dc:	d1c5      	bne.n	802c76a <_ZN8touchgfx7Outline10renderLineEiiii+0x752>
 802c7de:	9b02      	ldr	r3, [sp, #8]
 802c7e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 802c7e2:	1b9e      	subs	r6, r3, r6
 802c7e4:	9b07      	ldr	r3, [sp, #28]
 802c7e6:	8326      	strh	r6, [r4, #24]
 802c7e8:	3120      	adds	r1, #32
 802c7ea:	1ac9      	subs	r1, r1, r3
 802c7ec:	434e      	muls	r6, r1
 802c7ee:	8366      	strh	r6, [r4, #26]
 802c7f0:	e654      	b.n	802c49c <_ZN8touchgfx7Outline10renderLineEiiii+0x484>
 802c7f2:	f04f 33ff 	mov.w	r3, #4294967295
 802c7f6:	9309      	str	r3, [sp, #36]	; 0x24
 802c7f8:	434a      	muls	r2, r1
 802c7fa:	f1cc 0c00 	rsb	ip, ip, #0
 802c7fe:	2300      	movs	r3, #0
 802c800:	e764      	b.n	802c6cc <_ZN8touchgfx7Outline10renderLineEiiii+0x6b4>
 802c802:	f104 0314 	add.w	r3, r4, #20
 802c806:	cb03      	ldmia	r3!, {r0, r1}
 802c808:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802c80c:	f8c8 0000 	str.w	r0, [r8]
 802c810:	f8c8 1004 	str.w	r1, [r8, #4]
 802c814:	6923      	ldr	r3, [r4, #16]
 802c816:	3308      	adds	r3, #8
 802c818:	6123      	str	r3, [r4, #16]
 802c81a:	68a3      	ldr	r3, [r4, #8]
 802c81c:	3301      	adds	r3, #1
 802c81e:	60a3      	str	r3, [r4, #8]
 802c820:	e785      	b.n	802c72e <_ZN8touchgfx7Outline10renderLineEiiii+0x716>
 802c822:	6921      	ldr	r1, [r4, #16]
 802c824:	910e      	str	r1, [sp, #56]	; 0x38
 802c826:	f104 0e14 	add.w	lr, r4, #20
 802c82a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802c82e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802c830:	6038      	str	r0, [r7, #0]
 802c832:	6079      	str	r1, [r7, #4]
 802c834:	6921      	ldr	r1, [r4, #16]
 802c836:	3108      	adds	r1, #8
 802c838:	6121      	str	r1, [r4, #16]
 802c83a:	68a1      	ldr	r1, [r4, #8]
 802c83c:	3101      	adds	r1, #1
 802c83e:	4638      	mov	r0, r7
 802c840:	60a1      	str	r1, [r4, #8]
 802c842:	e7c1      	b.n	802c7c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b0>
 802c844:	f104 0214 	add.w	r2, r4, #20
 802c848:	ca03      	ldmia	r2!, {r0, r1}
 802c84a:	6926      	ldr	r6, [r4, #16]
 802c84c:	6030      	str	r0, [r6, #0]
 802c84e:	6071      	str	r1, [r6, #4]
 802c850:	6922      	ldr	r2, [r4, #16]
 802c852:	3208      	adds	r2, #8
 802c854:	6122      	str	r2, [r4, #16]
 802c856:	68a2      	ldr	r2, [r4, #8]
 802c858:	3201      	adds	r2, #1
 802c85a:	60a2      	str	r2, [r4, #8]
 802c85c:	e641      	b.n	802c4e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ca>
 802c85e:	f104 0514 	add.w	r5, r4, #20
 802c862:	cd03      	ldmia	r5!, {r0, r1}
 802c864:	6926      	ldr	r6, [r4, #16]
 802c866:	6030      	str	r0, [r6, #0]
 802c868:	6071      	str	r1, [r6, #4]
 802c86a:	6921      	ldr	r1, [r4, #16]
 802c86c:	3108      	adds	r1, #8
 802c86e:	6121      	str	r1, [r4, #16]
 802c870:	68a1      	ldr	r1, [r4, #8]
 802c872:	3101      	adds	r1, #1
 802c874:	60a1      	str	r1, [r4, #8]
 802c876:	e693      	b.n	802c5a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x588>
 802c878:	9b01      	ldr	r3, [sp, #4]
 802c87a:	8b20      	ldrh	r0, [r4, #24]
 802c87c:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 802c880:	f003 031f 	and.w	r3, r3, #31
 802c884:	9310      	str	r3, [sp, #64]	; 0x40
 802c886:	9b06      	ldr	r3, [sp, #24]
 802c888:	ea4f 176c 	mov.w	r7, ip, asr #5
 802c88c:	429f      	cmp	r7, r3
 802c88e:	f00c 0c1f 	and.w	ip, ip, #31
 802c892:	d10a      	bne.n	802c8aa <_ZN8touchgfx7Outline10renderLineEiiii+0x892>
 802c894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c896:	4418      	add	r0, r3
 802c898:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802c89a:	8320      	strh	r0, [r4, #24]
 802c89c:	449c      	add	ip, r3
 802c89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c8a0:	fb03 ee0c 	mla	lr, r3, ip, lr
 802c8a4:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802c8a8:	e680      	b.n	802c5ac <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802c8aa:	9b00      	ldr	r3, [sp, #0]
 802c8ac:	2b00      	cmp	r3, #0
 802c8ae:	f2c0 80a2 	blt.w	802c9f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9de>
 802c8b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c8b4:	f1cc 0320 	rsb	r3, ip, #32
 802c8b8:	434b      	muls	r3, r1
 802c8ba:	2101      	movs	r1, #1
 802c8bc:	910e      	str	r1, [sp, #56]	; 0x38
 802c8be:	2120      	movs	r1, #32
 802c8c0:	9a00      	ldr	r2, [sp, #0]
 802c8c2:	910d      	str	r1, [sp, #52]	; 0x34
 802c8c4:	fb93 f5f2 	sdiv	r5, r3, r2
 802c8c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 802c8ca:	fb02 3315 	mls	r3, r2, r5, r3
 802c8ce:	2b00      	cmp	r3, #0
 802c8d0:	bfbc      	itt	lt
 802c8d2:	f105 35ff 	addlt.w	r5, r5, #4294967295
 802c8d6:	189b      	addlt	r3, r3, r2
 802c8d8:	448c      	add	ip, r1
 802c8da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c8dc:	fb05 ec0c 	mla	ip, r5, ip, lr
 802c8e0:	fa0f f18c 	sxth.w	r1, ip
 802c8e4:	4417      	add	r7, r2
 802c8e6:	fa0f fc89 	sxth.w	ip, r9
 802c8ea:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802c8ee:	fa0f fe87 	sxth.w	lr, r7
 802c8f2:	4428      	add	r0, r5
 802c8f4:	920f      	str	r2, [sp, #60]	; 0x3c
 802c8f6:	4472      	add	r2, lr
 802c8f8:	b200      	sxth	r0, r0
 802c8fa:	4542      	cmp	r2, r8
 802c8fc:	8320      	strh	r0, [r4, #24]
 802c8fe:	8361      	strh	r1, [r4, #26]
 802c900:	f43f ac3d 	beq.w	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c904:	ea50 0201 	orrs.w	r2, r0, r1
 802c908:	d00c      	beq.n	802c924 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802c90a:	2e00      	cmp	r6, #0
 802c90c:	db0a      	blt.n	802c924 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802c90e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c910:	42b1      	cmp	r1, r6
 802c912:	dd07      	ble.n	802c924 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802c914:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c918:	4288      	cmp	r0, r1
 802c91a:	d377      	bcc.n	802ca0c <_ZN8touchgfx7Outline10renderLineEiiii+0x9f4>
 802c91c:	f04f 0201 	mov.w	r2, #1
 802c920:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c926:	f8a4 e014 	strh.w	lr, [r4, #20]
 802c92a:	1956      	adds	r6, r2, r5
 802c92c:	9a06      	ldr	r2, [sp, #24]
 802c92e:	f8a4 c016 	strh.w	ip, [r4, #22]
 802c932:	42ba      	cmp	r2, r7
 802c934:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c938:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c93c:	d04e      	beq.n	802c9dc <_ZN8touchgfx7Outline10renderLineEiiii+0x9c4>
 802c93e:	9a02      	ldr	r2, [sp, #8]
 802c940:	1b91      	subs	r1, r2, r6
 802c942:	440d      	add	r5, r1
 802c944:	9a00      	ldr	r2, [sp, #0]
 802c946:	016d      	lsls	r5, r5, #5
 802c948:	fb95 fef2 	sdiv	lr, r5, r2
 802c94c:	fb02 551e 	mls	r5, r2, lr, r5
 802c950:	2d00      	cmp	r5, #0
 802c952:	bfb8      	it	lt
 802c954:	18ad      	addlt	r5, r5, r2
 802c956:	9a00      	ldr	r2, [sp, #0]
 802c958:	bfb8      	it	lt
 802c95a:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802c95e:	1a9b      	subs	r3, r3, r2
 802c960:	f10e 0201 	add.w	r2, lr, #1
 802c964:	9213      	str	r2, [sp, #76]	; 0x4c
 802c966:	195b      	adds	r3, r3, r5
 802c968:	bf5e      	ittt	pl
 802c96a:	9a00      	ldrpl	r2, [sp, #0]
 802c96c:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802c96e:	1a9b      	subpl	r3, r3, r2
 802c970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c972:	4417      	add	r7, r2
 802c974:	bf48      	it	mi
 802c976:	4670      	movmi	r0, lr
 802c978:	b23a      	sxth	r2, r7
 802c97a:	fa0f f880 	sxth.w	r8, r0
 802c97e:	0141      	lsls	r1, r0, #5
 802c980:	9211      	str	r2, [sp, #68]	; 0x44
 802c982:	4406      	add	r6, r0
 802c984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802c986:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802c98a:	f8a4 8018 	strh.w	r8, [r4, #24]
 802c98e:	1882      	adds	r2, r0, r2
 802c990:	9212      	str	r2, [sp, #72]	; 0x48
 802c992:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802c994:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802c996:	4402      	add	r2, r0
 802c998:	9812      	ldr	r0, [sp, #72]	; 0x48
 802c99a:	b209      	sxth	r1, r1
 802c99c:	4290      	cmp	r0, r2
 802c99e:	8361      	strh	r1, [r4, #26]
 802c9a0:	f43f abed 	beq.w	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802c9a4:	ea58 0201 	orrs.w	r2, r8, r1
 802c9a8:	d00d      	beq.n	802c9c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802c9aa:	f1bc 0f00 	cmp.w	ip, #0
 802c9ae:	db0a      	blt.n	802c9c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802c9b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802c9b2:	458c      	cmp	ip, r1
 802c9b4:	da07      	bge.n	802c9c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802c9b6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802c9ba:	4288      	cmp	r0, r1
 802c9bc:	d336      	bcc.n	802ca2c <_ZN8touchgfx7Outline10renderLineEiiii+0xa14>
 802c9be:	f04f 0201 	mov.w	r2, #1
 802c9c2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802c9c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802c9c8:	82a2      	strh	r2, [r4, #20]
 802c9ca:	9a06      	ldr	r2, [sp, #24]
 802c9cc:	f8a4 c016 	strh.w	ip, [r4, #22]
 802c9d0:	42ba      	cmp	r2, r7
 802c9d2:	f8a4 a018 	strh.w	sl, [r4, #24]
 802c9d6:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802c9da:	d1c4      	bne.n	802c966 <_ZN8touchgfx7Outline10renderLineEiiii+0x94e>
 802c9dc:	9b02      	ldr	r3, [sp, #8]
 802c9de:	1b9e      	subs	r6, r3, r6
 802c9e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802c9e2:	8326      	strh	r6, [r4, #24]
 802c9e4:	f103 0c20 	add.w	ip, r3, #32
 802c9e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c9ea:	ebac 0c03 	sub.w	ip, ip, r3
 802c9ee:	fb06 f60c 	mul.w	r6, r6, ip
 802c9f2:	8366      	strh	r6, [r4, #26]
 802c9f4:	e5da      	b.n	802c5ac <_ZN8touchgfx7Outline10renderLineEiiii+0x594>
 802c9f6:	9a00      	ldr	r2, [sp, #0]
 802c9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c9fa:	f04f 31ff 	mov.w	r1, #4294967295
 802c9fe:	4252      	negs	r2, r2
 802ca00:	910e      	str	r1, [sp, #56]	; 0x38
 802ca02:	fb03 f30c 	mul.w	r3, r3, ip
 802ca06:	9200      	str	r2, [sp, #0]
 802ca08:	2100      	movs	r1, #0
 802ca0a:	e759      	b.n	802c8c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a8>
 802ca0c:	f104 0614 	add.w	r6, r4, #20
 802ca10:	ce03      	ldmia	r6!, {r0, r1}
 802ca12:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802ca16:	f8c8 0000 	str.w	r0, [r8]
 802ca1a:	f8c8 1004 	str.w	r1, [r8, #4]
 802ca1e:	6921      	ldr	r1, [r4, #16]
 802ca20:	3108      	adds	r1, #8
 802ca22:	6121      	str	r1, [r4, #16]
 802ca24:	68a1      	ldr	r1, [r4, #8]
 802ca26:	3101      	adds	r1, #1
 802ca28:	60a1      	str	r1, [r4, #8]
 802ca2a:	e77b      	b.n	802c924 <_ZN8touchgfx7Outline10renderLineEiiii+0x90c>
 802ca2c:	f104 0814 	add.w	r8, r4, #20
 802ca30:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802ca34:	6922      	ldr	r2, [r4, #16]
 802ca36:	9212      	str	r2, [sp, #72]	; 0x48
 802ca38:	6010      	str	r0, [r2, #0]
 802ca3a:	6051      	str	r1, [r2, #4]
 802ca3c:	6921      	ldr	r1, [r4, #16]
 802ca3e:	3108      	adds	r1, #8
 802ca40:	6121      	str	r1, [r4, #16]
 802ca42:	68a1      	ldr	r1, [r4, #8]
 802ca44:	3101      	adds	r1, #1
 802ca46:	60a1      	str	r1, [r4, #8]
 802ca48:	e7bd      	b.n	802c9c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ae>
 802ca4a:	f104 0214 	add.w	r2, r4, #20
 802ca4e:	ca03      	ldmia	r2!, {r0, r1}
 802ca50:	6926      	ldr	r6, [r4, #16]
 802ca52:	6030      	str	r0, [r6, #0]
 802ca54:	6071      	str	r1, [r6, #4]
 802ca56:	6922      	ldr	r2, [r4, #16]
 802ca58:	3208      	adds	r2, #8
 802ca5a:	6122      	str	r2, [r4, #16]
 802ca5c:	68a2      	ldr	r2, [r4, #8]
 802ca5e:	3201      	adds	r2, #1
 802ca60:	60a2      	str	r2, [r4, #8]
 802ca62:	e5c6      	b.n	802c5f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5da>
 802ca64:	f104 0314 	add.w	r3, r4, #20
 802ca68:	cb03      	ldmia	r3!, {r0, r1}
 802ca6a:	6926      	ldr	r6, [r4, #16]
 802ca6c:	6030      	str	r0, [r6, #0]
 802ca6e:	6071      	str	r1, [r6, #4]
 802ca70:	6923      	ldr	r3, [r4, #16]
 802ca72:	3308      	adds	r3, #8
 802ca74:	6123      	str	r3, [r4, #16]
 802ca76:	68a3      	ldr	r3, [r4, #8]
 802ca78:	3301      	adds	r3, #1
 802ca7a:	60a3      	str	r3, [r4, #8]
 802ca7c:	e5ee      	b.n	802c65c <_ZN8touchgfx7Outline10renderLineEiiii+0x644>
 802ca7e:	9b01      	ldr	r3, [sp, #4]
 802ca80:	8b20      	ldrh	r0, [r4, #24]
 802ca82:	8b66      	ldrh	r6, [r4, #26]
 802ca84:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802ca88:	f003 021f 	and.w	r2, r3, #31
 802ca8c:	9b04      	ldr	r3, [sp, #16]
 802ca8e:	f003 031f 	and.w	r3, r3, #31
 802ca92:	9305      	str	r3, [sp, #20]
 802ca94:	9b03      	ldr	r3, [sp, #12]
 802ca96:	45dc      	cmp	ip, fp
 802ca98:	eba3 050e 	sub.w	r5, r3, lr
 802ca9c:	d108      	bne.n	802cab0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa98>
 802ca9e:	9b05      	ldr	r3, [sp, #20]
 802caa0:	441a      	add	r2, r3
 802caa2:	4428      	add	r0, r5
 802caa4:	fb05 6502 	mla	r5, r5, r2, r6
 802caa8:	8320      	strh	r0, [r4, #24]
 802caaa:	8365      	strh	r5, [r4, #26]
 802caac:	f7ff bbe7 	b.w	802c27e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802cab0:	9b04      	ldr	r3, [sp, #16]
 802cab2:	9901      	ldr	r1, [sp, #4]
 802cab4:	1a5b      	subs	r3, r3, r1
 802cab6:	9300      	str	r3, [sp, #0]
 802cab8:	f100 809f 	bmi.w	802cbfa <_ZN8touchgfx7Outline10renderLineEiiii+0xbe2>
 802cabc:	f1c2 0120 	rsb	r1, r2, #32
 802cac0:	434d      	muls	r5, r1
 802cac2:	2101      	movs	r1, #1
 802cac4:	9102      	str	r1, [sp, #8]
 802cac6:	2120      	movs	r1, #32
 802cac8:	9b00      	ldr	r3, [sp, #0]
 802caca:	9101      	str	r1, [sp, #4]
 802cacc:	fb95 f7f3 	sdiv	r7, r5, r3
 802cad0:	9901      	ldr	r1, [sp, #4]
 802cad2:	fb03 5517 	mls	r5, r3, r7, r5
 802cad6:	2d00      	cmp	r5, #0
 802cad8:	bfb8      	it	lt
 802cada:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802cade:	440a      	add	r2, r1
 802cae0:	fb07 6202 	mla	r2, r7, r2, r6
 802cae4:	b211      	sxth	r1, r2
 802cae6:	9a02      	ldr	r2, [sp, #8]
 802cae8:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802caec:	8361      	strh	r1, [r4, #26]
 802caee:	4494      	add	ip, r2
 802caf0:	fa0f f289 	sxth.w	r2, r9
 802caf4:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802caf8:	bfb8      	it	lt
 802cafa:	18ed      	addlt	r5, r5, r3
 802cafc:	fa0f f88c 	sxth.w	r8, ip
 802cb00:	0413      	lsls	r3, r2, #16
 802cb02:	4438      	add	r0, r7
 802cb04:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 802cb08:	eb08 0a03 	add.w	sl, r8, r3
 802cb0c:	b200      	sxth	r0, r0
 802cb0e:	45d1      	cmp	r9, sl
 802cb10:	8320      	strh	r0, [r4, #24]
 802cb12:	9304      	str	r3, [sp, #16]
 802cb14:	f43f ab33 	beq.w	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cb18:	ea50 0301 	orrs.w	r3, r0, r1
 802cb1c:	d00b      	beq.n	802cb36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cb1e:	2e00      	cmp	r6, #0
 802cb20:	db09      	blt.n	802cb36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cb22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cb24:	428e      	cmp	r6, r1
 802cb26:	da06      	bge.n	802cb36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cb28:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cb2c:	4288      	cmp	r0, r1
 802cb2e:	d36d      	bcc.n	802cc0c <_ZN8touchgfx7Outline10renderLineEiiii+0xbf4>
 802cb30:	2101      	movs	r1, #1
 802cb32:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802cb36:	2100      	movs	r1, #0
 802cb38:	45e3      	cmp	fp, ip
 802cb3a:	f8a4 8014 	strh.w	r8, [r4, #20]
 802cb3e:	82e2      	strh	r2, [r4, #22]
 802cb40:	8321      	strh	r1, [r4, #24]
 802cb42:	8361      	strh	r1, [r4, #26]
 802cb44:	44be      	add	lr, r7
 802cb46:	d049      	beq.n	802cbdc <_ZN8touchgfx7Outline10renderLineEiiii+0xbc4>
 802cb48:	9b03      	ldr	r3, [sp, #12]
 802cb4a:	eba3 060e 	sub.w	r6, r3, lr
 802cb4e:	443e      	add	r6, r7
 802cb50:	9b00      	ldr	r3, [sp, #0]
 802cb52:	0176      	lsls	r6, r6, #5
 802cb54:	fb96 f7f3 	sdiv	r7, r6, r3
 802cb58:	fb03 6617 	mls	r6, r3, r7, r6
 802cb5c:	428e      	cmp	r6, r1
 802cb5e:	bfb8      	it	lt
 802cb60:	18f6      	addlt	r6, r6, r3
 802cb62:	9b00      	ldr	r3, [sp, #0]
 802cb64:	bfb8      	it	lt
 802cb66:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802cb6a:	1aed      	subs	r5, r5, r3
 802cb6c:	1c7b      	adds	r3, r7, #1
 802cb6e:	9307      	str	r3, [sp, #28]
 802cb70:	f04f 0900 	mov.w	r9, #0
 802cb74:	19ad      	adds	r5, r5, r6
 802cb76:	bf5e      	ittt	pl
 802cb78:	9b00      	ldrpl	r3, [sp, #0]
 802cb7a:	9807      	ldrpl	r0, [sp, #28]
 802cb7c:	1aed      	subpl	r5, r5, r3
 802cb7e:	9b02      	ldr	r3, [sp, #8]
 802cb80:	bf48      	it	mi
 802cb82:	4638      	movmi	r0, r7
 802cb84:	fa0f f880 	sxth.w	r8, r0
 802cb88:	0141      	lsls	r1, r0, #5
 802cb8a:	449c      	add	ip, r3
 802cb8c:	4486      	add	lr, r0
 802cb8e:	9b04      	ldr	r3, [sp, #16]
 802cb90:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802cb94:	f8a4 8018 	strh.w	r8, [r4, #24]
 802cb98:	fa0f fa8c 	sxth.w	sl, ip
 802cb9c:	4418      	add	r0, r3
 802cb9e:	4453      	add	r3, sl
 802cba0:	b209      	sxth	r1, r1
 802cba2:	4298      	cmp	r0, r3
 802cba4:	8361      	strh	r1, [r4, #26]
 802cba6:	f43f aaea 	beq.w	802c17e <_ZN8touchgfx7Outline10renderLineEiiii+0x166>
 802cbaa:	ea58 0301 	orrs.w	r3, r8, r1
 802cbae:	d00c      	beq.n	802cbca <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cbb0:	2a00      	cmp	r2, #0
 802cbb2:	db0a      	blt.n	802cbca <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cbb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802cbb6:	428a      	cmp	r2, r1
 802cbb8:	da07      	bge.n	802cbca <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cbba:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802cbbe:	4288      	cmp	r0, r1
 802cbc0:	d334      	bcc.n	802cc2c <_ZN8touchgfx7Outline10renderLineEiiii+0xc14>
 802cbc2:	f04f 0301 	mov.w	r3, #1
 802cbc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802cbca:	45e3      	cmp	fp, ip
 802cbcc:	f8a4 a014 	strh.w	sl, [r4, #20]
 802cbd0:	82e2      	strh	r2, [r4, #22]
 802cbd2:	f8a4 9018 	strh.w	r9, [r4, #24]
 802cbd6:	f8a4 901a 	strh.w	r9, [r4, #26]
 802cbda:	d1cb      	bne.n	802cb74 <_ZN8touchgfx7Outline10renderLineEiiii+0xb5c>
 802cbdc:	9b03      	ldr	r3, [sp, #12]
 802cbde:	9e05      	ldr	r6, [sp, #20]
 802cbe0:	eba3 0e0e 	sub.w	lr, r3, lr
 802cbe4:	9b01      	ldr	r3, [sp, #4]
 802cbe6:	f8a4 e018 	strh.w	lr, [r4, #24]
 802cbea:	3620      	adds	r6, #32
 802cbec:	1af6      	subs	r6, r6, r3
 802cbee:	fb0e fe06 	mul.w	lr, lr, r6
 802cbf2:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802cbf6:	f7ff bb42 	b.w	802c27e <_ZN8touchgfx7Outline10renderLineEiiii+0x266>
 802cbfa:	9b00      	ldr	r3, [sp, #0]
 802cbfc:	f04f 31ff 	mov.w	r1, #4294967295
 802cc00:	425b      	negs	r3, r3
 802cc02:	9102      	str	r1, [sp, #8]
 802cc04:	4355      	muls	r5, r2
 802cc06:	9300      	str	r3, [sp, #0]
 802cc08:	2100      	movs	r1, #0
 802cc0a:	e75d      	b.n	802cac8 <_ZN8touchgfx7Outline10renderLineEiiii+0xab0>
 802cc0c:	f104 0614 	add.w	r6, r4, #20
 802cc10:	ce03      	ldmia	r6!, {r0, r1}
 802cc12:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802cc16:	f8c9 0000 	str.w	r0, [r9]
 802cc1a:	f8c9 1004 	str.w	r1, [r9, #4]
 802cc1e:	6921      	ldr	r1, [r4, #16]
 802cc20:	3108      	adds	r1, #8
 802cc22:	6121      	str	r1, [r4, #16]
 802cc24:	68a1      	ldr	r1, [r4, #8]
 802cc26:	3101      	adds	r1, #1
 802cc28:	60a1      	str	r1, [r4, #8]
 802cc2a:	e784      	b.n	802cb36 <_ZN8touchgfx7Outline10renderLineEiiii+0xb1e>
 802cc2c:	f104 0814 	add.w	r8, r4, #20
 802cc30:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802cc34:	6923      	ldr	r3, [r4, #16]
 802cc36:	9306      	str	r3, [sp, #24]
 802cc38:	6018      	str	r0, [r3, #0]
 802cc3a:	6059      	str	r1, [r3, #4]
 802cc3c:	6921      	ldr	r1, [r4, #16]
 802cc3e:	3108      	adds	r1, #8
 802cc40:	6121      	str	r1, [r4, #16]
 802cc42:	68a1      	ldr	r1, [r4, #8]
 802cc44:	3101      	adds	r1, #1
 802cc46:	60a1      	str	r1, [r4, #8]
 802cc48:	e7bf      	b.n	802cbca <_ZN8touchgfx7Outline10renderLineEiiii+0xbb2>
 802cc4a:	bf00      	nop

0802cc4c <_ZN8touchgfx7Outline6lineToEii>:
 802cc4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802cc4e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802cc50:	079b      	lsls	r3, r3, #30
 802cc52:	4604      	mov	r4, r0
 802cc54:	460d      	mov	r5, r1
 802cc56:	4616      	mov	r6, r2
 802cc58:	d526      	bpl.n	802cca8 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802cc5a:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802cc5e:	ea85 0001 	eor.w	r0, r5, r1
 802cc62:	ea86 0302 	eor.w	r3, r6, r2
 802cc66:	4303      	orrs	r3, r0
 802cc68:	d01e      	beq.n	802cca8 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802cc6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802cc6c:	9600      	str	r6, [sp, #0]
 802cc6e:	114b      	asrs	r3, r1, #5
 802cc70:	4283      	cmp	r3, r0
 802cc72:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802cc74:	bfb8      	it	lt
 802cc76:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802cc78:	3301      	adds	r3, #1
 802cc7a:	4283      	cmp	r3, r0
 802cc7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802cc7e:	bfc8      	it	gt
 802cc80:	6363      	strgt	r3, [r4, #52]	; 0x34
 802cc82:	116b      	asrs	r3, r5, #5
 802cc84:	4283      	cmp	r3, r0
 802cc86:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802cc88:	bfb8      	it	lt
 802cc8a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802cc8c:	3301      	adds	r3, #1
 802cc8e:	4283      	cmp	r3, r0
 802cc90:	bfc8      	it	gt
 802cc92:	6363      	strgt	r3, [r4, #52]	; 0x34
 802cc94:	4620      	mov	r0, r4
 802cc96:	462b      	mov	r3, r5
 802cc98:	f7ff f9be 	bl	802c018 <_ZN8touchgfx7Outline10renderLineEiiii>
 802cc9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cc9e:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802cca2:	f043 0301 	orr.w	r3, r3, #1
 802cca6:	63e3      	str	r3, [r4, #60]	; 0x3c
 802cca8:	b002      	add	sp, #8
 802ccaa:	bd70      	pop	{r4, r5, r6, pc}

0802ccac <_ZN8touchgfx7Outline6moveToEii>:
 802ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ccae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802ccb0:	4615      	mov	r5, r2
 802ccb2:	079a      	lsls	r2, r3, #30
 802ccb4:	4604      	mov	r4, r0
 802ccb6:	460e      	mov	r6, r1
 802ccb8:	d401      	bmi.n	802ccbe <_ZN8touchgfx7Outline6moveToEii+0x12>
 802ccba:	f7ff f967 	bl	802bf8c <_ZN8touchgfx7Outline5resetEv>
 802ccbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802ccc0:	07db      	lsls	r3, r3, #31
 802ccc2:	d504      	bpl.n	802ccce <_ZN8touchgfx7Outline6moveToEii+0x22>
 802ccc4:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802ccc8:	4620      	mov	r0, r4
 802ccca:	f7ff ffbf 	bl	802cc4c <_ZN8touchgfx7Outline6lineToEii>
 802ccce:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802ccd2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802ccd6:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802ccda:	f345 174f 	sbfx	r7, r5, #5, #16
 802ccde:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802cce2:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802cce6:	428a      	cmp	r2, r1
 802cce8:	d015      	beq.n	802cd16 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802ccea:	8b61      	ldrh	r1, [r4, #26]
 802ccec:	8b22      	ldrh	r2, [r4, #24]
 802ccee:	430a      	orrs	r2, r1
 802ccf0:	d00b      	beq.n	802cd0a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802ccf2:	2b00      	cmp	r3, #0
 802ccf4:	db09      	blt.n	802cd0a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802ccf6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802ccf8:	4293      	cmp	r3, r2
 802ccfa:	da06      	bge.n	802cd0a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802ccfc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802cd00:	429a      	cmp	r2, r3
 802cd02:	d30d      	bcc.n	802cd20 <_ZN8touchgfx7Outline6moveToEii+0x74>
 802cd04:	2301      	movs	r3, #1
 802cd06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802cd0a:	2300      	movs	r3, #0
 802cd0c:	f8a4 c014 	strh.w	ip, [r4, #20]
 802cd10:	82e7      	strh	r7, [r4, #22]
 802cd12:	8323      	strh	r3, [r4, #24]
 802cd14:	8363      	strh	r3, [r4, #26]
 802cd16:	61e6      	str	r6, [r4, #28]
 802cd18:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802cd1c:	62a5      	str	r5, [r4, #40]	; 0x28
 802cd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802cd20:	f104 0314 	add.w	r3, r4, #20
 802cd24:	cb03      	ldmia	r3!, {r0, r1}
 802cd26:	6922      	ldr	r2, [r4, #16]
 802cd28:	6010      	str	r0, [r2, #0]
 802cd2a:	6051      	str	r1, [r2, #4]
 802cd2c:	6923      	ldr	r3, [r4, #16]
 802cd2e:	3308      	adds	r3, #8
 802cd30:	6123      	str	r3, [r4, #16]
 802cd32:	68a3      	ldr	r3, [r4, #8]
 802cd34:	3301      	adds	r3, #1
 802cd36:	60a3      	str	r3, [r4, #8]
 802cd38:	e7e7      	b.n	802cd0a <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802cd3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802cd3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cd3e:	b0d1      	sub	sp, #324	; 0x144
 802cd40:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802cd44:	466c      	mov	r4, sp
 802cd46:	1a0d      	subs	r5, r1, r0
 802cd48:	2d48      	cmp	r5, #72	; 0x48
 802cd4a:	f100 0208 	add.w	r2, r0, #8
 802cd4e:	f340 80bb 	ble.w	802cec8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802cd52:	112d      	asrs	r5, r5, #4
 802cd54:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802cd58:	f9b0 8000 	ldrsh.w	r8, [r0]
 802cd5c:	681e      	ldr	r6, [r3, #0]
 802cd5e:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802cd62:	6006      	str	r6, [r0, #0]
 802cd64:	685e      	ldr	r6, [r3, #4]
 802cd66:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802cd6a:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802cd6e:	6046      	str	r6, [r0, #4]
 802cd70:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802cd74:	f8a3 e002 	strh.w	lr, [r3, #2]
 802cd78:	f8a3 c004 	strh.w	ip, [r3, #4]
 802cd7c:	80df      	strh	r7, [r3, #6]
 802cd7e:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802cd82:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802cd86:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802cd8a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802cd8e:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802cd92:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802cd96:	4565      	cmp	r5, ip
 802cd98:	f1a1 0308 	sub.w	r3, r1, #8
 802cd9c:	da0f      	bge.n	802cdbe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802cd9e:	681d      	ldr	r5, [r3, #0]
 802cda0:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802cda4:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802cda8:	6015      	str	r5, [r2, #0]
 802cdaa:	685d      	ldr	r5, [r3, #4]
 802cdac:	6055      	str	r5, [r2, #4]
 802cdae:	f821 7c08 	strh.w	r7, [r1, #-8]
 802cdb2:	f821 6c06 	strh.w	r6, [r1, #-6]
 802cdb6:	f821 ec04 	strh.w	lr, [r1, #-4]
 802cdba:	f821 cc02 	strh.w	ip, [r1, #-2]
 802cdbe:	f9b0 7000 	ldrsh.w	r7, [r0]
 802cdc2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802cdc6:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802cdca:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802cdce:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802cdd2:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802cdd6:	45ac      	cmp	ip, r5
 802cdd8:	da0d      	bge.n	802cdf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802cdda:	6815      	ldr	r5, [r2, #0]
 802cddc:	6005      	str	r5, [r0, #0]
 802cdde:	6855      	ldr	r5, [r2, #4]
 802cde0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802cde4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802cde8:	8107      	strh	r7, [r0, #8]
 802cdea:	6045      	str	r5, [r0, #4]
 802cdec:	8146      	strh	r6, [r0, #10]
 802cdee:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802cdf2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802cdf6:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802cdfa:	f9b0 7000 	ldrsh.w	r7, [r0]
 802cdfe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802ce02:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802ce06:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802ce0a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802ce0e:	4565      	cmp	r5, ip
 802ce10:	da0f      	bge.n	802ce32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802ce12:	681d      	ldr	r5, [r3, #0]
 802ce14:	6005      	str	r5, [r0, #0]
 802ce16:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802ce1a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802ce1e:	685d      	ldr	r5, [r3, #4]
 802ce20:	6045      	str	r5, [r0, #4]
 802ce22:	f821 7c08 	strh.w	r7, [r1, #-8]
 802ce26:	f821 6c06 	strh.w	r6, [r1, #-6]
 802ce2a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802ce2e:	f821 cc02 	strh.w	ip, [r1, #-2]
 802ce32:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802ce36:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802ce3a:	f9b0 e000 	ldrsh.w	lr, [r0]
 802ce3e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802ce42:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802ce46:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802ce4a:	f102 0508 	add.w	r5, r2, #8
 802ce4e:	4556      	cmp	r6, sl
 802ce50:	462f      	mov	r7, r5
 802ce52:	db18      	blt.n	802ce86 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802ce54:	3b08      	subs	r3, #8
 802ce56:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802ce5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802ce5e:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802ce62:	45b2      	cmp	sl, r6
 802ce64:	dbf6      	blt.n	802ce54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802ce66:	42ab      	cmp	r3, r5
 802ce68:	681e      	ldr	r6, [r3, #0]
 802ce6a:	d30e      	bcc.n	802ce8a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802ce6c:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802ce70:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802ce74:	602e      	str	r6, [r5, #0]
 802ce76:	685e      	ldr	r6, [r3, #4]
 802ce78:	606e      	str	r6, [r5, #4]
 802ce7a:	f8a3 9000 	strh.w	r9, [r3]
 802ce7e:	f8a3 8002 	strh.w	r8, [r3, #2]
 802ce82:	809f      	strh	r7, [r3, #4]
 802ce84:	80da      	strh	r2, [r3, #6]
 802ce86:	462a      	mov	r2, r5
 802ce88:	e7d3      	b.n	802ce32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802ce8a:	6006      	str	r6, [r0, #0]
 802ce8c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802ce90:	685e      	ldr	r6, [r3, #4]
 802ce92:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802ce96:	6046      	str	r6, [r0, #4]
 802ce98:	80da      	strh	r2, [r3, #6]
 802ce9a:	1b4a      	subs	r2, r1, r5
 802ce9c:	1a1e      	subs	r6, r3, r0
 802ce9e:	10d2      	asrs	r2, r2, #3
 802cea0:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802cea4:	bfb8      	it	lt
 802cea6:	e9c4 0300 	strdlt	r0, r3, [r4]
 802ceaa:	f8a3 e000 	strh.w	lr, [r3]
 802ceae:	f8a3 c002 	strh.w	ip, [r3, #2]
 802ceb2:	f8a3 8004 	strh.w	r8, [r3, #4]
 802ceb6:	bfaa      	itet	ge
 802ceb8:	4607      	movge	r7, r0
 802ceba:	460b      	movlt	r3, r1
 802cebc:	e9c4 5100 	strdge	r5, r1, [r4]
 802cec0:	4638      	mov	r0, r7
 802cec2:	3408      	adds	r4, #8
 802cec4:	4619      	mov	r1, r3
 802cec6:	e73e      	b.n	802cd46 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802cec8:	4291      	cmp	r1, r2
 802ceca:	d926      	bls.n	802cf1a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e0>
 802cecc:	f1a2 0310 	sub.w	r3, r2, #16
 802ced0:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802ced4:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802ced8:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802cedc:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802cee0:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802cee4:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802cee8:	42ae      	cmp	r6, r5
 802ceea:	da14      	bge.n	802cf16 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802ceec:	461d      	mov	r5, r3
 802ceee:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802cef2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802cef6:	611e      	str	r6, [r3, #16]
 802cef8:	686e      	ldr	r6, [r5, #4]
 802cefa:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802cefe:	f8a3 c008 	strh.w	ip, [r3, #8]
 802cf02:	42a8      	cmp	r0, r5
 802cf04:	615e      	str	r6, [r3, #20]
 802cf06:	815f      	strh	r7, [r3, #10]
 802cf08:	f8a3 800c 	strh.w	r8, [r3, #12]
 802cf0c:	f8a3 e00e 	strh.w	lr, [r3, #14]
 802cf10:	f1a3 0308 	sub.w	r3, r3, #8
 802cf14:	d1dc      	bne.n	802ced0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x196>
 802cf16:	3208      	adds	r2, #8
 802cf18:	e7d6      	b.n	802cec8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18e>
 802cf1a:	466b      	mov	r3, sp
 802cf1c:	429c      	cmp	r4, r3
 802cf1e:	d903      	bls.n	802cf28 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ee>
 802cf20:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802cf24:	3c08      	subs	r4, #8
 802cf26:	e70e      	b.n	802cd46 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802cf28:	b051      	add	sp, #324	; 0x144
 802cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802cf2e <_ZN8touchgfx7Outline9sortCellsEv>:
 802cf2e:	6881      	ldr	r1, [r0, #8]
 802cf30:	b111      	cbz	r1, 802cf38 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802cf32:	68c0      	ldr	r0, [r0, #12]
 802cf34:	f7ff bf01 	b.w	802cd3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802cf38:	4770      	bx	lr

0802cf3a <_ZN8touchgfx7Outline8getCellsEv>:
 802cf3a:	b510      	push	{r4, lr}
 802cf3c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802cf3e:	07da      	lsls	r2, r3, #31
 802cf40:	4604      	mov	r4, r0
 802cf42:	d507      	bpl.n	802cf54 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802cf44:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802cf48:	f7ff fe80 	bl	802cc4c <_ZN8touchgfx7Outline6lineToEii>
 802cf4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cf4e:	f023 0301 	bic.w	r3, r3, #1
 802cf52:	63e3      	str	r3, [r4, #60]	; 0x3c
 802cf54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cf56:	079b      	lsls	r3, r3, #30
 802cf58:	d51a      	bpl.n	802cf90 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802cf5a:	8b62      	ldrh	r2, [r4, #26]
 802cf5c:	8b23      	ldrh	r3, [r4, #24]
 802cf5e:	4313      	orrs	r3, r2
 802cf60:	d00d      	beq.n	802cf7e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802cf62:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802cf66:	2b00      	cmp	r3, #0
 802cf68:	db09      	blt.n	802cf7e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802cf6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802cf6c:	4293      	cmp	r3, r2
 802cf6e:	da06      	bge.n	802cf7e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802cf70:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802cf74:	429a      	cmp	r2, r3
 802cf76:	d80d      	bhi.n	802cf94 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802cf78:	2301      	movs	r3, #1
 802cf7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802cf7e:	68a0      	ldr	r0, [r4, #8]
 802cf80:	b138      	cbz	r0, 802cf92 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802cf82:	4620      	mov	r0, r4
 802cf84:	f7ff ffd3 	bl	802cf2e <_ZN8touchgfx7Outline9sortCellsEv>
 802cf88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802cf8a:	f023 0302 	bic.w	r3, r3, #2
 802cf8e:	63e3      	str	r3, [r4, #60]	; 0x3c
 802cf90:	68e0      	ldr	r0, [r4, #12]
 802cf92:	bd10      	pop	{r4, pc}
 802cf94:	f104 0314 	add.w	r3, r4, #20
 802cf98:	cb03      	ldmia	r3!, {r0, r1}
 802cf9a:	6922      	ldr	r2, [r4, #16]
 802cf9c:	6010      	str	r0, [r2, #0]
 802cf9e:	6051      	str	r1, [r2, #4]
 802cfa0:	6923      	ldr	r3, [r4, #16]
 802cfa2:	3308      	adds	r3, #8
 802cfa4:	6123      	str	r3, [r4, #16]
 802cfa6:	68a3      	ldr	r3, [r4, #8]
 802cfa8:	3301      	adds	r3, #1
 802cfaa:	60a3      	str	r3, [r4, #8]
 802cfac:	e7e7      	b.n	802cf7e <_ZN8touchgfx7Outline8getCellsEv+0x44>
	...

0802cfb0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 802cfb0:	b538      	push	{r3, r4, r5, lr}
 802cfb2:	4c2b      	ldr	r4, [pc, #172]	; (802d060 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 802cfb4:	4b2b      	ldr	r3, [pc, #172]	; (802d064 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 802cfb6:	6821      	ldr	r1, [r4, #0]
 802cfb8:	681a      	ldr	r2, [r3, #0]
 802cfba:	4d2b      	ldr	r5, [pc, #172]	; (802d068 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 802cfbc:	4281      	cmp	r1, r0
 802cfbe:	492b      	ldr	r1, [pc, #172]	; (802d06c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 802cfc0:	d108      	bne.n	802cfd4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802cfc2:	682b      	ldr	r3, [r5, #0]
 802cfc4:	4293      	cmp	r3, r2
 802cfc6:	d105      	bne.n	802cfd4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 802cfc8:	6808      	ldr	r0, [r1, #0]
 802cfca:	280f      	cmp	r0, #15
 802cfcc:	bf94      	ite	ls
 802cfce:	2000      	movls	r0, #0
 802cfd0:	2001      	movhi	r0, #1
 802cfd2:	bd38      	pop	{r3, r4, r5, pc}
 802cfd4:	4b26      	ldr	r3, [pc, #152]	; (802d070 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 802cfd6:	6020      	str	r0, [r4, #0]
 802cfd8:	681b      	ldr	r3, [r3, #0]
 802cfda:	602a      	str	r2, [r5, #0]
 802cfdc:	4298      	cmp	r0, r3
 802cfde:	d905      	bls.n	802cfec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 802cfe0:	4b24      	ldr	r3, [pc, #144]	; (802d074 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802cfe2:	4a25      	ldr	r2, [pc, #148]	; (802d078 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802cfe4:	2137      	movs	r1, #55	; 0x37
 802cfe6:	4825      	ldr	r0, [pc, #148]	; (802d07c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 802cfe8:	f000 ff32 	bl	802de50 <__assert_func>
 802cfec:	f010 0403 	ands.w	r4, r0, #3
 802cff0:	bf1f      	itttt	ne
 802cff2:	f1c4 0504 	rsbne	r5, r4, #4
 802cff6:	3b04      	subne	r3, #4
 802cff8:	1952      	addne	r2, r2, r5
 802cffa:	191b      	addne	r3, r3, r4
 802cffc:	4402      	add	r2, r0
 802cffe:	1a1b      	subs	r3, r3, r0
 802d000:	3001      	adds	r0, #1
 802d002:	f020 0401 	bic.w	r4, r0, #1
 802d006:	4d1e      	ldr	r5, [pc, #120]	; (802d080 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 802d008:	42a3      	cmp	r3, r4
 802d00a:	602a      	str	r2, [r5, #0]
 802d00c:	d203      	bcs.n	802d016 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 802d00e:	4b19      	ldr	r3, [pc, #100]	; (802d074 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d010:	4a19      	ldr	r2, [pc, #100]	; (802d078 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d012:	214a      	movs	r1, #74	; 0x4a
 802d014:	e7e7      	b.n	802cfe6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d016:	f010 0002 	ands.w	r0, r0, #2
 802d01a:	bf1f      	itttt	ne
 802d01c:	f1c0 0504 	rsbne	r5, r0, #4
 802d020:	1952      	addne	r2, r2, r5
 802d022:	1f05      	subne	r5, r0, #4
 802d024:	195b      	addne	r3, r3, r5
 802d026:	1b1b      	subs	r3, r3, r4
 802d028:	4d16      	ldr	r5, [pc, #88]	; (802d084 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 802d02a:	4422      	add	r2, r4
 802d02c:	429c      	cmp	r4, r3
 802d02e:	602a      	str	r2, [r5, #0]
 802d030:	d903      	bls.n	802d03a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 802d032:	4b10      	ldr	r3, [pc, #64]	; (802d074 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 802d034:	4a10      	ldr	r2, [pc, #64]	; (802d078 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d036:	215d      	movs	r1, #93	; 0x5d
 802d038:	e7d5      	b.n	802cfe6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d03a:	b120      	cbz	r0, 802d046 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 802d03c:	f1c0 0504 	rsb	r5, r0, #4
 802d040:	3804      	subs	r0, #4
 802d042:	442a      	add	r2, r5
 802d044:	4403      	add	r3, r0
 802d046:	1b1b      	subs	r3, r3, r4
 802d048:	480f      	ldr	r0, [pc, #60]	; (802d088 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 802d04a:	600b      	str	r3, [r1, #0]
 802d04c:	4422      	add	r2, r4
 802d04e:	2b0f      	cmp	r3, #15
 802d050:	6002      	str	r2, [r0, #0]
 802d052:	d803      	bhi.n	802d05c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 802d054:	4b0d      	ldr	r3, [pc, #52]	; (802d08c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 802d056:	4a08      	ldr	r2, [pc, #32]	; (802d078 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 802d058:	2170      	movs	r1, #112	; 0x70
 802d05a:	e7c4      	b.n	802cfe6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 802d05c:	2001      	movs	r0, #1
 802d05e:	e7b8      	b.n	802cfd2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 802d060:	200098ac 	.word	0x200098ac
 802d064:	200098a4 	.word	0x200098a4
 802d068:	200098b4 	.word	0x200098b4
 802d06c:	200098bc 	.word	0x200098bc
 802d070:	200098b8 	.word	0x200098b8
 802d074:	08033538 	.word	0x08033538
 802d078:	08033600 	.word	0x08033600
 802d07c:	08033571 	.word	0x08033571
 802d080:	200098c0 	.word	0x200098c0
 802d084:	200098b0 	.word	0x200098b0
 802d088:	200098a8 	.word	0x200098a8
 802d08c:	080335bb 	.word	0x080335bb

0802d090 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 802d090:	4b04      	ldr	r3, [pc, #16]	; (802d0a4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 802d092:	6818      	ldr	r0, [r3, #0]
 802d094:	b120      	cbz	r0, 802d0a0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 802d096:	4b04      	ldr	r3, [pc, #16]	; (802d0a8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 802d098:	6818      	ldr	r0, [r3, #0]
 802d09a:	3000      	adds	r0, #0
 802d09c:	bf18      	it	ne
 802d09e:	2001      	movne	r0, #1
 802d0a0:	4770      	bx	lr
 802d0a2:	bf00      	nop
 802d0a4:	200098a4 	.word	0x200098a4
 802d0a8:	200098b8 	.word	0x200098b8

0802d0ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 802d0ac:	4b01      	ldr	r3, [pc, #4]	; (802d0b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 802d0ae:	6818      	ldr	r0, [r3, #0]
 802d0b0:	4770      	bx	lr
 802d0b2:	bf00      	nop
 802d0b4:	200098ac 	.word	0x200098ac

0802d0b8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 802d0b8:	4b01      	ldr	r3, [pc, #4]	; (802d0c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 802d0ba:	6818      	ldr	r0, [r3, #0]
 802d0bc:	4770      	bx	lr
 802d0be:	bf00      	nop
 802d0c0:	200098b4 	.word	0x200098b4

0802d0c4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 802d0c4:	4b01      	ldr	r3, [pc, #4]	; (802d0cc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 802d0c6:	6818      	ldr	r0, [r3, #0]
 802d0c8:	4770      	bx	lr
 802d0ca:	bf00      	nop
 802d0cc:	200098c0 	.word	0x200098c0

0802d0d0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 802d0d0:	4b01      	ldr	r3, [pc, #4]	; (802d0d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 802d0d2:	6818      	ldr	r0, [r3, #0]
 802d0d4:	4770      	bx	lr
 802d0d6:	bf00      	nop
 802d0d8:	200098b0 	.word	0x200098b0

0802d0dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 802d0dc:	4b01      	ldr	r3, [pc, #4]	; (802d0e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 802d0de:	6818      	ldr	r0, [r3, #0]
 802d0e0:	4770      	bx	lr
 802d0e2:	bf00      	nop
 802d0e4:	200098a8 	.word	0x200098a8

0802d0e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 802d0e8:	4b01      	ldr	r3, [pc, #4]	; (802d0f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 802d0ea:	6818      	ldr	r0, [r3, #0]
 802d0ec:	4770      	bx	lr
 802d0ee:	bf00      	nop
 802d0f0:	200098bc 	.word	0x200098bc

0802d0f4 <_ZN8touchgfx8ScanlineD1Ev>:
 802d0f4:	4770      	bx	lr

0802d0f6 <_ZN8touchgfx8ScanlineD0Ev>:
 802d0f6:	b510      	push	{r4, lr}
 802d0f8:	2124      	movs	r1, #36	; 0x24
 802d0fa:	4604      	mov	r4, r0
 802d0fc:	f000 f889 	bl	802d212 <_ZdlPvj>
 802d100:	4620      	mov	r0, r4
 802d102:	bd10      	pop	{r4, pc}

0802d104 <_ZN8touchgfx8Scanline5resetEv>:
 802d104:	b510      	push	{r4, lr}
 802d106:	4604      	mov	r4, r0
 802d108:	f7ff ffd6 	bl	802d0b8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802d10c:	61a0      	str	r0, [r4, #24]
 802d10e:	f7ff ffd9 	bl	802d0c4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802d112:	61e0      	str	r0, [r4, #28]
 802d114:	f7ff ffdc 	bl	802d0d0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802d118:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802d11c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802d120:	69e3      	ldr	r3, [r4, #28]
 802d122:	6123      	str	r3, [r4, #16]
 802d124:	2300      	movs	r3, #0
 802d126:	6220      	str	r0, [r4, #32]
 802d128:	6160      	str	r0, [r4, #20]
 802d12a:	60e3      	str	r3, [r4, #12]
 802d12c:	bd10      	pop	{r4, pc}
	...

0802d130 <_ZN8touchgfx8ScanlineC1Ev>:
 802d130:	b510      	push	{r4, lr}
 802d132:	4b09      	ldr	r3, [pc, #36]	; (802d158 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 802d134:	6003      	str	r3, [r0, #0]
 802d136:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802d13a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802d13e:	2300      	movs	r3, #0
 802d140:	4604      	mov	r4, r0
 802d142:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802d146:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802d14a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802d14e:	f7ff ffd9 	bl	802d104 <_ZN8touchgfx8Scanline5resetEv>
 802d152:	4620      	mov	r0, r4
 802d154:	bd10      	pop	{r4, pc}
 802d156:	bf00      	nop
 802d158:	08033654 	.word	0x08033654

0802d15c <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802d15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d160:	1e0c      	subs	r4, r1, #0
 802d162:	4605      	mov	r5, r0
 802d164:	4617      	mov	r7, r2
 802d166:	461e      	mov	r6, r3
 802d168:	da03      	bge.n	802d172 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802d16a:	4426      	add	r6, r4
 802d16c:	2e01      	cmp	r6, #1
 802d16e:	d421      	bmi.n	802d1b4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802d170:	2400      	movs	r4, #0
 802d172:	f7ff ff9b 	bl	802d0ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d176:	42a0      	cmp	r0, r4
 802d178:	dd1c      	ble.n	802d1b4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802d17a:	f7ff ff97 	bl	802d0ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d17e:	eb04 0806 	add.w	r8, r4, r6
 802d182:	4580      	cmp	r8, r0
 802d184:	d902      	bls.n	802d18c <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802d186:	f7ff ff91 	bl	802d0ac <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802d18a:	1b06      	subs	r6, r0, r4
 802d18c:	69a8      	ldr	r0, [r5, #24]
 802d18e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802d192:	4632      	mov	r2, r6
 802d194:	4420      	add	r0, r4
 802d196:	f7f0 f83d 	bl	801d214 <_ZN8touchgfx6memsetEPvhm>
 802d19a:	686b      	ldr	r3, [r5, #4]
 802d19c:	3301      	adds	r3, #1
 802d19e:	42a3      	cmp	r3, r4
 802d1a0:	b2b2      	uxth	r2, r6
 802d1a2:	696b      	ldr	r3, [r5, #20]
 802d1a4:	d108      	bne.n	802d1b8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802d1a6:	8819      	ldrh	r1, [r3, #0]
 802d1a8:	440a      	add	r2, r1
 802d1aa:	801a      	strh	r2, [r3, #0]
 802d1ac:	3c01      	subs	r4, #1
 802d1ae:	4434      	add	r4, r6
 802d1b0:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802d1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d1b8:	1c99      	adds	r1, r3, #2
 802d1ba:	6169      	str	r1, [r5, #20]
 802d1bc:	805a      	strh	r2, [r3, #2]
 802d1be:	692b      	ldr	r3, [r5, #16]
 802d1c0:	1c9a      	adds	r2, r3, #2
 802d1c2:	612a      	str	r2, [r5, #16]
 802d1c4:	805c      	strh	r4, [r3, #2]
 802d1c6:	68eb      	ldr	r3, [r5, #12]
 802d1c8:	3301      	adds	r3, #1
 802d1ca:	60eb      	str	r3, [r5, #12]
 802d1cc:	e7ee      	b.n	802d1ac <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802d1ce <_ZN8touchgfx15RenderingBufferD1Ev>:
 802d1ce:	4770      	bx	lr

0802d1d0 <_ZN8touchgfx15RenderingBufferD0Ev>:
 802d1d0:	b510      	push	{r4, lr}
 802d1d2:	2118      	movs	r1, #24
 802d1d4:	4604      	mov	r4, r0
 802d1d6:	f000 f81c 	bl	802d212 <_ZdlPvj>
 802d1da:	4620      	mov	r0, r4
 802d1dc:	bd10      	pop	{r4, pc}
	...

0802d1e0 <_ZN8touchgfx15RenderingBufferC1Ev>:
 802d1e0:	4a04      	ldr	r2, [pc, #16]	; (802d1f4 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802d1e2:	6002      	str	r2, [r0, #0]
 802d1e4:	2200      	movs	r2, #0
 802d1e6:	6042      	str	r2, [r0, #4]
 802d1e8:	7202      	strb	r2, [r0, #8]
 802d1ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802d1ee:	6142      	str	r2, [r0, #20]
 802d1f0:	4770      	bx	lr
 802d1f2:	bf00      	nop
 802d1f4:	08033664 	.word	0x08033664

0802d1f8 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802d1f8:	60c3      	str	r3, [r0, #12]
 802d1fa:	9b00      	ldr	r3, [sp, #0]
 802d1fc:	6103      	str	r3, [r0, #16]
 802d1fe:	9b01      	ldr	r3, [sp, #4]
 802d200:	6041      	str	r1, [r0, #4]
 802d202:	7202      	strb	r2, [r0, #8]
 802d204:	6143      	str	r3, [r0, #20]
 802d206:	4770      	bx	lr

0802d208 <__aeabi_atexit>:
 802d208:	460b      	mov	r3, r1
 802d20a:	4601      	mov	r1, r0
 802d20c:	4618      	mov	r0, r3
 802d20e:	f000 be4b 	b.w	802dea8 <__cxa_atexit>

0802d212 <_ZdlPvj>:
 802d212:	f000 b812 	b.w	802d23a <_ZdlPv>

0802d216 <__cxa_guard_acquire>:
 802d216:	6803      	ldr	r3, [r0, #0]
 802d218:	07db      	lsls	r3, r3, #31
 802d21a:	d406      	bmi.n	802d22a <__cxa_guard_acquire+0x14>
 802d21c:	7843      	ldrb	r3, [r0, #1]
 802d21e:	b103      	cbz	r3, 802d222 <__cxa_guard_acquire+0xc>
 802d220:	deff      	udf	#255	; 0xff
 802d222:	2301      	movs	r3, #1
 802d224:	7043      	strb	r3, [r0, #1]
 802d226:	4618      	mov	r0, r3
 802d228:	4770      	bx	lr
 802d22a:	2000      	movs	r0, #0
 802d22c:	4770      	bx	lr

0802d22e <__cxa_guard_release>:
 802d22e:	2301      	movs	r3, #1
 802d230:	6003      	str	r3, [r0, #0]
 802d232:	4770      	bx	lr

0802d234 <__cxa_pure_virtual>:
 802d234:	b508      	push	{r3, lr}
 802d236:	f000 f80f 	bl	802d258 <_ZSt9terminatev>

0802d23a <_ZdlPv>:
 802d23a:	f000 bf81 	b.w	802e140 <free>

0802d23e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802d23e:	b508      	push	{r3, lr}
 802d240:	4780      	blx	r0
 802d242:	f000 fdfd 	bl	802de40 <abort>
	...

0802d248 <_ZSt13get_terminatev>:
 802d248:	4b02      	ldr	r3, [pc, #8]	; (802d254 <_ZSt13get_terminatev+0xc>)
 802d24a:	6818      	ldr	r0, [r3, #0]
 802d24c:	f3bf 8f5b 	dmb	ish
 802d250:	4770      	bx	lr
 802d252:	bf00      	nop
 802d254:	20000094 	.word	0x20000094

0802d258 <_ZSt9terminatev>:
 802d258:	b508      	push	{r3, lr}
 802d25a:	f7ff fff5 	bl	802d248 <_ZSt13get_terminatev>
 802d25e:	f7ff ffee 	bl	802d23e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0802d264 <ceilf>:
 802d264:	ee10 3a10 	vmov	r3, s0
 802d268:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d26c:	3a7f      	subs	r2, #127	; 0x7f
 802d26e:	2a16      	cmp	r2, #22
 802d270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d274:	dc2a      	bgt.n	802d2cc <ceilf+0x68>
 802d276:	2a00      	cmp	r2, #0
 802d278:	da11      	bge.n	802d29e <ceilf+0x3a>
 802d27a:	eddf 7a19 	vldr	s15, [pc, #100]	; 802d2e0 <ceilf+0x7c>
 802d27e:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d282:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d28a:	dd05      	ble.n	802d298 <ceilf+0x34>
 802d28c:	2b00      	cmp	r3, #0
 802d28e:	db23      	blt.n	802d2d8 <ceilf+0x74>
 802d290:	2900      	cmp	r1, #0
 802d292:	bf18      	it	ne
 802d294:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 802d298:	ee00 3a10 	vmov	s0, r3
 802d29c:	4770      	bx	lr
 802d29e:	4911      	ldr	r1, [pc, #68]	; (802d2e4 <ceilf+0x80>)
 802d2a0:	4111      	asrs	r1, r2
 802d2a2:	420b      	tst	r3, r1
 802d2a4:	d0fa      	beq.n	802d29c <ceilf+0x38>
 802d2a6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802d2e0 <ceilf+0x7c>
 802d2aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d2ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d2b6:	ddef      	ble.n	802d298 <ceilf+0x34>
 802d2b8:	2b00      	cmp	r3, #0
 802d2ba:	bfc2      	ittt	gt
 802d2bc:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 802d2c0:	fa40 f202 	asrgt.w	r2, r0, r2
 802d2c4:	189b      	addgt	r3, r3, r2
 802d2c6:	ea23 0301 	bic.w	r3, r3, r1
 802d2ca:	e7e5      	b.n	802d298 <ceilf+0x34>
 802d2cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802d2d0:	d3e4      	bcc.n	802d29c <ceilf+0x38>
 802d2d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d2d6:	4770      	bx	lr
 802d2d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802d2dc:	e7dc      	b.n	802d298 <ceilf+0x34>
 802d2de:	bf00      	nop
 802d2e0:	7149f2ca 	.word	0x7149f2ca
 802d2e4:	007fffff 	.word	0x007fffff

0802d2e8 <cosf>:
 802d2e8:	ee10 3a10 	vmov	r3, s0
 802d2ec:	b507      	push	{r0, r1, r2, lr}
 802d2ee:	4a1c      	ldr	r2, [pc, #112]	; (802d360 <cosf+0x78>)
 802d2f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d2f4:	4293      	cmp	r3, r2
 802d2f6:	dc04      	bgt.n	802d302 <cosf+0x1a>
 802d2f8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802d364 <cosf+0x7c>
 802d2fc:	f000 f9f4 	bl	802d6e8 <__kernel_cosf>
 802d300:	e004      	b.n	802d30c <cosf+0x24>
 802d302:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802d306:	db04      	blt.n	802d312 <cosf+0x2a>
 802d308:	ee30 0a40 	vsub.f32	s0, s0, s0
 802d30c:	b003      	add	sp, #12
 802d30e:	f85d fb04 	ldr.w	pc, [sp], #4
 802d312:	4668      	mov	r0, sp
 802d314:	f000 f8ac 	bl	802d470 <__ieee754_rem_pio2f>
 802d318:	f000 0003 	and.w	r0, r0, #3
 802d31c:	2801      	cmp	r0, #1
 802d31e:	d007      	beq.n	802d330 <cosf+0x48>
 802d320:	2802      	cmp	r0, #2
 802d322:	d00e      	beq.n	802d342 <cosf+0x5a>
 802d324:	b9a0      	cbnz	r0, 802d350 <cosf+0x68>
 802d326:	eddd 0a01 	vldr	s1, [sp, #4]
 802d32a:	ed9d 0a00 	vldr	s0, [sp]
 802d32e:	e7e5      	b.n	802d2fc <cosf+0x14>
 802d330:	eddd 0a01 	vldr	s1, [sp, #4]
 802d334:	ed9d 0a00 	vldr	s0, [sp]
 802d338:	f000 fcc0 	bl	802dcbc <__kernel_sinf>
 802d33c:	eeb1 0a40 	vneg.f32	s0, s0
 802d340:	e7e4      	b.n	802d30c <cosf+0x24>
 802d342:	eddd 0a01 	vldr	s1, [sp, #4]
 802d346:	ed9d 0a00 	vldr	s0, [sp]
 802d34a:	f000 f9cd 	bl	802d6e8 <__kernel_cosf>
 802d34e:	e7f5      	b.n	802d33c <cosf+0x54>
 802d350:	eddd 0a01 	vldr	s1, [sp, #4]
 802d354:	ed9d 0a00 	vldr	s0, [sp]
 802d358:	2001      	movs	r0, #1
 802d35a:	f000 fcaf 	bl	802dcbc <__kernel_sinf>
 802d35e:	e7d5      	b.n	802d30c <cosf+0x24>
 802d360:	3f490fd8 	.word	0x3f490fd8
 802d364:	00000000 	.word	0x00000000

0802d368 <floorf>:
 802d368:	ee10 3a10 	vmov	r3, s0
 802d36c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802d370:	3a7f      	subs	r2, #127	; 0x7f
 802d372:	2a16      	cmp	r2, #22
 802d374:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802d378:	dc2a      	bgt.n	802d3d0 <floorf+0x68>
 802d37a:	2a00      	cmp	r2, #0
 802d37c:	da11      	bge.n	802d3a2 <floorf+0x3a>
 802d37e:	eddf 7a18 	vldr	s15, [pc, #96]	; 802d3e0 <floorf+0x78>
 802d382:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d386:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d38e:	dd05      	ble.n	802d39c <floorf+0x34>
 802d390:	2b00      	cmp	r3, #0
 802d392:	da23      	bge.n	802d3dc <floorf+0x74>
 802d394:	4a13      	ldr	r2, [pc, #76]	; (802d3e4 <floorf+0x7c>)
 802d396:	2900      	cmp	r1, #0
 802d398:	bf18      	it	ne
 802d39a:	4613      	movne	r3, r2
 802d39c:	ee00 3a10 	vmov	s0, r3
 802d3a0:	4770      	bx	lr
 802d3a2:	4911      	ldr	r1, [pc, #68]	; (802d3e8 <floorf+0x80>)
 802d3a4:	4111      	asrs	r1, r2
 802d3a6:	420b      	tst	r3, r1
 802d3a8:	d0fa      	beq.n	802d3a0 <floorf+0x38>
 802d3aa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802d3e0 <floorf+0x78>
 802d3ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 802d3b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802d3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d3ba:	ddef      	ble.n	802d39c <floorf+0x34>
 802d3bc:	2b00      	cmp	r3, #0
 802d3be:	bfbe      	ittt	lt
 802d3c0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802d3c4:	fa40 f202 	asrlt.w	r2, r0, r2
 802d3c8:	189b      	addlt	r3, r3, r2
 802d3ca:	ea23 0301 	bic.w	r3, r3, r1
 802d3ce:	e7e5      	b.n	802d39c <floorf+0x34>
 802d3d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802d3d4:	d3e4      	bcc.n	802d3a0 <floorf+0x38>
 802d3d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 802d3da:	4770      	bx	lr
 802d3dc:	2300      	movs	r3, #0
 802d3de:	e7dd      	b.n	802d39c <floorf+0x34>
 802d3e0:	7149f2ca 	.word	0x7149f2ca
 802d3e4:	bf800000 	.word	0xbf800000
 802d3e8:	007fffff 	.word	0x007fffff

0802d3ec <sinf>:
 802d3ec:	ee10 3a10 	vmov	r3, s0
 802d3f0:	b507      	push	{r0, r1, r2, lr}
 802d3f2:	4a1d      	ldr	r2, [pc, #116]	; (802d468 <sinf+0x7c>)
 802d3f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d3f8:	4293      	cmp	r3, r2
 802d3fa:	dc05      	bgt.n	802d408 <sinf+0x1c>
 802d3fc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802d46c <sinf+0x80>
 802d400:	2000      	movs	r0, #0
 802d402:	f000 fc5b 	bl	802dcbc <__kernel_sinf>
 802d406:	e004      	b.n	802d412 <sinf+0x26>
 802d408:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802d40c:	db04      	blt.n	802d418 <sinf+0x2c>
 802d40e:	ee30 0a40 	vsub.f32	s0, s0, s0
 802d412:	b003      	add	sp, #12
 802d414:	f85d fb04 	ldr.w	pc, [sp], #4
 802d418:	4668      	mov	r0, sp
 802d41a:	f000 f829 	bl	802d470 <__ieee754_rem_pio2f>
 802d41e:	f000 0003 	and.w	r0, r0, #3
 802d422:	2801      	cmp	r0, #1
 802d424:	d008      	beq.n	802d438 <sinf+0x4c>
 802d426:	2802      	cmp	r0, #2
 802d428:	d00d      	beq.n	802d446 <sinf+0x5a>
 802d42a:	b9b0      	cbnz	r0, 802d45a <sinf+0x6e>
 802d42c:	eddd 0a01 	vldr	s1, [sp, #4]
 802d430:	ed9d 0a00 	vldr	s0, [sp]
 802d434:	2001      	movs	r0, #1
 802d436:	e7e4      	b.n	802d402 <sinf+0x16>
 802d438:	eddd 0a01 	vldr	s1, [sp, #4]
 802d43c:	ed9d 0a00 	vldr	s0, [sp]
 802d440:	f000 f952 	bl	802d6e8 <__kernel_cosf>
 802d444:	e7e5      	b.n	802d412 <sinf+0x26>
 802d446:	eddd 0a01 	vldr	s1, [sp, #4]
 802d44a:	ed9d 0a00 	vldr	s0, [sp]
 802d44e:	2001      	movs	r0, #1
 802d450:	f000 fc34 	bl	802dcbc <__kernel_sinf>
 802d454:	eeb1 0a40 	vneg.f32	s0, s0
 802d458:	e7db      	b.n	802d412 <sinf+0x26>
 802d45a:	eddd 0a01 	vldr	s1, [sp, #4]
 802d45e:	ed9d 0a00 	vldr	s0, [sp]
 802d462:	f000 f941 	bl	802d6e8 <__kernel_cosf>
 802d466:	e7f5      	b.n	802d454 <sinf+0x68>
 802d468:	3f490fd8 	.word	0x3f490fd8
 802d46c:	00000000 	.word	0x00000000

0802d470 <__ieee754_rem_pio2f>:
 802d470:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d472:	ee10 6a10 	vmov	r6, s0
 802d476:	4b8e      	ldr	r3, [pc, #568]	; (802d6b0 <__ieee754_rem_pio2f+0x240>)
 802d478:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802d47c:	429d      	cmp	r5, r3
 802d47e:	b087      	sub	sp, #28
 802d480:	eef0 7a40 	vmov.f32	s15, s0
 802d484:	4604      	mov	r4, r0
 802d486:	dc05      	bgt.n	802d494 <__ieee754_rem_pio2f+0x24>
 802d488:	2300      	movs	r3, #0
 802d48a:	ed80 0a00 	vstr	s0, [r0]
 802d48e:	6043      	str	r3, [r0, #4]
 802d490:	2000      	movs	r0, #0
 802d492:	e01a      	b.n	802d4ca <__ieee754_rem_pio2f+0x5a>
 802d494:	4b87      	ldr	r3, [pc, #540]	; (802d6b4 <__ieee754_rem_pio2f+0x244>)
 802d496:	429d      	cmp	r5, r3
 802d498:	dc46      	bgt.n	802d528 <__ieee754_rem_pio2f+0xb8>
 802d49a:	2e00      	cmp	r6, #0
 802d49c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 802d6b8 <__ieee754_rem_pio2f+0x248>
 802d4a0:	4b86      	ldr	r3, [pc, #536]	; (802d6bc <__ieee754_rem_pio2f+0x24c>)
 802d4a2:	f025 050f 	bic.w	r5, r5, #15
 802d4a6:	dd1f      	ble.n	802d4e8 <__ieee754_rem_pio2f+0x78>
 802d4a8:	429d      	cmp	r5, r3
 802d4aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d4ae:	d00e      	beq.n	802d4ce <__ieee754_rem_pio2f+0x5e>
 802d4b0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 802d6c0 <__ieee754_rem_pio2f+0x250>
 802d4b4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802d4b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d4bc:	ed80 0a00 	vstr	s0, [r0]
 802d4c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d4c4:	2001      	movs	r0, #1
 802d4c6:	edc4 7a01 	vstr	s15, [r4, #4]
 802d4ca:	b007      	add	sp, #28
 802d4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d4ce:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 802d6c4 <__ieee754_rem_pio2f+0x254>
 802d4d2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802d6c8 <__ieee754_rem_pio2f+0x258>
 802d4d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d4da:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802d4de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d4e2:	edc0 6a00 	vstr	s13, [r0]
 802d4e6:	e7eb      	b.n	802d4c0 <__ieee754_rem_pio2f+0x50>
 802d4e8:	429d      	cmp	r5, r3
 802d4ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 802d4ee:	d00e      	beq.n	802d50e <__ieee754_rem_pio2f+0x9e>
 802d4f0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 802d6c0 <__ieee754_rem_pio2f+0x250>
 802d4f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 802d4f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802d4fc:	ed80 0a00 	vstr	s0, [r0]
 802d500:	ee77 7a87 	vadd.f32	s15, s15, s14
 802d504:	f04f 30ff 	mov.w	r0, #4294967295
 802d508:	edc4 7a01 	vstr	s15, [r4, #4]
 802d50c:	e7dd      	b.n	802d4ca <__ieee754_rem_pio2f+0x5a>
 802d50e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 802d6c4 <__ieee754_rem_pio2f+0x254>
 802d512:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 802d6c8 <__ieee754_rem_pio2f+0x258>
 802d516:	ee77 7a80 	vadd.f32	s15, s15, s0
 802d51a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802d51e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d522:	edc0 6a00 	vstr	s13, [r0]
 802d526:	e7eb      	b.n	802d500 <__ieee754_rem_pio2f+0x90>
 802d528:	4b68      	ldr	r3, [pc, #416]	; (802d6cc <__ieee754_rem_pio2f+0x25c>)
 802d52a:	429d      	cmp	r5, r3
 802d52c:	dc72      	bgt.n	802d614 <__ieee754_rem_pio2f+0x1a4>
 802d52e:	f000 fc0d 	bl	802dd4c <fabsf>
 802d532:	ed9f 7a67 	vldr	s14, [pc, #412]	; 802d6d0 <__ieee754_rem_pio2f+0x260>
 802d536:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802d53a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802d53e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802d546:	ee17 0a90 	vmov	r0, s15
 802d54a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802d6b8 <__ieee754_rem_pio2f+0x248>
 802d54e:	eea7 0a67 	vfms.f32	s0, s14, s15
 802d552:	281f      	cmp	r0, #31
 802d554:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802d6c0 <__ieee754_rem_pio2f+0x250>
 802d558:	ee67 7a27 	vmul.f32	s15, s14, s15
 802d55c:	eeb1 6a47 	vneg.f32	s12, s14
 802d560:	ee70 6a67 	vsub.f32	s13, s0, s15
 802d564:	ee16 2a90 	vmov	r2, s13
 802d568:	dc1c      	bgt.n	802d5a4 <__ieee754_rem_pio2f+0x134>
 802d56a:	495a      	ldr	r1, [pc, #360]	; (802d6d4 <__ieee754_rem_pio2f+0x264>)
 802d56c:	1e47      	subs	r7, r0, #1
 802d56e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802d572:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802d576:	428b      	cmp	r3, r1
 802d578:	d014      	beq.n	802d5a4 <__ieee754_rem_pio2f+0x134>
 802d57a:	6022      	str	r2, [r4, #0]
 802d57c:	ed94 7a00 	vldr	s14, [r4]
 802d580:	ee30 0a47 	vsub.f32	s0, s0, s14
 802d584:	2e00      	cmp	r6, #0
 802d586:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d58a:	ed84 0a01 	vstr	s0, [r4, #4]
 802d58e:	da9c      	bge.n	802d4ca <__ieee754_rem_pio2f+0x5a>
 802d590:	eeb1 7a47 	vneg.f32	s14, s14
 802d594:	eeb1 0a40 	vneg.f32	s0, s0
 802d598:	ed84 7a00 	vstr	s14, [r4]
 802d59c:	ed84 0a01 	vstr	s0, [r4, #4]
 802d5a0:	4240      	negs	r0, r0
 802d5a2:	e792      	b.n	802d4ca <__ieee754_rem_pio2f+0x5a>
 802d5a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d5a8:	15eb      	asrs	r3, r5, #23
 802d5aa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802d5ae:	2d08      	cmp	r5, #8
 802d5b0:	dde3      	ble.n	802d57a <__ieee754_rem_pio2f+0x10a>
 802d5b2:	eddf 7a44 	vldr	s15, [pc, #272]	; 802d6c4 <__ieee754_rem_pio2f+0x254>
 802d5b6:	eef0 6a40 	vmov.f32	s13, s0
 802d5ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 802d5be:	ee30 0a66 	vsub.f32	s0, s0, s13
 802d5c2:	eea6 0a27 	vfma.f32	s0, s12, s15
 802d5c6:	eddf 7a40 	vldr	s15, [pc, #256]	; 802d6c8 <__ieee754_rem_pio2f+0x258>
 802d5ca:	ee97 0a27 	vfnms.f32	s0, s14, s15
 802d5ce:	ee76 5ac0 	vsub.f32	s11, s13, s0
 802d5d2:	eef0 7a40 	vmov.f32	s15, s0
 802d5d6:	ee15 2a90 	vmov	r2, s11
 802d5da:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802d5de:	1a5b      	subs	r3, r3, r1
 802d5e0:	2b19      	cmp	r3, #25
 802d5e2:	dc04      	bgt.n	802d5ee <__ieee754_rem_pio2f+0x17e>
 802d5e4:	edc4 5a00 	vstr	s11, [r4]
 802d5e8:	eeb0 0a66 	vmov.f32	s0, s13
 802d5ec:	e7c6      	b.n	802d57c <__ieee754_rem_pio2f+0x10c>
 802d5ee:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802d6d8 <__ieee754_rem_pio2f+0x268>
 802d5f2:	eeb0 0a66 	vmov.f32	s0, s13
 802d5f6:	eea6 0a25 	vfma.f32	s0, s12, s11
 802d5fa:	ee76 7ac0 	vsub.f32	s15, s13, s0
 802d5fe:	eddf 6a37 	vldr	s13, [pc, #220]	; 802d6dc <__ieee754_rem_pio2f+0x26c>
 802d602:	eee6 7a25 	vfma.f32	s15, s12, s11
 802d606:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802d60a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802d60e:	ed84 7a00 	vstr	s14, [r4]
 802d612:	e7b3      	b.n	802d57c <__ieee754_rem_pio2f+0x10c>
 802d614:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802d618:	db06      	blt.n	802d628 <__ieee754_rem_pio2f+0x1b8>
 802d61a:	ee70 7a40 	vsub.f32	s15, s0, s0
 802d61e:	edc0 7a01 	vstr	s15, [r0, #4]
 802d622:	edc0 7a00 	vstr	s15, [r0]
 802d626:	e733      	b.n	802d490 <__ieee754_rem_pio2f+0x20>
 802d628:	15ea      	asrs	r2, r5, #23
 802d62a:	3a86      	subs	r2, #134	; 0x86
 802d62c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802d630:	ee07 3a90 	vmov	s15, r3
 802d634:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d638:	eddf 6a29 	vldr	s13, [pc, #164]	; 802d6e0 <__ieee754_rem_pio2f+0x270>
 802d63c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d640:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d644:	ed8d 7a03 	vstr	s14, [sp, #12]
 802d648:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d64c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802d650:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802d654:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d658:	ed8d 7a04 	vstr	s14, [sp, #16]
 802d65c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802d660:	eef5 7a40 	vcmp.f32	s15, #0.0
 802d664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d668:	edcd 7a05 	vstr	s15, [sp, #20]
 802d66c:	d11e      	bne.n	802d6ac <__ieee754_rem_pio2f+0x23c>
 802d66e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802d672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d676:	bf14      	ite	ne
 802d678:	2302      	movne	r3, #2
 802d67a:	2301      	moveq	r3, #1
 802d67c:	4919      	ldr	r1, [pc, #100]	; (802d6e4 <__ieee754_rem_pio2f+0x274>)
 802d67e:	9101      	str	r1, [sp, #4]
 802d680:	2102      	movs	r1, #2
 802d682:	9100      	str	r1, [sp, #0]
 802d684:	a803      	add	r0, sp, #12
 802d686:	4621      	mov	r1, r4
 802d688:	f000 f88e 	bl	802d7a8 <__kernel_rem_pio2f>
 802d68c:	2e00      	cmp	r6, #0
 802d68e:	f6bf af1c 	bge.w	802d4ca <__ieee754_rem_pio2f+0x5a>
 802d692:	edd4 7a00 	vldr	s15, [r4]
 802d696:	eef1 7a67 	vneg.f32	s15, s15
 802d69a:	edc4 7a00 	vstr	s15, [r4]
 802d69e:	edd4 7a01 	vldr	s15, [r4, #4]
 802d6a2:	eef1 7a67 	vneg.f32	s15, s15
 802d6a6:	edc4 7a01 	vstr	s15, [r4, #4]
 802d6aa:	e779      	b.n	802d5a0 <__ieee754_rem_pio2f+0x130>
 802d6ac:	2303      	movs	r3, #3
 802d6ae:	e7e5      	b.n	802d67c <__ieee754_rem_pio2f+0x20c>
 802d6b0:	3f490fd8 	.word	0x3f490fd8
 802d6b4:	4016cbe3 	.word	0x4016cbe3
 802d6b8:	3fc90f80 	.word	0x3fc90f80
 802d6bc:	3fc90fd0 	.word	0x3fc90fd0
 802d6c0:	37354443 	.word	0x37354443
 802d6c4:	37354400 	.word	0x37354400
 802d6c8:	2e85a308 	.word	0x2e85a308
 802d6cc:	43490f80 	.word	0x43490f80
 802d6d0:	3f22f984 	.word	0x3f22f984
 802d6d4:	0803366c 	.word	0x0803366c
 802d6d8:	2e85a300 	.word	0x2e85a300
 802d6dc:	248d3132 	.word	0x248d3132
 802d6e0:	43800000 	.word	0x43800000
 802d6e4:	080336ec 	.word	0x080336ec

0802d6e8 <__kernel_cosf>:
 802d6e8:	ee10 3a10 	vmov	r3, s0
 802d6ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802d6f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802d6f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802d6f8:	da05      	bge.n	802d706 <__kernel_cosf+0x1e>
 802d6fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802d6fe:	ee17 2a90 	vmov	r2, s15
 802d702:	2a00      	cmp	r2, #0
 802d704:	d03d      	beq.n	802d782 <__kernel_cosf+0x9a>
 802d706:	ee60 5a00 	vmul.f32	s11, s0, s0
 802d70a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802d788 <__kernel_cosf+0xa0>
 802d70e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 802d78c <__kernel_cosf+0xa4>
 802d712:	eddf 6a1f 	vldr	s13, [pc, #124]	; 802d790 <__kernel_cosf+0xa8>
 802d716:	4a1f      	ldr	r2, [pc, #124]	; (802d794 <__kernel_cosf+0xac>)
 802d718:	eea5 7aa7 	vfma.f32	s14, s11, s15
 802d71c:	4293      	cmp	r3, r2
 802d71e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802d798 <__kernel_cosf+0xb0>
 802d722:	eee7 7a25 	vfma.f32	s15, s14, s11
 802d726:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 802d79c <__kernel_cosf+0xb4>
 802d72a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802d72e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802d7a0 <__kernel_cosf+0xb8>
 802d732:	eee7 7a25 	vfma.f32	s15, s14, s11
 802d736:	eeb0 7a66 	vmov.f32	s14, s13
 802d73a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 802d73e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802d742:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802d746:	ee67 6a25 	vmul.f32	s13, s14, s11
 802d74a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 802d74e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802d752:	dc04      	bgt.n	802d75e <__kernel_cosf+0x76>
 802d754:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802d758:	ee36 0a47 	vsub.f32	s0, s12, s14
 802d75c:	4770      	bx	lr
 802d75e:	4a11      	ldr	r2, [pc, #68]	; (802d7a4 <__kernel_cosf+0xbc>)
 802d760:	4293      	cmp	r3, r2
 802d762:	bfda      	itte	le
 802d764:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802d768:	ee06 3a90 	vmovle	s13, r3
 802d76c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 802d770:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802d774:	ee36 0a66 	vsub.f32	s0, s12, s13
 802d778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802d77c:	ee30 0a67 	vsub.f32	s0, s0, s15
 802d780:	4770      	bx	lr
 802d782:	eeb0 0a46 	vmov.f32	s0, s12
 802d786:	4770      	bx	lr
 802d788:	ad47d74e 	.word	0xad47d74e
 802d78c:	310f74f6 	.word	0x310f74f6
 802d790:	3d2aaaab 	.word	0x3d2aaaab
 802d794:	3e999999 	.word	0x3e999999
 802d798:	b493f27c 	.word	0xb493f27c
 802d79c:	37d00d01 	.word	0x37d00d01
 802d7a0:	bab60b61 	.word	0xbab60b61
 802d7a4:	3f480000 	.word	0x3f480000

0802d7a8 <__kernel_rem_pio2f>:
 802d7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d7ac:	ed2d 8b04 	vpush	{d8-d9}
 802d7b0:	b0d7      	sub	sp, #348	; 0x15c
 802d7b2:	4616      	mov	r6, r2
 802d7b4:	4698      	mov	r8, r3
 802d7b6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802d7b8:	4bbb      	ldr	r3, [pc, #748]	; (802daa8 <__kernel_rem_pio2f+0x300>)
 802d7ba:	9001      	str	r0, [sp, #4]
 802d7bc:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 802d7c0:	1d33      	adds	r3, r6, #4
 802d7c2:	460d      	mov	r5, r1
 802d7c4:	f108 39ff 	add.w	r9, r8, #4294967295
 802d7c8:	db29      	blt.n	802d81e <__kernel_rem_pio2f+0x76>
 802d7ca:	1ef1      	subs	r1, r6, #3
 802d7cc:	bf48      	it	mi
 802d7ce:	1d31      	addmi	r1, r6, #4
 802d7d0:	10c9      	asrs	r1, r1, #3
 802d7d2:	1c4c      	adds	r4, r1, #1
 802d7d4:	00e3      	lsls	r3, r4, #3
 802d7d6:	9302      	str	r3, [sp, #8]
 802d7d8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802d7da:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 802dab8 <__kernel_rem_pio2f+0x310>
 802d7de:	eba1 0009 	sub.w	r0, r1, r9
 802d7e2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 802d7e6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 802d7ea:	eb07 0c09 	add.w	ip, r7, r9
 802d7ee:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 802d7f2:	2300      	movs	r3, #0
 802d7f4:	4563      	cmp	r3, ip
 802d7f6:	dd14      	ble.n	802d822 <__kernel_rem_pio2f+0x7a>
 802d7f8:	ab1a      	add	r3, sp, #104	; 0x68
 802d7fa:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 802d7fe:	46cc      	mov	ip, r9
 802d800:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 802d804:	f1c8 0b01 	rsb	fp, r8, #1
 802d808:	eb0b 020c 	add.w	r2, fp, ip
 802d80c:	4297      	cmp	r7, r2
 802d80e:	db27      	blt.n	802d860 <__kernel_rem_pio2f+0xb8>
 802d810:	f8dd e004 	ldr.w	lr, [sp, #4]
 802d814:	eddf 7aa8 	vldr	s15, [pc, #672]	; 802dab8 <__kernel_rem_pio2f+0x310>
 802d818:	4618      	mov	r0, r3
 802d81a:	2200      	movs	r2, #0
 802d81c:	e016      	b.n	802d84c <__kernel_rem_pio2f+0xa4>
 802d81e:	2100      	movs	r1, #0
 802d820:	e7d7      	b.n	802d7d2 <__kernel_rem_pio2f+0x2a>
 802d822:	42d8      	cmn	r0, r3
 802d824:	bf5d      	ittte	pl
 802d826:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 802d82a:	ee07 2a90 	vmovpl	s15, r2
 802d82e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802d832:	eef0 7a47 	vmovmi.f32	s15, s14
 802d836:	ecea 7a01 	vstmia	sl!, {s15}
 802d83a:	3301      	adds	r3, #1
 802d83c:	e7da      	b.n	802d7f4 <__kernel_rem_pio2f+0x4c>
 802d83e:	ecfe 6a01 	vldmia	lr!, {s13}
 802d842:	ed90 7a00 	vldr	s14, [r0]
 802d846:	eee6 7a87 	vfma.f32	s15, s13, s14
 802d84a:	3201      	adds	r2, #1
 802d84c:	454a      	cmp	r2, r9
 802d84e:	f1a0 0004 	sub.w	r0, r0, #4
 802d852:	ddf4      	ble.n	802d83e <__kernel_rem_pio2f+0x96>
 802d854:	ecea 7a01 	vstmia	sl!, {s15}
 802d858:	3304      	adds	r3, #4
 802d85a:	f10c 0c01 	add.w	ip, ip, #1
 802d85e:	e7d3      	b.n	802d808 <__kernel_rem_pio2f+0x60>
 802d860:	ab06      	add	r3, sp, #24
 802d862:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 802d866:	9304      	str	r3, [sp, #16]
 802d868:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802d86a:	eddf 8a92 	vldr	s17, [pc, #584]	; 802dab4 <__kernel_rem_pio2f+0x30c>
 802d86e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 802dab0 <__kernel_rem_pio2f+0x308>
 802d872:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802d876:	9303      	str	r3, [sp, #12]
 802d878:	46ba      	mov	sl, r7
 802d87a:	ab56      	add	r3, sp, #344	; 0x158
 802d87c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802d880:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802d884:	ab06      	add	r3, sp, #24
 802d886:	4618      	mov	r0, r3
 802d888:	4652      	mov	r2, sl
 802d88a:	2a00      	cmp	r2, #0
 802d88c:	dc51      	bgt.n	802d932 <__kernel_rem_pio2f+0x18a>
 802d88e:	4620      	mov	r0, r4
 802d890:	9305      	str	r3, [sp, #20]
 802d892:	f000 fa63 	bl	802dd5c <scalbnf>
 802d896:	eeb0 8a40 	vmov.f32	s16, s0
 802d89a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802d89e:	ee28 0a00 	vmul.f32	s0, s16, s0
 802d8a2:	f7ff fd61 	bl	802d368 <floorf>
 802d8a6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802d8aa:	eea0 8a67 	vfms.f32	s16, s0, s15
 802d8ae:	2c00      	cmp	r4, #0
 802d8b0:	9b05      	ldr	r3, [sp, #20]
 802d8b2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802d8b6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 802d8ba:	edcd 7a00 	vstr	s15, [sp]
 802d8be:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d8c2:	dd4b      	ble.n	802d95c <__kernel_rem_pio2f+0x1b4>
 802d8c4:	f10a 3cff 	add.w	ip, sl, #4294967295
 802d8c8:	aa06      	add	r2, sp, #24
 802d8ca:	f1c4 0e08 	rsb	lr, r4, #8
 802d8ce:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 802d8d2:	ee17 1a90 	vmov	r1, s15
 802d8d6:	fa42 f00e 	asr.w	r0, r2, lr
 802d8da:	4401      	add	r1, r0
 802d8dc:	9100      	str	r1, [sp, #0]
 802d8de:	fa00 f00e 	lsl.w	r0, r0, lr
 802d8e2:	a906      	add	r1, sp, #24
 802d8e4:	1a12      	subs	r2, r2, r0
 802d8e6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802d8ea:	f1c4 0007 	rsb	r0, r4, #7
 802d8ee:	fa42 fb00 	asr.w	fp, r2, r0
 802d8f2:	f1bb 0f00 	cmp.w	fp, #0
 802d8f6:	dd43      	ble.n	802d980 <__kernel_rem_pio2f+0x1d8>
 802d8f8:	9a00      	ldr	r2, [sp, #0]
 802d8fa:	f04f 0e00 	mov.w	lr, #0
 802d8fe:	3201      	adds	r2, #1
 802d900:	9200      	str	r2, [sp, #0]
 802d902:	4670      	mov	r0, lr
 802d904:	45f2      	cmp	sl, lr
 802d906:	dc6c      	bgt.n	802d9e2 <__kernel_rem_pio2f+0x23a>
 802d908:	2c00      	cmp	r4, #0
 802d90a:	dd04      	ble.n	802d916 <__kernel_rem_pio2f+0x16e>
 802d90c:	2c01      	cmp	r4, #1
 802d90e:	d079      	beq.n	802da04 <__kernel_rem_pio2f+0x25c>
 802d910:	2c02      	cmp	r4, #2
 802d912:	f000 8082 	beq.w	802da1a <__kernel_rem_pio2f+0x272>
 802d916:	f1bb 0f02 	cmp.w	fp, #2
 802d91a:	d131      	bne.n	802d980 <__kernel_rem_pio2f+0x1d8>
 802d91c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802d920:	ee30 8a48 	vsub.f32	s16, s0, s16
 802d924:	b360      	cbz	r0, 802d980 <__kernel_rem_pio2f+0x1d8>
 802d926:	4620      	mov	r0, r4
 802d928:	f000 fa18 	bl	802dd5c <scalbnf>
 802d92c:	ee38 8a40 	vsub.f32	s16, s16, s0
 802d930:	e026      	b.n	802d980 <__kernel_rem_pio2f+0x1d8>
 802d932:	ee60 7a28 	vmul.f32	s15, s0, s17
 802d936:	3a01      	subs	r2, #1
 802d938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802d93c:	a942      	add	r1, sp, #264	; 0x108
 802d93e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802d942:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 802d946:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802d94a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802d94e:	eca0 0a01 	vstmia	r0!, {s0}
 802d952:	ed9c 0a00 	vldr	s0, [ip]
 802d956:	ee37 0a80 	vadd.f32	s0, s15, s0
 802d95a:	e796      	b.n	802d88a <__kernel_rem_pio2f+0xe2>
 802d95c:	d107      	bne.n	802d96e <__kernel_rem_pio2f+0x1c6>
 802d95e:	f10a 32ff 	add.w	r2, sl, #4294967295
 802d962:	a906      	add	r1, sp, #24
 802d964:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802d968:	ea4f 2b22 	mov.w	fp, r2, asr #8
 802d96c:	e7c1      	b.n	802d8f2 <__kernel_rem_pio2f+0x14a>
 802d96e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802d972:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802d976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d97a:	da2f      	bge.n	802d9dc <__kernel_rem_pio2f+0x234>
 802d97c:	f04f 0b00 	mov.w	fp, #0
 802d980:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802d984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802d988:	f040 8098 	bne.w	802dabc <__kernel_rem_pio2f+0x314>
 802d98c:	f10a 33ff 	add.w	r3, sl, #4294967295
 802d990:	469c      	mov	ip, r3
 802d992:	2200      	movs	r2, #0
 802d994:	45bc      	cmp	ip, r7
 802d996:	da48      	bge.n	802da2a <__kernel_rem_pio2f+0x282>
 802d998:	2a00      	cmp	r2, #0
 802d99a:	d05f      	beq.n	802da5c <__kernel_rem_pio2f+0x2b4>
 802d99c:	aa06      	add	r2, sp, #24
 802d99e:	3c08      	subs	r4, #8
 802d9a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802d9a4:	2900      	cmp	r1, #0
 802d9a6:	d07d      	beq.n	802daa4 <__kernel_rem_pio2f+0x2fc>
 802d9a8:	4620      	mov	r0, r4
 802d9aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802d9ae:	9301      	str	r3, [sp, #4]
 802d9b0:	f000 f9d4 	bl	802dd5c <scalbnf>
 802d9b4:	9b01      	ldr	r3, [sp, #4]
 802d9b6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 802dab4 <__kernel_rem_pio2f+0x30c>
 802d9ba:	4619      	mov	r1, r3
 802d9bc:	2900      	cmp	r1, #0
 802d9be:	f280 80af 	bge.w	802db20 <__kernel_rem_pio2f+0x378>
 802d9c2:	4618      	mov	r0, r3
 802d9c4:	2400      	movs	r4, #0
 802d9c6:	2800      	cmp	r0, #0
 802d9c8:	f2c0 80d0 	blt.w	802db6c <__kernel_rem_pio2f+0x3c4>
 802d9cc:	a942      	add	r1, sp, #264	; 0x108
 802d9ce:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 802d9d2:	4a36      	ldr	r2, [pc, #216]	; (802daac <__kernel_rem_pio2f+0x304>)
 802d9d4:	eddf 7a38 	vldr	s15, [pc, #224]	; 802dab8 <__kernel_rem_pio2f+0x310>
 802d9d8:	2100      	movs	r1, #0
 802d9da:	e0bb      	b.n	802db54 <__kernel_rem_pio2f+0x3ac>
 802d9dc:	f04f 0b02 	mov.w	fp, #2
 802d9e0:	e78a      	b.n	802d8f8 <__kernel_rem_pio2f+0x150>
 802d9e2:	681a      	ldr	r2, [r3, #0]
 802d9e4:	b948      	cbnz	r0, 802d9fa <__kernel_rem_pio2f+0x252>
 802d9e6:	b11a      	cbz	r2, 802d9f0 <__kernel_rem_pio2f+0x248>
 802d9e8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802d9ec:	601a      	str	r2, [r3, #0]
 802d9ee:	2201      	movs	r2, #1
 802d9f0:	f10e 0e01 	add.w	lr, lr, #1
 802d9f4:	3304      	adds	r3, #4
 802d9f6:	4610      	mov	r0, r2
 802d9f8:	e784      	b.n	802d904 <__kernel_rem_pio2f+0x15c>
 802d9fa:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 802d9fe:	601a      	str	r2, [r3, #0]
 802da00:	4602      	mov	r2, r0
 802da02:	e7f5      	b.n	802d9f0 <__kernel_rem_pio2f+0x248>
 802da04:	f10a 3cff 	add.w	ip, sl, #4294967295
 802da08:	ab06      	add	r3, sp, #24
 802da0a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802da0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802da12:	aa06      	add	r2, sp, #24
 802da14:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 802da18:	e77d      	b.n	802d916 <__kernel_rem_pio2f+0x16e>
 802da1a:	f10a 3cff 	add.w	ip, sl, #4294967295
 802da1e:	ab06      	add	r3, sp, #24
 802da20:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802da24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802da28:	e7f3      	b.n	802da12 <__kernel_rem_pio2f+0x26a>
 802da2a:	a906      	add	r1, sp, #24
 802da2c:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 802da30:	f10c 3cff 	add.w	ip, ip, #4294967295
 802da34:	4302      	orrs	r2, r0
 802da36:	e7ad      	b.n	802d994 <__kernel_rem_pio2f+0x1ec>
 802da38:	3001      	adds	r0, #1
 802da3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802da3e:	2a00      	cmp	r2, #0
 802da40:	d0fa      	beq.n	802da38 <__kernel_rem_pio2f+0x290>
 802da42:	a91a      	add	r1, sp, #104	; 0x68
 802da44:	eb0a 0208 	add.w	r2, sl, r8
 802da48:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 802da4c:	f10a 0301 	add.w	r3, sl, #1
 802da50:	eb0a 0100 	add.w	r1, sl, r0
 802da54:	4299      	cmp	r1, r3
 802da56:	da04      	bge.n	802da62 <__kernel_rem_pio2f+0x2ba>
 802da58:	468a      	mov	sl, r1
 802da5a:	e70e      	b.n	802d87a <__kernel_rem_pio2f+0xd2>
 802da5c:	9b04      	ldr	r3, [sp, #16]
 802da5e:	2001      	movs	r0, #1
 802da60:	e7eb      	b.n	802da3a <__kernel_rem_pio2f+0x292>
 802da62:	9803      	ldr	r0, [sp, #12]
 802da64:	f8dd c004 	ldr.w	ip, [sp, #4]
 802da68:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 802da6c:	9000      	str	r0, [sp, #0]
 802da6e:	ee07 0a90 	vmov	s15, r0
 802da72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802da76:	2000      	movs	r0, #0
 802da78:	ece2 7a01 	vstmia	r2!, {s15}
 802da7c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 802dab8 <__kernel_rem_pio2f+0x310>
 802da80:	4696      	mov	lr, r2
 802da82:	4548      	cmp	r0, r9
 802da84:	dd06      	ble.n	802da94 <__kernel_rem_pio2f+0x2ec>
 802da86:	a842      	add	r0, sp, #264	; 0x108
 802da88:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802da8c:	edc0 7a00 	vstr	s15, [r0]
 802da90:	3301      	adds	r3, #1
 802da92:	e7df      	b.n	802da54 <__kernel_rem_pio2f+0x2ac>
 802da94:	ecfc 6a01 	vldmia	ip!, {s13}
 802da98:	ed3e 7a01 	vldmdb	lr!, {s14}
 802da9c:	3001      	adds	r0, #1
 802da9e:	eee6 7a87 	vfma.f32	s15, s13, s14
 802daa2:	e7ee      	b.n	802da82 <__kernel_rem_pio2f+0x2da>
 802daa4:	3b01      	subs	r3, #1
 802daa6:	e779      	b.n	802d99c <__kernel_rem_pio2f+0x1f4>
 802daa8:	08033a30 	.word	0x08033a30
 802daac:	08033a04 	.word	0x08033a04
 802dab0:	43800000 	.word	0x43800000
 802dab4:	3b800000 	.word	0x3b800000
 802dab8:	00000000 	.word	0x00000000
 802dabc:	9b02      	ldr	r3, [sp, #8]
 802dabe:	eeb0 0a48 	vmov.f32	s0, s16
 802dac2:	1b98      	subs	r0, r3, r6
 802dac4:	f000 f94a 	bl	802dd5c <scalbnf>
 802dac8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 802dab0 <__kernel_rem_pio2f+0x308>
 802dacc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 802dad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802dad4:	db1b      	blt.n	802db0e <__kernel_rem_pio2f+0x366>
 802dad6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 802dab4 <__kernel_rem_pio2f+0x30c>
 802dada:	ee60 7a27 	vmul.f32	s15, s0, s15
 802dade:	aa06      	add	r2, sp, #24
 802dae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802dae4:	a906      	add	r1, sp, #24
 802dae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802daea:	3408      	adds	r4, #8
 802daec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 802daf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802daf4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802daf8:	ee10 3a10 	vmov	r3, s0
 802dafc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802db00:	ee17 2a90 	vmov	r2, s15
 802db04:	f10a 0301 	add.w	r3, sl, #1
 802db08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802db0c:	e74c      	b.n	802d9a8 <__kernel_rem_pio2f+0x200>
 802db0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802db12:	aa06      	add	r2, sp, #24
 802db14:	ee10 3a10 	vmov	r3, s0
 802db18:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 802db1c:	4653      	mov	r3, sl
 802db1e:	e743      	b.n	802d9a8 <__kernel_rem_pio2f+0x200>
 802db20:	aa42      	add	r2, sp, #264	; 0x108
 802db22:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802db26:	aa06      	add	r2, sp, #24
 802db28:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 802db2c:	9201      	str	r2, [sp, #4]
 802db2e:	ee07 2a90 	vmov	s15, r2
 802db32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802db36:	3901      	subs	r1, #1
 802db38:	ee67 7a80 	vmul.f32	s15, s15, s0
 802db3c:	ee20 0a07 	vmul.f32	s0, s0, s14
 802db40:	edc0 7a00 	vstr	s15, [r0]
 802db44:	e73a      	b.n	802d9bc <__kernel_rem_pio2f+0x214>
 802db46:	ecf2 6a01 	vldmia	r2!, {s13}
 802db4a:	ecb6 7a01 	vldmia	r6!, {s14}
 802db4e:	eee6 7a87 	vfma.f32	s15, s13, s14
 802db52:	3101      	adds	r1, #1
 802db54:	42b9      	cmp	r1, r7
 802db56:	dc01      	bgt.n	802db5c <__kernel_rem_pio2f+0x3b4>
 802db58:	428c      	cmp	r4, r1
 802db5a:	daf4      	bge.n	802db46 <__kernel_rem_pio2f+0x39e>
 802db5c:	aa56      	add	r2, sp, #344	; 0x158
 802db5e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 802db62:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802db66:	3801      	subs	r0, #1
 802db68:	3401      	adds	r4, #1
 802db6a:	e72c      	b.n	802d9c6 <__kernel_rem_pio2f+0x21e>
 802db6c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802db6e:	2a02      	cmp	r2, #2
 802db70:	dc0a      	bgt.n	802db88 <__kernel_rem_pio2f+0x3e0>
 802db72:	2a00      	cmp	r2, #0
 802db74:	dc61      	bgt.n	802dc3a <__kernel_rem_pio2f+0x492>
 802db76:	d03c      	beq.n	802dbf2 <__kernel_rem_pio2f+0x44a>
 802db78:	9b00      	ldr	r3, [sp, #0]
 802db7a:	f003 0007 	and.w	r0, r3, #7
 802db7e:	b057      	add	sp, #348	; 0x15c
 802db80:	ecbd 8b04 	vpop	{d8-d9}
 802db84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802db88:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802db8a:	2a03      	cmp	r2, #3
 802db8c:	d1f4      	bne.n	802db78 <__kernel_rem_pio2f+0x3d0>
 802db8e:	aa2e      	add	r2, sp, #184	; 0xb8
 802db90:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802db94:	4608      	mov	r0, r1
 802db96:	461c      	mov	r4, r3
 802db98:	2c00      	cmp	r4, #0
 802db9a:	f1a0 0004 	sub.w	r0, r0, #4
 802db9e:	dc59      	bgt.n	802dc54 <__kernel_rem_pio2f+0x4ac>
 802dba0:	4618      	mov	r0, r3
 802dba2:	2801      	cmp	r0, #1
 802dba4:	f1a1 0104 	sub.w	r1, r1, #4
 802dba8:	dc64      	bgt.n	802dc74 <__kernel_rem_pio2f+0x4cc>
 802dbaa:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 802dab8 <__kernel_rem_pio2f+0x310>
 802dbae:	2b01      	cmp	r3, #1
 802dbb0:	dc70      	bgt.n	802dc94 <__kernel_rem_pio2f+0x4ec>
 802dbb2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 802dbb6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802dbba:	f1bb 0f00 	cmp.w	fp, #0
 802dbbe:	d172      	bne.n	802dca6 <__kernel_rem_pio2f+0x4fe>
 802dbc0:	edc5 6a00 	vstr	s13, [r5]
 802dbc4:	ed85 7a01 	vstr	s14, [r5, #4]
 802dbc8:	edc5 7a02 	vstr	s15, [r5, #8]
 802dbcc:	e7d4      	b.n	802db78 <__kernel_rem_pio2f+0x3d0>
 802dbce:	aa2e      	add	r2, sp, #184	; 0xb8
 802dbd0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802dbd4:	ed91 7a00 	vldr	s14, [r1]
 802dbd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dbdc:	3b01      	subs	r3, #1
 802dbde:	2b00      	cmp	r3, #0
 802dbe0:	daf5      	bge.n	802dbce <__kernel_rem_pio2f+0x426>
 802dbe2:	f1bb 0f00 	cmp.w	fp, #0
 802dbe6:	d001      	beq.n	802dbec <__kernel_rem_pio2f+0x444>
 802dbe8:	eef1 7a67 	vneg.f32	s15, s15
 802dbec:	edc5 7a00 	vstr	s15, [r5]
 802dbf0:	e7c2      	b.n	802db78 <__kernel_rem_pio2f+0x3d0>
 802dbf2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 802dab8 <__kernel_rem_pio2f+0x310>
 802dbf6:	e7f2      	b.n	802dbde <__kernel_rem_pio2f+0x436>
 802dbf8:	aa2e      	add	r2, sp, #184	; 0xb8
 802dbfa:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802dbfe:	edd0 7a00 	vldr	s15, [r0]
 802dc02:	ee37 7a27 	vadd.f32	s14, s14, s15
 802dc06:	3901      	subs	r1, #1
 802dc08:	2900      	cmp	r1, #0
 802dc0a:	daf5      	bge.n	802dbf8 <__kernel_rem_pio2f+0x450>
 802dc0c:	f1bb 0f00 	cmp.w	fp, #0
 802dc10:	d017      	beq.n	802dc42 <__kernel_rem_pio2f+0x49a>
 802dc12:	eef1 7a47 	vneg.f32	s15, s14
 802dc16:	edc5 7a00 	vstr	s15, [r5]
 802dc1a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 802dc1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dc22:	a82f      	add	r0, sp, #188	; 0xbc
 802dc24:	2101      	movs	r1, #1
 802dc26:	428b      	cmp	r3, r1
 802dc28:	da0e      	bge.n	802dc48 <__kernel_rem_pio2f+0x4a0>
 802dc2a:	f1bb 0f00 	cmp.w	fp, #0
 802dc2e:	d001      	beq.n	802dc34 <__kernel_rem_pio2f+0x48c>
 802dc30:	eef1 7a67 	vneg.f32	s15, s15
 802dc34:	edc5 7a01 	vstr	s15, [r5, #4]
 802dc38:	e79e      	b.n	802db78 <__kernel_rem_pio2f+0x3d0>
 802dc3a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 802dab8 <__kernel_rem_pio2f+0x310>
 802dc3e:	4619      	mov	r1, r3
 802dc40:	e7e2      	b.n	802dc08 <__kernel_rem_pio2f+0x460>
 802dc42:	eef0 7a47 	vmov.f32	s15, s14
 802dc46:	e7e6      	b.n	802dc16 <__kernel_rem_pio2f+0x46e>
 802dc48:	ecb0 7a01 	vldmia	r0!, {s14}
 802dc4c:	3101      	adds	r1, #1
 802dc4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dc52:	e7e8      	b.n	802dc26 <__kernel_rem_pio2f+0x47e>
 802dc54:	edd0 7a00 	vldr	s15, [r0]
 802dc58:	edd0 6a01 	vldr	s13, [r0, #4]
 802dc5c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802dc60:	3c01      	subs	r4, #1
 802dc62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dc66:	ed80 7a00 	vstr	s14, [r0]
 802dc6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dc6e:	edc0 7a01 	vstr	s15, [r0, #4]
 802dc72:	e791      	b.n	802db98 <__kernel_rem_pio2f+0x3f0>
 802dc74:	edd1 7a00 	vldr	s15, [r1]
 802dc78:	edd1 6a01 	vldr	s13, [r1, #4]
 802dc7c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 802dc80:	3801      	subs	r0, #1
 802dc82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802dc86:	ed81 7a00 	vstr	s14, [r1]
 802dc8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802dc8e:	edc1 7a01 	vstr	s15, [r1, #4]
 802dc92:	e786      	b.n	802dba2 <__kernel_rem_pio2f+0x3fa>
 802dc94:	aa2e      	add	r2, sp, #184	; 0xb8
 802dc96:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802dc9a:	ed91 7a00 	vldr	s14, [r1]
 802dc9e:	3b01      	subs	r3, #1
 802dca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 802dca4:	e783      	b.n	802dbae <__kernel_rem_pio2f+0x406>
 802dca6:	eef1 6a66 	vneg.f32	s13, s13
 802dcaa:	eeb1 7a47 	vneg.f32	s14, s14
 802dcae:	edc5 6a00 	vstr	s13, [r5]
 802dcb2:	ed85 7a01 	vstr	s14, [r5, #4]
 802dcb6:	eef1 7a67 	vneg.f32	s15, s15
 802dcba:	e785      	b.n	802dbc8 <__kernel_rem_pio2f+0x420>

0802dcbc <__kernel_sinf>:
 802dcbc:	ee10 3a10 	vmov	r3, s0
 802dcc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802dcc4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802dcc8:	da04      	bge.n	802dcd4 <__kernel_sinf+0x18>
 802dcca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802dcce:	ee17 3a90 	vmov	r3, s15
 802dcd2:	b35b      	cbz	r3, 802dd2c <__kernel_sinf+0x70>
 802dcd4:	ee20 7a00 	vmul.f32	s14, s0, s0
 802dcd8:	eddf 7a15 	vldr	s15, [pc, #84]	; 802dd30 <__kernel_sinf+0x74>
 802dcdc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802dd34 <__kernel_sinf+0x78>
 802dce0:	eea7 6a27 	vfma.f32	s12, s14, s15
 802dce4:	eddf 7a14 	vldr	s15, [pc, #80]	; 802dd38 <__kernel_sinf+0x7c>
 802dce8:	eee6 7a07 	vfma.f32	s15, s12, s14
 802dcec:	ed9f 6a13 	vldr	s12, [pc, #76]	; 802dd3c <__kernel_sinf+0x80>
 802dcf0:	eea7 6a87 	vfma.f32	s12, s15, s14
 802dcf4:	eddf 7a12 	vldr	s15, [pc, #72]	; 802dd40 <__kernel_sinf+0x84>
 802dcf8:	ee60 6a07 	vmul.f32	s13, s0, s14
 802dcfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 802dd00:	b930      	cbnz	r0, 802dd10 <__kernel_sinf+0x54>
 802dd02:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802dd44 <__kernel_sinf+0x88>
 802dd06:	eea7 6a27 	vfma.f32	s12, s14, s15
 802dd0a:	eea6 0a26 	vfma.f32	s0, s12, s13
 802dd0e:	4770      	bx	lr
 802dd10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802dd14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802dd18:	eee0 7a86 	vfma.f32	s15, s1, s12
 802dd1c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 802dd20:	eddf 7a09 	vldr	s15, [pc, #36]	; 802dd48 <__kernel_sinf+0x8c>
 802dd24:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802dd28:	ee30 0a60 	vsub.f32	s0, s0, s1
 802dd2c:	4770      	bx	lr
 802dd2e:	bf00      	nop
 802dd30:	2f2ec9d3 	.word	0x2f2ec9d3
 802dd34:	b2d72f34 	.word	0xb2d72f34
 802dd38:	3638ef1b 	.word	0x3638ef1b
 802dd3c:	b9500d01 	.word	0xb9500d01
 802dd40:	3c088889 	.word	0x3c088889
 802dd44:	be2aaaab 	.word	0xbe2aaaab
 802dd48:	3e2aaaab 	.word	0x3e2aaaab

0802dd4c <fabsf>:
 802dd4c:	ee10 3a10 	vmov	r3, s0
 802dd50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802dd54:	ee00 3a10 	vmov	s0, r3
 802dd58:	4770      	bx	lr
	...

0802dd5c <scalbnf>:
 802dd5c:	ee10 3a10 	vmov	r3, s0
 802dd60:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802dd64:	d025      	beq.n	802ddb2 <scalbnf+0x56>
 802dd66:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802dd6a:	d302      	bcc.n	802dd72 <scalbnf+0x16>
 802dd6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 802dd70:	4770      	bx	lr
 802dd72:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802dd76:	d122      	bne.n	802ddbe <scalbnf+0x62>
 802dd78:	4b2a      	ldr	r3, [pc, #168]	; (802de24 <scalbnf+0xc8>)
 802dd7a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802de28 <scalbnf+0xcc>
 802dd7e:	4298      	cmp	r0, r3
 802dd80:	ee20 0a27 	vmul.f32	s0, s0, s15
 802dd84:	db16      	blt.n	802ddb4 <scalbnf+0x58>
 802dd86:	ee10 3a10 	vmov	r3, s0
 802dd8a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802dd8e:	3a19      	subs	r2, #25
 802dd90:	4402      	add	r2, r0
 802dd92:	2afe      	cmp	r2, #254	; 0xfe
 802dd94:	dd15      	ble.n	802ddc2 <scalbnf+0x66>
 802dd96:	ee10 3a10 	vmov	r3, s0
 802dd9a:	eddf 7a24 	vldr	s15, [pc, #144]	; 802de2c <scalbnf+0xd0>
 802dd9e:	eddf 6a24 	vldr	s13, [pc, #144]	; 802de30 <scalbnf+0xd4>
 802dda2:	2b00      	cmp	r3, #0
 802dda4:	eeb0 7a67 	vmov.f32	s14, s15
 802dda8:	bfb8      	it	lt
 802ddaa:	eef0 7a66 	vmovlt.f32	s15, s13
 802ddae:	ee27 0a27 	vmul.f32	s0, s14, s15
 802ddb2:	4770      	bx	lr
 802ddb4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802de34 <scalbnf+0xd8>
 802ddb8:	ee20 0a27 	vmul.f32	s0, s0, s15
 802ddbc:	4770      	bx	lr
 802ddbe:	0dd2      	lsrs	r2, r2, #23
 802ddc0:	e7e6      	b.n	802dd90 <scalbnf+0x34>
 802ddc2:	2a00      	cmp	r2, #0
 802ddc4:	dd06      	ble.n	802ddd4 <scalbnf+0x78>
 802ddc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802ddca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802ddce:	ee00 3a10 	vmov	s0, r3
 802ddd2:	4770      	bx	lr
 802ddd4:	f112 0f16 	cmn.w	r2, #22
 802ddd8:	da1a      	bge.n	802de10 <scalbnf+0xb4>
 802ddda:	f24c 3350 	movw	r3, #50000	; 0xc350
 802ddde:	4298      	cmp	r0, r3
 802dde0:	ee10 3a10 	vmov	r3, s0
 802dde4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802dde8:	dd0a      	ble.n	802de00 <scalbnf+0xa4>
 802ddea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 802de2c <scalbnf+0xd0>
 802ddee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 802de30 <scalbnf+0xd4>
 802ddf2:	eef0 7a40 	vmov.f32	s15, s0
 802ddf6:	2b00      	cmp	r3, #0
 802ddf8:	bf18      	it	ne
 802ddfa:	eeb0 0a47 	vmovne.f32	s0, s14
 802ddfe:	e7db      	b.n	802ddb8 <scalbnf+0x5c>
 802de00:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 802de34 <scalbnf+0xd8>
 802de04:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 802de38 <scalbnf+0xdc>
 802de08:	eef0 7a40 	vmov.f32	s15, s0
 802de0c:	2b00      	cmp	r3, #0
 802de0e:	e7f3      	b.n	802ddf8 <scalbnf+0x9c>
 802de10:	3219      	adds	r2, #25
 802de12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802de16:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802de1a:	eddf 7a08 	vldr	s15, [pc, #32]	; 802de3c <scalbnf+0xe0>
 802de1e:	ee07 3a10 	vmov	s14, r3
 802de22:	e7c4      	b.n	802ddae <scalbnf+0x52>
 802de24:	ffff3cb0 	.word	0xffff3cb0
 802de28:	4c000000 	.word	0x4c000000
 802de2c:	7149f2ca 	.word	0x7149f2ca
 802de30:	f149f2ca 	.word	0xf149f2ca
 802de34:	0da24260 	.word	0x0da24260
 802de38:	8da24260 	.word	0x8da24260
 802de3c:	33000000 	.word	0x33000000

0802de40 <abort>:
 802de40:	b508      	push	{r3, lr}
 802de42:	2006      	movs	r0, #6
 802de44:	f000 fde4 	bl	802ea10 <raise>
 802de48:	2001      	movs	r0, #1
 802de4a:	f7d6 f9b1 	bl	80041b0 <_exit>
	...

0802de50 <__assert_func>:
 802de50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802de52:	4614      	mov	r4, r2
 802de54:	461a      	mov	r2, r3
 802de56:	4b09      	ldr	r3, [pc, #36]	; (802de7c <__assert_func+0x2c>)
 802de58:	681b      	ldr	r3, [r3, #0]
 802de5a:	4605      	mov	r5, r0
 802de5c:	68d8      	ldr	r0, [r3, #12]
 802de5e:	b14c      	cbz	r4, 802de74 <__assert_func+0x24>
 802de60:	4b07      	ldr	r3, [pc, #28]	; (802de80 <__assert_func+0x30>)
 802de62:	9100      	str	r1, [sp, #0]
 802de64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802de68:	4906      	ldr	r1, [pc, #24]	; (802de84 <__assert_func+0x34>)
 802de6a:	462b      	mov	r3, r5
 802de6c:	f000 f906 	bl	802e07c <fiprintf>
 802de70:	f7ff ffe6 	bl	802de40 <abort>
 802de74:	4b04      	ldr	r3, [pc, #16]	; (802de88 <__assert_func+0x38>)
 802de76:	461c      	mov	r4, r3
 802de78:	e7f3      	b.n	802de62 <__assert_func+0x12>
 802de7a:	bf00      	nop
 802de7c:	20000098 	.word	0x20000098
 802de80:	08033a3c 	.word	0x08033a3c
 802de84:	08033a49 	.word	0x08033a49
 802de88:	08033a77 	.word	0x08033a77

0802de8c <atexit>:
 802de8c:	2300      	movs	r3, #0
 802de8e:	4601      	mov	r1, r0
 802de90:	461a      	mov	r2, r3
 802de92:	4618      	mov	r0, r3
 802de94:	f000 bef6 	b.w	802ec84 <__register_exitproc>

0802de98 <calloc>:
 802de98:	4b02      	ldr	r3, [pc, #8]	; (802dea4 <calloc+0xc>)
 802de9a:	460a      	mov	r2, r1
 802de9c:	4601      	mov	r1, r0
 802de9e:	6818      	ldr	r0, [r3, #0]
 802dea0:	f000 b96c 	b.w	802e17c <_calloc_r>
 802dea4:	20000098 	.word	0x20000098

0802dea8 <__cxa_atexit>:
 802dea8:	b510      	push	{r4, lr}
 802deaa:	4c05      	ldr	r4, [pc, #20]	; (802dec0 <__cxa_atexit+0x18>)
 802deac:	4613      	mov	r3, r2
 802deae:	b12c      	cbz	r4, 802debc <__cxa_atexit+0x14>
 802deb0:	460a      	mov	r2, r1
 802deb2:	4601      	mov	r1, r0
 802deb4:	2002      	movs	r0, #2
 802deb6:	f000 fee5 	bl	802ec84 <__register_exitproc>
 802deba:	bd10      	pop	{r4, pc}
 802debc:	4620      	mov	r0, r4
 802debe:	e7fc      	b.n	802deba <__cxa_atexit+0x12>
 802dec0:	0802ec85 	.word	0x0802ec85

0802dec4 <__errno>:
 802dec4:	4b01      	ldr	r3, [pc, #4]	; (802decc <__errno+0x8>)
 802dec6:	6818      	ldr	r0, [r3, #0]
 802dec8:	4770      	bx	lr
 802deca:	bf00      	nop
 802decc:	20000098 	.word	0x20000098

0802ded0 <std>:
 802ded0:	2300      	movs	r3, #0
 802ded2:	b510      	push	{r4, lr}
 802ded4:	4604      	mov	r4, r0
 802ded6:	e9c0 3300 	strd	r3, r3, [r0]
 802deda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802dede:	6083      	str	r3, [r0, #8]
 802dee0:	8181      	strh	r1, [r0, #12]
 802dee2:	6643      	str	r3, [r0, #100]	; 0x64
 802dee4:	81c2      	strh	r2, [r0, #14]
 802dee6:	6183      	str	r3, [r0, #24]
 802dee8:	4619      	mov	r1, r3
 802deea:	2208      	movs	r2, #8
 802deec:	305c      	adds	r0, #92	; 0x5c
 802deee:	f000 f93d 	bl	802e16c <memset>
 802def2:	4b05      	ldr	r3, [pc, #20]	; (802df08 <std+0x38>)
 802def4:	6263      	str	r3, [r4, #36]	; 0x24
 802def6:	4b05      	ldr	r3, [pc, #20]	; (802df0c <std+0x3c>)
 802def8:	62a3      	str	r3, [r4, #40]	; 0x28
 802defa:	4b05      	ldr	r3, [pc, #20]	; (802df10 <std+0x40>)
 802defc:	62e3      	str	r3, [r4, #44]	; 0x2c
 802defe:	4b05      	ldr	r3, [pc, #20]	; (802df14 <std+0x44>)
 802df00:	6224      	str	r4, [r4, #32]
 802df02:	6323      	str	r3, [r4, #48]	; 0x30
 802df04:	bd10      	pop	{r4, pc}
 802df06:	bf00      	nop
 802df08:	0802ea49 	.word	0x0802ea49
 802df0c:	0802ea6b 	.word	0x0802ea6b
 802df10:	0802eaa3 	.word	0x0802eaa3
 802df14:	0802eac7 	.word	0x0802eac7

0802df18 <_cleanup_r>:
 802df18:	4901      	ldr	r1, [pc, #4]	; (802df20 <_cleanup_r+0x8>)
 802df1a:	f000 b8c1 	b.w	802e0a0 <_fwalk_reent>
 802df1e:	bf00      	nop
 802df20:	0802ee75 	.word	0x0802ee75

0802df24 <__sfmoreglue>:
 802df24:	b570      	push	{r4, r5, r6, lr}
 802df26:	1e4a      	subs	r2, r1, #1
 802df28:	2568      	movs	r5, #104	; 0x68
 802df2a:	4355      	muls	r5, r2
 802df2c:	460e      	mov	r6, r1
 802df2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802df32:	f000 f983 	bl	802e23c <_malloc_r>
 802df36:	4604      	mov	r4, r0
 802df38:	b140      	cbz	r0, 802df4c <__sfmoreglue+0x28>
 802df3a:	2100      	movs	r1, #0
 802df3c:	e9c0 1600 	strd	r1, r6, [r0]
 802df40:	300c      	adds	r0, #12
 802df42:	60a0      	str	r0, [r4, #8]
 802df44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802df48:	f000 f910 	bl	802e16c <memset>
 802df4c:	4620      	mov	r0, r4
 802df4e:	bd70      	pop	{r4, r5, r6, pc}

0802df50 <__sfp_lock_acquire>:
 802df50:	4801      	ldr	r0, [pc, #4]	; (802df58 <__sfp_lock_acquire+0x8>)
 802df52:	f000 b8ea 	b.w	802e12a <__retarget_lock_acquire_recursive>
 802df56:	bf00      	nop
 802df58:	2000b624 	.word	0x2000b624

0802df5c <__sfp_lock_release>:
 802df5c:	4801      	ldr	r0, [pc, #4]	; (802df64 <__sfp_lock_release+0x8>)
 802df5e:	f000 b8e6 	b.w	802e12e <__retarget_lock_release_recursive>
 802df62:	bf00      	nop
 802df64:	2000b624 	.word	0x2000b624

0802df68 <__sinit_lock_acquire>:
 802df68:	4801      	ldr	r0, [pc, #4]	; (802df70 <__sinit_lock_acquire+0x8>)
 802df6a:	f000 b8de 	b.w	802e12a <__retarget_lock_acquire_recursive>
 802df6e:	bf00      	nop
 802df70:	2000b61f 	.word	0x2000b61f

0802df74 <__sinit_lock_release>:
 802df74:	4801      	ldr	r0, [pc, #4]	; (802df7c <__sinit_lock_release+0x8>)
 802df76:	f000 b8da 	b.w	802e12e <__retarget_lock_release_recursive>
 802df7a:	bf00      	nop
 802df7c:	2000b61f 	.word	0x2000b61f

0802df80 <__sinit>:
 802df80:	b510      	push	{r4, lr}
 802df82:	4604      	mov	r4, r0
 802df84:	f7ff fff0 	bl	802df68 <__sinit_lock_acquire>
 802df88:	69a3      	ldr	r3, [r4, #24]
 802df8a:	b11b      	cbz	r3, 802df94 <__sinit+0x14>
 802df8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802df90:	f7ff bff0 	b.w	802df74 <__sinit_lock_release>
 802df94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802df98:	6523      	str	r3, [r4, #80]	; 0x50
 802df9a:	4b13      	ldr	r3, [pc, #76]	; (802dfe8 <__sinit+0x68>)
 802df9c:	4a13      	ldr	r2, [pc, #76]	; (802dfec <__sinit+0x6c>)
 802df9e:	681b      	ldr	r3, [r3, #0]
 802dfa0:	62a2      	str	r2, [r4, #40]	; 0x28
 802dfa2:	42a3      	cmp	r3, r4
 802dfa4:	bf04      	itt	eq
 802dfa6:	2301      	moveq	r3, #1
 802dfa8:	61a3      	streq	r3, [r4, #24]
 802dfaa:	4620      	mov	r0, r4
 802dfac:	f000 f820 	bl	802dff0 <__sfp>
 802dfb0:	6060      	str	r0, [r4, #4]
 802dfb2:	4620      	mov	r0, r4
 802dfb4:	f000 f81c 	bl	802dff0 <__sfp>
 802dfb8:	60a0      	str	r0, [r4, #8]
 802dfba:	4620      	mov	r0, r4
 802dfbc:	f000 f818 	bl	802dff0 <__sfp>
 802dfc0:	2200      	movs	r2, #0
 802dfc2:	60e0      	str	r0, [r4, #12]
 802dfc4:	2104      	movs	r1, #4
 802dfc6:	6860      	ldr	r0, [r4, #4]
 802dfc8:	f7ff ff82 	bl	802ded0 <std>
 802dfcc:	68a0      	ldr	r0, [r4, #8]
 802dfce:	2201      	movs	r2, #1
 802dfd0:	2109      	movs	r1, #9
 802dfd2:	f7ff ff7d 	bl	802ded0 <std>
 802dfd6:	68e0      	ldr	r0, [r4, #12]
 802dfd8:	2202      	movs	r2, #2
 802dfda:	2112      	movs	r1, #18
 802dfdc:	f7ff ff78 	bl	802ded0 <std>
 802dfe0:	2301      	movs	r3, #1
 802dfe2:	61a3      	str	r3, [r4, #24]
 802dfe4:	e7d2      	b.n	802df8c <__sinit+0xc>
 802dfe6:	bf00      	nop
 802dfe8:	08033ad8 	.word	0x08033ad8
 802dfec:	0802df19 	.word	0x0802df19

0802dff0 <__sfp>:
 802dff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dff2:	4607      	mov	r7, r0
 802dff4:	f7ff ffac 	bl	802df50 <__sfp_lock_acquire>
 802dff8:	4b1e      	ldr	r3, [pc, #120]	; (802e074 <__sfp+0x84>)
 802dffa:	681e      	ldr	r6, [r3, #0]
 802dffc:	69b3      	ldr	r3, [r6, #24]
 802dffe:	b913      	cbnz	r3, 802e006 <__sfp+0x16>
 802e000:	4630      	mov	r0, r6
 802e002:	f7ff ffbd 	bl	802df80 <__sinit>
 802e006:	3648      	adds	r6, #72	; 0x48
 802e008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e00c:	3b01      	subs	r3, #1
 802e00e:	d503      	bpl.n	802e018 <__sfp+0x28>
 802e010:	6833      	ldr	r3, [r6, #0]
 802e012:	b30b      	cbz	r3, 802e058 <__sfp+0x68>
 802e014:	6836      	ldr	r6, [r6, #0]
 802e016:	e7f7      	b.n	802e008 <__sfp+0x18>
 802e018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e01c:	b9d5      	cbnz	r5, 802e054 <__sfp+0x64>
 802e01e:	4b16      	ldr	r3, [pc, #88]	; (802e078 <__sfp+0x88>)
 802e020:	60e3      	str	r3, [r4, #12]
 802e022:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e026:	6665      	str	r5, [r4, #100]	; 0x64
 802e028:	f000 f87e 	bl	802e128 <__retarget_lock_init_recursive>
 802e02c:	f7ff ff96 	bl	802df5c <__sfp_lock_release>
 802e030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802e034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802e038:	6025      	str	r5, [r4, #0]
 802e03a:	61a5      	str	r5, [r4, #24]
 802e03c:	2208      	movs	r2, #8
 802e03e:	4629      	mov	r1, r5
 802e040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e044:	f000 f892 	bl	802e16c <memset>
 802e048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e04c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e050:	4620      	mov	r0, r4
 802e052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e054:	3468      	adds	r4, #104	; 0x68
 802e056:	e7d9      	b.n	802e00c <__sfp+0x1c>
 802e058:	2104      	movs	r1, #4
 802e05a:	4638      	mov	r0, r7
 802e05c:	f7ff ff62 	bl	802df24 <__sfmoreglue>
 802e060:	4604      	mov	r4, r0
 802e062:	6030      	str	r0, [r6, #0]
 802e064:	2800      	cmp	r0, #0
 802e066:	d1d5      	bne.n	802e014 <__sfp+0x24>
 802e068:	f7ff ff78 	bl	802df5c <__sfp_lock_release>
 802e06c:	230c      	movs	r3, #12
 802e06e:	603b      	str	r3, [r7, #0]
 802e070:	e7ee      	b.n	802e050 <__sfp+0x60>
 802e072:	bf00      	nop
 802e074:	08033ad8 	.word	0x08033ad8
 802e078:	ffff0001 	.word	0xffff0001

0802e07c <fiprintf>:
 802e07c:	b40e      	push	{r1, r2, r3}
 802e07e:	b503      	push	{r0, r1, lr}
 802e080:	4601      	mov	r1, r0
 802e082:	ab03      	add	r3, sp, #12
 802e084:	4805      	ldr	r0, [pc, #20]	; (802e09c <fiprintf+0x20>)
 802e086:	f853 2b04 	ldr.w	r2, [r3], #4
 802e08a:	6800      	ldr	r0, [r0, #0]
 802e08c:	9301      	str	r3, [sp, #4]
 802e08e:	f000 f959 	bl	802e344 <_vfiprintf_r>
 802e092:	b002      	add	sp, #8
 802e094:	f85d eb04 	ldr.w	lr, [sp], #4
 802e098:	b003      	add	sp, #12
 802e09a:	4770      	bx	lr
 802e09c:	20000098 	.word	0x20000098

0802e0a0 <_fwalk_reent>:
 802e0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e0a4:	4606      	mov	r6, r0
 802e0a6:	4688      	mov	r8, r1
 802e0a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e0ac:	2700      	movs	r7, #0
 802e0ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e0b2:	f1b9 0901 	subs.w	r9, r9, #1
 802e0b6:	d505      	bpl.n	802e0c4 <_fwalk_reent+0x24>
 802e0b8:	6824      	ldr	r4, [r4, #0]
 802e0ba:	2c00      	cmp	r4, #0
 802e0bc:	d1f7      	bne.n	802e0ae <_fwalk_reent+0xe>
 802e0be:	4638      	mov	r0, r7
 802e0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e0c4:	89ab      	ldrh	r3, [r5, #12]
 802e0c6:	2b01      	cmp	r3, #1
 802e0c8:	d907      	bls.n	802e0da <_fwalk_reent+0x3a>
 802e0ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e0ce:	3301      	adds	r3, #1
 802e0d0:	d003      	beq.n	802e0da <_fwalk_reent+0x3a>
 802e0d2:	4629      	mov	r1, r5
 802e0d4:	4630      	mov	r0, r6
 802e0d6:	47c0      	blx	r8
 802e0d8:	4307      	orrs	r7, r0
 802e0da:	3568      	adds	r5, #104	; 0x68
 802e0dc:	e7e9      	b.n	802e0b2 <_fwalk_reent+0x12>
	...

0802e0e0 <__libc_init_array>:
 802e0e0:	b570      	push	{r4, r5, r6, lr}
 802e0e2:	4d0d      	ldr	r5, [pc, #52]	; (802e118 <__libc_init_array+0x38>)
 802e0e4:	4c0d      	ldr	r4, [pc, #52]	; (802e11c <__libc_init_array+0x3c>)
 802e0e6:	1b64      	subs	r4, r4, r5
 802e0e8:	10a4      	asrs	r4, r4, #2
 802e0ea:	2600      	movs	r6, #0
 802e0ec:	42a6      	cmp	r6, r4
 802e0ee:	d109      	bne.n	802e104 <__libc_init_array+0x24>
 802e0f0:	4d0b      	ldr	r5, [pc, #44]	; (802e120 <__libc_init_array+0x40>)
 802e0f2:	4c0c      	ldr	r4, [pc, #48]	; (802e124 <__libc_init_array+0x44>)
 802e0f4:	f000 ffb0 	bl	802f058 <_init>
 802e0f8:	1b64      	subs	r4, r4, r5
 802e0fa:	10a4      	asrs	r4, r4, #2
 802e0fc:	2600      	movs	r6, #0
 802e0fe:	42a6      	cmp	r6, r4
 802e100:	d105      	bne.n	802e10e <__libc_init_array+0x2e>
 802e102:	bd70      	pop	{r4, r5, r6, pc}
 802e104:	f855 3b04 	ldr.w	r3, [r5], #4
 802e108:	4798      	blx	r3
 802e10a:	3601      	adds	r6, #1
 802e10c:	e7ee      	b.n	802e0ec <__libc_init_array+0xc>
 802e10e:	f855 3b04 	ldr.w	r3, [r5], #4
 802e112:	4798      	blx	r3
 802e114:	3601      	adds	r6, #1
 802e116:	e7f2      	b.n	802e0fe <__libc_init_array+0x1e>
 802e118:	080e8d90 	.word	0x080e8d90
 802e11c:	080e8d90 	.word	0x080e8d90
 802e120:	080e8d90 	.word	0x080e8d90
 802e124:	080e8da4 	.word	0x080e8da4

0802e128 <__retarget_lock_init_recursive>:
 802e128:	4770      	bx	lr

0802e12a <__retarget_lock_acquire_recursive>:
 802e12a:	4770      	bx	lr

0802e12c <__retarget_lock_release>:
 802e12c:	4770      	bx	lr

0802e12e <__retarget_lock_release_recursive>:
 802e12e:	4770      	bx	lr

0802e130 <malloc>:
 802e130:	4b02      	ldr	r3, [pc, #8]	; (802e13c <malloc+0xc>)
 802e132:	4601      	mov	r1, r0
 802e134:	6818      	ldr	r0, [r3, #0]
 802e136:	f000 b881 	b.w	802e23c <_malloc_r>
 802e13a:	bf00      	nop
 802e13c:	20000098 	.word	0x20000098

0802e140 <free>:
 802e140:	4b02      	ldr	r3, [pc, #8]	; (802e14c <free+0xc>)
 802e142:	4601      	mov	r1, r0
 802e144:	6818      	ldr	r0, [r3, #0]
 802e146:	f000 b829 	b.w	802e19c <_free_r>
 802e14a:	bf00      	nop
 802e14c:	20000098 	.word	0x20000098

0802e150 <memcpy>:
 802e150:	440a      	add	r2, r1
 802e152:	4291      	cmp	r1, r2
 802e154:	f100 33ff 	add.w	r3, r0, #4294967295
 802e158:	d100      	bne.n	802e15c <memcpy+0xc>
 802e15a:	4770      	bx	lr
 802e15c:	b510      	push	{r4, lr}
 802e15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e162:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e166:	4291      	cmp	r1, r2
 802e168:	d1f9      	bne.n	802e15e <memcpy+0xe>
 802e16a:	bd10      	pop	{r4, pc}

0802e16c <memset>:
 802e16c:	4402      	add	r2, r0
 802e16e:	4603      	mov	r3, r0
 802e170:	4293      	cmp	r3, r2
 802e172:	d100      	bne.n	802e176 <memset+0xa>
 802e174:	4770      	bx	lr
 802e176:	f803 1b01 	strb.w	r1, [r3], #1
 802e17a:	e7f9      	b.n	802e170 <memset+0x4>

0802e17c <_calloc_r>:
 802e17c:	b513      	push	{r0, r1, r4, lr}
 802e17e:	434a      	muls	r2, r1
 802e180:	4611      	mov	r1, r2
 802e182:	9201      	str	r2, [sp, #4]
 802e184:	f000 f85a 	bl	802e23c <_malloc_r>
 802e188:	4604      	mov	r4, r0
 802e18a:	b118      	cbz	r0, 802e194 <_calloc_r+0x18>
 802e18c:	9a01      	ldr	r2, [sp, #4]
 802e18e:	2100      	movs	r1, #0
 802e190:	f7ff ffec 	bl	802e16c <memset>
 802e194:	4620      	mov	r0, r4
 802e196:	b002      	add	sp, #8
 802e198:	bd10      	pop	{r4, pc}
	...

0802e19c <_free_r>:
 802e19c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e19e:	2900      	cmp	r1, #0
 802e1a0:	d048      	beq.n	802e234 <_free_r+0x98>
 802e1a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e1a6:	9001      	str	r0, [sp, #4]
 802e1a8:	2b00      	cmp	r3, #0
 802e1aa:	f1a1 0404 	sub.w	r4, r1, #4
 802e1ae:	bfb8      	it	lt
 802e1b0:	18e4      	addlt	r4, r4, r3
 802e1b2:	f000 ff11 	bl	802efd8 <__malloc_lock>
 802e1b6:	4a20      	ldr	r2, [pc, #128]	; (802e238 <_free_r+0x9c>)
 802e1b8:	9801      	ldr	r0, [sp, #4]
 802e1ba:	6813      	ldr	r3, [r2, #0]
 802e1bc:	4615      	mov	r5, r2
 802e1be:	b933      	cbnz	r3, 802e1ce <_free_r+0x32>
 802e1c0:	6063      	str	r3, [r4, #4]
 802e1c2:	6014      	str	r4, [r2, #0]
 802e1c4:	b003      	add	sp, #12
 802e1c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e1ca:	f000 bf0b 	b.w	802efe4 <__malloc_unlock>
 802e1ce:	42a3      	cmp	r3, r4
 802e1d0:	d90b      	bls.n	802e1ea <_free_r+0x4e>
 802e1d2:	6821      	ldr	r1, [r4, #0]
 802e1d4:	1862      	adds	r2, r4, r1
 802e1d6:	4293      	cmp	r3, r2
 802e1d8:	bf04      	itt	eq
 802e1da:	681a      	ldreq	r2, [r3, #0]
 802e1dc:	685b      	ldreq	r3, [r3, #4]
 802e1de:	6063      	str	r3, [r4, #4]
 802e1e0:	bf04      	itt	eq
 802e1e2:	1852      	addeq	r2, r2, r1
 802e1e4:	6022      	streq	r2, [r4, #0]
 802e1e6:	602c      	str	r4, [r5, #0]
 802e1e8:	e7ec      	b.n	802e1c4 <_free_r+0x28>
 802e1ea:	461a      	mov	r2, r3
 802e1ec:	685b      	ldr	r3, [r3, #4]
 802e1ee:	b10b      	cbz	r3, 802e1f4 <_free_r+0x58>
 802e1f0:	42a3      	cmp	r3, r4
 802e1f2:	d9fa      	bls.n	802e1ea <_free_r+0x4e>
 802e1f4:	6811      	ldr	r1, [r2, #0]
 802e1f6:	1855      	adds	r5, r2, r1
 802e1f8:	42a5      	cmp	r5, r4
 802e1fa:	d10b      	bne.n	802e214 <_free_r+0x78>
 802e1fc:	6824      	ldr	r4, [r4, #0]
 802e1fe:	4421      	add	r1, r4
 802e200:	1854      	adds	r4, r2, r1
 802e202:	42a3      	cmp	r3, r4
 802e204:	6011      	str	r1, [r2, #0]
 802e206:	d1dd      	bne.n	802e1c4 <_free_r+0x28>
 802e208:	681c      	ldr	r4, [r3, #0]
 802e20a:	685b      	ldr	r3, [r3, #4]
 802e20c:	6053      	str	r3, [r2, #4]
 802e20e:	4421      	add	r1, r4
 802e210:	6011      	str	r1, [r2, #0]
 802e212:	e7d7      	b.n	802e1c4 <_free_r+0x28>
 802e214:	d902      	bls.n	802e21c <_free_r+0x80>
 802e216:	230c      	movs	r3, #12
 802e218:	6003      	str	r3, [r0, #0]
 802e21a:	e7d3      	b.n	802e1c4 <_free_r+0x28>
 802e21c:	6825      	ldr	r5, [r4, #0]
 802e21e:	1961      	adds	r1, r4, r5
 802e220:	428b      	cmp	r3, r1
 802e222:	bf04      	itt	eq
 802e224:	6819      	ldreq	r1, [r3, #0]
 802e226:	685b      	ldreq	r3, [r3, #4]
 802e228:	6063      	str	r3, [r4, #4]
 802e22a:	bf04      	itt	eq
 802e22c:	1949      	addeq	r1, r1, r5
 802e22e:	6021      	streq	r1, [r4, #0]
 802e230:	6054      	str	r4, [r2, #4]
 802e232:	e7c7      	b.n	802e1c4 <_free_r+0x28>
 802e234:	b003      	add	sp, #12
 802e236:	bd30      	pop	{r4, r5, pc}
 802e238:	200098c4 	.word	0x200098c4

0802e23c <_malloc_r>:
 802e23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e23e:	1ccd      	adds	r5, r1, #3
 802e240:	f025 0503 	bic.w	r5, r5, #3
 802e244:	3508      	adds	r5, #8
 802e246:	2d0c      	cmp	r5, #12
 802e248:	bf38      	it	cc
 802e24a:	250c      	movcc	r5, #12
 802e24c:	2d00      	cmp	r5, #0
 802e24e:	4606      	mov	r6, r0
 802e250:	db01      	blt.n	802e256 <_malloc_r+0x1a>
 802e252:	42a9      	cmp	r1, r5
 802e254:	d903      	bls.n	802e25e <_malloc_r+0x22>
 802e256:	230c      	movs	r3, #12
 802e258:	6033      	str	r3, [r6, #0]
 802e25a:	2000      	movs	r0, #0
 802e25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e25e:	f000 febb 	bl	802efd8 <__malloc_lock>
 802e262:	4921      	ldr	r1, [pc, #132]	; (802e2e8 <_malloc_r+0xac>)
 802e264:	680a      	ldr	r2, [r1, #0]
 802e266:	4614      	mov	r4, r2
 802e268:	b99c      	cbnz	r4, 802e292 <_malloc_r+0x56>
 802e26a:	4f20      	ldr	r7, [pc, #128]	; (802e2ec <_malloc_r+0xb0>)
 802e26c:	683b      	ldr	r3, [r7, #0]
 802e26e:	b923      	cbnz	r3, 802e27a <_malloc_r+0x3e>
 802e270:	4621      	mov	r1, r4
 802e272:	4630      	mov	r0, r6
 802e274:	f000 fb94 	bl	802e9a0 <_sbrk_r>
 802e278:	6038      	str	r0, [r7, #0]
 802e27a:	4629      	mov	r1, r5
 802e27c:	4630      	mov	r0, r6
 802e27e:	f000 fb8f 	bl	802e9a0 <_sbrk_r>
 802e282:	1c43      	adds	r3, r0, #1
 802e284:	d123      	bne.n	802e2ce <_malloc_r+0x92>
 802e286:	230c      	movs	r3, #12
 802e288:	6033      	str	r3, [r6, #0]
 802e28a:	4630      	mov	r0, r6
 802e28c:	f000 feaa 	bl	802efe4 <__malloc_unlock>
 802e290:	e7e3      	b.n	802e25a <_malloc_r+0x1e>
 802e292:	6823      	ldr	r3, [r4, #0]
 802e294:	1b5b      	subs	r3, r3, r5
 802e296:	d417      	bmi.n	802e2c8 <_malloc_r+0x8c>
 802e298:	2b0b      	cmp	r3, #11
 802e29a:	d903      	bls.n	802e2a4 <_malloc_r+0x68>
 802e29c:	6023      	str	r3, [r4, #0]
 802e29e:	441c      	add	r4, r3
 802e2a0:	6025      	str	r5, [r4, #0]
 802e2a2:	e004      	b.n	802e2ae <_malloc_r+0x72>
 802e2a4:	6863      	ldr	r3, [r4, #4]
 802e2a6:	42a2      	cmp	r2, r4
 802e2a8:	bf0c      	ite	eq
 802e2aa:	600b      	streq	r3, [r1, #0]
 802e2ac:	6053      	strne	r3, [r2, #4]
 802e2ae:	4630      	mov	r0, r6
 802e2b0:	f000 fe98 	bl	802efe4 <__malloc_unlock>
 802e2b4:	f104 000b 	add.w	r0, r4, #11
 802e2b8:	1d23      	adds	r3, r4, #4
 802e2ba:	f020 0007 	bic.w	r0, r0, #7
 802e2be:	1ac2      	subs	r2, r0, r3
 802e2c0:	d0cc      	beq.n	802e25c <_malloc_r+0x20>
 802e2c2:	1a1b      	subs	r3, r3, r0
 802e2c4:	50a3      	str	r3, [r4, r2]
 802e2c6:	e7c9      	b.n	802e25c <_malloc_r+0x20>
 802e2c8:	4622      	mov	r2, r4
 802e2ca:	6864      	ldr	r4, [r4, #4]
 802e2cc:	e7cc      	b.n	802e268 <_malloc_r+0x2c>
 802e2ce:	1cc4      	adds	r4, r0, #3
 802e2d0:	f024 0403 	bic.w	r4, r4, #3
 802e2d4:	42a0      	cmp	r0, r4
 802e2d6:	d0e3      	beq.n	802e2a0 <_malloc_r+0x64>
 802e2d8:	1a21      	subs	r1, r4, r0
 802e2da:	4630      	mov	r0, r6
 802e2dc:	f000 fb60 	bl	802e9a0 <_sbrk_r>
 802e2e0:	3001      	adds	r0, #1
 802e2e2:	d1dd      	bne.n	802e2a0 <_malloc_r+0x64>
 802e2e4:	e7cf      	b.n	802e286 <_malloc_r+0x4a>
 802e2e6:	bf00      	nop
 802e2e8:	200098c4 	.word	0x200098c4
 802e2ec:	200098c8 	.word	0x200098c8

0802e2f0 <__sfputc_r>:
 802e2f0:	6893      	ldr	r3, [r2, #8]
 802e2f2:	3b01      	subs	r3, #1
 802e2f4:	2b00      	cmp	r3, #0
 802e2f6:	b410      	push	{r4}
 802e2f8:	6093      	str	r3, [r2, #8]
 802e2fa:	da08      	bge.n	802e30e <__sfputc_r+0x1e>
 802e2fc:	6994      	ldr	r4, [r2, #24]
 802e2fe:	42a3      	cmp	r3, r4
 802e300:	db01      	blt.n	802e306 <__sfputc_r+0x16>
 802e302:	290a      	cmp	r1, #10
 802e304:	d103      	bne.n	802e30e <__sfputc_r+0x1e>
 802e306:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e30a:	f000 bbe9 	b.w	802eae0 <__swbuf_r>
 802e30e:	6813      	ldr	r3, [r2, #0]
 802e310:	1c58      	adds	r0, r3, #1
 802e312:	6010      	str	r0, [r2, #0]
 802e314:	7019      	strb	r1, [r3, #0]
 802e316:	4608      	mov	r0, r1
 802e318:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e31c:	4770      	bx	lr

0802e31e <__sfputs_r>:
 802e31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e320:	4606      	mov	r6, r0
 802e322:	460f      	mov	r7, r1
 802e324:	4614      	mov	r4, r2
 802e326:	18d5      	adds	r5, r2, r3
 802e328:	42ac      	cmp	r4, r5
 802e32a:	d101      	bne.n	802e330 <__sfputs_r+0x12>
 802e32c:	2000      	movs	r0, #0
 802e32e:	e007      	b.n	802e340 <__sfputs_r+0x22>
 802e330:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e334:	463a      	mov	r2, r7
 802e336:	4630      	mov	r0, r6
 802e338:	f7ff ffda 	bl	802e2f0 <__sfputc_r>
 802e33c:	1c43      	adds	r3, r0, #1
 802e33e:	d1f3      	bne.n	802e328 <__sfputs_r+0xa>
 802e340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e344 <_vfiprintf_r>:
 802e344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e348:	460d      	mov	r5, r1
 802e34a:	b09d      	sub	sp, #116	; 0x74
 802e34c:	4614      	mov	r4, r2
 802e34e:	4698      	mov	r8, r3
 802e350:	4606      	mov	r6, r0
 802e352:	b118      	cbz	r0, 802e35c <_vfiprintf_r+0x18>
 802e354:	6983      	ldr	r3, [r0, #24]
 802e356:	b90b      	cbnz	r3, 802e35c <_vfiprintf_r+0x18>
 802e358:	f7ff fe12 	bl	802df80 <__sinit>
 802e35c:	4b89      	ldr	r3, [pc, #548]	; (802e584 <_vfiprintf_r+0x240>)
 802e35e:	429d      	cmp	r5, r3
 802e360:	d11b      	bne.n	802e39a <_vfiprintf_r+0x56>
 802e362:	6875      	ldr	r5, [r6, #4]
 802e364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e366:	07d9      	lsls	r1, r3, #31
 802e368:	d405      	bmi.n	802e376 <_vfiprintf_r+0x32>
 802e36a:	89ab      	ldrh	r3, [r5, #12]
 802e36c:	059a      	lsls	r2, r3, #22
 802e36e:	d402      	bmi.n	802e376 <_vfiprintf_r+0x32>
 802e370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e372:	f7ff feda 	bl	802e12a <__retarget_lock_acquire_recursive>
 802e376:	89ab      	ldrh	r3, [r5, #12]
 802e378:	071b      	lsls	r3, r3, #28
 802e37a:	d501      	bpl.n	802e380 <_vfiprintf_r+0x3c>
 802e37c:	692b      	ldr	r3, [r5, #16]
 802e37e:	b9eb      	cbnz	r3, 802e3bc <_vfiprintf_r+0x78>
 802e380:	4629      	mov	r1, r5
 802e382:	4630      	mov	r0, r6
 802e384:	f000 fc10 	bl	802eba8 <__swsetup_r>
 802e388:	b1c0      	cbz	r0, 802e3bc <_vfiprintf_r+0x78>
 802e38a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e38c:	07dc      	lsls	r4, r3, #31
 802e38e:	d50e      	bpl.n	802e3ae <_vfiprintf_r+0x6a>
 802e390:	f04f 30ff 	mov.w	r0, #4294967295
 802e394:	b01d      	add	sp, #116	; 0x74
 802e396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e39a:	4b7b      	ldr	r3, [pc, #492]	; (802e588 <_vfiprintf_r+0x244>)
 802e39c:	429d      	cmp	r5, r3
 802e39e:	d101      	bne.n	802e3a4 <_vfiprintf_r+0x60>
 802e3a0:	68b5      	ldr	r5, [r6, #8]
 802e3a2:	e7df      	b.n	802e364 <_vfiprintf_r+0x20>
 802e3a4:	4b79      	ldr	r3, [pc, #484]	; (802e58c <_vfiprintf_r+0x248>)
 802e3a6:	429d      	cmp	r5, r3
 802e3a8:	bf08      	it	eq
 802e3aa:	68f5      	ldreq	r5, [r6, #12]
 802e3ac:	e7da      	b.n	802e364 <_vfiprintf_r+0x20>
 802e3ae:	89ab      	ldrh	r3, [r5, #12]
 802e3b0:	0598      	lsls	r0, r3, #22
 802e3b2:	d4ed      	bmi.n	802e390 <_vfiprintf_r+0x4c>
 802e3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e3b6:	f7ff feba 	bl	802e12e <__retarget_lock_release_recursive>
 802e3ba:	e7e9      	b.n	802e390 <_vfiprintf_r+0x4c>
 802e3bc:	2300      	movs	r3, #0
 802e3be:	9309      	str	r3, [sp, #36]	; 0x24
 802e3c0:	2320      	movs	r3, #32
 802e3c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 802e3ca:	2330      	movs	r3, #48	; 0x30
 802e3cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802e590 <_vfiprintf_r+0x24c>
 802e3d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e3d4:	f04f 0901 	mov.w	r9, #1
 802e3d8:	4623      	mov	r3, r4
 802e3da:	469a      	mov	sl, r3
 802e3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e3e0:	b10a      	cbz	r2, 802e3e6 <_vfiprintf_r+0xa2>
 802e3e2:	2a25      	cmp	r2, #37	; 0x25
 802e3e4:	d1f9      	bne.n	802e3da <_vfiprintf_r+0x96>
 802e3e6:	ebba 0b04 	subs.w	fp, sl, r4
 802e3ea:	d00b      	beq.n	802e404 <_vfiprintf_r+0xc0>
 802e3ec:	465b      	mov	r3, fp
 802e3ee:	4622      	mov	r2, r4
 802e3f0:	4629      	mov	r1, r5
 802e3f2:	4630      	mov	r0, r6
 802e3f4:	f7ff ff93 	bl	802e31e <__sfputs_r>
 802e3f8:	3001      	adds	r0, #1
 802e3fa:	f000 80aa 	beq.w	802e552 <_vfiprintf_r+0x20e>
 802e3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e400:	445a      	add	r2, fp
 802e402:	9209      	str	r2, [sp, #36]	; 0x24
 802e404:	f89a 3000 	ldrb.w	r3, [sl]
 802e408:	2b00      	cmp	r3, #0
 802e40a:	f000 80a2 	beq.w	802e552 <_vfiprintf_r+0x20e>
 802e40e:	2300      	movs	r3, #0
 802e410:	f04f 32ff 	mov.w	r2, #4294967295
 802e414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e418:	f10a 0a01 	add.w	sl, sl, #1
 802e41c:	9304      	str	r3, [sp, #16]
 802e41e:	9307      	str	r3, [sp, #28]
 802e420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e424:	931a      	str	r3, [sp, #104]	; 0x68
 802e426:	4654      	mov	r4, sl
 802e428:	2205      	movs	r2, #5
 802e42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e42e:	4858      	ldr	r0, [pc, #352]	; (802e590 <_vfiprintf_r+0x24c>)
 802e430:	f7d1 fee6 	bl	8000200 <memchr>
 802e434:	9a04      	ldr	r2, [sp, #16]
 802e436:	b9d8      	cbnz	r0, 802e470 <_vfiprintf_r+0x12c>
 802e438:	06d1      	lsls	r1, r2, #27
 802e43a:	bf44      	itt	mi
 802e43c:	2320      	movmi	r3, #32
 802e43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e442:	0713      	lsls	r3, r2, #28
 802e444:	bf44      	itt	mi
 802e446:	232b      	movmi	r3, #43	; 0x2b
 802e448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e44c:	f89a 3000 	ldrb.w	r3, [sl]
 802e450:	2b2a      	cmp	r3, #42	; 0x2a
 802e452:	d015      	beq.n	802e480 <_vfiprintf_r+0x13c>
 802e454:	9a07      	ldr	r2, [sp, #28]
 802e456:	4654      	mov	r4, sl
 802e458:	2000      	movs	r0, #0
 802e45a:	f04f 0c0a 	mov.w	ip, #10
 802e45e:	4621      	mov	r1, r4
 802e460:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e464:	3b30      	subs	r3, #48	; 0x30
 802e466:	2b09      	cmp	r3, #9
 802e468:	d94e      	bls.n	802e508 <_vfiprintf_r+0x1c4>
 802e46a:	b1b0      	cbz	r0, 802e49a <_vfiprintf_r+0x156>
 802e46c:	9207      	str	r2, [sp, #28]
 802e46e:	e014      	b.n	802e49a <_vfiprintf_r+0x156>
 802e470:	eba0 0308 	sub.w	r3, r0, r8
 802e474:	fa09 f303 	lsl.w	r3, r9, r3
 802e478:	4313      	orrs	r3, r2
 802e47a:	9304      	str	r3, [sp, #16]
 802e47c:	46a2      	mov	sl, r4
 802e47e:	e7d2      	b.n	802e426 <_vfiprintf_r+0xe2>
 802e480:	9b03      	ldr	r3, [sp, #12]
 802e482:	1d19      	adds	r1, r3, #4
 802e484:	681b      	ldr	r3, [r3, #0]
 802e486:	9103      	str	r1, [sp, #12]
 802e488:	2b00      	cmp	r3, #0
 802e48a:	bfbb      	ittet	lt
 802e48c:	425b      	neglt	r3, r3
 802e48e:	f042 0202 	orrlt.w	r2, r2, #2
 802e492:	9307      	strge	r3, [sp, #28]
 802e494:	9307      	strlt	r3, [sp, #28]
 802e496:	bfb8      	it	lt
 802e498:	9204      	strlt	r2, [sp, #16]
 802e49a:	7823      	ldrb	r3, [r4, #0]
 802e49c:	2b2e      	cmp	r3, #46	; 0x2e
 802e49e:	d10c      	bne.n	802e4ba <_vfiprintf_r+0x176>
 802e4a0:	7863      	ldrb	r3, [r4, #1]
 802e4a2:	2b2a      	cmp	r3, #42	; 0x2a
 802e4a4:	d135      	bne.n	802e512 <_vfiprintf_r+0x1ce>
 802e4a6:	9b03      	ldr	r3, [sp, #12]
 802e4a8:	1d1a      	adds	r2, r3, #4
 802e4aa:	681b      	ldr	r3, [r3, #0]
 802e4ac:	9203      	str	r2, [sp, #12]
 802e4ae:	2b00      	cmp	r3, #0
 802e4b0:	bfb8      	it	lt
 802e4b2:	f04f 33ff 	movlt.w	r3, #4294967295
 802e4b6:	3402      	adds	r4, #2
 802e4b8:	9305      	str	r3, [sp, #20]
 802e4ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802e5a0 <_vfiprintf_r+0x25c>
 802e4be:	7821      	ldrb	r1, [r4, #0]
 802e4c0:	2203      	movs	r2, #3
 802e4c2:	4650      	mov	r0, sl
 802e4c4:	f7d1 fe9c 	bl	8000200 <memchr>
 802e4c8:	b140      	cbz	r0, 802e4dc <_vfiprintf_r+0x198>
 802e4ca:	2340      	movs	r3, #64	; 0x40
 802e4cc:	eba0 000a 	sub.w	r0, r0, sl
 802e4d0:	fa03 f000 	lsl.w	r0, r3, r0
 802e4d4:	9b04      	ldr	r3, [sp, #16]
 802e4d6:	4303      	orrs	r3, r0
 802e4d8:	3401      	adds	r4, #1
 802e4da:	9304      	str	r3, [sp, #16]
 802e4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e4e0:	482c      	ldr	r0, [pc, #176]	; (802e594 <_vfiprintf_r+0x250>)
 802e4e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e4e6:	2206      	movs	r2, #6
 802e4e8:	f7d1 fe8a 	bl	8000200 <memchr>
 802e4ec:	2800      	cmp	r0, #0
 802e4ee:	d03f      	beq.n	802e570 <_vfiprintf_r+0x22c>
 802e4f0:	4b29      	ldr	r3, [pc, #164]	; (802e598 <_vfiprintf_r+0x254>)
 802e4f2:	bb1b      	cbnz	r3, 802e53c <_vfiprintf_r+0x1f8>
 802e4f4:	9b03      	ldr	r3, [sp, #12]
 802e4f6:	3307      	adds	r3, #7
 802e4f8:	f023 0307 	bic.w	r3, r3, #7
 802e4fc:	3308      	adds	r3, #8
 802e4fe:	9303      	str	r3, [sp, #12]
 802e500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e502:	443b      	add	r3, r7
 802e504:	9309      	str	r3, [sp, #36]	; 0x24
 802e506:	e767      	b.n	802e3d8 <_vfiprintf_r+0x94>
 802e508:	fb0c 3202 	mla	r2, ip, r2, r3
 802e50c:	460c      	mov	r4, r1
 802e50e:	2001      	movs	r0, #1
 802e510:	e7a5      	b.n	802e45e <_vfiprintf_r+0x11a>
 802e512:	2300      	movs	r3, #0
 802e514:	3401      	adds	r4, #1
 802e516:	9305      	str	r3, [sp, #20]
 802e518:	4619      	mov	r1, r3
 802e51a:	f04f 0c0a 	mov.w	ip, #10
 802e51e:	4620      	mov	r0, r4
 802e520:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e524:	3a30      	subs	r2, #48	; 0x30
 802e526:	2a09      	cmp	r2, #9
 802e528:	d903      	bls.n	802e532 <_vfiprintf_r+0x1ee>
 802e52a:	2b00      	cmp	r3, #0
 802e52c:	d0c5      	beq.n	802e4ba <_vfiprintf_r+0x176>
 802e52e:	9105      	str	r1, [sp, #20]
 802e530:	e7c3      	b.n	802e4ba <_vfiprintf_r+0x176>
 802e532:	fb0c 2101 	mla	r1, ip, r1, r2
 802e536:	4604      	mov	r4, r0
 802e538:	2301      	movs	r3, #1
 802e53a:	e7f0      	b.n	802e51e <_vfiprintf_r+0x1da>
 802e53c:	ab03      	add	r3, sp, #12
 802e53e:	9300      	str	r3, [sp, #0]
 802e540:	462a      	mov	r2, r5
 802e542:	4b16      	ldr	r3, [pc, #88]	; (802e59c <_vfiprintf_r+0x258>)
 802e544:	a904      	add	r1, sp, #16
 802e546:	4630      	mov	r0, r6
 802e548:	f3af 8000 	nop.w
 802e54c:	4607      	mov	r7, r0
 802e54e:	1c78      	adds	r0, r7, #1
 802e550:	d1d6      	bne.n	802e500 <_vfiprintf_r+0x1bc>
 802e552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e554:	07d9      	lsls	r1, r3, #31
 802e556:	d405      	bmi.n	802e564 <_vfiprintf_r+0x220>
 802e558:	89ab      	ldrh	r3, [r5, #12]
 802e55a:	059a      	lsls	r2, r3, #22
 802e55c:	d402      	bmi.n	802e564 <_vfiprintf_r+0x220>
 802e55e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e560:	f7ff fde5 	bl	802e12e <__retarget_lock_release_recursive>
 802e564:	89ab      	ldrh	r3, [r5, #12]
 802e566:	065b      	lsls	r3, r3, #25
 802e568:	f53f af12 	bmi.w	802e390 <_vfiprintf_r+0x4c>
 802e56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e56e:	e711      	b.n	802e394 <_vfiprintf_r+0x50>
 802e570:	ab03      	add	r3, sp, #12
 802e572:	9300      	str	r3, [sp, #0]
 802e574:	462a      	mov	r2, r5
 802e576:	4b09      	ldr	r3, [pc, #36]	; (802e59c <_vfiprintf_r+0x258>)
 802e578:	a904      	add	r1, sp, #16
 802e57a:	4630      	mov	r0, r6
 802e57c:	f000 f880 	bl	802e680 <_printf_i>
 802e580:	e7e4      	b.n	802e54c <_vfiprintf_r+0x208>
 802e582:	bf00      	nop
 802e584:	08033a98 	.word	0x08033a98
 802e588:	08033ab8 	.word	0x08033ab8
 802e58c:	08033a78 	.word	0x08033a78
 802e590:	08033adc 	.word	0x08033adc
 802e594:	08033ae6 	.word	0x08033ae6
 802e598:	00000000 	.word	0x00000000
 802e59c:	0802e31f 	.word	0x0802e31f
 802e5a0:	08033ae2 	.word	0x08033ae2

0802e5a4 <_printf_common>:
 802e5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e5a8:	4616      	mov	r6, r2
 802e5aa:	4699      	mov	r9, r3
 802e5ac:	688a      	ldr	r2, [r1, #8]
 802e5ae:	690b      	ldr	r3, [r1, #16]
 802e5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e5b4:	4293      	cmp	r3, r2
 802e5b6:	bfb8      	it	lt
 802e5b8:	4613      	movlt	r3, r2
 802e5ba:	6033      	str	r3, [r6, #0]
 802e5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e5c0:	4607      	mov	r7, r0
 802e5c2:	460c      	mov	r4, r1
 802e5c4:	b10a      	cbz	r2, 802e5ca <_printf_common+0x26>
 802e5c6:	3301      	adds	r3, #1
 802e5c8:	6033      	str	r3, [r6, #0]
 802e5ca:	6823      	ldr	r3, [r4, #0]
 802e5cc:	0699      	lsls	r1, r3, #26
 802e5ce:	bf42      	ittt	mi
 802e5d0:	6833      	ldrmi	r3, [r6, #0]
 802e5d2:	3302      	addmi	r3, #2
 802e5d4:	6033      	strmi	r3, [r6, #0]
 802e5d6:	6825      	ldr	r5, [r4, #0]
 802e5d8:	f015 0506 	ands.w	r5, r5, #6
 802e5dc:	d106      	bne.n	802e5ec <_printf_common+0x48>
 802e5de:	f104 0a19 	add.w	sl, r4, #25
 802e5e2:	68e3      	ldr	r3, [r4, #12]
 802e5e4:	6832      	ldr	r2, [r6, #0]
 802e5e6:	1a9b      	subs	r3, r3, r2
 802e5e8:	42ab      	cmp	r3, r5
 802e5ea:	dc26      	bgt.n	802e63a <_printf_common+0x96>
 802e5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e5f0:	1e13      	subs	r3, r2, #0
 802e5f2:	6822      	ldr	r2, [r4, #0]
 802e5f4:	bf18      	it	ne
 802e5f6:	2301      	movne	r3, #1
 802e5f8:	0692      	lsls	r2, r2, #26
 802e5fa:	d42b      	bmi.n	802e654 <_printf_common+0xb0>
 802e5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e600:	4649      	mov	r1, r9
 802e602:	4638      	mov	r0, r7
 802e604:	47c0      	blx	r8
 802e606:	3001      	adds	r0, #1
 802e608:	d01e      	beq.n	802e648 <_printf_common+0xa4>
 802e60a:	6823      	ldr	r3, [r4, #0]
 802e60c:	68e5      	ldr	r5, [r4, #12]
 802e60e:	6832      	ldr	r2, [r6, #0]
 802e610:	f003 0306 	and.w	r3, r3, #6
 802e614:	2b04      	cmp	r3, #4
 802e616:	bf08      	it	eq
 802e618:	1aad      	subeq	r5, r5, r2
 802e61a:	68a3      	ldr	r3, [r4, #8]
 802e61c:	6922      	ldr	r2, [r4, #16]
 802e61e:	bf0c      	ite	eq
 802e620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e624:	2500      	movne	r5, #0
 802e626:	4293      	cmp	r3, r2
 802e628:	bfc4      	itt	gt
 802e62a:	1a9b      	subgt	r3, r3, r2
 802e62c:	18ed      	addgt	r5, r5, r3
 802e62e:	2600      	movs	r6, #0
 802e630:	341a      	adds	r4, #26
 802e632:	42b5      	cmp	r5, r6
 802e634:	d11a      	bne.n	802e66c <_printf_common+0xc8>
 802e636:	2000      	movs	r0, #0
 802e638:	e008      	b.n	802e64c <_printf_common+0xa8>
 802e63a:	2301      	movs	r3, #1
 802e63c:	4652      	mov	r2, sl
 802e63e:	4649      	mov	r1, r9
 802e640:	4638      	mov	r0, r7
 802e642:	47c0      	blx	r8
 802e644:	3001      	adds	r0, #1
 802e646:	d103      	bne.n	802e650 <_printf_common+0xac>
 802e648:	f04f 30ff 	mov.w	r0, #4294967295
 802e64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e650:	3501      	adds	r5, #1
 802e652:	e7c6      	b.n	802e5e2 <_printf_common+0x3e>
 802e654:	18e1      	adds	r1, r4, r3
 802e656:	1c5a      	adds	r2, r3, #1
 802e658:	2030      	movs	r0, #48	; 0x30
 802e65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e65e:	4422      	add	r2, r4
 802e660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e668:	3302      	adds	r3, #2
 802e66a:	e7c7      	b.n	802e5fc <_printf_common+0x58>
 802e66c:	2301      	movs	r3, #1
 802e66e:	4622      	mov	r2, r4
 802e670:	4649      	mov	r1, r9
 802e672:	4638      	mov	r0, r7
 802e674:	47c0      	blx	r8
 802e676:	3001      	adds	r0, #1
 802e678:	d0e6      	beq.n	802e648 <_printf_common+0xa4>
 802e67a:	3601      	adds	r6, #1
 802e67c:	e7d9      	b.n	802e632 <_printf_common+0x8e>
	...

0802e680 <_printf_i>:
 802e680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e684:	460c      	mov	r4, r1
 802e686:	4691      	mov	r9, r2
 802e688:	7e27      	ldrb	r7, [r4, #24]
 802e68a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802e68c:	2f78      	cmp	r7, #120	; 0x78
 802e68e:	4680      	mov	r8, r0
 802e690:	469a      	mov	sl, r3
 802e692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e696:	d807      	bhi.n	802e6a8 <_printf_i+0x28>
 802e698:	2f62      	cmp	r7, #98	; 0x62
 802e69a:	d80a      	bhi.n	802e6b2 <_printf_i+0x32>
 802e69c:	2f00      	cmp	r7, #0
 802e69e:	f000 80d8 	beq.w	802e852 <_printf_i+0x1d2>
 802e6a2:	2f58      	cmp	r7, #88	; 0x58
 802e6a4:	f000 80a3 	beq.w	802e7ee <_printf_i+0x16e>
 802e6a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802e6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e6b0:	e03a      	b.n	802e728 <_printf_i+0xa8>
 802e6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e6b6:	2b15      	cmp	r3, #21
 802e6b8:	d8f6      	bhi.n	802e6a8 <_printf_i+0x28>
 802e6ba:	a001      	add	r0, pc, #4	; (adr r0, 802e6c0 <_printf_i+0x40>)
 802e6bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802e6c0:	0802e719 	.word	0x0802e719
 802e6c4:	0802e72d 	.word	0x0802e72d
 802e6c8:	0802e6a9 	.word	0x0802e6a9
 802e6cc:	0802e6a9 	.word	0x0802e6a9
 802e6d0:	0802e6a9 	.word	0x0802e6a9
 802e6d4:	0802e6a9 	.word	0x0802e6a9
 802e6d8:	0802e72d 	.word	0x0802e72d
 802e6dc:	0802e6a9 	.word	0x0802e6a9
 802e6e0:	0802e6a9 	.word	0x0802e6a9
 802e6e4:	0802e6a9 	.word	0x0802e6a9
 802e6e8:	0802e6a9 	.word	0x0802e6a9
 802e6ec:	0802e839 	.word	0x0802e839
 802e6f0:	0802e75d 	.word	0x0802e75d
 802e6f4:	0802e81b 	.word	0x0802e81b
 802e6f8:	0802e6a9 	.word	0x0802e6a9
 802e6fc:	0802e6a9 	.word	0x0802e6a9
 802e700:	0802e85b 	.word	0x0802e85b
 802e704:	0802e6a9 	.word	0x0802e6a9
 802e708:	0802e75d 	.word	0x0802e75d
 802e70c:	0802e6a9 	.word	0x0802e6a9
 802e710:	0802e6a9 	.word	0x0802e6a9
 802e714:	0802e823 	.word	0x0802e823
 802e718:	680b      	ldr	r3, [r1, #0]
 802e71a:	1d1a      	adds	r2, r3, #4
 802e71c:	681b      	ldr	r3, [r3, #0]
 802e71e:	600a      	str	r2, [r1, #0]
 802e720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802e724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e728:	2301      	movs	r3, #1
 802e72a:	e0a3      	b.n	802e874 <_printf_i+0x1f4>
 802e72c:	6825      	ldr	r5, [r4, #0]
 802e72e:	6808      	ldr	r0, [r1, #0]
 802e730:	062e      	lsls	r6, r5, #24
 802e732:	f100 0304 	add.w	r3, r0, #4
 802e736:	d50a      	bpl.n	802e74e <_printf_i+0xce>
 802e738:	6805      	ldr	r5, [r0, #0]
 802e73a:	600b      	str	r3, [r1, #0]
 802e73c:	2d00      	cmp	r5, #0
 802e73e:	da03      	bge.n	802e748 <_printf_i+0xc8>
 802e740:	232d      	movs	r3, #45	; 0x2d
 802e742:	426d      	negs	r5, r5
 802e744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e748:	485e      	ldr	r0, [pc, #376]	; (802e8c4 <_printf_i+0x244>)
 802e74a:	230a      	movs	r3, #10
 802e74c:	e019      	b.n	802e782 <_printf_i+0x102>
 802e74e:	f015 0f40 	tst.w	r5, #64	; 0x40
 802e752:	6805      	ldr	r5, [r0, #0]
 802e754:	600b      	str	r3, [r1, #0]
 802e756:	bf18      	it	ne
 802e758:	b22d      	sxthne	r5, r5
 802e75a:	e7ef      	b.n	802e73c <_printf_i+0xbc>
 802e75c:	680b      	ldr	r3, [r1, #0]
 802e75e:	6825      	ldr	r5, [r4, #0]
 802e760:	1d18      	adds	r0, r3, #4
 802e762:	6008      	str	r0, [r1, #0]
 802e764:	0628      	lsls	r0, r5, #24
 802e766:	d501      	bpl.n	802e76c <_printf_i+0xec>
 802e768:	681d      	ldr	r5, [r3, #0]
 802e76a:	e002      	b.n	802e772 <_printf_i+0xf2>
 802e76c:	0669      	lsls	r1, r5, #25
 802e76e:	d5fb      	bpl.n	802e768 <_printf_i+0xe8>
 802e770:	881d      	ldrh	r5, [r3, #0]
 802e772:	4854      	ldr	r0, [pc, #336]	; (802e8c4 <_printf_i+0x244>)
 802e774:	2f6f      	cmp	r7, #111	; 0x6f
 802e776:	bf0c      	ite	eq
 802e778:	2308      	moveq	r3, #8
 802e77a:	230a      	movne	r3, #10
 802e77c:	2100      	movs	r1, #0
 802e77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e782:	6866      	ldr	r6, [r4, #4]
 802e784:	60a6      	str	r6, [r4, #8]
 802e786:	2e00      	cmp	r6, #0
 802e788:	bfa2      	ittt	ge
 802e78a:	6821      	ldrge	r1, [r4, #0]
 802e78c:	f021 0104 	bicge.w	r1, r1, #4
 802e790:	6021      	strge	r1, [r4, #0]
 802e792:	b90d      	cbnz	r5, 802e798 <_printf_i+0x118>
 802e794:	2e00      	cmp	r6, #0
 802e796:	d04d      	beq.n	802e834 <_printf_i+0x1b4>
 802e798:	4616      	mov	r6, r2
 802e79a:	fbb5 f1f3 	udiv	r1, r5, r3
 802e79e:	fb03 5711 	mls	r7, r3, r1, r5
 802e7a2:	5dc7      	ldrb	r7, [r0, r7]
 802e7a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802e7a8:	462f      	mov	r7, r5
 802e7aa:	42bb      	cmp	r3, r7
 802e7ac:	460d      	mov	r5, r1
 802e7ae:	d9f4      	bls.n	802e79a <_printf_i+0x11a>
 802e7b0:	2b08      	cmp	r3, #8
 802e7b2:	d10b      	bne.n	802e7cc <_printf_i+0x14c>
 802e7b4:	6823      	ldr	r3, [r4, #0]
 802e7b6:	07df      	lsls	r7, r3, #31
 802e7b8:	d508      	bpl.n	802e7cc <_printf_i+0x14c>
 802e7ba:	6923      	ldr	r3, [r4, #16]
 802e7bc:	6861      	ldr	r1, [r4, #4]
 802e7be:	4299      	cmp	r1, r3
 802e7c0:	bfde      	ittt	le
 802e7c2:	2330      	movle	r3, #48	; 0x30
 802e7c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 802e7c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 802e7cc:	1b92      	subs	r2, r2, r6
 802e7ce:	6122      	str	r2, [r4, #16]
 802e7d0:	f8cd a000 	str.w	sl, [sp]
 802e7d4:	464b      	mov	r3, r9
 802e7d6:	aa03      	add	r2, sp, #12
 802e7d8:	4621      	mov	r1, r4
 802e7da:	4640      	mov	r0, r8
 802e7dc:	f7ff fee2 	bl	802e5a4 <_printf_common>
 802e7e0:	3001      	adds	r0, #1
 802e7e2:	d14c      	bne.n	802e87e <_printf_i+0x1fe>
 802e7e4:	f04f 30ff 	mov.w	r0, #4294967295
 802e7e8:	b004      	add	sp, #16
 802e7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e7ee:	4835      	ldr	r0, [pc, #212]	; (802e8c4 <_printf_i+0x244>)
 802e7f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802e7f4:	6823      	ldr	r3, [r4, #0]
 802e7f6:	680e      	ldr	r6, [r1, #0]
 802e7f8:	061f      	lsls	r7, r3, #24
 802e7fa:	f856 5b04 	ldr.w	r5, [r6], #4
 802e7fe:	600e      	str	r6, [r1, #0]
 802e800:	d514      	bpl.n	802e82c <_printf_i+0x1ac>
 802e802:	07d9      	lsls	r1, r3, #31
 802e804:	bf44      	itt	mi
 802e806:	f043 0320 	orrmi.w	r3, r3, #32
 802e80a:	6023      	strmi	r3, [r4, #0]
 802e80c:	b91d      	cbnz	r5, 802e816 <_printf_i+0x196>
 802e80e:	6823      	ldr	r3, [r4, #0]
 802e810:	f023 0320 	bic.w	r3, r3, #32
 802e814:	6023      	str	r3, [r4, #0]
 802e816:	2310      	movs	r3, #16
 802e818:	e7b0      	b.n	802e77c <_printf_i+0xfc>
 802e81a:	6823      	ldr	r3, [r4, #0]
 802e81c:	f043 0320 	orr.w	r3, r3, #32
 802e820:	6023      	str	r3, [r4, #0]
 802e822:	2378      	movs	r3, #120	; 0x78
 802e824:	4828      	ldr	r0, [pc, #160]	; (802e8c8 <_printf_i+0x248>)
 802e826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802e82a:	e7e3      	b.n	802e7f4 <_printf_i+0x174>
 802e82c:	065e      	lsls	r6, r3, #25
 802e82e:	bf48      	it	mi
 802e830:	b2ad      	uxthmi	r5, r5
 802e832:	e7e6      	b.n	802e802 <_printf_i+0x182>
 802e834:	4616      	mov	r6, r2
 802e836:	e7bb      	b.n	802e7b0 <_printf_i+0x130>
 802e838:	680b      	ldr	r3, [r1, #0]
 802e83a:	6826      	ldr	r6, [r4, #0]
 802e83c:	6960      	ldr	r0, [r4, #20]
 802e83e:	1d1d      	adds	r5, r3, #4
 802e840:	600d      	str	r5, [r1, #0]
 802e842:	0635      	lsls	r5, r6, #24
 802e844:	681b      	ldr	r3, [r3, #0]
 802e846:	d501      	bpl.n	802e84c <_printf_i+0x1cc>
 802e848:	6018      	str	r0, [r3, #0]
 802e84a:	e002      	b.n	802e852 <_printf_i+0x1d2>
 802e84c:	0671      	lsls	r1, r6, #25
 802e84e:	d5fb      	bpl.n	802e848 <_printf_i+0x1c8>
 802e850:	8018      	strh	r0, [r3, #0]
 802e852:	2300      	movs	r3, #0
 802e854:	6123      	str	r3, [r4, #16]
 802e856:	4616      	mov	r6, r2
 802e858:	e7ba      	b.n	802e7d0 <_printf_i+0x150>
 802e85a:	680b      	ldr	r3, [r1, #0]
 802e85c:	1d1a      	adds	r2, r3, #4
 802e85e:	600a      	str	r2, [r1, #0]
 802e860:	681e      	ldr	r6, [r3, #0]
 802e862:	6862      	ldr	r2, [r4, #4]
 802e864:	2100      	movs	r1, #0
 802e866:	4630      	mov	r0, r6
 802e868:	f7d1 fcca 	bl	8000200 <memchr>
 802e86c:	b108      	cbz	r0, 802e872 <_printf_i+0x1f2>
 802e86e:	1b80      	subs	r0, r0, r6
 802e870:	6060      	str	r0, [r4, #4]
 802e872:	6863      	ldr	r3, [r4, #4]
 802e874:	6123      	str	r3, [r4, #16]
 802e876:	2300      	movs	r3, #0
 802e878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e87c:	e7a8      	b.n	802e7d0 <_printf_i+0x150>
 802e87e:	6923      	ldr	r3, [r4, #16]
 802e880:	4632      	mov	r2, r6
 802e882:	4649      	mov	r1, r9
 802e884:	4640      	mov	r0, r8
 802e886:	47d0      	blx	sl
 802e888:	3001      	adds	r0, #1
 802e88a:	d0ab      	beq.n	802e7e4 <_printf_i+0x164>
 802e88c:	6823      	ldr	r3, [r4, #0]
 802e88e:	079b      	lsls	r3, r3, #30
 802e890:	d413      	bmi.n	802e8ba <_printf_i+0x23a>
 802e892:	68e0      	ldr	r0, [r4, #12]
 802e894:	9b03      	ldr	r3, [sp, #12]
 802e896:	4298      	cmp	r0, r3
 802e898:	bfb8      	it	lt
 802e89a:	4618      	movlt	r0, r3
 802e89c:	e7a4      	b.n	802e7e8 <_printf_i+0x168>
 802e89e:	2301      	movs	r3, #1
 802e8a0:	4632      	mov	r2, r6
 802e8a2:	4649      	mov	r1, r9
 802e8a4:	4640      	mov	r0, r8
 802e8a6:	47d0      	blx	sl
 802e8a8:	3001      	adds	r0, #1
 802e8aa:	d09b      	beq.n	802e7e4 <_printf_i+0x164>
 802e8ac:	3501      	adds	r5, #1
 802e8ae:	68e3      	ldr	r3, [r4, #12]
 802e8b0:	9903      	ldr	r1, [sp, #12]
 802e8b2:	1a5b      	subs	r3, r3, r1
 802e8b4:	42ab      	cmp	r3, r5
 802e8b6:	dcf2      	bgt.n	802e89e <_printf_i+0x21e>
 802e8b8:	e7eb      	b.n	802e892 <_printf_i+0x212>
 802e8ba:	2500      	movs	r5, #0
 802e8bc:	f104 0619 	add.w	r6, r4, #25
 802e8c0:	e7f5      	b.n	802e8ae <_printf_i+0x22e>
 802e8c2:	bf00      	nop
 802e8c4:	08033aed 	.word	0x08033aed
 802e8c8:	08033afe 	.word	0x08033afe

0802e8cc <cleanup_glue>:
 802e8cc:	b538      	push	{r3, r4, r5, lr}
 802e8ce:	460c      	mov	r4, r1
 802e8d0:	6809      	ldr	r1, [r1, #0]
 802e8d2:	4605      	mov	r5, r0
 802e8d4:	b109      	cbz	r1, 802e8da <cleanup_glue+0xe>
 802e8d6:	f7ff fff9 	bl	802e8cc <cleanup_glue>
 802e8da:	4621      	mov	r1, r4
 802e8dc:	4628      	mov	r0, r5
 802e8de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e8e2:	f7ff bc5b 	b.w	802e19c <_free_r>
	...

0802e8e8 <_reclaim_reent>:
 802e8e8:	4b2c      	ldr	r3, [pc, #176]	; (802e99c <_reclaim_reent+0xb4>)
 802e8ea:	681b      	ldr	r3, [r3, #0]
 802e8ec:	4283      	cmp	r3, r0
 802e8ee:	b570      	push	{r4, r5, r6, lr}
 802e8f0:	4604      	mov	r4, r0
 802e8f2:	d051      	beq.n	802e998 <_reclaim_reent+0xb0>
 802e8f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802e8f6:	b143      	cbz	r3, 802e90a <_reclaim_reent+0x22>
 802e8f8:	68db      	ldr	r3, [r3, #12]
 802e8fa:	2b00      	cmp	r3, #0
 802e8fc:	d14a      	bne.n	802e994 <_reclaim_reent+0xac>
 802e8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e900:	6819      	ldr	r1, [r3, #0]
 802e902:	b111      	cbz	r1, 802e90a <_reclaim_reent+0x22>
 802e904:	4620      	mov	r0, r4
 802e906:	f7ff fc49 	bl	802e19c <_free_r>
 802e90a:	6961      	ldr	r1, [r4, #20]
 802e90c:	b111      	cbz	r1, 802e914 <_reclaim_reent+0x2c>
 802e90e:	4620      	mov	r0, r4
 802e910:	f7ff fc44 	bl	802e19c <_free_r>
 802e914:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802e916:	b111      	cbz	r1, 802e91e <_reclaim_reent+0x36>
 802e918:	4620      	mov	r0, r4
 802e91a:	f7ff fc3f 	bl	802e19c <_free_r>
 802e91e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802e920:	b111      	cbz	r1, 802e928 <_reclaim_reent+0x40>
 802e922:	4620      	mov	r0, r4
 802e924:	f7ff fc3a 	bl	802e19c <_free_r>
 802e928:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802e92a:	b111      	cbz	r1, 802e932 <_reclaim_reent+0x4a>
 802e92c:	4620      	mov	r0, r4
 802e92e:	f7ff fc35 	bl	802e19c <_free_r>
 802e932:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802e934:	b111      	cbz	r1, 802e93c <_reclaim_reent+0x54>
 802e936:	4620      	mov	r0, r4
 802e938:	f7ff fc30 	bl	802e19c <_free_r>
 802e93c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802e93e:	b111      	cbz	r1, 802e946 <_reclaim_reent+0x5e>
 802e940:	4620      	mov	r0, r4
 802e942:	f7ff fc2b 	bl	802e19c <_free_r>
 802e946:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802e948:	b111      	cbz	r1, 802e950 <_reclaim_reent+0x68>
 802e94a:	4620      	mov	r0, r4
 802e94c:	f7ff fc26 	bl	802e19c <_free_r>
 802e950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e952:	b111      	cbz	r1, 802e95a <_reclaim_reent+0x72>
 802e954:	4620      	mov	r0, r4
 802e956:	f7ff fc21 	bl	802e19c <_free_r>
 802e95a:	69a3      	ldr	r3, [r4, #24]
 802e95c:	b1e3      	cbz	r3, 802e998 <_reclaim_reent+0xb0>
 802e95e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802e960:	4620      	mov	r0, r4
 802e962:	4798      	blx	r3
 802e964:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802e966:	b1b9      	cbz	r1, 802e998 <_reclaim_reent+0xb0>
 802e968:	4620      	mov	r0, r4
 802e96a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e96e:	f7ff bfad 	b.w	802e8cc <cleanup_glue>
 802e972:	5949      	ldr	r1, [r1, r5]
 802e974:	b941      	cbnz	r1, 802e988 <_reclaim_reent+0xa0>
 802e976:	3504      	adds	r5, #4
 802e978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e97a:	2d80      	cmp	r5, #128	; 0x80
 802e97c:	68d9      	ldr	r1, [r3, #12]
 802e97e:	d1f8      	bne.n	802e972 <_reclaim_reent+0x8a>
 802e980:	4620      	mov	r0, r4
 802e982:	f7ff fc0b 	bl	802e19c <_free_r>
 802e986:	e7ba      	b.n	802e8fe <_reclaim_reent+0x16>
 802e988:	680e      	ldr	r6, [r1, #0]
 802e98a:	4620      	mov	r0, r4
 802e98c:	f7ff fc06 	bl	802e19c <_free_r>
 802e990:	4631      	mov	r1, r6
 802e992:	e7ef      	b.n	802e974 <_reclaim_reent+0x8c>
 802e994:	2500      	movs	r5, #0
 802e996:	e7ef      	b.n	802e978 <_reclaim_reent+0x90>
 802e998:	bd70      	pop	{r4, r5, r6, pc}
 802e99a:	bf00      	nop
 802e99c:	20000098 	.word	0x20000098

0802e9a0 <_sbrk_r>:
 802e9a0:	b538      	push	{r3, r4, r5, lr}
 802e9a2:	4d06      	ldr	r5, [pc, #24]	; (802e9bc <_sbrk_r+0x1c>)
 802e9a4:	2300      	movs	r3, #0
 802e9a6:	4604      	mov	r4, r0
 802e9a8:	4608      	mov	r0, r1
 802e9aa:	602b      	str	r3, [r5, #0]
 802e9ac:	f7d5 fc78 	bl	80042a0 <_sbrk>
 802e9b0:	1c43      	adds	r3, r0, #1
 802e9b2:	d102      	bne.n	802e9ba <_sbrk_r+0x1a>
 802e9b4:	682b      	ldr	r3, [r5, #0]
 802e9b6:	b103      	cbz	r3, 802e9ba <_sbrk_r+0x1a>
 802e9b8:	6023      	str	r3, [r4, #0]
 802e9ba:	bd38      	pop	{r3, r4, r5, pc}
 802e9bc:	2000b628 	.word	0x2000b628

0802e9c0 <_raise_r>:
 802e9c0:	291f      	cmp	r1, #31
 802e9c2:	b538      	push	{r3, r4, r5, lr}
 802e9c4:	4604      	mov	r4, r0
 802e9c6:	460d      	mov	r5, r1
 802e9c8:	d904      	bls.n	802e9d4 <_raise_r+0x14>
 802e9ca:	2316      	movs	r3, #22
 802e9cc:	6003      	str	r3, [r0, #0]
 802e9ce:	f04f 30ff 	mov.w	r0, #4294967295
 802e9d2:	bd38      	pop	{r3, r4, r5, pc}
 802e9d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802e9d6:	b112      	cbz	r2, 802e9de <_raise_r+0x1e>
 802e9d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e9dc:	b94b      	cbnz	r3, 802e9f2 <_raise_r+0x32>
 802e9de:	4620      	mov	r0, r4
 802e9e0:	f000 f830 	bl	802ea44 <_getpid_r>
 802e9e4:	462a      	mov	r2, r5
 802e9e6:	4601      	mov	r1, r0
 802e9e8:	4620      	mov	r0, r4
 802e9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e9ee:	f000 b817 	b.w	802ea20 <_kill_r>
 802e9f2:	2b01      	cmp	r3, #1
 802e9f4:	d00a      	beq.n	802ea0c <_raise_r+0x4c>
 802e9f6:	1c59      	adds	r1, r3, #1
 802e9f8:	d103      	bne.n	802ea02 <_raise_r+0x42>
 802e9fa:	2316      	movs	r3, #22
 802e9fc:	6003      	str	r3, [r0, #0]
 802e9fe:	2001      	movs	r0, #1
 802ea00:	e7e7      	b.n	802e9d2 <_raise_r+0x12>
 802ea02:	2400      	movs	r4, #0
 802ea04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802ea08:	4628      	mov	r0, r5
 802ea0a:	4798      	blx	r3
 802ea0c:	2000      	movs	r0, #0
 802ea0e:	e7e0      	b.n	802e9d2 <_raise_r+0x12>

0802ea10 <raise>:
 802ea10:	4b02      	ldr	r3, [pc, #8]	; (802ea1c <raise+0xc>)
 802ea12:	4601      	mov	r1, r0
 802ea14:	6818      	ldr	r0, [r3, #0]
 802ea16:	f7ff bfd3 	b.w	802e9c0 <_raise_r>
 802ea1a:	bf00      	nop
 802ea1c:	20000098 	.word	0x20000098

0802ea20 <_kill_r>:
 802ea20:	b538      	push	{r3, r4, r5, lr}
 802ea22:	4d07      	ldr	r5, [pc, #28]	; (802ea40 <_kill_r+0x20>)
 802ea24:	2300      	movs	r3, #0
 802ea26:	4604      	mov	r4, r0
 802ea28:	4608      	mov	r0, r1
 802ea2a:	4611      	mov	r1, r2
 802ea2c:	602b      	str	r3, [r5, #0]
 802ea2e:	f7d5 fbaf 	bl	8004190 <_kill>
 802ea32:	1c43      	adds	r3, r0, #1
 802ea34:	d102      	bne.n	802ea3c <_kill_r+0x1c>
 802ea36:	682b      	ldr	r3, [r5, #0]
 802ea38:	b103      	cbz	r3, 802ea3c <_kill_r+0x1c>
 802ea3a:	6023      	str	r3, [r4, #0]
 802ea3c:	bd38      	pop	{r3, r4, r5, pc}
 802ea3e:	bf00      	nop
 802ea40:	2000b628 	.word	0x2000b628

0802ea44 <_getpid_r>:
 802ea44:	f7d5 bb9c 	b.w	8004180 <_getpid>

0802ea48 <__sread>:
 802ea48:	b510      	push	{r4, lr}
 802ea4a:	460c      	mov	r4, r1
 802ea4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ea50:	f000 face 	bl	802eff0 <_read_r>
 802ea54:	2800      	cmp	r0, #0
 802ea56:	bfab      	itete	ge
 802ea58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ea5a:	89a3      	ldrhlt	r3, [r4, #12]
 802ea5c:	181b      	addge	r3, r3, r0
 802ea5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ea62:	bfac      	ite	ge
 802ea64:	6563      	strge	r3, [r4, #84]	; 0x54
 802ea66:	81a3      	strhlt	r3, [r4, #12]
 802ea68:	bd10      	pop	{r4, pc}

0802ea6a <__swrite>:
 802ea6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ea6e:	461f      	mov	r7, r3
 802ea70:	898b      	ldrh	r3, [r1, #12]
 802ea72:	05db      	lsls	r3, r3, #23
 802ea74:	4605      	mov	r5, r0
 802ea76:	460c      	mov	r4, r1
 802ea78:	4616      	mov	r6, r2
 802ea7a:	d505      	bpl.n	802ea88 <__swrite+0x1e>
 802ea7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ea80:	2302      	movs	r3, #2
 802ea82:	2200      	movs	r2, #0
 802ea84:	f000 fa32 	bl	802eeec <_lseek_r>
 802ea88:	89a3      	ldrh	r3, [r4, #12]
 802ea8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ea8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ea92:	81a3      	strh	r3, [r4, #12]
 802ea94:	4632      	mov	r2, r6
 802ea96:	463b      	mov	r3, r7
 802ea98:	4628      	mov	r0, r5
 802ea9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ea9e:	f000 b871 	b.w	802eb84 <_write_r>

0802eaa2 <__sseek>:
 802eaa2:	b510      	push	{r4, lr}
 802eaa4:	460c      	mov	r4, r1
 802eaa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eaaa:	f000 fa1f 	bl	802eeec <_lseek_r>
 802eaae:	1c43      	adds	r3, r0, #1
 802eab0:	89a3      	ldrh	r3, [r4, #12]
 802eab2:	bf15      	itete	ne
 802eab4:	6560      	strne	r0, [r4, #84]	; 0x54
 802eab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802eaba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802eabe:	81a3      	strheq	r3, [r4, #12]
 802eac0:	bf18      	it	ne
 802eac2:	81a3      	strhne	r3, [r4, #12]
 802eac4:	bd10      	pop	{r4, pc}

0802eac6 <__sclose>:
 802eac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802eaca:	f000 b93d 	b.w	802ed48 <_close_r>

0802eace <strcpy>:
 802eace:	4603      	mov	r3, r0
 802ead0:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ead4:	f803 2b01 	strb.w	r2, [r3], #1
 802ead8:	2a00      	cmp	r2, #0
 802eada:	d1f9      	bne.n	802ead0 <strcpy+0x2>
 802eadc:	4770      	bx	lr
	...

0802eae0 <__swbuf_r>:
 802eae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eae2:	460e      	mov	r6, r1
 802eae4:	4614      	mov	r4, r2
 802eae6:	4605      	mov	r5, r0
 802eae8:	b118      	cbz	r0, 802eaf2 <__swbuf_r+0x12>
 802eaea:	6983      	ldr	r3, [r0, #24]
 802eaec:	b90b      	cbnz	r3, 802eaf2 <__swbuf_r+0x12>
 802eaee:	f7ff fa47 	bl	802df80 <__sinit>
 802eaf2:	4b21      	ldr	r3, [pc, #132]	; (802eb78 <__swbuf_r+0x98>)
 802eaf4:	429c      	cmp	r4, r3
 802eaf6:	d12b      	bne.n	802eb50 <__swbuf_r+0x70>
 802eaf8:	686c      	ldr	r4, [r5, #4]
 802eafa:	69a3      	ldr	r3, [r4, #24]
 802eafc:	60a3      	str	r3, [r4, #8]
 802eafe:	89a3      	ldrh	r3, [r4, #12]
 802eb00:	071a      	lsls	r2, r3, #28
 802eb02:	d52f      	bpl.n	802eb64 <__swbuf_r+0x84>
 802eb04:	6923      	ldr	r3, [r4, #16]
 802eb06:	b36b      	cbz	r3, 802eb64 <__swbuf_r+0x84>
 802eb08:	6923      	ldr	r3, [r4, #16]
 802eb0a:	6820      	ldr	r0, [r4, #0]
 802eb0c:	1ac0      	subs	r0, r0, r3
 802eb0e:	6963      	ldr	r3, [r4, #20]
 802eb10:	b2f6      	uxtb	r6, r6
 802eb12:	4283      	cmp	r3, r0
 802eb14:	4637      	mov	r7, r6
 802eb16:	dc04      	bgt.n	802eb22 <__swbuf_r+0x42>
 802eb18:	4621      	mov	r1, r4
 802eb1a:	4628      	mov	r0, r5
 802eb1c:	f000 f9aa 	bl	802ee74 <_fflush_r>
 802eb20:	bb30      	cbnz	r0, 802eb70 <__swbuf_r+0x90>
 802eb22:	68a3      	ldr	r3, [r4, #8]
 802eb24:	3b01      	subs	r3, #1
 802eb26:	60a3      	str	r3, [r4, #8]
 802eb28:	6823      	ldr	r3, [r4, #0]
 802eb2a:	1c5a      	adds	r2, r3, #1
 802eb2c:	6022      	str	r2, [r4, #0]
 802eb2e:	701e      	strb	r6, [r3, #0]
 802eb30:	6963      	ldr	r3, [r4, #20]
 802eb32:	3001      	adds	r0, #1
 802eb34:	4283      	cmp	r3, r0
 802eb36:	d004      	beq.n	802eb42 <__swbuf_r+0x62>
 802eb38:	89a3      	ldrh	r3, [r4, #12]
 802eb3a:	07db      	lsls	r3, r3, #31
 802eb3c:	d506      	bpl.n	802eb4c <__swbuf_r+0x6c>
 802eb3e:	2e0a      	cmp	r6, #10
 802eb40:	d104      	bne.n	802eb4c <__swbuf_r+0x6c>
 802eb42:	4621      	mov	r1, r4
 802eb44:	4628      	mov	r0, r5
 802eb46:	f000 f995 	bl	802ee74 <_fflush_r>
 802eb4a:	b988      	cbnz	r0, 802eb70 <__swbuf_r+0x90>
 802eb4c:	4638      	mov	r0, r7
 802eb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802eb50:	4b0a      	ldr	r3, [pc, #40]	; (802eb7c <__swbuf_r+0x9c>)
 802eb52:	429c      	cmp	r4, r3
 802eb54:	d101      	bne.n	802eb5a <__swbuf_r+0x7a>
 802eb56:	68ac      	ldr	r4, [r5, #8]
 802eb58:	e7cf      	b.n	802eafa <__swbuf_r+0x1a>
 802eb5a:	4b09      	ldr	r3, [pc, #36]	; (802eb80 <__swbuf_r+0xa0>)
 802eb5c:	429c      	cmp	r4, r3
 802eb5e:	bf08      	it	eq
 802eb60:	68ec      	ldreq	r4, [r5, #12]
 802eb62:	e7ca      	b.n	802eafa <__swbuf_r+0x1a>
 802eb64:	4621      	mov	r1, r4
 802eb66:	4628      	mov	r0, r5
 802eb68:	f000 f81e 	bl	802eba8 <__swsetup_r>
 802eb6c:	2800      	cmp	r0, #0
 802eb6e:	d0cb      	beq.n	802eb08 <__swbuf_r+0x28>
 802eb70:	f04f 37ff 	mov.w	r7, #4294967295
 802eb74:	e7ea      	b.n	802eb4c <__swbuf_r+0x6c>
 802eb76:	bf00      	nop
 802eb78:	08033a98 	.word	0x08033a98
 802eb7c:	08033ab8 	.word	0x08033ab8
 802eb80:	08033a78 	.word	0x08033a78

0802eb84 <_write_r>:
 802eb84:	b538      	push	{r3, r4, r5, lr}
 802eb86:	4d07      	ldr	r5, [pc, #28]	; (802eba4 <_write_r+0x20>)
 802eb88:	4604      	mov	r4, r0
 802eb8a:	4608      	mov	r0, r1
 802eb8c:	4611      	mov	r1, r2
 802eb8e:	2200      	movs	r2, #0
 802eb90:	602a      	str	r2, [r5, #0]
 802eb92:	461a      	mov	r2, r3
 802eb94:	f7d5 fb33 	bl	80041fe <_write>
 802eb98:	1c43      	adds	r3, r0, #1
 802eb9a:	d102      	bne.n	802eba2 <_write_r+0x1e>
 802eb9c:	682b      	ldr	r3, [r5, #0]
 802eb9e:	b103      	cbz	r3, 802eba2 <_write_r+0x1e>
 802eba0:	6023      	str	r3, [r4, #0]
 802eba2:	bd38      	pop	{r3, r4, r5, pc}
 802eba4:	2000b628 	.word	0x2000b628

0802eba8 <__swsetup_r>:
 802eba8:	4b32      	ldr	r3, [pc, #200]	; (802ec74 <__swsetup_r+0xcc>)
 802ebaa:	b570      	push	{r4, r5, r6, lr}
 802ebac:	681d      	ldr	r5, [r3, #0]
 802ebae:	4606      	mov	r6, r0
 802ebb0:	460c      	mov	r4, r1
 802ebb2:	b125      	cbz	r5, 802ebbe <__swsetup_r+0x16>
 802ebb4:	69ab      	ldr	r3, [r5, #24]
 802ebb6:	b913      	cbnz	r3, 802ebbe <__swsetup_r+0x16>
 802ebb8:	4628      	mov	r0, r5
 802ebba:	f7ff f9e1 	bl	802df80 <__sinit>
 802ebbe:	4b2e      	ldr	r3, [pc, #184]	; (802ec78 <__swsetup_r+0xd0>)
 802ebc0:	429c      	cmp	r4, r3
 802ebc2:	d10f      	bne.n	802ebe4 <__swsetup_r+0x3c>
 802ebc4:	686c      	ldr	r4, [r5, #4]
 802ebc6:	89a3      	ldrh	r3, [r4, #12]
 802ebc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ebcc:	0719      	lsls	r1, r3, #28
 802ebce:	d42c      	bmi.n	802ec2a <__swsetup_r+0x82>
 802ebd0:	06dd      	lsls	r5, r3, #27
 802ebd2:	d411      	bmi.n	802ebf8 <__swsetup_r+0x50>
 802ebd4:	2309      	movs	r3, #9
 802ebd6:	6033      	str	r3, [r6, #0]
 802ebd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802ebdc:	81a3      	strh	r3, [r4, #12]
 802ebde:	f04f 30ff 	mov.w	r0, #4294967295
 802ebe2:	e03e      	b.n	802ec62 <__swsetup_r+0xba>
 802ebe4:	4b25      	ldr	r3, [pc, #148]	; (802ec7c <__swsetup_r+0xd4>)
 802ebe6:	429c      	cmp	r4, r3
 802ebe8:	d101      	bne.n	802ebee <__swsetup_r+0x46>
 802ebea:	68ac      	ldr	r4, [r5, #8]
 802ebec:	e7eb      	b.n	802ebc6 <__swsetup_r+0x1e>
 802ebee:	4b24      	ldr	r3, [pc, #144]	; (802ec80 <__swsetup_r+0xd8>)
 802ebf0:	429c      	cmp	r4, r3
 802ebf2:	bf08      	it	eq
 802ebf4:	68ec      	ldreq	r4, [r5, #12]
 802ebf6:	e7e6      	b.n	802ebc6 <__swsetup_r+0x1e>
 802ebf8:	0758      	lsls	r0, r3, #29
 802ebfa:	d512      	bpl.n	802ec22 <__swsetup_r+0x7a>
 802ebfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ebfe:	b141      	cbz	r1, 802ec12 <__swsetup_r+0x6a>
 802ec00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ec04:	4299      	cmp	r1, r3
 802ec06:	d002      	beq.n	802ec0e <__swsetup_r+0x66>
 802ec08:	4630      	mov	r0, r6
 802ec0a:	f7ff fac7 	bl	802e19c <_free_r>
 802ec0e:	2300      	movs	r3, #0
 802ec10:	6363      	str	r3, [r4, #52]	; 0x34
 802ec12:	89a3      	ldrh	r3, [r4, #12]
 802ec14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802ec18:	81a3      	strh	r3, [r4, #12]
 802ec1a:	2300      	movs	r3, #0
 802ec1c:	6063      	str	r3, [r4, #4]
 802ec1e:	6923      	ldr	r3, [r4, #16]
 802ec20:	6023      	str	r3, [r4, #0]
 802ec22:	89a3      	ldrh	r3, [r4, #12]
 802ec24:	f043 0308 	orr.w	r3, r3, #8
 802ec28:	81a3      	strh	r3, [r4, #12]
 802ec2a:	6923      	ldr	r3, [r4, #16]
 802ec2c:	b94b      	cbnz	r3, 802ec42 <__swsetup_r+0x9a>
 802ec2e:	89a3      	ldrh	r3, [r4, #12]
 802ec30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802ec34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802ec38:	d003      	beq.n	802ec42 <__swsetup_r+0x9a>
 802ec3a:	4621      	mov	r1, r4
 802ec3c:	4630      	mov	r0, r6
 802ec3e:	f000 f98b 	bl	802ef58 <__smakebuf_r>
 802ec42:	89a0      	ldrh	r0, [r4, #12]
 802ec44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ec48:	f010 0301 	ands.w	r3, r0, #1
 802ec4c:	d00a      	beq.n	802ec64 <__swsetup_r+0xbc>
 802ec4e:	2300      	movs	r3, #0
 802ec50:	60a3      	str	r3, [r4, #8]
 802ec52:	6963      	ldr	r3, [r4, #20]
 802ec54:	425b      	negs	r3, r3
 802ec56:	61a3      	str	r3, [r4, #24]
 802ec58:	6923      	ldr	r3, [r4, #16]
 802ec5a:	b943      	cbnz	r3, 802ec6e <__swsetup_r+0xc6>
 802ec5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802ec60:	d1ba      	bne.n	802ebd8 <__swsetup_r+0x30>
 802ec62:	bd70      	pop	{r4, r5, r6, pc}
 802ec64:	0781      	lsls	r1, r0, #30
 802ec66:	bf58      	it	pl
 802ec68:	6963      	ldrpl	r3, [r4, #20]
 802ec6a:	60a3      	str	r3, [r4, #8]
 802ec6c:	e7f4      	b.n	802ec58 <__swsetup_r+0xb0>
 802ec6e:	2000      	movs	r0, #0
 802ec70:	e7f7      	b.n	802ec62 <__swsetup_r+0xba>
 802ec72:	bf00      	nop
 802ec74:	20000098 	.word	0x20000098
 802ec78:	08033a98 	.word	0x08033a98
 802ec7c:	08033ab8 	.word	0x08033ab8
 802ec80:	08033a78 	.word	0x08033a78

0802ec84 <__register_exitproc>:
 802ec84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ec88:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802ed44 <__register_exitproc+0xc0>
 802ec8c:	4606      	mov	r6, r0
 802ec8e:	f8d8 0000 	ldr.w	r0, [r8]
 802ec92:	461f      	mov	r7, r3
 802ec94:	460d      	mov	r5, r1
 802ec96:	4691      	mov	r9, r2
 802ec98:	f7ff fa47 	bl	802e12a <__retarget_lock_acquire_recursive>
 802ec9c:	4b25      	ldr	r3, [pc, #148]	; (802ed34 <__register_exitproc+0xb0>)
 802ec9e:	681c      	ldr	r4, [r3, #0]
 802eca0:	b934      	cbnz	r4, 802ecb0 <__register_exitproc+0x2c>
 802eca2:	4c25      	ldr	r4, [pc, #148]	; (802ed38 <__register_exitproc+0xb4>)
 802eca4:	601c      	str	r4, [r3, #0]
 802eca6:	4b25      	ldr	r3, [pc, #148]	; (802ed3c <__register_exitproc+0xb8>)
 802eca8:	b113      	cbz	r3, 802ecb0 <__register_exitproc+0x2c>
 802ecaa:	681b      	ldr	r3, [r3, #0]
 802ecac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802ecb0:	6863      	ldr	r3, [r4, #4]
 802ecb2:	2b1f      	cmp	r3, #31
 802ecb4:	dd07      	ble.n	802ecc6 <__register_exitproc+0x42>
 802ecb6:	f8d8 0000 	ldr.w	r0, [r8]
 802ecba:	f7ff fa38 	bl	802e12e <__retarget_lock_release_recursive>
 802ecbe:	f04f 30ff 	mov.w	r0, #4294967295
 802ecc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ecc6:	b34e      	cbz	r6, 802ed1c <__register_exitproc+0x98>
 802ecc8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802eccc:	b988      	cbnz	r0, 802ecf2 <__register_exitproc+0x6e>
 802ecce:	4b1c      	ldr	r3, [pc, #112]	; (802ed40 <__register_exitproc+0xbc>)
 802ecd0:	b923      	cbnz	r3, 802ecdc <__register_exitproc+0x58>
 802ecd2:	f8d8 0000 	ldr.w	r0, [r8]
 802ecd6:	f7ff fa29 	bl	802e12c <__retarget_lock_release>
 802ecda:	e7f0      	b.n	802ecbe <__register_exitproc+0x3a>
 802ecdc:	f44f 7084 	mov.w	r0, #264	; 0x108
 802ece0:	f7ff fa26 	bl	802e130 <malloc>
 802ece4:	2800      	cmp	r0, #0
 802ece6:	d0f4      	beq.n	802ecd2 <__register_exitproc+0x4e>
 802ece8:	2300      	movs	r3, #0
 802ecea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802ecee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802ecf2:	6863      	ldr	r3, [r4, #4]
 802ecf4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802ecf8:	2201      	movs	r2, #1
 802ecfa:	409a      	lsls	r2, r3
 802ecfc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802ed00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802ed04:	4313      	orrs	r3, r2
 802ed06:	2e02      	cmp	r6, #2
 802ed08:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802ed0c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802ed10:	bf02      	ittt	eq
 802ed12:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802ed16:	431a      	orreq	r2, r3
 802ed18:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802ed1c:	6863      	ldr	r3, [r4, #4]
 802ed1e:	f8d8 0000 	ldr.w	r0, [r8]
 802ed22:	1c5a      	adds	r2, r3, #1
 802ed24:	3302      	adds	r3, #2
 802ed26:	6062      	str	r2, [r4, #4]
 802ed28:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802ed2c:	f7ff f9ff 	bl	802e12e <__retarget_lock_release_recursive>
 802ed30:	2000      	movs	r0, #0
 802ed32:	e7c6      	b.n	802ecc2 <__register_exitproc+0x3e>
 802ed34:	20009a60 	.word	0x20009a60
 802ed38:	200099d4 	.word	0x200099d4
 802ed3c:	08033b10 	.word	0x08033b10
 802ed40:	0802e131 	.word	0x0802e131
 802ed44:	200000fc 	.word	0x200000fc

0802ed48 <_close_r>:
 802ed48:	b538      	push	{r3, r4, r5, lr}
 802ed4a:	4d06      	ldr	r5, [pc, #24]	; (802ed64 <_close_r+0x1c>)
 802ed4c:	2300      	movs	r3, #0
 802ed4e:	4604      	mov	r4, r0
 802ed50:	4608      	mov	r0, r1
 802ed52:	602b      	str	r3, [r5, #0]
 802ed54:	f7d5 fa6f 	bl	8004236 <_close>
 802ed58:	1c43      	adds	r3, r0, #1
 802ed5a:	d102      	bne.n	802ed62 <_close_r+0x1a>
 802ed5c:	682b      	ldr	r3, [r5, #0]
 802ed5e:	b103      	cbz	r3, 802ed62 <_close_r+0x1a>
 802ed60:	6023      	str	r3, [r4, #0]
 802ed62:	bd38      	pop	{r3, r4, r5, pc}
 802ed64:	2000b628 	.word	0x2000b628

0802ed68 <__sflush_r>:
 802ed68:	898a      	ldrh	r2, [r1, #12]
 802ed6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ed6e:	4605      	mov	r5, r0
 802ed70:	0710      	lsls	r0, r2, #28
 802ed72:	460c      	mov	r4, r1
 802ed74:	d458      	bmi.n	802ee28 <__sflush_r+0xc0>
 802ed76:	684b      	ldr	r3, [r1, #4]
 802ed78:	2b00      	cmp	r3, #0
 802ed7a:	dc05      	bgt.n	802ed88 <__sflush_r+0x20>
 802ed7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802ed7e:	2b00      	cmp	r3, #0
 802ed80:	dc02      	bgt.n	802ed88 <__sflush_r+0x20>
 802ed82:	2000      	movs	r0, #0
 802ed84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ed88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ed8a:	2e00      	cmp	r6, #0
 802ed8c:	d0f9      	beq.n	802ed82 <__sflush_r+0x1a>
 802ed8e:	2300      	movs	r3, #0
 802ed90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802ed94:	682f      	ldr	r7, [r5, #0]
 802ed96:	602b      	str	r3, [r5, #0]
 802ed98:	d032      	beq.n	802ee00 <__sflush_r+0x98>
 802ed9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802ed9c:	89a3      	ldrh	r3, [r4, #12]
 802ed9e:	075a      	lsls	r2, r3, #29
 802eda0:	d505      	bpl.n	802edae <__sflush_r+0x46>
 802eda2:	6863      	ldr	r3, [r4, #4]
 802eda4:	1ac0      	subs	r0, r0, r3
 802eda6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802eda8:	b10b      	cbz	r3, 802edae <__sflush_r+0x46>
 802edaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802edac:	1ac0      	subs	r0, r0, r3
 802edae:	2300      	movs	r3, #0
 802edb0:	4602      	mov	r2, r0
 802edb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802edb4:	6a21      	ldr	r1, [r4, #32]
 802edb6:	4628      	mov	r0, r5
 802edb8:	47b0      	blx	r6
 802edba:	1c43      	adds	r3, r0, #1
 802edbc:	89a3      	ldrh	r3, [r4, #12]
 802edbe:	d106      	bne.n	802edce <__sflush_r+0x66>
 802edc0:	6829      	ldr	r1, [r5, #0]
 802edc2:	291d      	cmp	r1, #29
 802edc4:	d82c      	bhi.n	802ee20 <__sflush_r+0xb8>
 802edc6:	4a2a      	ldr	r2, [pc, #168]	; (802ee70 <__sflush_r+0x108>)
 802edc8:	40ca      	lsrs	r2, r1
 802edca:	07d6      	lsls	r6, r2, #31
 802edcc:	d528      	bpl.n	802ee20 <__sflush_r+0xb8>
 802edce:	2200      	movs	r2, #0
 802edd0:	6062      	str	r2, [r4, #4]
 802edd2:	04d9      	lsls	r1, r3, #19
 802edd4:	6922      	ldr	r2, [r4, #16]
 802edd6:	6022      	str	r2, [r4, #0]
 802edd8:	d504      	bpl.n	802ede4 <__sflush_r+0x7c>
 802edda:	1c42      	adds	r2, r0, #1
 802eddc:	d101      	bne.n	802ede2 <__sflush_r+0x7a>
 802edde:	682b      	ldr	r3, [r5, #0]
 802ede0:	b903      	cbnz	r3, 802ede4 <__sflush_r+0x7c>
 802ede2:	6560      	str	r0, [r4, #84]	; 0x54
 802ede4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ede6:	602f      	str	r7, [r5, #0]
 802ede8:	2900      	cmp	r1, #0
 802edea:	d0ca      	beq.n	802ed82 <__sflush_r+0x1a>
 802edec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802edf0:	4299      	cmp	r1, r3
 802edf2:	d002      	beq.n	802edfa <__sflush_r+0x92>
 802edf4:	4628      	mov	r0, r5
 802edf6:	f7ff f9d1 	bl	802e19c <_free_r>
 802edfa:	2000      	movs	r0, #0
 802edfc:	6360      	str	r0, [r4, #52]	; 0x34
 802edfe:	e7c1      	b.n	802ed84 <__sflush_r+0x1c>
 802ee00:	6a21      	ldr	r1, [r4, #32]
 802ee02:	2301      	movs	r3, #1
 802ee04:	4628      	mov	r0, r5
 802ee06:	47b0      	blx	r6
 802ee08:	1c41      	adds	r1, r0, #1
 802ee0a:	d1c7      	bne.n	802ed9c <__sflush_r+0x34>
 802ee0c:	682b      	ldr	r3, [r5, #0]
 802ee0e:	2b00      	cmp	r3, #0
 802ee10:	d0c4      	beq.n	802ed9c <__sflush_r+0x34>
 802ee12:	2b1d      	cmp	r3, #29
 802ee14:	d001      	beq.n	802ee1a <__sflush_r+0xb2>
 802ee16:	2b16      	cmp	r3, #22
 802ee18:	d101      	bne.n	802ee1e <__sflush_r+0xb6>
 802ee1a:	602f      	str	r7, [r5, #0]
 802ee1c:	e7b1      	b.n	802ed82 <__sflush_r+0x1a>
 802ee1e:	89a3      	ldrh	r3, [r4, #12]
 802ee20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ee24:	81a3      	strh	r3, [r4, #12]
 802ee26:	e7ad      	b.n	802ed84 <__sflush_r+0x1c>
 802ee28:	690f      	ldr	r7, [r1, #16]
 802ee2a:	2f00      	cmp	r7, #0
 802ee2c:	d0a9      	beq.n	802ed82 <__sflush_r+0x1a>
 802ee2e:	0793      	lsls	r3, r2, #30
 802ee30:	680e      	ldr	r6, [r1, #0]
 802ee32:	bf08      	it	eq
 802ee34:	694b      	ldreq	r3, [r1, #20]
 802ee36:	600f      	str	r7, [r1, #0]
 802ee38:	bf18      	it	ne
 802ee3a:	2300      	movne	r3, #0
 802ee3c:	eba6 0807 	sub.w	r8, r6, r7
 802ee40:	608b      	str	r3, [r1, #8]
 802ee42:	f1b8 0f00 	cmp.w	r8, #0
 802ee46:	dd9c      	ble.n	802ed82 <__sflush_r+0x1a>
 802ee48:	6a21      	ldr	r1, [r4, #32]
 802ee4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802ee4c:	4643      	mov	r3, r8
 802ee4e:	463a      	mov	r2, r7
 802ee50:	4628      	mov	r0, r5
 802ee52:	47b0      	blx	r6
 802ee54:	2800      	cmp	r0, #0
 802ee56:	dc06      	bgt.n	802ee66 <__sflush_r+0xfe>
 802ee58:	89a3      	ldrh	r3, [r4, #12]
 802ee5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ee5e:	81a3      	strh	r3, [r4, #12]
 802ee60:	f04f 30ff 	mov.w	r0, #4294967295
 802ee64:	e78e      	b.n	802ed84 <__sflush_r+0x1c>
 802ee66:	4407      	add	r7, r0
 802ee68:	eba8 0800 	sub.w	r8, r8, r0
 802ee6c:	e7e9      	b.n	802ee42 <__sflush_r+0xda>
 802ee6e:	bf00      	nop
 802ee70:	20400001 	.word	0x20400001

0802ee74 <_fflush_r>:
 802ee74:	b538      	push	{r3, r4, r5, lr}
 802ee76:	690b      	ldr	r3, [r1, #16]
 802ee78:	4605      	mov	r5, r0
 802ee7a:	460c      	mov	r4, r1
 802ee7c:	b913      	cbnz	r3, 802ee84 <_fflush_r+0x10>
 802ee7e:	2500      	movs	r5, #0
 802ee80:	4628      	mov	r0, r5
 802ee82:	bd38      	pop	{r3, r4, r5, pc}
 802ee84:	b118      	cbz	r0, 802ee8e <_fflush_r+0x1a>
 802ee86:	6983      	ldr	r3, [r0, #24]
 802ee88:	b90b      	cbnz	r3, 802ee8e <_fflush_r+0x1a>
 802ee8a:	f7ff f879 	bl	802df80 <__sinit>
 802ee8e:	4b14      	ldr	r3, [pc, #80]	; (802eee0 <_fflush_r+0x6c>)
 802ee90:	429c      	cmp	r4, r3
 802ee92:	d11b      	bne.n	802eecc <_fflush_r+0x58>
 802ee94:	686c      	ldr	r4, [r5, #4]
 802ee96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ee9a:	2b00      	cmp	r3, #0
 802ee9c:	d0ef      	beq.n	802ee7e <_fflush_r+0xa>
 802ee9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802eea0:	07d0      	lsls	r0, r2, #31
 802eea2:	d404      	bmi.n	802eeae <_fflush_r+0x3a>
 802eea4:	0599      	lsls	r1, r3, #22
 802eea6:	d402      	bmi.n	802eeae <_fflush_r+0x3a>
 802eea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802eeaa:	f7ff f93e 	bl	802e12a <__retarget_lock_acquire_recursive>
 802eeae:	4628      	mov	r0, r5
 802eeb0:	4621      	mov	r1, r4
 802eeb2:	f7ff ff59 	bl	802ed68 <__sflush_r>
 802eeb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802eeb8:	07da      	lsls	r2, r3, #31
 802eeba:	4605      	mov	r5, r0
 802eebc:	d4e0      	bmi.n	802ee80 <_fflush_r+0xc>
 802eebe:	89a3      	ldrh	r3, [r4, #12]
 802eec0:	059b      	lsls	r3, r3, #22
 802eec2:	d4dd      	bmi.n	802ee80 <_fflush_r+0xc>
 802eec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802eec6:	f7ff f932 	bl	802e12e <__retarget_lock_release_recursive>
 802eeca:	e7d9      	b.n	802ee80 <_fflush_r+0xc>
 802eecc:	4b05      	ldr	r3, [pc, #20]	; (802eee4 <_fflush_r+0x70>)
 802eece:	429c      	cmp	r4, r3
 802eed0:	d101      	bne.n	802eed6 <_fflush_r+0x62>
 802eed2:	68ac      	ldr	r4, [r5, #8]
 802eed4:	e7df      	b.n	802ee96 <_fflush_r+0x22>
 802eed6:	4b04      	ldr	r3, [pc, #16]	; (802eee8 <_fflush_r+0x74>)
 802eed8:	429c      	cmp	r4, r3
 802eeda:	bf08      	it	eq
 802eedc:	68ec      	ldreq	r4, [r5, #12]
 802eede:	e7da      	b.n	802ee96 <_fflush_r+0x22>
 802eee0:	08033a98 	.word	0x08033a98
 802eee4:	08033ab8 	.word	0x08033ab8
 802eee8:	08033a78 	.word	0x08033a78

0802eeec <_lseek_r>:
 802eeec:	b538      	push	{r3, r4, r5, lr}
 802eeee:	4d07      	ldr	r5, [pc, #28]	; (802ef0c <_lseek_r+0x20>)
 802eef0:	4604      	mov	r4, r0
 802eef2:	4608      	mov	r0, r1
 802eef4:	4611      	mov	r1, r2
 802eef6:	2200      	movs	r2, #0
 802eef8:	602a      	str	r2, [r5, #0]
 802eefa:	461a      	mov	r2, r3
 802eefc:	f7d5 f9c2 	bl	8004284 <_lseek>
 802ef00:	1c43      	adds	r3, r0, #1
 802ef02:	d102      	bne.n	802ef0a <_lseek_r+0x1e>
 802ef04:	682b      	ldr	r3, [r5, #0]
 802ef06:	b103      	cbz	r3, 802ef0a <_lseek_r+0x1e>
 802ef08:	6023      	str	r3, [r4, #0]
 802ef0a:	bd38      	pop	{r3, r4, r5, pc}
 802ef0c:	2000b628 	.word	0x2000b628

0802ef10 <__swhatbuf_r>:
 802ef10:	b570      	push	{r4, r5, r6, lr}
 802ef12:	460e      	mov	r6, r1
 802ef14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ef18:	2900      	cmp	r1, #0
 802ef1a:	b096      	sub	sp, #88	; 0x58
 802ef1c:	4614      	mov	r4, r2
 802ef1e:	461d      	mov	r5, r3
 802ef20:	da07      	bge.n	802ef32 <__swhatbuf_r+0x22>
 802ef22:	2300      	movs	r3, #0
 802ef24:	602b      	str	r3, [r5, #0]
 802ef26:	89b3      	ldrh	r3, [r6, #12]
 802ef28:	061a      	lsls	r2, r3, #24
 802ef2a:	d410      	bmi.n	802ef4e <__swhatbuf_r+0x3e>
 802ef2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802ef30:	e00e      	b.n	802ef50 <__swhatbuf_r+0x40>
 802ef32:	466a      	mov	r2, sp
 802ef34:	f000 f86e 	bl	802f014 <_fstat_r>
 802ef38:	2800      	cmp	r0, #0
 802ef3a:	dbf2      	blt.n	802ef22 <__swhatbuf_r+0x12>
 802ef3c:	9a01      	ldr	r2, [sp, #4]
 802ef3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802ef42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802ef46:	425a      	negs	r2, r3
 802ef48:	415a      	adcs	r2, r3
 802ef4a:	602a      	str	r2, [r5, #0]
 802ef4c:	e7ee      	b.n	802ef2c <__swhatbuf_r+0x1c>
 802ef4e:	2340      	movs	r3, #64	; 0x40
 802ef50:	2000      	movs	r0, #0
 802ef52:	6023      	str	r3, [r4, #0]
 802ef54:	b016      	add	sp, #88	; 0x58
 802ef56:	bd70      	pop	{r4, r5, r6, pc}

0802ef58 <__smakebuf_r>:
 802ef58:	898b      	ldrh	r3, [r1, #12]
 802ef5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ef5c:	079d      	lsls	r5, r3, #30
 802ef5e:	4606      	mov	r6, r0
 802ef60:	460c      	mov	r4, r1
 802ef62:	d507      	bpl.n	802ef74 <__smakebuf_r+0x1c>
 802ef64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802ef68:	6023      	str	r3, [r4, #0]
 802ef6a:	6123      	str	r3, [r4, #16]
 802ef6c:	2301      	movs	r3, #1
 802ef6e:	6163      	str	r3, [r4, #20]
 802ef70:	b002      	add	sp, #8
 802ef72:	bd70      	pop	{r4, r5, r6, pc}
 802ef74:	ab01      	add	r3, sp, #4
 802ef76:	466a      	mov	r2, sp
 802ef78:	f7ff ffca 	bl	802ef10 <__swhatbuf_r>
 802ef7c:	9900      	ldr	r1, [sp, #0]
 802ef7e:	4605      	mov	r5, r0
 802ef80:	4630      	mov	r0, r6
 802ef82:	f7ff f95b 	bl	802e23c <_malloc_r>
 802ef86:	b948      	cbnz	r0, 802ef9c <__smakebuf_r+0x44>
 802ef88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ef8c:	059a      	lsls	r2, r3, #22
 802ef8e:	d4ef      	bmi.n	802ef70 <__smakebuf_r+0x18>
 802ef90:	f023 0303 	bic.w	r3, r3, #3
 802ef94:	f043 0302 	orr.w	r3, r3, #2
 802ef98:	81a3      	strh	r3, [r4, #12]
 802ef9a:	e7e3      	b.n	802ef64 <__smakebuf_r+0xc>
 802ef9c:	4b0d      	ldr	r3, [pc, #52]	; (802efd4 <__smakebuf_r+0x7c>)
 802ef9e:	62b3      	str	r3, [r6, #40]	; 0x28
 802efa0:	89a3      	ldrh	r3, [r4, #12]
 802efa2:	6020      	str	r0, [r4, #0]
 802efa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802efa8:	81a3      	strh	r3, [r4, #12]
 802efaa:	9b00      	ldr	r3, [sp, #0]
 802efac:	6163      	str	r3, [r4, #20]
 802efae:	9b01      	ldr	r3, [sp, #4]
 802efb0:	6120      	str	r0, [r4, #16]
 802efb2:	b15b      	cbz	r3, 802efcc <__smakebuf_r+0x74>
 802efb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802efb8:	4630      	mov	r0, r6
 802efba:	f000 f83d 	bl	802f038 <_isatty_r>
 802efbe:	b128      	cbz	r0, 802efcc <__smakebuf_r+0x74>
 802efc0:	89a3      	ldrh	r3, [r4, #12]
 802efc2:	f023 0303 	bic.w	r3, r3, #3
 802efc6:	f043 0301 	orr.w	r3, r3, #1
 802efca:	81a3      	strh	r3, [r4, #12]
 802efcc:	89a0      	ldrh	r0, [r4, #12]
 802efce:	4305      	orrs	r5, r0
 802efd0:	81a5      	strh	r5, [r4, #12]
 802efd2:	e7cd      	b.n	802ef70 <__smakebuf_r+0x18>
 802efd4:	0802df19 	.word	0x0802df19

0802efd8 <__malloc_lock>:
 802efd8:	4801      	ldr	r0, [pc, #4]	; (802efe0 <__malloc_lock+0x8>)
 802efda:	f7ff b8a6 	b.w	802e12a <__retarget_lock_acquire_recursive>
 802efde:	bf00      	nop
 802efe0:	2000b620 	.word	0x2000b620

0802efe4 <__malloc_unlock>:
 802efe4:	4801      	ldr	r0, [pc, #4]	; (802efec <__malloc_unlock+0x8>)
 802efe6:	f7ff b8a2 	b.w	802e12e <__retarget_lock_release_recursive>
 802efea:	bf00      	nop
 802efec:	2000b620 	.word	0x2000b620

0802eff0 <_read_r>:
 802eff0:	b538      	push	{r3, r4, r5, lr}
 802eff2:	4d07      	ldr	r5, [pc, #28]	; (802f010 <_read_r+0x20>)
 802eff4:	4604      	mov	r4, r0
 802eff6:	4608      	mov	r0, r1
 802eff8:	4611      	mov	r1, r2
 802effa:	2200      	movs	r2, #0
 802effc:	602a      	str	r2, [r5, #0]
 802effe:	461a      	mov	r2, r3
 802f000:	f7d5 f8e0 	bl	80041c4 <_read>
 802f004:	1c43      	adds	r3, r0, #1
 802f006:	d102      	bne.n	802f00e <_read_r+0x1e>
 802f008:	682b      	ldr	r3, [r5, #0]
 802f00a:	b103      	cbz	r3, 802f00e <_read_r+0x1e>
 802f00c:	6023      	str	r3, [r4, #0]
 802f00e:	bd38      	pop	{r3, r4, r5, pc}
 802f010:	2000b628 	.word	0x2000b628

0802f014 <_fstat_r>:
 802f014:	b538      	push	{r3, r4, r5, lr}
 802f016:	4d07      	ldr	r5, [pc, #28]	; (802f034 <_fstat_r+0x20>)
 802f018:	2300      	movs	r3, #0
 802f01a:	4604      	mov	r4, r0
 802f01c:	4608      	mov	r0, r1
 802f01e:	4611      	mov	r1, r2
 802f020:	602b      	str	r3, [r5, #0]
 802f022:	f7d5 f914 	bl	800424e <_fstat>
 802f026:	1c43      	adds	r3, r0, #1
 802f028:	d102      	bne.n	802f030 <_fstat_r+0x1c>
 802f02a:	682b      	ldr	r3, [r5, #0]
 802f02c:	b103      	cbz	r3, 802f030 <_fstat_r+0x1c>
 802f02e:	6023      	str	r3, [r4, #0]
 802f030:	bd38      	pop	{r3, r4, r5, pc}
 802f032:	bf00      	nop
 802f034:	2000b628 	.word	0x2000b628

0802f038 <_isatty_r>:
 802f038:	b538      	push	{r3, r4, r5, lr}
 802f03a:	4d06      	ldr	r5, [pc, #24]	; (802f054 <_isatty_r+0x1c>)
 802f03c:	2300      	movs	r3, #0
 802f03e:	4604      	mov	r4, r0
 802f040:	4608      	mov	r0, r1
 802f042:	602b      	str	r3, [r5, #0]
 802f044:	f7d5 f913 	bl	800426e <_isatty>
 802f048:	1c43      	adds	r3, r0, #1
 802f04a:	d102      	bne.n	802f052 <_isatty_r+0x1a>
 802f04c:	682b      	ldr	r3, [r5, #0]
 802f04e:	b103      	cbz	r3, 802f052 <_isatty_r+0x1a>
 802f050:	6023      	str	r3, [r4, #0]
 802f052:	bd38      	pop	{r3, r4, r5, pc}
 802f054:	2000b628 	.word	0x2000b628

0802f058 <_init>:
 802f058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f05a:	bf00      	nop
 802f05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f05e:	bc08      	pop	{r3}
 802f060:	469e      	mov	lr, r3
 802f062:	4770      	bx	lr

0802f064 <_fini>:
 802f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f066:	bf00      	nop
 802f068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f06a:	bc08      	pop	{r3}
 802f06c:	469e      	mov	lr, r3
 802f06e:	4770      	bx	lr
